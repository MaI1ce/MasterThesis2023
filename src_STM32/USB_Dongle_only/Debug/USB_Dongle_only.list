
USB_Dongle_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016194  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  080162d8  080162d8  000262d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016a3c  08016a3c  00026a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016a44  08016a44  00026a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016a48  08016a48  00026a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  20000008  08016a4c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b90  2000016c  08016bb0  0003016c  2**2
                  ALLOC
  8 ._user_heap_stack 00020204  20001cfc  08016bb0  00031cfc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025475  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000581c  00000000  00000000  00055611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002298  00000000  00000000  0005ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002020  00000000  00000000  0005d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027d16  00000000  00000000  0005f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002933e  00000000  00000000  00086dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e6fa2  00000000  00000000  000b013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001970de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093b0  00000000  00000000  00197130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	080162bc 	.word	0x080162bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	080162bc 	.word	0x080162bc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4013      	ands	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	f5ad 5d0c 	sub.w	sp, sp, #8960	; 0x2300
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fe03 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f9c7 	bl	8000928 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059a:	f000 fa1f 	bl	80009dc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800059e:	f000 fa3d 	bl	8000a1c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fafd 	bl	8000ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 fae9 	bl	8000b7c <MX_DMA_Init>
  MX_RF_Init();
 80005aa:	f000 fa4b 	bl	8000a44 <MX_RF_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 fa99 	bl	8000ae4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005b2:	f000 fa65 	bl	8000a80 <MX_RTC_Init>
  MX_USB_Device_Init();
 80005b6:	f00a f9c7 	bl	800a948 <MX_USB_Device_Init>
  MX_RNG_Init();
 80005ba:	f000 fa4b 	bl	8000a54 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // YELLOW LED
 80005be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c2:	48ce      	ldr	r0, [pc, #824]	; (80008fc <main+0x374>)
 80005c4:	f001 fae8 	bl	8001b98 <HAL_GPIO_TogglePin>
  char msg_buf[80] = "Dilithium Signature Start\r\n";
 80005c8:	4bcd      	ldr	r3, [pc, #820]	; (8000900 <main+0x378>)
 80005ca:	f507 540a 	add.w	r4, r7, #8832	; 0x2280
 80005ce:	f104 0438 	add.w	r4, r4, #56	; 0x38
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005e0:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80005e4:	f103 0314 	add.w	r3, r3, #20
 80005e8:	2234      	movs	r2, #52	; 0x34
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f015 f9fd 	bl	80159ec <memset>
  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80005f2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80005f6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4618      	mov	r0, r3
 80005fe:	f00a fa61 	bl	800aac4 <CDC_Transmit_FS>

  unsigned int i, j;
  int ret;
  size_t mlen, smlen;
  uint8_t m[MLEN] = { 0 };
 8000602:	2300      	movs	r3, #0
 8000604:	f507 5209 	add.w	r2, r7, #8768	; 0x2240
 8000608:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 8000612:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000616:	2237      	movs	r2, #55	; 0x37
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f015 f9e6 	bl	80159ec <memset>
  uint8_t sm[MLEN + CRYPTO_BYTES];
  uint8_t m2[MLEN + CRYPTO_BYTES];
  uint8_t pk[CRYPTO_PUBLICKEYBYTES];
  uint8_t sk[CRYPTO_SECRETKEYBYTES];

  uint8_t test_ok = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000626:	f102 020b 	add.w	r2, r2, #11
 800062a:	7013      	strb	r3, [r2, #0]

  for (i = 0; i < NTESTS; ++i) {
 800062c:	2300      	movs	r3, #0
 800062e:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000632:	f102 0214 	add.w	r2, r2, #20
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	e0f8      	b.n	800082c <main+0x2a4>
	  randombytes(&hrng, m, MLEN);
 800063a:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 800063e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000642:	223b      	movs	r2, #59	; 0x3b
 8000644:	4619      	mov	r1, r3
 8000646:	48af      	ldr	r0, [pc, #700]	; (8000904 <main+0x37c>)
 8000648:	f014 fb87 	bl	8014d5a <randombytes>

	  crypto_sign_keypair(&hrng, pk, sk);
 800064c:	f107 0218 	add.w	r2, r7, #24
 8000650:	3a14      	subs	r2, #20
 8000652:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8000656:	3b04      	subs	r3, #4
 8000658:	4619      	mov	r1, r3
 800065a:	48aa      	ldr	r0, [pc, #680]	; (8000904 <main+0x37c>)
 800065c:	f014 fcd3 	bl	8015006 <pqcrystals_dilithium2aes_r_ref_keypair>
	  crypto_sign(&hrng, sm, &smlen, m, MLEN, sk);
 8000660:	f507 5009 	add.w	r0, r7, #8768	; 0x2240
 8000664:	f100 0034 	add.w	r0, r0, #52	; 0x34
 8000668:	f507 520a 	add.w	r2, r7, #8832	; 0x2280
 800066c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000670:	f507 51c6 	add.w	r1, r7, #6336	; 0x18c0
 8000674:	f101 0104 	add.w	r1, r1, #4
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	3b14      	subs	r3, #20
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	233b      	movs	r3, #59	; 0x3b
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4603      	mov	r3, r0
 8000686:	489f      	ldr	r0, [pc, #636]	; (8000904 <main+0x37c>)
 8000688:	f014 ffa0 	bl	80155cc <pqcrystals_dilithium2aes_r_ref>
	  ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
 800068c:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000690:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000694:	681c      	ldr	r4, [r3, #0]
 8000696:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 800069a:	f102 0204 	add.w	r2, r2, #4
 800069e:	f507 510a 	add.w	r1, r7, #8832	; 0x2280
 80006a2:	f101 0134 	add.w	r1, r1, #52	; 0x34
 80006a6:	f607 7018 	addw	r0, r7, #3864	; 0xf18
 80006aa:	3804      	subs	r0, #4
 80006ac:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80006b0:	3b04      	subs	r3, #4
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4623      	mov	r3, r4
 80006b6:	f015 f8e8 	bl	801588a <pqcrystals_dilithium2aes_r_ref_open>
 80006ba:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80006be:	f103 030c 	add.w	r3, r3, #12
 80006c2:	6018      	str	r0, [r3, #0]

	  memset(msg_buf, 0, sizeof(msg_buf));
 80006c4:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80006c8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006cc:	2250      	movs	r2, #80	; 0x50
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f015 f98b 	bl	80159ec <memset>
	  if (ret) {
 80006d6:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80006da:	f103 030c 	add.w	r3, r3, #12
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d020      	beq.n	8000726 <main+0x19e>
		  sprintf(msg_buf, "Verification failed - err_code = %d\r\n", ret);
 80006e4:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80006e8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006ec:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80006f0:	f102 020c 	add.w	r2, r2, #12
 80006f4:	6812      	ldr	r2, [r2, #0]
 80006f6:	4984      	ldr	r1, [pc, #528]	; (8000908 <main+0x380>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f015 f97f 	bl	80159fc <siprintf>
		  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80006fe:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000702:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000706:	2150      	movs	r1, #80	; 0x50
 8000708:	4618      	mov	r0, r3
 800070a:	f00a f9db 	bl	800aac4 <CDC_Transmit_FS>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4879      	ldr	r0, [pc, #484]	; (80008fc <main+0x374>)
 8000716:	f001 fa27 	bl	8001b68 <HAL_GPIO_WritePin>
		  test_ok = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000720:	f102 020b 	add.w	r2, r2, #11
 8000724:	7013      	strb	r3, [r2, #0]
		  //return -1;
	  }

	  if (mlen != MLEN) {
 8000726:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 800072a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b3b      	cmp	r3, #59	; 0x3b
 8000732:	d01b      	beq.n	800076c <main+0x1e4>
		  sprintf(msg_buf, "Message lengths don't match\r\n");
 8000734:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000738:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800073c:	4973      	ldr	r1, [pc, #460]	; (800090c <main+0x384>)
 800073e:	4618      	mov	r0, r3
 8000740:	f015 f95c 	bl	80159fc <siprintf>
		  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 8000744:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000748:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800074c:	2150      	movs	r1, #80	; 0x50
 800074e:	4618      	mov	r0, r3
 8000750:	f00a f9b8 	bl	800aac4 <CDC_Transmit_FS>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075a:	4868      	ldr	r0, [pc, #416]	; (80008fc <main+0x374>)
 800075c:	f001 fa04 	bl	8001b68 <HAL_GPIO_WritePin>
		  test_ok = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000766:	f102 020b 	add.w	r2, r2, #11
 800076a:	7013      	strb	r3, [r2, #0]
		  //return -1;
	  }

	  for (j = 0; j < mlen; ++j) {
 800076c:	2300      	movs	r3, #0
 800076e:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000772:	f102 0210 	add.w	r2, r2, #16
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	e041      	b.n	80007fe <main+0x276>
		  if (m[j] != m2[j]) {
 800077a:	f507 5209 	add.w	r2, r7, #8768	; 0x2240
 800077e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000782:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 8000786:	f103 0310 	add.w	r3, r3, #16
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4413      	add	r3, r2
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8000794:	f103 0318 	add.w	r3, r3, #24
 8000798:	f2a3 4104 	subw	r1, r3, #1028	; 0x404
 800079c:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80007a0:	f103 0310 	add.w	r3, r3, #16
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	440b      	add	r3, r1
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d01c      	beq.n	80007e8 <main+0x260>
			  sprintf(msg_buf, "Messages don't match\r\n");
 80007ae:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80007b2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80007b6:	4956      	ldr	r1, [pc, #344]	; (8000910 <main+0x388>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f015 f91f 	bl	80159fc <siprintf>
			  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80007be:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80007c2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80007c6:	2150      	movs	r1, #80	; 0x50
 80007c8:	4618      	mov	r0, r3
 80007ca:	f00a f97b 	bl	800aac4 <CDC_Transmit_FS>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4849      	ldr	r0, [pc, #292]	; (80008fc <main+0x374>)
 80007d6:	f001 f9c7 	bl	8001b68 <HAL_GPIO_WritePin>
			  test_ok = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80007e0:	f102 020b 	add.w	r2, r2, #11
 80007e4:	7013      	strb	r3, [r2, #0]
			  break;
 80007e6:	e016      	b.n	8000816 <main+0x28e>
	  for (j = 0; j < mlen; ++j) {
 80007e8:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80007ec:	f103 0310 	add.w	r3, r3, #16
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80007f8:	f102 0210 	add.w	r2, r2, #16
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000802:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 800080c:	f102 0210 	add.w	r2, r2, #16
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3b1      	bcc.n	800077a <main+0x1f2>
  for (i = 0; i < NTESTS; ++i) {
 8000816:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 800081a:	f103 0314 	add.w	r3, r3, #20
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000826:	f102 0214 	add.w	r2, r2, #20
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 8000830:	f103 0314 	add.w	r3, r3, #20
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	f43f aeff 	beq.w	800063a <main+0xb2>
		  //return -1;
	  }
*/
  }

  memset(msg_buf, 0, sizeof(msg_buf));
 800083c:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000840:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000844:	2250      	movs	r2, #80	; 0x50
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f015 f8cf 	bl	80159ec <memset>
  sprintf(msg_buf, "Program Compilation Date: %s %s\r\n", __DATE__, __TIME__);
 800084e:	f507 500a 	add.w	r0, r7, #8832	; 0x2280
 8000852:	f100 0038 	add.w	r0, r0, #56	; 0x38
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <main+0x38c>)
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <main+0x390>)
 800085a:	4930      	ldr	r1, [pc, #192]	; (800091c <main+0x394>)
 800085c:	f015 f8ce 	bl	80159fc <siprintf>
  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 8000860:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000864:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000868:	2150      	movs	r1, #80	; 0x50
 800086a:	4618      	mov	r0, r3
 800086c:	f00a f92a 	bl	800aac4 <CDC_Transmit_FS>
  if (test_ok){
 8000870:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 8000874:	f103 030b 	add.w	r3, r3, #11
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d016      	beq.n	80008ac <main+0x324>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // GREEN LED
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <main+0x374>)
 8000884:	f001 f988 	bl	8001b98 <HAL_GPIO_TogglePin>
	  memset(msg_buf, 0, sizeof(msg_buf));
 8000888:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 800088c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000890:	2250      	movs	r2, #80	; 0x50
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f015 f8a9 	bl	80159ec <memset>
	  sprintf(msg_buf, "New Dilithium - OK\r\n");
 800089a:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 800089e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80008a2:	491f      	ldr	r1, [pc, #124]	; (8000920 <main+0x398>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	f015 f8a9 	bl	80159fc <siprintf>
 80008aa:	e015      	b.n	80008d8 <main+0x350>
  }
  else {
	  memset(msg_buf, 0, sizeof(msg_buf));
 80008ac:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80008b0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80008b4:	2250      	movs	r2, #80	; 0x50
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f015 f897 	bl	80159ec <memset>
	  sprintf(msg_buf, "New Dilithium - err_code = %d\r\n", ret);
 80008be:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80008c2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80008c6:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80008ca:	f102 020c 	add.w	r2, r2, #12
 80008ce:	6812      	ldr	r2, [r2, #0]
 80008d0:	4914      	ldr	r1, [pc, #80]	; (8000924 <main+0x39c>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f015 f892 	bl	80159fc <siprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f000 fce4 	bl	80012a8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // YELLOW LED
 80008e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <main+0x374>)
 80008e6:	f001 f957 	bl	8001b98 <HAL_GPIO_TogglePin>
	  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80008ea:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80008ee:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80008f2:	2150      	movs	r1, #80	; 0x50
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00a f8e5 	bl	800aac4 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80008fa:	e7ed      	b.n	80008d8 <main+0x350>
 80008fc:	48000800 	.word	0x48000800
 8000900:	080163ac 	.word	0x080163ac
 8000904:	200001c4 	.word	0x200001c4
 8000908:	080162d8 	.word	0x080162d8
 800090c:	08016300 	.word	0x08016300
 8000910:	08016320 	.word	0x08016320
 8000914:	08016338 	.word	0x08016338
 8000918:	08016344 	.word	0x08016344
 800091c:	08016350 	.word	0x08016350
 8000920:	08016374 	.word	0x08016374
 8000924:	0801638c 	.word	0x0801638c

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09a      	sub	sp, #104	; 0x68
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2248      	movs	r2, #72	; 0x48
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f015 f858 	bl	80159ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <SystemClock_Config+0xb0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000956:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <SystemClock_Config+0xb0>)
 8000958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <SystemClock_Config+0xb0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800096a:	234b      	movs	r3, #75	; 0x4b
 800096c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI1|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800097a:	2301      	movs	r3, #1
 800097c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000982:	2305      	movs	r3, #5
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000986:	2300      	movs	r3, #0
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	4618      	mov	r0, r3
 8000990:	f003 fb48 	bl	8004024 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800099a:	f000 f953 	bl	8000c44 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800099e:	236f      	movs	r3, #111	; 0x6f
 80009a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009a2:	2302      	movs	r3, #2
 80009a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 fea4 	bl	800470c <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ca:	f000 f93b 	bl	8000c44 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3768      	adds	r7, #104	; 0x68
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	58000400 	.word	0x58000400

080009dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2250      	movs	r2, #80	; 0x50
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f014 ffff 	bl	80159ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80009ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009f2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80009f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80009fa:	2300      	movs	r3, #0
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80009fe:	2310      	movs	r3, #16
 8000a00:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4618      	mov	r0, r3
 8000a06:	f004 fabe 	bl	8004f86 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000a10:	f000 f918 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000a14:	bf00      	nop
 8000a16:	3750      	adds	r7, #80	; 0x50
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_IPCC_Init+0x20>)
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <MX_IPCC_Init+0x24>)
 8000a24:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_IPCC_Init+0x20>)
 8000a28:	f001 f8f4 	bl	8001c14 <HAL_IPCC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000a32:	f000 f907 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000188 	.word	0x20000188
 8000a40:	58000c00 	.word	0x58000c00

08000a44 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_RNG_Init+0x24>)
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <MX_RNG_Init+0x28>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_RNG_Init+0x24>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_RNG_Init+0x24>)
 8000a66:	f004 fd15 	bl	8005494 <HAL_RNG_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000a70:	f000 f8e8 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001c4 	.word	0x200001c4
 8000a7c:	58001000 	.word	0x58001000

08000a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_RTC_Init+0x5c>)
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <MX_RTC_Init+0x60>)
 8000a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_RTC_Init+0x5c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_RTC_Init+0x5c>)
 8000a92:	227f      	movs	r2, #127	; 0x7f
 8000a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_RTC_Init+0x5c>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_RTC_Init+0x5c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_RTC_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_RTC_Init+0x5c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_RTC_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_RTC_Init+0x5c>)
 8000ab6:	f004 fd79 	bl	80055ac <HAL_RTC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000ac0:	f000 f8c0 	bl	8000c44 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_RTC_Init+0x5c>)
 8000aca:	f004 fe6f 	bl	80057ac <HAL_RTCEx_SetWakeUpTimer>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f8b6 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001d8 	.word	0x200001d8
 8000ae0:	40002800 	.word	0x40002800

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000aea:	4a23      	ldr	r2, [pc, #140]	; (8000b78 <MX_USART1_UART_Init+0x94>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b2e:	f004 fef8 	bl	8005922 <HAL_UART_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b38:	f000 f884 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b40:	f005 fb59 	bl	80061f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f87b 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b52:	f005 fb8e 	bl	8006272 <HAL_UARTEx_SetRxFifoThreshold>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b5c:	f000 f872 	bl	8000c44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_USART1_UART_Init+0x90>)
 8000b62:	f005 fb0f 	bl	8006184 <HAL_UARTEx_DisableFifoMode>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f86a 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200001fc 	.word	0x200001fc
 8000b78:	40013800 	.word	0x40013800

08000b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b80:	2004      	movs	r0, #4
 8000b82:	f7ff fccf 	bl	8000524 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fccc 	bl	8000524 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	200b      	movs	r0, #11
 8000b92:	f000 fc88 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b96:	200b      	movs	r0, #11
 8000b98:	f000 fc9f 	bl	80014da <HAL_NVIC_EnableIRQ>

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff fcce 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fccb 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	2008      	movs	r0, #8
 8000bc2:	f7ff fcc8 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fcc5 	bl	8000556 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000bd2:	481a      	ldr	r0, [pc, #104]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000bd4:	f000 ffc8 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4818      	ldr	r0, [pc, #96]	; (8000c40 <MX_GPIO_Init+0xa0>)
 8000bde:	f000 ffc3 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTI10_Pin */
  GPIO_InitStruct.Pin = EXTI10_Pin;
 8000be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXTI10_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f000 fe45 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000bfe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <MX_GPIO_Init+0x9c>)
 8000c16:	f000 fe37 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_GPIO_Init+0xa0>)
 8000c30:	f000 fe2a 	bl	8001888 <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	48000c00 	.word	0x48000c00

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <Error_Handler+0x38>)
 8000c52:	f000 ffa1 	bl	8001b98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <Error_Handler+0x38>)
 8000c5c:	f000 ff9c 	bl	8001b98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <Error_Handler+0x38>)
 8000c66:	f000 ff97 	bl	8001b98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <Error_Handler+0x3c>)
 8000c6e:	f000 ff93 	bl	8001b98 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000c72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c76:	f000 fb17 	bl	80012a8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c7a:	e7e7      	b.n	8000c4c <Error_Handler+0x8>
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000c00 	.word	0x48000c00

08000c84 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_AHB2_GRP1_EnableClock>:
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d60:	68fb      	ldr	r3, [r7, #12]
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d76:	f7ff ffaf 	bl	8000cd8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	202e      	movs	r0, #46	; 0x2e
 8000d80:	f000 fb91 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000d84:	202e      	movs	r0, #46	; 0x2e
 8000d86:	f000 fba8 	bl	80014da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_IPCC_MspInit+0x44>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d113      	bne.n	8000dca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000da2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000da6:	f7ff ff97 	bl	8000cd8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	202c      	movs	r0, #44	; 0x2c
 8000db0:	f000 fb79 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000db4:	202c      	movs	r0, #44	; 0x2c
 8000db6:	f000 fb90 	bl	80014da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	202d      	movs	r0, #45	; 0x2d
 8000dc0:	f000 fb71 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000dc4:	202d      	movs	r0, #45	; 0x2d
 8000dc6:	f000 fb88 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	58000c00 	.word	0x58000c00

08000dd8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b096      	sub	sp, #88	; 0x58
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	2250      	movs	r2, #80	; 0x50
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f014 fdff 	bl	80159ec <memset>
  if(hrng->Instance==RNG)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_RNG_MspInit+0x50>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d113      	bne.n	8000e20 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 f8bc 	bl	8004f86 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000e14:	f7ff ff16 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e1c:	f7ff ff5c 	bl	8000cd8 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3758      	adds	r7, #88	; 0x58
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58001000 	.word	0x58001000

08000e2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2250      	movs	r2, #80	; 0x50
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f014 fdd5 	bl	80159ec <memset>
  if(hrtc->Instance==RTC)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_RTC_MspInit+0x54>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d115      	bne.n	8000e78 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e50:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f004 f892 	bl	8004f86 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e68:	f7ff feec 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e6c:	f7ff ff0a 	bl	8000c84 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e74:	f7ff ff49 	bl	8000d0a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3758      	adds	r7, #88	; 0x58
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40002800 	.word	0x40002800

08000e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b09c      	sub	sp, #112	; 0x70
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2250      	movs	r2, #80	; 0x50
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f014 fda1 	bl	80159ec <memset>
  if(huart->Instance==USART1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a2a      	ldr	r2, [pc, #168]	; (8000f58 <HAL_UART_MspInit+0xd4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d14d      	bne.n	8000f50 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 f860 	bl	8004f86 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ecc:	f7ff feba 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ed4:	f7ff ff32 	bl	8000d3c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff fee4 	bl	8000ca6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <HAL_UART_MspInit+0xd8>)
 8000efa:	f000 fcc5 	bl	8001888 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0xe0>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f06:	220f      	movs	r2, #15
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f36:	f000 faeb 	bl	8001510 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000f40:	f7ff fe80 	bl	8000c44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f48:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <HAL_UART_MspInit+0xdc>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3770      	adds	r7, #112	; 0x70
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	20000290 	.word	0x20000290
 8000f64:	40020008 	.word	0x40020008

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f94c 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA1_Channel1_IRQHandler+0x10>)
 8000fc2:	f000 fb4d 	bl	8001660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000290 	.word	0x20000290

08000fd0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <USB_LP_IRQHandler+0x10>)
 8000fd6:	f001 f838 	bl	800204a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200017d8 	.word	0x200017d8

08000fe4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <IPCC_C1_RX_IRQHandler+0x10>)
 8000fea:	f000 fe93 	bl	8001d14 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000188 	.word	0x20000188

08000ff8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <IPCC_C1_TX_IRQHandler+0x10>)
 8000ffe:	f000 fe3b 	bl	8001c78 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000188 	.word	0x20000188

0800100c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001010:	f000 fddc 	bl	8001bcc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f014 fc98 	bl	801597c <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20030000 	.word	0x20030000
 8001078:	00020000 	.word	0x00020000
 800107c:	200002f0 	.word	0x200002f0
 8001080:	20001d00 	.word	0x20001d00

08001084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <SystemInit+0x98>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <SystemInit+0x98>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <SystemInit+0x9c>)
 80010be:	4013      	ands	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ce:	f023 0305 	bic.w	r3, r3, #5
 80010d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80010ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ee:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <SystemInit+0xa0>)
 80010f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <SystemInit+0xa0>)
 80010f8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800110a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	faf6fefb 	.word	0xfaf6fefb
 8001124:	22041000 	.word	0x22041000

08001128 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001128:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112c:	3304      	adds	r3, #4

0800112e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001130:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001132:	d3f9      	bcc.n	8001128 <CopyDataInit>
  bx lr
 8001134:	4770      	bx	lr

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001136:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001138:	3004      	adds	r0, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800113a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>
  bx lr
 800113e:	4770      	bx	lr

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001144:	f7ff ff9e 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <LoopForever+0x6>)
 800114a:	490c      	ldr	r1, [pc, #48]	; (800117c <LoopForever+0xa>)
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <LoopForever+0xe>)
 800114e:	2300      	movs	r3, #0
 8001150:	f7ff ffed 	bl	800112e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <LoopForever+0x12>)
 8001156:	490c      	ldr	r1, [pc, #48]	; (8001188 <LoopForever+0x16>)
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <LoopForever+0x1a>)
 800115a:	2300      	movs	r3, #0
 800115c:	f7ff ffe7 	bl	800112e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <LoopForever+0x1e>)
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <LoopForever+0x22>)
 8001164:	2300      	movs	r3, #0
 8001166:	f7ff ffe8 	bl	800113a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800116a:	f014 fc0d 	bl	8015988 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800116e:	f7ff fa0b 	bl	8000588 <main>

08001172 <LoopForever>:

LoopForever:
  b LoopForever
 8001172:	e7fe      	b.n	8001172 <LoopForever>
  ldr   r0, =_estack
 8001174:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001178:	20000008 	.word	0x20000008
 800117c:	2000016c 	.word	0x2000016c
 8001180:	08016a4c 	.word	0x08016a4c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001184:	20030000 	.word	0x20030000
 8001188:	20030000 	.word	0x20030000
 800118c:	08016bb0 	.word	0x08016bb0
  INIT_BSS _sbss, _ebss
 8001190:	2000016c 	.word	0x2000016c
 8001194:	20001cfc 	.word	0x20001cfc

08001198 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_Init+0x3c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_Init+0x3c>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 f96c 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b8:	200f      	movs	r0, #15
 80011ba:	f000 f80f 	bl	80011dc <HAL_InitTick>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	e001      	b.n	80011ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ca:	f7ff fdd0 	bl	8000d6e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58004000 	.word	0x58004000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d024      	beq.n	800123a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f0:	f003 fc38 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_InitTick+0x6c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	fbb3 f3f1 	udiv	r3, r3, r1
 8001204:	fbb2 f3f3 	udiv	r3, r2, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f974 	bl	80014f6 <HAL_SYSTICK_Config>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10f      	bne.n	8001234 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	d809      	bhi.n	800122e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121a:	2200      	movs	r2, #0
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	f000 f940 	bl	80014a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_InitTick+0x70>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e007      	b.n	800123e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e004      	b.n	800123e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e001      	b.n	800123e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000010 	.word	0x20000010
 800124c:	2000000c 	.word	0x2000000c

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000010 	.word	0x20000010
 8001274:	200002f4 	.word	0x200002f4

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200002f4 	.word	0x200002f4

08001290 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTickPrio+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffe2 	bl	8001278 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffd2 	bl	8001278 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000010 	.word	0x20000010

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff40 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff33 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa4 	bl	800144c <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e08e      	b.n	8001640 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_DMA_Init+0x138>)
 800152a:	429a      	cmp	r2, r3
 800152c:	d80f      	bhi.n	800154e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_DMA_Init+0x13c>)
 8001536:	4413      	add	r3, r2
 8001538:	4a45      	ldr	r2, [pc, #276]	; (8001650 <HAL_DMA_Init+0x140>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	009a      	lsls	r2, r3, #2
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a42      	ldr	r2, [pc, #264]	; (8001654 <HAL_DMA_Init+0x144>)
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
 800154c:	e00e      	b.n	800156c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_DMA_Init+0x148>)
 8001556:	4413      	add	r3, r2
 8001558:	4a3d      	ldr	r2, [pc, #244]	; (8001650 <HAL_DMA_Init+0x140>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	009a      	lsls	r2, r3, #2
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a3c      	ldr	r2, [pc, #240]	; (800165c <HAL_DMA_Init+0x14c>)
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f8fe 	bl	80017c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015cc:	d102      	bne.n	80015d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d010      	beq.n	8001616 <HAL_DMA_Init+0x106>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d80c      	bhi.n	8001616 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f91d 	bl	800183c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	e008      	b.n	8001628 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020407 	.word	0x40020407
 800164c:	bffdfff8 	.word	0xbffdfff8
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40020000 	.word	0x40020000
 8001658:	bffdfbf8 	.word	0xbffdfbf8
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f003 031c 	and.w	r3, r3, #28
 8001680:	2204      	movs	r2, #4
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d026      	beq.n	80016da <HAL_DMA_IRQHandler+0x7a>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	d021      	beq.n	80016da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f003 021c 	and.w	r2, r3, #28
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2104      	movs	r1, #4
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d071      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016d8:	e06c      	b.n	80017b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f003 031c 	and.w	r3, r3, #28
 80016e2:	2202      	movs	r2, #2
 80016e4:	409a      	lsls	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d02e      	beq.n	800174c <HAL_DMA_IRQHandler+0xec>
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d029      	beq.n	800174c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10b      	bne.n	800171e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 020a 	bic.w	r2, r2, #10
 8001714:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f003 021c 	and.w	r2, r3, #28
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2102      	movs	r1, #2
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d038      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800174a:	e033      	b.n	80017b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	f003 031c 	and.w	r3, r3, #28
 8001754:	2208      	movs	r2, #8
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02a      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x156>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d025      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 020e 	bic.w	r2, r2, #14
 8001778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 021c 	and.w	r2, r3, #28
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
}
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d80a      	bhi.n	80017ea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6493      	str	r3, [r2, #72]	; 0x48
 80017e8:	e007      	b.n	80017fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	009a      	lsls	r2, r3, #2
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017f4:	4413      	add	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3b08      	subs	r3, #8
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001810:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2201      	movs	r2, #1
 800181a:	409a      	lsls	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40020407 	.word	0x40020407
 8001830:	4002081c 	.word	0x4002081c
 8001834:	cccccccd 	.word	0xcccccccd
 8001838:	40020880 	.word	0x40020880

0800183c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	461a      	mov	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001860:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2201      	movs	r2, #1
 800186c:	409a      	lsls	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	1000823f 	.word	0x1000823f
 8001884:	40020940 	.word	0x40020940

08001888 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e14c      	b.n	8001b32 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 813e 	beq.w	8001b2c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d005      	beq.n	80018c8 <HAL_GPIO_Init+0x40>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d130      	bne.n	800192a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018fe:	2201      	movs	r2, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	f003 0201 	and.w	r2, r3, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b03      	cmp	r3, #3
 8001934:	d017      	beq.n	8001966 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d123      	bne.n	80019ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	6939      	ldr	r1, [r7, #16]
 80019b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0203 	and.w	r2, r3, #3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8098 	beq.w	8001b2c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80019fc:	4a54      	ldr	r2, [pc, #336]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a26:	d019      	beq.n	8001a5c <HAL_GPIO_Init+0x1d4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d013      	beq.n	8001a58 <HAL_GPIO_Init+0x1d0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a49      	ldr	r2, [pc, #292]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_GPIO_Init+0x1cc>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <HAL_GPIO_Init+0x2d4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x1c8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a47      	ldr	r2, [pc, #284]	; (8001b60 <HAL_GPIO_Init+0x2d8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_GPIO_Init+0x1c4>
 8001a48:	2304      	movs	r3, #4
 8001a4a:	e008      	b.n	8001a5e <HAL_GPIO_Init+0x1d6>
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x1d6>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e004      	b.n	8001a5e <HAL_GPIO_Init+0x1d6>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x1d6>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_GPIO_Init+0x1d6>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a6e:	4938      	ldr	r1, [pc, #224]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa0:	4a30      	ldr	r2, [pc, #192]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aca:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f47f aeab 	bne.w	8001898 <HAL_GPIO_Init+0x10>
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40010000 	.word	0x40010000
 8001b54:	48000400 	.word	0x48000400
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48000c00 	.word	0x48000c00
 8001b60:	48001000 	.word	0x48001000
 8001b64:	58000800 	.word	0x58000800

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43d9      	mvns	r1, r3
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	400b      	ands	r3, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_HSEM_IRQHandler+0x30>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_HSEM_IRQHandler+0x30>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	4906      	ldr	r1, [pc, #24]	; (8001bfc <HAL_HSEM_IRQHandler+0x30>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_HSEM_IRQHandler+0x30>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f807 	bl	8001c00 <HAL_HSEM_FreeCallback>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	58001500 	.word	0x58001500

08001c00 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01e      	beq.n	8001c64 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_IPCC_Init+0x60>)
 8001c28:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff f8aa 	bl	8000d90 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001c3c:	68b8      	ldr	r0, [r7, #8]
 8001c3e:	f000 f8f5 	bl	8001e2c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8c6 	bl	8001de0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001c62:	e001      	b.n	8001c68 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	58000c00 	.word	0x58000c00

08001c78 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_IPCC_TX_IRQHandler+0x98>)
 8001c86:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001c92:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001ca2:	e02c      	b.n	8001cfe <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3310      	adds	r3, #16
 8001cac:	2201      	movs	r2, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01c      	beq.n	8001cf8 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3306      	adds	r3, #6
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	3306      	adds	r3, #6
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	6939      	ldr	r1, [r7, #16]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1cf      	bne.n	8001ca4 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	58000c00 	.word	0x58000c00

08001d14 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_IPCC_RX_IRQHandler+0x90>)
 8001d22:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_IPCC_RX_IRQHandler+0x94>)
 8001d26:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d32:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001d3e:	e029      	b.n	8001d94 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2201      	movs	r2, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01a      	beq.n	8001d8e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1d2      	bne.n	8001d40 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	58000c00 	.word	0x58000c00
 8001da8:	58000c10 	.word	0x58000c10

08001dac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e00f      	b.n	8001e0e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <IPCC_SetDefaultCallbacks+0x44>)
 8001df8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3306      	adds	r3, #6
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <IPCC_SetDefaultCallbacks+0x48>)
 8001e06:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d9ec      	bls.n	8001dee <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	08001dad 	.word	0x08001dad
 8001e28:	08001dc7 	.word	0x08001dc7

08001e2c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001e40:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	223f      	movs	r2, #63	; 0x3f
 8001e46:	609a      	str	r2, [r3, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b08b      	sub	sp, #44	; 0x2c
 8001e58:	af06      	add	r7, sp, #24
 8001e5a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0cb      	b.n	8001ffe <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f008 ff9c 	bl	800adb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fa94 	bl	80063ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	e040      	b.n	8001f1a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	333c      	adds	r3, #60	; 0x3c
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3340      	adds	r3, #64	; 0x40
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	3301      	adds	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d3b9      	bcc.n	8001e98 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	e044      	b.n	8001fb4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3b5      	bcc.n	8001f2a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	687e      	ldr	r6, [r7, #4]
 8001fc6:	466d      	mov	r5, sp
 8001fc8:	f106 0410 	add.w	r4, r6, #16
 8001fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	602b      	str	r3, [r5, #0]
 8001fd4:	1d33      	adds	r3, r6, #4
 8001fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd8:	6838      	ldr	r0, [r7, #0]
 8001fda:	f004 fa09 	bl	80063f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f001 fc45 	bl	8003886 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002006 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_PCD_Start+0x16>
 8002018:	2302      	movs	r3, #2
 800201a:	e012      	b.n	8002042 <HAL_PCD_Start+0x3c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f004 f9af 	bl	800638c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f006 fc73 	bl	800891e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f006 fc78 	bl	800894c <USB_ReadInterrupts>
 800205c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb05 	bl	8002678 <PCD_EP_ISR_Handler>

    return;
 800206e:	e110      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002076:	2b00      	cmp	r3, #0
 8002078:	d013      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800208c:	b292      	uxth	r2, r2
 800208e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f008 ff33 	bl	800aefe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002098:	2100      	movs	r1, #0
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8fc 	bl	8002298 <HAL_PCD_SetAddress>

    return;
 80020a0:	e0f7      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020be:	b292      	uxth	r2, r2
 80020c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020c4:	e0e5      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00c      	beq.n	80020ea <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e2:	b292      	uxth	r2, r2
 80020e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020e8:	e0d3      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d034      	beq.n	800215e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	b292      	uxth	r2, r2
 8002108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002114:	b29a      	uxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0208 	bic.w	r2, r2, #8
 800211e:	b292      	uxth	r2, r2
 8002120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002136:	2100      	movs	r1, #0
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f009 f8d7 	bl	800b2ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f008 ff16 	bl	800af70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002156:	b292      	uxth	r2, r2
 8002158:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800215c:	e099      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002164:	2b00      	cmp	r3, #0
 8002166:	d027      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002170:	b29a      	uxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	b292      	uxth	r2, r2
 800217c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002192:	b292      	uxth	r2, r2
 8002194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0204 	orr.w	r2, r2, #4
 80021aa:	b292      	uxth	r2, r2
 80021ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f008 fec3 	bl	800af3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021b6:	e06c      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d040      	beq.n	8002244 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d4:	b292      	uxth	r2, r2
 80021d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d12b      	bne.n	800223c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0204 	orr.w	r2, r2, #4
 80021f6:	b292      	uxth	r2, r2
 80021f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002204:	b29a      	uxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	b292      	uxth	r2, r2
 8002210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002224:	b29b      	uxth	r3, r3
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002232:	2101      	movs	r1, #1
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f009 f859 	bl	800b2ec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800223a:	e02a      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f008 fe7d 	bl	800af3c <HAL_PCD_SuspendCallback>
    return;
 8002242:	e026      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00f      	beq.n	800226e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002260:	b292      	uxth	r2, r2
 8002262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f008 fe3b 	bl	800aee2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800226c:	e011      	b.n	8002292 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00c      	beq.n	8002292 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800228a:	b292      	uxth	r2, r2
 800228c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002290:	bf00      	nop
  }
}
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_PCD_SetAddress+0x1a>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e013      	b.n	80022da <HAL_PCD_SetAddress+0x42>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f006 fb13 	bl	80088f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	4608      	mov	r0, r1
 80022ec:	4611      	mov	r1, r2
 80022ee:	461a      	mov	r2, r3
 80022f0:	4603      	mov	r3, r0
 80022f2:	70fb      	strb	r3, [r7, #3]
 80022f4:	460b      	mov	r3, r1
 80022f6:	803b      	strh	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da0e      	bge.n	8002326 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	705a      	strb	r2, [r3, #1]
 8002324:	e00e      	b.n	8002344 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 0207 	and.w	r2, r3, #7
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002350:	883a      	ldrh	r2, [r7, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	78ba      	ldrb	r2, [r7, #2]
 800235a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800235c:	78bb      	ldrb	r3, [r7, #2]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d102      	bne.n	8002368 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_PCD_EP_Open+0x94>
 8002372:	2302      	movs	r3, #2
 8002374:	e00e      	b.n	8002394 <HAL_PCD_EP_Open+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f004 f855 	bl	8006434 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002392:	7afb      	ldrb	r3, [r7, #11]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	da0e      	bge.n	80023ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	705a      	strb	r2, [r3, #1]
 80023cc:	e00e      	b.n	80023ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f003 0207 	and.w	r2, r3, #7
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_PCD_EP_Close+0x6a>
 8002402:	2302      	movs	r3, #2
 8002404:	e00e      	b.n	8002424 <HAL_PCD_EP_Close+0x88>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fbd1 	bl	8006bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	460b      	mov	r3, r1
 800243a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	f003 0207 	and.w	r2, r3, #7
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246c:	7afb      	ldrb	r3, [r7, #11]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	b2da      	uxtb	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	4618      	mov	r0, r3
 8002480:	f004 fd89 	bl	8006f96 <USB_EPStartXfer>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 0207 	and.w	r2, r3, #7
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80024b0:	681b      	ldr	r3, [r3, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	460b      	mov	r3, r1
 80024cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2201      	movs	r2, #1
 8002508:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	b2da      	uxtb	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	4618      	mov	r0, r3
 800251e:	f004 fd3a 	bl	8006f96 <USB_EPStartXfer>

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 0207 	and.w	r2, r3, #7
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d901      	bls.n	800254a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e03e      	b.n	80025c8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800254a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	da0e      	bge.n	8002570 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	705a      	strb	r2, [r3, #1]
 800256e:	e00c      	b.n	800258a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_PCD_EP_SetStall+0x7e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e00e      	b.n	80025c8 <HAL_PCD_EP_SetStall+0x9c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 f89d 	bl	80086f8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 020f 	and.w	r2, r3, #15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d901      	bls.n	80025ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e040      	b.n	8002670 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	da0e      	bge.n	8002614 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	705a      	strb	r2, [r3, #1]
 8002612:	e00e      	b.n	8002632 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 0207 	and.w	r2, r3, #7
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_PCD_EP_ClrStall+0x82>
 800264e:	2302      	movs	r3, #2
 8002650:	e00e      	b.n	8002670 <HAL_PCD_EP_ClrStall+0xa0>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	4618      	mov	r0, r3
 8002662:	f006 f89a 	bl	800879a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b096      	sub	sp, #88	; 0x58
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002680:	e3b1      	b.n	8002de6 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800268a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800268e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800269c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f040 8173 	bne.w	800298c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d150      	bne.n	8002754 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	81fb      	strh	r3, [r7, #14]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	89fb      	ldrh	r3, [r7, #14]
 80026ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3328      	adds	r3, #40	; 0x28
 80026da:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002702:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	441a      	add	r2, r3
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002712:	2100      	movs	r1, #0
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f008 fbca 	bl	800aeae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 835f 	beq.w	8002de6 <PCD_EP_ISR_Handler+0x76e>
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 835a 	bne.w	8002de6 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800273e:	b2da      	uxtb	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	b292      	uxth	r2, r2
 8002746:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002752:	e348      	b.n	8002de6 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800275a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002766:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800276a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276e:	2b00      	cmp	r3, #0
 8002770:	d032      	beq.n	80027d8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002798:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80027a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f006 f91f 	bl	80089f0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027be:	4013      	ands	r3, r2
 80027c0:	823b      	strh	r3, [r7, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	8a3a      	ldrh	r2, [r7, #16]
 80027c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027cc:	b292      	uxth	r2, r2
 80027ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f008 fb3f 	bl	800ae54 <HAL_PCD_SetupStageCallback>
 80027d6:	e306      	b.n	8002de6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f280 8302 	bge.w	8002de6 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027ee:	4013      	ands	r3, r2
 80027f0:	83fb      	strh	r3, [r7, #30]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	8bfa      	ldrh	r2, [r7, #30]
 80027f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fc:	b292      	uxth	r2, r2
 80027fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002808:	b29b      	uxth	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	4413      	add	r3, r2
 800281a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d019      	beq.n	8002864 <PCD_EP_ISR_Handler+0x1ec>
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283e:	6959      	ldr	r1, [r3, #20]
 8002840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002842:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002848:	b29b      	uxth	r3, r3
 800284a:	f006 f8d1 	bl	80089f0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	441a      	add	r2, r3
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800285c:	2100      	movs	r1, #0
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f008 fb0a 	bl	800ae78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800286e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 82b5 	bne.w	8002de6 <PCD_EP_ISR_Handler+0x76e>
 800287c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002880:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002888:	f000 82ad 	beq.w	8002de6 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4413      	add	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	801a      	strh	r2, [r3, #0]
 80028bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b3e      	cmp	r3, #62	; 0x3e
 80028c2:	d91d      	bls.n	8002900 <PCD_EP_ISR_Handler+0x288>
 80028c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	647b      	str	r3, [r7, #68]	; 0x44
 80028cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <PCD_EP_ISR_Handler+0x266>
 80028d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028da:	3b01      	subs	r3, #1
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	e026      	b.n	800294e <PCD_EP_ISR_Handler+0x2d6>
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <PCD_EP_ISR_Handler+0x2a6>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002916:	b29a      	uxth	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	e017      	b.n	800294e <PCD_EP_ISR_Handler+0x2d6>
 800291e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <PCD_EP_ISR_Handler+0x2c0>
 8002932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002934:	3301      	adds	r3, #1
 8002936:	647b      	str	r3, [r7, #68]	; 0x44
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29a      	uxth	r2, r3
 800293e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002940:	b29b      	uxth	r3, r3
 8002942:	029b      	lsls	r3, r3, #10
 8002944:	b29b      	uxth	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	827b      	strh	r3, [r7, #18]
 8002960:	8a7b      	ldrh	r3, [r7, #18]
 8002962:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002966:	827b      	strh	r3, [r7, #18]
 8002968:	8a7b      	ldrh	r3, [r7, #18]
 800296a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800296e:	827b      	strh	r3, [r7, #18]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	8a7b      	ldrh	r3, [r7, #18]
 8002976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002986:	b29b      	uxth	r3, r3
 8002988:	8013      	strh	r3, [r2, #0]
 800298a:	e22c      	b.n	8002de6 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029a0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f280 80f6 	bge.w	8002b96 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029c0:	4013      	ands	r3, r2
 80029c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80029d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029dc:	b292      	uxth	r2, r2
 80029de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029e0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	7b1b      	ldrb	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d123      	bne.n	8002a46 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002a26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 808e 	beq.w	8002b4c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a36:	6959      	ldr	r1, [r3, #20]
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3a:	88da      	ldrh	r2, [r3, #6]
 8002a3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a40:	f005 ffd6 	bl	80089f0 <USB_ReadPMA>
 8002a44:	e082      	b.n	8002b4c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	78db      	ldrb	r3, [r3, #3]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d10a      	bne.n	8002a64 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a52:	461a      	mov	r2, r3
 8002a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9d3 	bl	8002e02 <HAL_PCD_EP_DB_Receive>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a62:	e073      	b.n	8002b4c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d022      	beq.n	8002b08 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002aea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02c      	beq.n	8002b4c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af8:	6959      	ldr	r1, [r3, #20]
 8002afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afc:	891a      	ldrh	r2, [r3, #8]
 8002afe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b02:	f005 ff75 	bl	80089f0 <USB_ReadPMA>
 8002b06:	e021      	b.n	8002b4c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3e:	6959      	ldr	r1, [r3, #20]
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	895a      	ldrh	r2, [r3, #10]
 8002b44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b48:	f005 ff52 	bl	80089f0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b54:	441a      	add	r2, r3
 8002b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b62:	441a      	add	r2, r3
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <PCD_EP_ISR_Handler+0x504>
 8002b70:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d206      	bcs.n	8002b8a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f008 f978 	bl	800ae78 <HAL_PCD_DataOutStageCallback>
 8002b88:	e005      	b.n	8002b96 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 fa00 	bl	8006f96 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8121 	beq.w	8002de6 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ba4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf6:	78db      	ldrb	r3, [r3, #3]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 80a2 	bne.w	8002d42 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	7b1b      	ldrb	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8093 	beq.w	8002d34 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d046      	beq.n	8002ca8 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1c:	785b      	ldrb	r3, [r3, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d126      	bne.n	8002c70 <PCD_EP_ISR_Handler+0x5f8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	4413      	add	r3, r2
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	00da      	lsls	r2, r3, #3
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	4413      	add	r3, r2
 8002c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c48:	623b      	str	r3, [r7, #32]
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e061      	b.n	8002d34 <PCD_EP_ISR_Handler+0x6bc>
 8002c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d15d      	bne.n	8002d34 <PCD_EP_ISR_Handler+0x6bc>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	4413      	add	r3, r2
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	00da      	lsls	r2, r3, #3
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	4413      	add	r3, r2
 8002c9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	e045      	b.n	8002d34 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d126      	bne.n	8002d04 <PCD_EP_ISR_Handler+0x68c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cca:	4413      	add	r3, r2
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	00da      	lsls	r2, r3, #3
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	e017      	b.n	8002d34 <PCD_EP_ISR_Handler+0x6bc>
 8002d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d06:	785b      	ldrb	r3, [r3, #1]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d113      	bne.n	8002d34 <PCD_EP_ISR_Handler+0x6bc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	00da      	lsls	r2, r3, #3
 8002d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d26:	4413      	add	r3, r2
 8002d28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2200      	movs	r2, #0
 8002d32:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f008 f8b7 	bl	800aeae <HAL_PCD_DataInStageCallback>
 8002d40:	e051      	b.n	8002de6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d144      	bne.n	8002dd8 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d907      	bls.n	8002d92 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8e:	619a      	str	r2, [r3, #24]
 8002d90:	e002      	b.n	8002d98 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f008 f881 	bl	800aeae <HAL_PCD_DataInStageCallback>
 8002dac:	e01b      	b.n	8002de6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002db6:	441a      	add	r2, r3
 8002db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dc4:	441a      	add	r2, r3
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 f8e0 	bl	8006f96 <USB_EPStartXfer>
 8002dd6:	e006      	b.n	8002de6 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f917 	bl	8003014 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f6ff ac45 	blt.w	8002682 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3758      	adds	r7, #88	; 0x58
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b088      	sub	sp, #32
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d07c      	beq.n	8002f14 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	8b7b      	ldrh	r3, [r7, #26]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d306      	bcc.n	8002e58 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	1ad2      	subs	r2, r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	619a      	str	r2, [r3, #24]
 8002e56:	e002      	b.n	8002e5e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d123      	bne.n	8002eae <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e80:	833b      	strh	r3, [r7, #24]
 8002e82:	8b3b      	ldrh	r3, [r7, #24]
 8002e84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e88:	833b      	strh	r3, [r7, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	8b3b      	ldrh	r3, [r7, #24]
 8002e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01f      	beq.n	8002ef8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	82fb      	strh	r3, [r7, #22]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	8afb      	ldrh	r3, [r7, #22]
 8002ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ef8:	8b7b      	ldrh	r3, [r7, #26]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8085 	beq.w	800300a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	6959      	ldr	r1, [r3, #20]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	891a      	ldrh	r2, [r3, #8]
 8002f0c:	8b7b      	ldrh	r3, [r7, #26]
 8002f0e:	f005 fd6f 	bl	80089f0 <USB_ReadPMA>
 8002f12:	e07a      	b.n	800300a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d306      	bcc.n	8002f52 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	8b7b      	ldrh	r3, [r7, #26]
 8002f4a:	1ad2      	subs	r2, r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	619a      	str	r2, [r3, #24]
 8002f50:	e002      	b.n	8002f58 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d123      	bne.n	8002fa8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7a:	83fb      	strh	r3, [r7, #30]
 8002f7c:	8bfb      	ldrh	r3, [r7, #30]
 8002f7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f82:	83fb      	strh	r3, [r7, #30]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	8bfb      	ldrh	r3, [r7, #30]
 8002f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11f      	bne.n	8002ff2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fcc:	83bb      	strh	r3, [r7, #28]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	8bbb      	ldrh	r3, [r7, #28]
 8002fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ff2:	8b7b      	ldrh	r3, [r7, #26]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6959      	ldr	r1, [r3, #20]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	895a      	ldrh	r2, [r3, #10]
 8003004:	8b7b      	ldrh	r3, [r7, #26]
 8003006:	f005 fcf3 	bl	80089f0 <USB_ReadPMA>
    }
  }

  return count;
 800300a:	8b7b      	ldrh	r3, [r7, #26]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0a4      	sub	sp, #144	; 0x90
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 81db 	beq.w	80033e4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	4413      	add	r3, r2
 8003048:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003052:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800305e:	429a      	cmp	r2, r3
 8003060:	d907      	bls.n	8003072 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	619a      	str	r2, [r3, #24]
 8003070:	e002      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 80b9 	bne.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d126      	bne.n	80030d8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	4413      	add	r3, r2
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	00da      	lsls	r2, r3, #3
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	4413      	add	r3, r2
 80030ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030bc:	b29a      	uxth	r2, r3
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	e01a      	b.n	800310e <HAL_PCD_EP_DB_Transmit+0xfa>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d116      	bne.n	800310e <HAL_PCD_EP_DB_Transmit+0xfa>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	4413      	add	r3, r2
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	00da      	lsls	r2, r3, #3
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	4413      	add	r3, r2
 8003102:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2200      	movs	r2, #0
 800310c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d126      	bne.n	800316a <HAL_PCD_EP_DB_Transmit+0x156>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00da      	lsls	r2, r3, #3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	4413      	add	r3, r2
 800313e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314e:	b29a      	uxth	r2, r3
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003162:	b29a      	uxth	r2, r3
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	e017      	b.n	800319a <HAL_PCD_EP_DB_Transmit+0x186>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d113      	bne.n	800319a <HAL_PCD_EP_DB_Transmit+0x186>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	4413      	add	r3, r2
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	00da      	lsls	r2, r3, #3
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	4413      	add	r3, r2
 800318e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2200      	movs	r2, #0
 8003198:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f007 fe84 	bl	800aeae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 82fa 	beq.w	80037a6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031cc:	82fb      	strh	r3, [r7, #22]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	8afb      	ldrh	r3, [r7, #22]
 80031de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]
 80031f2:	e2d8      	b.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d021      	beq.n	8003242 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003218:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800322e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323e:	b29b      	uxth	r3, r3
 8003240:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003248:	2b01      	cmp	r3, #1
 800324a:	f040 82ac 	bne.w	80037a6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003256:	441a      	add	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003264:	441a      	add	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	429a      	cmp	r2, r3
 8003274:	d30b      	bcc.n	800328e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	621a      	str	r2, [r3, #32]
 800328c:	e017      	b.n	80032be <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d108      	bne.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003296:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800329a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032a6:	e00a      	b.n	80032be <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2200      	movs	r2, #0
 80032bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d165      	bne.n	8003392 <HAL_PCD_EP_DB_Transmit+0x37e>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	4413      	add	r3, r2
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	00da      	lsls	r2, r3, #3
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e6:	4413      	add	r3, r2
 80032e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003302:	2b3e      	cmp	r3, #62	; 0x3e
 8003304:	d91d      	bls.n	8003342 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
 800330e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <HAL_PCD_EP_DB_Transmit+0x30c>
 800331a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331c:	3b01      	subs	r3, #1
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29a      	uxth	r2, r3
 8003326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003328:	b29b      	uxth	r3, r3
 800332a:	029b      	lsls	r3, r3, #10
 800332c:	b29b      	uxth	r3, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333a:	b29a      	uxth	r2, r3
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	801a      	strh	r2, [r3, #0]
 8003340:	e044      	b.n	80033cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <HAL_PCD_EP_DB_Transmit+0x34c>
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003358:	b29a      	uxth	r2, r3
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	e035      	b.n	80033cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	64bb      	str	r3, [r7, #72]	; 0x48
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_PCD_EP_DB_Transmit+0x366>
 8003374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003376:	3301      	adds	r3, #1
 8003378:	64bb      	str	r3, [r7, #72]	; 0x48
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	b29b      	uxth	r3, r3
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	b29b      	uxth	r3, r3
 8003388:	4313      	orrs	r3, r2
 800338a:	b29a      	uxth	r2, r3
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	e01c      	b.n	80033cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d118      	bne.n	80033cc <HAL_PCD_EP_DB_Transmit+0x3b8>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	647b      	str	r3, [r7, #68]	; 0x44
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ae:	4413      	add	r3, r2
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	00da      	lsls	r2, r3, #3
 80033b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ba:	4413      	add	r3, r2
 80033bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
 80033c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6959      	ldr	r1, [r3, #20]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	891a      	ldrh	r2, [r3, #8]
 80033d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f005 fac5 	bl	800896c <USB_WritePMA>
 80033e2:	e1e0      	b.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003408:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003414:	429a      	cmp	r2, r3
 8003416:	d307      	bcc.n	8003428 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003420:	1ad2      	subs	r2, r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	619a      	str	r2, [r3, #24]
 8003426:	e002      	b.n	800342e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 80c0 	bne.w	80035b8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d126      	bne.n	800348e <HAL_PCD_EP_DB_Transmit+0x47a>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003454:	4413      	add	r3, r2
 8003456:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00da      	lsls	r2, r3, #3
 800345e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003460:	4413      	add	r3, r2
 8003462:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003466:	67bb      	str	r3, [r7, #120]	; 0x78
 8003468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003472:	b29a      	uxth	r2, r3
 8003474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003476:	801a      	strh	r2, [r3, #0]
 8003478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003486:	b29a      	uxth	r2, r3
 8003488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	e01a      	b.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d116      	bne.n	80034c4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	667b      	str	r3, [r7, #100]	; 0x64
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034aa:	4413      	add	r3, r2
 80034ac:	667b      	str	r3, [r7, #100]	; 0x64
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	00da      	lsls	r2, r3, #3
 80034b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b6:	4413      	add	r3, r2
 80034b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034bc:	663b      	str	r3, [r7, #96]	; 0x60
 80034be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c0:	2200      	movs	r2, #0
 80034c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	677b      	str	r3, [r7, #116]	; 0x74
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d12b      	bne.n	800352a <HAL_PCD_EP_DB_Transmit+0x516>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e6:	4413      	add	r3, r2
 80034e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00da      	lsls	r2, r3, #3
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	4413      	add	r3, r2
 80034f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003508:	b29a      	uxth	r2, r3
 800350a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800350e:	801a      	strh	r2, [r3, #0]
 8003510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003520:	b29a      	uxth	r2, r3
 8003522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	e017      	b.n	800355a <HAL_PCD_EP_DB_Transmit+0x546>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d113      	bne.n	800355a <HAL_PCD_EP_DB_Transmit+0x546>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800353a:	b29b      	uxth	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003540:	4413      	add	r3, r2
 8003542:	677b      	str	r3, [r7, #116]	; 0x74
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	00da      	lsls	r2, r3, #3
 800354a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354c:	4413      	add	r3, r2
 800354e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003552:	673b      	str	r3, [r7, #112]	; 0x70
 8003554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003556:	2200      	movs	r2, #0
 8003558:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f007 fca4 	bl	800aeae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 811a 	bne.w	80037a6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80035a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	8013      	strh	r3, [r2, #0]
 80035b6:	e0f6      	b.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d121      	bne.n	8003606 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003602:	b29b      	uxth	r3, r3
 8003604:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 80ca 	bne.w	80037a6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800361a:	441a      	add	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003628:	441a      	add	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d30b      	bcc.n	8003652 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364a:	1ad2      	subs	r2, r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	621a      	str	r2, [r3, #32]
 8003650:	e017      	b.n	8003682 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d108      	bne.n	800366c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800365a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800365e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800366a:	e00a      	b.n	8003682 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	657b      	str	r3, [r7, #84]	; 0x54
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d165      	bne.n	800375c <HAL_PCD_EP_DB_Transmit+0x748>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a4:	4413      	add	r3, r2
 80036a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	00da      	lsls	r2, r3, #3
 80036ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b0:	4413      	add	r3, r2
 80036b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80036b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036cc:	2b3e      	cmp	r3, #62	; 0x3e
 80036ce:	d91d      	bls.n	800370c <HAL_PCD_EP_DB_Transmit+0x6f8>
 80036d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x6d6>
 80036e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e6:	3b01      	subs	r3, #1
 80036e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	029b      	lsls	r3, r3, #10
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4313      	orrs	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003704:	b29a      	uxth	r2, r3
 8003706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e041      	b.n	8003790 <HAL_PCD_EP_DB_Transmit+0x77c>
 800370c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <HAL_PCD_EP_DB_Transmit+0x716>
 8003714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003722:	b29a      	uxth	r2, r3
 8003724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	e032      	b.n	8003790 <HAL_PCD_EP_DB_Transmit+0x77c>
 800372a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	66bb      	str	r3, [r7, #104]	; 0x68
 8003732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_PCD_EP_DB_Transmit+0x730>
 800373e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003740:	3301      	adds	r3, #1
 8003742:	66bb      	str	r3, [r7, #104]	; 0x68
 8003744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29a      	uxth	r2, r3
 800374a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374c:	b29b      	uxth	r3, r3
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	b29b      	uxth	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b29a      	uxth	r2, r3
 8003756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e019      	b.n	8003790 <HAL_PCD_EP_DB_Transmit+0x77c>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d115      	bne.n	8003790 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003772:	4413      	add	r3, r2
 8003774:	657b      	str	r3, [r7, #84]	; 0x54
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	00da      	lsls	r2, r3, #3
 800377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377e:	4413      	add	r3, r2
 8003780:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003784:	653b      	str	r3, [r7, #80]	; 0x50
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378a:	b29a      	uxth	r2, r3
 800378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	6959      	ldr	r1, [r3, #20]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	895a      	ldrh	r2, [r3, #10]
 800379c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f005 f8e3 	bl	800896c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c0:	82bb      	strh	r3, [r7, #20]
 80037c2:	8abb      	ldrh	r3, [r7, #20]
 80037c4:	f083 0310 	eor.w	r3, r3, #16
 80037c8:	82bb      	strh	r3, [r7, #20]
 80037ca:	8abb      	ldrh	r3, [r7, #20]
 80037cc:	f083 0320 	eor.w	r3, r3, #32
 80037d0:	82bb      	strh	r3, [r7, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	441a      	add	r2, r3
 80037e0:	8abb      	ldrh	r3, [r7, #20]
 80037e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3790      	adds	r7, #144	; 0x90
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	817b      	strh	r3, [r7, #10]
 800380e:	4613      	mov	r3, r2
 8003810:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381e:	897b      	ldrh	r3, [r7, #10]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e009      	b.n	800384a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003836:	897a      	ldrh	r2, [r7, #10]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800384a:	893b      	ldrh	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2200      	movs	r2, #0
 8003854:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	b29a      	uxth	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	80da      	strh	r2, [r3, #6]
 800385e:	e00b      	b.n	8003878 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2201      	movs	r2, #1
 8003864:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	b29a      	uxth	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	b29a      	uxth	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	58000400 	.word	0x58000400

080038fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_PWREx_GetVoltageRange+0x18>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	58000400 	.word	0x58000400

08003918 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_PWREx_EnableVddUSB+0x1c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003926:	6053      	str	r3, [r2, #4]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	58000400 	.word	0x58000400

08003938 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800393c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394a:	d101      	bne.n	8003950 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_RCC_HSE_Enable>:
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LL_RCC_HSE_Disable>:
{
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
}
 800398e:	bf00      	nop
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_RCC_HSE_IsReady>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039aa:	d101      	bne.n	80039b0 <LL_RCC_HSE_IsReady+0x18>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <LL_RCC_HSE_IsReady+0x1a>
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_RCC_HSI_Enable>:
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <LL_RCC_HSI_Disable>:
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ec:	6013      	str	r3, [r2, #0]
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_RCC_HSI_IsReady>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80039fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d101      	bne.n	8003a10 <LL_RCC_HSI_IsReady+0x18>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <LL_RCC_HSI_IsReady+0x1a>
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_RCC_HSI48_Enable>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_HSI48_Disable>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_RCC_HSI48_IsReady>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d101      	bne.n	8003aa2 <LL_RCC_HSI48_IsReady+0x18>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <LL_RCC_HSI48_IsReady+0x1a>
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_RCC_LSE_Enable>:
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ac6:	bf00      	nop
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_RCC_LSE_Disable>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_RCC_LSE_EnableBypass>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_RCC_LSE_DisableBypass>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_LSE_IsReady>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d101      	bne.n	8003b4e <LL_RCC_LSE_IsReady+0x18>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_RCC_LSE_IsReady+0x1a>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_LSI1_Enable>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_RCC_LSI1_Disable>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_LSI1_IsReady>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d101      	bne.n	8003bb6 <LL_RCC_LSI1_IsReady+0x18>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <LL_RCC_LSI1_IsReady+0x1a>
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_LSI2_Enable>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_RCC_LSI2_Disable>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_RCC_LSI2_IsReady>:
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d101      	bne.n	8003c1e <LL_RCC_LSI2_IsReady+0x18>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <LL_RCC_LSI2_IsReady+0x1a>
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_LSI2_SetTrimming>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_RCC_MSI_Enable>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_RCC_MSI_Disable>:
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6013      	str	r3, [r2, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_RCC_MSI_IsReady>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d101      	bne.n	8003caa <LL_RCC_MSI_IsReady+0x16>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_RCC_MSI_IsReady+0x18>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_RCC_MSI_SetRange>:
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_MSI_GetRange>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2bb0      	cmp	r3, #176	; 0xb0
 8003cf4:	d901      	bls.n	8003cfa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003cf6:	23b0      	movs	r3, #176	; 0xb0
 8003cf8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003cfa:	687b      	ldr	r3, [r7, #4]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_RCC_SetSysClkSource>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 0203 	bic.w	r2, r3, #3
 8003d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <LL_RCC_GetSysClkSource>:
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <LL_RCC_SetAHBPrescaler>:
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_SetAHB4Prescaler>:
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_RCC_SetAPB1Prescaler>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_RCC_SetAPB2Prescaler>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_GetAHBPrescaler>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_GetAHB4Prescaler>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_RCC_GetAPB1Prescaler>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_RCC_GetAPB2Prescaler>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	6013      	str	r3, [r2, #0]
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ef6:	d101      	bne.n	8003efc <LL_RCC_PLL_IsReady+0x18>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <LL_RCC_PLL_IsReady+0x1a>
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7c:	d101      	bne.n	8003f82 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa2:	d101      	bne.n	8003fa8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d101      	bne.n	8003fce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fec:	d101      	bne.n	8003ff2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004010:	d101      	bne.n	8004016 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b08d      	sub	sp, #52	; 0x34
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e363      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 808d 	beq.w	800415e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004044:	f7ff fe89 	bl	8003d5a <LL_RCC_GetSysClkSource>
 8004048:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800404a:	f7ff ff82 	bl	8003f52 <LL_RCC_PLL_GetMainSource>
 800404e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_RCC_OscConfig+0x3e>
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	2b0c      	cmp	r3, #12
 800405a:	d147      	bne.n	80040ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	2b01      	cmp	r3, #1
 8004060:	d144      	bne.n	80040ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e347      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004072:	f7ff fe34 	bl	8003cde <LL_RCC_MSI_GetRange>
 8004076:	4603      	mov	r3, r0
 8004078:	429c      	cmp	r4, r3
 800407a:	d914      	bls.n	80040a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fd2f 	bl	8004ae4 <RCC_SetFlashLatencyFromMSIRange>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e336      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fe0e 	bl	8003cb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fe32 	bl	8003d08 <LL_RCC_MSI_SetCalibTrimming>
 80040a4:	e013      	b.n	80040ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fe03 	bl	8003cb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fe27 	bl	8003d08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fd10 	bl	8004ae4 <RCC_SetFlashLatencyFromMSIRange>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e317      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040ce:	f000 fcc9 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4aa4      	ldr	r2, [pc, #656]	; (8004368 <HAL_RCC_OscConfig+0x344>)
 80040d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040d8:	4ba4      	ldr	r3, [pc, #656]	; (800436c <HAL_RCC_OscConfig+0x348>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd f87d 	bl	80011dc <HAL_InitTick>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d039      	beq.n	800415c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e308      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01e      	beq.n	8004132 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040f4:	f7ff fdb0 	bl	8003c58 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040f8:	f7fd f8be 	bl	8001278 <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004100:	f7fd f8ba 	bl	8001278 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e2f5      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004112:	f7ff fdbf 	bl	8003c94 <LL_RCC_MSI_IsReady>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f1      	beq.n	8004100 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fdc8 	bl	8003cb6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fdec 	bl	8003d08 <LL_RCC_MSI_SetCalibTrimming>
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004132:	f7ff fda0 	bl	8003c76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004136:	f7fd f89f 	bl	8001278 <HAL_GetTick>
 800413a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800413e:	f7fd f89b 	bl	8001278 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e2d6      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004150:	f7ff fda0 	bl	8003c94 <LL_RCC_MSI_IsReady>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f1      	bne.n	800413e <HAL_RCC_OscConfig+0x11a>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800415c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d047      	beq.n	80041fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416a:	f7ff fdf6 	bl	8003d5a <LL_RCC_GetSysClkSource>
 800416e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004170:	f7ff feef 	bl	8003f52 <LL_RCC_PLL_GetMainSource>
 8004174:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d005      	beq.n	8004188 <HAL_RCC_OscConfig+0x164>
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d108      	bne.n	8004194 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d105      	bne.n	8004194 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d134      	bne.n	80041fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e2b4      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0x180>
 800419e:	f7ff fbdd 	bl	800395c <LL_RCC_HSE_Enable>
 80041a2:	e001      	b.n	80041a8 <HAL_RCC_OscConfig+0x184>
 80041a4:	f7ff fbe9 	bl	800397a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd f862 	bl	8001278 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd f85e 	bl	8001278 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e299      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80041ca:	f7ff fbe5 	bl	8003998 <LL_RCC_HSE_IsReady>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f1      	beq.n	80041b8 <HAL_RCC_OscConfig+0x194>
 80041d4:	e011      	b.n	80041fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d6:	f7fd f84f 	bl	8001278 <HAL_GetTick>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041de:	f7fd f84b 	bl	8001278 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b64      	cmp	r3, #100	; 0x64
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e286      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80041f0:	f7ff fbd2 	bl	8003998 <LL_RCC_HSE_IsReady>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f1      	bne.n	80041de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d04c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004206:	f7ff fda8 	bl	8003d5a <LL_RCC_GetSysClkSource>
 800420a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	f7ff fea1 	bl	8003f52 <LL_RCC_PLL_GetMainSource>
 8004210:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d005      	beq.n	8004224 <HAL_RCC_OscConfig+0x200>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d10e      	bne.n	800423c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d10b      	bne.n	800423c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e266      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fbf1 	bl	8003a1c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800423a:	e031      	b.n	80042a0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d019      	beq.n	8004278 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004244:	f7ff fbba 	bl	80039bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd f816 	bl	8001278 <HAL_GetTick>
 800424c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004250:	f7fd f812 	bl	8001278 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e24d      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004262:	f7ff fbc9 	bl	80039f8 <LL_RCC_HSI_IsReady>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f1      	beq.n	8004250 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fbd3 	bl	8003a1c <LL_RCC_HSI_SetCalibTrimming>
 8004276:	e013      	b.n	80042a0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004278:	f7ff fbaf 	bl	80039da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fc fffc 	bl	8001278 <HAL_GetTick>
 8004280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004284:	f7fc fff8 	bl	8001278 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e233      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004296:	f7ff fbaf 	bl	80039f8 <LL_RCC_HSI_IsReady>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f1      	bne.n	8004284 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80a3 	beq.w	8004400 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d076      	beq.n	80043b0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d046      	beq.n	800435c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80042ce:	f7ff fc66 	bl	8003b9e <LL_RCC_LSI1_IsReady>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d113      	bne.n	8004300 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80042d8:	f7ff fc3f 	bl	8003b5a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042dc:	f7fc ffcc 	bl	8001278 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042e4:	f7fc ffc8 	bl	8001278 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e203      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80042f6:	f7ff fc52 	bl	8003b9e <LL_RCC_LSI1_IsReady>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f1      	beq.n	80042e4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004300:	f7ff fc5f 	bl	8003bc2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fc ffb8 	bl	8001278 <HAL_GetTick>
 8004308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800430c:	f7fc ffb4 	bl	8001278 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b03      	cmp	r3, #3
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e1ef      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800431e:	f7ff fc72 	bl	8003c06 <LL_RCC_LSI2_IsReady>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f1      	beq.n	800430c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fc7c 	bl	8003c2a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004332:	f7ff fc23 	bl	8003b7c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fc ff9f 	bl	8001278 <HAL_GetTick>
 800433a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800433e:	f7fc ff9b 	bl	8001278 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1d6      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004350:	f7ff fc25 	bl	8003b9e <LL_RCC_LSI1_IsReady>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f1      	bne.n	800433e <HAL_RCC_OscConfig+0x31a>
 800435a:	e051      	b.n	8004400 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800435c:	f7ff fbfd 	bl	8003b5a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fc ff8a 	bl	8001278 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004366:	e00c      	b.n	8004382 <HAL_RCC_OscConfig+0x35e>
 8004368:	20000008 	.word	0x20000008
 800436c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004370:	f7fc ff82 	bl	8001278 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1bd      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004382:	f7ff fc0c 	bl	8003b9e <LL_RCC_LSI1_IsReady>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f1      	beq.n	8004370 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800438c:	f7ff fc2a 	bl	8003be4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004392:	f7fc ff71 	bl	8001278 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b03      	cmp	r3, #3
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e1ac      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80043a4:	f7ff fc2f 	bl	8003c06 <LL_RCC_LSI2_IsReady>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f1      	bne.n	8004392 <HAL_RCC_OscConfig+0x36e>
 80043ae:	e027      	b.n	8004400 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80043b0:	f7ff fc18 	bl	8003be4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b4:	f7fc ff60 	bl	8001278 <HAL_GetTick>
 80043b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043bc:	f7fc ff5c 	bl	8001278 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e197      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80043ce:	f7ff fc1a 	bl	8003c06 <LL_RCC_LSI2_IsReady>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f1      	bne.n	80043bc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80043d8:	f7ff fbd0 	bl	8003b7c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fc ff4c 	bl	8001278 <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043e4:	f7fc ff48 	bl	8001278 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e183      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80043f6:	f7ff fbd2 	bl	8003b9e <LL_RCC_LSI1_IsReady>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f1      	bne.n	80043e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d05b      	beq.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440c:	4ba7      	ldr	r3, [pc, #668]	; (80046ac <HAL_RCC_OscConfig+0x688>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d114      	bne.n	8004442 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004418:	f7ff fa60 	bl	80038dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441c:	f7fc ff2c 	bl	8001278 <HAL_GetTick>
 8004420:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fc ff28 	bl	8001278 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e163      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004436:	4b9d      	ldr	r3, [pc, #628]	; (80046ac <HAL_RCC_OscConfig+0x688>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <HAL_RCC_OscConfig+0x42c>
 800444a:	f7ff fb30 	bl	8003aae <LL_RCC_LSE_Enable>
 800444e:	e00c      	b.n	800446a <HAL_RCC_OscConfig+0x446>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b05      	cmp	r3, #5
 8004456:	d104      	bne.n	8004462 <HAL_RCC_OscConfig+0x43e>
 8004458:	f7ff fb4b 	bl	8003af2 <LL_RCC_LSE_EnableBypass>
 800445c:	f7ff fb27 	bl	8003aae <LL_RCC_LSE_Enable>
 8004460:	e003      	b.n	800446a <HAL_RCC_OscConfig+0x446>
 8004462:	f7ff fb35 	bl	8003ad0 <LL_RCC_LSE_Disable>
 8004466:	f7ff fb55 	bl	8003b14 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d014      	beq.n	800449c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fc ff01 	bl	8001278 <HAL_GetTick>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fc fefd 	bl	8001278 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e136      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004490:	f7ff fb51 	bl	8003b36 <LL_RCC_LSE_IsReady>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0ef      	beq.n	800447a <HAL_RCC_OscConfig+0x456>
 800449a:	e013      	b.n	80044c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fc feec 	bl	8001278 <HAL_GetTick>
 80044a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fc fee8 	bl	8001278 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e121      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80044ba:	f7ff fb3c 	bl	8003b36 <LL_RCC_LSE_IsReady>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ef      	bne.n	80044a4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02c      	beq.n	800452a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d014      	beq.n	8004502 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044d8:	f7ff fab5 	bl	8003a46 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fc fecc 	bl	8001278 <HAL_GetTick>
 80044e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e4:	f7fc fec8 	bl	8001278 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e103      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80044f6:	f7ff fac8 	bl	8003a8a <LL_RCC_HSI48_IsReady>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f1      	beq.n	80044e4 <HAL_RCC_OscConfig+0x4c0>
 8004500:	e013      	b.n	800452a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004502:	f7ff fab1 	bl	8003a68 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fc feb7 	bl	8001278 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800450e:	f7fc feb3 	bl	8001278 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0ee      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004520:	f7ff fab3 	bl	8003a8a <LL_RCC_HSI48_IsReady>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f1      	bne.n	800450e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80e4 	beq.w	80046fc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004534:	f7ff fc11 	bl	8003d5a <LL_RCC_GetSysClkSource>
 8004538:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	2b02      	cmp	r3, #2
 8004548:	f040 80b4 	bne.w	80046b4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0203 	and.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	429a      	cmp	r2, r3
 8004558:	d123      	bne.n	80045a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d11c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	0a1b      	lsrs	r3, r3, #8
 800456c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d114      	bne.n	80045a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d10d      	bne.n	80045a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d106      	bne.n	80045a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d05d      	beq.n	800465e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d058      	beq.n	800465a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0a1      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045ba:	f7ff fc84 	bl	8003ec6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045be:	f7fc fe5b 	bl	8001278 <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fc fe57 	bl	8001278 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e092      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1ef      	bne.n	80045c6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <HAL_RCC_OscConfig+0x68c>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045fe:	0212      	lsls	r2, r2, #8
 8004600:	4311      	orrs	r1, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004606:	4311      	orrs	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004612:	430a      	orrs	r2, r1
 8004614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004618:	4313      	orrs	r3, r2
 800461a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800461c:	f7ff fc44 	bl	8003ea8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004630:	f7fc fe22 	bl	8001278 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004638:	f7fc fe1e 	bl	8001278 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e059      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004658:	e050      	b.n	80046fc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e04f      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d147      	bne.n	80046fc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800466c:	f7ff fc1c 	bl	8003ea8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004680:	f7fc fdfa 	bl	8001278 <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fc fdf6 	bl	8001278 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e031      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ef      	beq.n	8004688 <HAL_RCC_OscConfig+0x664>
 80046a8:	e028      	b.n	80046fc <HAL_RCC_OscConfig+0x6d8>
 80046aa:	bf00      	nop
 80046ac:	58000400 	.word	0x58000400
 80046b0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d01e      	beq.n	80046f8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	f7ff fc04 	bl	8003ec6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fc fddb 	bl	8001278 <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fc fdd7 	bl	8001278 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e012      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ef      	bne.n	80046c6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80046e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_OscConfig+0x6e4>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	60cb      	str	r3, [r1, #12]
 80046f6:	e001      	b.n	80046fc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3734      	adds	r7, #52	; 0x34
 8004702:	46bd      	mov	sp, r7
 8004704:	bd90      	pop	{r4, r7, pc}
 8004706:	bf00      	nop
 8004708:	eefefffc 	.word	0xeefefffc

0800470c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e12d      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004720:	4b98      	ldr	r3, [pc, #608]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d91b      	bls.n	8004766 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	4b95      	ldr	r3, [pc, #596]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 0207 	bic.w	r2, r3, #7
 8004736:	4993      	ldr	r1, [pc, #588]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473e:	f7fc fd9b 	bl	8001278 <HAL_GetTick>
 8004742:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004744:	e008      	b.n	8004758 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004746:	f7fc fd97 	bl	8001278 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e111      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004758:	4b8a      	ldr	r3, [pc, #552]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d1ef      	bne.n	8004746 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fafb 	bl	8003d72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800477c:	f7fc fd7c 	bl	8001278 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004784:	f7fc fd78 	bl	8001278 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0f2      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004796:	f7ff fbe8 	bl	8003f6a <LL_RCC_IsActiveFlag_HPRE>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f1      	beq.n	8004784 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d016      	beq.n	80047da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff faf2 	bl	8003d9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047b6:	f7fc fd5f 	bl	8001278 <HAL_GetTick>
 80047ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047be:	f7fc fd5b 	bl	8001278 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0d5      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80047d0:	f7ff fbdd 	bl	8003f8e <LL_RCC_IsActiveFlag_C2HPRE>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f1      	beq.n	80047be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff faeb 	bl	8003dc6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047f0:	f7fc fd42 	bl	8001278 <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047f8:	f7fc fd3e 	bl	8001278 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0b8      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800480a:	f7ff fbd3 	bl	8003fb4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f1      	beq.n	80047f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d016      	beq.n	800484e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fae5 	bl	8003df4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800482a:	f7fc fd25 	bl	8001278 <HAL_GetTick>
 800482e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004832:	f7fc fd21 	bl	8001278 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e09b      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004844:	f7ff fbc9 	bl	8003fda <LL_RCC_IsActiveFlag_PPRE1>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f1      	beq.n	8004832 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d017      	beq.n	800488a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fadb 	bl	8003e1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004866:	f7fc fd07 	bl	8001278 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800486c:	e008      	b.n	8004880 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800486e:	f7fc fd03 	bl	8001278 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e07d      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004880:	f7ff fbbd 	bl	8003ffe <LL_RCC_IsActiveFlag_PPRE2>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f1      	beq.n	800486e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d043      	beq.n	800491e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d106      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800489e:	f7ff f87b 	bl	8003998 <LL_RCC_HSE_IsReady>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11e      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e067      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80048b4:	f7ff fb16 	bl	8003ee4 <LL_RCC_PLL_IsReady>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d113      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e05c      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80048ca:	f7ff f9e3 	bl	8003c94 <LL_RCC_MSI_IsReady>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d108      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e051      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80048d8:	f7ff f88e 	bl	80039f8 <LL_RCC_HSI_IsReady>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e04a      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fa21 	bl	8003d32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fc fcc2 	bl	8001278 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fc fcbe 	bl	8001278 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e036      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	f7ff fa24 	bl	8003d5a <LL_RCC_GetSysClkSource>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	429a      	cmp	r2, r3
 800491c:	d1ec      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800491e:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d21b      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 0207 	bic.w	r2, r3, #7
 8004934:	4913      	ldr	r1, [pc, #76]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493c:	f7fc fc9c 	bl	8001278 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	e008      	b.n	8004956 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004944:	f7fc fc98 	bl	8001278 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e012      	b.n	800497c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x278>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d1ef      	bne.n	8004944 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004964:	f000 f87e 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004968:	4603      	mov	r3, r0
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <HAL_RCC_ClockConfig+0x27c>)
 800496c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800496e:	f7fc fc8f 	bl	8001290 <HAL_GetTickPrio>
 8004972:	4603      	mov	r3, r0
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fc31 	bl	80011dc <HAL_InitTick>
 800497a:	4603      	mov	r3, r0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	58004000 	.word	0x58004000
 8004988:	20000008 	.word	0x20000008

0800498c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	f7ff f9e2 	bl	8003d5a <LL_RCC_GetSysClkSource>
 8004996:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800499e:	f7ff f99e 	bl	8003cde <LL_RCC_MSI_GetRange>
 80049a2:	4603      	mov	r3, r0
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	4a2b      	ldr	r2, [pc, #172]	; (8004a58 <HAL_RCC_GetSysClockFreq+0xcc>)
 80049ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e04b      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d102      	bne.n	80049c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049ba:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e045      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d10a      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80049c6:	f7fe ffb7 	bl	8003938 <LL_RCC_HSE_IsEnabledDiv2>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d102      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80049d0:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e03a      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80049d6:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xd4>)
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e037      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80049dc:	f7ff fab9 	bl	8003f52 <LL_RCC_PLL_GetMainSource>
 80049e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d003      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x64>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80049ee:	e00d      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 80049f2:	60bb      	str	r3, [r7, #8]
        break;
 80049f4:	e015      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80049f6:	f7fe ff9f 	bl	8003938 <LL_RCC_HSE_IsEnabledDiv2>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a02:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004a04:	e00d      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004a06:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a08:	60bb      	str	r3, [r7, #8]
        break;
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a0c:	f7ff f967 	bl	8003cde <LL_RCC_MSI_GetRange>
 8004a10:	4603      	mov	r3, r0
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	4a0f      	ldr	r2, [pc, #60]	; (8004a58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1e:	60bb      	str	r3, [r7, #8]
        break;
 8004a20:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004a22:	f7ff fa71 	bl	8003f08 <LL_RCC_PLL_GetN>
 8004a26:	4602      	mov	r2, r0
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	fb03 f402 	mul.w	r4, r3, r2
 8004a2e:	f7ff fa84 	bl	8003f3a <LL_RCC_PLL_GetDivider>
 8004a32:	4603      	mov	r3, r0
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	3301      	adds	r3, #1
 8004a38:	fbb4 f4f3 	udiv	r4, r4, r3
 8004a3c:	f7ff fa71 	bl	8003f22 <LL_RCC_PLL_GetR>
 8004a40:	4603      	mov	r3, r0
 8004a42:	0f5b      	lsrs	r3, r3, #29
 8004a44:	3301      	adds	r3, #1
 8004a46:	fbb4 f3f3 	udiv	r3, r4, r3
 8004a4a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	080164d0 	.word	0x080164d0
 8004a5c:	00f42400 	.word	0x00f42400
 8004a60:	01e84800 	.word	0x01e84800

08004a64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a64:	b598      	push	{r3, r4, r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004a68:	f7ff ff90 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	f7ff f9e9 	bl	8003e44 <LL_RCC_GetAHBPrescaler>
 8004a72:	4603      	mov	r3, r0
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	4a03      	ldr	r2, [pc, #12]	; (8004a88 <HAL_RCC_GetHCLKFreq+0x24>)
 8004a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd98      	pop	{r3, r4, r7, pc}
 8004a88:	08016470 	.word	0x08016470

08004a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a8c:	b598      	push	{r3, r4, r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a90:	f7ff ffe8 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004a94:	4604      	mov	r4, r0
 8004a96:	f7ff f9ef 	bl	8003e78 <LL_RCC_GetAPB1Prescaler>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd98      	pop	{r3, r4, r7, pc}
 8004ab4:	080164b0 	.word	0x080164b0

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b598      	push	{r3, r4, r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004abc:	f7ff ffd2 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	f7ff f9e5 	bl	8003e90 <LL_RCC_GetAPB2Prescaler>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	0adb      	lsrs	r3, r3, #11
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd98      	pop	{r3, r4, r7, pc}
 8004ae0:	080164b0 	.word	0x080164b0

08004ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2bb0      	cmp	r3, #176	; 0xb0
 8004af0:	d903      	bls.n	8004afa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e007      	b.n	8004b0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004b0a:	f7ff f9a7 	bl	8003e5c <LL_RCC_GetAHB4Prescaler>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	0c9c      	lsrs	r4, r3, #18
 8004b2e:	f7fe fee5 	bl	80038fc <HAL_PWREx_GetVoltageRange>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4619      	mov	r1, r3
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 f80c 	bl	8004b54 <RCC_SetFlashLatency>
 8004b3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd90      	pop	{r4, r7, pc}
 8004b46:	bf00      	nop
 8004b48:	080164d0 	.word	0x080164d0
 8004b4c:	08016470 	.word	0x08016470
 8004b50:	431bde83 	.word	0x431bde83

08004b54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b093      	sub	sp, #76	; 0x4c
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <RCC_SetFlashLatency+0xe8>)
 8004b60:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004b6a:	4a35      	ldr	r2, [pc, #212]	; (8004c40 <RCC_SetFlashLatency+0xec>)
 8004b6c:	f107 031c 	add.w	r3, r7, #28
 8004b70:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004b76:	4b33      	ldr	r3, [pc, #204]	; (8004c44 <RCC_SetFlashLatency+0xf0>)
 8004b78:	f107 040c 	add.w	r4, r7, #12
 8004b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004b82:	2300      	movs	r3, #0
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8c:	d11a      	bne.n	8004bc4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	643b      	str	r3, [r7, #64]	; 0x40
 8004b92:	e013      	b.n	8004bbc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	3348      	adds	r3, #72	; 0x48
 8004b9a:	443b      	add	r3, r7
 8004b9c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d807      	bhi.n	8004bb6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	3348      	adds	r3, #72	; 0x48
 8004bac:	443b      	add	r3, r7
 8004bae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004bb2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004bb4:	e020      	b.n	8004bf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb8:	3301      	adds	r3, #1
 8004bba:	643b      	str	r3, [r7, #64]	; 0x40
 8004bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d9e8      	bls.n	8004b94 <RCC_SetFlashLatency+0x40>
 8004bc2:	e019      	b.n	8004bf8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc8:	e013      	b.n	8004bf2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	3348      	adds	r3, #72	; 0x48
 8004bd0:	443b      	add	r3, r7
 8004bd2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d807      	bhi.n	8004bec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	3348      	adds	r3, #72	; 0x48
 8004be2:	443b      	add	r3, r7
 8004be4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004be8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004bea:	e005      	b.n	8004bf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	3301      	adds	r3, #1
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d9e8      	bls.n	8004bca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004bf8:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <RCC_SetFlashLatency+0xf4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f023 0207 	bic.w	r2, r3, #7
 8004c00:	4911      	ldr	r1, [pc, #68]	; (8004c48 <RCC_SetFlashLatency+0xf4>)
 8004c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c08:	f7fc fb36 	bl	8001278 <HAL_GetTick>
 8004c0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c0e:	e008      	b.n	8004c22 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c10:	f7fc fb32 	bl	8001278 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e007      	b.n	8004c32 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <RCC_SetFlashLatency+0xf4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1ef      	bne.n	8004c10 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	374c      	adds	r7, #76	; 0x4c
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	080163fc 	.word	0x080163fc
 8004c40:	0801640c 	.word	0x0801640c
 8004c44:	08016418 	.word	0x08016418
 8004c48:	58004000 	.word	0x58004000

08004c4c <LL_RCC_LSE_IsEnabled>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <LL_RCC_LSE_IsEnabled+0x18>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <LL_RCC_LSE_IsEnabled+0x1a>
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_RCC_LSE_IsReady>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d101      	bne.n	8004c88 <LL_RCC_LSE_IsReady+0x18>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <LL_RCC_LSE_IsReady+0x1a>
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_RCC_SetRFWKPClockSource>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_RCC_SetSMPSClockSource>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f023 0203 	bic.w	r2, r3, #3
 8004cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_RCC_SetSMPSPrescaler>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_RCC_SetUSARTClockSource>:
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f023 0203 	bic.w	r2, r3, #3
 8004d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_RCC_SetLPUARTClockSource>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_RCC_SetI2CClockSource>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004d80:	43db      	mvns	r3, r3
 8004d82:	401a      	ands	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <LL_RCC_SetLPTIMClockSource>:
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_RCC_SetSAIClockSource>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_SetRNGClockSource>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_SetCLK48ClockSource>:
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_SetUSBClockSource>:
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ffe3 	bl	8004e2e <LL_RCC_SetCLK48ClockSource>
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <LL_RCC_SetADCClockSource>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_SetRTCClockSource>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_RCC_GetRTCClockSource>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_RCC_ForceBackupDomainReset>:
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <LL_RCC_PLLSAI1_Enable>:
{
 8004f26:	b480      	push	{r7}
 8004f28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f38:	6013      	str	r3, [r2, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_PLLSAI1_Disable>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_PLLSAI1_IsReady>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f74:	d101      	bne.n	8004f7a <LL_RCC_PLLSAI1_IsReady+0x18>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b088      	sub	sp, #32
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004f8e:	2300      	movs	r3, #0
 8004f90:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f92:	2300      	movs	r3, #0
 8004f94:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d034      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004faa:	d021      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fb0:	d81b      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fbc:	d815      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc6:	d110      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fd8:	e00d      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f947 	bl	8005272 <RCCEx_PLLSAI1_ConfigNP>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	77fb      	strb	r3, [r7, #31]
        break;
 8004fee:	e002      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff6:	7ffb      	ldrb	r3, [r7, #31]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d105      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fee8 	bl	8004dd6 <LL_RCC_SetSAIClockSource>
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005014:	2b00      	cmp	r3, #0
 8005016:	d046      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005018:	f7ff ff56 	bl	8004ec8 <LL_RCC_GetRTCClockSource>
 800501c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	429a      	cmp	r2, r3
 8005026:	d03c      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005028:	f7fe fc58 	bl	80038dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff ff30 	bl	8004e9c <LL_RCC_SetRTCClockSource>
 800503c:	e02e      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800503e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005048:	f7ff ff4b 	bl	8004ee2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800504c:	f7ff ff5a 	bl	8004f04 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800505e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005068:	f7ff fdf0 	bl	8004c4c <LL_RCC_LSE_IsEnabled>
 800506c:	4603      	mov	r3, r0
 800506e:	2b01      	cmp	r3, #1
 8005070:	d114      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005072:	f7fc f901 	bl	8001278 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005078:	e00b      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fc f8fd 	bl	8001278 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d902      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	77fb      	strb	r3, [r7, #31]
              break;
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005092:	f7ff fded 	bl	8004c70 <LL_RCC_LSE_IsReady>
 8005096:	4603      	mov	r3, r0
 8005098:	2b01      	cmp	r3, #1
 800509a:	d1ee      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800509c:	7ffb      	ldrb	r3, [r7, #31]
 800509e:	77bb      	strb	r3, [r7, #30]
 80050a0:	e001      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	7ffb      	ldrb	r3, [r7, #31]
 80050a4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fe2a 	bl	8004d10 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fe35 	bl	8004d3c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fe5d 	bl	8004da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fe52 	bl	8004da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fe2a 	bl	8004d68 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fe1f 	bl	8004d68 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d022      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fe8d 	bl	8004e5a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005148:	d107      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005158:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005162:	d10b      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f8dd 	bl	8005328 <RCCEx_PLLSAI1_ConfigNQ>
 800516e:	4603      	mov	r3, r0
 8005170:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005172:	7ffb      	ldrb	r3, [r7, #31]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005178:	7ffb      	ldrb	r3, [r7, #31]
 800517a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02b      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	d008      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800519a:	d003      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fe2a 	bl	8004e02 <LL_RCC_SetRNGClockSource>
 80051ae:	e00a      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	2000      	movs	r0, #0
 80051bc:	f7ff fe21 	bl	8004e02 <LL_RCC_SetRNGClockSource>
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fe34 	bl	8004e2e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80051ce:	d107      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d022      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fe3d 	bl	8004e70 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051fe:	d107      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005218:	d10b      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3304      	adds	r3, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f8dd 	bl	80053de <RCCEx_PLLSAI1_ConfigNR>
 8005224:	4603      	mov	r3, r0
 8005226:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005228:	7ffb      	ldrb	r3, [r7, #31]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800522e:	7ffb      	ldrb	r3, [r7, #31]
 8005230:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fd26 	bl	8004c94 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fd45 	bl	8004ce8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fd2c 	bl	8004cc0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005268:	7fbb      	ldrb	r3, [r7, #30]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800527e:	f7ff fe61 	bl	8004f44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005282:	f7fb fff9 	bl	8001278 <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005288:	e009      	b.n	800529e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800528a:	f7fb fff5 	bl	8001278 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d902      	bls.n	800529e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	e004      	b.n	80052a8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800529e:	f7ff fe60 	bl	8004f62 <LL_RCC_PLLSAI1_IsReady>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d137      	bne.n	800531e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052c2:	4313      	orrs	r3, r2
 80052c4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d8:	4313      	orrs	r3, r2
 80052da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80052dc:	f7ff fe23 	bl	8004f26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fb ffca 	bl	8001278 <HAL_GetTick>
 80052e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052e6:	e009      	b.n	80052fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052e8:	f7fb ffc6 	bl	8001278 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d902      	bls.n	80052fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	73fb      	strb	r3, [r7, #15]
        break;
 80052fa:	e004      	b.n	8005306 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052fc:	f7ff fe31 	bl	8004f62 <LL_RCC_PLLSAI1_IsReady>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d1f0      	bne.n	80052e8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800531a:	4313      	orrs	r3, r2
 800531c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005334:	f7ff fe06 	bl	8004f44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005338:	f7fb ff9e 	bl	8001278 <HAL_GetTick>
 800533c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800533e:	e009      	b.n	8005354 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005340:	f7fb ff9a 	bl	8001278 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d902      	bls.n	8005354 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	73fb      	strb	r3, [r7, #15]
      break;
 8005352:	e004      	b.n	800535e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005354:	f7ff fe05 	bl	8004f62 <LL_RCC_PLLSAI1_IsReady>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d137      	bne.n	80053d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005378:	4313      	orrs	r3, r2
 800537a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800538e:	4313      	orrs	r3, r2
 8005390:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005392:	f7ff fdc8 	bl	8004f26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005396:	f7fb ff6f 	bl	8001278 <HAL_GetTick>
 800539a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800539c:	e009      	b.n	80053b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800539e:	f7fb ff6b 	bl	8001278 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d902      	bls.n	80053b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	73fb      	strb	r3, [r7, #15]
        break;
 80053b0:	e004      	b.n	80053bc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053b2:	f7ff fdd6 	bl	8004f62 <LL_RCC_PLLSAI1_IsReady>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d1f0      	bne.n	800539e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053d0:	4313      	orrs	r3, r2
 80053d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053ea:	f7ff fdab 	bl	8004f44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ee:	f7fb ff43 	bl	8001278 <HAL_GetTick>
 80053f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053f4:	e009      	b.n	800540a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f6:	f7fb ff3f 	bl	8001278 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d902      	bls.n	800540a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e004      	b.n	8005414 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800540a:	f7ff fdaa 	bl	8004f62 <LL_RCC_PLLSAI1_IsReady>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d137      	bne.n	800548a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800541a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800542e:	4313      	orrs	r3, r2
 8005430:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005444:	4313      	orrs	r3, r2
 8005446:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005448:	f7ff fd6d 	bl	8004f26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544c:	f7fb ff14 	bl	8001278 <HAL_GetTick>
 8005450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005452:	e009      	b.n	8005468 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005454:	f7fb ff10 	bl	8001278 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d902      	bls.n	8005468 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	73fb      	strb	r3, [r7, #15]
        break;
 8005466:	e004      	b.n	8005472 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005468:	f7ff fd7b 	bl	8004f62 <LL_RCC_PLLSAI1_IsReady>
 800546c:	4603      	mov	r3, r0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d1f0      	bne.n	8005454 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d108      	bne.n	800548a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005486:	4313      	orrs	r3, r2
 8005488:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800548a:	7bfb      	ldrb	r3, [r7, #15]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e027      	b.n	80054f6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7a5b      	ldrb	r3, [r3, #9]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fb fc8e 	bl	8000dd8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f023 0120 	bic.w	r1, r3, #32
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0204 	orr.w	r2, r2, #4
 80054e6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7a1b      	ldrb	r3, [r3, #8]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005514:	2302      	movs	r3, #2
 8005516:	e044      	b.n	80055a2 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7a5b      	ldrb	r3, [r3, #9]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d133      	bne.n	8005590 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800552e:	f7fb fea3 	bl	8001278 <HAL_GetTick>
 8005532:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005534:	e018      	b.n	8005568 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005536:	f7fb fe9f 	bl	8001278 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d911      	bls.n	8005568 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	d00a      	beq.n	8005568 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e01c      	b.n	80055a2 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d1df      	bne.n	8005536 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	725a      	strb	r2, [r3, #9]
 800558e:	e004      	b.n	800559a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2204      	movs	r2, #4
 8005594:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	721a      	strb	r2, [r3, #8]

  return status;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e09f      	b.n	80056fe <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fb fc2a 	bl	8000e2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055e0:	4b49      	ldr	r3, [pc, #292]	; (8005708 <HAL_RTC_Init+0x15c>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d07e      	beq.n	80056ea <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	22ca      	movs	r2, #202	; 0xca
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2253      	movs	r2, #83	; 0x53
 80055fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8ab 	bl	8005758 <RTC_EnterInitMode>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2204      	movs	r2, #4
 8005614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]
 800561c:	e067      	b.n	80056ee <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800562c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005630:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6899      	ldr	r1, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	68d2      	ldr	r2, [r2, #12]
 8005658:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6919      	ldr	r1, [r3, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	041a      	lsls	r2, r3, #16
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800567c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0203 	bic.w	r2, r2, #3
 800568c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d113      	bne.n	80056dc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f829 	bl	800570c <HAL_RTC_WaitForSynchro>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00d      	beq.n	80056dc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2204      	movs	r2, #4
 80056cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e010      	b.n	80056fe <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]
 80056e8:	e001      	b.n	80056ee <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40002800 	.word	0x40002800

0800570c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005722:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005724:	f7fb fda8 	bl	8001278 <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800572a:	e009      	b.n	8005740 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800572c:	f7fb fda4 	bl	8001278 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573a:	d901      	bls.n	8005740 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e007      	b.n	8005750 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ee      	beq.n	800572c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d119      	bne.n	80057a2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005778:	f7fb fd7e 	bl	8001278 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800577e:	e009      	b.n	8005794 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005780:	f7fb fd7a 	bl	8001278 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800578e:	d901      	bls.n	8005794 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e007      	b.n	80057a4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ee      	beq.n	8005780 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e089      	b.n	80058da <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	22ca      	movs	r2, #202	; 0xca
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2253      	movs	r2, #83	; 0x53
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80057f4:	f7fb fd40 	bl	8001278 <HAL_GetTick>
 80057f8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057fa:	e015      	b.n	8005828 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057fc:	f7fb fd3c 	bl	8001278 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800580a:	d90d      	bls.n	8005828 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2203      	movs	r2, #3
 8005818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e058      	b.n	80058da <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e2      	bne.n	80057fc <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005844:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005846:	f7fb fd17 	bl	8001278 <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800584c:	e015      	b.n	800587a <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800584e:	f7fb fd13 	bl	8001278 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800585c:	d90d      	bls.n	800587a <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2203      	movs	r2, #3
 800586a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e02f      	b.n	80058da <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0e2      	beq.n	800584e <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0207 	bic.w	r2, r2, #7
 8005896:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6899      	ldr	r1, [r3, #8]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	22ff      	movs	r2, #255	; 0xff
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <LL_RCC_GetUSARTClockSource>:
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4013      	ands	r3, r2
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <LL_RCC_GetLPUARTClockSource>:
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4013      	ands	r3, r2
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e042      	b.n	80059ba <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fb fa9c 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	; 0x24
 8005950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f82d 	bl	80059c4 <UART_SetConfig>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e022      	b.n	80059ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fa49 	bl	8005e14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005990:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fad0 	bl	8005f58 <UART_CheckIdleState>
 80059b8:	4603      	mov	r3, r0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c8:	b08c      	sub	sp, #48	; 0x30
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4baf      	ldr	r3, [pc, #700]	; (8005cb0 <UART_SetConfig+0x2ec>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4aa4      	ldr	r2, [pc, #656]	; (8005cb4 <UART_SetConfig+0x2f0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a44:	430b      	orrs	r3, r1
 8005a46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	f023 010f 	bic.w	r1, r3, #15
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a95      	ldr	r2, [pc, #596]	; (8005cb8 <UART_SetConfig+0x2f4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d125      	bne.n	8005ab4 <UART_SetConfig+0xf0>
 8005a68:	2003      	movs	r0, #3
 8005a6a:	f7ff ff3a 	bl	80058e2 <LL_RCC_GetUSARTClockSource>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d81b      	bhi.n	8005aac <UART_SetConfig+0xe8>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0xb8>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a9d 	.word	0x08005a9d
 8005a84:	08005a95 	.word	0x08005a95
 8005a88:	08005aa5 	.word	0x08005aa5
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a92:	e042      	b.n	8005b1a <UART_SetConfig+0x156>
 8005a94:	2302      	movs	r3, #2
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9a:	e03e      	b.n	8005b1a <UART_SetConfig+0x156>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	e03a      	b.n	8005b1a <UART_SetConfig+0x156>
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aaa:	e036      	b.n	8005b1a <UART_SetConfig+0x156>
 8005aac:	2310      	movs	r3, #16
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab2:	e032      	b.n	8005b1a <UART_SetConfig+0x156>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a7e      	ldr	r2, [pc, #504]	; (8005cb4 <UART_SetConfig+0x2f0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d12a      	bne.n	8005b14 <UART_SetConfig+0x150>
 8005abe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005ac2:	f7ff ff1e 	bl	8005902 <LL_RCC_GetLPUARTClockSource>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005acc:	d01a      	beq.n	8005b04 <UART_SetConfig+0x140>
 8005ace:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ad2:	d81b      	bhi.n	8005b0c <UART_SetConfig+0x148>
 8005ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad8:	d00c      	beq.n	8005af4 <UART_SetConfig+0x130>
 8005ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ade:	d815      	bhi.n	8005b0c <UART_SetConfig+0x148>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <UART_SetConfig+0x128>
 8005ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae8:	d008      	beq.n	8005afc <UART_SetConfig+0x138>
 8005aea:	e00f      	b.n	8005b0c <UART_SetConfig+0x148>
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af2:	e012      	b.n	8005b1a <UART_SetConfig+0x156>
 8005af4:	2302      	movs	r3, #2
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afa:	e00e      	b.n	8005b1a <UART_SetConfig+0x156>
 8005afc:	2304      	movs	r3, #4
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b02:	e00a      	b.n	8005b1a <UART_SetConfig+0x156>
 8005b04:	2308      	movs	r3, #8
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e006      	b.n	8005b1a <UART_SetConfig+0x156>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e002      	b.n	8005b1a <UART_SetConfig+0x156>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a65      	ldr	r2, [pc, #404]	; (8005cb4 <UART_SetConfig+0x2f0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	f040 8097 	bne.w	8005c54 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d823      	bhi.n	8005b76 <UART_SetConfig+0x1b2>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0x170>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b77 	.word	0x08005b77
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b77 	.word	0x08005b77
 8005b44:	08005b67 	.word	0x08005b67
 8005b48:	08005b77 	.word	0x08005b77
 8005b4c:	08005b77 	.word	0x08005b77
 8005b50:	08005b77 	.word	0x08005b77
 8005b54:	08005b6f 	.word	0x08005b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7fe ff98 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8005b5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b5e:	e010      	b.n	8005b82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b60:	4b56      	ldr	r3, [pc, #344]	; (8005cbc <UART_SetConfig+0x2f8>)
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b64:	e00d      	b.n	8005b82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b66:	f7fe ff11 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b6c:	e009      	b.n	8005b82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b74:	e005      	b.n	8005b82 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 812b 	beq.w	8005de0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	4a4c      	ldr	r2, [pc, #304]	; (8005cc0 <UART_SetConfig+0x2fc>)
 8005b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	4413      	add	r3, r2
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d305      	bcc.n	8005bba <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d903      	bls.n	8005bc2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bc0:	e10e      	b.n	8005de0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	60fa      	str	r2, [r7, #12]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	4a3c      	ldr	r2, [pc, #240]	; (8005cc0 <UART_SetConfig+0x2fc>)
 8005bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005be4:	f7fa fb1c 	bl	8000220 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	020b      	lsls	r3, r1, #8
 8005bfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bfe:	0202      	lsls	r2, r0, #8
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	6849      	ldr	r1, [r1, #4]
 8005c04:	0849      	lsrs	r1, r1, #1
 8005c06:	2000      	movs	r0, #0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	eb12 0804 	adds.w	r8, r2, r4
 8005c10:	eb43 0905 	adc.w	r9, r3, r5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	469a      	mov	sl, r3
 8005c1c:	4693      	mov	fp, r2
 8005c1e:	4652      	mov	r2, sl
 8005c20:	465b      	mov	r3, fp
 8005c22:	4640      	mov	r0, r8
 8005c24:	4649      	mov	r1, r9
 8005c26:	f7fa fafb 	bl	8000220 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4613      	mov	r3, r2
 8005c30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c38:	d308      	bcc.n	8005c4c <UART_SetConfig+0x288>
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c40:	d204      	bcs.n	8005c4c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	e0c9      	b.n	8005de0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c52:	e0c5      	b.n	8005de0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5c:	d16d      	bne.n	8005d3a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c62:	3b01      	subs	r3, #1
 8005c64:	2b07      	cmp	r3, #7
 8005c66:	d82d      	bhi.n	8005cc4 <UART_SetConfig+0x300>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x2ac>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c91 	.word	0x08005c91
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005cc5 	.word	0x08005cc5
 8005c7c:	08005c9f 	.word	0x08005c9f
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cc5 	.word	0x08005cc5
 8005c88:	08005cc5 	.word	0x08005cc5
 8005c8c:	08005ca7 	.word	0x08005ca7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7fe ff12 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c96:	e01b      	b.n	8005cd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <UART_SetConfig+0x2f8>)
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c9c:	e018      	b.n	8005cd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c9e:	f7fe fe75 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8005ca2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ca4:	e014      	b.n	8005cd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cac:	e010      	b.n	8005cd0 <UART_SetConfig+0x30c>
 8005cae:	bf00      	nop
 8005cb0:	cfff69f3 	.word	0xcfff69f3
 8005cb4:	40008000 	.word	0x40008000
 8005cb8:	40013800 	.word	0x40013800
 8005cbc:	00f42400 	.word	0x00f42400
 8005cc0:	08016510 	.word	0x08016510
      default:
        pclk = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8084 	beq.w	8005de0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	4a4b      	ldr	r2, [pc, #300]	; (8005e0c <UART_SetConfig+0x448>)
 8005cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cea:	005a      	lsls	r2, r3, #1
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	441a      	add	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b0f      	cmp	r3, #15
 8005d02:	d916      	bls.n	8005d32 <UART_SetConfig+0x36e>
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0a:	d212      	bcs.n	8005d32 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f023 030f 	bic.w	r3, r3, #15
 8005d14:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	8bfb      	ldrh	r3, [r7, #30]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	8bfa      	ldrh	r2, [r7, #30]
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	e056      	b.n	8005de0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d38:	e052      	b.n	8005de0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	2b07      	cmp	r3, #7
 8005d42:	d822      	bhi.n	8005d8a <UART_SetConfig+0x3c6>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x388>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d6d 	.word	0x08005d6d
 8005d50:	08005d75 	.word	0x08005d75
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005d7b 	.word	0x08005d7b
 8005d5c:	08005d8b 	.word	0x08005d8b
 8005d60:	08005d8b 	.word	0x08005d8b
 8005d64:	08005d8b 	.word	0x08005d8b
 8005d68:	08005d83 	.word	0x08005d83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fe fea4 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d72:	e010      	b.n	8005d96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d74:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <UART_SetConfig+0x44c>)
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d78:	e00d      	b.n	8005d96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fe fe07 	bl	800498c <HAL_RCC_GetSysClockFreq>
 8005d7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d80:	e009      	b.n	8005d96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d88:	e005      	b.n	8005d96 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d94:	bf00      	nop
    }

    if (pclk != 0U)
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d021      	beq.n	8005de0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	4a1a      	ldr	r2, [pc, #104]	; (8005e0c <UART_SetConfig+0x448>)
 8005da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	441a      	add	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	d909      	bls.n	8005dda <UART_SetConfig+0x416>
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dcc:	d205      	bcs.n	8005dda <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	e002      	b.n	8005de0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2200      	movs	r2, #0
 8005df4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dfc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3730      	adds	r7, #48	; 0x30
 8005e04:	46bd      	mov	sp, r7
 8005e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08016510 	.word	0x08016510
 8005e10:	00f42400 	.word	0x00f42400

08005e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01a      	beq.n	8005f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f12:	d10a      	bne.n	8005f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f68:	f7fb f986 	bl	8001278 <HAL_GetTick>
 8005f6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d10e      	bne.n	8005f9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f832 	bl	8005ff4 <UART_WaitOnFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e028      	b.n	8005fec <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d10e      	bne.n	8005fc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f81c 	bl	8005ff4 <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e012      	b.n	8005fec <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b09c      	sub	sp, #112	; 0x70
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	4613      	mov	r3, r2
 8006002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006004:	e0a9      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	f000 80a5 	beq.w	800615a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006010:	f7fb f932 	bl	8001278 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <UART_WaitOnFlagUntilTimeout+0x32>
 8006020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006022:	2b00      	cmp	r3, #0
 8006024:	d140      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800603a:	667b      	str	r3, [r7, #100]	; 0x64
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006046:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800604a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	663b      	str	r3, [r7, #96]	; 0x60
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006078:	64ba      	str	r2, [r7, #72]	; 0x48
 800607a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800607e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e069      	b.n	800617c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d051      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c4:	d149      	bne.n	800615a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
 80060f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e6      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	613b      	str	r3, [r7, #16]
   return(result);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f023 0301 	bic.w	r3, r3, #1
 8006118:	66bb      	str	r3, [r7, #104]	; 0x68
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006122:	623a      	str	r2, [r7, #32]
 8006124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	69f9      	ldr	r1, [r7, #28]
 8006128:	6a3a      	ldr	r2, [r7, #32]
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e5      	bne.n	8006102 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e010      	b.n	800617c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	429a      	cmp	r2, r3
 8006176:	f43f af46 	beq.w	8006006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3770      	adds	r7, #112	; 0x70
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_UARTEx_DisableFifoMode+0x16>
 8006196:	2302      	movs	r3, #2
 8006198:	e027      	b.n	80061ea <HAL_UARTEx_DisableFifoMode+0x66>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2224      	movs	r2, #36	; 0x24
 80061a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800620a:	2302      	movs	r3, #2
 800620c:	e02d      	b.n	800626a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2224      	movs	r2, #36	; 0x24
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f850 	bl	80062f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006286:	2302      	movs	r3, #2
 8006288:	e02d      	b.n	80062e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2224      	movs	r2, #36	; 0x24
 8006296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f812 	bl	80062f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d108      	bne.n	8006312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006310:	e031      	b.n	8006376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006312:	2308      	movs	r3, #8
 8006314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006316:	2308      	movs	r3, #8
 8006318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	0e5b      	lsrs	r3, r3, #25
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	0f5b      	lsrs	r3, r3, #29
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	7b3a      	ldrb	r2, [r7, #12]
 800633e:	4911      	ldr	r1, [pc, #68]	; (8006384 <UARTEx_SetNbDataToProcess+0x94>)
 8006340:	5c8a      	ldrb	r2, [r1, r2]
 8006342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006346:	7b3a      	ldrb	r2, [r7, #12]
 8006348:	490f      	ldr	r1, [pc, #60]	; (8006388 <UARTEx_SetNbDataToProcess+0x98>)
 800634a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800634c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006350:	b29a      	uxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	7b7a      	ldrb	r2, [r7, #13]
 800635c:	4909      	ldr	r1, [pc, #36]	; (8006384 <UARTEx_SetNbDataToProcess+0x94>)
 800635e:	5c8a      	ldrb	r2, [r1, r2]
 8006360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006364:	7b7a      	ldrb	r2, [r7, #13]
 8006366:	4908      	ldr	r1, [pc, #32]	; (8006388 <UARTEx_SetNbDataToProcess+0x98>)
 8006368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800636a:	fb93 f3f2 	sdiv	r3, r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	08016528 	.word	0x08016528
 8006388:	08016530 	.word	0x08016530

0800638c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800639c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80063a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80063c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4013      	ands	r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063f0:	b084      	sub	sp, #16
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	f107 0014 	add.w	r0, r7, #20
 80063fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	b004      	add	sp, #16
 8006430:	4770      	bx	lr
	...

08006434 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006434:	b480      	push	{r7}
 8006436:	b09d      	sub	sp, #116	; 0x74
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	78db      	ldrb	r3, [r3, #3]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d81f      	bhi.n	80064a6 <USB_ActivateEndpoint+0x72>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <USB_ActivateEndpoint+0x38>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	0800647d 	.word	0x0800647d
 8006470:	08006499 	.word	0x08006499
 8006474:	080064af 	.word	0x080064af
 8006478:	0800648b 	.word	0x0800648b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800647c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006484:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006488:	e012      	b.n	80064b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800648a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800648e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006492:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006496:	e00b      	b.n	80064b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006498:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800649c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064a4:	e004      	b.n	80064b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80064ac:	e000      	b.n	80064b0 <USB_ActivateEndpoint+0x7c>
      break;
 80064ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	441a      	add	r2, r3
 80064ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	b21b      	sxth	r3, r3
 80064e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ea:	b21a      	sxth	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b21b      	sxth	r3, r3
 80064f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	441a      	add	r2, r3
 8006504:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800650c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006518:	b29b      	uxth	r3, r3
 800651a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	7b1b      	ldrb	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 8178 	bne.w	8006816 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 8084 	beq.w	8006638 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	4413      	add	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	00da      	lsls	r2, r3, #3
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	88db      	ldrh	r3, [r3, #6]
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	827b      	strh	r3, [r7, #18]
 8006572:	8a7b      	ldrh	r3, [r7, #18]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01b      	beq.n	80065b4 <USB_ActivateEndpoint+0x180>
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	823b      	strh	r3, [r7, #16]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	8a3b      	ldrh	r3, [r7, #16]
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	78db      	ldrb	r3, [r3, #3]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d020      	beq.n	80065fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d2:	81bb      	strh	r3, [r7, #12]
 80065d4:	89bb      	ldrh	r3, [r7, #12]
 80065d6:	f083 0320 	eor.w	r3, r3, #32
 80065da:	81bb      	strh	r3, [r7, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	89bb      	ldrh	r3, [r7, #12]
 80065e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]
 80065fc:	e2d5      	b.n	8006baa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006614:	81fb      	strh	r3, [r7, #14]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	89fb      	ldrh	r3, [r7, #14]
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]
 8006636:	e2b8      	b.n	8006baa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	4413      	add	r3, r2
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	00da      	lsls	r2, r3, #3
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	4413      	add	r3, r2
 8006656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	88db      	ldrh	r3, [r3, #6]
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006676:	b29b      	uxth	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	4413      	add	r3, r2
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	00da      	lsls	r2, r3, #3
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	4413      	add	r3, r2
 800668a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669a:	b29a      	uxth	r2, r3
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b3e      	cmp	r3, #62	; 0x3e
 80066a6:	d91d      	bls.n	80066e4 <USB_ActivateEndpoint+0x2b0>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <USB_ActivateEndpoint+0x28e>
 80066bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066be:	3b01      	subs	r3, #1
 80066c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066dc:	b29a      	uxth	r2, r3
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	e026      	b.n	8006732 <USB_ActivateEndpoint+0x2fe>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <USB_ActivateEndpoint+0x2ce>
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	e017      	b.n	8006732 <USB_ActivateEndpoint+0x2fe>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	66bb      	str	r3, [r7, #104]	; 0x68
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <USB_ActivateEndpoint+0x2e8>
 8006716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006718:	3301      	adds	r3, #1
 800671a:	66bb      	str	r3, [r7, #104]	; 0x68
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29a      	uxth	r2, r3
 8006722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006724:	b29b      	uxth	r3, r3
 8006726:	029b      	lsls	r3, r3, #10
 8006728:	b29b      	uxth	r3, r3
 800672a:	4313      	orrs	r3, r2
 800672c:	b29a      	uxth	r2, r3
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01b      	beq.n	8006782 <USB_ActivateEndpoint+0x34e>
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006760:	843b      	strh	r3, [r7, #32]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	8c3b      	ldrh	r3, [r7, #32]
 800676e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677e:	b29b      	uxth	r3, r3
 8006780:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d124      	bne.n	80067d4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800679c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a0:	83bb      	strh	r3, [r7, #28]
 80067a2:	8bbb      	ldrh	r3, [r7, #28]
 80067a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a8:	83bb      	strh	r3, [r7, #28]
 80067aa:	8bbb      	ldrh	r3, [r7, #28]
 80067ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067b0:	83bb      	strh	r3, [r7, #28]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	441a      	add	r2, r3
 80067bc:	8bbb      	ldrh	r3, [r7, #28]
 80067be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	8013      	strh	r3, [r2, #0]
 80067d2:	e1ea      	b.n	8006baa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	83fb      	strh	r3, [r7, #30]
 80067ec:	8bfb      	ldrh	r3, [r7, #30]
 80067ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067f2:	83fb      	strh	r3, [r7, #30]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	8bfb      	ldrh	r3, [r7, #30]
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
 8006814:	e1c9      	b.n	8006baa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	78db      	ldrb	r3, [r3, #3]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d11e      	bne.n	800685c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	441a      	add	r2, r3
 8006842:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800684e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006856:	b29b      	uxth	r3, r3
 8006858:	8013      	strh	r3, [r2, #0]
 800685a:	e01d      	b.n	8006898 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800686e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006872:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	441a      	add	r2, r3
 8006880:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006894:	b29b      	uxth	r3, r3
 8006896:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a8:	4413      	add	r3, r2
 80068aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	00da      	lsls	r2, r3, #3
 80068b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	891b      	ldrh	r3, [r3, #8]
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	657b      	str	r3, [r7, #84]	; 0x54
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068dc:	4413      	add	r3, r2
 80068de:	657b      	str	r3, [r7, #84]	; 0x54
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	00da      	lsls	r2, r3, #3
 80068e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e8:	4413      	add	r3, r2
 80068ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068ee:	653b      	str	r3, [r7, #80]	; 0x50
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	895b      	ldrh	r3, [r3, #10]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 8093 	bne.w	8006a30 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800691a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800691e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01b      	beq.n	800695e <USB_ActivateEndpoint+0x52a>
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800696c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01b      	beq.n	80069ae <USB_ActivateEndpoint+0x57a>
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	441a      	add	r2, r3
 8006998:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800699a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80069c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80069ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]
 8006a2e:	e0bc      	b.n	8006baa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006a40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01d      	beq.n	8006a88 <USB_ActivateEndpoint+0x654>
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01d      	beq.n	8006ae0 <USB_ActivateEndpoint+0x6ac>
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	78db      	ldrb	r3, [r3, #3]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d024      	beq.n	8006b32 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b06:	f083 0320 	eor.w	r3, r3, #32
 8006b0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]
 8006b30:	e01d      	b.n	8006b6e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	441a      	add	r2, r3
 8006b56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	441a      	add	r2, r3
 8006b92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006baa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3774      	adds	r7, #116	; 0x74
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop

08006bbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b08d      	sub	sp, #52	; 0x34
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	7b1b      	ldrb	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 808e 	bne.w	8006cec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d044      	beq.n	8006c62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	81bb      	strh	r3, [r7, #12]
 8006be6:	89bb      	ldrh	r3, [r7, #12]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <USB_DeactivateEndpoint+0x6c>
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	817b      	strh	r3, [r7, #10]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	897b      	ldrh	r3, [r7, #10]
 8006c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3e:	813b      	strh	r3, [r7, #8]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	441a      	add	r2, r3
 8006c4a:	893b      	ldrh	r3, [r7, #8]
 8006c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	8013      	strh	r3, [r2, #0]
 8006c60:	e192      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	827b      	strh	r3, [r7, #18]
 8006c70:	8a7b      	ldrh	r3, [r7, #18]
 8006c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01b      	beq.n	8006cb2 <USB_DeactivateEndpoint+0xf6>
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	823b      	strh	r3, [r7, #16]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	441a      	add	r2, r3
 8006c9c:	8a3b      	ldrh	r3, [r7, #16]
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	81fb      	strh	r3, [r7, #14]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	89fb      	ldrh	r3, [r7, #14]
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]
 8006cea:	e14d      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 80a5 	bne.w	8006e40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	843b      	strh	r3, [r7, #32]
 8006d04:	8c3b      	ldrh	r3, [r7, #32]
 8006d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01b      	beq.n	8006d46 <USB_DeactivateEndpoint+0x18a>
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	83fb      	strh	r3, [r7, #30]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8bfb      	ldrh	r3, [r7, #30]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	83bb      	strh	r3, [r7, #28]
 8006d54:	8bbb      	ldrh	r3, [r7, #28]
 8006d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01b      	beq.n	8006d96 <USB_DeactivateEndpoint+0x1da>
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	837b      	strh	r3, [r7, #26]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	8b7b      	ldrh	r3, [r7, #26]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dac:	833b      	strh	r3, [r7, #24]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	8b3b      	ldrh	r3, [r7, #24]
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	82fb      	strh	r3, [r7, #22]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	441a      	add	r2, r3
 8006df0:	8afb      	ldrh	r3, [r7, #22]
 8006df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1c:	82bb      	strh	r3, [r7, #20]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	8abb      	ldrh	r3, [r7, #20]
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
 8006e3e:	e0a3      	b.n	8006f88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01b      	beq.n	8006e90 <USB_DeactivateEndpoint+0x2d4>
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01b      	beq.n	8006ee0 <USB_DeactivateEndpoint+0x324>
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	441a      	add	r2, r3
 8006eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	441a      	add	r2, r3
 8006f02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	441a      	add	r2, r3
 8006f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3734      	adds	r7, #52	; 0x34
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b0c2      	sub	sp, #264	; 0x108
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa4:	6018      	str	r0, [r3, #0]
 8006fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	f040 86b7 	bne.w	8007d30 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d908      	bls.n	8006ff0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fee:	e007      	b.n	8007000 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	7b1b      	ldrb	r3, [r3, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d13a      	bne.n	8007086 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6959      	ldr	r1, [r3, #20]
 800701c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	88da      	ldrh	r2, [r3, #6]
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702c:	b29b      	uxth	r3, r3
 800702e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007032:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	f001 fc98 	bl	800896c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007056:	b29b      	uxth	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	4413      	add	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	00da      	lsls	r2, r3, #3
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4413      	add	r3, r2
 8007072:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f000 be1f 	b.w	8007cc4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	78db      	ldrb	r3, [r3, #3]
 8007092:	2b02      	cmp	r3, #2
 8007094:	f040 8462 	bne.w	800795c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6a1a      	ldr	r2, [r3, #32]
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	f240 83df 	bls.w	8007874 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80070e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80070fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007106:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800710a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710e:	b29b      	uxth	r3, r3
 8007110:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 81c7 	beq.w	80074e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
 8007164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d177      	bne.n	8007264 <USB_EPStartXfer+0x2ce>
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	4413      	add	r3, r2
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	00da      	lsls	r2, r3, #3
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	4413      	add	r3, r2
 80071aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	2b3e      	cmp	r3, #62	; 0x3e
 80071c6:	d921      	bls.n	800720c <USB_EPStartXfer+0x276>
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <USB_EPStartXfer+0x252>
 80071de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071e2:	3b01      	subs	r3, #1
 80071e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29a      	uxth	r2, r3
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e050      	b.n	80072ae <USB_EPStartXfer+0x318>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <USB_EPStartXfer+0x294>
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007222:	b29a      	uxth	r2, r3
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	e041      	b.n	80072ae <USB_EPStartXfer+0x318>
 800722a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800722e:	085b      	lsrs	r3, r3, #1
 8007230:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <USB_EPStartXfer+0x2b4>
 8007240:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007244:	3301      	adds	r3, #1
 8007246:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007254:	b29b      	uxth	r3, r3
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	b29b      	uxth	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b29a      	uxth	r2, r3
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	e024      	b.n	80072ae <USB_EPStartXfer+0x318>
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d11c      	bne.n	80072ae <USB_EPStartXfer+0x318>
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	4413      	add	r3, r2
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
 800728c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00da      	lsls	r2, r3, #3
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	4413      	add	r3, r2
 800729e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	895b      	ldrh	r3, [r3, #10]
 80072ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6959      	ldr	r1, [r3, #20]
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072dc:	6800      	ldr	r0, [r0, #0]
 80072de:	f001 fb45 	bl	800896c <USB_WritePMA>
            ep->xfer_buff += len;
 80072e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695a      	ldr	r2, [r3, #20]
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f2:	441a      	add	r2, r3
 80072f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d90f      	bls.n	800733c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800731c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1a      	ldr	r2, [r3, #32]
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	1ad2      	subs	r2, r2, r3
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	621a      	str	r2, [r3, #32]
 800733a:	e00e      	b.n	800735a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2200      	movs	r2, #0
 8007358:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800735a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d177      	bne.n	800745a <USB_EPStartXfer+0x4c4>
 800736a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007384:	b29b      	uxth	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	4413      	add	r3, r2
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	00da      	lsls	r2, r3, #3
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	4413      	add	r3, r2
 80073a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ba:	2b3e      	cmp	r3, #62	; 0x3e
 80073bc:	d921      	bls.n	8007402 <USB_EPStartXfer+0x46c>
 80073be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073cc:	f003 031f 	and.w	r3, r3, #31
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <USB_EPStartXfer+0x448>
 80073d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d8:	3b01      	subs	r3, #1
 80073da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	029b      	lsls	r3, r3, #10
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	4313      	orrs	r3, r2
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	e056      	b.n	80074b0 <USB_EPStartXfer+0x51a>
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <USB_EPStartXfer+0x48a>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007418:	b29a      	uxth	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	e047      	b.n	80074b0 <USB_EPStartXfer+0x51a>
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007424:	085b      	lsrs	r3, r3, #1
 8007426:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800742a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <USB_EPStartXfer+0x4aa>
 8007436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800743a:	3301      	adds	r3, #1
 800743c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29a      	uxth	r2, r3
 8007446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744a:	b29b      	uxth	r3, r3
 800744c:	029b      	lsls	r3, r3, #10
 800744e:	b29b      	uxth	r3, r3
 8007450:	4313      	orrs	r3, r2
 8007452:	b29a      	uxth	r2, r3
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	e02a      	b.n	80074b0 <USB_EPStartXfer+0x51a>
 800745a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d122      	bne.n	80074b0 <USB_EPStartXfer+0x51a>
 800746a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007484:	b29b      	uxth	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	4413      	add	r3, r2
 800748c:	623b      	str	r3, [r7, #32]
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	00da      	lsls	r2, r3, #3
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	4413      	add	r3, r2
 80074a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	891b      	ldrh	r3, [r3, #8]
 80074bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6959      	ldr	r1, [r3, #20]
 80074cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	f001 fa44 	bl	800896c <USB_WritePMA>
 80074e4:	e3ee      	b.n	8007cc4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d177      	bne.n	80075e6 <USB_EPStartXfer+0x650>
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	64bb      	str	r3, [r7, #72]	; 0x48
 8007502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007510:	b29b      	uxth	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007516:	4413      	add	r3, r2
 8007518:	64bb      	str	r3, [r7, #72]	; 0x48
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	00da      	lsls	r2, r3, #3
 8007528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800752a:	4413      	add	r3, r2
 800752c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007530:	647b      	str	r3, [r7, #68]	; 0x44
 8007532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800753c:	b29a      	uxth	r2, r3
 800753e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007546:	2b3e      	cmp	r3, #62	; 0x3e
 8007548:	d921      	bls.n	800758e <USB_EPStartXfer+0x5f8>
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <USB_EPStartXfer+0x5d4>
 8007560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007564:	3b01      	subs	r3, #1
 8007566:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800756a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29a      	uxth	r2, r3
 8007570:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29b      	uxth	r3, r3
 800757a:	4313      	orrs	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007586:	b29a      	uxth	r2, r3
 8007588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e056      	b.n	800763c <USB_EPStartXfer+0x6a6>
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <USB_EPStartXfer+0x616>
 8007596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	e047      	b.n	800763c <USB_EPStartXfer+0x6a6>
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d004      	beq.n	80075cc <USB_EPStartXfer+0x636>
 80075c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075c6:	3301      	adds	r3, #1
 80075c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	029b      	lsls	r3, r3, #10
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	b29a      	uxth	r2, r3
 80075e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e02a      	b.n	800763c <USB_EPStartXfer+0x6a6>
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d122      	bne.n	800763c <USB_EPStartXfer+0x6a6>
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	653b      	str	r3, [r7, #80]	; 0x50
 8007602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007610:	b29b      	uxth	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007616:	4413      	add	r3, r2
 8007618:	653b      	str	r3, [r7, #80]	; 0x50
 800761a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	00da      	lsls	r2, r3, #3
 8007628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800762a:	4413      	add	r3, r2
 800762c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007636:	b29a      	uxth	r2, r3
 8007638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800763c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	891b      	ldrh	r3, [r3, #8]
 8007648:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6959      	ldr	r1, [r3, #20]
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	b29b      	uxth	r3, r3
 800765e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007662:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007666:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	f001 f97e 	bl	800896c <USB_WritePMA>
            ep->xfer_buff += len;
 8007670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695a      	ldr	r2, [r3, #20]
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007680:	441a      	add	r2, r3
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800768e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6a1a      	ldr	r2, [r3, #32]
 800769a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d90f      	bls.n	80076ca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80076aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6a1a      	ldr	r2, [r3, #32]
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	621a      	str	r2, [r3, #32]
 80076c8:	e00e      	b.n	80076e8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80076da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2200      	movs	r2, #0
 80076e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	643b      	str	r3, [r7, #64]	; 0x40
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d177      	bne.n	80077f4 <USB_EPStartXfer+0x85e>
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771e:	b29b      	uxth	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	4413      	add	r3, r2
 8007726:	63bb      	str	r3, [r7, #56]	; 0x38
 8007728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	00da      	lsls	r2, r3, #3
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	4413      	add	r3, r2
 800773a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800774a:	b29a      	uxth	r2, r3
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	801a      	strh	r2, [r3, #0]
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	2b3e      	cmp	r3, #62	; 0x3e
 8007756:	d921      	bls.n	800779c <USB_EPStartXfer+0x806>
 8007758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	2b00      	cmp	r3, #0
 800776c:	d104      	bne.n	8007778 <USB_EPStartXfer+0x7e2>
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007772:	3b01      	subs	r3, #1
 8007774:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007782:	b29b      	uxth	r3, r3
 8007784:	029b      	lsls	r3, r3, #10
 8007786:	b29b      	uxth	r3, r3
 8007788:	4313      	orrs	r3, r2
 800778a:	b29b      	uxth	r3, r3
 800778c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007794:	b29a      	uxth	r2, r3
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	e050      	b.n	800783e <USB_EPStartXfer+0x8a8>
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <USB_EPStartXfer+0x824>
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	e041      	b.n	800783e <USB_EPStartXfer+0x8a8>
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <USB_EPStartXfer+0x844>
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d4:	3301      	adds	r3, #1
 80077d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	029b      	lsls	r3, r3, #10
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e024      	b.n	800783e <USB_EPStartXfer+0x8a8>
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d11c      	bne.n	800783e <USB_EPStartXfer+0x8a8>
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007818:	4413      	add	r3, r2
 800781a:	643b      	str	r3, [r7, #64]	; 0x40
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	00da      	lsls	r2, r3, #3
 800782a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782c:	4413      	add	r3, r2
 800782e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007838:	b29a      	uxth	r2, r3
 800783a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	895b      	ldrh	r3, [r3, #10]
 800784a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6959      	ldr	r1, [r3, #20]
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785e:	b29b      	uxth	r3, r3
 8007860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007864:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007868:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f001 f87d 	bl	800896c <USB_WritePMA>
 8007872:	e227      	b.n	8007cc4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	441a      	add	r2, r3
 80078c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078dc:	b29b      	uxth	r3, r3
 80078de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007900:	4413      	add	r3, r2
 8007902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	00da      	lsls	r2, r3, #3
 8007912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007914:	4413      	add	r3, r2
 8007916:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800791a:	65bb      	str	r3, [r7, #88]	; 0x58
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007920:	b29a      	uxth	r2, r3
 8007922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007924:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	891b      	ldrh	r3, [r3, #8]
 8007932:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6959      	ldr	r1, [r3, #20]
 8007942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007946:	b29b      	uxth	r3, r3
 8007948:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800794c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007950:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007954:	6800      	ldr	r0, [r0, #0]
 8007956:	f001 f809 	bl	800896c <USB_WritePMA>
 800795a:	e1b3      	b.n	8007cc4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800795c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a1a      	ldr	r2, [r3, #32]
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800797a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 80c6 	beq.w	8007b2e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	673b      	str	r3, [r7, #112]	; 0x70
 80079ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	785b      	ldrb	r3, [r3, #1]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d177      	bne.n	8007aae <USB_EPStartXfer+0xb18>
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d8:	b29b      	uxth	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079de:	4413      	add	r3, r2
 80079e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	00da      	lsls	r2, r3, #3
 80079f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079f2:	4413      	add	r3, r2
 80079f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079f8:	667b      	str	r3, [r7, #100]	; 0x64
 80079fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a10:	d921      	bls.n	8007a56 <USB_EPStartXfer+0xac0>
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <USB_EPStartXfer+0xa9c>
 8007a28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	029b      	lsls	r3, r3, #10
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	e050      	b.n	8007af8 <USB_EPStartXfer+0xb62>
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <USB_EPStartXfer+0xade>
 8007a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e041      	b.n	8007af8 <USB_EPStartXfer+0xb62>
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <USB_EPStartXfer+0xafe>
 8007a8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a8e:	3301      	adds	r3, #1
 8007a90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	029b      	lsls	r3, r3, #10
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e024      	b.n	8007af8 <USB_EPStartXfer+0xb62>
 8007aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d11c      	bne.n	8007af8 <USB_EPStartXfer+0xb62>
 8007abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad2:	4413      	add	r3, r2
 8007ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8007ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	895b      	ldrh	r3, [r3, #10]
 8007b04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6959      	ldr	r1, [r3, #20]
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b26:	6800      	ldr	r0, [r0, #0]
 8007b28:	f000 ff20 	bl	800896c <USB_WritePMA>
 8007b2c:	e0ca      	b.n	8007cc4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d177      	bne.n	8007c2e <USB_EPStartXfer+0xc98>
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b5e:	4413      	add	r3, r2
 8007b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	00da      	lsls	r2, r3, #3
 8007b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b72:	4413      	add	r3, r2
 8007b74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b90:	d921      	bls.n	8007bd6 <USB_EPStartXfer+0xc40>
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <USB_EPStartXfer+0xc1c>
 8007ba8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bac:	3b01      	subs	r3, #1
 8007bae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	029b      	lsls	r3, r3, #10
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	e05c      	b.n	8007c90 <USB_EPStartXfer+0xcfa>
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <USB_EPStartXfer+0xc5e>
 8007bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e04d      	b.n	8007c90 <USB_EPStartXfer+0xcfa>
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <USB_EPStartXfer+0xc7e>
 8007c0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	029b      	lsls	r3, r3, #10
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	e030      	b.n	8007c90 <USB_EPStartXfer+0xcfa>
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d128      	bne.n	8007c90 <USB_EPStartXfer+0xcfa>
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c62:	4413      	add	r3, r2
 8007c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	00da      	lsls	r2, r3, #3
 8007c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	891b      	ldrh	r3, [r3, #8]
 8007c9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6959      	ldr	r1, [r3, #20]
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007cb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007cba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007cbe:	6800      	ldr	r0, [r0, #0]
 8007cc0:	f000 fe54 	bl	800896c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cea:	817b      	strh	r3, [r7, #10]
 8007cec:	897b      	ldrh	r3, [r7, #10]
 8007cee:	f083 0310 	eor.w	r3, r3, #16
 8007cf2:	817b      	strh	r3, [r7, #10]
 8007cf4:	897b      	ldrh	r3, [r7, #10]
 8007cf6:	f083 0320 	eor.w	r3, r3, #32
 8007cfa:	817b      	strh	r3, [r7, #10]
 8007cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	441a      	add	r2, r3
 8007d16:	897b      	ldrh	r3, [r7, #10]
 8007d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	8013      	strh	r3, [r2, #0]
 8007d2c:	f000 bcde 	b.w	80086ec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	7b1b      	ldrb	r3, [r3, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 80bb 	bne.w	8007eb8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d917      	bls.n	8007d8e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	619a      	str	r2, [r3, #24]
 8007d8c:	e00e      	b.n	8007dac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2200      	movs	r2, #0
 8007daa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	00da      	lsls	r2, r3, #3
 8007de4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007de8:	4413      	add	r3, r2
 8007dea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e0c:	d924      	bls.n	8007e58 <USB_EPStartXfer+0xec2>
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1c:	f003 031f 	and.w	r3, r3, #31
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <USB_EPStartXfer+0xe98>
 8007e24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	029b      	lsls	r3, r3, #10
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	f000 bc10 	b.w	8008678 <USB_EPStartXfer+0x16e2>
 8007e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10c      	bne.n	8007e7a <USB_EPStartXfer+0xee4>
 8007e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e76:	801a      	strh	r2, [r3, #0]
 8007e78:	e3fe      	b.n	8008678 <USB_EPStartXfer+0x16e2>
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <USB_EPStartXfer+0xf04>
 8007e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e94:	3301      	adds	r3, #1
 8007e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	029b      	lsls	r3, r3, #10
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb4:	801a      	strh	r2, [r3, #0]
 8007eb6:	e3df      	b.n	8008678 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	78db      	ldrb	r3, [r3, #3]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	f040 8218 	bne.w	80082fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 809d 	bne.w	8008016 <USB_EPStartXfer+0x1080>
 8007edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f00:	4413      	add	r3, r2
 8007f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	00da      	lsls	r2, r3, #3
 8007f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f18:	4413      	add	r3, r2
 8007f1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f34:	801a      	strh	r2, [r3, #0]
 8007f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b3e      	cmp	r3, #62	; 0x3e
 8007f44:	d92b      	bls.n	8007f9e <USB_EPStartXfer+0x1008>
 8007f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d104      	bne.n	8007f76 <USB_EPStartXfer+0xfe0>
 8007f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f70:	3b01      	subs	r3, #1
 8007f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	029b      	lsls	r3, r3, #10
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e070      	b.n	8008080 <USB_EPStartXfer+0x10ea>
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10c      	bne.n	8007fc8 <USB_EPStartXfer+0x1032>
 8007fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	e05b      	b.n	8008080 <USB_EPStartXfer+0x10ea>
 8007fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <USB_EPStartXfer+0x1062>
 8007fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008004:	b29b      	uxth	r3, r3
 8008006:	029b      	lsls	r3, r3, #10
 8008008:	b29b      	uxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e034      	b.n	8008080 <USB_EPStartXfer+0x10ea>
 8008016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d12c      	bne.n	8008080 <USB_EPStartXfer+0x10ea>
 8008026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008042:	b29b      	uxth	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800804a:	4413      	add	r3, r2
 800804c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	00da      	lsls	r2, r3, #3
 800805e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008062:	4413      	add	r3, r2
 8008064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	b29a      	uxth	r2, r3
 800807a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b00      	cmp	r3, #0
 800809c:	f040 809d 	bne.w	80081da <USB_EPStartXfer+0x1244>
 80080a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080bc:	b29b      	uxth	r3, r3
 80080be:	461a      	mov	r2, r3
 80080c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080c4:	4413      	add	r3, r2
 80080c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	00da      	lsls	r2, r3, #3
 80080d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080dc:	4413      	add	r3, r2
 80080de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080f8:	801a      	strh	r2, [r3, #0]
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b3e      	cmp	r3, #62	; 0x3e
 8008108:	d92b      	bls.n	8008162 <USB_EPStartXfer+0x11cc>
 800810a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800811c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	2b00      	cmp	r3, #0
 800812e:	d104      	bne.n	800813a <USB_EPStartXfer+0x11a4>
 8008130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008134:	3b01      	subs	r3, #1
 8008136:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800813a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29a      	uxth	r2, r3
 8008142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008146:	b29b      	uxth	r3, r3
 8008148:	029b      	lsls	r3, r3, #10
 800814a:	b29b      	uxth	r3, r3
 800814c:	4313      	orrs	r3, r2
 800814e:	b29b      	uxth	r3, r3
 8008150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008158:	b29a      	uxth	r2, r3
 800815a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	e069      	b.n	8008236 <USB_EPStartXfer+0x12a0>
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10c      	bne.n	800818c <USB_EPStartXfer+0x11f6>
 8008172:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008182:	b29a      	uxth	r2, r3
 8008184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008188:	801a      	strh	r2, [r3, #0]
 800818a:	e054      	b.n	8008236 <USB_EPStartXfer+0x12a0>
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	085b      	lsrs	r3, r3, #1
 800819a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800819e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <USB_EPStartXfer+0x1226>
 80081b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b6:	3301      	adds	r3, #1
 80081b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	029b      	lsls	r3, r3, #10
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	4313      	orrs	r3, r2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081d6:	801a      	strh	r2, [r3, #0]
 80081d8:	e02d      	b.n	8008236 <USB_EPStartXfer+0x12a0>
 80081da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d125      	bne.n	8008236 <USB_EPStartXfer+0x12a0>
 80081ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008200:	4413      	add	r3, r2
 8008202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	00da      	lsls	r2, r3, #3
 8008214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008218:	4413      	add	r3, r2
 800821a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800821e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008234:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8218 	beq.w	8008678 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008268:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800826c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <USB_EPStartXfer+0x12ea>
 8008274:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10d      	bne.n	800829c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008280:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 81f5 	bne.w	8008678 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800828e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 81ee 	bne.w	8008678 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800829c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80082c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	441a      	add	r2, r3
 80082e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80082e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	8013      	strh	r3, [r2, #0]
 80082f8:	e1be      	b.n	8008678 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80082fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	78db      	ldrb	r3, [r3, #3]
 8008306:	2b01      	cmp	r3, #1
 8008308:	f040 81b4 	bne.w	8008674 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	699a      	ldr	r2, [r3, #24]
 8008318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	429a      	cmp	r2, r3
 8008326:	d917      	bls.n	8008358 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699a      	ldr	r2, [r3, #24]
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008348:	1ad2      	subs	r2, r2, r3
 800834a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	619a      	str	r2, [r3, #24]
 8008356:	e00e      	b.n	8008376 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f040 8085 	bne.w	8008492 <USB_EPStartXfer+0x14fc>
 8008388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083ac:	4413      	add	r3, r2
 80083ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	00da      	lsls	r2, r3, #3
 80083c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083c4:	4413      	add	r3, r2
 80083c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083da:	b29a      	uxth	r2, r3
 80083dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e6:	2b3e      	cmp	r3, #62	; 0x3e
 80083e8:	d923      	bls.n	8008432 <USB_EPStartXfer+0x149c>
 80083ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <USB_EPStartXfer+0x1474>
 8008400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008404:	3b01      	subs	r3, #1
 8008406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800840a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29a      	uxth	r2, r3
 8008412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008416:	b29b      	uxth	r3, r3
 8008418:	029b      	lsls	r3, r3, #10
 800841a:	b29b      	uxth	r3, r3
 800841c:	4313      	orrs	r3, r2
 800841e:	b29b      	uxth	r3, r3
 8008420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008428:	b29a      	uxth	r2, r3
 800842a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800842e:	801a      	strh	r2, [r3, #0]
 8008430:	e060      	b.n	80084f4 <USB_EPStartXfer+0x155e>
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10c      	bne.n	8008454 <USB_EPStartXfer+0x14be>
 800843a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800844a:	b29a      	uxth	r2, r3
 800844c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	e04f      	b.n	80084f4 <USB_EPStartXfer+0x155e>
 8008454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800845e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d004      	beq.n	8008474 <USB_EPStartXfer+0x14de>
 800846a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800846e:	3301      	adds	r3, #1
 8008470:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29a      	uxth	r2, r3
 800847c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008480:	b29b      	uxth	r3, r3
 8008482:	029b      	lsls	r3, r3, #10
 8008484:	b29b      	uxth	r3, r3
 8008486:	4313      	orrs	r3, r2
 8008488:	b29a      	uxth	r2, r3
 800848a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800848e:	801a      	strh	r2, [r3, #0]
 8008490:	e030      	b.n	80084f4 <USB_EPStartXfer+0x155e>
 8008492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d128      	bne.n	80084f4 <USB_EPStartXfer+0x155e>
 80084a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084be:	b29b      	uxth	r3, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084c6:	4413      	add	r3, r2
 80084c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	00da      	lsls	r2, r3, #3
 80084da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084de:	4413      	add	r3, r2
 80084e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	785b      	ldrb	r3, [r3, #1]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f040 8085 	bne.w	800861e <USB_EPStartXfer+0x1688>
 8008514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008530:	b29b      	uxth	r3, r3
 8008532:	461a      	mov	r2, r3
 8008534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008538:	4413      	add	r3, r2
 800853a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800853e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	00da      	lsls	r2, r3, #3
 800854c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008550:	4413      	add	r3, r2
 8008552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800855a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008566:	b29a      	uxth	r2, r3
 8008568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800856c:	801a      	strh	r2, [r3, #0]
 800856e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008572:	2b3e      	cmp	r3, #62	; 0x3e
 8008574:	d923      	bls.n	80085be <USB_EPStartXfer+0x1628>
 8008576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <USB_EPStartXfer+0x1600>
 800858c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008590:	3b01      	subs	r3, #1
 8008592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29a      	uxth	r2, r3
 800859e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	029b      	lsls	r3, r3, #10
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	e05c      	b.n	8008678 <USB_EPStartXfer+0x16e2>
 80085be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10c      	bne.n	80085e0 <USB_EPStartXfer+0x164a>
 80085c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085dc:	801a      	strh	r2, [r3, #0]
 80085de:	e04b      	b.n	8008678 <USB_EPStartXfer+0x16e2>
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <USB_EPStartXfer+0x166a>
 80085f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085fa:	3301      	adds	r3, #1
 80085fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29a      	uxth	r2, r3
 8008608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860c:	b29b      	uxth	r3, r3
 800860e:	029b      	lsls	r3, r3, #10
 8008610:	b29b      	uxth	r3, r3
 8008612:	4313      	orrs	r3, r2
 8008614:	b29a      	uxth	r2, r3
 8008616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800861a:	801a      	strh	r2, [r3, #0]
 800861c:	e02c      	b.n	8008678 <USB_EPStartXfer+0x16e2>
 800861e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d124      	bne.n	8008678 <USB_EPStartXfer+0x16e2>
 800862e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863c:	b29b      	uxth	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008644:	4413      	add	r3, r2
 8008646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	00da      	lsls	r2, r3, #3
 8008658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800865c:	4413      	add	r3, r2
 800865e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866a:	b29a      	uxth	r2, r3
 800866c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	e001      	b.n	8008678 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e03a      	b.n	80086ee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80086a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80086a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80086ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80086b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80086ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	441a      	add	r2, r3
 80086d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d020      	beq.n	800874c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008720:	81bb      	strh	r3, [r7, #12]
 8008722:	89bb      	ldrh	r3, [r7, #12]
 8008724:	f083 0310 	eor.w	r3, r3, #16
 8008728:	81bb      	strh	r3, [r7, #12]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	441a      	add	r2, r3
 8008734:	89bb      	ldrh	r3, [r7, #12]
 8008736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800873e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008746:	b29b      	uxth	r3, r3
 8008748:	8013      	strh	r3, [r2, #0]
 800874a:	e01f      	b.n	800878c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800875e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008762:	81fb      	strh	r3, [r7, #14]
 8008764:	89fb      	ldrh	r3, [r7, #14]
 8008766:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800876a:	81fb      	strh	r3, [r7, #14]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	441a      	add	r2, r3
 8008776:	89fb      	ldrh	r3, [r7, #14]
 8008778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008788:	b29b      	uxth	r3, r3
 800878a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800879a:	b480      	push	{r7}
 800879c:	b087      	sub	sp, #28
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	7b1b      	ldrb	r3, [r3, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f040 809d 	bne.w	80088e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	785b      	ldrb	r3, [r3, #1]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d04c      	beq.n	8008850 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	823b      	strh	r3, [r7, #16]
 80087c4:	8a3b      	ldrh	r3, [r7, #16]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01b      	beq.n	8008806 <USB_EPClearStall+0x6c>
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e4:	81fb      	strh	r3, [r7, #14]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	441a      	add	r2, r3
 80087f0:	89fb      	ldrh	r3, [r7, #14]
 80087f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008802:	b29b      	uxth	r3, r3
 8008804:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	78db      	ldrb	r3, [r3, #3]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d06c      	beq.n	80088e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	81bb      	strh	r3, [r7, #12]
 8008826:	89bb      	ldrh	r3, [r7, #12]
 8008828:	f083 0320 	eor.w	r3, r3, #32
 800882c:	81bb      	strh	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	89bb      	ldrh	r3, [r7, #12]
 800883a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884a:	b29b      	uxth	r3, r3
 800884c:	8013      	strh	r3, [r2, #0]
 800884e:	e04b      	b.n	80088e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	82fb      	strh	r3, [r7, #22]
 800885e:	8afb      	ldrh	r3, [r7, #22]
 8008860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01b      	beq.n	80088a0 <USB_EPClearStall+0x106>
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	82bb      	strh	r3, [r7, #20]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	8abb      	ldrh	r3, [r7, #20]
 800888c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889c:	b29b      	uxth	r3, r3
 800889e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b6:	827b      	strh	r3, [r7, #18]
 80088b8:	8a7b      	ldrh	r3, [r7, #18]
 80088ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088be:	827b      	strh	r3, [r7, #18]
 80088c0:	8a7b      	ldrh	r3, [r7, #18]
 80088c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088c6:	827b      	strh	r3, [r7, #18]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	441a      	add	r2, r3
 80088d2:	8a7b      	ldrh	r3, [r7, #18]
 80088d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2280      	movs	r2, #128	; 0x80
 800890c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800892c:	b29b      	uxth	r3, r3
 800892e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800895a:	b29b      	uxth	r3, r3
 800895c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800895e:	68fb      	ldr	r3, [r7, #12]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800896c:	b480      	push	{r7}
 800896e:	b08b      	sub	sp, #44	; 0x2c
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4611      	mov	r1, r2
 8008978:	461a      	mov	r2, r3
 800897a:	460b      	mov	r3, r1
 800897c:	80fb      	strh	r3, [r7, #6]
 800897e:	4613      	mov	r3, r2
 8008980:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008982:	88bb      	ldrh	r3, [r7, #4]
 8008984:	3301      	adds	r3, #1
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008992:	88fa      	ldrh	r2, [r7, #6]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800899c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
 80089a2:	e01b      	b.n	80089dc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	3301      	adds	r3, #1
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	b21a      	sxth	r2, r3
 80089b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	b21b      	sxth	r3, r3
 80089bc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	8a7a      	ldrh	r2, [r7, #18]
 80089c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	3302      	adds	r3, #2
 80089c8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	3301      	adds	r3, #1
 80089ce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	3301      	adds	r3, #1
 80089d4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	3b01      	subs	r3, #1
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e0      	bne.n	80089a4 <USB_WritePMA+0x38>
  }
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	372c      	adds	r7, #44	; 0x2c
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b08b      	sub	sp, #44	; 0x2c
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4611      	mov	r1, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	460b      	mov	r3, r1
 8008a00:	80fb      	strh	r3, [r7, #6]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a06:	88bb      	ldrh	r3, [r7, #4]
 8008a08:	085b      	lsrs	r3, r3, #1
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a16:	88fa      	ldrh	r2, [r7, #6]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
 8008a26:	e018      	b.n	8008a5a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	3302      	adds	r3, #2
 8008a34:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	3301      	adds	r3, #1
 8008a42:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	0a1b      	lsrs	r3, r3, #8
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	3301      	adds	r3, #1
 8008a52:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	3b01      	subs	r3, #1
 8008a58:	627b      	str	r3, [r7, #36]	; 0x24
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e3      	bne.n	8008a28 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008a60:	88bb      	ldrh	r3, [r7, #4]
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	701a      	strb	r2, [r3, #0]
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	372c      	adds	r7, #44	; 0x2c
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a98:	f002 fc5e 	bl	800b358 <USBD_static_malloc>
 8008a9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d109      	bne.n	8008ab8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	32b0      	adds	r2, #176	; 0xb0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e0d4      	b.n	8008c62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008ab8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008abc:	2100      	movs	r1, #0
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f00c ff94 	bl	80159ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	32b0      	adds	r2, #176	; 0xb0
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	32b0      	adds	r2, #176	; 0xb0
 8008ade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7c1b      	ldrb	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d138      	bne.n	8008b62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008af0:	4b5e      	ldr	r3, [pc, #376]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008af2:	7819      	ldrb	r1, [r3, #0]
 8008af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af8:	2202      	movs	r2, #2
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f002 fad1 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b00:	4b5a      	ldr	r3, [pc, #360]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 020f 	and.w	r2, r3, #15
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	3324      	adds	r3, #36	; 0x24
 8008b16:	2201      	movs	r2, #1
 8008b18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b1a:	4b55      	ldr	r3, [pc, #340]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b1c:	7819      	ldrb	r1, [r3, #0]
 8008b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b22:	2202      	movs	r2, #2
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f002 fabc 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b2a:	4b51      	ldr	r3, [pc, #324]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	f003 020f 	and.w	r2, r3, #15
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b42:	2201      	movs	r2, #1
 8008b44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b46:	4b4b      	ldr	r3, [pc, #300]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f003 020f 	and.w	r2, r3, #15
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	3326      	adds	r3, #38	; 0x26
 8008b5c:	2210      	movs	r2, #16
 8008b5e:	801a      	strh	r2, [r3, #0]
 8008b60:	e035      	b.n	8008bce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b62:	4b42      	ldr	r3, [pc, #264]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008b64:	7819      	ldrb	r1, [r3, #0]
 8008b66:	2340      	movs	r3, #64	; 0x40
 8008b68:	2202      	movs	r2, #2
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f002 fa99 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b70:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3324      	adds	r3, #36	; 0x24
 8008b86:	2201      	movs	r2, #1
 8008b88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b8a:	4b39      	ldr	r3, [pc, #228]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b8c:	7819      	ldrb	r1, [r3, #0]
 8008b8e:	2340      	movs	r3, #64	; 0x40
 8008b90:	2202      	movs	r2, #2
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f002 fa85 	bl	800b0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b98:	4b35      	ldr	r3, [pc, #212]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	f003 020f 	and.w	r2, r3, #15
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008bb4:	4b2f      	ldr	r3, [pc, #188]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 020f 	and.w	r2, r3, #15
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3326      	adds	r3, #38	; 0x26
 8008bca:	2210      	movs	r2, #16
 8008bcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bce:	4b29      	ldr	r3, [pc, #164]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008bd0:	7819      	ldrb	r1, [r3, #0]
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	2203      	movs	r2, #3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f002 fa63 	bl	800b0a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008bdc:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	3324      	adds	r3, #36	; 0x24
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	33b0      	adds	r3, #176	; 0xb0
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e018      	b.n	8008c62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7c1b      	ldrb	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008c3a:	7819      	ldrb	r1, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f002 fb1b 	bl	800b282 <USBD_LL_PrepareReceive>
 8008c4c:	e008      	b.n	8008c60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c4e:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008c50:	7819      	ldrb	r1, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c58:	2340      	movs	r3, #64	; 0x40
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f002 fb11 	bl	800b282 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	2000009b 	.word	0x2000009b
 8008c70:	2000009c 	.word	0x2000009c
 8008c74:	2000009d 	.word	0x2000009d

08008c78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008c84:	4b3a      	ldr	r3, [pc, #232]	; (8008d70 <USBD_CDC_DeInit+0xf8>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f002 fa2f 	bl	800b0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008c90:	4b37      	ldr	r3, [pc, #220]	; (8008d70 <USBD_CDC_DeInit+0xf8>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3324      	adds	r3, #36	; 0x24
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008caa:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <USBD_CDC_DeInit+0xfc>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f002 fa1c 	bl	800b0ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008cb6:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <USBD_CDC_DeInit+0xfc>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	f003 020f 	and.w	r2, r3, #15
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cce:	2200      	movs	r2, #0
 8008cd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008cd2:	4b29      	ldr	r3, [pc, #164]	; (8008d78 <USBD_CDC_DeInit+0x100>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f002 fa08 	bl	800b0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008cde:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <USBD_CDC_DeInit+0x100>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	f003 020f 	and.w	r2, r3, #15
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	3324      	adds	r3, #36	; 0x24
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008cf8:	4b1f      	ldr	r3, [pc, #124]	; (8008d78 <USBD_CDC_DeInit+0x100>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 020f 	and.w	r2, r3, #15
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	3326      	adds	r3, #38	; 0x26
 8008d0e:	2200      	movs	r2, #0
 8008d10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	32b0      	adds	r2, #176	; 0xb0
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01f      	beq.n	8008d64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	33b0      	adds	r3, #176	; 0xb0
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	32b0      	adds	r2, #176	; 0xb0
 8008d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f002 fb14 	bl	800b374 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	32b0      	adds	r2, #176	; 0xb0
 8008d56:	2100      	movs	r1, #0
 8008d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	2000009b 	.word	0x2000009b
 8008d74:	2000009c 	.word	0x2000009c
 8008d78:	2000009d 	.word	0x2000009d

08008d7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	32b0      	adds	r2, #176	; 0xb0
 8008d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e0bf      	b.n	8008f2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d050      	beq.n	8008e5a <USBD_CDC_Setup+0xde>
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	f040 80af 	bne.w	8008f1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d03a      	beq.n	8008e3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b25b      	sxtb	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da1b      	bge.n	8008e08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	33b0      	adds	r3, #176	; 0xb0
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008de6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	88d2      	ldrh	r2, [r2, #6]
 8008dec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	2b07      	cmp	r3, #7
 8008df4:	bf28      	it	cs
 8008df6:	2307      	movcs	r3, #7
 8008df8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	89fa      	ldrh	r2, [r7, #14]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fd21 	bl	800a848 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008e06:	e090      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	785a      	ldrb	r2, [r3, #1]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	88db      	ldrh	r3, [r3, #6]
 8008e16:	2b3f      	cmp	r3, #63	; 0x3f
 8008e18:	d803      	bhi.n	8008e22 <USBD_CDC_Setup+0xa6>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	88db      	ldrh	r3, [r3, #6]
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	e000      	b.n	8008e24 <USBD_CDC_Setup+0xa8>
 8008e22:	2240      	movs	r2, #64	; 0x40
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008e2a:	6939      	ldr	r1, [r7, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008e32:	461a      	mov	r2, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 fd33 	bl	800a8a0 <USBD_CtlPrepareRx>
      break;
 8008e3a:	e076      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	33b0      	adds	r3, #176	; 0xb0
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	7850      	ldrb	r0, [r2, #1]
 8008e52:	2200      	movs	r2, #0
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	4798      	blx	r3
      break;
 8008e58:	e067      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b0b      	cmp	r3, #11
 8008e60:	d851      	bhi.n	8008f06 <USBD_CDC_Setup+0x18a>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <USBD_CDC_Setup+0xec>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e99 	.word	0x08008e99
 8008e6c:	08008f15 	.word	0x08008f15
 8008e70:	08008f07 	.word	0x08008f07
 8008e74:	08008f07 	.word	0x08008f07
 8008e78:	08008f07 	.word	0x08008f07
 8008e7c:	08008f07 	.word	0x08008f07
 8008e80:	08008f07 	.word	0x08008f07
 8008e84:	08008f07 	.word	0x08008f07
 8008e88:	08008f07 	.word	0x08008f07
 8008e8c:	08008f07 	.word	0x08008f07
 8008e90:	08008ec3 	.word	0x08008ec3
 8008e94:	08008eed 	.word	0x08008eed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d107      	bne.n	8008eb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ea4:	f107 030a 	add.w	r3, r7, #10
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 fccb 	bl	800a848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eb2:	e032      	b.n	8008f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 fc55 	bl	800a766 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec0:	e02b      	b.n	8008f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d107      	bne.n	8008ede <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ece:	f107 030d 	add.w	r3, r7, #13
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fcb6 	bl	800a848 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008edc:	e01d      	b.n	8008f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 fc40 	bl	800a766 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8008eea:	e016      	b.n	8008f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d00f      	beq.n	8008f18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fc33 	bl	800a766 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f04:	e008      	b.n	8008f18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 fc2c 	bl	800a766 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	75fb      	strb	r3, [r7, #23]
          break;
 8008f12:	e002      	b.n	8008f1a <USBD_CDC_Setup+0x19e>
          break;
 8008f14:	bf00      	nop
 8008f16:	e008      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>
          break;
 8008f18:	bf00      	nop
      }
      break;
 8008f1a:	e006      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fc21 	bl	800a766 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	75fb      	strb	r3, [r7, #23]
      break;
 8008f28:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32b0      	adds	r2, #176	; 0xb0
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e065      	b.n	800902a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	32b0      	adds	r2, #176	; 0xb0
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	3318      	adds	r3, #24
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d02f      	beq.n	8008fe8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	f003 020f 	and.w	r2, r3, #15
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	78fb      	ldrb	r3, [r7, #3]
 8008fa0:	f003 010f 	and.w	r1, r3, #15
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	440b      	add	r3, r1
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	4403      	add	r3, r0
 8008fb0:	3338      	adds	r3, #56	; 0x38
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d112      	bne.n	8008fe8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	3318      	adds	r3, #24
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fda:	78f9      	ldrb	r1, [r7, #3]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f002 f92d 	bl	800b240 <USBD_LL_Transmit>
 8008fe6:	e01f      	b.n	8009028 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	33b0      	adds	r3, #176	; 0xb0
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d010      	beq.n	8009028 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	33b0      	adds	r3, #176	; 0xb0
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32b0      	adds	r2, #176	; 0xb0
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	32b0      	adds	r2, #176	; 0xb0
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	e01a      	b.n	800909a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f002 f92b 	bl	800b2c4 <USBD_LL_GetRxDataSize>
 800906e:	4602      	mov	r2, r0
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	33b0      	adds	r3, #176	; 0xb0
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009094:	4611      	mov	r1, r2
 8009096:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	32b0      	adds	r2, #176	; 0xb0
 80090b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e025      	b.n	8009110 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	33b0      	adds	r3, #176	; 0xb0
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01a      	beq.n	800910e <USBD_CDC_EP0_RxReady+0x6c>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80090de:	2bff      	cmp	r3, #255	; 0xff
 80090e0:	d015      	beq.n	800910e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	33b0      	adds	r3, #176	; 0xb0
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80090fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009102:	b292      	uxth	r2, r2
 8009104:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009120:	2182      	movs	r1, #130	; 0x82
 8009122:	4818      	ldr	r0, [pc, #96]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009124:	f000 fcbd 	bl	8009aa2 <USBD_GetEpDesc>
 8009128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800912a:	2101      	movs	r1, #1
 800912c:	4815      	ldr	r0, [pc, #84]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800912e:	f000 fcb8 	bl	8009aa2 <USBD_GetEpDesc>
 8009132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009134:	2181      	movs	r1, #129	; 0x81
 8009136:	4813      	ldr	r0, [pc, #76]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009138:	f000 fcb3 	bl	8009aa2 <USBD_GetEpDesc>
 800913c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2210      	movs	r2, #16
 8009148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d006      	beq.n	800915e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2200      	movs	r2, #0
 8009154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009158:	711a      	strb	r2, [r3, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800916c:	711a      	strb	r2, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2243      	movs	r2, #67	; 0x43
 8009176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000058 	.word	0x20000058

08009188 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009190:	2182      	movs	r1, #130	; 0x82
 8009192:	4818      	ldr	r0, [pc, #96]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009194:	f000 fc85 	bl	8009aa2 <USBD_GetEpDesc>
 8009198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800919a:	2101      	movs	r1, #1
 800919c:	4815      	ldr	r0, [pc, #84]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800919e:	f000 fc80 	bl	8009aa2 <USBD_GetEpDesc>
 80091a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091a4:	2181      	movs	r1, #129	; 0x81
 80091a6:	4813      	ldr	r0, [pc, #76]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091a8:	f000 fc7b 	bl	8009aa2 <USBD_GetEpDesc>
 80091ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2210      	movs	r2, #16
 80091b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d006      	beq.n	80091ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2200      	movs	r2, #0
 80091c4:	711a      	strb	r2, [r3, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f042 0202 	orr.w	r2, r2, #2
 80091cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d006      	beq.n	80091e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	711a      	strb	r2, [r3, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f042 0202 	orr.w	r2, r2, #2
 80091e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2243      	movs	r2, #67	; 0x43
 80091e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091e8:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000058 	.word	0x20000058

080091f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009200:	2182      	movs	r1, #130	; 0x82
 8009202:	4818      	ldr	r0, [pc, #96]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009204:	f000 fc4d 	bl	8009aa2 <USBD_GetEpDesc>
 8009208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800920a:	2101      	movs	r1, #1
 800920c:	4815      	ldr	r0, [pc, #84]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800920e:	f000 fc48 	bl	8009aa2 <USBD_GetEpDesc>
 8009212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009214:	2181      	movs	r1, #129	; 0x81
 8009216:	4813      	ldr	r0, [pc, #76]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009218:	f000 fc43 	bl	8009aa2 <USBD_GetEpDesc>
 800921c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2210      	movs	r2, #16
 8009228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d006      	beq.n	800923e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	2200      	movs	r2, #0
 8009234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009238:	711a      	strb	r2, [r3, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800924c:	711a      	strb	r2, [r3, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2243      	movs	r2, #67	; 0x43
 8009256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000058 	.word	0x20000058

08009268 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	220a      	movs	r2, #10
 8009274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009276:	4b03      	ldr	r3, [pc, #12]	; (8009284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	20000014 	.word	0x20000014

08009288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009298:	2303      	movs	r3, #3
 800929a:	e009      	b.n	80092b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	33b0      	adds	r3, #176	; 0xb0
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	32b0      	adds	r2, #176	; 0xb0
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	e008      	b.n	80092f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	32b0      	adds	r2, #176	; 0xb0
 8009314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009318:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	e004      	b.n	800932e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	32b0      	adds	r2, #176	; 0xb0
 800934e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009352:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009354:	2301      	movs	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800935e:	2303      	movs	r3, #3
 8009360:	e025      	b.n	80093ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009368:	2b00      	cmp	r3, #0
 800936a:	d11f      	bne.n	80093ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2201      	movs	r2, #1
 8009370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009374:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <USBD_CDC_TransmitPacket+0x7c>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	f003 020f 	and.w	r2, r3, #15
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4403      	add	r3, r0
 800938e:	3318      	adds	r3, #24
 8009390:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <USBD_CDC_TransmitPacket+0x7c>)
 8009394:	7819      	ldrb	r1, [r3, #0]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 ff4c 	bl	800b240 <USBD_LL_Transmit>

    ret = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	2000009b 	.word	0x2000009b

080093bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	32b0      	adds	r2, #176	; 0xb0
 80093ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	32b0      	adds	r2, #176	; 0xb0
 80093de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e018      	b.n	800941c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093f2:	4b0c      	ldr	r3, [pc, #48]	; (8009424 <USBD_CDC_ReceivePacket+0x68>)
 80093f4:	7819      	ldrb	r1, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 ff3e 	bl	800b282 <USBD_LL_PrepareReceive>
 8009406:	e008      	b.n	800941a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009408:	4b06      	ldr	r3, [pc, #24]	; (8009424 <USBD_CDC_ReceivePacket+0x68>)
 800940a:	7819      	ldrb	r1, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009412:	2340      	movs	r3, #64	; 0x40
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 ff34 	bl	800b282 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	2000009c 	.word	0x2000009c

08009428 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	4613      	mov	r3, r2
 8009434:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800943c:	2303      	movs	r3, #3
 800943e:	e01f      	b.n	8009480 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	79fa      	ldrb	r2, [r7, #7]
 8009472:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f001 fd97 	bl	800afa8 <USBD_LL_Init>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	e025      	b.n	80094ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	32ae      	adds	r2, #174	; 0xae
 80094b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00f      	beq.n	80094dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	32ae      	adds	r2, #174	; 0xae
 80094c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	f107 020e 	add.w	r2, r7, #14
 80094d0:	4610      	mov	r0, r2
 80094d2:	4798      	blx	r3
 80094d4:	4602      	mov	r2, r0
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 fdb5 	bl	800b06c <USBD_LL_Start>
 8009502:	4603      	mov	r3, r0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	78fa      	ldrb	r2, [r7, #3]
 8009546:	4611      	mov	r1, r2
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	4611      	mov	r1, r2
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009580:	2303      	movs	r3, #3
 8009582:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 f8a6 	bl	800a6f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80095b4:	461a      	mov	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80095c2:	f003 031f 	and.w	r3, r3, #31
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d01a      	beq.n	8009600 <USBD_LL_SetupStage+0x72>
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d822      	bhi.n	8009614 <USBD_LL_SetupStage+0x86>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <USBD_LL_SetupStage+0x4a>
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d00a      	beq.n	80095ec <USBD_LL_SetupStage+0x5e>
 80095d6:	e01d      	b.n	8009614 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fad3 	bl	8009b8c <USBD_StdDevReq>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]
      break;
 80095ea:	e020      	b.n	800962e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fb3b 	bl	8009c70 <USBD_StdItfReq>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73fb      	strb	r3, [r7, #15]
      break;
 80095fe:	e016      	b.n	800962e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fb9d 	bl	8009d48 <USBD_StdEPReq>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]
      break;
 8009612:	e00c      	b.n	800962e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800961a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800961e:	b2db      	uxtb	r3, r3
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 fd82 	bl	800b12c <USBD_LL_StallEP>
 8009628:	4603      	mov	r3, r0
 800962a:	73fb      	strb	r3, [r7, #15]
      break;
 800962c:	bf00      	nop
  }

  return ret;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	460b      	mov	r3, r1
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800964a:	7afb      	ldrb	r3, [r7, #11]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d16e      	bne.n	800972e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009656:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800965e:	2b03      	cmp	r3, #3
 8009660:	f040 8098 	bne.w	8009794 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	429a      	cmp	r2, r3
 800966e:	d913      	bls.n	8009698 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	689a      	ldr	r2, [r3, #8]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	1ad2      	subs	r2, r2, r3
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	4293      	cmp	r3, r2
 8009688:	bf28      	it	cs
 800968a:	4613      	movcs	r3, r2
 800968c:	461a      	mov	r2, r3
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f001 f922 	bl	800a8da <USBD_CtlContinueRx>
 8009696:	e07d      	b.n	8009794 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800969e:	f003 031f 	and.w	r3, r3, #31
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d014      	beq.n	80096d0 <USBD_LL_DataOutStage+0x98>
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d81d      	bhi.n	80096e6 <USBD_LL_DataOutStage+0xae>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <USBD_LL_DataOutStage+0x7c>
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d003      	beq.n	80096ba <USBD_LL_DataOutStage+0x82>
 80096b2:	e018      	b.n	80096e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	75bb      	strb	r3, [r7, #22]
            break;
 80096b8:	e018      	b.n	80096ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	4619      	mov	r1, r3
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f9d2 	bl	8009a6e <USBD_CoreFindIF>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75bb      	strb	r3, [r7, #22]
            break;
 80096ce:	e00d      	b.n	80096ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	4619      	mov	r1, r3
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f9d4 	bl	8009a88 <USBD_CoreFindEP>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75bb      	strb	r3, [r7, #22]
            break;
 80096e4:	e002      	b.n	80096ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	75bb      	strb	r3, [r7, #22]
            break;
 80096ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80096ec:	7dbb      	ldrb	r3, [r7, #22]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d119      	bne.n	8009726 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d113      	bne.n	8009726 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80096fe:	7dba      	ldrb	r2, [r7, #22]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	32ae      	adds	r2, #174	; 0xae
 8009704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00b      	beq.n	8009726 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800970e:	7dba      	ldrb	r2, [r7, #22]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009716:	7dba      	ldrb	r2, [r7, #22]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	32ae      	adds	r2, #174	; 0xae
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f001 f8e8 	bl	800a8fc <USBD_CtlSendStatus>
 800972c:	e032      	b.n	8009794 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009734:	b2db      	uxtb	r3, r3
 8009736:	4619      	mov	r1, r3
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 f9a5 	bl	8009a88 <USBD_CoreFindEP>
 800973e:	4603      	mov	r3, r0
 8009740:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009742:	7dbb      	ldrb	r3, [r7, #22]
 8009744:	2bff      	cmp	r3, #255	; 0xff
 8009746:	d025      	beq.n	8009794 <USBD_LL_DataOutStage+0x15c>
 8009748:	7dbb      	ldrb	r3, [r7, #22]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d122      	bne.n	8009794 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b03      	cmp	r3, #3
 8009758:	d117      	bne.n	800978a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800975a:	7dba      	ldrb	r2, [r7, #22]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	32ae      	adds	r2, #174	; 0xae
 8009760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00f      	beq.n	800978a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800976a:	7dba      	ldrb	r2, [r7, #22]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009772:	7dba      	ldrb	r2, [r7, #22]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	32ae      	adds	r2, #174	; 0xae
 8009778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	7afa      	ldrb	r2, [r7, #11]
 8009780:	4611      	mov	r1, r2
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	4798      	blx	r3
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800978a:	7dfb      	ldrb	r3, [r7, #23]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	e000      	b.n	8009796 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b086      	sub	sp, #24
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	460b      	mov	r3, r1
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d16f      	bne.n	8009892 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3314      	adds	r3, #20
 80097b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d15a      	bne.n	8009878 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d914      	bls.n	80097f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	689a      	ldr	r2, [r3, #8]
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	1ad2      	subs	r2, r2, r3
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f001 f84a 	bl	800a87e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097ea:	2300      	movs	r3, #0
 80097ec:	2200      	movs	r2, #0
 80097ee:	2100      	movs	r1, #0
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f001 fd46 	bl	800b282 <USBD_LL_PrepareReceive>
 80097f6:	e03f      	b.n	8009878 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	429a      	cmp	r2, r3
 8009802:	d11c      	bne.n	800983e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800980c:	429a      	cmp	r2, r3
 800980e:	d316      	bcc.n	800983e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800981a:	429a      	cmp	r2, r3
 800981c:	d20f      	bcs.n	800983e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800981e:	2200      	movs	r2, #0
 8009820:	2100      	movs	r1, #0
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f001 f82b 	bl	800a87e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009830:	2300      	movs	r3, #0
 8009832:	2200      	movs	r2, #0
 8009834:	2100      	movs	r1, #0
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f001 fd23 	bl	800b282 <USBD_LL_PrepareReceive>
 800983c:	e01c      	b.n	8009878 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b03      	cmp	r3, #3
 8009848:	d10f      	bne.n	800986a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d009      	beq.n	800986a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800986a:	2180      	movs	r1, #128	; 0x80
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f001 fc5d 	bl	800b12c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f001 f855 	bl	800a922 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d03a      	beq.n	80098f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f7ff fe42 	bl	800950c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009890:	e032      	b.n	80098f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009898:	b2db      	uxtb	r3, r3
 800989a:	4619      	mov	r1, r3
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f8f3 	bl	8009a88 <USBD_CoreFindEP>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	2bff      	cmp	r3, #255	; 0xff
 80098aa:	d025      	beq.n	80098f8 <USBD_LL_DataInStage+0x15a>
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d122      	bne.n	80098f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d11c      	bne.n	80098f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80098be:	7dfa      	ldrb	r2, [r7, #23]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	32ae      	adds	r2, #174	; 0xae
 80098c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d014      	beq.n	80098f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80098ce:	7dfa      	ldrb	r2, [r7, #23]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80098d6:	7dfa      	ldrb	r2, [r7, #23]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	32ae      	adds	r2, #174	; 0xae
 80098dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	7afa      	ldrb	r2, [r7, #11]
 80098e4:	4611      	mov	r1, r2
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	4798      	blx	r3
 80098ea:	4603      	mov	r3, r0
 80098ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80098ee:	7dbb      	ldrb	r3, [r7, #22]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80098f4:	7dbb      	ldrb	r3, [r7, #22]
 80098f6:	e000      	b.n	80098fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800993a:	2b00      	cmp	r3, #0
 800993c:	d014      	beq.n	8009968 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00e      	beq.n	8009968 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6852      	ldr	r2, [r2, #4]
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	4611      	mov	r1, r2
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009964:	2303      	movs	r3, #3
 8009966:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009968:	2340      	movs	r3, #64	; 0x40
 800996a:	2200      	movs	r2, #0
 800996c:	2100      	movs	r1, #0
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 fb97 	bl	800b0a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2240      	movs	r2, #64	; 0x40
 8009980:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009984:	2340      	movs	r3, #64	; 0x40
 8009986:	2200      	movs	r2, #0
 8009988:	2180      	movs	r1, #128	; 0x80
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fb89 	bl	800b0a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2240      	movs	r2, #64	; 0x40
 800999a:	621a      	str	r2, [r3, #32]

  return ret;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d006      	beq.n	80099e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2204      	movs	r2, #4
 80099ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d106      	bne.n	8009a20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d110      	bne.n	8009a64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b086      	sub	sp, #24
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	885b      	ldrh	r3, [r3, #2]
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d920      	bls.n	8009b0c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009ad2:	e013      	b.n	8009afc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ad4:	f107 030a 	add.w	r3, r7, #10
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6978      	ldr	r0, [r7, #20]
 8009adc:	f000 f81b 	bl	8009b16 <USBD_GetNextDesc>
 8009ae0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	785b      	ldrb	r3, [r3, #1]
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d108      	bne.n	8009afc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	789b      	ldrb	r3, [r3, #2]
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d008      	beq.n	8009b0a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	885b      	ldrh	r3, [r3, #2]
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	897b      	ldrh	r3, [r7, #10]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d8e5      	bhi.n	8009ad4 <USBD_GetEpDesc+0x32>
 8009b08:	e000      	b.n	8009b0c <USBD_GetEpDesc+0x6a>
          break;
 8009b0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009b0c:	693b      	ldr	r3, [r7, #16]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b085      	sub	sp, #20
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	881a      	ldrh	r2, [r3, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	4413      	add	r3, r2
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4413      	add	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b42:	68fb      	ldr	r3, [r7, #12]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	3301      	adds	r3, #1
 8009b66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b6e:	8a3b      	ldrh	r3, [r7, #16]
 8009b70:	021b      	lsls	r3, r3, #8
 8009b72:	b21a      	sxth	r2, r3
 8009b74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	b21b      	sxth	r3, r3
 8009b7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b7e:	89fb      	ldrh	r3, [r7, #14]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	371c      	adds	r7, #28
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ba2:	2b40      	cmp	r3, #64	; 0x40
 8009ba4:	d005      	beq.n	8009bb2 <USBD_StdDevReq+0x26>
 8009ba6:	2b40      	cmp	r3, #64	; 0x40
 8009ba8:	d857      	bhi.n	8009c5a <USBD_StdDevReq+0xce>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00f      	beq.n	8009bce <USBD_StdDevReq+0x42>
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	d153      	bne.n	8009c5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	32ae      	adds	r2, #174	; 0xae
 8009bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	4798      	blx	r3
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
      break;
 8009bcc:	e04a      	b.n	8009c64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	2b09      	cmp	r3, #9
 8009bd4:	d83b      	bhi.n	8009c4e <USBD_StdDevReq+0xc2>
 8009bd6:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <USBD_StdDevReq+0x50>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009c31 	.word	0x08009c31
 8009be0:	08009c45 	.word	0x08009c45
 8009be4:	08009c4f 	.word	0x08009c4f
 8009be8:	08009c3b 	.word	0x08009c3b
 8009bec:	08009c4f 	.word	0x08009c4f
 8009bf0:	08009c0f 	.word	0x08009c0f
 8009bf4:	08009c05 	.word	0x08009c05
 8009bf8:	08009c4f 	.word	0x08009c4f
 8009bfc:	08009c27 	.word	0x08009c27
 8009c00:	08009c19 	.word	0x08009c19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa3c 	bl	800a084 <USBD_GetDescriptor>
          break;
 8009c0c:	e024      	b.n	8009c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fbcb 	bl	800a3ac <USBD_SetAddress>
          break;
 8009c16:	e01f      	b.n	8009c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fc0a 	bl	800a434 <USBD_SetConfig>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]
          break;
 8009c24:	e018      	b.n	8009c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fcad 	bl	800a588 <USBD_GetConfig>
          break;
 8009c2e:	e013      	b.n	8009c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fcde 	bl	800a5f4 <USBD_GetStatus>
          break;
 8009c38:	e00e      	b.n	8009c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fd0d 	bl	800a65c <USBD_SetFeature>
          break;
 8009c42:	e009      	b.n	8009c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fd31 	bl	800a6ae <USBD_ClrFeature>
          break;
 8009c4c:	e004      	b.n	8009c58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fd88 	bl	800a766 <USBD_CtlError>
          break;
 8009c56:	bf00      	nop
      }
      break;
 8009c58:	e004      	b.n	8009c64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd82 	bl	800a766 <USBD_CtlError>
      break;
 8009c62:	bf00      	nop
  }

  return ret;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop

08009c70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c86:	2b40      	cmp	r3, #64	; 0x40
 8009c88:	d005      	beq.n	8009c96 <USBD_StdItfReq+0x26>
 8009c8a:	2b40      	cmp	r3, #64	; 0x40
 8009c8c:	d852      	bhi.n	8009d34 <USBD_StdItfReq+0xc4>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <USBD_StdItfReq+0x26>
 8009c92:	2b20      	cmp	r3, #32
 8009c94:	d14e      	bne.n	8009d34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d840      	bhi.n	8009d26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	889b      	ldrh	r3, [r3, #4]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d836      	bhi.n	8009d1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	889b      	ldrh	r3, [r3, #4]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff fed9 	bl	8009a6e <USBD_CoreFindIF>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	2bff      	cmp	r3, #255	; 0xff
 8009cc4:	d01d      	beq.n	8009d02 <USBD_StdItfReq+0x92>
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d11a      	bne.n	8009d02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ccc:	7bba      	ldrb	r2, [r7, #14]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	32ae      	adds	r2, #174	; 0xae
 8009cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00f      	beq.n	8009cfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009cdc:	7bba      	ldrb	r2, [r7, #14]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ce4:	7bba      	ldrb	r2, [r7, #14]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	32ae      	adds	r2, #174	; 0xae
 8009cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cfa:	e004      	b.n	8009d06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d00:	e001      	b.n	8009d06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d02:	2303      	movs	r3, #3
 8009d04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	88db      	ldrh	r3, [r3, #6]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d110      	bne.n	8009d30 <USBD_StdItfReq+0xc0>
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10d      	bne.n	8009d30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fdf1 	bl	800a8fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d1a:	e009      	b.n	8009d30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fd21 	bl	800a766 <USBD_CtlError>
          break;
 8009d24:	e004      	b.n	8009d30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fd1c 	bl	800a766 <USBD_CtlError>
          break;
 8009d2e:	e000      	b.n	8009d32 <USBD_StdItfReq+0xc2>
          break;
 8009d30:	bf00      	nop
      }
      break;
 8009d32:	e004      	b.n	8009d3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fd15 	bl	800a766 <USBD_CtlError>
      break;
 8009d3c:	bf00      	nop
  }

  return ret;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	889b      	ldrh	r3, [r3, #4]
 8009d5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d64:	2b40      	cmp	r3, #64	; 0x40
 8009d66:	d007      	beq.n	8009d78 <USBD_StdEPReq+0x30>
 8009d68:	2b40      	cmp	r3, #64	; 0x40
 8009d6a:	f200 817f 	bhi.w	800a06c <USBD_StdEPReq+0x324>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d02a      	beq.n	8009dc8 <USBD_StdEPReq+0x80>
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	f040 817a 	bne.w	800a06c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff fe83 	bl	8009a88 <USBD_CoreFindEP>
 8009d82:	4603      	mov	r3, r0
 8009d84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d86:	7b7b      	ldrb	r3, [r7, #13]
 8009d88:	2bff      	cmp	r3, #255	; 0xff
 8009d8a:	f000 8174 	beq.w	800a076 <USBD_StdEPReq+0x32e>
 8009d8e:	7b7b      	ldrb	r3, [r7, #13]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f040 8170 	bne.w	800a076 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d96:	7b7a      	ldrb	r2, [r7, #13]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d9e:	7b7a      	ldrb	r2, [r7, #13]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	32ae      	adds	r2, #174	; 0xae
 8009da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 8163 	beq.w	800a076 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009db0:	7b7a      	ldrb	r2, [r7, #13]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	32ae      	adds	r2, #174	; 0xae
 8009db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	4798      	blx	r3
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009dc6:	e156      	b.n	800a076 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	785b      	ldrb	r3, [r3, #1]
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d008      	beq.n	8009de2 <USBD_StdEPReq+0x9a>
 8009dd0:	2b03      	cmp	r3, #3
 8009dd2:	f300 8145 	bgt.w	800a060 <USBD_StdEPReq+0x318>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 809b 	beq.w	8009f12 <USBD_StdEPReq+0x1ca>
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d03c      	beq.n	8009e5a <USBD_StdEPReq+0x112>
 8009de0:	e13e      	b.n	800a060 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d002      	beq.n	8009df4 <USBD_StdEPReq+0xac>
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d016      	beq.n	8009e20 <USBD_StdEPReq+0xd8>
 8009df2:	e02c      	b.n	8009e4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00d      	beq.n	8009e16 <USBD_StdEPReq+0xce>
 8009dfa:	7bbb      	ldrb	r3, [r7, #14]
 8009dfc:	2b80      	cmp	r3, #128	; 0x80
 8009dfe:	d00a      	beq.n	8009e16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e00:	7bbb      	ldrb	r3, [r7, #14]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 f991 	bl	800b12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e0a:	2180      	movs	r1, #128	; 0x80
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 f98d 	bl	800b12c <USBD_LL_StallEP>
 8009e12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e14:	e020      	b.n	8009e58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fca4 	bl	800a766 <USBD_CtlError>
              break;
 8009e1e:	e01b      	b.n	8009e58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	885b      	ldrh	r3, [r3, #2]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10e      	bne.n	8009e46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <USBD_StdEPReq+0xfe>
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b80      	cmp	r3, #128	; 0x80
 8009e32:	d008      	beq.n	8009e46 <USBD_StdEPReq+0xfe>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	88db      	ldrh	r3, [r3, #6]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 f973 	bl	800b12c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fd58 	bl	800a8fc <USBD_CtlSendStatus>

              break;
 8009e4c:	e004      	b.n	8009e58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fc88 	bl	800a766 <USBD_CtlError>
              break;
 8009e56:	bf00      	nop
          }
          break;
 8009e58:	e107      	b.n	800a06a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d002      	beq.n	8009e6c <USBD_StdEPReq+0x124>
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d016      	beq.n	8009e98 <USBD_StdEPReq+0x150>
 8009e6a:	e04b      	b.n	8009f04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00d      	beq.n	8009e8e <USBD_StdEPReq+0x146>
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b80      	cmp	r3, #128	; 0x80
 8009e76:	d00a      	beq.n	8009e8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f955 	bl	800b12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e82:	2180      	movs	r1, #128	; 0x80
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f951 	bl	800b12c <USBD_LL_StallEP>
 8009e8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e8c:	e040      	b.n	8009f10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fc68 	bl	800a766 <USBD_CtlError>
              break;
 8009e96:	e03b      	b.n	8009f10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	885b      	ldrh	r3, [r3, #2]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d136      	bne.n	8009f0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d004      	beq.n	8009eb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 f95b 	bl	800b16a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fd21 	bl	800a8fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff fde2 	bl	8009a88 <USBD_CoreFindEP>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ec8:	7b7b      	ldrb	r3, [r7, #13]
 8009eca:	2bff      	cmp	r3, #255	; 0xff
 8009ecc:	d01f      	beq.n	8009f0e <USBD_StdEPReq+0x1c6>
 8009ece:	7b7b      	ldrb	r3, [r7, #13]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d11c      	bne.n	8009f0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ed4:	7b7a      	ldrb	r2, [r7, #13]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009edc:	7b7a      	ldrb	r2, [r7, #13]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	32ae      	adds	r2, #174	; 0xae
 8009ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d010      	beq.n	8009f0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009eec:	7b7a      	ldrb	r2, [r7, #13]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	32ae      	adds	r2, #174	; 0xae
 8009ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	4798      	blx	r3
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f02:	e004      	b.n	8009f0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fc2d 	bl	800a766 <USBD_CtlError>
              break;
 8009f0c:	e000      	b.n	8009f10 <USBD_StdEPReq+0x1c8>
              break;
 8009f0e:	bf00      	nop
          }
          break;
 8009f10:	e0ab      	b.n	800a06a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d002      	beq.n	8009f24 <USBD_StdEPReq+0x1dc>
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d032      	beq.n	8009f88 <USBD_StdEPReq+0x240>
 8009f22:	e097      	b.n	800a054 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <USBD_StdEPReq+0x1f2>
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d004      	beq.n	8009f3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fc17 	bl	800a766 <USBD_CtlError>
                break;
 8009f38:	e091      	b.n	800a05e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da0b      	bge.n	8009f5a <USBD_StdEPReq+0x212>
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	3310      	adds	r3, #16
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	4413      	add	r3, r2
 8009f56:	3304      	adds	r3, #4
 8009f58:	e00b      	b.n	8009f72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4413      	add	r3, r2
 8009f70:	3304      	adds	r3, #4
 8009f72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fc61 	bl	800a848 <USBD_CtlSendData>
              break;
 8009f86:	e06a      	b.n	800a05e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	da11      	bge.n	8009fb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	f003 020f 	and.w	r2, r3, #15
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	3324      	adds	r3, #36	; 0x24
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d117      	bne.n	8009fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fbda 	bl	800a766 <USBD_CtlError>
                  break;
 8009fb2:	e054      	b.n	800a05e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	f003 020f 	and.w	r2, r3, #15
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d104      	bne.n	8009fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fbc7 	bl	800a766 <USBD_CtlError>
                  break;
 8009fd8:	e041      	b.n	800a05e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da0b      	bge.n	8009ffa <USBD_StdEPReq+0x2b2>
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	3310      	adds	r3, #16
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	e00b      	b.n	800a012 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	4413      	add	r3, r2
 800a010:	3304      	adds	r3, #4
 800a012:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a014:	7bbb      	ldrb	r3, [r7, #14]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <USBD_StdEPReq+0x2d8>
 800a01a:	7bbb      	ldrb	r3, [r7, #14]
 800a01c:	2b80      	cmp	r3, #128	; 0x80
 800a01e:	d103      	bne.n	800a028 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	e00e      	b.n	800a046 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 f8bb 	bl	800b1a8 <USBD_LL_IsStallEP>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d003      	beq.n	800a040 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2201      	movs	r2, #1
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	e002      	b.n	800a046 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2202      	movs	r2, #2
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fbfb 	bl	800a848 <USBD_CtlSendData>
              break;
 800a052:	e004      	b.n	800a05e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fb85 	bl	800a766 <USBD_CtlError>
              break;
 800a05c:	bf00      	nop
          }
          break;
 800a05e:	e004      	b.n	800a06a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fb7f 	bl	800a766 <USBD_CtlError>
          break;
 800a068:	bf00      	nop
      }
      break;
 800a06a:	e005      	b.n	800a078 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fb79 	bl	800a766 <USBD_CtlError>
      break;
 800a074:	e000      	b.n	800a078 <USBD_StdEPReq+0x330>
      break;
 800a076:	bf00      	nop
  }

  return ret;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	885b      	ldrh	r3, [r3, #2]
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2b0e      	cmp	r3, #14
 800a0a6:	f200 8152 	bhi.w	800a34e <USBD_GetDescriptor+0x2ca>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <USBD_GetDescriptor+0x2c>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a121 	.word	0x0800a121
 800a0b4:	0800a139 	.word	0x0800a139
 800a0b8:	0800a179 	.word	0x0800a179
 800a0bc:	0800a34f 	.word	0x0800a34f
 800a0c0:	0800a34f 	.word	0x0800a34f
 800a0c4:	0800a2ef 	.word	0x0800a2ef
 800a0c8:	0800a31b 	.word	0x0800a31b
 800a0cc:	0800a34f 	.word	0x0800a34f
 800a0d0:	0800a34f 	.word	0x0800a34f
 800a0d4:	0800a34f 	.word	0x0800a34f
 800a0d8:	0800a34f 	.word	0x0800a34f
 800a0dc:	0800a34f 	.word	0x0800a34f
 800a0e0:	0800a34f 	.word	0x0800a34f
 800a0e4:	0800a34f 	.word	0x0800a34f
 800a0e8:	0800a0ed 	.word	0x0800a0ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0f2:	69db      	ldr	r3, [r3, #28]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7c12      	ldrb	r2, [r2, #16]
 800a104:	f107 0108 	add.w	r1, r7, #8
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a10e:	e126      	b.n	800a35e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fb27 	bl	800a766 <USBD_CtlError>
        err++;
 800a118:	7afb      	ldrb	r3, [r7, #11]
 800a11a:	3301      	adds	r3, #1
 800a11c:	72fb      	strb	r3, [r7, #11]
      break;
 800a11e:	e11e      	b.n	800a35e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	7c12      	ldrb	r2, [r2, #16]
 800a12c:	f107 0108 	add.w	r1, r7, #8
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	60f8      	str	r0, [r7, #12]
      break;
 800a136:	e112      	b.n	800a35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7c1b      	ldrb	r3, [r3, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10d      	bne.n	800a15c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a148:	f107 0208 	add.w	r2, r7, #8
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
 800a150:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3301      	adds	r3, #1
 800a156:	2202      	movs	r2, #2
 800a158:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a15a:	e100      	b.n	800a35e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	f107 0208 	add.w	r2, r7, #8
 800a168:	4610      	mov	r0, r2
 800a16a:	4798      	blx	r3
 800a16c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3301      	adds	r3, #1
 800a172:	2202      	movs	r2, #2
 800a174:	701a      	strb	r2, [r3, #0]
      break;
 800a176:	e0f2      	b.n	800a35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	885b      	ldrh	r3, [r3, #2]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b05      	cmp	r3, #5
 800a180:	f200 80ac 	bhi.w	800a2dc <USBD_GetDescriptor+0x258>
 800a184:	a201      	add	r2, pc, #4	; (adr r2, 800a18c <USBD_GetDescriptor+0x108>)
 800a186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18a:	bf00      	nop
 800a18c:	0800a1a5 	.word	0x0800a1a5
 800a190:	0800a1d9 	.word	0x0800a1d9
 800a194:	0800a20d 	.word	0x0800a20d
 800a198:	0800a241 	.word	0x0800a241
 800a19c:	0800a275 	.word	0x0800a275
 800a1a0:	0800a2a9 	.word	0x0800a2a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00b      	beq.n	800a1c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	7c12      	ldrb	r2, [r2, #16]
 800a1bc:	f107 0108 	add.w	r1, r7, #8
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
 800a1c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1c6:	e091      	b.n	800a2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 facb 	bl	800a766 <USBD_CtlError>
            err++;
 800a1d0:	7afb      	ldrb	r3, [r7, #11]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1d6:	e089      	b.n	800a2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	7c12      	ldrb	r2, [r2, #16]
 800a1f0:	f107 0108 	add.w	r1, r7, #8
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
 800a1f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1fa:	e077      	b.n	800a2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fab1 	bl	800a766 <USBD_CtlError>
            err++;
 800a204:	7afb      	ldrb	r3, [r7, #11]
 800a206:	3301      	adds	r3, #1
 800a208:	72fb      	strb	r3, [r7, #11]
          break;
 800a20a:	e06f      	b.n	800a2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00b      	beq.n	800a230 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	7c12      	ldrb	r2, [r2, #16]
 800a224:	f107 0108 	add.w	r1, r7, #8
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
 800a22c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a22e:	e05d      	b.n	800a2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fa97 	bl	800a766 <USBD_CtlError>
            err++;
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	3301      	adds	r3, #1
 800a23c:	72fb      	strb	r3, [r7, #11]
          break;
 800a23e:	e055      	b.n	800a2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	7c12      	ldrb	r2, [r2, #16]
 800a258:	f107 0108 	add.w	r1, r7, #8
 800a25c:	4610      	mov	r0, r2
 800a25e:	4798      	blx	r3
 800a260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a262:	e043      	b.n	800a2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fa7d 	bl	800a766 <USBD_CtlError>
            err++;
 800a26c:	7afb      	ldrb	r3, [r7, #11]
 800a26e:	3301      	adds	r3, #1
 800a270:	72fb      	strb	r3, [r7, #11]
          break;
 800a272:	e03b      	b.n	800a2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7c12      	ldrb	r2, [r2, #16]
 800a28c:	f107 0108 	add.w	r1, r7, #8
 800a290:	4610      	mov	r0, r2
 800a292:	4798      	blx	r3
 800a294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a296:	e029      	b.n	800a2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa63 	bl	800a766 <USBD_CtlError>
            err++;
 800a2a0:	7afb      	ldrb	r3, [r7, #11]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a6:	e021      	b.n	800a2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	7c12      	ldrb	r2, [r2, #16]
 800a2c0:	f107 0108 	add.w	r1, r7, #8
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ca:	e00f      	b.n	800a2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa49 	bl	800a766 <USBD_CtlError>
            err++;
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2da:	e007      	b.n	800a2ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa41 	bl	800a766 <USBD_CtlError>
          err++;
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a2ea:	bf00      	nop
      }
      break;
 800a2ec:	e037      	b.n	800a35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7c1b      	ldrb	r3, [r3, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d109      	bne.n	800a30a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fe:	f107 0208 	add.w	r2, r7, #8
 800a302:	4610      	mov	r0, r2
 800a304:	4798      	blx	r3
 800a306:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a308:	e029      	b.n	800a35e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fa2a 	bl	800a766 <USBD_CtlError>
        err++;
 800a312:	7afb      	ldrb	r3, [r7, #11]
 800a314:	3301      	adds	r3, #1
 800a316:	72fb      	strb	r3, [r7, #11]
      break;
 800a318:	e021      	b.n	800a35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	7c1b      	ldrb	r3, [r3, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10d      	bne.n	800a33e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	f107 0208 	add.w	r2, r7, #8
 800a32e:	4610      	mov	r0, r2
 800a330:	4798      	blx	r3
 800a332:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3301      	adds	r3, #1
 800a338:	2207      	movs	r2, #7
 800a33a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a33c:	e00f      	b.n	800a35e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fa10 	bl	800a766 <USBD_CtlError>
        err++;
 800a346:	7afb      	ldrb	r3, [r7, #11]
 800a348:	3301      	adds	r3, #1
 800a34a:	72fb      	strb	r3, [r7, #11]
      break;
 800a34c:	e007      	b.n	800a35e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fa08 	bl	800a766 <USBD_CtlError>
      err++;
 800a356:	7afb      	ldrb	r3, [r7, #11]
 800a358:	3301      	adds	r3, #1
 800a35a:	72fb      	strb	r3, [r7, #11]
      break;
 800a35c:	bf00      	nop
  }

  if (err != 0U)
 800a35e:	7afb      	ldrb	r3, [r7, #11]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d11e      	bne.n	800a3a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	88db      	ldrh	r3, [r3, #6]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d016      	beq.n	800a39a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a36c:	893b      	ldrh	r3, [r7, #8]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00e      	beq.n	800a390 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	88da      	ldrh	r2, [r3, #6]
 800a376:	893b      	ldrh	r3, [r7, #8]
 800a378:	4293      	cmp	r3, r2
 800a37a:	bf28      	it	cs
 800a37c:	4613      	movcs	r3, r2
 800a37e:	b29b      	uxth	r3, r3
 800a380:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a382:	893b      	ldrh	r3, [r7, #8]
 800a384:	461a      	mov	r2, r3
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fa5d 	bl	800a848 <USBD_CtlSendData>
 800a38e:	e009      	b.n	800a3a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f9e7 	bl	800a766 <USBD_CtlError>
 800a398:	e004      	b.n	800a3a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 faae 	bl	800a8fc <USBD_CtlSendStatus>
 800a3a0:	e000      	b.n	800a3a4 <USBD_GetDescriptor+0x320>
    return;
 800a3a2:	bf00      	nop
  }
}
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop

0800a3ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	889b      	ldrh	r3, [r3, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d131      	bne.n	800a422 <USBD_SetAddress+0x76>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	88db      	ldrh	r3, [r3, #6]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d12d      	bne.n	800a422 <USBD_SetAddress+0x76>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	885b      	ldrh	r3, [r3, #2]
 800a3ca:	2b7f      	cmp	r3, #127	; 0x7f
 800a3cc:	d829      	bhi.n	800a422 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	885b      	ldrh	r3, [r3, #2]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d104      	bne.n	800a3f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9bc 	bl	800a766 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ee:	e01d      	b.n	800a42c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	7bfa      	ldrb	r2, [r7, #15]
 800a3f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 ff00 	bl	800b202 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fa7a 	bl	800a8fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d004      	beq.n	800a418 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2202      	movs	r2, #2
 800a412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a416:	e009      	b.n	800a42c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a420:	e004      	b.n	800a42c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f99e 	bl	800a766 <USBD_CtlError>
  }
}
 800a42a:	bf00      	nop
 800a42c:	bf00      	nop
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	885b      	ldrh	r3, [r3, #2]
 800a446:	b2da      	uxtb	r2, r3
 800a448:	4b4e      	ldr	r3, [pc, #312]	; (800a584 <USBD_SetConfig+0x150>)
 800a44a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a44c:	4b4d      	ldr	r3, [pc, #308]	; (800a584 <USBD_SetConfig+0x150>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d905      	bls.n	800a460 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f985 	bl	800a766 <USBD_CtlError>
    return USBD_FAIL;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e08c      	b.n	800a57a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d002      	beq.n	800a472 <USBD_SetConfig+0x3e>
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d029      	beq.n	800a4c4 <USBD_SetConfig+0x90>
 800a470:	e075      	b.n	800a55e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a472:	4b44      	ldr	r3, [pc, #272]	; (800a584 <USBD_SetConfig+0x150>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d020      	beq.n	800a4bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a47a:	4b42      	ldr	r3, [pc, #264]	; (800a584 <USBD_SetConfig+0x150>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a484:	4b3f      	ldr	r3, [pc, #252]	; (800a584 <USBD_SetConfig+0x150>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff f849 	bl	8009522 <USBD_SetClassConfig>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d008      	beq.n	800a4ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f962 	bl	800a766 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4aa:	e065      	b.n	800a578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fa25 	bl	800a8fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2203      	movs	r2, #3
 800a4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a4ba:	e05d      	b.n	800a578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fa1d 	bl	800a8fc <USBD_CtlSendStatus>
      break;
 800a4c2:	e059      	b.n	800a578 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4c4:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <USBD_SetConfig+0x150>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d112      	bne.n	800a4f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a4d4:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <USBD_SetConfig+0x150>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4de:	4b29      	ldr	r3, [pc, #164]	; (800a584 <USBD_SetConfig+0x150>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff f838 	bl	800955a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fa06 	bl	800a8fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4f0:	e042      	b.n	800a578 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a4f2:	4b24      	ldr	r3, [pc, #144]	; (800a584 <USBD_SetConfig+0x150>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d02a      	beq.n	800a556 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff f826 	bl	800955a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a50e:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <USBD_SetConfig+0x150>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <USBD_SetConfig+0x150>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	4619      	mov	r1, r3
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7fe ffff 	bl	8009522 <USBD_SetClassConfig>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00f      	beq.n	800a54e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f918 	bl	800a766 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff f80b 	bl	800955a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a54c:	e014      	b.n	800a578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f9d4 	bl	800a8fc <USBD_CtlSendStatus>
      break;
 800a554:	e010      	b.n	800a578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f9d0 	bl	800a8fc <USBD_CtlSendStatus>
      break;
 800a55c:	e00c      	b.n	800a578 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f900 	bl	800a766 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a566:	4b07      	ldr	r3, [pc, #28]	; (800a584 <USBD_SetConfig+0x150>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7fe fff4 	bl	800955a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a572:	2303      	movs	r3, #3
 800a574:	73fb      	strb	r3, [r7, #15]
      break;
 800a576:	bf00      	nop
  }

  return ret;
 800a578:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	200002f8 	.word	0x200002f8

0800a588 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	88db      	ldrh	r3, [r3, #6]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d004      	beq.n	800a5a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f8e2 	bl	800a766 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5a2:	e023      	b.n	800a5ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	dc02      	bgt.n	800a5b6 <USBD_GetConfig+0x2e>
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dc03      	bgt.n	800a5bc <USBD_GetConfig+0x34>
 800a5b4:	e015      	b.n	800a5e2 <USBD_GetConfig+0x5a>
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d00b      	beq.n	800a5d2 <USBD_GetConfig+0x4a>
 800a5ba:	e012      	b.n	800a5e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f93c 	bl	800a848 <USBD_CtlSendData>
        break;
 800a5d0:	e00c      	b.n	800a5ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f934 	bl	800a848 <USBD_CtlSendData>
        break;
 800a5e0:	e004      	b.n	800a5ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f8be 	bl	800a766 <USBD_CtlError>
        break;
 800a5ea:	bf00      	nop
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a604:	b2db      	uxtb	r3, r3
 800a606:	3b01      	subs	r3, #1
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d81e      	bhi.n	800a64a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	88db      	ldrh	r3, [r3, #6]
 800a610:	2b02      	cmp	r3, #2
 800a612:	d004      	beq.n	800a61e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f8a5 	bl	800a766 <USBD_CtlError>
        break;
 800a61c:	e01a      	b.n	800a654 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d005      	beq.n	800a63a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f043 0202 	orr.w	r2, r3, #2
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	330c      	adds	r3, #12
 800a63e:	2202      	movs	r2, #2
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f900 	bl	800a848 <USBD_CtlSendData>
      break;
 800a648:	e004      	b.n	800a654 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f88a 	bl	800a766 <USBD_CtlError>
      break;
 800a652:	bf00      	nop
  }
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	885b      	ldrh	r3, [r3, #2]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d107      	bne.n	800a67e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f940 	bl	800a8fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a67c:	e013      	b.n	800a6a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	885b      	ldrh	r3, [r3, #2]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d10b      	bne.n	800a69e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	889b      	ldrh	r3, [r3, #4]
 800a68a:	0a1b      	lsrs	r3, r3, #8
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f930 	bl	800a8fc <USBD_CtlSendStatus>
}
 800a69c:	e003      	b.n	800a6a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f860 	bl	800a766 <USBD_CtlError>
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d80b      	bhi.n	800a6de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	885b      	ldrh	r3, [r3, #2]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d10c      	bne.n	800a6e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f910 	bl	800a8fc <USBD_CtlSendStatus>
      }
      break;
 800a6dc:	e004      	b.n	800a6e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f840 	bl	800a766 <USBD_CtlError>
      break;
 800a6e6:	e000      	b.n	800a6ea <USBD_ClrFeature+0x3c>
      break;
 800a6e8:	bf00      	nop
  }
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3301      	adds	r3, #1
 800a70c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3301      	adds	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff fa17 	bl	8009b50 <SWAPBYTE>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3301      	adds	r3, #1
 800a72e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3301      	adds	r3, #1
 800a734:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff fa0a 	bl	8009b50 <SWAPBYTE>
 800a73c:	4603      	mov	r3, r0
 800a73e:	461a      	mov	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	3301      	adds	r3, #1
 800a748:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	3301      	adds	r3, #1
 800a74e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f7ff f9fd 	bl	8009b50 <SWAPBYTE>
 800a756:	4603      	mov	r3, r0
 800a758:	461a      	mov	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	80da      	strh	r2, [r3, #6]
}
 800a75e:	bf00      	nop
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a770:	2180      	movs	r1, #128	; 0x80
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fcda 	bl	800b12c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a778:	2100      	movs	r1, #0
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fcd6 	bl	800b12c <USBD_LL_StallEP>
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d036      	beq.n	800a80c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a7a2:	6938      	ldr	r0, [r7, #16]
 800a7a4:	f000 f836 	bl	800a814 <USBD_GetLen>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	7812      	ldrb	r2, [r2, #0]
 800a7c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	2203      	movs	r2, #3
 800a7d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7d8:	e013      	b.n	800a802 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	4413      	add	r3, r2
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	7812      	ldrb	r2, [r2, #0]
 800a7e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	613b      	str	r3, [r7, #16]
    idx++;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	3301      	adds	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e7      	bne.n	800a7da <USBD_GetString+0x52>
 800a80a:	e000      	b.n	800a80e <USBD_GetString+0x86>
    return;
 800a80c:	bf00      	nop
  }
}
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a824:	e005      	b.n	800a832 <USBD_GetLen+0x1e>
  {
    len++;
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	3301      	adds	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	3301      	adds	r3, #1
 800a830:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1f5      	bne.n	800a826 <USBD_GetLen+0x12>
  }

  return len;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2202      	movs	r2, #2
 800a858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	2100      	movs	r1, #0
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 fce6 	bl	800b240 <USBD_LL_Transmit>

  return USBD_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	2100      	movs	r1, #0
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 fcd5 	bl	800b240 <USBD_LL_Transmit>

  return USBD_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 fcd9 	bl	800b282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 fcc8 	bl	800b282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2204      	movs	r2, #4
 800a908:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a90c:	2300      	movs	r3, #0
 800a90e:	2200      	movs	r2, #0
 800a910:	2100      	movs	r1, #0
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fc94 	bl	800b240 <USBD_LL_Transmit>

  return USBD_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b082      	sub	sp, #8
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2205      	movs	r2, #5
 800a92e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a932:	2300      	movs	r3, #0
 800a934:	2200      	movs	r2, #0
 800a936:	2100      	movs	r1, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fca2 	bl	800b282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a94c:	2200      	movs	r2, #0
 800a94e:	4912      	ldr	r1, [pc, #72]	; (800a998 <MX_USB_Device_Init+0x50>)
 800a950:	4812      	ldr	r0, [pc, #72]	; (800a99c <MX_USB_Device_Init+0x54>)
 800a952:	f7fe fd69 	bl	8009428 <USBD_Init>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a95c:	f7f6 f972 	bl	8000c44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a960:	490f      	ldr	r1, [pc, #60]	; (800a9a0 <MX_USB_Device_Init+0x58>)
 800a962:	480e      	ldr	r0, [pc, #56]	; (800a99c <MX_USB_Device_Init+0x54>)
 800a964:	f7fe fd90 	bl	8009488 <USBD_RegisterClass>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a96e:	f7f6 f969 	bl	8000c44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a972:	490c      	ldr	r1, [pc, #48]	; (800a9a4 <MX_USB_Device_Init+0x5c>)
 800a974:	4809      	ldr	r0, [pc, #36]	; (800a99c <MX_USB_Device_Init+0x54>)
 800a976:	f7fe fc87 	bl	8009288 <USBD_CDC_RegisterInterface>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a980:	f7f6 f960 	bl	8000c44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a984:	4805      	ldr	r0, [pc, #20]	; (800a99c <MX_USB_Device_Init+0x54>)
 800a986:	f7fe fdb5 	bl	80094f4 <USBD_Start>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a990:	f7f6 f958 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a994:	bf00      	nop
 800a996:	bd80      	pop	{r7, pc}
 800a998:	200000b4 	.word	0x200000b4
 800a99c:	200002fc 	.word	0x200002fc
 800a9a0:	20000020 	.word	0x20000020
 800a9a4:	200000a0 	.word	0x200000a0

0800a9a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4905      	ldr	r1, [pc, #20]	; (800a9c4 <CDC_Init_FS+0x1c>)
 800a9b0:	4805      	ldr	r0, [pc, #20]	; (800a9c8 <CDC_Init_FS+0x20>)
 800a9b2:	f7fe fc83 	bl	80092bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9b6:	4905      	ldr	r1, [pc, #20]	; (800a9cc <CDC_Init_FS+0x24>)
 800a9b8:	4803      	ldr	r0, [pc, #12]	; (800a9c8 <CDC_Init_FS+0x20>)
 800a9ba:	f7fe fca1 	bl	8009300 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20000dd8 	.word	0x20000dd8
 800a9c8:	200002fc 	.word	0x200002fc
 800a9cc:	200005d8 	.word	0x200005d8

0800a9d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	6039      	str	r1, [r7, #0]
 800a9ea:	71fb      	strb	r3, [r7, #7]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	2b23      	cmp	r3, #35	; 0x23
 800a9f4:	d84a      	bhi.n	800aa8c <CDC_Control_FS+0xac>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <CDC_Control_FS+0x1c>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa8d 	.word	0x0800aa8d
 800aa00:	0800aa8d 	.word	0x0800aa8d
 800aa04:	0800aa8d 	.word	0x0800aa8d
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aa8d 	.word	0x0800aa8d
 800aa10:	0800aa8d 	.word	0x0800aa8d
 800aa14:	0800aa8d 	.word	0x0800aa8d
 800aa18:	0800aa8d 	.word	0x0800aa8d
 800aa1c:	0800aa8d 	.word	0x0800aa8d
 800aa20:	0800aa8d 	.word	0x0800aa8d
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa8d 	.word	0x0800aa8d
 800aa2c:	0800aa8d 	.word	0x0800aa8d
 800aa30:	0800aa8d 	.word	0x0800aa8d
 800aa34:	0800aa8d 	.word	0x0800aa8d
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa8d 	.word	0x0800aa8d
 800aa44:	0800aa8d 	.word	0x0800aa8d
 800aa48:	0800aa8d 	.word	0x0800aa8d
 800aa4c:	0800aa8d 	.word	0x0800aa8d
 800aa50:	0800aa8d 	.word	0x0800aa8d
 800aa54:	0800aa8d 	.word	0x0800aa8d
 800aa58:	0800aa8d 	.word	0x0800aa8d
 800aa5c:	0800aa8d 	.word	0x0800aa8d
 800aa60:	0800aa8d 	.word	0x0800aa8d
 800aa64:	0800aa8d 	.word	0x0800aa8d
 800aa68:	0800aa8d 	.word	0x0800aa8d
 800aa6c:	0800aa8d 	.word	0x0800aa8d
 800aa70:	0800aa8d 	.word	0x0800aa8d
 800aa74:	0800aa8d 	.word	0x0800aa8d
 800aa78:	0800aa8d 	.word	0x0800aa8d
 800aa7c:	0800aa8d 	.word	0x0800aa8d
 800aa80:	0800aa8d 	.word	0x0800aa8d
 800aa84:	0800aa8d 	.word	0x0800aa8d
 800aa88:	0800aa8d 	.word	0x0800aa8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa8c:	bf00      	nop
  }

  return (USBD_OK);
 800aa8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4805      	ldr	r0, [pc, #20]	; (800aac0 <CDC_Receive_FS+0x24>)
 800aaaa:	f7fe fc29 	bl	8009300 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aaae:	4804      	ldr	r0, [pc, #16]	; (800aac0 <CDC_Receive_FS+0x24>)
 800aab0:	f7fe fc84 	bl	80093bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aab4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	200002fc 	.word	0x200002fc

0800aac4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aad4:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <CDC_Transmit_FS+0x48>)
 800aad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aada:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e00b      	b.n	800ab02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aaea:	887b      	ldrh	r3, [r7, #2]
 800aaec:	461a      	mov	r2, r3
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4806      	ldr	r0, [pc, #24]	; (800ab0c <CDC_Transmit_FS+0x48>)
 800aaf2:	f7fe fbe3 	bl	80092bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aaf6:	4805      	ldr	r0, [pc, #20]	; (800ab0c <CDC_Transmit_FS+0x48>)
 800aaf8:	f7fe fc20 	bl	800933c <USBD_CDC_TransmitPacket>
 800aafc:	4603      	mov	r3, r0
 800aafe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200002fc 	.word	0x200002fc

0800ab10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	371c      	adds	r7, #28
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
	...

0800ab34 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	6039      	str	r1, [r7, #0]
 800ab3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2212      	movs	r2, #18
 800ab44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ab46:	4b03      	ldr	r3, [pc, #12]	; (800ab54 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	200000d4 	.word	0x200000d4

0800ab58 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	6039      	str	r1, [r7, #0]
 800ab62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2204      	movs	r2, #4
 800ab68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab6a:	4b03      	ldr	r3, [pc, #12]	; (800ab78 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	200000e8 	.word	0x200000e8

0800ab7c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d105      	bne.n	800ab9a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4907      	ldr	r1, [pc, #28]	; (800abb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab92:	4808      	ldr	r0, [pc, #32]	; (800abb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ab94:	f7ff fdf8 	bl	800a788 <USBD_GetString>
 800ab98:	e004      	b.n	800aba4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	4904      	ldr	r1, [pc, #16]	; (800abb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab9e:	4805      	ldr	r0, [pc, #20]	; (800abb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aba0:	f7ff fdf2 	bl	800a788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	200015d8 	.word	0x200015d8
 800abb4:	08016428 	.word	0x08016428

0800abb8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	6039      	str	r1, [r7, #0]
 800abc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	4904      	ldr	r1, [pc, #16]	; (800abd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800abc8:	4804      	ldr	r0, [pc, #16]	; (800abdc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800abca:	f7ff fddd 	bl	800a788 <USBD_GetString>
  return USBD_StrDesc;
 800abce:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	200015d8 	.word	0x200015d8
 800abdc:	08016440 	.word	0x08016440

0800abe0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	221a      	movs	r2, #26
 800abf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abf2:	f000 f843 	bl	800ac7c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800abf6:	4b02      	ldr	r3, [pc, #8]	; (800ac00 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	200000ec 	.word	0x200000ec

0800ac04 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d105      	bne.n	800ac22 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4907      	ldr	r1, [pc, #28]	; (800ac38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac1a:	4808      	ldr	r0, [pc, #32]	; (800ac3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac1c:	f7ff fdb4 	bl	800a788 <USBD_GetString>
 800ac20:	e004      	b.n	800ac2c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4904      	ldr	r1, [pc, #16]	; (800ac38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac26:	4805      	ldr	r0, [pc, #20]	; (800ac3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac28:	f7ff fdae 	bl	800a788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac2c:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	200015d8 	.word	0x200015d8
 800ac3c:	08016454 	.word	0x08016454

0800ac40 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d105      	bne.n	800ac5e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	4907      	ldr	r1, [pc, #28]	; (800ac74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac56:	4808      	ldr	r0, [pc, #32]	; (800ac78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac58:	f7ff fd96 	bl	800a788 <USBD_GetString>
 800ac5c:	e004      	b.n	800ac68 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	4904      	ldr	r1, [pc, #16]	; (800ac74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac62:	4805      	ldr	r0, [pc, #20]	; (800ac78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac64:	f7ff fd90 	bl	800a788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac68:	4b02      	ldr	r3, [pc, #8]	; (800ac74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200015d8 	.word	0x200015d8
 800ac78:	08016460 	.word	0x08016460

0800ac7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac82:	4b0f      	ldr	r3, [pc, #60]	; (800acc0 <Get_SerialNum+0x44>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac88:	4b0e      	ldr	r3, [pc, #56]	; (800acc4 <Get_SerialNum+0x48>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac8e:	4b0e      	ldr	r3, [pc, #56]	; (800acc8 <Get_SerialNum+0x4c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4413      	add	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aca2:	2208      	movs	r2, #8
 800aca4:	4909      	ldr	r1, [pc, #36]	; (800accc <Get_SerialNum+0x50>)
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 f814 	bl	800acd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acac:	2204      	movs	r2, #4
 800acae:	4908      	ldr	r1, [pc, #32]	; (800acd0 <Get_SerialNum+0x54>)
 800acb0:	68b8      	ldr	r0, [r7, #8]
 800acb2:	f000 f80f 	bl	800acd4 <IntToUnicode>
  }
}
 800acb6:	bf00      	nop
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	1fff7590 	.word	0x1fff7590
 800acc4:	1fff7594 	.word	0x1fff7594
 800acc8:	1fff7598 	.word	0x1fff7598
 800accc:	200000ee 	.word	0x200000ee
 800acd0:	200000fe 	.word	0x200000fe

0800acd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	4613      	mov	r3, r2
 800ace0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ace6:	2300      	movs	r3, #0
 800ace8:	75fb      	strb	r3, [r7, #23]
 800acea:	e027      	b.n	800ad3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	0f1b      	lsrs	r3, r3, #28
 800acf0:	2b09      	cmp	r3, #9
 800acf2:	d80b      	bhi.n	800ad0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	0f1b      	lsrs	r3, r3, #28
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	4619      	mov	r1, r3
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	440b      	add	r3, r1
 800ad04:	3230      	adds	r2, #48	; 0x30
 800ad06:	b2d2      	uxtb	r2, r2
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	e00a      	b.n	800ad22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	0f1b      	lsrs	r3, r3, #28
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4619      	mov	r1, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3237      	adds	r2, #55	; 0x37
 800ad1e:	b2d2      	uxtb	r2, r2
 800ad20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	011b      	lsls	r3, r3, #4
 800ad26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	005b      	lsls	r3, r3, #1
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	4413      	add	r3, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	75fb      	strb	r3, [r7, #23]
 800ad3c:	7dfa      	ldrb	r2, [r7, #23]
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d3d3      	bcc.n	800acec <IntToUnicode+0x18>
  }
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <LL_AHB2_GRP1_EnableClock>:
{
 800ad52:	b480      	push	{r7}
 800ad54:	b085      	sub	sp, #20
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ad5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ad6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4013      	ands	r3, r2
 800ad74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ad76:	68fb      	ldr	r3, [r7, #12]
}
 800ad78:	bf00      	nop
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <LL_APB1_GRP1_EnableClock>:
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ad8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ad9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ada0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4013      	ands	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ada8:	68fb      	ldr	r3, [r7, #12]
}
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b09c      	sub	sp, #112	; 0x70
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	605a      	str	r2, [r3, #4]
 800adca:	609a      	str	r2, [r3, #8]
 800adcc:	60da      	str	r2, [r3, #12]
 800adce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800add0:	f107 030c 	add.w	r3, r7, #12
 800add4:	2250      	movs	r2, #80	; 0x50
 800add6:	2100      	movs	r1, #0
 800add8:	4618      	mov	r0, r3
 800adda:	f00a fe07 	bl	80159ec <memset>
  if(pcdHandle->Instance==USB)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a1b      	ldr	r2, [pc, #108]	; (800ae50 <HAL_PCD_MspInit+0x98>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d12f      	bne.n	800ae48 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ade8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800adee:	2300      	movs	r3, #0
 800adf0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800adf2:	f107 030c 	add.w	r3, r7, #12
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fa f8c5 	bl	8004f86 <HAL_RCCEx_PeriphCLKConfig>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800ae02:	f7f5 ff1f 	bl	8000c44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae06:	2001      	movs	r0, #1
 800ae08:	f7ff ffa3 	bl	800ad52 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ae0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ae10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae12:	2302      	movs	r3, #2
 800ae14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ae1e:	230a      	movs	r3, #10
 800ae20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ae26:	4619      	mov	r1, r3
 800ae28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae2c:	f7f6 fd2c 	bl	8001888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae30:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ae34:	f7ff ffa6 	bl	800ad84 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	2014      	movs	r0, #20
 800ae3e:	f7f6 fb32 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae42:	2014      	movs	r0, #20
 800ae44:	f7f6 fb49 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae48:	bf00      	nop
 800ae4a:	3770      	adds	r7, #112	; 0x70
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40006800 	.word	0x40006800

0800ae54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f7fe fb8f 	bl	800958e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae8a:	78fa      	ldrb	r2, [r7, #3]
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	440b      	add	r3, r1
 800ae98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	4619      	mov	r1, r3
 800aea2:	f7fe fbc9 	bl	8009638 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800aec0:	78fa      	ldrb	r2, [r7, #3]
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	4613      	mov	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	440b      	add	r3, r1
 800aece:	333c      	adds	r3, #60	; 0x3c
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	78fb      	ldrb	r3, [r7, #3]
 800aed4:	4619      	mov	r1, r3
 800aed6:	f7fe fc62 	bl	800979e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aeda:	bf00      	nop
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe fd9c 	bl	8009a2e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af06:	2301      	movs	r3, #1
 800af08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d001      	beq.n	800af16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af12:	f7f5 fe97 	bl	8000c44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af1c:	7bfa      	ldrb	r2, [r7, #15]
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe fd40 	bl	80099a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fe fce8 	bl	8009902 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe fd3b 	bl	80099c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d005      	beq.n	800af64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <HAL_PCD_SuspendCallback+0x30>)
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	4a03      	ldr	r2, [pc, #12]	; (800af6c <HAL_PCD_SuspendCallback+0x30>)
 800af5e:	f043 0306 	orr.w	r3, r3, #6
 800af62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	e000ed00 	.word	0xe000ed00

0800af70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af80:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <HAL_PCD_ResumeCallback+0x34>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	4a07      	ldr	r2, [pc, #28]	; (800afa4 <HAL_PCD_ResumeCallback+0x34>)
 800af86:	f023 0306 	bic.w	r3, r3, #6
 800af8a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af8c:	f000 f9fc 	bl	800b388 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fd31 	bl	80099fe <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	e000ed00 	.word	0xe000ed00

0800afa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800afb0:	4a2c      	ldr	r2, [pc, #176]	; (800b064 <USBD_LL_Init+0xbc>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a2a      	ldr	r2, [pc, #168]	; (800b064 <USBD_LL_Init+0xbc>)
 800afbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800afc0:	f7f8 fcaa 	bl	8003918 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800afc4:	4b27      	ldr	r3, [pc, #156]	; (800b064 <USBD_LL_Init+0xbc>)
 800afc6:	4a28      	ldr	r2, [pc, #160]	; (800b068 <USBD_LL_Init+0xc0>)
 800afc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afca:	4b26      	ldr	r3, [pc, #152]	; (800b064 <USBD_LL_Init+0xbc>)
 800afcc:	2208      	movs	r2, #8
 800afce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afd0:	4b24      	ldr	r3, [pc, #144]	; (800b064 <USBD_LL_Init+0xbc>)
 800afd2:	2202      	movs	r2, #2
 800afd4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afd6:	4b23      	ldr	r3, [pc, #140]	; (800b064 <USBD_LL_Init+0xbc>)
 800afd8:	2202      	movs	r2, #2
 800afda:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afdc:	4b21      	ldr	r3, [pc, #132]	; (800b064 <USBD_LL_Init+0xbc>)
 800afde:	2200      	movs	r2, #0
 800afe0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afe2:	4b20      	ldr	r3, [pc, #128]	; (800b064 <USBD_LL_Init+0xbc>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afe8:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <USBD_LL_Init+0xbc>)
 800afea:	2200      	movs	r2, #0
 800afec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afee:	4b1d      	ldr	r3, [pc, #116]	; (800b064 <USBD_LL_Init+0xbc>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aff4:	481b      	ldr	r0, [pc, #108]	; (800b064 <USBD_LL_Init+0xbc>)
 800aff6:	f7f6 ff2d 	bl	8001e54 <HAL_PCD_Init>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b000:	f7f5 fe20 	bl	8000c44 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b00a:	2318      	movs	r3, #24
 800b00c:	2200      	movs	r2, #0
 800b00e:	2100      	movs	r1, #0
 800b010:	f7f8 fbf6 	bl	8003800 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b01a:	2358      	movs	r3, #88	; 0x58
 800b01c:	2200      	movs	r2, #0
 800b01e:	2180      	movs	r1, #128	; 0x80
 800b020:	f7f8 fbee 	bl	8003800 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b02a:	23c0      	movs	r3, #192	; 0xc0
 800b02c:	2200      	movs	r2, #0
 800b02e:	2181      	movs	r1, #129	; 0x81
 800b030:	f7f8 fbe6 	bl	8003800 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b03a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b03e:	2200      	movs	r2, #0
 800b040:	2101      	movs	r1, #1
 800b042:	f7f8 fbdd 	bl	8003800 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b04c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b050:	2200      	movs	r2, #0
 800b052:	2182      	movs	r1, #130	; 0x82
 800b054:	f7f8 fbd4 	bl	8003800 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	200017d8 	.word	0x200017d8
 800b068:	40006800 	.word	0x40006800

0800b06c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b082:	4618      	mov	r0, r3
 800b084:	f7f6 ffbf 	bl	8002006 <HAL_PCD_Start>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f980 	bl	800b394 <USBD_Get_USB_Status>
 800b094:	4603      	mov	r3, r0
 800b096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b098:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	70fb      	strb	r3, [r7, #3]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	70bb      	strb	r3, [r7, #2]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0ca:	78bb      	ldrb	r3, [r7, #2]
 800b0cc:	883a      	ldrh	r2, [r7, #0]
 800b0ce:	78f9      	ldrb	r1, [r7, #3]
 800b0d0:	f7f7 f907 	bl	80022e2 <HAL_PCD_EP_Open>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f95a 	bl	800b394 <USBD_Get_USB_Status>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b108:	78fa      	ldrb	r2, [r7, #3]
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f7 f945 	bl	800239c <HAL_PCD_EP_Close>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 f93b 	bl	800b394 <USBD_Get_USB_Status>
 800b11e:	4603      	mov	r3, r0
 800b120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b122:	7bbb      	ldrb	r3, [r7, #14]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b146:	78fa      	ldrb	r2, [r7, #3]
 800b148:	4611      	mov	r1, r2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7f7 f9ee 	bl	800252c <HAL_PCD_EP_SetStall>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f91c 	bl	800b394 <USBD_Get_USB_Status>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b160:	7bbb      	ldrb	r3, [r7, #14]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f7 fa21 	bl	80025d0 <HAL_PCD_EP_ClrStall>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	4618      	mov	r0, r3
 800b196:	f000 f8fd 	bl	800b394 <USBD_Get_USB_Status>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	da0c      	bge.n	800b1de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1c4:	78fb      	ldrb	r3, [r7, #3]
 800b1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ca:	68f9      	ldr	r1, [r7, #12]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	00db      	lsls	r3, r3, #3
 800b1d6:	440b      	add	r3, r1
 800b1d8:	3302      	adds	r3, #2
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	e00b      	b.n	800b1f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e4:	68f9      	ldr	r1, [r7, #12]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	440b      	add	r3, r1
 800b1f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b1f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4611      	mov	r1, r2
 800b220:	4618      	mov	r0, r3
 800b222:	f7f7 f839 	bl	8002298 <HAL_PCD_SetAddress>
 800b226:	4603      	mov	r3, r0
 800b228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 f8b1 	bl	800b394 <USBD_Get_USB_Status>
 800b232:	4603      	mov	r3, r0
 800b234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b236:	7bbb      	ldrb	r3, [r7, #14]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	603b      	str	r3, [r7, #0]
 800b24c:	460b      	mov	r3, r1
 800b24e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b25e:	7af9      	ldrb	r1, [r7, #11]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	f7f7 f92b 	bl	80024be <HAL_PCD_EP_Transmit>
 800b268:	4603      	mov	r3, r0
 800b26a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b26c:	7dfb      	ldrb	r3, [r7, #23]
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 f890 	bl	800b394 <USBD_Get_USB_Status>
 800b274:	4603      	mov	r3, r0
 800b276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b278:	7dbb      	ldrb	r3, [r7, #22]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b086      	sub	sp, #24
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	460b      	mov	r3, r1
 800b290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2a0:	7af9      	ldrb	r1, [r7, #11]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	f7f7 f8c1 	bl	800242c <HAL_PCD_EP_Receive>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 f86f 	bl	800b394 <USBD_Get_USB_Status>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2d6:	78fa      	ldrb	r2, [r7, #3]
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7f7 f8d7 	bl	800248e <HAL_PCD_EP_GetRxCount>
 800b2e0:	4603      	mov	r3, r0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <HAL_PCDEx_LPM_Callback+0x18>
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d013      	beq.n	800b32a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b302:	e023      	b.n	800b34c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d007      	beq.n	800b31c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b30c:	f000 f83c 	bl	800b388 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b310:	4b10      	ldr	r3, [pc, #64]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	4a0f      	ldr	r2, [pc, #60]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b316:	f023 0306 	bic.w	r3, r3, #6
 800b31a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe fb6b 	bl	80099fe <USBD_LL_Resume>
    break;
 800b328:	e010      	b.n	800b34c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe fb48 	bl	80099c6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d005      	beq.n	800b34a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b33e:	4b05      	ldr	r3, [pc, #20]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	4a04      	ldr	r2, [pc, #16]	; (800b354 <HAL_PCDEx_LPM_Callback+0x68>)
 800b344:	f043 0306 	orr.w	r3, r3, #6
 800b348:	6113      	str	r3, [r2, #16]
    break;
 800b34a:	bf00      	nop
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	e000ed00 	.word	0xe000ed00

0800b358 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b360:	4b03      	ldr	r3, [pc, #12]	; (800b370 <USBD_static_malloc+0x18>)
}
 800b362:	4618      	mov	r0, r3
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	20001acc 	.word	0x20001acc

0800b374 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b38c:	f7f5 facc 	bl	8000928 <SystemClock_Config>
}
 800b390:	bf00      	nop
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d817      	bhi.n	800b3d8 <USBD_Get_USB_Status+0x44>
 800b3a8:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <USBD_Get_USB_Status+0x1c>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b3c1 	.word	0x0800b3c1
 800b3b4:	0800b3c7 	.word	0x0800b3c7
 800b3b8:	0800b3cd 	.word	0x0800b3cd
 800b3bc:	0800b3d3 	.word	0x0800b3d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c4:	e00b      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ca:	e008      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d0:	e005      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d6:	e002      	b.n	800b3de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	73fb      	strb	r3, [r7, #15]
    break;
 800b3dc:	bf00      	nop
  }
  return usb_status;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <br_dec32le>:
#include <stdint.h>
#include <string.h>
#include "aes256ctr.h"

static inline uint32_t br_dec32le(const uint8_t *src)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	return (uint32_t)src[0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	461a      	mov	r2, r3
		| ((uint32_t)src[1] << 8)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	021b      	lsls	r3, r3, #8
 800b402:	431a      	orrs	r2, r3
		| ((uint32_t)src[2] << 16)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	3302      	adds	r3, #2
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	041b      	lsls	r3, r3, #16
 800b40c:	431a      	orrs	r2, r3
		| ((uint32_t)src[3] << 24);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3303      	adds	r3, #3
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	061b      	lsls	r3, r3, #24
 800b416:	4313      	orrs	r3, r2
}
 800b418:	4618      	mov	r0, r3
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <br_range_dec32le>:

static void br_range_dec32le(uint32_t *v, size_t num, const uint8_t *src)
{
 800b424:	b590      	push	{r4, r7, lr}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b430:	e00a      	b.n	800b448 <br_range_dec32le+0x24>
		*v ++ = br_dec32le(src);
 800b432:	68fc      	ldr	r4, [r7, #12]
 800b434:	1d23      	adds	r3, r4, #4
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff ffd7 	bl	800b3ec <br_dec32le>
 800b43e:	4603      	mov	r3, r0
 800b440:	6023      	str	r3, [r4, #0]
		src += 4;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3304      	adds	r3, #4
 800b446:	607b      	str	r3, [r7, #4]
	while (num-- > 0) {
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	1e5a      	subs	r2, r3, #1
 800b44c:	60ba      	str	r2, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1ef      	bne.n	800b432 <br_range_dec32le+0xe>
	}
}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd90      	pop	{r4, r7, pc}

0800b45c <br_swap32>:

static inline uint32_t br_swap32(uint32_t x)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
		| ((x >> 8) & (uint32_t)0x00FF00FF);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	0a1b      	lsrs	r3, r3, #8
 800b470:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b474:	4313      	orrs	r3, r2
 800b476:	607b      	str	r3, [r7, #4]
	return (x << 16) | (x >> 16);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	ea4f 4333 	mov.w	r3, r3, ror #16
}
 800b47e:	4618      	mov	r0, r3
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <br_enc32le>:

static inline void br_enc32le(uint8_t *dst, uint32_t x)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	6039      	str	r1, [r7, #0]
	dst[0] = (uint8_t)x;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	b2da      	uxtb	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	701a      	strb	r2, [r3, #0]
	dst[1] = (uint8_t)(x >> 8);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	0a1a      	lsrs	r2, r3, #8
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
	dst[2] = (uint8_t)(x >> 16);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	0c1a      	lsrs	r2, r3, #16
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3302      	adds	r3, #2
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	701a      	strb	r2, [r3, #0]
	dst[3] = (uint8_t)(x >> 24);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	0e1a      	lsrs	r2, r3, #24
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3303      	adds	r3, #3
 800b4bc:	b2d2      	uxtb	r2, r2
 800b4be:	701a      	strb	r2, [r3, #0]
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <br_range_enc32le>:

static void br_range_enc32le(uint8_t *dst, const uint32_t *v, size_t num)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b4d8:	e00a      	b.n	800b4f0 <br_range_enc32le+0x24>
		br_enc32le(dst, *v ++);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	1d1a      	adds	r2, r3, #4
 800b4de:	60ba      	str	r2, [r7, #8]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f7ff ffd0 	bl	800b48a <br_enc32le>
		dst += 4;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	60fb      	str	r3, [r7, #12]
	while (num-- > 0) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	1e5a      	subs	r2, r3, #1
 800b4f4:	607a      	str	r2, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1ef      	bne.n	800b4da <br_range_enc32le+0xe>
	}
}
 800b4fa:	bf00      	nop
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <br_aes_ct64_bitslice_Sbox>:

static void br_aes_ct64_bitslice_Sbox(uint64_t *q)
{
 800b504:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b508:	f2ad 7d84 	subw	sp, sp, #1924	; 0x784
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b512:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b516:	6018      	str	r0, [r3, #0]
	uint64_t t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	uint64_t t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	uint64_t t60, t61, t62, t63, t64, t65, t66, t67;
	uint64_t s0, s1, s2, s3, s4, s5, s6, s7;

	x0 = q[7];
 800b518:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b51c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b526:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 800b52a:	e9c1 2300 	strd	r2, r3, [r1]
	x1 = q[6];
 800b52e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b532:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b53c:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 800b540:	e9c1 2300 	strd	r2, r3, [r1]
	x2 = q[5];
 800b544:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b548:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800b552:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800b556:	e9c1 2300 	strd	r2, r3, [r1]
	x3 = q[4];
 800b55a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b55e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b568:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800b56c:	e9c1 2300 	strd	r2, r3, [r1]
	x4 = q[3];
 800b570:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b574:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b57e:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800b582:	e9c1 2300 	strd	r2, r3, [r1]
	x5 = q[2];
 800b586:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b58a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b594:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800b598:	e9c1 2300 	strd	r2, r3, [r1]
	x6 = q[1];
 800b59c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b5a0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b5aa:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800b5ae:	e9c1 2300 	strd	r2, r3, [r1]
	x7 = q[0];
 800b5b2:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b5b6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800b5c4:	e9c1 2300 	strd	r2, r3, [r1]

	/*
	 * Top linear transformation.
	 */
	y14 = x3 ^ x5;
 800b5c8:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b5cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5d0:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	ea80 0402 	eor.w	r4, r0, r2
 800b5dc:	ea81 0503 	eor.w	r5, r1, r3
 800b5e0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b5e4:	e9c3 4500 	strd	r4, r5, [r3]
	y13 = x0 ^ x6;
 800b5e8:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b5ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5f0:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	ea80 0802 	eor.w	r8, r0, r2
 800b5fc:	ea81 0903 	eor.w	r9, r1, r3
 800b600:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b604:	e9c3 8900 	strd	r8, r9, [r3]
	y9 = x0 ^ x3;
 800b608:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b60c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b610:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	ea80 0a02 	eor.w	sl, r0, r2
 800b61c:	ea81 0b03 	eor.w	fp, r1, r3
 800b620:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800b624:	e9c3 ab00 	strd	sl, fp, [r3]
	y8 = x0 ^ x5;
 800b628:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b62c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b630:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	ea80 0402 	eor.w	r4, r0, r2
 800b63c:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 800b640:	404b      	eors	r3, r1
 800b642:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800b646:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 800b64a:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800b64e:	e9c2 3400 	strd	r3, r4, [r2]
	t0 = x1 ^ x2;
 800b652:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800b656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b65a:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	ea80 0402 	eor.w	r4, r0, r2
 800b666:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800b66a:	404b      	eors	r3, r1
 800b66c:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800b670:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 800b674:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800b678:	e9c2 3400 	strd	r3, r4, [r2]
	y1 = t0 ^ x7;
 800b67c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b680:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b684:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	ea80 0402 	eor.w	r4, r0, r2
 800b690:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 800b694:	404b      	eors	r3, r1
 800b696:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800b69a:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 800b69e:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 800b6a2:	e9c2 3400 	strd	r3, r4, [r2]
	y4 = y1 ^ x3;
 800b6a6:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b6aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6ae:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	ea80 0402 	eor.w	r4, r0, r2
 800b6ba:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800b6be:	404b      	eors	r3, r1
 800b6c0:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b6c4:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 800b6c8:	f507 62e1 	add.w	r2, r7, #1800	; 0x708
 800b6cc:	e9c2 3400 	strd	r3, r4, [r2]
	y12 = y13 ^ y14;
 800b6d0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b6d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6d8:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	ea80 0402 	eor.w	r4, r0, r2
 800b6e4:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 800b6e8:	404b      	eors	r3, r1
 800b6ea:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800b6ee:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 800b6f2:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 800b6f6:	e9c2 3400 	strd	r3, r4, [r2]
	y2 = y1 ^ x0;
 800b6fa:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b6fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b702:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	ea80 0402 	eor.w	r4, r0, r2
 800b70e:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800b712:	404b      	eors	r3, r1
 800b714:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b718:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800b71c:	f507 62df 	add.w	r2, r7, #1784	; 0x6f8
 800b720:	e9c2 3400 	strd	r3, r4, [r2]
	y5 = y1 ^ x6;
 800b724:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b728:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b72c:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	ea80 0402 	eor.w	r4, r0, r2
 800b738:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800b73c:	404b      	eors	r3, r1
 800b73e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800b742:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800b746:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800b74a:	e9c2 3400 	strd	r3, r4, [r2]
	y3 = y5 ^ y8;
 800b74e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b752:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b756:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	ea80 0402 	eor.w	r4, r0, r2
 800b762:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 800b766:	404b      	eors	r3, r1
 800b768:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800b76c:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 800b770:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800b774:	e9c2 3400 	strd	r3, r4, [r2]
	t1 = x4 ^ y12;
 800b778:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800b77c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b780:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	ea80 0402 	eor.w	r4, r0, r2
 800b78c:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800b790:	404b      	eors	r3, r1
 800b792:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b796:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 800b79a:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 800b79e:	e9c2 3400 	strd	r3, r4, [r2]
	y15 = t1 ^ x5;
 800b7a2:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b7a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7aa:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	ea80 0402 	eor.w	r4, r0, r2
 800b7b6:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 800b7ba:	404b      	eors	r3, r1
 800b7bc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800b7c0:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800b7c4:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800b7c8:	e9c2 3400 	strd	r3, r4, [r2]
	y20 = t1 ^ x1;
 800b7cc:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b7d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7d4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	ea80 0402 	eor.w	r4, r0, r2
 800b7e0:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 800b7e4:	404b      	eors	r3, r1
 800b7e6:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800b7ea:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800b7ee:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 800b7f2:	e9c2 3400 	strd	r3, r4, [r2]
	y6 = y15 ^ x7;
 800b7f6:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b7fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7fe:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	ea80 0402 	eor.w	r4, r0, r2
 800b80a:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 800b80e:	404b      	eors	r3, r1
 800b810:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800b814:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 800b818:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 800b81c:	e9c2 3400 	strd	r3, r4, [r2]
	y10 = y15 ^ t0;
 800b820:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b824:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b828:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	ea80 0402 	eor.w	r4, r0, r2
 800b834:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 800b838:	404b      	eors	r3, r1
 800b83a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800b83e:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800b842:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800b846:	e9c2 3400 	strd	r3, r4, [r2]
	y11 = y20 ^ y9;
 800b84a:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b84e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b852:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	ea80 0402 	eor.w	r4, r0, r2
 800b85e:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 800b862:	404b      	eors	r3, r1
 800b864:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800b868:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800b86c:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800b870:	e9c2 3400 	strd	r3, r4, [r2]
	y7 = x7 ^ y11;
 800b874:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b87c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	ea80 0402 	eor.w	r4, r0, r2
 800b888:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 800b88c:	404b      	eors	r3, r1
 800b88e:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800b892:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 800b896:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 800b89a:	e9c2 3400 	strd	r3, r4, [r2]
	y17 = y10 ^ y11;
 800b89e:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800b8a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8a6:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	ea80 0402 	eor.w	r4, r0, r2
 800b8b2:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 800b8b6:	404b      	eors	r3, r1
 800b8b8:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800b8bc:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800b8c0:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
 800b8c4:	e9c2 3400 	strd	r3, r4, [r2]
	y19 = y10 ^ y8;
 800b8c8:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800b8cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8d0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	ea80 0402 	eor.w	r4, r0, r2
 800b8dc:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 800b8e0:	404b      	eors	r3, r1
 800b8e2:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800b8e6:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800b8ea:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800b8ee:	e9c2 3400 	strd	r3, r4, [r2]
	y16 = t0 ^ y11;
 800b8f2:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b8f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8fa:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	ea80 0402 	eor.w	r4, r0, r2
 800b906:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 800b90a:	404b      	eors	r3, r1
 800b90c:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800b910:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 800b914:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800b918:	e9c2 3400 	strd	r3, r4, [r2]
	y21 = y13 ^ y16;
 800b91c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b920:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b924:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	ea80 0402 	eor.w	r4, r0, r2
 800b930:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 800b934:	404b      	eors	r3, r1
 800b936:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800b93a:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 800b93e:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 800b942:	e9c2 3400 	strd	r3, r4, [r2]
	y18 = x0 ^ y16;
 800b946:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b94a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b94e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	ea80 0402 	eor.w	r4, r0, r2
 800b95a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 800b95e:	404b      	eors	r3, r1
 800b960:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800b964:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 800b968:	f507 62d1 	add.w	r2, r7, #1672	; 0x688
 800b96c:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Non-linear section.
	 */
	t2 = y12 & y15;
 800b970:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b974:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b978:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	ea00 0402 	and.w	r4, r0, r2
 800b984:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 800b988:	400b      	ands	r3, r1
 800b98a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800b98e:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 800b992:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 800b996:	e9c2 3400 	strd	r3, r4, [r2]
	t3 = y3 & y6;
 800b99a:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800b99e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9a2:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	ea00 0402 	and.w	r4, r0, r2
 800b9ae:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 800b9b2:	400b      	ands	r3, r1
 800b9b4:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800b9b8:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800b9bc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 800b9c0:	e9c2 3400 	strd	r3, r4, [r2]
	t4 = t3 ^ t2;
 800b9c4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800b9c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9cc:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	ea80 0402 	eor.w	r4, r0, r2
 800b9d8:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 800b9dc:	404b      	eors	r3, r1
 800b9de:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800b9e2:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800b9e6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800b9ea:	e9c2 3400 	strd	r3, r4, [r2]
	t5 = y4 & x7;
 800b9ee:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800b9f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9f6:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	ea00 0402 	and.w	r4, r0, r2
 800ba02:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 800ba06:	400b      	ands	r3, r1
 800ba08:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800ba0c:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 800ba10:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 800ba14:	e9c2 3400 	strd	r3, r4, [r2]
	t6 = t5 ^ t2;
 800ba18:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800ba1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba20:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	ea80 0402 	eor.w	r4, r0, r2
 800ba2c:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 800ba30:	404b      	eors	r3, r1
 800ba32:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800ba36:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800ba3a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800ba3e:	e9c2 3400 	strd	r3, r4, [r2]
	t7 = y13 & y16;
 800ba42:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ba46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba4a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	ea00 0402 	and.w	r4, r0, r2
 800ba56:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 800ba5a:	400b      	ands	r3, r1
 800ba5c:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800ba60:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800ba64:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800ba68:	e9c2 3400 	strd	r3, r4, [r2]
	t8 = y5 & y1;
 800ba6c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800ba70:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba74:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	ea00 0402 	and.w	r4, r0, r2
 800ba80:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 800ba84:	400b      	ands	r3, r1
 800ba86:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800ba8a:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 800ba8e:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800ba92:	e9c2 3400 	strd	r3, r4, [r2]
	t9 = t8 ^ t7;
 800ba96:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800ba9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba9e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	ea80 0402 	eor.w	r4, r0, r2
 800baaa:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 800baae:	404b      	eors	r3, r1
 800bab0:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800bab4:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800bab8:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
 800babc:	e9c2 3400 	strd	r3, r4, [r2]
	t10 = y2 & y7;
 800bac0:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800bac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bac8:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	ea00 0402 	and.w	r4, r0, r2
 800bad4:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 800bad8:	400b      	ands	r3, r1
 800bada:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800bade:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800bae2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800bae6:	e9c2 3400 	strd	r3, r4, [r2]
	t11 = t10 ^ t7;
 800baea:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800baee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baf2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	ea80 0402 	eor.w	r4, r0, r2
 800bafe:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 800bb02:	404b      	eors	r3, r1
 800bb04:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800bb08:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 800bb0c:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 800bb10:	e9c2 3400 	strd	r3, r4, [r2]
	t12 = y9 & y11;
 800bb14:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800bb18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb1c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	ea00 0402 	and.w	r4, r0, r2
 800bb28:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 800bb2c:	400b      	ands	r3, r1
 800bb2e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800bb32:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800bb36:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bb3a:	e9c2 3400 	strd	r3, r4, [r2]
	t13 = y14 & y17;
 800bb3e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800bb42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb46:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	ea00 0402 	and.w	r4, r0, r2
 800bb52:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 800bb56:	400b      	ands	r3, r1
 800bb58:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800bb5c:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800bb60:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 800bb64:	e9c2 3400 	strd	r3, r4, [r2]
	t14 = t13 ^ t12;
 800bb68:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800bb6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	ea80 0402 	eor.w	r4, r0, r2
 800bb7c:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 800bb80:	404b      	eors	r3, r1
 800bb82:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800bb86:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 800bb8a:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 800bb8e:	e9c2 3400 	strd	r3, r4, [r2]
	t15 = y8 & y10;
 800bb92:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800bb96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb9a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba2:	ea00 0402 	and.w	r4, r0, r2
 800bba6:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 800bbaa:	400b      	ands	r3, r1
 800bbac:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800bbb0:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800bbb4:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800bbb8:	e9c2 3400 	strd	r3, r4, [r2]
	t16 = t15 ^ t12;
 800bbbc:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800bbc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	ea80 0402 	eor.w	r4, r0, r2
 800bbd0:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 800bbd4:	404b      	eors	r3, r1
 800bbd6:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800bbda:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800bbde:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 800bbe2:	e9c2 3400 	strd	r3, r4, [r2]
	t17 = t4 ^ t14;
 800bbe6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800bbea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbee:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	ea80 0402 	eor.w	r4, r0, r2
 800bbfa:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 800bbfe:	404b      	eors	r3, r1
 800bc00:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800bc04:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 800bc08:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 800bc0c:	e9c2 3400 	strd	r3, r4, [r2]
	t18 = t6 ^ t16;
 800bc10:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bc14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc18:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	ea80 0402 	eor.w	r4, r0, r2
 800bc24:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 800bc28:	404b      	eors	r3, r1
 800bc2a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800bc2e:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800bc32:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800bc36:	e9c2 3400 	strd	r3, r4, [r2]
	t19 = t9 ^ t14;
 800bc3a:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800bc3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc42:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	ea80 0402 	eor.w	r4, r0, r2
 800bc4e:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 800bc52:	404b      	eors	r3, r1
 800bc54:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800bc58:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800bc5c:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800bc60:	e9c2 3400 	strd	r3, r4, [r2]
	t20 = t11 ^ t16;
 800bc64:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800bc68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc6c:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	ea80 0402 	eor.w	r4, r0, r2
 800bc78:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 800bc7c:	404b      	eors	r3, r1
 800bc7e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800bc82:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800bc86:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 800bc8a:	e9c2 3400 	strd	r3, r4, [r2]
	t21 = t17 ^ y20;
 800bc8e:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800bc92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc96:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	ea80 0402 	eor.w	r4, r0, r2
 800bca2:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 800bca6:	404b      	eors	r3, r1
 800bca8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800bcac:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800bcb0:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800bcb4:	e9c2 3400 	strd	r3, r4, [r2]
	t22 = t18 ^ y19;
 800bcb8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800bcbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcc0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	ea80 0402 	eor.w	r4, r0, r2
 800bccc:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 800bcd0:	404b      	eors	r3, r1
 800bcd2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800bcd6:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800bcda:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800bcde:	e9c2 3400 	strd	r3, r4, [r2]
	t23 = t19 ^ y21;
 800bce2:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800bce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcea:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	ea80 0402 	eor.w	r4, r0, r2
 800bcf6:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 800bcfa:	404b      	eors	r3, r1
 800bcfc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800bd00:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800bd04:	f507 62bb 	add.w	r2, r7, #1496	; 0x5d8
 800bd08:	e9c2 3400 	strd	r3, r4, [r2]
	t24 = t20 ^ y18;
 800bd0c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800bd10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd14:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	ea80 0402 	eor.w	r4, r0, r2
 800bd20:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 800bd24:	404b      	eors	r3, r1
 800bd26:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bd2a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800bd2e:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 800bd32:	e9c2 3400 	strd	r3, r4, [r2]

	t25 = t21 ^ t22;
 800bd36:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800bd3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd3e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	ea80 0402 	eor.w	r4, r0, r2
 800bd4a:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 800bd4e:	404b      	eors	r3, r1
 800bd50:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bd54:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800bd58:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800bd5c:	e9c2 3400 	strd	r3, r4, [r2]
	t26 = t21 & t23;
 800bd60:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800bd64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd68:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd70:	ea00 0402 	and.w	r4, r0, r2
 800bd74:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 800bd78:	400b      	ands	r3, r1
 800bd7a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800bd7e:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 800bd82:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800bd86:	e9c2 3400 	strd	r3, r4, [r2]
	t27 = t24 ^ t26;
 800bd8a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bd8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd92:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	ea80 0402 	eor.w	r4, r0, r2
 800bd9e:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800bda2:	404b      	eors	r3, r1
 800bda4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800bda8:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800bdac:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 800bdb0:	e9c2 3400 	strd	r3, r4, [r2]
	t28 = t25 & t27;
 800bdb4:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800bdb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdbc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	ea00 0402 	and.w	r4, r0, r2
 800bdc8:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 800bdcc:	400b      	ands	r3, r1
 800bdce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800bdd2:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800bdd6:	f507 62b6 	add.w	r2, r7, #1456	; 0x5b0
 800bdda:	e9c2 3400 	strd	r3, r4, [r2]
	t29 = t28 ^ t22;
 800bdde:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800bde2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bde6:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	ea80 0402 	eor.w	r4, r0, r2
 800bdf2:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800bdf6:	404b      	eors	r3, r1
 800bdf8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800bdfc:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800be00:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800be04:	e9c2 3400 	strd	r3, r4, [r2]
	t30 = t23 ^ t24;
 800be08:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800be0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be10:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	ea80 0402 	eor.w	r4, r0, r2
 800be1c:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 800be20:	404b      	eors	r3, r1
 800be22:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800be26:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800be2a:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 800be2e:	e9c2 3400 	strd	r3, r4, [r2]
	t31 = t22 ^ t26;
 800be32:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800be36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be3a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	ea80 0402 	eor.w	r4, r0, r2
 800be46:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800be4a:	404b      	eors	r3, r1
 800be4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800be50:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800be54:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800be58:	e9c2 3400 	strd	r3, r4, [r2]
	t32 = t31 & t30;
 800be5c:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800be60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be64:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	ea00 0402 	and.w	r4, r0, r2
 800be70:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800be74:	400b      	ands	r3, r1
 800be76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800be7a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800be7e:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800be82:	e9c2 3400 	strd	r3, r4, [r2]
	t33 = t32 ^ t24;
 800be86:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800be8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be8e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	ea80 0402 	eor.w	r4, r0, r2
 800be9a:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800be9e:	404b      	eors	r3, r1
 800bea0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bea4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800bea8:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 800beac:	e9c2 3400 	strd	r3, r4, [r2]
	t34 = t23 ^ t33;
 800beb0:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800beb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800beb8:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	ea80 0402 	eor.w	r4, r0, r2
 800bec4:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800bec8:	404b      	eors	r3, r1
 800beca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800bece:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800bed2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800bed6:	e9c2 3400 	strd	r3, r4, [r2]
	t35 = t27 ^ t33;
 800beda:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800bede:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bee2:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	ea80 0402 	eor.w	r4, r0, r2
 800beee:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800bef2:	404b      	eors	r3, r1
 800bef4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800bef8:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800befc:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 800bf00:	e9c2 3400 	strd	r3, r4, [r2]
	t36 = t24 & t35;
 800bf04:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bf08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf0c:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	ea00 0402 	and.w	r4, r0, r2
 800bf18:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800bf1c:	400b      	ands	r3, r1
 800bf1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800bf22:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800bf26:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 800bf2a:	e9c2 3400 	strd	r3, r4, [r2]
	t37 = t36 ^ t34;
 800bf2e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800bf32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	ea80 0402 	eor.w	r4, r0, r2
 800bf42:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 800bf46:	404b      	eors	r3, r1
 800bf48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800bf4c:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800bf50:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800bf54:	e9c2 3400 	strd	r3, r4, [r2]
	t38 = t27 ^ t36;
 800bf58:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800bf5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf60:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	ea80 0402 	eor.w	r4, r0, r2
 800bf6c:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800bf70:	404b      	eors	r3, r1
 800bf72:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800bf76:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800bf7a:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800bf7e:	e9c2 3400 	strd	r3, r4, [r2]
	t39 = t29 & t38;
 800bf82:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800bf86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf8a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	ea00 0402 	and.w	r4, r0, r2
 800bf96:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800bf9a:	400b      	ands	r3, r1
 800bf9c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800bfa0:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 800bfa4:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800bfa8:	e9c2 3400 	strd	r3, r4, [r2]
	t40 = t25 ^ t39;
 800bfac:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800bfb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfb4:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	ea80 0402 	eor.w	r4, r0, r2
 800bfc0:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800bfc4:	404b      	eors	r3, r1
 800bfc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800bfca:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800bfce:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800bfd2:	e9c2 3400 	strd	r3, r4, [r2]

	t41 = t40 ^ t37;
 800bfd6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800bfda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfde:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	ea80 0402 	eor.w	r4, r0, r2
 800bfea:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800bfee:	404b      	eors	r3, r1
 800bff0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800bff4:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800bff8:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800bffc:	e9c2 3400 	strd	r3, r4, [r2]
	t42 = t29 ^ t33;
 800c000:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c004:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c008:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	ea80 0402 	eor.w	r4, r0, r2
 800c014:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800c018:	404b      	eors	r3, r1
 800c01a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800c01e:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800c022:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800c026:	e9c2 3400 	strd	r3, r4, [r2]
	t43 = t29 ^ t40;
 800c02a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c02e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c032:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	ea80 0402 	eor.w	r4, r0, r2
 800c03e:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 800c042:	404b      	eors	r3, r1
 800c044:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800c048:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800c04c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800c050:	e9c2 3400 	strd	r3, r4, [r2]
	t44 = t33 ^ t37;
 800c054:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c05c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	ea80 0402 	eor.w	r4, r0, r2
 800c068:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800c06c:	404b      	eors	r3, r1
 800c06e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800c072:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800c076:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 800c07a:	e9c2 3400 	strd	r3, r4, [r2]
	t45 = t42 ^ t41;
 800c07e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c082:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c086:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	ea80 0402 	eor.w	r4, r0, r2
 800c092:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800c096:	404b      	eors	r3, r1
 800c098:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800c09c:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800c0a0:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 800c0a4:	e9c2 3400 	strd	r3, r4, [r2]
	z0 = t44 & y15;
 800c0a8:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c0ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0b0:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	ea00 0402 	and.w	r4, r0, r2
 800c0bc:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800c0c0:	400b      	ands	r3, r1
 800c0c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c0c6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800c0ca:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800c0ce:	e9c2 3400 	strd	r3, r4, [r2]
	z1 = t37 & y6;
 800c0d2:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c0d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0da:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	ea00 0402 	and.w	r4, r0, r2
 800c0e6:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 800c0ea:	400b      	ands	r3, r1
 800c0ec:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800c0f0:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800c0f4:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800c0f8:	e9c2 3400 	strd	r3, r4, [r2]
	z2 = t33 & x7;
 800c0fc:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c100:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c104:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	ea00 0402 	and.w	r4, r0, r2
 800c110:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800c114:	400b      	ands	r3, r1
 800c116:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800c11a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800c11e:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 800c122:	e9c2 3400 	strd	r3, r4, [r2]
	z3 = t43 & y16;
 800c126:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c12a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c12e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	ea00 0402 	and.w	r4, r0, r2
 800c13a:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800c13e:	400b      	ands	r3, r1
 800c140:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800c144:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800c148:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800c14c:	e9c2 3400 	strd	r3, r4, [r2]
	z4 = t40 & y1;
 800c150:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c154:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c158:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	ea00 0402 	and.w	r4, r0, r2
 800c164:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 800c168:	400b      	ands	r3, r1
 800c16a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800c16e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800c172:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800c176:	e9c2 3400 	strd	r3, r4, [r2]
	z5 = t29 & y7;
 800c17a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c17e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c182:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	ea00 0402 	and.w	r4, r0, r2
 800c18e:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800c192:	400b      	ands	r3, r1
 800c194:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c198:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800c19c:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800c1a0:	e9c2 3400 	strd	r3, r4, [r2]
	z6 = t42 & y11;
 800c1a4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c1a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1ac:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	ea00 0402 	and.w	r4, r0, r2
 800c1b8:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800c1bc:	400b      	ands	r3, r1
 800c1be:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c1c2:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800c1c6:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800c1ca:	e9c2 3400 	strd	r3, r4, [r2]
	z7 = t45 & y17;
 800c1ce:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c1d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1d6:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	ea00 0402 	and.w	r4, r0, r2
 800c1e2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800c1e6:	400b      	ands	r3, r1
 800c1e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800c1ec:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800c1f0:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800c1f4:	e9c2 3400 	strd	r3, r4, [r2]
	z8 = t41 & y10;
 800c1f8:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c1fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c200:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c208:	ea00 0402 	and.w	r4, r0, r2
 800c20c:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800c210:	400b      	ands	r3, r1
 800c212:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800c216:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800c21a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800c21e:	e9c2 3400 	strd	r3, r4, [r2]
	z9 = t44 & y12;
 800c222:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c22a:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	ea00 0402 	and.w	r4, r0, r2
 800c236:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800c23a:	400b      	ands	r3, r1
 800c23c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800c240:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800c244:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800c248:	e9c2 3400 	strd	r3, r4, [r2]
	z10 = t37 & y3;
 800c24c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c250:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c254:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	ea00 0402 	and.w	r4, r0, r2
 800c260:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800c264:	400b      	ands	r3, r1
 800c266:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c26a:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800c26e:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800c272:	e9c2 3400 	strd	r3, r4, [r2]
	z11 = t33 & y4;
 800c276:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c27a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c27e:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	ea00 0402 	and.w	r4, r0, r2
 800c28a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800c28e:	400b      	ands	r3, r1
 800c290:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c294:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800c298:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800c29c:	e9c2 3400 	strd	r3, r4, [r2]
	z12 = t43 & y13;
 800c2a0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c2a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2a8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	ea00 0402 	and.w	r4, r0, r2
 800c2b4:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800c2b8:	400b      	ands	r3, r1
 800c2ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c2be:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800c2c2:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800c2c6:	e9c2 3400 	strd	r3, r4, [r2]
	z13 = t40 & y5;
 800c2ca:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c2ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2d2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	ea00 0402 	and.w	r4, r0, r2
 800c2de:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800c2e2:	400b      	ands	r3, r1
 800c2e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c2e8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800c2ec:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800c2f0:	e9c2 3400 	strd	r3, r4, [r2]
	z14 = t29 & y2;
 800c2f4:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c2f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2fc:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	ea00 0402 	and.w	r4, r0, r2
 800c308:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800c30c:	400b      	ands	r3, r1
 800c30e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c312:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800c316:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800c31a:	e9c2 3400 	strd	r3, r4, [r2]
	z15 = t42 & y9;
 800c31e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c322:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c326:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	ea00 0402 	and.w	r4, r0, r2
 800c332:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 800c336:	400b      	ands	r3, r1
 800c338:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c33c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800c340:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800c344:	e9c2 3400 	strd	r3, r4, [r2]
	z16 = t45 & y14;
 800c348:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c34c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c350:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	ea00 0402 	and.w	r4, r0, r2
 800c35c:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800c360:	400b      	ands	r3, r1
 800c362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c366:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800c36a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800c36e:	e9c2 3400 	strd	r3, r4, [r2]
	z17 = t41 & y8;
 800c372:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c37a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800c37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c382:	ea00 0402 	and.w	r4, r0, r2
 800c386:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800c38a:	400b      	ands	r3, r1
 800c38c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c390:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800c394:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800c398:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Bottom linear transformation.
	 */
	t46 = z15 ^ z16;
 800c39c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800c3a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3a4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	ea80 0402 	eor.w	r4, r0, r2
 800c3b0:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800c3b4:	404b      	eors	r3, r1
 800c3b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c3ba:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c3be:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800c3c2:	e9c2 3400 	strd	r3, r4, [r2]
	t47 = z10 ^ z11;
 800c3c6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c3ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3ce:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	ea80 0402 	eor.w	r4, r0, r2
 800c3da:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800c3de:	404b      	eors	r3, r1
 800c3e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3e4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c3e8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800c3ec:	e9c2 3400 	strd	r3, r4, [r2]
	t48 = z5 ^ z13;
 800c3f0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c3f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3f8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	ea80 0402 	eor.w	r4, r0, r2
 800c404:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800c408:	404b      	eors	r3, r1
 800c40a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c40e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c412:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800c416:	e9c2 3400 	strd	r3, r4, [r2]
	t49 = z9 ^ z10;
 800c41a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800c41e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c422:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	ea80 0402 	eor.w	r4, r0, r2
 800c42e:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800c432:	404b      	eors	r3, r1
 800c434:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c438:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c43c:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800c440:	e9c2 3400 	strd	r3, r4, [r2]
	t50 = z2 ^ z12;
 800c444:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c44c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	ea80 0402 	eor.w	r4, r0, r2
 800c458:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c45c:	404b      	eors	r3, r1
 800c45e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c462:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800c466:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800c46a:	e9c2 3400 	strd	r3, r4, [r2]
	t51 = z2 ^ z5;
 800c46e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c472:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c476:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	ea80 0402 	eor.w	r4, r0, r2
 800c482:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800c486:	404b      	eors	r3, r1
 800c488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c48c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800c490:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800c494:	e9c2 3400 	strd	r3, r4, [r2]
	t52 = z7 ^ z8;
 800c498:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c49c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4a0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	ea80 0402 	eor.w	r4, r0, r2
 800c4ac:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800c4b0:	404b      	eors	r3, r1
 800c4b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4b6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800c4ba:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800c4be:	e9c2 3400 	strd	r3, r4, [r2]
	t53 = z0 ^ z3;
 800c4c2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800c4c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4ca:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	ea80 0402 	eor.w	r4, r0, r2
 800c4d6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800c4da:	404b      	eors	r3, r1
 800c4dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4e0:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800c4e4:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800c4e8:	e9c2 3400 	strd	r3, r4, [r2]
	t54 = z6 ^ z7;
 800c4ec:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800c4f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4f4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	ea80 0402 	eor.w	r4, r0, r2
 800c500:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c504:	404b      	eors	r3, r1
 800c506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c50a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800c50e:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800c512:	e9c2 3400 	strd	r3, r4, [r2]
	t55 = z16 ^ z17;
 800c516:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c51a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c51e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	ea80 0402 	eor.w	r4, r0, r2
 800c52a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c52e:	404b      	eors	r3, r1
 800c530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c534:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800c538:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800c53c:	e9c2 3400 	strd	r3, r4, [r2]
	t56 = z12 ^ t48;
 800c540:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c544:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c548:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	ea80 0402 	eor.w	r4, r0, r2
 800c554:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800c558:	404b      	eors	r3, r1
 800c55a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c55e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800c562:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800c566:	e9c2 3400 	strd	r3, r4, [r2]
	t57 = t50 ^ t53;
 800c56a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800c56e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c572:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	ea80 0402 	eor.w	r4, r0, r2
 800c57e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c582:	404b      	eors	r3, r1
 800c584:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c588:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c58c:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800c590:	e9c2 3400 	strd	r3, r4, [r2]
	t58 = z4 ^ t46;
 800c594:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c598:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c59c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	ea80 0402 	eor.w	r4, r0, r2
 800c5a8:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800c5ac:	404b      	eors	r3, r1
 800c5ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c5b2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800c5b6:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800c5ba:	e9c2 3400 	strd	r3, r4, [r2]
	t59 = z3 ^ t54;
 800c5be:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c5c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5c6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	ea80 0402 	eor.w	r4, r0, r2
 800c5d2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800c5d6:	404b      	eors	r3, r1
 800c5d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5dc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c5e0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800c5e4:	e9c2 3400 	strd	r3, r4, [r2]
	t60 = t46 ^ t57;
 800c5e8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c5ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5f0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	ea80 0402 	eor.w	r4, r0, r2
 800c5fc:	67bc      	str	r4, [r7, #120]	; 0x78
 800c5fe:	404b      	eors	r3, r1
 800c600:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c602:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c606:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800c60a:	e9c2 3400 	strd	r3, r4, [r2]
	t61 = z14 ^ t57;
 800c60e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800c612:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c616:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	ea80 0402 	eor.w	r4, r0, r2
 800c622:	673c      	str	r4, [r7, #112]	; 0x70
 800c624:	404b      	eors	r3, r1
 800c626:	677b      	str	r3, [r7, #116]	; 0x74
 800c628:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c62c:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800c630:	e9c2 3400 	strd	r3, r4, [r2]
	t62 = t52 ^ t58;
 800c634:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800c638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c63c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	ea80 0402 	eor.w	r4, r0, r2
 800c648:	66bc      	str	r4, [r7, #104]	; 0x68
 800c64a:	404b      	eors	r3, r1
 800c64c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c64e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800c652:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800c656:	e9c2 3400 	strd	r3, r4, [r2]
	t63 = t49 ^ t58;
 800c65a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800c65e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c662:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	ea80 0402 	eor.w	r4, r0, r2
 800c66e:	663c      	str	r4, [r7, #96]	; 0x60
 800c670:	404b      	eors	r3, r1
 800c672:	667b      	str	r3, [r7, #100]	; 0x64
 800c674:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c678:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800c67c:	e9c2 3400 	strd	r3, r4, [r2]
	t64 = z4 ^ t59;
 800c680:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c684:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c688:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	ea80 0402 	eor.w	r4, r0, r2
 800c694:	65bc      	str	r4, [r7, #88]	; 0x58
 800c696:	404b      	eors	r3, r1
 800c698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c69a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c69e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800c6a2:	e9c2 3400 	strd	r3, r4, [r2]
	t65 = t61 ^ t62;
 800c6a6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800c6aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6ae:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	ea80 0402 	eor.w	r4, r0, r2
 800c6ba:	653c      	str	r4, [r7, #80]	; 0x50
 800c6bc:	404b      	eors	r3, r1
 800c6be:	657b      	str	r3, [r7, #84]	; 0x54
 800c6c0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c6c4:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	; 0x3f8
	t66 = z1 ^ t63;
 800c6c8:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800c6cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6d0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	ea80 0402 	eor.w	r4, r0, r2
 800c6dc:	64bc      	str	r4, [r7, #72]	; 0x48
 800c6de:	404b      	eors	r3, r1
 800c6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6e2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c6e6:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
	s0 = t59 ^ t63;
 800c6ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6f2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800c6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fa:	ea80 0402 	eor.w	r4, r0, r2
 800c6fe:	643c      	str	r4, [r7, #64]	; 0x40
 800c700:	404b      	eors	r3, r1
 800c702:	647b      	str	r3, [r7, #68]	; 0x44
 800c704:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c708:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	; 0x3e8
	s6 = t56 ^ ~t62;
 800c70c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800c710:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c714:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	ea80 0402 	eor.w	r4, r0, r2
 800c720:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 800c724:	404b      	eors	r3, r1
 800c726:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800c72a:	e9d7 12e6 	ldrd	r1, r2, [r7, #920]	; 0x398
 800c72e:	460b      	mov	r3, r1
 800c730:	43db      	mvns	r3, r3
 800c732:	63bb      	str	r3, [r7, #56]	; 0x38
 800c734:	4613      	mov	r3, r2
 800c736:	43db      	mvns	r3, r3
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c73a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c73e:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
	s7 = t48 ^ ~t60;
 800c742:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800c746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c74a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c752:	ea80 0402 	eor.w	r4, r0, r2
 800c756:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 800c75a:	404b      	eors	r3, r1
 800c75c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800c760:	e9d7 12e4 	ldrd	r1, r2, [r7, #912]	; 0x390
 800c764:	460b      	mov	r3, r1
 800c766:	43db      	mvns	r3, r3
 800c768:	633b      	str	r3, [r7, #48]	; 0x30
 800c76a:	4613      	mov	r3, r2
 800c76c:	43db      	mvns	r3, r3
 800c76e:	637b      	str	r3, [r7, #52]	; 0x34
 800c770:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c774:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
	t67 = t64 ^ t65;
 800c778:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800c77c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c780:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800c784:	ea80 0402 	eor.w	r4, r0, r2
 800c788:	62bc      	str	r4, [r7, #40]	; 0x28
 800c78a:	404b      	eors	r3, r1
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c78e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c792:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
	s3 = t53 ^ t66;
 800c796:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800c79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c79e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800c7a2:	ea80 0402 	eor.w	r4, r0, r2
 800c7a6:	623c      	str	r4, [r7, #32]
 800c7a8:	404b      	eors	r3, r1
 800c7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c7ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c7b0:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
	s4 = t51 ^ t66;
 800c7b4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800c7b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7bc:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800c7c0:	ea80 0402 	eor.w	r4, r0, r2
 800c7c4:	61bc      	str	r4, [r7, #24]
 800c7c6:	404b      	eors	r3, r1
 800c7c8:	61fb      	str	r3, [r7, #28]
 800c7ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c7ce:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
	s5 = t47 ^ t65;
 800c7d2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800c7d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7da:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800c7de:	ea80 0402 	eor.w	r4, r0, r2
 800c7e2:	613c      	str	r4, [r7, #16]
 800c7e4:	404b      	eors	r3, r1
 800c7e6:	617b      	str	r3, [r7, #20]
 800c7e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c7ec:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
	s1 = t64 ^ ~s3;
 800c7f0:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800c7f4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	ea80 0402 	eor.w	r4, r0, r2
 800c800:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800c804:	404b      	eors	r3, r1
 800c806:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800c80a:	e9d7 12e2 	ldrd	r1, r2, [r7, #904]	; 0x388
 800c80e:	460b      	mov	r3, r1
 800c810:	43db      	mvns	r3, r3
 800c812:	60bb      	str	r3, [r7, #8]
 800c814:	4613      	mov	r3, r2
 800c816:	43db      	mvns	r3, r3
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c81e:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
	s2 = t55 ^ ~t67;
 800c822:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 800c826:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	ea80 0402 	eor.w	r4, r0, r2
 800c832:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 800c836:	404b      	eors	r3, r1
 800c838:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800c83c:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	; 0x380
 800c840:	460b      	mov	r3, r1
 800c842:	43db      	mvns	r3, r3
 800c844:	603b      	str	r3, [r7, #0]
 800c846:	4613      	mov	r3, r2
 800c848:	43db      	mvns	r3, r3
 800c84a:	607b      	str	r3, [r7, #4]
 800c84c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c850:	e9c7 34ea 	strd	r3, r4, [r7, #936]	; 0x3a8

	q[7] = s0;
 800c854:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c858:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c862:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800c866:	e9c1 2300 	strd	r2, r3, [r1]
	q[6] = s1;
 800c86a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c86e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c878:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800c87c:	e9c1 2300 	strd	r2, r3, [r1]
	q[5] = s2;
 800c880:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c884:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c88e:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800c892:	e9c1 2300 	strd	r2, r3, [r1]
	q[4] = s3;
 800c896:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c89a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f103 0120 	add.w	r1, r3, #32
 800c8a4:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800c8a8:	e9c1 2300 	strd	r2, r3, [r1]
	q[3] = s4;
 800c8ac:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c8b0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f103 0118 	add.w	r1, r3, #24
 800c8ba:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800c8be:	e9c1 2300 	strd	r2, r3, [r1]
	q[2] = s5;
 800c8c2:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c8c6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f103 0110 	add.w	r1, r3, #16
 800c8d0:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800c8d4:	e9c1 2300 	strd	r2, r3, [r1]
	q[1] = s6;
 800c8d8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c8dc:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f103 0108 	add.w	r1, r3, #8
 800c8e6:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800c8ea:	e9c1 2300 	strd	r2, r3, [r1]
	q[0] = s7;
 800c8ee:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c8f2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c8f6:	6819      	ldr	r1, [r3, #0]
 800c8f8:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800c8fc:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c900:	bf00      	nop
 800c902:	f207 7784 	addw	r7, r7, #1924	; 0x784
 800c906:	46bd      	mov	sp, r7
 800c908:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c90c:	4770      	bx	lr

0800c90e <br_aes_ct64_ortho>:

static void br_aes_ct64_ortho(uint64_t *q)
{
 800c90e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c912:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 800c916:	af00      	add	r7, sp, #0
 800c918:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c

#define SWAP2(x, y)    SWAPN(0x5555555555555555, 0xAAAAAAAAAAAAAAAA,  1, x, y)
#define SWAP4(x, y)    SWAPN(0x3333333333333333, 0xCCCCCCCCCCCCCCCC,  2, x, y)
#define SWAP8(x, y)    SWAPN(0x0F0F0F0F0F0F0F0F, 0xF0F0F0F0F0F0F0F0,  4, x, y)

	SWAP2(q[0], q[1]);
 800c91c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
 800c928:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c92c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c930:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
 800c934:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800c938:	f002 3855 	and.w	r8, r2, #1431655765	; 0x55555555
 800c93c:	f003 3955 	and.w	r9, r3, #1431655765	; 0x55555555
 800c940:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800c944:	1891      	adds	r1, r2, r2
 800c946:	61b9      	str	r1, [r7, #24]
 800c948:	415b      	adcs	r3, r3
 800c94a:	61fb      	str	r3, [r7, #28]
 800c94c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c950:	f002 34aa 	and.w	r4, r2, #2863311530	; 0xaaaaaaaa
 800c954:	f003 35aa 	and.w	r5, r3, #2863311530	; 0xaaaaaaaa
 800c958:	ea48 0304 	orr.w	r3, r8, r4
 800c95c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800c960:	ea49 0305 	orr.w	r3, r9, r5
 800c964:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800c968:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c96c:	e9d7 1290 	ldrd	r1, r2, [r7, #576]	; 0x240
 800c970:	e9c3 1200 	strd	r1, r2, [r3]
 800c974:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800c978:	f04f 0000 	mov.w	r0, #0
 800c97c:	f04f 0100 	mov.w	r1, #0
 800c980:	0850      	lsrs	r0, r2, #1
 800c982:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800c986:	0859      	lsrs	r1, r3, #1
 800c988:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800c98c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800c990:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800c994:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800c998:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800c99c:	f002 3aaa 	and.w	sl, r2, #2863311530	; 0xaaaaaaaa
 800c9a0:	f003 3baa 	and.w	fp, r3, #2863311530	; 0xaaaaaaaa
 800c9a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	ea42 020a 	orr.w	r2, r2, sl
 800c9b4:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 800c9b8:	460a      	mov	r2, r1
 800c9ba:	ea42 020b 	orr.w	r2, r2, fp
 800c9be:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 800c9c2:	e9d7 128c 	ldrd	r1, r2, [r7, #560]	; 0x230
 800c9c6:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[2], q[3]);
 800c9ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c9d2:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
 800c9d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c9de:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
 800c9e2:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800c9e6:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800c9ea:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 800c9ee:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800c9f2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800c9f6:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800c9fa:	1891      	adds	r1, r2, r2
 800c9fc:	6139      	str	r1, [r7, #16]
 800c9fe:	415b      	adcs	r3, r3
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca06:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800ca0a:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800ca0e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ca12:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800ca16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca1a:	3310      	adds	r3, #16
 800ca1c:	e9d7 898a 	ldrd	r8, r9, [r7, #552]	; 0x228
 800ca20:	4642      	mov	r2, r8
 800ca22:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 800ca26:	4621      	mov	r1, r4
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 800ca2e:	464a      	mov	r2, r9
 800ca30:	4629      	mov	r1, r5
 800ca32:	430a      	orrs	r2, r1
 800ca34:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800ca38:	e9d7 1286 	ldrd	r1, r2, [r7, #536]	; 0x218
 800ca3c:	e9c3 1200 	strd	r1, r2, [r3]
 800ca40:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800ca44:	f04f 0000 	mov.w	r0, #0
 800ca48:	f04f 0100 	mov.w	r1, #0
 800ca4c:	0850      	lsrs	r0, r2, #1
 800ca4e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800ca52:	0859      	lsrs	r1, r3, #1
 800ca54:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800ca58:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800ca5c:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800ca60:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800ca64:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800ca68:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800ca6c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800ca70:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ca74:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800ca78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca7c:	3318      	adds	r3, #24
 800ca7e:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 800ca82:	4642      	mov	r2, r8
 800ca84:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 800ca88:	4621      	mov	r1, r4
 800ca8a:	430a      	orrs	r2, r1
 800ca8c:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 800ca90:	464a      	mov	r2, r9
 800ca92:	4629      	mov	r1, r5
 800ca94:	430a      	orrs	r2, r1
 800ca96:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 800ca9a:	e9d7 1280 	ldrd	r1, r2, [r7, #512]	; 0x200
 800ca9e:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[4], q[5]);
 800caa2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800caa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800caaa:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
 800caae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cab2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800cab6:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
 800caba:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800cabe:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800cac2:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 800cac6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800caca:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cace:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800cad2:	1891      	adds	r1, r2, r2
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	415b      	adcs	r3, r3
 800cad8:	60fb      	str	r3, [r7, #12]
 800cada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cade:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cae2:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800cae6:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800caea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800caee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800caf2:	3320      	adds	r3, #32
 800caf4:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 800caf8:	4642      	mov	r2, r8
 800cafa:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800cafe:	4621      	mov	r1, r4
 800cb00:	430a      	orrs	r2, r1
 800cb02:	f8c7 21e8 	str.w	r2, [r7, #488]	; 0x1e8
 800cb06:	464a      	mov	r2, r9
 800cb08:	4629      	mov	r1, r5
 800cb0a:	430a      	orrs	r2, r1
 800cb0c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800cb10:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 800cb14:	e9c3 1200 	strd	r1, r2, [r3]
 800cb18:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800cb1c:	f04f 0000 	mov.w	r0, #0
 800cb20:	f04f 0100 	mov.w	r1, #0
 800cb24:	0850      	lsrs	r0, r2, #1
 800cb26:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cb2a:	0859      	lsrs	r1, r3, #1
 800cb2c:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cb30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800cb34:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cb38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800cb3c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800cb40:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cb44:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 800cb48:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cb4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800cb50:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb54:	3328      	adds	r3, #40	; 0x28
 800cb56:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 800cb5a:	4642      	mov	r2, r8
 800cb5c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800cb60:	4621      	mov	r1, r4
 800cb62:	430a      	orrs	r2, r1
 800cb64:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
 800cb68:	464a      	mov	r2, r9
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 800cb72:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 800cb76:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[6], q[7]);
 800cb7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800cb82:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
 800cb86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cb8e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800cb92:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800cb96:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800cb9a:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800cb9e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800cba2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800cba6:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cbaa:	1891      	adds	r1, r2, r2
 800cbac:	6039      	str	r1, [r7, #0]
 800cbae:	415b      	adcs	r3, r3
 800cbb0:	607b      	str	r3, [r7, #4]
 800cbb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbb6:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cbba:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 800cbbe:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cbc2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800cbc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cbca:	3330      	adds	r3, #48	; 0x30
 800cbcc:	e9d7 8972 	ldrd	r8, r9, [r7, #456]	; 0x1c8
 800cbd0:	4642      	mov	r2, r8
 800cbd2:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	430a      	orrs	r2, r1
 800cbda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800cbde:	464a      	mov	r2, r9
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800cbe8:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	; 0x1b8
 800cbec:	e9c3 1200 	strd	r1, r2, [r3]
 800cbf0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800cbf4:	f04f 0000 	mov.w	r0, #0
 800cbf8:	f04f 0100 	mov.w	r1, #0
 800cbfc:	0850      	lsrs	r0, r2, #1
 800cbfe:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cc02:	0859      	lsrs	r1, r3, #1
 800cc04:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cc08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800cc0c:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cc10:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800cc14:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cc18:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cc1c:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 800cc20:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cc24:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800cc28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc2c:	3338      	adds	r3, #56	; 0x38
 800cc2e:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 800cc32:	4642      	mov	r2, r8
 800cc34:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800cc38:	4621      	mov	r1, r4
 800cc3a:	430a      	orrs	r2, r1
 800cc3c:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
 800cc40:	464a      	mov	r2, r9
 800cc42:	4629      	mov	r1, r5
 800cc44:	430a      	orrs	r2, r1
 800cc46:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800cc4a:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	; 0x1a0
 800cc4e:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP4(q[0], q[2]);
 800cc52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
 800cc5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cc66:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
 800cc6a:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800cc6e:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cc72:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800cc76:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cc7a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800cc7e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800cc82:	f04f 0000 	mov.w	r0, #0
 800cc86:	f04f 0100 	mov.w	r1, #0
 800cc8a:	0099      	lsls	r1, r3, #2
 800cc8c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cc90:	0090      	lsls	r0, r2, #2
 800cc92:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cc96:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800cc9a:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cc9e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800cca2:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800cca6:	4623      	mov	r3, r4
 800cca8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800ccac:	4602      	mov	r2, r0
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800ccb4:	462b      	mov	r3, r5
 800ccb6:	460a      	mov	r2, r1
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800ccbe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ccc2:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 800ccc6:	e9c3 1200 	strd	r1, r2, [r3]
 800ccca:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800ccce:	f04f 0000 	mov.w	r0, #0
 800ccd2:	f04f 0100 	mov.w	r1, #0
 800ccd6:	0890      	lsrs	r0, r2, #2
 800ccd8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ccdc:	0899      	lsrs	r1, r3, #2
 800ccde:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cce2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800cce6:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800ccea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800ccee:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800ccf2:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800ccf6:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800ccfa:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800ccfe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800cd02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd06:	3310      	adds	r3, #16
 800cd08:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 800cd0c:	4642      	mov	r2, r8
 800cd0e:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800cd12:	4621      	mov	r1, r4
 800cd14:	430a      	orrs	r2, r1
 800cd16:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800cd1a:	464a      	mov	r2, r9
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	430a      	orrs	r2, r1
 800cd20:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800cd24:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	; 0x170
 800cd28:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[1], q[3]);
 800cd2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cd34:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
 800cd38:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800cd40:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 800cd44:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800cd48:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cd4c:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800cd50:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cd54:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800cd58:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800cd5c:	f04f 0000 	mov.w	r0, #0
 800cd60:	f04f 0100 	mov.w	r1, #0
 800cd64:	0099      	lsls	r1, r3, #2
 800cd66:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cd6a:	0090      	lsls	r0, r2, #2
 800cd6c:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cd70:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800cd74:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cd78:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800cd7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd80:	3308      	adds	r3, #8
 800cd82:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 800cd86:	4642      	mov	r2, r8
 800cd88:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	430a      	orrs	r2, r1
 800cd90:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 800cd94:	464a      	mov	r2, r9
 800cd96:	4629      	mov	r1, r5
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800cd9e:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800cda2:	e9c3 1200 	strd	r1, r2, [r3]
 800cda6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800cdaa:	f04f 0000 	mov.w	r0, #0
 800cdae:	f04f 0100 	mov.w	r1, #0
 800cdb2:	0890      	lsrs	r0, r2, #2
 800cdb4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cdb8:	0899      	lsrs	r1, r3, #2
 800cdba:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cdbe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800cdc2:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cdc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800cdca:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800cdce:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800cdd2:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800cdd6:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800cdda:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800cdde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cde2:	3318      	adds	r3, #24
 800cde4:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 800cde8:	4642      	mov	r2, r8
 800cdea:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800cdee:	4621      	mov	r1, r4
 800cdf0:	430a      	orrs	r2, r1
 800cdf2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800cdf6:	464a      	mov	r2, r9
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	430a      	orrs	r2, r1
 800cdfc:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800ce00:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800ce04:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[4], q[6]);
 800ce08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce10:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 800ce14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce18:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800ce1c:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 800ce20:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800ce24:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800ce28:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800ce2c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800ce30:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800ce34:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800ce38:	f04f 0000 	mov.w	r0, #0
 800ce3c:	f04f 0100 	mov.w	r1, #0
 800ce40:	0099      	lsls	r1, r3, #2
 800ce42:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ce46:	0090      	lsls	r0, r2, #2
 800ce48:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800ce4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ce50:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800ce54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ce58:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce5c:	3320      	adds	r3, #32
 800ce5e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800ce62:	4642      	mov	r2, r8
 800ce64:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800ce68:	4621      	mov	r1, r4
 800ce6a:	430a      	orrs	r2, r1
 800ce6c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800ce70:	464a      	mov	r2, r9
 800ce72:	4629      	mov	r1, r5
 800ce74:	430a      	orrs	r2, r1
 800ce76:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800ce7a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800ce7e:	e9c3 1200 	strd	r1, r2, [r3]
 800ce82:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800ce86:	f04f 0000 	mov.w	r0, #0
 800ce8a:	f04f 0100 	mov.w	r1, #0
 800ce8e:	0890      	lsrs	r0, r2, #2
 800ce90:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ce94:	0899      	lsrs	r1, r3, #2
 800ce96:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800ce9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ce9e:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cea2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cea6:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800ceaa:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800ceae:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800ceb2:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800ceb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ceba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cebe:	3330      	adds	r3, #48	; 0x30
 800cec0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800cec4:	4642      	mov	r2, r8
 800cec6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800ceca:	4621      	mov	r1, r4
 800cecc:	430a      	orrs	r2, r1
 800cece:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800ced2:	464a      	mov	r2, r9
 800ced4:	4629      	mov	r1, r5
 800ced6:	430a      	orrs	r2, r1
 800ced8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800cedc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800cee0:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[5], q[7]);
 800cee4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cee8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ceec:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
 800cef0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cef4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cef8:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
 800cefc:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800cf00:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cf04:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800cf08:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cf0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cf10:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800cf14:	f04f 0000 	mov.w	r0, #0
 800cf18:	f04f 0100 	mov.w	r1, #0
 800cf1c:	0099      	lsls	r1, r3, #2
 800cf1e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cf22:	0090      	lsls	r0, r2, #2
 800cf24:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cf28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf2c:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cf30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cf34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf38:	3328      	adds	r3, #40	; 0x28
 800cf3a:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 800cf3e:	4642      	mov	r2, r8
 800cf40:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800cf44:	4621      	mov	r1, r4
 800cf46:	430a      	orrs	r2, r1
 800cf48:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800cf4c:	464a      	mov	r2, r9
 800cf4e:	4629      	mov	r1, r5
 800cf50:	430a      	orrs	r2, r1
 800cf52:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800cf56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cf5a:	e9c3 1200 	strd	r1, r2, [r3]
 800cf5e:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800cf62:	f04f 0000 	mov.w	r0, #0
 800cf66:	f04f 0100 	mov.w	r1, #0
 800cf6a:	0890      	lsrs	r0, r2, #2
 800cf6c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cf70:	0899      	lsrs	r1, r3, #2
 800cf72:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cf76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cf7a:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cf7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cf82:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800cf86:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800cf8a:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800cf8e:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800cf92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cf96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf9a:	3338      	adds	r3, #56	; 0x38
 800cf9c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800cfa0:	4642      	mov	r2, r8
 800cfa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	430a      	orrs	r2, r1
 800cfaa:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800cfae:	464a      	mov	r2, r9
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800cfb8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cfbc:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP8(q[0], q[4]);
 800cfc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc8:	e9c7 23a2 	strd	r2, r3, [r7, #648]	; 0x288
 800cfcc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cfd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfd4:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
 800cfd8:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800cfdc:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800cfe0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800cfe4:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800cfe8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cfec:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800cff0:	f04f 0000 	mov.w	r0, #0
 800cff4:	f04f 0100 	mov.w	r1, #0
 800cff8:	0119      	lsls	r1, r3, #4
 800cffa:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800cffe:	0110      	lsls	r0, r2, #4
 800d000:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d008:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d00c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d010:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d014:	4623      	mov	r3, r4
 800d016:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d01a:	4602      	mov	r2, r0
 800d01c:	4313      	orrs	r3, r2
 800d01e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d022:	462b      	mov	r3, r5
 800d024:	460a      	mov	r2, r1
 800d026:	4313      	orrs	r3, r2
 800d028:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d02c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d030:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d034:	e9c3 1200 	strd	r1, r2, [r3]
 800d038:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800d03c:	f04f 0000 	mov.w	r0, #0
 800d040:	f04f 0100 	mov.w	r1, #0
 800d044:	0910      	lsrs	r0, r2, #4
 800d046:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d04a:	0919      	lsrs	r1, r3, #4
 800d04c:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d054:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d05c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800d060:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d064:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800d068:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d06c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d070:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d074:	3320      	adds	r3, #32
 800d076:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800d07a:	4642      	mov	r2, r8
 800d07c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d080:	4621      	mov	r1, r4
 800d082:	430a      	orrs	r2, r1
 800d084:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d088:	464a      	mov	r2, r9
 800d08a:	4629      	mov	r1, r5
 800d08c:	430a      	orrs	r2, r1
 800d08e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d092:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d096:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[1], q[5]);
 800d09a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d09e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d0a2:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 800d0a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d0aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d0ae:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
 800d0b2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d0b6:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d0ba:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800d0be:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d0c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d0c6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d0ca:	f04f 0000 	mov.w	r0, #0
 800d0ce:	f04f 0100 	mov.w	r1, #0
 800d0d2:	0119      	lsls	r1, r3, #4
 800d0d4:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d0d8:	0110      	lsls	r0, r2, #4
 800d0da:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d0de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0e2:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d0e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d0ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800d0f4:	4642      	mov	r2, r8
 800d0f6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	430a      	orrs	r2, r1
 800d0fe:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800d102:	464a      	mov	r2, r9
 800d104:	4629      	mov	r1, r5
 800d106:	430a      	orrs	r2, r1
 800d108:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d10c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d110:	e9c3 1200 	strd	r1, r2, [r3]
 800d114:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d118:	f04f 0000 	mov.w	r0, #0
 800d11c:	f04f 0100 	mov.w	r1, #0
 800d120:	0910      	lsrs	r0, r2, #4
 800d122:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d126:	0919      	lsrs	r1, r3, #4
 800d128:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d12c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d130:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d138:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d13c:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d140:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d144:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d14c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d150:	3328      	adds	r3, #40	; 0x28
 800d152:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800d156:	4642      	mov	r2, r8
 800d158:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d15c:	4621      	mov	r1, r4
 800d15e:	430a      	orrs	r2, r1
 800d160:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d164:	464a      	mov	r2, r9
 800d166:	4629      	mov	r1, r5
 800d168:	430a      	orrs	r2, r1
 800d16a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d16e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d172:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[2], q[6]);
 800d176:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d17a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d17e:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
 800d182:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d186:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800d18a:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
 800d18e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d192:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d196:	67b9      	str	r1, [r7, #120]	; 0x78
 800d198:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d19c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d19e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d1a2:	f04f 0000 	mov.w	r0, #0
 800d1a6:	f04f 0100 	mov.w	r1, #0
 800d1aa:	0119      	lsls	r1, r3, #4
 800d1ac:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d1b0:	0110      	lsls	r0, r2, #4
 800d1b2:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d1b6:	673b      	str	r3, [r7, #112]	; 0x70
 800d1b8:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d1bc:	677b      	str	r3, [r7, #116]	; 0x74
 800d1be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d1c2:	3310      	adds	r3, #16
 800d1c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1c8:	4642      	mov	r2, r8
 800d1ca:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	66ba      	str	r2, [r7, #104]	; 0x68
 800d1d4:	464a      	mov	r2, r9
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	430a      	orrs	r2, r1
 800d1da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d1dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d1e0:	e9c3 1200 	strd	r1, r2, [r3]
 800d1e4:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d1e8:	f04f 0000 	mov.w	r0, #0
 800d1ec:	f04f 0100 	mov.w	r1, #0
 800d1f0:	0910      	lsrs	r0, r2, #4
 800d1f2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d1f6:	0919      	lsrs	r1, r3, #4
 800d1f8:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d1fc:	663b      	str	r3, [r7, #96]	; 0x60
 800d1fe:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d202:	667b      	str	r3, [r7, #100]	; 0x64
 800d204:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d208:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d20c:	65b9      	str	r1, [r7, #88]	; 0x58
 800d20e:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d212:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d214:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d218:	3330      	adds	r3, #48	; 0x30
 800d21a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d21e:	4642      	mov	r2, r8
 800d220:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d224:	4621      	mov	r1, r4
 800d226:	430a      	orrs	r2, r1
 800d228:	653a      	str	r2, [r7, #80]	; 0x50
 800d22a:	464a      	mov	r2, r9
 800d22c:	4629      	mov	r1, r5
 800d22e:	430a      	orrs	r2, r1
 800d230:	657a      	str	r2, [r7, #84]	; 0x54
 800d232:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d236:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[3], q[7]);
 800d23a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d23e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d242:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800d246:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d24a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d24e:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 800d252:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800d256:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d25a:	64b9      	str	r1, [r7, #72]	; 0x48
 800d25c:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d260:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d262:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d266:	f04f 0000 	mov.w	r0, #0
 800d26a:	f04f 0100 	mov.w	r1, #0
 800d26e:	0119      	lsls	r1, r3, #4
 800d270:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d274:	0110      	lsls	r0, r2, #4
 800d276:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d27a:	643b      	str	r3, [r7, #64]	; 0x40
 800d27c:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d280:	647b      	str	r3, [r7, #68]	; 0x44
 800d282:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d286:	3318      	adds	r3, #24
 800d288:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800d28c:	4642      	mov	r2, r8
 800d28e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d292:	4621      	mov	r1, r4
 800d294:	430a      	orrs	r2, r1
 800d296:	63ba      	str	r2, [r7, #56]	; 0x38
 800d298:	464a      	mov	r2, r9
 800d29a:	4629      	mov	r1, r5
 800d29c:	430a      	orrs	r2, r1
 800d29e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d2a4:	e9c3 1200 	strd	r1, r2, [r3]
 800d2a8:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	f04f 0300 	mov.w	r3, #0
 800d2b4:	0902      	lsrs	r2, r0, #4
 800d2b6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d2ba:	090b      	lsrs	r3, r1, #4
 800d2bc:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d2c0:	6339      	str	r1, [r7, #48]	; 0x30
 800d2c2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d2c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c8:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d2cc:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d2d0:	62b9      	str	r1, [r7, #40]	; 0x28
 800d2d2:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d2dc:	3338      	adds	r3, #56	; 0x38
 800d2de:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d2e2:	4642      	mov	r2, r8
 800d2e4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	623a      	str	r2, [r7, #32]
 800d2ee:	464a      	mov	r2, r9
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	627a      	str	r2, [r7, #36]	; 0x24
 800d2f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d2fa:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d2fe:	bf00      	nop
 800d300:	f507 7745 	add.w	r7, r7, #788	; 0x314
 800d304:	46bd      	mov	sp, r7
 800d306:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d30a:	4770      	bx	lr

0800d30c <br_aes_ct64_interleave_in>:

static void br_aes_ct64_interleave_in(uint64_t *q0, uint64_t *q1, const uint32_t *w)
{
 800d30c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d310:	b0bb      	sub	sp, #236	; 0xec
 800d312:	af00      	add	r7, sp, #0
 800d314:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d318:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d31c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
	uint64_t x0, x1, x2, x3;

	x0 = w[0];
 800d320:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2200      	movs	r2, #0
 800d328:	469a      	mov	sl, r3
 800d32a:	4693      	mov	fp, r2
 800d32c:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
	x1 = w[1];
 800d330:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d334:	3304      	adds	r3, #4
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2200      	movs	r2, #0
 800d33a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d33e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d342:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d346:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	x2 = w[2];
 800d34a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d34e:	3308      	adds	r3, #8
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2200      	movs	r2, #0
 800d354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d358:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d35c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d360:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	x3 = w[3];
 800d364:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d368:	330c      	adds	r3, #12
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d372:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d376:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d37a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	x0 |= (x0 << 16);
 800d37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d382:	0c1d      	lsrs	r5, r3, #16
 800d384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d388:	041c      	lsls	r4, r3, #16
 800d38a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d38e:	ea42 0104 	orr.w	r1, r2, r4
 800d392:	67b9      	str	r1, [r7, #120]	; 0x78
 800d394:	432b      	orrs	r3, r5
 800d396:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d398:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d39c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 16);
 800d3a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d3a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800d3a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d3ac:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800d3b0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d3b4:	ea42 0108 	orr.w	r1, r2, r8
 800d3b8:	6739      	str	r1, [r7, #112]	; 0x70
 800d3ba:	ea43 0309 	orr.w	r3, r3, r9
 800d3be:	677b      	str	r3, [r7, #116]	; 0x74
 800d3c0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d3c4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 16);
 800d3c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d3cc:	0c1b      	lsrs	r3, r3, #16
 800d3ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d3d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d3d6:	041b      	lsls	r3, r3, #16
 800d3d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d3dc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d3e0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4311      	orrs	r1, r2
 800d3e8:	66b9      	str	r1, [r7, #104]	; 0x68
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	4319      	orrs	r1, r3
 800d3ee:	66f9      	str	r1, [r7, #108]	; 0x6c
 800d3f0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d3f4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 16);
 800d3f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d3fc:	0c1b      	lsrs	r3, r3, #16
 800d3fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d406:	041b      	lsls	r3, r3, #16
 800d408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d40c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d410:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d414:	4621      	mov	r1, r4
 800d416:	4311      	orrs	r1, r2
 800d418:	6639      	str	r1, [r7, #96]	; 0x60
 800d41a:	4629      	mov	r1, r5
 800d41c:	4319      	orrs	r1, r3
 800d41e:	6679      	str	r1, [r7, #100]	; 0x64
 800d420:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d424:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800d428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d42c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d434:	ea00 0402 	and.w	r4, r0, r2
 800d438:	65bc      	str	r4, [r7, #88]	; 0x58
 800d43a:	400b      	ands	r3, r1
 800d43c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d43e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d442:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800d446:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d44a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d44e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d452:	ea00 0402 	and.w	r4, r0, r2
 800d456:	653c      	str	r4, [r7, #80]	; 0x50
 800d458:	400b      	ands	r3, r1
 800d45a:	657b      	str	r3, [r7, #84]	; 0x54
 800d45c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d460:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800d464:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d46c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d470:	ea00 0402 	and.w	r4, r0, r2
 800d474:	64bc      	str	r4, [r7, #72]	; 0x48
 800d476:	400b      	ands	r3, r1
 800d478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d47a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d47e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800d482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d48a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d48e:	ea00 0402 	and.w	r4, r0, r2
 800d492:	643c      	str	r4, [r7, #64]	; 0x40
 800d494:	400b      	ands	r3, r1
 800d496:	647b      	str	r3, [r7, #68]	; 0x44
 800d498:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d49c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 |= (x0 << 8);
 800d4a0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d4a4:	f04f 0000 	mov.w	r0, #0
 800d4a8:	f04f 0100 	mov.w	r1, #0
 800d4ac:	0219      	lsls	r1, r3, #8
 800d4ae:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d4b2:	0210      	lsls	r0, r2, #8
 800d4b4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d4b8:	ea42 0400 	orr.w	r4, r2, r0
 800d4bc:	63bc      	str	r4, [r7, #56]	; 0x38
 800d4be:	430b      	orrs	r3, r1
 800d4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4c2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d4c6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 8);
 800d4ca:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d4ce:	f04f 0000 	mov.w	r0, #0
 800d4d2:	f04f 0100 	mov.w	r1, #0
 800d4d6:	0219      	lsls	r1, r3, #8
 800d4d8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d4dc:	0210      	lsls	r0, r2, #8
 800d4de:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d4e2:	ea42 0400 	orr.w	r4, r2, r0
 800d4e6:	633c      	str	r4, [r7, #48]	; 0x30
 800d4e8:	430b      	orrs	r3, r1
 800d4ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d4f0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 8);
 800d4f4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d4f8:	f04f 0000 	mov.w	r0, #0
 800d4fc:	f04f 0100 	mov.w	r1, #0
 800d500:	0219      	lsls	r1, r3, #8
 800d502:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d506:	0210      	lsls	r0, r2, #8
 800d508:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d50c:	ea42 0400 	orr.w	r4, r2, r0
 800d510:	62bc      	str	r4, [r7, #40]	; 0x28
 800d512:	430b      	orrs	r3, r1
 800d514:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d516:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d51a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 8);
 800d51e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d522:	f04f 0000 	mov.w	r0, #0
 800d526:	f04f 0100 	mov.w	r1, #0
 800d52a:	0219      	lsls	r1, r3, #8
 800d52c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d530:	0210      	lsls	r0, r2, #8
 800d532:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d536:	ea42 0400 	orr.w	r4, r2, r0
 800d53a:	623c      	str	r4, [r7, #32]
 800d53c:	430b      	orrs	r3, r1
 800d53e:	627b      	str	r3, [r7, #36]	; 0x24
 800d540:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d544:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x00FF00FF00FF00FF;
 800d548:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d54c:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d550:	61b9      	str	r1, [r7, #24]
 800d552:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d556:	61fb      	str	r3, [r7, #28]
 800d558:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d55c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x00FF00FF00FF00FF;
 800d560:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d564:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d568:	6139      	str	r1, [r7, #16]
 800d56a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d56e:	617b      	str	r3, [r7, #20]
 800d570:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d574:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x00FF00FF00FF00FF;
 800d578:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d57c:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d58c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x00FF00FF00FF00FF;
 800d590:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d594:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d598:	6039      	str	r1, [r7, #0]
 800d59a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d59e:	607b      	str	r3, [r7, #4]
 800d5a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d5a4:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	*q0 = x0 | (x2 << 8);
 800d5a8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d5ac:	f04f 0200 	mov.w	r2, #0
 800d5b0:	f04f 0300 	mov.w	r3, #0
 800d5b4:	020b      	lsls	r3, r1, #8
 800d5b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d5ba:	0202      	lsls	r2, r0, #8
 800d5bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d5c0:	ea42 0400 	orr.w	r4, r2, r0
 800d5c4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800d5c8:	430b      	orrs	r3, r1
 800d5ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d5ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d5d2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d5d6:	e9c3 1200 	strd	r1, r2, [r3]
	*q1 = x1 | (x3 << 8);
 800d5da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d5de:	f04f 0200 	mov.w	r2, #0
 800d5e2:	f04f 0300 	mov.w	r3, #0
 800d5e6:	020b      	lsls	r3, r1, #8
 800d5e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d5ec:	0202      	lsls	r2, r0, #8
 800d5ee:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d5f2:	ea42 0400 	orr.w	r4, r2, r0
 800d5f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800d5fa:	430b      	orrs	r3, r1
 800d5fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d604:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d608:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d60c:	bf00      	nop
 800d60e:	37ec      	adds	r7, #236	; 0xec
 800d610:	46bd      	mov	sp, r7
 800d612:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d616:	4770      	bx	lr

0800d618 <br_aes_ct64_interleave_out>:

static void br_aes_ct64_interleave_out(uint32_t *w, uint64_t q0, uint64_t q1)
{
 800d618:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d61c:	b09f      	sub	sp, #124	; 0x7c
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6578      	str	r0, [r7, #84]	; 0x54
 800d622:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint64_t x0, x1, x2, x3;

	x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 800d626:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d62a:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 800d62e:	f003 15ff 	and.w	r5, r3, #16711935	; 0xff00ff
 800d632:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
	x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 800d636:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d63a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 800d63e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 800d642:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d646:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d64a:	f04f 0000 	mov.w	r0, #0
 800d64e:	f04f 0100 	mov.w	r1, #0
 800d652:	0a10      	lsrs	r0, r2, #8
 800d654:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d658:	0a19      	lsrs	r1, r3, #8
 800d65a:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 800d65e:	f001 1bff 	and.w	fp, r1, #16711935	; 0xff00ff
 800d662:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d666:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d66a:	f04f 0000 	mov.w	r0, #0
 800d66e:	f04f 0100 	mov.w	r1, #0
 800d672:	0a10      	lsrs	r0, r2, #8
 800d674:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d678:	0a19      	lsrs	r1, r3, #8
 800d67a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 800d67e:	643b      	str	r3, [r7, #64]	; 0x40
 800d680:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800d684:	647b      	str	r3, [r7, #68]	; 0x44
 800d686:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d68a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 |= (x0 >> 8);
 800d68e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f04f 0100 	mov.w	r1, #0
 800d69a:	0a10      	lsrs	r0, r2, #8
 800d69c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d6a0:	0a19      	lsrs	r1, r3, #8
 800d6a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d6a6:	ea42 0400 	orr.w	r4, r2, r0
 800d6aa:	63bc      	str	r4, [r7, #56]	; 0x38
 800d6ac:	430b      	orrs	r3, r1
 800d6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d6b4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 |= (x1 >> 8);
 800d6b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d6bc:	f04f 0000 	mov.w	r0, #0
 800d6c0:	f04f 0100 	mov.w	r1, #0
 800d6c4:	0a10      	lsrs	r0, r2, #8
 800d6c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d6ca:	0a19      	lsrs	r1, r3, #8
 800d6cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d6d0:	ea42 0400 	orr.w	r4, r2, r0
 800d6d4:	633c      	str	r4, [r7, #48]	; 0x30
 800d6d6:	430b      	orrs	r3, r1
 800d6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d6da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d6de:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 |= (x2 >> 8);
 800d6e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d6e6:	f04f 0000 	mov.w	r0, #0
 800d6ea:	f04f 0100 	mov.w	r1, #0
 800d6ee:	0a10      	lsrs	r0, r2, #8
 800d6f0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d6f4:	0a19      	lsrs	r1, r3, #8
 800d6f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d6fa:	ea42 0400 	orr.w	r4, r2, r0
 800d6fe:	62bc      	str	r4, [r7, #40]	; 0x28
 800d700:	430b      	orrs	r3, r1
 800d702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d704:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d708:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 |= (x3 >> 8);
 800d70c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d710:	f04f 0000 	mov.w	r0, #0
 800d714:	f04f 0100 	mov.w	r1, #0
 800d718:	0a10      	lsrs	r0, r2, #8
 800d71a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d71e:	0a19      	lsrs	r1, r3, #8
 800d720:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d724:	ea42 0400 	orr.w	r4, r2, r0
 800d728:	623c      	str	r4, [r7, #32]
 800d72a:	430b      	orrs	r3, r1
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
 800d72e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d732:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800d736:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d73a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d73e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d742:	ea02 0400 	and.w	r4, r2, r0
 800d746:	61bc      	str	r4, [r7, #24]
 800d748:	400b      	ands	r3, r1
 800d74a:	61fb      	str	r3, [r7, #28]
 800d74c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d750:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800d754:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d758:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d75c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d760:	ea02 0400 	and.w	r4, r2, r0
 800d764:	613c      	str	r4, [r7, #16]
 800d766:	400b      	ands	r3, r1
 800d768:	617b      	str	r3, [r7, #20]
 800d76a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d76e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800d772:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d776:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d77a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d77e:	ea02 0400 	and.w	r4, r2, r0
 800d782:	60bc      	str	r4, [r7, #8]
 800d784:	400b      	ands	r3, r1
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d78c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800d790:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d794:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d798:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d79c:	ea02 0400 	and.w	r4, r2, r0
 800d7a0:	603c      	str	r4, [r7, #0]
 800d7a2:	400b      	ands	r3, r1
 800d7a4:	607b      	str	r3, [r7, #4]
 800d7a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d7aa:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 800d7ae:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800d7b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	f04f 0300 	mov.w	r3, #0
 800d7bc:	0c02      	lsrs	r2, r0, #16
 800d7be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d7c2:	0c0b      	lsrs	r3, r1, #16
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	ea44 0203 	orr.w	r2, r4, r3
 800d7ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7cc:	601a      	str	r2, [r3, #0]
	w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 800d7ce:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800d7d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	f04f 0300 	mov.w	r3, #0
 800d7dc:	0c02      	lsrs	r2, r0, #16
 800d7de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d7e2:	0c0b      	lsrs	r3, r1, #16
 800d7e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	4322      	orrs	r2, r4
 800d7ea:	601a      	str	r2, [r3, #0]
	w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 800d7ec:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800d7ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d7f2:	f04f 0200 	mov.w	r2, #0
 800d7f6:	f04f 0300 	mov.w	r3, #0
 800d7fa:	0c02      	lsrs	r2, r0, #16
 800d7fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d800:	0c0b      	lsrs	r3, r1, #16
 800d802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d804:	3308      	adds	r3, #8
 800d806:	4322      	orrs	r2, r4
 800d808:	601a      	str	r2, [r3, #0]
	w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 800d80a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800d80c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d810:	f04f 0200 	mov.w	r2, #0
 800d814:	f04f 0300 	mov.w	r3, #0
 800d818:	0c02      	lsrs	r2, r0, #16
 800d81a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d81e:	0c0b      	lsrs	r3, r1, #16
 800d820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d822:	330c      	adds	r3, #12
 800d824:	4322      	orrs	r2, r4
 800d826:	601a      	str	r2, [r3, #0]
}
 800d828:	bf00      	nop
 800d82a:	377c      	adds	r7, #124	; 0x7c
 800d82c:	46bd      	mov	sp, r7
 800d82e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d832:	4770      	bx	lr

0800d834 <sub_word>:
static const uint8_t Rcon[] = {
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

static uint32_t sub_word(uint32_t x)
{
 800d834:	b5b0      	push	{r4, r5, r7, lr}
 800d836:	b092      	sub	sp, #72	; 0x48
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
	uint64_t q[8];

	memset(q, 0, sizeof q);
 800d83c:	f107 0308 	add.w	r3, r7, #8
 800d840:	2240      	movs	r2, #64	; 0x40
 800d842:	2100      	movs	r1, #0
 800d844:	4618      	mov	r0, r3
 800d846:	f008 f8d1 	bl	80159ec <memset>
	q[0] = x;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	461c      	mov	r4, r3
 800d850:	4615      	mov	r5, r2
 800d852:	e9c7 4502 	strd	r4, r5, [r7, #8]
	br_aes_ct64_ortho(q);
 800d856:	f107 0308 	add.w	r3, r7, #8
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff f857 	bl	800c90e <br_aes_ct64_ortho>
	br_aes_ct64_bitslice_Sbox(q);
 800d860:	f107 0308 	add.w	r3, r7, #8
 800d864:	4618      	mov	r0, r3
 800d866:	f7fd fe4d 	bl	800b504 <br_aes_ct64_bitslice_Sbox>
	br_aes_ct64_ortho(q);
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff f84d 	bl	800c90e <br_aes_ct64_ortho>
	return (uint32_t)q[0];
 800d874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d878:	4613      	mov	r3, r2
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3748      	adds	r7, #72	; 0x48
 800d87e:	46bd      	mov	sp, r7
 800d880:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d884 <br_aes_ct64_keysched>:

static void br_aes_ct64_keysched(uint64_t *comp_skey, const uint8_t *key)
{
 800d884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d888:	b0ec      	sub	sp, #432	; 0x1b0
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d890:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d894:	6018      	str	r0, [r3, #0]
 800d896:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d89a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d89e:	6019      	str	r1, [r3, #0]
	int i, j, k, nk, nkf;
	uint32_t tmp;
	uint32_t skey[60];

	int key_len = 32;
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	nk = (int)(key_len >> 2);
 800d8a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8aa:	109b      	asrs	r3, r3, #2
 800d8ac:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	nkf = (int)((14 + 1) << 2);
 800d8b0:	233c      	movs	r3, #60	; 0x3c
 800d8b2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	br_range_dec32le(skey, (key_len >> 2), key);
 800d8b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8ba:	109b      	asrs	r3, r3, #2
 800d8bc:	4619      	mov	r1, r3
 800d8be:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d8c2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d8c6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	f7fd fdaa 	bl	800b424 <br_range_dec32le>
	tmp = skey[(key_len >> 2) - 1];
 800d8d0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8d4:	109b      	asrs	r3, r3, #2
 800d8d6:	1e5a      	subs	r2, r3, #1
 800d8d8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d8dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800d8e8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d8ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800d8fc:	e057      	b.n	800d9ae <br_aes_ct64_keysched+0x12a>
		if (j == 0) {
 800d8fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d902:	2b00      	cmp	r3, #0
 800d904:	d113      	bne.n	800d92e <br_aes_ct64_keysched+0xaa>
			tmp = (tmp << 24) | (tmp >> 8);
 800d906:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d90a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d90e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			tmp = sub_word(tmp) ^ Rcon[k];
 800d912:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800d916:	f7ff ff8d 	bl	800d834 <sub_word>
 800d91a:	4601      	mov	r1, r0
 800d91c:	4aba      	ldr	r2, [pc, #744]	; (800dc08 <br_aes_ct64_keysched+0x384>)
 800d91e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d922:	4413      	add	r3, r2
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	404b      	eors	r3, r1
 800d928:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800d92c:	e00d      	b.n	800d94a <br_aes_ct64_keysched+0xc6>
		} else if (nk > 6 && j == 4) {
 800d92e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d932:	2b06      	cmp	r3, #6
 800d934:	dd09      	ble.n	800d94a <br_aes_ct64_keysched+0xc6>
 800d936:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d93a:	2b04      	cmp	r3, #4
 800d93c:	d105      	bne.n	800d94a <br_aes_ct64_keysched+0xc6>
			tmp = sub_word(tmp);
 800d93e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800d942:	f7ff ff77 	bl	800d834 <sub_word>
 800d946:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		}
		tmp ^= skey[i - nk];
 800d94a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d94e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d952:	1ad2      	subs	r2, r2, r3
 800d954:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d95c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d960:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d964:	4053      	eors	r3, r2
 800d966:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		skey[i] = tmp;
 800d96a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d96e:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 800d972:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d976:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d97a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		if (++ j == nk) {
 800d97e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d982:	3301      	adds	r3, #1
 800d984:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800d988:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d98c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d990:	429a      	cmp	r2, r3
 800d992:	d107      	bne.n	800d9a4 <br_aes_ct64_keysched+0x120>
			j = 0;
 800d994:	2300      	movs	r3, #0
 800d996:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			k ++;
 800d99a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d99e:	3301      	adds	r3, #1
 800d9a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800d9a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d9ae:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d9b2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	dba1      	blt.n	800d8fe <br_aes_ct64_keysched+0x7a>
		}
	}

	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800d9c6:	e110      	b.n	800dbea <br_aes_ct64_keysched+0x366>
		uint64_t q[8];

		br_aes_ct64_interleave_in(&q[0], &q[4], skey + i);
 800d9c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9cc:	009a      	lsls	r2, r3, #2
 800d9ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d9d2:	441a      	add	r2, r3
 800d9d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d9d8:	f103 0120 	add.w	r1, r3, #32
 800d9dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7ff fc93 	bl	800d30c <br_aes_ct64_interleave_in>
		q[1] = q[0];
 800d9e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9ea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d9ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9f2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9f6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d9fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
		q[2] = q[0];
 800d9fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da02:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da0a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da0e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da12:	e9c3 0104 	strd	r0, r1, [r3, #16]
		q[3] = q[0];
 800da16:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da26:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da2a:	e9c3 0106 	strd	r0, r1, [r3, #24]
		q[5] = q[4];
 800da2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da32:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da36:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800da3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da42:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
		q[6] = q[4];
 800da46:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da4e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800da52:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da56:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da5a:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
		q[7] = q[4];
 800da5e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da62:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da66:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800da6a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da6e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da72:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
		br_aes_ct64_ortho(q);
 800da76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe ff47 	bl	800c90e <br_aes_ct64_ortho>
		comp_skey[j + 0] =
			  (q[0] & (uint64_t)0x1111111111111111)
 800da80:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8c:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800da90:	6539      	str	r1, [r7, #80]	; 0x50
 800da92:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800da96:	657b      	str	r3, [r7, #84]	; 0x54
			| (q[1] & (uint64_t)0x2222222222222222)
 800da98:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800daa0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800daa4:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800daa8:	62b9      	str	r1, [r7, #40]	; 0x28
 800daaa:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800daae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dab6:	4602      	mov	r2, r0
 800dab8:	4313      	orrs	r3, r2
 800daba:	64bb      	str	r3, [r7, #72]	; 0x48
 800dabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dabe:	460a      	mov	r2, r1
 800dac0:	4313      	orrs	r3, r2
 800dac2:	64fb      	str	r3, [r7, #76]	; 0x4c
			| (q[2] & (uint64_t)0x4444444444444444)
 800dac4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dac8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dacc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dad0:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800dad4:	6239      	str	r1, [r7, #32]
 800dad6:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800dada:	627b      	str	r3, [r7, #36]	; 0x24
 800dadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dae2:	4602      	mov	r2, r0
 800dae4:	4313      	orrs	r3, r2
 800dae6:	643b      	str	r3, [r7, #64]	; 0x40
 800dae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daea:	460a      	mov	r2, r1
 800daec:	4313      	orrs	r3, r2
 800daee:	647b      	str	r3, [r7, #68]	; 0x44
			| (q[3] & (uint64_t)0x8888888888888888);
 800daf0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daf4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800daf8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800dafc:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800db00:	63b9      	str	r1, [r7, #56]	; 0x38
 800db02:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800db06:	63fb      	str	r3, [r7, #60]	; 0x3c
		comp_skey[j + 0] =
 800db08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800db0c:	00da      	lsls	r2, r3, #3
 800db0e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4413      	add	r3, r2
			| (q[3] & (uint64_t)0x8888888888888888);
 800db1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db1e:	430a      	orrs	r2, r1
 800db20:	61ba      	str	r2, [r7, #24]
 800db22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db26:	430a      	orrs	r2, r1
 800db28:	61fa      	str	r2, [r7, #28]
		comp_skey[j + 0] =
 800db2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800db2e:	e9c3 1200 	strd	r1, r2, [r3]
		comp_skey[j + 1] =
			  (q[4] & (uint64_t)0x1111111111111111)
 800db32:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db36:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db3e:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800db42:	6339      	str	r1, [r7, #48]	; 0x30
 800db44:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800db48:	637b      	str	r3, [r7, #52]	; 0x34
			| (q[5] & (uint64_t)0x2222222222222222)
 800db4a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db4e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db52:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800db56:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800db5a:	6139      	str	r1, [r7, #16]
 800db5c:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800db60:	617b      	str	r3, [r7, #20]
 800db62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800db68:	4602      	mov	r2, r0
 800db6a:	4313      	orrs	r3, r2
 800db6c:	60bb      	str	r3, [r7, #8]
 800db6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db70:	460a      	mov	r2, r1
 800db72:	4313      	orrs	r3, r2
 800db74:	60fb      	str	r3, [r7, #12]
			| (q[6] & (uint64_t)0x4444444444444444)
 800db76:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db7a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800db82:	f002 3a44 	and.w	sl, r2, #1145324612	; 0x44444444
 800db86:	f003 3b44 	and.w	fp, r3, #1145324612	; 0x44444444
 800db8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800db8e:	460b      	mov	r3, r1
 800db90:	ea43 080a 	orr.w	r8, r3, sl
 800db94:	4613      	mov	r3, r2
 800db96:	ea43 090b 	orr.w	r9, r3, fp
			| (q[7] & (uint64_t)0x8888888888888888);
 800db9a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db9e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dba2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dba6:	f002 3488 	and.w	r4, r2, #2290649224	; 0x88888888
 800dbaa:	f003 3588 	and.w	r5, r3, #2290649224	; 0x88888888
		comp_skey[j + 1] =
 800dbae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	00da      	lsls	r2, r3, #3
 800dbb6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4413      	add	r3, r2
			| (q[7] & (uint64_t)0x8888888888888888);
 800dbc2:	ea48 0204 	orr.w	r2, r8, r4
 800dbc6:	603a      	str	r2, [r7, #0]
 800dbc8:	ea49 0205 	orr.w	r2, r9, r5
 800dbcc:	607a      	str	r2, [r7, #4]
		comp_skey[j + 1] =
 800dbce:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dbd2:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800dbd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbda:	3304      	adds	r3, #4
 800dbdc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800dbe0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dbe4:	3302      	adds	r3, #2
 800dbe6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800dbea:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dbee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	f6ff aee8 	blt.w	800d9c8 <br_aes_ct64_keysched+0x144>
	}
}
 800dbf8:	bf00      	nop
 800dbfa:	bf00      	nop
 800dbfc:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800dc00:	46bd      	mov	sp, r7
 800dc02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc06:	bf00      	nop
 800dc08:	08016538 	.word	0x08016538

0800dc0c <br_aes_ct64_skey_expand>:

static void br_aes_ct64_skey_expand(uint64_t *skey, const uint64_t *comp_skey)
{
 800dc0c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dc10:	b098      	sub	sp, #96	; 0x60
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dc16:	62b9      	str	r1, [r7, #40]	; 0x28
	unsigned u, v, n;

	n = (14 + 1) << 1;
 800dc18:	231e      	movs	r3, #30
 800dc1a:	657b      	str	r3, [r7, #84]	; 0x54
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc20:	2300      	movs	r3, #0
 800dc22:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc24:	e0cb      	b.n	800ddbe <br_aes_ct64_skey_expand+0x1b2>
		uint64_t x0, x1, x2, x3;

		x0 = x1 = x2 = x3 = comp_skey[u];
 800dc26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc28:	00da      	lsls	r2, r3, #3
 800dc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2c:	4413      	add	r3, r2
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800dc36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800dc3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800dc46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dc4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		x0 &= (uint64_t)0x1111111111111111;
 800dc4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dc52:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800dc56:	61b9      	str	r1, [r7, #24]
 800dc58:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800dc5c:	61fb      	str	r3, [r7, #28]
 800dc5e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dc62:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		x1 &= (uint64_t)0x2222222222222222;
 800dc66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dc6a:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800dc6e:	6139      	str	r1, [r7, #16]
 800dc70:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dc7a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		x2 &= (uint64_t)0x4444444444444444;
 800dc7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc82:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800dc8c:	60fb      	str	r3, [r7, #12]
 800dc8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dc92:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		x3 &= (uint64_t)0x8888888888888888;
 800dc96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc9a:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800dc9e:	6039      	str	r1, [r7, #0]
 800dca0:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800dca4:	607b      	str	r3, [r7, #4]
 800dca6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dcaa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		x1 >>= 1;
 800dcae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dcb2:	f04f 0000 	mov.w	r0, #0
 800dcb6:	f04f 0100 	mov.w	r1, #0
 800dcba:	0850      	lsrs	r0, r2, #1
 800dcbc:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800dcc0:	0859      	lsrs	r1, r3, #1
 800dcc2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
		x2 >>= 2;
 800dcc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dcca:	f04f 0000 	mov.w	r0, #0
 800dcce:	f04f 0100 	mov.w	r1, #0
 800dcd2:	0890      	lsrs	r0, r2, #2
 800dcd4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800dcd8:	0899      	lsrs	r1, r3, #2
 800dcda:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
		x3 >>= 3;
 800dcde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dce2:	f04f 0000 	mov.w	r0, #0
 800dce6:	f04f 0100 	mov.w	r1, #0
 800dcea:	08d0      	lsrs	r0, r2, #3
 800dcec:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800dcf0:	08d9      	lsrs	r1, r3, #3
 800dcf2:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		skey[v + 0] = (x0 << 4) - x0;
 800dcf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dcfa:	f04f 0000 	mov.w	r0, #0
 800dcfe:	f04f 0100 	mov.w	r1, #0
 800dd02:	0119      	lsls	r1, r3, #4
 800dd04:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dd08:	0110      	lsls	r0, r2, #4
 800dd0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd0c:	00da      	lsls	r2, r3, #3
 800dd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd10:	eb03 0c02 	add.w	ip, r3, r2
 800dd14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dd18:	1a84      	subs	r4, r0, r2
 800dd1a:	623c      	str	r4, [r7, #32]
 800dd1c:	eb61 0303 	sbc.w	r3, r1, r3
 800dd20:	627b      	str	r3, [r7, #36]	; 0x24
 800dd22:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dd26:	e9cc 3400 	strd	r3, r4, [ip]
		skey[v + 1] = (x1 << 4) - x1;
 800dd2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd2e:	f04f 0000 	mov.w	r0, #0
 800dd32:	f04f 0100 	mov.w	r1, #0
 800dd36:	0119      	lsls	r1, r3, #4
 800dd38:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dd3c:	0110      	lsls	r0, r2, #4
 800dd3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd40:	3301      	adds	r3, #1
 800dd42:	00da      	lsls	r2, r3, #3
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	189c      	adds	r4, r3, r2
 800dd48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd4c:	1a85      	subs	r5, r0, r2
 800dd4e:	eb61 0603 	sbc.w	r6, r1, r3
 800dd52:	e9c4 5600 	strd	r5, r6, [r4]
		skey[v + 2] = (x2 << 4) - x2;
 800dd56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd5a:	f04f 0000 	mov.w	r0, #0
 800dd5e:	f04f 0100 	mov.w	r1, #0
 800dd62:	0119      	lsls	r1, r3, #4
 800dd64:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dd68:	0110      	lsls	r0, r2, #4
 800dd6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd6c:	3302      	adds	r3, #2
 800dd6e:	00da      	lsls	r2, r3, #3
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	189c      	adds	r4, r3, r2
 800dd74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd78:	ebb0 0a02 	subs.w	sl, r0, r2
 800dd7c:	eb61 0b03 	sbc.w	fp, r1, r3
 800dd80:	e9c4 ab00 	strd	sl, fp, [r4]
		skey[v + 3] = (x3 << 4) - x3;
 800dd84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd88:	f04f 0000 	mov.w	r0, #0
 800dd8c:	f04f 0100 	mov.w	r1, #0
 800dd90:	0119      	lsls	r1, r3, #4
 800dd92:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dd96:	0110      	lsls	r0, r2, #4
 800dd98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd9a:	3303      	adds	r3, #3
 800dd9c:	00da      	lsls	r2, r3, #3
 800dd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda0:	189c      	adds	r4, r3, r2
 800dda2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dda6:	ebb0 0802 	subs.w	r8, r0, r2
 800ddaa:	eb61 0903 	sbc.w	r9, r1, r3
 800ddae:	e9c4 8900 	strd	r8, r9, [r4]
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800ddb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddba:	3304      	adds	r3, #4
 800ddbc:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ddc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	f4ff af2f 	bcc.w	800dc26 <br_aes_ct64_skey_expand+0x1a>
	}
}
 800ddc8:	bf00      	nop
 800ddca:	bf00      	nop
 800ddcc:	3760      	adds	r7, #96	; 0x60
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ddd4:	4770      	bx	lr

0800ddd6 <add_round_key>:

static inline void add_round_key(uint64_t *q, const uint64_t *sk)
{
 800ddd6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ddda:	b08d      	sub	sp, #52	; 0x34
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dde0:	62b9      	str	r1, [r7, #40]	; 0x28
	q[0] ^= sk[0];
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	ea80 0402 	eor.w	r4, r0, r2
 800ddf2:	ea81 0503 	eor.w	r5, r1, r3
 800ddf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf8:	e9c3 4500 	strd	r4, r5, [r3]
	q[1] ^= sk[1];
 800ddfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfe:	3308      	adds	r3, #8
 800de00:	e9d3 4500 	ldrd	r4, r5, [r3]
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	3308      	adds	r3, #8
 800de08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	3308      	adds	r3, #8
 800de10:	ea84 0800 	eor.w	r8, r4, r0
 800de14:	ea85 0901 	eor.w	r9, r5, r1
 800de18:	e9c3 8900 	strd	r8, r9, [r3]
	q[2] ^= sk[2];
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1e:	3310      	adds	r3, #16
 800de20:	e9d3 4500 	ldrd	r4, r5, [r3]
 800de24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de26:	3310      	adds	r3, #16
 800de28:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	3310      	adds	r3, #16
 800de30:	ea84 0a00 	eor.w	sl, r4, r0
 800de34:	ea85 0b01 	eor.w	fp, r5, r1
 800de38:	e9c3 ab00 	strd	sl, fp, [r3]
	q[3] ^= sk[3];
 800de3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3e:	3318      	adds	r3, #24
 800de40:	e9d3 4500 	ldrd	r4, r5, [r3]
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	3318      	adds	r3, #24
 800de48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	3318      	adds	r3, #24
 800de50:	ea84 0200 	eor.w	r2, r4, r0
 800de54:	623a      	str	r2, [r7, #32]
 800de56:	ea85 0201 	eor.w	r2, r5, r1
 800de5a:	627a      	str	r2, [r7, #36]	; 0x24
 800de5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de60:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] ^= sk[4];
 800de64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de66:	3320      	adds	r3, #32
 800de68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	3320      	adds	r3, #32
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800de76:	3420      	adds	r4, #32
 800de78:	ea80 0502 	eor.w	r5, r0, r2
 800de7c:	61bd      	str	r5, [r7, #24]
 800de7e:	404b      	eors	r3, r1
 800de80:	61fb      	str	r3, [r7, #28]
 800de82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de86:	e9c4 2300 	strd	r2, r3, [r4]
	q[5] ^= sk[5];
 800de8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8c:	3328      	adds	r3, #40	; 0x28
 800de8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de94:	3328      	adds	r3, #40	; 0x28
 800de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800de9c:	3428      	adds	r4, #40	; 0x28
 800de9e:	ea80 0502 	eor.w	r5, r0, r2
 800dea2:	613d      	str	r5, [r7, #16]
 800dea4:	404b      	eors	r3, r1
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800deac:	e9c4 2300 	strd	r2, r3, [r4]
	q[6] ^= sk[6];
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	3330      	adds	r3, #48	; 0x30
 800deb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	3330      	adds	r3, #48	; 0x30
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800dec2:	3430      	adds	r4, #48	; 0x30
 800dec4:	ea80 0502 	eor.w	r5, r0, r2
 800dec8:	60bd      	str	r5, [r7, #8]
 800deca:	404b      	eors	r3, r1
 800decc:	60fb      	str	r3, [r7, #12]
 800dece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ded2:	e9c4 2300 	strd	r2, r3, [r4]
	q[7] ^= sk[7];
 800ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded8:	3338      	adds	r3, #56	; 0x38
 800deda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	3338      	adds	r3, #56	; 0x38
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800dee8:	3438      	adds	r4, #56	; 0x38
 800deea:	ea80 0502 	eor.w	r5, r0, r2
 800deee:	603d      	str	r5, [r7, #0]
 800def0:	404b      	eors	r3, r1
 800def2:	607b      	str	r3, [r7, #4]
 800def4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800def8:	e9c4 2300 	strd	r2, r3, [r4]
}
 800defc:	bf00      	nop
 800defe:	3734      	adds	r7, #52	; 0x34
 800df00:	46bd      	mov	sp, r7
 800df02:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800df06:	4770      	bx	lr

0800df08 <shift_rows>:

static inline void shift_rows(uint64_t *q)
{
 800df08:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800df0c:	b09b      	sub	sp, #108	; 0x6c
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6578      	str	r0, [r7, #84]	; 0x54
	int i;

	for (i = 0; i < 8; i ++) {
 800df12:	2300      	movs	r3, #0
 800df14:	667b      	str	r3, [r7, #100]	; 0x64
 800df16:	e0ab      	b.n	800e070 <shift_rows+0x168>
		uint64_t x;

		x = q[i];
 800df18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df1a:	00da      	lsls	r2, r3, #3
 800df1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df1e:	4413      	add	r3, r2
 800df20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df24:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800df28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df2c:	b293      	uxth	r3, r2
 800df2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800df30:	2300      	movs	r3, #0
 800df32:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800df34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df38:	f04f 0000 	mov.w	r0, #0
 800df3c:	f04f 0100 	mov.w	r1, #0
 800df40:	0910      	lsrs	r0, r2, #4
 800df42:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800df46:	0919      	lsrs	r1, r3, #4
 800df48:	f020 4870 	bic.w	r8, r0, #4026531840	; 0xf0000000
 800df4c:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800df50:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800df54:	f04f 0900 	mov.w	r9, #0
 800df58:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800df5c:	460b      	mov	r3, r1
 800df5e:	ea43 0308 	orr.w	r3, r3, r8
 800df62:	64bb      	str	r3, [r7, #72]	; 0x48
 800df64:	4613      	mov	r3, r2
 800df66:	ea43 0309 	orr.w	r3, r3, r9
 800df6a:	64fb      	str	r3, [r7, #76]	; 0x4c
			| ((x & (uint64_t)0x00000000000F0000) << 12)
 800df6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df70:	f04f 0000 	mov.w	r0, #0
 800df74:	f04f 0100 	mov.w	r1, #0
 800df78:	0319      	lsls	r1, r3, #12
 800df7a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800df7e:	0310      	lsls	r0, r2, #12
 800df80:	f000 4370 	and.w	r3, r0, #4026531840	; 0xf0000000
 800df84:	623b      	str	r3, [r7, #32]
 800df86:	2300      	movs	r3, #0
 800df88:	627b      	str	r3, [r7, #36]	; 0x24
 800df8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800df90:	4602      	mov	r2, r0
 800df92:	4313      	orrs	r3, r2
 800df94:	643b      	str	r3, [r7, #64]	; 0x40
 800df96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df98:	460a      	mov	r2, r1
 800df9a:	4313      	orrs	r3, r2
 800df9c:	647b      	str	r3, [r7, #68]	; 0x44
			| ((x & (uint64_t)0x0000FF0000000000) >> 8)
 800df9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dfa2:	f04f 0000 	mov.w	r0, #0
 800dfa6:	f04f 0100 	mov.w	r1, #0
 800dfaa:	0a10      	lsrs	r0, r2, #8
 800dfac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800dfb0:	0a19      	lsrs	r1, r3, #8
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	61bb      	str	r3, [r7, #24]
 800dfb6:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800dfba:	61fb      	str	r3, [r7, #28]
 800dfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfca:	460a      	mov	r2, r1
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	63fb      	str	r3, [r7, #60]	; 0x3c
			| ((x & (uint64_t)0x000000FF00000000) << 8)
 800dfd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dfd4:	f04f 0000 	mov.w	r0, #0
 800dfd8:	f04f 0100 	mov.w	r1, #0
 800dfdc:	0219      	lsls	r1, r3, #8
 800dfde:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800dfe2:	0210      	lsls	r0, r2, #8
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dff4:	4602      	mov	r2, r0
 800dff6:	4313      	orrs	r3, r2
 800dff8:	633b      	str	r3, [r7, #48]	; 0x30
 800dffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffc:	460a      	mov	r2, r1
 800dffe:	4313      	orrs	r3, r2
 800e000:	637b      	str	r3, [r7, #52]	; 0x34
			| ((x & (uint64_t)0xF000000000000000) >> 12)
 800e002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e006:	f04f 0000 	mov.w	r0, #0
 800e00a:	f04f 0100 	mov.w	r1, #0
 800e00e:	0b10      	lsrs	r0, r2, #12
 800e010:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e014:	0b19      	lsrs	r1, r3, #12
 800e016:	2300      	movs	r3, #0
 800e018:	60bb      	str	r3, [r7, #8]
 800e01a:	f401 2370 	and.w	r3, r1, #983040	; 0xf0000
 800e01e:	60fb      	str	r3, [r7, #12]
 800e020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e026:	4602      	mov	r2, r0
 800e028:	ea43 0a02 	orr.w	sl, r3, r2
 800e02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02e:	460a      	mov	r2, r1
 800e030:	ea43 0b02 	orr.w	fp, r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e034:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e038:	f04f 0000 	mov.w	r0, #0
 800e03c:	f04f 0100 	mov.w	r1, #0
 800e040:	0119      	lsls	r1, r3, #4
 800e042:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e046:	0110      	lsls	r0, r2, #4
 800e048:	2400      	movs	r4, #0
 800e04a:	0d0d      	lsrs	r5, r1, #20
 800e04c:	052d      	lsls	r5, r5, #20
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e04e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e050:	00da      	lsls	r2, r3, #3
 800e052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e054:	4413      	add	r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e056:	ea4a 0204 	orr.w	r2, sl, r4
 800e05a:	603a      	str	r2, [r7, #0]
 800e05c:	ea4b 0205 	orr.w	r2, fp, r5
 800e060:	607a      	str	r2, [r7, #4]
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e062:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e066:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0; i < 8; i ++) {
 800e06a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e06c:	3301      	adds	r3, #1
 800e06e:	667b      	str	r3, [r7, #100]	; 0x64
 800e070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e072:	2b07      	cmp	r3, #7
 800e074:	f77f af50 	ble.w	800df18 <shift_rows+0x10>
	}
}
 800e078:	bf00      	nop
 800e07a:	bf00      	nop
 800e07c:	376c      	adds	r7, #108	; 0x6c
 800e07e:	46bd      	mov	sp, r7
 800e080:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e084:	4770      	bx	lr

0800e086 <rotr32>:

static inline uint64_t rotr32(uint64_t x)
{
 800e086:	b480      	push	{r7}
 800e088:	b083      	sub	sp, #12
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	e9c7 0100 	strd	r0, r1, [r7]
	return (x << 32) | (x >> 32);
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	683b      	ldr	r3, [r7, #0]
}
 800e094:	4610      	mov	r0, r2
 800e096:	4619      	mov	r1, r3
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <mix_columns>:

static inline void mix_columns(uint64_t *q)
{
 800e0a2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0a6:	b0f8      	sub	sp, #480	; 0x1e0
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	uint64_t q0, q1, q2, q3, q4, q5, q6, q7;
	uint64_t r0, r1, r2, r3, r4, r5, r6, r7;

	q0 = q[0];
 800e0ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b6:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	q1 = q[1];
 800e0ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e0c2:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	q2 = q[2];
 800e0c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e0ce:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
	q3 = q[3];
 800e0d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e0da:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	q4 = q[4];
 800e0de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0e6:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
	q5 = q[5];
 800e0ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e0f2:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
	q6 = q[6];
 800e0f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800e0fe:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
	q7 = q[7];
 800e102:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e106:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e10a:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	r0 = (q0 >> 16) | (q0 << 48);
 800e10e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e112:	041a      	lsls	r2, r3, #16
 800e114:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e118:	0c1b      	lsrs	r3, r3, #16
 800e11a:	ea42 0403 	orr.w	r4, r2, r3
 800e11e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e122:	041a      	lsls	r2, r3, #16
 800e124:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e128:	0c1b      	lsrs	r3, r3, #16
 800e12a:	ea42 0503 	orr.w	r5, r2, r3
 800e12e:	e9c7 4566 	strd	r4, r5, [r7, #408]	; 0x198
	r1 = (q1 >> 16) | (q1 << 48);
 800e132:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e136:	041a      	lsls	r2, r3, #16
 800e138:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e13c:	0c1b      	lsrs	r3, r3, #16
 800e13e:	ea42 0803 	orr.w	r8, r2, r3
 800e142:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e146:	041a      	lsls	r2, r3, #16
 800e148:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e14c:	0c1b      	lsrs	r3, r3, #16
 800e14e:	ea42 0903 	orr.w	r9, r2, r3
 800e152:	e9c7 8964 	strd	r8, r9, [r7, #400]	; 0x190
	r2 = (q2 >> 16) | (q2 << 48);
 800e156:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e15a:	041a      	lsls	r2, r3, #16
 800e15c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e160:	0c1b      	lsrs	r3, r3, #16
 800e162:	4313      	orrs	r3, r2
 800e164:	62bb      	str	r3, [r7, #40]	; 0x28
 800e166:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e16a:	041a      	lsls	r2, r3, #16
 800e16c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e170:	0c1b      	lsrs	r3, r3, #16
 800e172:	4313      	orrs	r3, r2
 800e174:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e176:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e17a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	r3 = (q3 >> 16) | (q3 << 48);
 800e17e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e182:	041a      	lsls	r2, r3, #16
 800e184:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e188:	0c1b      	lsrs	r3, r3, #16
 800e18a:	4313      	orrs	r3, r2
 800e18c:	623b      	str	r3, [r7, #32]
 800e18e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e192:	041a      	lsls	r2, r3, #16
 800e194:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e198:	0c1b      	lsrs	r3, r3, #16
 800e19a:	4313      	orrs	r3, r2
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
 800e19e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e1a2:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	r4 = (q4 >> 16) | (q4 << 48);
 800e1a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e1aa:	041a      	lsls	r2, r3, #16
 800e1ac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e1b0:	0c1b      	lsrs	r3, r3, #16
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	61bb      	str	r3, [r7, #24]
 800e1b6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e1ba:	041a      	lsls	r2, r3, #16
 800e1bc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e1c0:	0c1b      	lsrs	r3, r3, #16
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	61fb      	str	r3, [r7, #28]
 800e1c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e1ca:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
	r5 = (q5 >> 16) | (q5 << 48);
 800e1ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e1d2:	041a      	lsls	r2, r3, #16
 800e1d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e1d8:	0c1b      	lsrs	r3, r3, #16
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	613b      	str	r3, [r7, #16]
 800e1de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e1e2:	041a      	lsls	r2, r3, #16
 800e1e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e1e8:	0c1b      	lsrs	r3, r3, #16
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	617b      	str	r3, [r7, #20]
 800e1ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e1f2:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
	r6 = (q6 >> 16) | (q6 << 48);
 800e1f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e1fa:	041a      	lsls	r2, r3, #16
 800e1fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e200:	0c1b      	lsrs	r3, r3, #16
 800e202:	4313      	orrs	r3, r2
 800e204:	60bb      	str	r3, [r7, #8]
 800e206:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e20a:	041a      	lsls	r2, r3, #16
 800e20c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e210:	0c1b      	lsrs	r3, r3, #16
 800e212:	4313      	orrs	r3, r2
 800e214:	60fb      	str	r3, [r7, #12]
 800e216:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e21a:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
	r7 = (q7 >> 16) | (q7 << 48);
 800e21e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e222:	041a      	lsls	r2, r3, #16
 800e224:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e228:	0c1b      	lsrs	r3, r3, #16
 800e22a:	4313      	orrs	r3, r2
 800e22c:	603b      	str	r3, [r7, #0]
 800e22e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e232:	041a      	lsls	r2, r3, #16
 800e234:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e238:	0c1b      	lsrs	r3, r3, #16
 800e23a:	4313      	orrs	r3, r2
 800e23c:	607b      	str	r3, [r7, #4]
 800e23e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e242:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160

	q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800e246:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e24a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e24e:	ea80 0a02 	eor.w	sl, r0, r2
 800e252:	ea81 0b03 	eor.w	fp, r1, r3
 800e256:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e25a:	ea8a 0102 	eor.w	r1, sl, r2
 800e25e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800e262:	ea8b 0303 	eor.w	r3, fp, r3
 800e266:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e26a:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e26e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e272:	ea80 0402 	eor.w	r4, r0, r2
 800e276:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800e27a:	404b      	eors	r3, r1
 800e27c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800e280:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e284:	f7ff feff 	bl	800e086 <rotr32>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800e290:	4621      	mov	r1, r4
 800e292:	4051      	eors	r1, r2
 800e294:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800e298:	4629      	mov	r1, r5
 800e29a:	4059      	eors	r1, r3
 800e29c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800e2a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e2a4:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800e2a8:	e9c3 1200 	strd	r1, r2, [r3]
	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 800e2ac:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e2b0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e2b4:	ea80 0402 	eor.w	r4, r0, r2
 800e2b8:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800e2bc:	404b      	eors	r3, r1
 800e2be:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800e2c2:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e2c6:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	4051      	eors	r1, r2
 800e2ce:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	4059      	eors	r1, r3
 800e2d6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800e2da:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e2de:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	4051      	eors	r1, r2
 800e2e6:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	4059      	eors	r1, r3
 800e2ee:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800e2f2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e2f6:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4051      	eors	r1, r2
 800e2fe:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800e302:	4629      	mov	r1, r5
 800e304:	4059      	eors	r1, r3
 800e306:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800e30a:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e30e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e312:	ea80 0402 	eor.w	r4, r0, r2
 800e316:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800e31a:	404b      	eors	r3, r1
 800e31c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e320:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e324:	f7ff feaf 	bl	800e086 <rotr32>
 800e328:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e32c:	3308      	adds	r3, #8
 800e32e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800e332:	4622      	mov	r2, r4
 800e334:	4042      	eors	r2, r0
 800e336:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800e33a:	462a      	mov	r2, r5
 800e33c:	404a      	eors	r2, r1
 800e33e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800e342:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800e346:	e9c3 1200 	strd	r1, r2, [r3]
	q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 800e34a:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e34e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e352:	ea80 0402 	eor.w	r4, r0, r2
 800e356:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800e35a:	404b      	eors	r3, r1
 800e35c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e360:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e364:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800e368:	4621      	mov	r1, r4
 800e36a:	4051      	eors	r1, r2
 800e36c:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800e370:	4629      	mov	r1, r5
 800e372:	4059      	eors	r1, r3
 800e374:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800e378:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e37c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e380:	ea80 0402 	eor.w	r4, r0, r2
 800e384:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800e388:	404b      	eors	r3, r1
 800e38a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e38e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800e392:	f7ff fe78 	bl	800e086 <rotr32>
 800e396:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e39a:	3310      	adds	r3, #16
 800e39c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800e3a0:	4622      	mov	r2, r4
 800e3a2:	4042      	eors	r2, r0
 800e3a4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800e3a8:	462a      	mov	r2, r5
 800e3aa:	404a      	eors	r2, r1
 800e3ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800e3b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e3b4:	e9c3 1200 	strd	r1, r2, [r3]
	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 800e3b8:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e3bc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e3c0:	ea80 0402 	eor.w	r4, r0, r2
 800e3c4:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800e3c8:	404b      	eors	r3, r1
 800e3ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e3ce:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e3d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	4051      	eors	r1, r2
 800e3da:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800e3de:	4629      	mov	r1, r5
 800e3e0:	4059      	eors	r1, r3
 800e3e2:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800e3e6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e3ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4051      	eors	r1, r2
 800e3f2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	4059      	eors	r1, r3
 800e3fa:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800e3fe:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e402:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800e406:	4621      	mov	r1, r4
 800e408:	4051      	eors	r1, r2
 800e40a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800e40e:	4629      	mov	r1, r5
 800e410:	4059      	eors	r1, r3
 800e412:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800e416:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e41a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e41e:	ea80 0402 	eor.w	r4, r0, r2
 800e422:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e426:	404b      	eors	r3, r1
 800e428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e42c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e430:	f7ff fe29 	bl	800e086 <rotr32>
 800e434:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e438:	3318      	adds	r3, #24
 800e43a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800e43e:	4622      	mov	r2, r4
 800e440:	4042      	eors	r2, r0
 800e442:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800e446:	462a      	mov	r2, r5
 800e448:	404a      	eors	r2, r1
 800e44a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e44e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e452:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 800e456:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e45a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e45e:	ea80 0402 	eor.w	r4, r0, r2
 800e462:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800e466:	404b      	eors	r3, r1
 800e468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e46c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e470:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800e474:	4621      	mov	r1, r4
 800e476:	4051      	eors	r1, r2
 800e478:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800e47c:	4629      	mov	r1, r5
 800e47e:	4059      	eors	r1, r3
 800e480:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800e484:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e488:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800e48c:	4621      	mov	r1, r4
 800e48e:	4051      	eors	r1, r2
 800e490:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800e494:	4629      	mov	r1, r5
 800e496:	4059      	eors	r1, r3
 800e498:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800e49c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e4a0:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	4051      	eors	r1, r2
 800e4a8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	4059      	eors	r1, r3
 800e4b0:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800e4b4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e4b8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e4bc:	ea80 0402 	eor.w	r4, r0, r2
 800e4c0:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800e4c4:	404b      	eors	r3, r1
 800e4c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e4ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e4ce:	f7ff fdda 	bl	800e086 <rotr32>
 800e4d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e4d6:	3320      	adds	r3, #32
 800e4d8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800e4dc:	4622      	mov	r2, r4
 800e4de:	4042      	eors	r2, r0
 800e4e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e4e4:	462a      	mov	r2, r5
 800e4e6:	404a      	eors	r2, r1
 800e4e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e4ec:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e4f0:	e9c3 1200 	strd	r1, r2, [r3]
	q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 800e4f4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e4f8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e4fc:	ea80 0402 	eor.w	r4, r0, r2
 800e500:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800e504:	404b      	eors	r3, r1
 800e506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e50a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e50e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e512:	4621      	mov	r1, r4
 800e514:	4051      	eors	r1, r2
 800e516:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e51a:	4629      	mov	r1, r5
 800e51c:	4059      	eors	r1, r3
 800e51e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800e522:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e526:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e52a:	ea80 0402 	eor.w	r4, r0, r2
 800e52e:	67bc      	str	r4, [r7, #120]	; 0x78
 800e530:	404b      	eors	r3, r1
 800e532:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e534:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800e538:	f7ff fda5 	bl	800e086 <rotr32>
 800e53c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e540:	3328      	adds	r3, #40	; 0x28
 800e542:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e546:	4622      	mov	r2, r4
 800e548:	4042      	eors	r2, r0
 800e54a:	673a      	str	r2, [r7, #112]	; 0x70
 800e54c:	462a      	mov	r2, r5
 800e54e:	404a      	eors	r2, r1
 800e550:	677a      	str	r2, [r7, #116]	; 0x74
 800e552:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e556:	e9c3 1200 	strd	r1, r2, [r3]
	q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 800e55a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e55e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e562:	ea80 0402 	eor.w	r4, r0, r2
 800e566:	66bc      	str	r4, [r7, #104]	; 0x68
 800e568:	404b      	eors	r3, r1
 800e56a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e56c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e570:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800e574:	4621      	mov	r1, r4
 800e576:	4051      	eors	r1, r2
 800e578:	6639      	str	r1, [r7, #96]	; 0x60
 800e57a:	4629      	mov	r1, r5
 800e57c:	4059      	eors	r1, r3
 800e57e:	6679      	str	r1, [r7, #100]	; 0x64
 800e580:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e584:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e588:	ea80 0402 	eor.w	r4, r0, r2
 800e58c:	65bc      	str	r4, [r7, #88]	; 0x58
 800e58e:	404b      	eors	r3, r1
 800e590:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e592:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e596:	f7ff fd76 	bl	800e086 <rotr32>
 800e59a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e59e:	3330      	adds	r3, #48	; 0x30
 800e5a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e5a4:	4622      	mov	r2, r4
 800e5a6:	4042      	eors	r2, r0
 800e5a8:	653a      	str	r2, [r7, #80]	; 0x50
 800e5aa:	462a      	mov	r2, r5
 800e5ac:	404a      	eors	r2, r1
 800e5ae:	657a      	str	r2, [r7, #84]	; 0x54
 800e5b0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e5b4:	e9c3 1200 	strd	r1, r2, [r3]
	q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
 800e5b8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e5bc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e5c0:	ea80 0402 	eor.w	r4, r0, r2
 800e5c4:	64bc      	str	r4, [r7, #72]	; 0x48
 800e5c6:	404b      	eors	r3, r1
 800e5c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5ca:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e5ce:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	4051      	eors	r1, r2
 800e5d6:	6439      	str	r1, [r7, #64]	; 0x40
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4059      	eors	r1, r3
 800e5dc:	6479      	str	r1, [r7, #68]	; 0x44
 800e5de:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e5e2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e5e6:	ea80 0402 	eor.w	r4, r0, r2
 800e5ea:	63bc      	str	r4, [r7, #56]	; 0x38
 800e5ec:	404b      	eors	r3, r1
 800e5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e5f4:	f7ff fd47 	bl	800e086 <rotr32>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800e600:	3138      	adds	r1, #56	; 0x38
 800e602:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e606:	4620      	mov	r0, r4
 800e608:	4050      	eors	r0, r2
 800e60a:	6338      	str	r0, [r7, #48]	; 0x30
 800e60c:	4628      	mov	r0, r5
 800e60e:	4058      	eors	r0, r3
 800e610:	6378      	str	r0, [r7, #52]	; 0x34
 800e612:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e616:	e9c1 3400 	strd	r3, r4, [r1]
}
 800e61a:	bf00      	nop
 800e61c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800e620:	46bd      	mov	sp, r7
 800e622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e626 <inc4_be>:

static void inc4_be(uint32_t *x)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  *x = br_swap32(*x)+4;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4618      	mov	r0, r3
 800e634:	f7fc ff12 	bl	800b45c <br_swap32>
 800e638:	4603      	mov	r3, r0
 800e63a:	1d1a      	adds	r2, r3, #4
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	601a      	str	r2, [r3, #0]
  *x = br_swap32(*x);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4618      	mov	r0, r3
 800e646:	f7fc ff09 	bl	800b45c <br_swap32>
 800e64a:	4602      	mov	r2, r0
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	601a      	str	r2, [r3, #0]
}
 800e650:	bf00      	nop
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <aes_ctr4x>:

static void aes_ctr4x(uint8_t out[64], uint32_t ivw[16], uint64_t sk_exp[64])
{
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b0a9      	sub	sp, #164	; 0xa4
 800e65c:	af02      	add	r7, sp, #8
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  uint32_t w[16];
  uint64_t q[8];
  int i;

  memcpy(w, ivw, sizeof(w));
 800e664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e668:	2240      	movs	r2, #64	; 0x40
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f007 f9af 	bl	80159d0 <memcpy>
  for (i = 0; i < 4; i++) {
 800e672:	2300      	movs	r3, #0
 800e674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e678:	e01b      	b.n	800e6b2 <aes_ctr4x+0x5a>
    br_aes_ct64_interleave_in(&q[i], &q[i + 4], w + (i << 2));
 800e67a:	f107 0210 	add.w	r2, r7, #16
 800e67e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	18d0      	adds	r0, r2, r3
 800e686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e68a:	3304      	adds	r3, #4
 800e68c:	f107 0210 	add.w	r2, r7, #16
 800e690:	00db      	lsls	r3, r3, #3
 800e692:	18d1      	adds	r1, r2, r3
 800e694:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e6a0:	4413      	add	r3, r2
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f7fe fe32 	bl	800d30c <br_aes_ct64_interleave_in>
  for (i = 0; i < 4; i++) {
 800e6a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6b6:	2b03      	cmp	r3, #3
 800e6b8:	dddf      	ble.n	800e67a <aes_ctr4x+0x22>
  }
  br_aes_ct64_ortho(q);
 800e6ba:	f107 0310 	add.w	r3, r7, #16
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fe f925 	bl	800c90e <br_aes_ct64_ortho>

  add_round_key(q, sk_exp);
 800e6c4:	f107 0310 	add.w	r3, r7, #16
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7ff fb83 	bl	800ddd6 <add_round_key>
  for (i = 1; i < 14; i++) {
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6d6:	e01f      	b.n	800e718 <aes_ctr4x+0xc0>
    br_aes_ct64_bitslice_Sbox(q);
 800e6d8:	f107 0310 	add.w	r3, r7, #16
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fc ff11 	bl	800b504 <br_aes_ct64_bitslice_Sbox>
    shift_rows(q);
 800e6e2:	f107 0310 	add.w	r3, r7, #16
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff fc0e 	bl	800df08 <shift_rows>
    mix_columns(q);
 800e6ec:	f107 0310 	add.w	r3, r7, #16
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7ff fcd6 	bl	800e0a2 <mix_columns>
    add_round_key(q, sk_exp + (i << 3));
 800e6f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	00db      	lsls	r3, r3, #3
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	441a      	add	r2, r3
 800e702:	f107 0310 	add.w	r3, r7, #16
 800e706:	4611      	mov	r1, r2
 800e708:	4618      	mov	r0, r3
 800e70a:	f7ff fb64 	bl	800ddd6 <add_round_key>
  for (i = 1; i < 14; i++) {
 800e70e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e712:	3301      	adds	r3, #1
 800e714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e71c:	2b0d      	cmp	r3, #13
 800e71e:	dddb      	ble.n	800e6d8 <aes_ctr4x+0x80>
  }
  br_aes_ct64_bitslice_Sbox(q);
 800e720:	f107 0310 	add.w	r3, r7, #16
 800e724:	4618      	mov	r0, r3
 800e726:	f7fc feed 	bl	800b504 <br_aes_ct64_bitslice_Sbox>
  shift_rows(q);
 800e72a:	f107 0310 	add.w	r3, r7, #16
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff fbea 	bl	800df08 <shift_rows>
  add_round_key(q, sk_exp + 112);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f503 7260 	add.w	r2, r3, #896	; 0x380
 800e73a:	f107 0310 	add.w	r3, r7, #16
 800e73e:	4611      	mov	r1, r2
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff fb48 	bl	800ddd6 <add_round_key>

  br_aes_ct64_ortho(q);
 800e746:	f107 0310 	add.w	r3, r7, #16
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fe f8df 	bl	800c90e <br_aes_ct64_ortho>
  for (i = 0; i < 4; i ++) {
 800e750:	2300      	movs	r3, #0
 800e752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e756:	e023      	b.n	800e7a0 <aes_ctr4x+0x148>
    br_aes_ct64_interleave_out(w + (i << 2), q[i], q[i + 4]);
 800e758:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e764:	18d4      	adds	r4, r2, r3
 800e766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	3398      	adds	r3, #152	; 0x98
 800e76e:	443b      	add	r3, r7
 800e770:	3b88      	subs	r3, #136	; 0x88
 800e772:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e77a:	3304      	adds	r3, #4
 800e77c:	00db      	lsls	r3, r3, #3
 800e77e:	3398      	adds	r3, #152	; 0x98
 800e780:	443b      	add	r3, r7
 800e782:	3b88      	subs	r3, #136	; 0x88
 800e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e788:	e9cd 2300 	strd	r2, r3, [sp]
 800e78c:	4602      	mov	r2, r0
 800e78e:	460b      	mov	r3, r1
 800e790:	4620      	mov	r0, r4
 800e792:	f7fe ff41 	bl	800d618 <br_aes_ct64_interleave_out>
  for (i = 0; i < 4; i ++) {
 800e796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e79a:	3301      	adds	r3, #1
 800e79c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e7a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7a4:	2b03      	cmp	r3, #3
 800e7a6:	ddd7      	ble.n	800e758 <aes_ctr4x+0x100>
  }
  br_range_enc32le(out, w, 16);
 800e7a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e7ac:	2210      	movs	r2, #16
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f7fc fe8b 	bl	800b4cc <br_range_enc32le>

  /* Increase counter for next 4 blocks */
  inc4_be(ivw+3);
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	330c      	adds	r3, #12
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7ff ff33 	bl	800e626 <inc4_be>
  inc4_be(ivw+7);
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	331c      	adds	r3, #28
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff ff2e 	bl	800e626 <inc4_be>
  inc4_be(ivw+11);
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	332c      	adds	r3, #44	; 0x2c
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7ff ff29 	bl	800e626 <inc4_be>
  inc4_be(ivw+15);
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	333c      	adds	r3, #60	; 0x3c
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff ff24 	bl	800e626 <inc4_be>
}
 800e7de:	bf00      	nop
 800e7e0:	379c      	adds	r7, #156	; 0x9c
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd90      	pop	{r4, r7, pc}

0800e7e6 <br_aes_ct64_ctr_init>:

static void br_aes_ct64_ctr_init(uint64_t sk_exp[120], const uint8_t *key)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b0be      	sub	sp, #248	; 0xf8
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
	uint64_t skey[30];

	br_aes_ct64_keysched(skey, key);
 800e7f0:	f107 0308 	add.w	r3, r7, #8
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7ff f844 	bl	800d884 <br_aes_ct64_keysched>
	br_aes_ct64_skey_expand(sk_exp, skey);
 800e7fc:	f107 0308 	add.w	r3, r7, #8
 800e800:	4619      	mov	r1, r3
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fa02 	bl	800dc0c <br_aes_ct64_skey_expand>
}
 800e808:	bf00      	nop
 800e80a:	37f8      	adds	r7, #248	; 0xf8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <pqcrystals_aes256ctr_ref_init>:
  br_aes_ct64_ctr_init(sk_exp, key);
  br_aes_ct64_ctr_run(sk_exp, nonce, 0, out, outlen);
}

void aes256ctr_init(aes256ctr_ctx *s, const uint8_t *key, const uint8_t *nonce)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
  br_aes_ct64_ctr_init(s->sk_exp, key);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	68b9      	ldr	r1, [r7, #8]
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff ffe0 	bl	800e7e6 <br_aes_ct64_ctr_init>

  br_range_dec32le(s->ivw, 3, nonce);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	2103      	movs	r1, #3
 800e830:	4618      	mov	r0, r3
 800e832:	f7fc fdf7 	bl	800b424 <br_range_dec32le>
  memcpy(s->ivw +  4, s->ivw, 3 * sizeof(uint32_t));
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e83c:	f103 0010 	add.w	r0, r3, #16
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e846:	220c      	movs	r2, #12
 800e848:	4619      	mov	r1, r3
 800e84a:	f007 f8c1 	bl	80159d0 <memcpy>
  memcpy(s->ivw +  8, s->ivw, 3 * sizeof(uint32_t));
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e854:	f103 0020 	add.w	r0, r3, #32
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e85e:	220c      	movs	r2, #12
 800e860:	4619      	mov	r1, r3
 800e862:	f007 f8b5 	bl	80159d0 <memcpy>
  memcpy(s->ivw + 12, s->ivw, 3 * sizeof(uint32_t));
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e86c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e876:	220c      	movs	r2, #12
 800e878:	4619      	mov	r1, r3
 800e87a:	f007 f8a9 	bl	80159d0 <memcpy>
  s->ivw[ 3] = br_swap32(0);
 800e87e:	2000      	movs	r0, #0
 800e880:	f7fc fdec 	bl	800b45c <br_swap32>
 800e884:	4602      	mov	r2, r0
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  s->ivw[ 7] = br_swap32(1);
 800e88c:	2001      	movs	r0, #1
 800e88e:	f7fc fde5 	bl	800b45c <br_swap32>
 800e892:	4602      	mov	r2, r0
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
  s->ivw[11] = br_swap32(2);
 800e89a:	2002      	movs	r0, #2
 800e89c:	f7fc fdde 	bl	800b45c <br_swap32>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
  s->ivw[15] = br_swap32(3);
 800e8a8:	2003      	movs	r0, #3
 800e8aa:	f7fc fdd7 	bl	800b45c <br_swap32>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
}
 800e8b6:	bf00      	nop
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <pqcrystals_aes256ctr_ref_squeezeblocks>:

void aes256ctr_squeezeblocks(uint8_t *out, size_t nblocks, aes256ctr_ctx *s)
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b084      	sub	sp, #16
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	60f8      	str	r0, [r7, #12]
 800e8c6:	60b9      	str	r1, [r7, #8]
 800e8c8:	607a      	str	r2, [r7, #4]
  while (nblocks > 0) {
 800e8ca:	e00d      	b.n	800e8e8 <pqcrystals_aes256ctr_ref_squeezeblocks+0x2a>
    aes_ctr4x(out, s->ivw, s->sk_exp);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f7ff febe 	bl	800e658 <aes_ctr4x>
    out += 64;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	3340      	adds	r3, #64	; 0x40
 800e8e0:	60fb      	str	r3, [r7, #12]
    nblocks--;
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	60bb      	str	r3, [r7, #8]
  while (nblocks > 0) {
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1ee      	bne.n	800e8cc <pqcrystals_aes256ctr_ref_squeezeblocks+0xe>
  }
}
 800e8ee:	bf00      	nop
 800e8f0:	bf00      	nop
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 800e8f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e8fc:	b086      	sub	sp, #24
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800e902:	f04f 0000 	mov.w	r0, #0
 800e906:	f04f 0100 	mov.w	r1, #0
 800e90a:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 800e90e:	2100      	movs	r1, #0
 800e910:	6179      	str	r1, [r7, #20]
 800e912:	e022      	b.n	800e95a <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	6979      	ldr	r1, [r7, #20]
 800e918:	4401      	add	r1, r0
 800e91a:	7809      	ldrb	r1, [r1, #0]
 800e91c:	b2c9      	uxtb	r1, r1
 800e91e:	2000      	movs	r0, #0
 800e920:	460c      	mov	r4, r1
 800e922:	4605      	mov	r5, r0
 800e924:	6979      	ldr	r1, [r7, #20]
 800e926:	00c9      	lsls	r1, r1, #3
 800e928:	f1a1 0620 	sub.w	r6, r1, #32
 800e92c:	f1c1 0020 	rsb	r0, r1, #32
 800e930:	fa05 f301 	lsl.w	r3, r5, r1
 800e934:	fa04 f606 	lsl.w	r6, r4, r6
 800e938:	4333      	orrs	r3, r6
 800e93a:	fa24 f000 	lsr.w	r0, r4, r0
 800e93e:	4303      	orrs	r3, r0
 800e940:	fa04 f201 	lsl.w	r2, r4, r1
 800e944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e948:	ea40 0802 	orr.w	r8, r0, r2
 800e94c:	ea41 0903 	orr.w	r9, r1, r3
 800e950:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 800e954:	6979      	ldr	r1, [r7, #20]
 800e956:	3101      	adds	r1, #1
 800e958:	6179      	str	r1, [r7, #20]
 800e95a:	6979      	ldr	r1, [r7, #20]
 800e95c:	2907      	cmp	r1, #7
 800e95e:	d9d9      	bls.n	800e914 <load64+0x1c>

  return r;
 800e960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800e964:	4610      	mov	r0, r2
 800e966:	4619      	mov	r1, r3
 800e968:	3718      	adds	r7, #24
 800e96a:	46bd      	mov	sp, r7
 800e96c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e970:	4770      	bx	lr

0800e972 <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800e972:	b4f0      	push	{r4, r5, r6, r7}
 800e974:	b086      	sub	sp, #24
 800e976:	af00      	add	r7, sp, #0
 800e978:	60f8      	str	r0, [r7, #12]
 800e97a:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 800e97e:	2300      	movs	r3, #0
 800e980:	617b      	str	r3, [r7, #20]
 800e982:	e019      	b.n	800e9b8 <store64+0x46>
    x[i] = u >> 8*i;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	00d9      	lsls	r1, r3, #3
 800e988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e98c:	f1c1 0620 	rsb	r6, r1, #32
 800e990:	f1a1 0020 	sub.w	r0, r1, #32
 800e994:	fa22 f401 	lsr.w	r4, r2, r1
 800e998:	fa03 f606 	lsl.w	r6, r3, r6
 800e99c:	4334      	orrs	r4, r6
 800e99e:	fa23 f000 	lsr.w	r0, r3, r0
 800e9a2:	4304      	orrs	r4, r0
 800e9a4:	fa23 f501 	lsr.w	r5, r3, r1
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	b2e2      	uxtb	r2, r4
 800e9b0:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	617b      	str	r3, [r7, #20]
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2b07      	cmp	r3, #7
 800e9bc:	d9e2      	bls.n	800e984 <store64+0x12>
}
 800e9be:	bf00      	nop
 800e9c0:	bf00      	nop
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bcf0      	pop	{r4, r5, r6, r7}
 800e9c8:	4770      	bx	lr
	...

0800e9cc <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 800e9cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e9d0:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e9de:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800e9e0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9e4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800e9f2:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 800e9f6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ea04:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800ea08:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 800ea0c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea10:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ea1a:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800ea1e:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 800ea22:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ea30:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800ea34:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 800ea38:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea3c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea46:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800ea4a:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 800ea4e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ea5c:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800ea60:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 800ea64:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea68:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800ea72:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800ea76:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800ea7a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea7e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ea88:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800ea8c:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800ea90:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea94:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ea9e:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800eaa2:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800eaa6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eaaa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800eab4:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800eab8:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 800eabc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eac0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800eaca:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800eace:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800ead2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ead6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800eae0:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800eae4:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 800eae8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eaec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800eaf6:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800eafa:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 800eafe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800eb0c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800eb10:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 800eb14:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb18:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800eb22:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800eb26:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 800eb2a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800eb38:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800eb3c:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 800eb40:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800eb4e:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800eb52:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 800eb56:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800eb64:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800eb68:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 800eb6c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb70:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800eb7a:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800eb7e:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 800eb82:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800eb90:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800eb94:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 800eb98:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb9c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800eba6:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800ebaa:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 800ebae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebb2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800ebbc:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800ebc0:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 800ebc4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebc8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800ebd2:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800ebd6:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 800ebda:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebde:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ebe8:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800ebec:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 800ebf0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebf4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800ebfe:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800ec02:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 800ec06:	2300      	movs	r3, #0
 800ec08:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800ec0c:	f002 bdf7 	b.w	80117fe <KeccakF1600_StatePermute+0x2e32>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 800ec10:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800ec14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec18:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	ea80 0602 	eor.w	r6, r0, r2
 800ec24:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 800ec28:	404b      	eors	r3, r1
 800ec2a:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 800ec2e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 800ec3a:	4051      	eors	r1, r2
 800ec3c:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 800ec40:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 800ec44:	404b      	eors	r3, r1
 800ec46:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 800ec4a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 800ec56:	4051      	eors	r1, r2
 800ec58:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 800ec5c:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 800ec60:	404b      	eors	r3, r1
 800ec62:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 800ec66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ec6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6e:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 800ec72:	4051      	eors	r1, r2
 800ec74:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800ec78:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 800ec7c:	404b      	eors	r3, r1
 800ec7e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800ec82:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800ec86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800ec8e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 800ec92:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800ec96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec9a:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	ea80 0602 	eor.w	r6, r0, r2
 800eca6:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 800ecaa:	404b      	eors	r3, r1
 800ecac:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 800ecb0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 800ecbc:	4051      	eors	r1, r2
 800ecbe:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 800ecc2:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 800ecc6:	404b      	eors	r3, r1
 800ecc8:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 800eccc:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 800ecd8:	4051      	eors	r1, r2
 800ecda:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 800ecde:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 800ece2:	404b      	eors	r3, r1
 800ece4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800ece8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf0:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 800ecf4:	4051      	eors	r1, r2
 800ecf6:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 800ecfa:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 800ecfe:	404b      	eors	r3, r1
 800ed00:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800ed04:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ed08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ed10:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 800ed14:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800ed18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed1c:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed24:	ea80 0602 	eor.w	r6, r0, r2
 800ed28:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 800ed2c:	404b      	eors	r3, r1
 800ed2e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800ed32:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 800ed3e:	4051      	eors	r1, r2
 800ed40:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 800ed44:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 800ed48:	404b      	eors	r3, r1
 800ed4a:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 800ed4e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 800ed5a:	4051      	eors	r1, r2
 800ed5c:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 800ed60:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 800ed64:	404b      	eors	r3, r1
 800ed66:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800ed6a:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 800ed76:	4051      	eors	r1, r2
 800ed78:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 800ed7c:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 800ed80:	404b      	eors	r3, r1
 800ed82:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800ed86:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ed92:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 800ed96:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800ed9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed9e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800eda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda6:	ea80 0602 	eor.w	r6, r0, r2
 800edaa:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 800edae:	404b      	eors	r3, r1
 800edb0:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 800edb4:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 800edc0:	4051      	eors	r1, r2
 800edc2:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 800edc6:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 800edca:	404b      	eors	r3, r1
 800edcc:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 800edd0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 800eddc:	4051      	eors	r1, r2
 800edde:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 800ede2:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 800ede6:	404b      	eors	r3, r1
 800ede8:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800edec:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 800edf8:	4051      	eors	r1, r2
 800edfa:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 800edfe:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 800ee02:	404b      	eors	r3, r1
 800ee04:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800ee08:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800ee0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee10:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800ee14:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 800ee18:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800ee1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee20:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee28:	ea80 0602 	eor.w	r6, r0, r2
 800ee2c:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 800ee30:	404b      	eors	r3, r1
 800ee32:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 800ee36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 800ee42:	4051      	eors	r1, r2
 800ee44:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 800ee48:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 800ee4c:	404b      	eors	r3, r1
 800ee4e:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 800ee52:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800ee56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5a:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 800ee5e:	4051      	eors	r1, r2
 800ee60:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 800ee64:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 800ee68:	404b      	eors	r3, r1
 800ee6a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 800ee6e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee76:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800ee7a:	4051      	eors	r1, r2
 800ee7c:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 800ee80:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 800ee84:	404b      	eors	r3, r1
 800ee86:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800ee8a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800ee96:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 800ee9a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800ee9e:	0fda      	lsrs	r2, r3, #31
 800eea0:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800eea4:	005b      	lsls	r3, r3, #1
 800eea6:	4313      	orrs	r3, r2
 800eea8:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800eeac:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800eeb0:	0fda      	lsrs	r2, r3, #31
 800eeb2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800eeb6:	005b      	lsls	r3, r3, #1
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 800eebe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec6:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 800eeca:	4051      	eors	r1, r2
 800eecc:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 800eed0:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 800eed4:	404b      	eors	r3, r1
 800eed6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800eeda:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee2:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800eee6:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800eeea:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800eeee:	0fda      	lsrs	r2, r3, #31
 800eef0:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800eef4:	005b      	lsls	r3, r3, #1
 800eef6:	4313      	orrs	r3, r2
 800eef8:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 800eefc:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800ef00:	0fda      	lsrs	r2, r3, #31
 800ef02:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800ef06:	005b      	lsls	r3, r3, #1
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800ef0e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ef12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef16:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 800ef1a:	4051      	eors	r1, r2
 800ef1c:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 800ef20:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 800ef24:	404b      	eors	r3, r1
 800ef26:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800ef2a:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800ef2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef32:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800ef36:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800ef3a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800ef3e:	0fda      	lsrs	r2, r3, #31
 800ef40:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800ef44:	005b      	lsls	r3, r3, #1
 800ef46:	4313      	orrs	r3, r2
 800ef48:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 800ef4c:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800ef50:	0fda      	lsrs	r2, r3, #31
 800ef52:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800ef5e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ef62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef66:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800ef6a:	4051      	eors	r1, r2
 800ef6c:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 800ef70:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 800ef74:	404b      	eors	r3, r1
 800ef76:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800ef7a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800ef86:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800ef8a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800ef8e:	0fda      	lsrs	r2, r3, #31
 800ef90:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	4313      	orrs	r3, r2
 800ef98:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 800ef9c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800efa0:	0fda      	lsrs	r2, r3, #31
 800efa2:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	4313      	orrs	r3, r2
 800efaa:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800efae:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 800efba:	4051      	eors	r1, r2
 800efbc:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 800efc0:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 800efc4:	404b      	eors	r3, r1
 800efc6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800efca:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800efce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd2:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800efd6:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800efda:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800efde:	0fda      	lsrs	r2, r3, #31
 800efe0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	4313      	orrs	r3, r2
 800efe8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 800efec:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800eff0:	0fda      	lsrs	r2, r3, #31
 800eff2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800eff6:	005b      	lsls	r3, r3, #1
 800eff8:	4313      	orrs	r3, r2
 800effa:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800effe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 800f00a:	4051      	eors	r1, r2
 800f00c:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800f010:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 800f014:	404b      	eors	r3, r1
 800f016:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800f01a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800f026:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 800f02a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f02e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f032:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	ea80 0602 	eor.w	r6, r0, r2
 800f03e:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 800f042:	404b      	eors	r3, r1
 800f044:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800f048:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800f054:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 800f058:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f064:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 800f068:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800f06c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f070:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f078:	ea80 0602 	eor.w	r6, r0, r2
 800f07c:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 800f080:	404b      	eors	r3, r1
 800f082:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800f086:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800f092:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 800f096:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f09a:	031a      	lsls	r2, r3, #12
 800f09c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f0a0:	0d1b      	lsrs	r3, r3, #20
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800f0a8:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f0ac:	031a      	lsls	r2, r3, #12
 800f0ae:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f0b2:	0d1b      	lsrs	r3, r3, #20
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800f0ba:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c2:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f0c6:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 800f0ca:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800f0ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0d2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0da:	ea80 0602 	eor.w	r6, r0, r2
 800f0de:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 800f0e2:	404b      	eors	r3, r1
 800f0e4:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800f0e8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f0:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800f0f4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 800f0f8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f0fc:	02da      	lsls	r2, r3, #11
 800f0fe:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f102:	0d5b      	lsrs	r3, r3, #21
 800f104:	4313      	orrs	r3, r2
 800f106:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800f10a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f10e:	02da      	lsls	r2, r3, #11
 800f110:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f114:	0d5b      	lsrs	r3, r3, #21
 800f116:	4313      	orrs	r3, r2
 800f118:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800f11c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f124:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f128:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 800f12c:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800f130:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f134:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13c:	ea80 0602 	eor.w	r6, r0, r2
 800f140:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 800f144:	404b      	eors	r3, r1
 800f146:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800f14a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800f156:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 800f15a:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f15e:	0ada      	lsrs	r2, r3, #11
 800f160:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f164:	055b      	lsls	r3, r3, #21
 800f166:	4313      	orrs	r3, r2
 800f168:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800f16c:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f170:	0ada      	lsrs	r2, r3, #11
 800f172:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f176:	055b      	lsls	r3, r3, #21
 800f178:	4313      	orrs	r3, r2
 800f17a:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800f17e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f186:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f18a:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800f18e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800f192:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f196:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	ea80 0602 	eor.w	r6, r0, r2
 800f1a2:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 800f1a6:	404b      	eors	r3, r1
 800f1a8:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800f1ac:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800f1b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 800f1bc:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f1c0:	0c9a      	lsrs	r2, r3, #18
 800f1c2:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f1c6:	039b      	lsls	r3, r3, #14
 800f1c8:	4313      	orrs	r3, r2
 800f1ca:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800f1ce:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f1d2:	0c9a      	lsrs	r2, r3, #18
 800f1d4:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f1d8:	039b      	lsls	r3, r3, #14
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f1e0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f1ec:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800f1f0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	43d1      	mvns	r1, r2
 800f1fa:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 800f1fe:	43db      	mvns	r3, r3
 800f200:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800f204:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 800f210:	4011      	ands	r1, r2
 800f212:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 800f216:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 800f21a:	400b      	ands	r3, r1
 800f21c:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800f220:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f228:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 800f22c:	4051      	eors	r1, r2
 800f22e:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 800f232:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 800f236:	404b      	eors	r3, r1
 800f238:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800f23c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f248:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800f24c:	4afd      	ldr	r2, [pc, #1012]	; (800f644 <KeccakF1600_StatePermute+0xc78>)
 800f24e:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800f252:	00db      	lsls	r3, r3, #3
 800f254:	4413      	add	r3, r2
 800f256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f25a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	ea82 0600 	eor.w	r6, r2, r0
 800f266:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 800f26a:	404b      	eors	r3, r1
 800f26c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800f270:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800f274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f278:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f27c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 800f280:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	43d1      	mvns	r1, r2
 800f28a:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800f28e:	43db      	mvns	r3, r3
 800f290:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800f294:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 800f2a0:	4011      	ands	r1, r2
 800f2a2:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 800f2a6:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 800f2aa:	400b      	ands	r3, r1
 800f2ac:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 800f2b0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b8:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 800f2bc:	4051      	eors	r1, r2
 800f2be:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800f2c2:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 800f2c6:	404b      	eors	r3, r1
 800f2c8:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800f2cc:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800f2d8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 800f2dc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	43d1      	mvns	r1, r2
 800f2e6:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 800f2ea:	43db      	mvns	r3, r3
 800f2ec:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800f2f0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 800f2fc:	4011      	ands	r1, r2
 800f2fe:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 800f302:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 800f306:	400b      	ands	r3, r1
 800f308:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 800f30c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f314:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 800f318:	4051      	eors	r1, r2
 800f31a:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800f31e:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 800f322:	404b      	eors	r3, r1
 800f324:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800f328:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800f32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f330:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800f334:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 800f338:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	43d1      	mvns	r1, r2
 800f342:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 800f346:	43db      	mvns	r3, r3
 800f348:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800f34c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 800f358:	4011      	ands	r1, r2
 800f35a:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 800f35e:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800f362:	400b      	ands	r3, r1
 800f364:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800f368:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f370:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 800f374:	4051      	eors	r1, r2
 800f376:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 800f37a:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800f37e:	404b      	eors	r3, r1
 800f380:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800f384:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800f388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38c:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800f390:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 800f394:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39c:	43d1      	mvns	r1, r2
 800f39e:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800f3a2:	43db      	mvns	r3, r3
 800f3a4:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 800f3a8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b0:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800f3b4:	4011      	ands	r1, r2
 800f3b6:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 800f3ba:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 800f3be:	400b      	ands	r3, r1
 800f3c0:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800f3c4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3cc:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 800f3d0:	4051      	eors	r1, r2
 800f3d2:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 800f3d6:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 800f3da:	404b      	eors	r3, r1
 800f3dc:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800f3e0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800f3ec:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800f3f0:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800f3f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3f8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f400:	ea80 0602 	eor.w	r6, r0, r2
 800f404:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 800f408:	404b      	eors	r3, r1
 800f40a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800f40e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800f41a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800f41e:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f422:	091a      	lsrs	r2, r3, #4
 800f424:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f428:	071b      	lsls	r3, r3, #28
 800f42a:	4313      	orrs	r3, r2
 800f42c:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800f430:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f434:	091a      	lsrs	r2, r3, #4
 800f436:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f43a:	071b      	lsls	r3, r3, #28
 800f43c:	4313      	orrs	r3, r2
 800f43e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800f442:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f44e:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 800f452:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800f456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f45a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f462:	ea80 0602 	eor.w	r6, r0, r2
 800f466:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800f46a:	404b      	eors	r3, r1
 800f46c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800f470:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f478:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800f47c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 800f480:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f484:	0b1a      	lsrs	r2, r3, #12
 800f486:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f48a:	051b      	lsls	r3, r3, #20
 800f48c:	4313      	orrs	r3, r2
 800f48e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800f492:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f496:	0b1a      	lsrs	r2, r3, #12
 800f498:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f49c:	051b      	lsls	r3, r3, #20
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800f4a4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800f4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ac:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f4b0:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 800f4b4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800f4b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4bc:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c4:	ea80 0602 	eor.w	r6, r0, r2
 800f4c8:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 800f4cc:	404b      	eors	r3, r1
 800f4ce:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800f4d2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800f4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4da:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800f4de:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800f4e2:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f4e6:	0f5a      	lsrs	r2, r3, #29
 800f4e8:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800f4f4:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f4f8:	0f5a      	lsrs	r2, r3, #29
 800f4fa:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	4313      	orrs	r3, r2
 800f502:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800f506:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f512:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 800f516:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800f51a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f51e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f526:	ea80 0602 	eor.w	r6, r0, r2
 800f52a:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 800f52e:	404b      	eors	r3, r1
 800f530:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800f534:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800f540:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 800f544:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f548:	035a      	lsls	r2, r3, #13
 800f54a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f54e:	0cdb      	lsrs	r3, r3, #19
 800f550:	4313      	orrs	r3, r2
 800f552:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800f556:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f55a:	035a      	lsls	r2, r3, #13
 800f55c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f560:	0cdb      	lsrs	r3, r3, #19
 800f562:	4313      	orrs	r3, r2
 800f564:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800f568:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800f56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f570:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f574:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 800f578:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800f57c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f580:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	ea80 0602 	eor.w	r6, r0, r2
 800f58c:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 800f590:	404b      	eors	r3, r1
 800f592:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800f596:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800f5a2:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 800f5a6:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800f5aa:	075a      	lsls	r2, r3, #29
 800f5ac:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800f5b0:	08db      	lsrs	r3, r3, #3
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800f5b8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800f5bc:	075a      	lsls	r2, r3, #29
 800f5be:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800f5c2:	08db      	lsrs	r3, r3, #3
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800f5ca:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f5d6:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800f5da:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e2:	43d1      	mvns	r1, r2
 800f5e4:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800f5e8:	43db      	mvns	r3, r3
 800f5ea:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 800f5ee:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 800f5fa:	4011      	ands	r1, r2
 800f5fc:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 800f600:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800f604:	400b      	ands	r3, r1
 800f606:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 800f60a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f612:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 800f616:	4051      	eors	r1, r2
 800f618:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800f61c:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 800f620:	404b      	eors	r3, r1
 800f622:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800f626:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800f632:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 800f636:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63e:	43d1      	mvns	r1, r2
 800f640:	e002      	b.n	800f648 <KeccakF1600_StatePermute+0xc7c>
 800f642:	bf00      	nop
 800f644:	08016548 	.word	0x08016548
 800f648:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 800f64c:	43db      	mvns	r3, r3
 800f64e:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 800f652:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 800f65e:	4011      	ands	r1, r2
 800f660:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 800f664:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 800f668:	400b      	ands	r3, r1
 800f66a:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800f66e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f676:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800f67a:	4051      	eors	r1, r2
 800f67c:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 800f680:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 800f684:	404b      	eors	r3, r1
 800f686:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800f68a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800f696:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800f69a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	43d1      	mvns	r1, r2
 800f6a4:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 800f6a8:	43db      	mvns	r3, r3
 800f6aa:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 800f6ae:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 800f6ba:	4011      	ands	r1, r2
 800f6bc:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 800f6c0:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800f6c4:	400b      	ands	r3, r1
 800f6c6:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 800f6ca:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d2:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 800f6d6:	4051      	eors	r1, r2
 800f6d8:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 800f6dc:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 800f6e0:	404b      	eors	r3, r1
 800f6e2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800f6e6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800f6f2:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800f6f6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fe:	43d1      	mvns	r1, r2
 800f700:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800f704:	43db      	mvns	r3, r3
 800f706:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800f70a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f712:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 800f716:	4011      	ands	r1, r2
 800f718:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 800f71c:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 800f720:	400b      	ands	r3, r1
 800f722:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800f726:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72e:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 800f732:	4051      	eors	r1, r2
 800f734:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800f738:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 800f73c:	404b      	eors	r3, r1
 800f73e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800f742:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800f74e:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 800f752:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	43d1      	mvns	r1, r2
 800f75c:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 800f760:	43db      	mvns	r3, r3
 800f762:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800f766:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76e:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 800f772:	4011      	ands	r1, r2
 800f774:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 800f778:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 800f77c:	400b      	ands	r3, r1
 800f77e:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 800f782:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78a:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 800f78e:	4051      	eors	r1, r2
 800f790:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 800f794:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 800f798:	404b      	eors	r3, r1
 800f79a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800f79e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a6:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800f7aa:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 800f7ae:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800f7b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7b6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	ea80 0602 	eor.w	r6, r0, r2
 800f7c2:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 800f7c6:	404b      	eors	r3, r1
 800f7c8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800f7cc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800f7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d4:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800f7d8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 800f7dc:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800f7e0:	0fda      	lsrs	r2, r3, #31
 800f7e2:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800f7e6:	005b      	lsls	r3, r3, #1
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800f7ee:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800f7f2:	0fda      	lsrs	r2, r3, #31
 800f7f4:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800f7f8:	005b      	lsls	r3, r3, #1
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800f800:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f808:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f80c:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 800f810:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800f814:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f818:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f820:	ea80 0602 	eor.w	r6, r0, r2
 800f824:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 800f828:	404b      	eors	r3, r1
 800f82a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800f82e:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800f832:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800f836:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 800f83a:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800f83e:	0e9a      	lsrs	r2, r3, #26
 800f840:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800f844:	019b      	lsls	r3, r3, #6
 800f846:	4313      	orrs	r3, r2
 800f848:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800f84c:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800f850:	0e9a      	lsrs	r2, r3, #26
 800f852:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800f856:	019b      	lsls	r3, r3, #6
 800f858:	4313      	orrs	r3, r2
 800f85a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800f85e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800f862:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f866:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 800f86a:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800f86e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f872:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87a:	ea80 0602 	eor.w	r6, r0, r2
 800f87e:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 800f882:	404b      	eors	r3, r1
 800f884:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800f888:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800f88c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800f890:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 800f894:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800f898:	09da      	lsrs	r2, r3, #7
 800f89a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800f89e:	065b      	lsls	r3, r3, #25
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800f8a6:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800f8aa:	09da      	lsrs	r2, r3, #7
 800f8ac:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800f8b0:	065b      	lsls	r3, r3, #25
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800f8b8:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800f8bc:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f8c0:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800f8c4:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800f8c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8cc:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d4:	ea80 0602 	eor.w	r6, r0, r2
 800f8d8:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 800f8dc:	404b      	eors	r3, r1
 800f8de:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800f8e2:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800f8e6:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800f8ea:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 800f8ee:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800f8f2:	0e1a      	lsrs	r2, r3, #24
 800f8f4:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800f8f8:	021b      	lsls	r3, r3, #8
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800f900:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800f904:	0e1a      	lsrs	r2, r3, #24
 800f906:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800f90a:	021b      	lsls	r3, r3, #8
 800f90c:	4313      	orrs	r3, r2
 800f90e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800f912:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800f916:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f91a:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 800f91e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800f922:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f926:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92e:	ea80 0602 	eor.w	r6, r0, r2
 800f932:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 800f936:	404b      	eors	r3, r1
 800f938:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800f93c:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800f940:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800f944:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 800f948:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800f94c:	0b9a      	lsrs	r2, r3, #14
 800f94e:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800f952:	049b      	lsls	r3, r3, #18
 800f954:	4313      	orrs	r3, r2
 800f956:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800f95a:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800f95e:	0b9a      	lsrs	r2, r3, #14
 800f960:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800f964:	049b      	lsls	r3, r3, #18
 800f966:	4313      	orrs	r3, r2
 800f968:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800f96c:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800f970:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f974:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 800f978:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f980:	43d1      	mvns	r1, r2
 800f982:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 800f986:	43db      	mvns	r3, r3
 800f988:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800f98c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f994:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 800f998:	4011      	ands	r1, r2
 800f99a:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 800f99e:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 800f9a2:	400b      	ands	r3, r1
 800f9a4:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800f9a8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 800f9b4:	4051      	eors	r1, r2
 800f9b6:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 800f9ba:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 800f9be:	404b      	eors	r3, r1
 800f9c0:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800f9c4:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800f9c8:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800f9cc:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800f9d0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d8:	43d1      	mvns	r1, r2
 800f9da:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 800f9de:	43db      	mvns	r3, r3
 800f9e0:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800f9e4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ec:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 800f9f0:	4011      	ands	r1, r2
 800f9f2:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 800f9f6:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 800f9fa:	400b      	ands	r3, r1
 800f9fc:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 800fa00:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 800fa0c:	4051      	eors	r1, r2
 800fa0e:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800fa12:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 800fa16:	404b      	eors	r3, r1
 800fa18:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800fa1c:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800fa20:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800fa24:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 800fa28:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa30:	43d1      	mvns	r1, r2
 800fa32:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800fa36:	43db      	mvns	r3, r3
 800fa38:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800fa3c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa44:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 800fa48:	4011      	ands	r1, r2
 800fa4a:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 800fa4e:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 800fa52:	400b      	ands	r3, r1
 800fa54:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800fa58:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa60:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 800fa64:	4051      	eors	r1, r2
 800fa66:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 800fa6a:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 800fa6e:	404b      	eors	r3, r1
 800fa70:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800fa74:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800fa78:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800fa7c:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 800fa80:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	43d1      	mvns	r1, r2
 800fa8a:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 800fa8e:	43db      	mvns	r3, r3
 800fa90:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800fa94:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9c:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 800faa0:	4011      	ands	r1, r2
 800faa2:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 800faa6:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 800faaa:	400b      	ands	r3, r1
 800faac:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800fab0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 800fabc:	4051      	eors	r1, r2
 800fabe:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800fac2:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800fac6:	404b      	eors	r3, r1
 800fac8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800facc:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 800fad0:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800fad4:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 800fad8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	43d1      	mvns	r1, r2
 800fae2:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 800fae6:	43db      	mvns	r3, r3
 800fae8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800faec:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf4:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 800faf8:	4011      	ands	r1, r2
 800fafa:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 800fafe:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 800fb02:	400b      	ands	r3, r1
 800fb04:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800fb08:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800fb14:	4051      	eors	r1, r2
 800fb16:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800fb1a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 800fb1e:	404b      	eors	r3, r1
 800fb20:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800fb24:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 800fb28:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800fb2c:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 800fb30:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800fb34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb38:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800fb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb40:	ea80 0602 	eor.w	r6, r0, r2
 800fb44:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 800fb48:	404b      	eors	r3, r1
 800fb4a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800fb4e:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 800fb52:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800fb56:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 800fb5a:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800fb5e:	095a      	lsrs	r2, r3, #5
 800fb60:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800fb64:	06db      	lsls	r3, r3, #27
 800fb66:	4313      	orrs	r3, r2
 800fb68:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800fb6c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800fb70:	095a      	lsrs	r2, r3, #5
 800fb72:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800fb76:	06db      	lsls	r3, r3, #27
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800fb7e:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 800fb82:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800fb86:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 800fb8a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800fb8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb92:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9a:	ea80 0602 	eor.w	r6, r0, r2
 800fb9e:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 800fba2:	404b      	eors	r3, r1
 800fba4:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800fba8:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 800fbac:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800fbb0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 800fbb4:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800fbb8:	011a      	lsls	r2, r3, #4
 800fbba:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800fbbe:	0f1b      	lsrs	r3, r3, #28
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800fbc6:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800fbca:	011a      	lsls	r2, r3, #4
 800fbcc:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800fbd0:	0f1b      	lsrs	r3, r3, #28
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800fbd8:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800fbdc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800fbe0:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 800fbe4:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800fbe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbec:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf4:	ea80 0602 	eor.w	r6, r0, r2
 800fbf8:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 800fbfc:	404b      	eors	r3, r1
 800fbfe:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800fc02:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800fc06:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800fc0a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 800fc0e:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800fc12:	0d9a      	lsrs	r2, r3, #22
 800fc14:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800fc18:	029b      	lsls	r3, r3, #10
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800fc20:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800fc24:	0d9a      	lsrs	r2, r3, #22
 800fc26:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800fc2a:	029b      	lsls	r3, r3, #10
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800fc32:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 800fc36:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800fc3a:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 800fc3e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800fc42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc46:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	ea80 0602 	eor.w	r6, r0, r2
 800fc52:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 800fc56:	404b      	eors	r3, r1
 800fc58:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800fc5c:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 800fc60:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800fc64:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 800fc68:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800fc6c:	0c5a      	lsrs	r2, r3, #17
 800fc6e:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800fc72:	03db      	lsls	r3, r3, #15
 800fc74:	4313      	orrs	r3, r2
 800fc76:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800fc7a:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800fc7e:	0c5a      	lsrs	r2, r3, #17
 800fc80:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800fc84:	03db      	lsls	r3, r3, #15
 800fc86:	4313      	orrs	r3, r2
 800fc88:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800fc8c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 800fc90:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800fc94:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 800fc98:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800fc9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fca0:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800fca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca8:	ea80 0602 	eor.w	r6, r0, r2
 800fcac:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 800fcb0:	404b      	eors	r3, r1
 800fcb2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800fcb6:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 800fcba:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800fcbe:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 800fcc2:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800fcc6:	061a      	lsls	r2, r3, #24
 800fcc8:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800fccc:	0a1b      	lsrs	r3, r3, #8
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800fcd4:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800fcd8:	061a      	lsls	r2, r3, #24
 800fcda:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800fcde:	0a1b      	lsrs	r3, r3, #8
 800fce0:	4313      	orrs	r3, r2
 800fce2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800fce6:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800fcea:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800fcee:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 800fcf2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	43d1      	mvns	r1, r2
 800fcfc:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 800fd00:	43db      	mvns	r3, r3
 800fd02:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800fd06:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0e:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 800fd12:	4011      	ands	r1, r2
 800fd14:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 800fd18:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 800fd1c:	400b      	ands	r3, r1
 800fd1e:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800fd22:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2a:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 800fd2e:	4051      	eors	r1, r2
 800fd30:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 800fd34:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 800fd38:	404b      	eors	r3, r1
 800fd3a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800fd3e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800fd42:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800fd46:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 800fd4a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	43d1      	mvns	r1, r2
 800fd54:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 800fd58:	43db      	mvns	r3, r3
 800fd5a:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 800fd5e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 800fd6a:	4011      	ands	r1, r2
 800fd6c:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 800fd70:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 800fd74:	400b      	ands	r3, r1
 800fd76:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 800fd7a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd82:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 800fd86:	4051      	eors	r1, r2
 800fd88:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 800fd8c:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 800fd90:	404b      	eors	r3, r1
 800fd92:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800fd96:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 800fd9a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800fd9e:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 800fda2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdaa:	43d1      	mvns	r1, r2
 800fdac:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 800fdb0:	43db      	mvns	r3, r3
 800fdb2:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 800fdb6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 800fdc2:	4011      	ands	r1, r2
 800fdc4:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 800fdc8:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 800fdcc:	400b      	ands	r3, r1
 800fdce:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 800fdd2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdda:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 800fdde:	4051      	eors	r1, r2
 800fde0:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 800fde4:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 800fde8:	404b      	eors	r3, r1
 800fdea:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800fdee:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800fdf2:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800fdf6:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 800fdfa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe02:	43d1      	mvns	r1, r2
 800fe04:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 800fe08:	43db      	mvns	r3, r3
 800fe0a:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 800fe0e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fe12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe16:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 800fe1a:	4011      	ands	r1, r2
 800fe1c:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 800fe20:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 800fe24:	400b      	ands	r3, r1
 800fe26:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 800fe2a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fe2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe32:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 800fe36:	4051      	eors	r1, r2
 800fe38:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800fe3c:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 800fe40:	404b      	eors	r3, r1
 800fe42:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800fe46:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800fe4a:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800fe4e:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 800fe52:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fe56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5a:	43d1      	mvns	r1, r2
 800fe5c:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 800fe60:	43db      	mvns	r3, r3
 800fe62:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 800fe66:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fe6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6e:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 800fe72:	4011      	ands	r1, r2
 800fe74:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 800fe78:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 800fe7c:	400b      	ands	r3, r1
 800fe7e:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 800fe82:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8a:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 800fe8e:	4051      	eors	r1, r2
 800fe90:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800fe94:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800fe98:	404b      	eors	r3, r1
 800fe9a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800fe9e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800fea2:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800fea6:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 800feaa:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800feae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800feb2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	ea80 0602 	eor.w	r6, r0, r2
 800febe:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 800fec2:	404b      	eors	r3, r1
 800fec4:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800fec8:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 800fecc:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800fed0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 800fed4:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800fed8:	079a      	lsls	r2, r3, #30
 800feda:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800fede:	089b      	lsrs	r3, r3, #2
 800fee0:	4313      	orrs	r3, r2
 800fee2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800fee6:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800feea:	079a      	lsls	r2, r3, #30
 800feec:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800fef0:	089b      	lsrs	r3, r3, #2
 800fef2:	4313      	orrs	r3, r2
 800fef4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800fef8:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800fefc:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800ff00:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 800ff04:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800ff08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff0c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	ea80 0602 	eor.w	r6, r0, r2
 800ff18:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 800ff1c:	404b      	eors	r3, r1
 800ff1e:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800ff22:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800ff26:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800ff2a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 800ff2e:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800ff32:	05da      	lsls	r2, r3, #23
 800ff34:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800ff38:	0a5b      	lsrs	r3, r3, #9
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800ff40:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800ff44:	05da      	lsls	r2, r3, #23
 800ff46:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800ff4a:	0a5b      	lsrs	r3, r3, #9
 800ff4c:	4313      	orrs	r3, r2
 800ff4e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800ff52:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800ff56:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ff5a:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 800ff5e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800ff62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff66:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800ff6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6e:	ea80 0602 	eor.w	r6, r0, r2
 800ff72:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 800ff76:	404b      	eors	r3, r1
 800ff78:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800ff7c:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800ff80:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800ff84:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 800ff88:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800ff8c:	01da      	lsls	r2, r3, #7
 800ff8e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800ff92:	0e5b      	lsrs	r3, r3, #25
 800ff94:	4313      	orrs	r3, r2
 800ff96:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800ff9a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800ff9e:	01da      	lsls	r2, r3, #7
 800ffa0:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800ffa4:	0e5b      	lsrs	r3, r3, #25
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800ffac:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800ffb0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ffb4:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 800ffb8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800ffbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffc0:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	ea80 0602 	eor.w	r6, r0, r2
 800ffcc:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 800ffd0:	404b      	eors	r3, r1
 800ffd2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800ffd6:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800ffda:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800ffde:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 800ffe2:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800ffe6:	025a      	lsls	r2, r3, #9
 800ffe8:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800ffec:	0ddb      	lsrs	r3, r3, #23
 800ffee:	4313      	orrs	r3, r2
 800fff0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800fff4:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800fff8:	025a      	lsls	r2, r3, #9
 800fffa:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800fffe:	0ddb      	lsrs	r3, r3, #23
 8010000:	4313      	orrs	r3, r2
 8010002:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8010006:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 801000a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 801000e:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8010012:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8010016:	e9d3 0100 	ldrd	r0, r1, [r3]
 801001a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 801001e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010022:	ea80 0602 	eor.w	r6, r0, r2
 8010026:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 801002a:	404b      	eors	r3, r1
 801002c:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8010030:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8010034:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8010038:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 801003c:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8010040:	0f9a      	lsrs	r2, r3, #30
 8010042:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4313      	orrs	r3, r2
 801004a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 801004e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8010052:	0f9a      	lsrs	r2, r3, #30
 8010054:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4313      	orrs	r3, r2
 801005c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8010060:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8010064:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010068:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 801006c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	43d1      	mvns	r1, r2
 8010076:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 801007a:	43db      	mvns	r3, r3
 801007c:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8010080:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 801008c:	4011      	ands	r1, r2
 801008e:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 8010092:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 8010096:	400b      	ands	r3, r1
 8010098:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 801009c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80100a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a4:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 80100a8:	4051      	eors	r1, r2
 80100aa:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 80100ae:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 80100b2:	404b      	eors	r3, r1
 80100b4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80100b8:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80100bc:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 80100c0:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 80100c4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	43d1      	mvns	r1, r2
 80100ce:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 80100d2:	43db      	mvns	r3, r3
 80100d4:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 80100d8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 80100e4:	4011      	ands	r1, r2
 80100e6:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 80100ea:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 80100ee:	400b      	ands	r3, r1
 80100f0:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 80100f4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 8010100:	4051      	eors	r1, r2
 8010102:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8010106:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 801010a:	404b      	eors	r3, r1
 801010c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8010110:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8010114:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8010118:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 801011c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	43d1      	mvns	r1, r2
 8010126:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 801012a:	43db      	mvns	r3, r3
 801012c:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8010130:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010138:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 801013c:	4011      	ands	r1, r2
 801013e:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 8010142:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 8010146:	400b      	ands	r3, r1
 8010148:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 801014c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 8010158:	4051      	eors	r1, r2
 801015a:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 801015e:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 8010162:	404b      	eors	r3, r1
 8010164:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8010168:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 801016c:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8010170:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8010174:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	43d1      	mvns	r1, r2
 801017e:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8010182:	43db      	mvns	r3, r3
 8010184:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8010188:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801018c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010190:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 8010194:	4011      	ands	r1, r2
 8010196:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 801019a:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 801019e:	400b      	ands	r3, r1
 80101a0:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 80101a4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80101a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ac:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 80101b0:	4051      	eors	r1, r2
 80101b2:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 80101b6:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 80101ba:	404b      	eors	r3, r1
 80101bc:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80101c0:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80101c4:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80101c8:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 80101cc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80101d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d4:	43d1      	mvns	r1, r2
 80101d6:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 80101da:	43db      	mvns	r3, r3
 80101dc:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 80101e0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80101e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e8:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 80101ec:	4011      	ands	r1, r2
 80101ee:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 80101f2:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 80101f6:	400b      	ands	r3, r1
 80101f8:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80101fc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 8010208:	4051      	eors	r1, r2
 801020a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 801020e:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 8010212:	404b      	eors	r3, r1
 8010214:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8010218:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801021c:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8010220:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8010224:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8010228:	e9d3 0100 	ldrd	r0, r1, [r3]
 801022c:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8010230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010234:	ea80 0602 	eor.w	r6, r0, r2
 8010238:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 801023c:	404b      	eors	r3, r1
 801023e:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 8010242:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8010246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024a:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 801024e:	4051      	eors	r1, r2
 8010250:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 8010254:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 8010258:	404b      	eors	r3, r1
 801025a:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 801025e:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8010262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010266:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 801026a:	4051      	eors	r1, r2
 801026c:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 8010270:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 8010274:	404b      	eors	r3, r1
 8010276:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 801027a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8010286:	4051      	eors	r1, r2
 8010288:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 801028c:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 8010290:	404b      	eors	r3, r1
 8010292:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8010296:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801029a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801029e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80102a2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 80102a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102aa:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	ea80 0602 	eor.w	r6, r0, r2
 80102b6:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 80102ba:	404b      	eors	r3, r1
 80102bc:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80102c0:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 80102cc:	4051      	eors	r1, r2
 80102ce:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 80102d2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80102d6:	404b      	eors	r3, r1
 80102d8:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 80102dc:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e4:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 80102e8:	4051      	eors	r1, r2
 80102ea:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 80102ee:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80102f2:	404b      	eors	r3, r1
 80102f4:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 80102f8:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 8010304:	4051      	eors	r1, r2
 8010306:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 801030a:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 801030e:	404b      	eors	r3, r1
 8010310:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8010314:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8010318:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801031c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8010320:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8010324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010328:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	ea80 0602 	eor.w	r6, r0, r2
 8010334:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 8010338:	404b      	eors	r3, r1
 801033a:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 801033e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 801034a:	4051      	eors	r1, r2
 801034c:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 8010350:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 8010354:	404b      	eors	r3, r1
 8010356:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 801035a:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 801035e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010362:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 8010366:	4051      	eors	r1, r2
 8010368:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 801036c:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 8010370:	404b      	eors	r3, r1
 8010372:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8010376:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037e:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 8010382:	4051      	eors	r1, r2
 8010384:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8010388:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 801038c:	404b      	eors	r3, r1
 801038e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8010392:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8010396:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 801039a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 801039e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80103a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103a6:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	ea80 0602 	eor.w	r6, r0, r2
 80103b2:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 80103b6:	404b      	eors	r3, r1
 80103b8:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 80103bc:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80103c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c4:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 80103c8:	4051      	eors	r1, r2
 80103ca:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 80103ce:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 80103d2:	404b      	eors	r3, r1
 80103d4:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80103d8:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80103dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e0:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 80103e4:	4051      	eors	r1, r2
 80103e6:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 80103ea:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 80103ee:	404b      	eors	r3, r1
 80103f0:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80103f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 8010400:	4051      	eors	r1, r2
 8010402:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 8010406:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 801040a:	404b      	eors	r3, r1
 801040c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8010410:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8010414:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010418:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 801041c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8010420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010424:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8010428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042c:	ea80 0602 	eor.w	r6, r0, r2
 8010430:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 8010434:	404b      	eors	r3, r1
 8010436:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 801043a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 801043e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010442:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 8010446:	4051      	eors	r1, r2
 8010448:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 801044c:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 8010450:	404b      	eors	r3, r1
 8010452:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8010456:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 801045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045e:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 8010462:	4051      	eors	r1, r2
 8010464:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 8010468:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 801046c:	404b      	eors	r3, r1
 801046e:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8010472:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047a:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 801047e:	4051      	eors	r1, r2
 8010480:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8010484:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 8010488:	404b      	eors	r3, r1
 801048a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801048e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8010492:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010496:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 801049a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801049e:	0fda      	lsrs	r2, r3, #31
 80104a0:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80104a4:	005b      	lsls	r3, r3, #1
 80104a6:	4313      	orrs	r3, r2
 80104a8:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 80104ac:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80104b0:	0fda      	lsrs	r2, r3, #31
 80104b2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	4313      	orrs	r3, r2
 80104ba:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80104be:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80104c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c6:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 80104ca:	4051      	eors	r1, r2
 80104cc:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80104d0:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 80104d4:	404b      	eors	r3, r1
 80104d6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80104da:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80104de:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 80104e2:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 80104e6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80104ea:	0fda      	lsrs	r2, r3, #31
 80104ec:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80104f0:	005b      	lsls	r3, r3, #1
 80104f2:	4313      	orrs	r3, r2
 80104f4:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 80104f8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80104fc:	0fda      	lsrs	r2, r3, #31
 80104fe:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8010502:	005b      	lsls	r3, r3, #1
 8010504:	4313      	orrs	r3, r2
 8010506:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 801050a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 8010516:	4051      	eors	r1, r2
 8010518:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 801051c:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 8010520:	404b      	eors	r3, r1
 8010522:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8010526:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801052a:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 801052e:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8010532:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8010536:	0fda      	lsrs	r2, r3, #31
 8010538:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801053c:	005b      	lsls	r3, r3, #1
 801053e:	4313      	orrs	r3, r2
 8010540:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8010544:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8010548:	0fda      	lsrs	r2, r3, #31
 801054a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 801054e:	005b      	lsls	r3, r3, #1
 8010550:	4313      	orrs	r3, r2
 8010552:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8010556:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801055a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055e:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 8010562:	4051      	eors	r1, r2
 8010564:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8010568:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 801056c:	404b      	eors	r3, r1
 801056e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8010572:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8010576:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 801057a:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 801057e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8010582:	0fda      	lsrs	r2, r3, #31
 8010584:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	4313      	orrs	r3, r2
 801058c:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8010590:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010594:	0fda      	lsrs	r2, r3, #31
 8010596:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	4313      	orrs	r3, r2
 801059e:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 80105a2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 80105ae:	4051      	eors	r1, r2
 80105b0:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80105b4:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 80105b8:	404b      	eors	r3, r1
 80105ba:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80105be:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80105c2:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 80105c6:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 80105ca:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80105ce:	0fda      	lsrs	r2, r3, #31
 80105d0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80105d4:	005b      	lsls	r3, r3, #1
 80105d6:	4313      	orrs	r3, r2
 80105d8:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 80105dc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80105e0:	0fda      	lsrs	r2, r3, #31
 80105e2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80105e6:	005b      	lsls	r3, r3, #1
 80105e8:	4313      	orrs	r3, r2
 80105ea:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 80105ee:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80105f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f6:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 80105fa:	4051      	eors	r1, r2
 80105fc:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8010600:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 8010604:	404b      	eors	r3, r1
 8010606:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801060a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 801060e:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8010612:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8010616:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 801061a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801061e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010626:	ea80 0602 	eor.w	r6, r0, r2
 801062a:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 801062e:	404b      	eors	r3, r1
 8010630:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8010634:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8010638:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 801063c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 8010640:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8010644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010648:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801064c:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 8010650:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8010654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010658:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	ea80 0602 	eor.w	r6, r0, r2
 8010664:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 8010668:	404b      	eors	r3, r1
 801066a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801066e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8010672:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8010676:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 801067a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801067e:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8010682:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010686:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 801068a:	6803      	ldr	r3, [r0, #0]
 801068c:	031a      	lsls	r2, r3, #12
 801068e:	680b      	ldr	r3, [r1, #0]
 8010690:	0d1b      	lsrs	r3, r3, #20
 8010692:	4313      	orrs	r3, r2
 8010694:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8010698:	680b      	ldr	r3, [r1, #0]
 801069a:	031a      	lsls	r2, r3, #12
 801069c:	6803      	ldr	r3, [r0, #0]
 801069e:	0d1b      	lsrs	r3, r3, #20
 80106a0:	4313      	orrs	r3, r2
 80106a2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80106a6:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80106aa:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80106ae:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 80106b2:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80106b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80106ba:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80106be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c2:	ea80 0602 	eor.w	r6, r0, r2
 80106c6:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 80106ca:	404b      	eors	r3, r1
 80106cc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80106d0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80106d4:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80106d8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 80106dc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80106e0:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 80106e4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80106e8:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 80106ec:	6803      	ldr	r3, [r0, #0]
 80106ee:	02da      	lsls	r2, r3, #11
 80106f0:	680b      	ldr	r3, [r1, #0]
 80106f2:	0d5b      	lsrs	r3, r3, #21
 80106f4:	4313      	orrs	r3, r2
 80106f6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80106fa:	680b      	ldr	r3, [r1, #0]
 80106fc:	02da      	lsls	r2, r3, #11
 80106fe:	6803      	ldr	r3, [r0, #0]
 8010700:	0d5b      	lsrs	r3, r3, #21
 8010702:	4313      	orrs	r3, r2
 8010704:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8010708:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 801070c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010710:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 8010714:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8010718:	e9d3 0100 	ldrd	r0, r1, [r3]
 801071c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010724:	ea80 0602 	eor.w	r6, r0, r2
 8010728:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 801072c:	404b      	eors	r3, r1
 801072e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8010732:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8010736:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 801073a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 801073e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010742:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8010746:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801074a:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 801074e:	6803      	ldr	r3, [r0, #0]
 8010750:	0ada      	lsrs	r2, r3, #11
 8010752:	680b      	ldr	r3, [r1, #0]
 8010754:	055b      	lsls	r3, r3, #21
 8010756:	4313      	orrs	r3, r2
 8010758:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 801075c:	680b      	ldr	r3, [r1, #0]
 801075e:	0ada      	lsrs	r2, r3, #11
 8010760:	6803      	ldr	r3, [r0, #0]
 8010762:	055b      	lsls	r3, r3, #21
 8010764:	4313      	orrs	r3, r2
 8010766:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 801076a:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 801076e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010772:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8010776:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 801077a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801077e:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010786:	ea80 0602 	eor.w	r6, r0, r2
 801078a:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 801078e:	404b      	eors	r3, r1
 8010790:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8010794:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8010798:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 801079c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 80107a0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80107a4:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80107a8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80107ac:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 80107b0:	6803      	ldr	r3, [r0, #0]
 80107b2:	0c9a      	lsrs	r2, r3, #18
 80107b4:	680b      	ldr	r3, [r1, #0]
 80107b6:	039b      	lsls	r3, r3, #14
 80107b8:	4313      	orrs	r3, r2
 80107ba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80107be:	680b      	ldr	r3, [r1, #0]
 80107c0:	0c9a      	lsrs	r2, r3, #18
 80107c2:	6803      	ldr	r3, [r0, #0]
 80107c4:	039b      	lsls	r3, r3, #14
 80107c6:	4313      	orrs	r3, r2
 80107c8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80107cc:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80107d0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80107d4:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 80107d8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80107dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e0:	43d1      	mvns	r1, r2
 80107e2:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 80107e6:	43db      	mvns	r3, r3
 80107e8:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 80107ec:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 80107f8:	4011      	ands	r1, r2
 80107fa:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 80107fe:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 8010802:	400b      	ands	r3, r1
 8010804:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8010808:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010810:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 8010814:	4051      	eors	r1, r2
 8010816:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 801081a:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 801081e:	404b      	eors	r3, r1
 8010820:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8010824:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 8010828:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 801082c:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8010830:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8010834:	3301      	adds	r3, #1
 8010836:	4af4      	ldr	r2, [pc, #976]	; (8010c08 <KeccakF1600_StatePermute+0x223c>)
 8010838:	00db      	lsls	r3, r3, #3
 801083a:	4413      	add	r3, r2
 801083c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010840:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8010844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010848:	ea82 0600 	eor.w	r6, r2, r0
 801084c:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 8010850:	404b      	eors	r3, r1
 8010852:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8010856:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 801085a:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 801085e:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8010862:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	43d1      	mvns	r1, r2
 801086c:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 8010870:	43db      	mvns	r3, r3
 8010872:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8010876:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 8010882:	4011      	ands	r1, r2
 8010884:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 8010888:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 801088c:	400b      	ands	r3, r1
 801088e:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8010892:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 801089e:	4051      	eors	r1, r2
 80108a0:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80108a4:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 80108a8:	404b      	eors	r3, r1
 80108aa:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80108ae:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80108b2:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80108b6:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 80108ba:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80108be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c2:	43d1      	mvns	r1, r2
 80108c4:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 80108c8:	43db      	mvns	r3, r3
 80108ca:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 80108ce:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 80108da:	4011      	ands	r1, r2
 80108dc:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 80108e0:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 80108e4:	400b      	ands	r3, r1
 80108e6:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 80108ea:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 80108f6:	4051      	eors	r1, r2
 80108f8:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 80108fc:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 8010900:	404b      	eors	r3, r1
 8010902:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8010906:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 801090a:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 801090e:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 8010912:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	43d1      	mvns	r1, r2
 801091c:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8010920:	43db      	mvns	r3, r3
 8010922:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8010926:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 8010932:	4011      	ands	r1, r2
 8010934:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 8010938:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 801093c:	400b      	ands	r3, r1
 801093e:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8010942:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 801094e:	4051      	eors	r1, r2
 8010950:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8010954:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8010958:	404b      	eors	r3, r1
 801095a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801095e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8010962:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8010966:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 801096a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	43d1      	mvns	r1, r2
 8010974:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8010978:	43db      	mvns	r3, r3
 801097a:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 801097e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 801098a:	4011      	ands	r1, r2
 801098c:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 8010990:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 8010994:	400b      	ands	r3, r1
 8010996:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 801099a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801099e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a2:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 80109a6:	4051      	eors	r1, r2
 80109a8:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 80109ac:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 80109b0:	404b      	eors	r3, r1
 80109b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80109b6:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80109ba:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 80109be:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 80109c2:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80109c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109ca:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	ea80 0602 	eor.w	r6, r0, r2
 80109d6:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 80109da:	404b      	eors	r3, r1
 80109dc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80109e0:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 80109e4:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80109e8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 80109ec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80109f0:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 80109f4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80109f8:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 80109fc:	6803      	ldr	r3, [r0, #0]
 80109fe:	091a      	lsrs	r2, r3, #4
 8010a00:	680b      	ldr	r3, [r1, #0]
 8010a02:	071b      	lsls	r3, r3, #28
 8010a04:	4313      	orrs	r3, r2
 8010a06:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8010a0a:	680b      	ldr	r3, [r1, #0]
 8010a0c:	091a      	lsrs	r2, r3, #4
 8010a0e:	6803      	ldr	r3, [r0, #0]
 8010a10:	071b      	lsls	r3, r3, #28
 8010a12:	4313      	orrs	r3, r2
 8010a14:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8010a18:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8010a1c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010a20:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8010a24:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8010a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a2c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a34:	ea80 0602 	eor.w	r6, r0, r2
 8010a38:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 8010a3c:	404b      	eors	r3, r1
 8010a3e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8010a42:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8010a46:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8010a4a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8010a4e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010a52:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8010a56:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010a5a:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8010a5e:	6803      	ldr	r3, [r0, #0]
 8010a60:	0b1a      	lsrs	r2, r3, #12
 8010a62:	680b      	ldr	r3, [r1, #0]
 8010a64:	051b      	lsls	r3, r3, #20
 8010a66:	4313      	orrs	r3, r2
 8010a68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8010a6c:	680b      	ldr	r3, [r1, #0]
 8010a6e:	0b1a      	lsrs	r2, r3, #12
 8010a70:	6803      	ldr	r3, [r0, #0]
 8010a72:	051b      	lsls	r3, r3, #20
 8010a74:	4313      	orrs	r3, r2
 8010a76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8010a7a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8010a7e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010a82:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8010a86:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8010a8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a8e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a96:	ea80 0602 	eor.w	r6, r0, r2
 8010a9a:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 8010a9e:	404b      	eors	r3, r1
 8010aa0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010aa4:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8010aa8:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8010aac:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8010ab0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ab4:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8010ab8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010abc:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8010ac0:	6803      	ldr	r3, [r0, #0]
 8010ac2:	0f5a      	lsrs	r2, r3, #29
 8010ac4:	680b      	ldr	r3, [r1, #0]
 8010ac6:	00db      	lsls	r3, r3, #3
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010ace:	680b      	ldr	r3, [r1, #0]
 8010ad0:	0f5a      	lsrs	r2, r3, #29
 8010ad2:	6803      	ldr	r3, [r0, #0]
 8010ad4:	00db      	lsls	r3, r3, #3
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8010adc:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8010ae0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010ae4:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8010ae8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010af0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af8:	ea80 0602 	eor.w	r6, r0, r2
 8010afc:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 8010b00:	404b      	eors	r3, r1
 8010b02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010b06:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8010b0a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8010b0e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8010b12:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b16:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8010b1a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b1e:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8010b22:	6803      	ldr	r3, [r0, #0]
 8010b24:	035a      	lsls	r2, r3, #13
 8010b26:	680b      	ldr	r3, [r1, #0]
 8010b28:	0cdb      	lsrs	r3, r3, #19
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010b30:	680b      	ldr	r3, [r1, #0]
 8010b32:	035a      	lsls	r2, r3, #13
 8010b34:	6803      	ldr	r3, [r0, #0]
 8010b36:	0cdb      	lsrs	r3, r3, #19
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010b3e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8010b42:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010b46:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8010b4a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b52:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5a:	ea80 0602 	eor.w	r6, r0, r2
 8010b5e:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 8010b62:	404b      	eors	r3, r1
 8010b64:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010b68:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8010b6c:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8010b70:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8010b74:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b78:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8010b7c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b80:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8010b84:	6803      	ldr	r3, [r0, #0]
 8010b86:	075a      	lsls	r2, r3, #29
 8010b88:	680b      	ldr	r3, [r1, #0]
 8010b8a:	08db      	lsrs	r3, r3, #3
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8010b92:	680b      	ldr	r3, [r1, #0]
 8010b94:	075a      	lsls	r2, r3, #29
 8010b96:	6803      	ldr	r3, [r0, #0]
 8010b98:	08db      	lsrs	r3, r3, #3
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8010ba0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8010ba4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010ba8:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8010bac:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb4:	43d1      	mvns	r1, r2
 8010bb6:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8010bba:	43db      	mvns	r3, r3
 8010bbc:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8010bc0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 8010bcc:	4011      	ands	r1, r2
 8010bce:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 8010bd2:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 8010bd6:	400b      	ands	r3, r1
 8010bd8:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8010bdc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be4:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 8010be8:	4051      	eors	r1, r2
 8010bea:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8010bee:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 8010bf2:	404b      	eors	r3, r1
 8010bf4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8010bf8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8010bfc:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8010c00:	e9c1 2300 	strd	r2, r3, [r1]
 8010c04:	e002      	b.n	8010c0c <KeccakF1600_StatePermute+0x2240>
 8010c06:	bf00      	nop
 8010c08:	08016548 	.word	0x08016548
            Age =   BCe ^((~BCi)&  BCo );
 8010c0c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	43d1      	mvns	r1, r2
 8010c16:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8010c1a:	43db      	mvns	r3, r3
 8010c1c:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8010c20:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c28:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 8010c2c:	4011      	ands	r1, r2
 8010c2e:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 8010c32:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 8010c36:	400b      	ands	r3, r1
 8010c38:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8010c3c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c44:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 8010c48:	4051      	eors	r1, r2
 8010c4a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8010c4e:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 8010c52:	404b      	eors	r3, r1
 8010c54:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010c58:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8010c5c:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8010c60:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8010c64:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6c:	43d1      	mvns	r1, r2
 8010c6e:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8010c72:	43db      	mvns	r3, r3
 8010c74:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8010c78:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c80:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8010c84:	4011      	ands	r1, r2
 8010c86:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 8010c8a:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8010c8e:	400b      	ands	r3, r1
 8010c90:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8010c94:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9c:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 8010ca0:	4051      	eors	r1, r2
 8010ca2:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8010ca6:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 8010caa:	404b      	eors	r3, r1
 8010cac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010cb0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8010cb4:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8010cb8:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8010cbc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc4:	43d1      	mvns	r1, r2
 8010cc6:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8010cca:	43db      	mvns	r3, r3
 8010ccc:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8010cd0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8010cdc:	4011      	ands	r1, r2
 8010cde:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 8010ce2:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 8010ce6:	400b      	ands	r3, r1
 8010ce8:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8010cec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf4:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 8010cf8:	4051      	eors	r1, r2
 8010cfa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8010cfe:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 8010d02:	404b      	eors	r3, r1
 8010d04:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d08:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8010d0c:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8010d10:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8010d14:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1c:	43d1      	mvns	r1, r2
 8010d1e:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8010d22:	43db      	mvns	r3, r3
 8010d24:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8010d28:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d30:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 8010d34:	4011      	ands	r1, r2
 8010d36:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 8010d3a:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8010d3e:	400b      	ands	r3, r1
 8010d40:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8010d44:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4c:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 8010d50:	4051      	eors	r1, r2
 8010d52:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8010d56:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 8010d5a:	404b      	eors	r3, r1
 8010d5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010d60:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8010d64:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8010d68:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8010d6c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8010d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d74:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	ea80 0602 	eor.w	r6, r0, r2
 8010d80:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8010d84:	404b      	eors	r3, r1
 8010d86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010d8a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8010d8e:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8010d92:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8010d96:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010d9a:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8010d9e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010da2:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8010da6:	6803      	ldr	r3, [r0, #0]
 8010da8:	0fda      	lsrs	r2, r3, #31
 8010daa:	680b      	ldr	r3, [r1, #0]
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	4313      	orrs	r3, r2
 8010db0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8010db4:	680b      	ldr	r3, [r1, #0]
 8010db6:	0fda      	lsrs	r2, r3, #31
 8010db8:	6803      	ldr	r3, [r0, #0]
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8010dc2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8010dc6:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010dca:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8010dce:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8010dd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010dd6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dde:	ea80 0602 	eor.w	r6, r0, r2
 8010de2:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8010de6:	404b      	eors	r3, r1
 8010de8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8010dec:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8010df0:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8010df4:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8010df8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010dfc:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8010e00:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e04:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8010e08:	6803      	ldr	r3, [r0, #0]
 8010e0a:	0e9a      	lsrs	r2, r3, #26
 8010e0c:	680b      	ldr	r3, [r1, #0]
 8010e0e:	019b      	lsls	r3, r3, #6
 8010e10:	4313      	orrs	r3, r2
 8010e12:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8010e16:	680b      	ldr	r3, [r1, #0]
 8010e18:	0e9a      	lsrs	r2, r3, #26
 8010e1a:	6803      	ldr	r3, [r0, #0]
 8010e1c:	019b      	lsls	r3, r3, #6
 8010e1e:	4313      	orrs	r3, r2
 8010e20:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8010e24:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8010e28:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010e2c:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8010e30:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8010e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e38:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	ea80 0602 	eor.w	r6, r0, r2
 8010e44:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8010e48:	404b      	eors	r3, r1
 8010e4a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8010e4e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8010e52:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8010e56:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8010e5a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e5e:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8010e62:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e66:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8010e6a:	6803      	ldr	r3, [r0, #0]
 8010e6c:	09da      	lsrs	r2, r3, #7
 8010e6e:	680b      	ldr	r3, [r1, #0]
 8010e70:	065b      	lsls	r3, r3, #25
 8010e72:	4313      	orrs	r3, r2
 8010e74:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8010e78:	680b      	ldr	r3, [r1, #0]
 8010e7a:	09da      	lsrs	r2, r3, #7
 8010e7c:	6803      	ldr	r3, [r0, #0]
 8010e7e:	065b      	lsls	r3, r3, #25
 8010e80:	4313      	orrs	r3, r2
 8010e82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8010e86:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8010e8a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010e8e:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8010e92:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8010e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e9a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea2:	ea80 0602 	eor.w	r6, r0, r2
 8010ea6:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8010eaa:	404b      	eors	r3, r1
 8010eac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8010eb0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8010eb4:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8010eb8:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8010ebc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ec0:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8010ec4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ec8:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 8010ecc:	6803      	ldr	r3, [r0, #0]
 8010ece:	0e1a      	lsrs	r2, r3, #24
 8010ed0:	680b      	ldr	r3, [r1, #0]
 8010ed2:	021b      	lsls	r3, r3, #8
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010eda:	680b      	ldr	r3, [r1, #0]
 8010edc:	0e1a      	lsrs	r2, r3, #24
 8010ede:	6803      	ldr	r3, [r0, #0]
 8010ee0:	021b      	lsls	r3, r3, #8
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8010ee8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8010eec:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010ef0:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8010ef4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010efc:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f04:	ea80 0602 	eor.w	r6, r0, r2
 8010f08:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8010f0c:	404b      	eors	r3, r1
 8010f0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010f12:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8010f16:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8010f1a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8010f1e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f22:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8010f26:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f2a:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8010f2e:	6803      	ldr	r3, [r0, #0]
 8010f30:	0b9a      	lsrs	r2, r3, #14
 8010f32:	680b      	ldr	r3, [r1, #0]
 8010f34:	049b      	lsls	r3, r3, #18
 8010f36:	4313      	orrs	r3, r2
 8010f38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010f3c:	680b      	ldr	r3, [r1, #0]
 8010f3e:	0b9a      	lsrs	r2, r3, #14
 8010f40:	6803      	ldr	r3, [r0, #0]
 8010f42:	049b      	lsls	r3, r3, #18
 8010f44:	4313      	orrs	r3, r2
 8010f46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8010f4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010f4e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010f52:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8010f56:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	43d1      	mvns	r1, r2
 8010f60:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8010f64:	43db      	mvns	r3, r3
 8010f66:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8010f6a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 8010f76:	4011      	ands	r1, r2
 8010f78:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 8010f7c:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 8010f80:	400b      	ands	r3, r1
 8010f82:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8010f86:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8e:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 8010f92:	4051      	eors	r1, r2
 8010f94:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8010f98:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 8010f9c:	404b      	eors	r3, r1
 8010f9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010fa2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8010fa6:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8010faa:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8010fae:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb6:	43d1      	mvns	r1, r2
 8010fb8:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8010fbc:	43db      	mvns	r3, r3
 8010fbe:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8010fc2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fca:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 8010fce:	4011      	ands	r1, r2
 8010fd0:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8010fd4:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 8010fd8:	400b      	ands	r3, r1
 8010fda:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8010fde:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe6:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 8010fea:	4051      	eors	r1, r2
 8010fec:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8010ff0:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 8010ff4:	404b      	eors	r3, r1
 8010ff6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010ffa:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8010ffe:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8011002:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8011006:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100e:	43d1      	mvns	r1, r2
 8011010:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8011014:	43db      	mvns	r3, r3
 8011016:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 801101a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011022:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8011026:	4011      	ands	r1, r2
 8011028:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 801102c:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 8011030:	400b      	ands	r3, r1
 8011032:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8011036:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103e:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 8011042:	4051      	eors	r1, r2
 8011044:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011048:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 801104c:	404b      	eors	r3, r1
 801104e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011052:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8011056:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 801105a:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 801105e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011066:	43d1      	mvns	r1, r2
 8011068:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 801106c:	43db      	mvns	r3, r3
 801106e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8011072:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801107e:	4011      	ands	r1, r2
 8011080:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 8011084:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8011088:	400b      	ands	r3, r1
 801108a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 801108e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011096:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 801109a:	4051      	eors	r1, r2
 801109c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80110a0:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 80110a4:	404b      	eors	r3, r1
 80110a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80110aa:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80110ae:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80110b2:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 80110b6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80110ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110be:	43d1      	mvns	r1, r2
 80110c0:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 80110c4:	43db      	mvns	r3, r3
 80110c6:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 80110ca:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80110ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d2:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80110d6:	4011      	ands	r1, r2
 80110d8:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 80110dc:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80110e0:	400b      	ands	r3, r1
 80110e2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 80110e6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 80110f2:	4051      	eors	r1, r2
 80110f4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80110f8:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 80110fc:	404b      	eors	r3, r1
 80110fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011102:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011106:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 801110a:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 801110e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011112:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011116:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	ea80 0602 	eor.w	r6, r0, r2
 8011122:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 8011126:	404b      	eors	r3, r1
 8011128:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801112c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8011130:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8011134:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8011138:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801113c:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8011140:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011144:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8011148:	6803      	ldr	r3, [r0, #0]
 801114a:	095a      	lsrs	r2, r3, #5
 801114c:	680b      	ldr	r3, [r1, #0]
 801114e:	06db      	lsls	r3, r3, #27
 8011150:	4313      	orrs	r3, r2
 8011152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011156:	680b      	ldr	r3, [r1, #0]
 8011158:	095a      	lsrs	r2, r3, #5
 801115a:	6803      	ldr	r3, [r0, #0]
 801115c:	06db      	lsls	r3, r3, #27
 801115e:	4313      	orrs	r3, r2
 8011160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011164:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8011168:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801116c:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8011170:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8011174:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011178:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 801117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011180:	ea80 0602 	eor.w	r6, r0, r2
 8011184:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 8011188:	404b      	eors	r3, r1
 801118a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801118e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8011192:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8011196:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 801119a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801119e:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 80111a2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80111a6:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80111aa:	6803      	ldr	r3, [r0, #0]
 80111ac:	011a      	lsls	r2, r3, #4
 80111ae:	680b      	ldr	r3, [r1, #0]
 80111b0:	0f1b      	lsrs	r3, r3, #28
 80111b2:	4313      	orrs	r3, r2
 80111b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80111b8:	680b      	ldr	r3, [r1, #0]
 80111ba:	011a      	lsls	r2, r3, #4
 80111bc:	6803      	ldr	r3, [r0, #0]
 80111be:	0f1b      	lsrs	r3, r3, #28
 80111c0:	4313      	orrs	r3, r2
 80111c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80111c6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80111ca:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80111ce:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 80111d2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80111d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111da:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80111de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e2:	ea80 0602 	eor.w	r6, r0, r2
 80111e6:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 80111ea:	404b      	eors	r3, r1
 80111ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80111f0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80111f4:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80111f8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 80111fc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011200:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 8011204:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011208:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 801120c:	6803      	ldr	r3, [r0, #0]
 801120e:	0d9a      	lsrs	r2, r3, #22
 8011210:	680b      	ldr	r3, [r1, #0]
 8011212:	029b      	lsls	r3, r3, #10
 8011214:	4313      	orrs	r3, r2
 8011216:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801121a:	680b      	ldr	r3, [r1, #0]
 801121c:	0d9a      	lsrs	r2, r3, #22
 801121e:	6803      	ldr	r3, [r0, #0]
 8011220:	029b      	lsls	r3, r3, #10
 8011222:	4313      	orrs	r3, r2
 8011224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011228:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801122c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8011230:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 8011234:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8011238:	e9d3 0100 	ldrd	r0, r1, [r3]
 801123c:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8011240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011244:	ea80 0602 	eor.w	r6, r0, r2
 8011248:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 801124c:	404b      	eors	r3, r1
 801124e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011252:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011256:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 801125a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 801125e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011262:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 8011266:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801126a:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 801126e:	6803      	ldr	r3, [r0, #0]
 8011270:	0c5a      	lsrs	r2, r3, #17
 8011272:	680b      	ldr	r3, [r1, #0]
 8011274:	03db      	lsls	r3, r3, #15
 8011276:	4313      	orrs	r3, r2
 8011278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801127c:	680b      	ldr	r3, [r1, #0]
 801127e:	0c5a      	lsrs	r2, r3, #17
 8011280:	6803      	ldr	r3, [r0, #0]
 8011282:	03db      	lsls	r3, r3, #15
 8011284:	4313      	orrs	r3, r2
 8011286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801128a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801128e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8011292:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8011296:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801129a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801129e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80112a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a6:	ea80 0602 	eor.w	r6, r0, r2
 80112aa:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 80112ae:	404b      	eors	r3, r1
 80112b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80112b4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80112b8:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80112bc:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 80112c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112c4:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80112c8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112cc:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 80112d0:	6803      	ldr	r3, [r0, #0]
 80112d2:	061a      	lsls	r2, r3, #24
 80112d4:	680b      	ldr	r3, [r1, #0]
 80112d6:	0a1b      	lsrs	r3, r3, #8
 80112d8:	4313      	orrs	r3, r2
 80112da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80112de:	680b      	ldr	r3, [r1, #0]
 80112e0:	061a      	lsls	r2, r3, #24
 80112e2:	6803      	ldr	r3, [r0, #0]
 80112e4:	0a1b      	lsrs	r3, r3, #8
 80112e6:	4313      	orrs	r3, r2
 80112e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80112ec:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80112f0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80112f4:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 80112f8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80112fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011300:	43d1      	mvns	r1, r2
 8011302:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 8011306:	43db      	mvns	r3, r3
 8011308:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801130c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011314:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8011318:	4011      	ands	r1, r2
 801131a:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 801131e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8011322:	400b      	ands	r3, r1
 8011324:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8011328:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011330:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011334:	4051      	eors	r1, r2
 8011336:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801133a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 801133e:	404b      	eors	r3, r1
 8011340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011344:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8011348:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 801134c:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 8011350:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	43d1      	mvns	r1, r2
 801135a:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 801135e:	43db      	mvns	r3, r3
 8011360:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8011364:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8011370:	4011      	ands	r1, r2
 8011372:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 8011376:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801137a:	400b      	ands	r3, r1
 801137c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8011380:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801138c:	4051      	eors	r1, r2
 801138e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8011392:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8011396:	404b      	eors	r3, r1
 8011398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801139c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80113a0:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80113a4:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 80113a8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b0:	43d1      	mvns	r1, r2
 80113b2:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 80113b6:	43db      	mvns	r3, r3
 80113b8:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80113bc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80113c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c4:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 80113c8:	4011      	ands	r1, r2
 80113ca:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 80113ce:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80113d2:	400b      	ands	r3, r1
 80113d4:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80113d8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80113dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e0:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80113e4:	4051      	eors	r1, r2
 80113e6:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80113ea:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80113ee:	404b      	eors	r3, r1
 80113f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80113f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80113f8:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80113fc:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 8011400:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011408:	43d1      	mvns	r1, r2
 801140a:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 801140e:	43db      	mvns	r3, r3
 8011410:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8011414:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8011420:	4011      	ands	r1, r2
 8011422:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 8011426:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 801142a:	400b      	ands	r3, r1
 801142c:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8011430:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011438:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 801143c:	4051      	eors	r1, r2
 801143e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011442:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8011446:	404b      	eors	r3, r1
 8011448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801144c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8011450:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8011454:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 8011458:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011460:	43d1      	mvns	r1, r2
 8011462:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8011466:	43db      	mvns	r3, r3
 8011468:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801146c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011474:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8011478:	4011      	ands	r1, r2
 801147a:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 801147e:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8011482:	400b      	ands	r3, r1
 8011484:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8011488:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011490:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8011494:	4051      	eors	r1, r2
 8011496:	67b9      	str	r1, [r7, #120]	; 0x78
 8011498:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 801149c:	404b      	eors	r3, r1
 801149e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80114a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80114a4:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80114a8:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 80114ac:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80114b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80114b4:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80114b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114bc:	ea80 0602 	eor.w	r6, r0, r2
 80114c0:	673e      	str	r6, [r7, #112]	; 0x70
 80114c2:	404b      	eors	r3, r1
 80114c4:	677b      	str	r3, [r7, #116]	; 0x74
 80114c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80114ca:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 80114ce:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80114d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80114d6:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80114da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80114de:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 80114e2:	6803      	ldr	r3, [r0, #0]
 80114e4:	079a      	lsls	r2, r3, #30
 80114e6:	680b      	ldr	r3, [r1, #0]
 80114e8:	089b      	lsrs	r3, r3, #2
 80114ea:	4313      	orrs	r3, r2
 80114ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80114ee:	680b      	ldr	r3, [r1, #0]
 80114f0:	079a      	lsls	r2, r3, #30
 80114f2:	6803      	ldr	r3, [r0, #0]
 80114f4:	089b      	lsrs	r3, r3, #2
 80114f6:	4313      	orrs	r3, r2
 80114f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80114fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80114fe:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8011502:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 8011506:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 801150a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801150e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8011512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011516:	ea80 0602 	eor.w	r6, r0, r2
 801151a:	663e      	str	r6, [r7, #96]	; 0x60
 801151c:	404b      	eors	r3, r1
 801151e:	667b      	str	r3, [r7, #100]	; 0x64
 8011520:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011524:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8011528:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 801152c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011530:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8011534:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011538:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 801153c:	6803      	ldr	r3, [r0, #0]
 801153e:	05da      	lsls	r2, r3, #23
 8011540:	680b      	ldr	r3, [r1, #0]
 8011542:	0a5b      	lsrs	r3, r3, #9
 8011544:	4313      	orrs	r3, r2
 8011546:	65bb      	str	r3, [r7, #88]	; 0x58
 8011548:	680b      	ldr	r3, [r1, #0]
 801154a:	05da      	lsls	r2, r3, #23
 801154c:	6803      	ldr	r3, [r0, #0]
 801154e:	0a5b      	lsrs	r3, r3, #9
 8011550:	4313      	orrs	r3, r2
 8011552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011554:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011558:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801155c:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8011560:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011564:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011568:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 801156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011570:	ea80 0602 	eor.w	r6, r0, r2
 8011574:	653e      	str	r6, [r7, #80]	; 0x50
 8011576:	404b      	eors	r3, r1
 8011578:	657b      	str	r3, [r7, #84]	; 0x54
 801157a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801157e:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8011582:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 8011586:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801158a:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 801158e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011592:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8011596:	6803      	ldr	r3, [r0, #0]
 8011598:	01da      	lsls	r2, r3, #7
 801159a:	680b      	ldr	r3, [r1, #0]
 801159c:	0e5b      	lsrs	r3, r3, #25
 801159e:	4313      	orrs	r3, r2
 80115a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80115a2:	680b      	ldr	r3, [r1, #0]
 80115a4:	01da      	lsls	r2, r3, #7
 80115a6:	6803      	ldr	r3, [r0, #0]
 80115a8:	0e5b      	lsrs	r3, r3, #25
 80115aa:	4313      	orrs	r3, r2
 80115ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80115b2:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80115b6:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 80115ba:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80115be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115c2:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80115c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ca:	ea80 0602 	eor.w	r6, r0, r2
 80115ce:	643e      	str	r6, [r7, #64]	; 0x40
 80115d0:	404b      	eors	r3, r1
 80115d2:	647b      	str	r3, [r7, #68]	; 0x44
 80115d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80115d8:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 80115dc:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 80115e0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115e4:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80115e8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115ec:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80115f0:	6803      	ldr	r3, [r0, #0]
 80115f2:	025a      	lsls	r2, r3, #9
 80115f4:	680b      	ldr	r3, [r1, #0]
 80115f6:	0ddb      	lsrs	r3, r3, #23
 80115f8:	4313      	orrs	r3, r2
 80115fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80115fc:	680b      	ldr	r3, [r1, #0]
 80115fe:	025a      	lsls	r2, r3, #9
 8011600:	6803      	ldr	r3, [r0, #0]
 8011602:	0ddb      	lsrs	r3, r3, #23
 8011604:	4313      	orrs	r3, r2
 8011606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801160c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8011610:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 8011614:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8011618:	e9d3 0100 	ldrd	r0, r1, [r3]
 801161c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8011620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011624:	ea80 0602 	eor.w	r6, r0, r2
 8011628:	633e      	str	r6, [r7, #48]	; 0x30
 801162a:	404b      	eors	r3, r1
 801162c:	637b      	str	r3, [r7, #52]	; 0x34
 801162e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011632:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8011636:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 801163a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801163e:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8011642:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011646:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 801164a:	6803      	ldr	r3, [r0, #0]
 801164c:	0f9a      	lsrs	r2, r3, #30
 801164e:	680b      	ldr	r3, [r1, #0]
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	4313      	orrs	r3, r2
 8011654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011656:	680b      	ldr	r3, [r1, #0]
 8011658:	0f9a      	lsrs	r2, r3, #30
 801165a:	6803      	ldr	r3, [r0, #0]
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	4313      	orrs	r3, r2
 8011660:	62bb      	str	r3, [r7, #40]	; 0x28
 8011662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011666:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 801166a:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 801166e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011676:	43d1      	mvns	r1, r2
 8011678:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 801167c:	43db      	mvns	r3, r3
 801167e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8011682:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 801168e:	4011      	ands	r1, r2
 8011690:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 8011694:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8011698:	400b      	ands	r3, r1
 801169a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801169e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80116a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a6:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80116aa:	4051      	eors	r1, r2
 80116ac:	6239      	str	r1, [r7, #32]
 80116ae:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 80116b2:	404b      	eors	r3, r1
 80116b4:	627b      	str	r3, [r7, #36]	; 0x24
 80116b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80116ba:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80116be:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 80116c2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80116c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ca:	43d1      	mvns	r1, r2
 80116cc:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 80116d0:	43db      	mvns	r3, r3
 80116d2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 80116d6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80116da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116de:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 80116e2:	4011      	ands	r1, r2
 80116e4:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 80116e8:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 80116ec:	400b      	ands	r3, r1
 80116ee:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80116f2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80116f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fa:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80116fe:	4051      	eors	r1, r2
 8011700:	61b9      	str	r1, [r7, #24]
 8011702:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8011706:	404b      	eors	r3, r1
 8011708:	61fb      	str	r3, [r7, #28]
 801170a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801170e:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8011712:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 8011716:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171e:	43d1      	mvns	r1, r2
 8011720:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8011724:	43db      	mvns	r3, r3
 8011726:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 801172a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011732:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8011736:	4011      	ands	r1, r2
 8011738:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 801173c:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8011740:	400b      	ands	r3, r1
 8011742:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8011746:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8011752:	4051      	eors	r1, r2
 8011754:	6139      	str	r1, [r7, #16]
 8011756:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 801175a:	404b      	eors	r3, r1
 801175c:	617b      	str	r3, [r7, #20]
 801175e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011762:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8011766:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 801176a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011772:	43d1      	mvns	r1, r2
 8011774:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8011778:	43db      	mvns	r3, r3
 801177a:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 801177e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011786:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 801178a:	ea01 0a02 	and.w	sl, r1, r2
 801178e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8011792:	ea01 0b03 	and.w	fp, r1, r3
 8011796:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179e:	ea82 010a 	eor.w	r1, r2, sl
 80117a2:	60b9      	str	r1, [r7, #8]
 80117a4:	ea83 030b 	eor.w	r3, r3, fp
 80117a8:	60fb      	str	r3, [r7, #12]
 80117aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80117ae:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 80117b2:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 80117b6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80117ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117be:	ea6f 0802 	mvn.w	r8, r2
 80117c2:	ea6f 0903 	mvn.w	r9, r3
 80117c6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80117ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ce:	ea08 0402 	and.w	r4, r8, r2
 80117d2:	ea09 0503 	and.w	r5, r9, r3
 80117d6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80117da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117de:	ea82 0104 	eor.w	r1, r2, r4
 80117e2:	6039      	str	r1, [r7, #0]
 80117e4:	406b      	eors	r3, r5
 80117e6:	607b      	str	r3, [r7, #4]
 80117e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117ec:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80117f0:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 80117f4:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80117f8:	3302      	adds	r3, #2
 80117fa:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80117fe:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8011802:	2b17      	cmp	r3, #23
 8011804:	f77d aa04 	ble.w	800ec10 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8011808:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801180c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011810:	6819      	ldr	r1, [r3, #0]
 8011812:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8011816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 801181e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011822:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f103 0108 	add.w	r1, r3, #8
 801182c:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8011830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011834:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8011838:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801183c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f103 0110 	add.w	r1, r3, #16
 8011846:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 801184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 8011852:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011856:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	f103 0118 	add.w	r1, r3, #24
 8011860:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8011864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011868:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 801186c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011870:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	f103 0120 	add.w	r1, r3, #32
 801187a:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 801187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011882:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8011886:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801188a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8011894:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8011898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 80118a0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118a4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118ae:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 80118b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b6:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 80118ba:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118c8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80118cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d0:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 80118d4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80118e2:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80118e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ea:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 80118ee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80118fc:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8011908:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801190c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8011916:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 801191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191e:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 8011922:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011926:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8011930:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8011934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011938:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 801193c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011940:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f103 0160 	add.w	r1, r3, #96	; 0x60
 801194a:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8011956:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801195a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8011964:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8011968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196c:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8011970:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011974:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 801197e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8011982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011986:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 801198a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801198e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8011998:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 80119a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80119b2:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80119b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ba:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 80119be:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f103 0188 	add.w	r1, r3, #136	; 0x88
 80119cc:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80119d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d4:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 80119d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80119e6:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80119ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ee:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 80119f2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8011a00:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8011a0c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a10:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8011a1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a22:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8011a26:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8011a34:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8011a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3c:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8011a40:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8011a4e:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8011a5a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8011a68:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8011a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a70:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8011a74:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a78:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8011a82:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8011a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011a8e:	bf00      	nop
 8011a90:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 8011a94:	46bd      	mov	sp, r7
 8011a96:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011a9a:	4770      	bx	lr

08011a9c <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	60fb      	str	r3, [r7, #12]
 8011aa8:	e00c      	b.n	8011ac4 <keccak_init+0x28>
    state->s[i] = 0;
 8011aaa:	687a      	ldr	r2, [r7, #4]
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	18d1      	adds	r1, r2, r3
 8011ab2:	f04f 0200 	mov.w	r2, #0
 8011ab6:	f04f 0300 	mov.w	r3, #0
 8011aba:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	60fb      	str	r3, [r7, #12]
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2b18      	cmp	r3, #24
 8011ac8:	d9ef      	bls.n	8011aaa <keccak_init+0xe>
  state->pos = 0;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8011ad2:	bf00      	nop
 8011ad4:	3714      	adds	r7, #20
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr

08011ade <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8011ade:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011ae2:	b08e      	sub	sp, #56	; 0x38
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8011ae8:	6239      	str	r1, [r7, #32]
 8011aea:	61fa      	str	r2, [r7, #28]
 8011aec:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 8011aee:	2300      	movs	r3, #0
 8011af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011af2:	2300      	movs	r3, #0
 8011af4:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	f003 0307 	and.w	r3, r3, #7
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d03a      	beq.n	8011b76 <keccak_absorb+0x98>
    i = pos & 7;
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	f003 0307 	and.w	r3, r3, #7
 8011b06:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 8011b08:	e012      	b.n	8011b30 <keccak_absorb+0x52>
      t[i++] = *m++;
 8011b0a:	69ba      	ldr	r2, [r7, #24]
 8011b0c:	1c53      	adds	r3, r2, #1
 8011b0e:	61bb      	str	r3, [r7, #24]
 8011b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b12:	1c59      	adds	r1, r3, #1
 8011b14:	6379      	str	r1, [r7, #52]	; 0x34
 8011b16:	7812      	ldrb	r2, [r2, #0]
 8011b18:	3320      	adds	r3, #32
 8011b1a:	f107 0118 	add.w	r1, r7, #24
 8011b1e:	440b      	add	r3, r1
 8011b20:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 8011b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b26:	3b01      	subs	r3, #1
 8011b28:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 8011b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b32:	2b07      	cmp	r3, #7
 8011b34:	d802      	bhi.n	8011b3c <keccak_absorb+0x5e>
 8011b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d1e6      	bne.n	8011b0a <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 8011b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7fc fed9 	bl	800e8f8 <load64>
 8011b46:	4604      	mov	r4, r0
 8011b48:	460d      	mov	r5, r1
 8011b4a:	69fa      	ldr	r2, [r7, #28]
 8011b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b4e:	1ad3      	subs	r3, r2, r3
 8011b50:	f023 0307 	bic.w	r3, r3, #7
 8011b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b56:	4413      	add	r3, r2
 8011b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b5c:	69fa      	ldr	r2, [r7, #28]
 8011b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	f023 0207 	bic.w	r2, r3, #7
 8011b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b68:	4413      	add	r3, r2
 8011b6a:	ea84 0800 	eor.w	r8, r4, r0
 8011b6e:	ea85 0901 	eor.w	r9, r5, r1
 8011b72:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 8011b76:	69fb      	ldr	r3, [r7, #28]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d075      	beq.n	8011c68 <keccak_absorb+0x18a>
 8011b7c:	6a3a      	ldr	r2, [r7, #32]
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d36f      	bcc.n	8011c68 <keccak_absorb+0x18a>
    for(i=0;i<(r-pos)/8;i++)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8011b8c:	e023      	b.n	8011bd6 <keccak_absorb+0xf8>
      s[pos/8+i] ^= load64(m+8*i);
 8011b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b90:	00db      	lsls	r3, r3, #3
 8011b92:	69ba      	ldr	r2, [r7, #24]
 8011b94:	4413      	add	r3, r2
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fc feae 	bl	800e8f8 <load64>
 8011b9c:	4680      	mov	r8, r0
 8011b9e:	4689      	mov	r9, r1
 8011ba0:	69fb      	ldr	r3, [r7, #28]
 8011ba2:	08dc      	lsrs	r4, r3, #3
 8011ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba6:	4423      	add	r3, r4
 8011ba8:	00db      	lsls	r3, r3, #3
 8011baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bac:	4413      	add	r3, r2
 8011bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bb4:	4423      	add	r3, r4
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bba:	4413      	add	r3, r2
 8011bbc:	ea88 0200 	eor.w	r2, r8, r0
 8011bc0:	613a      	str	r2, [r7, #16]
 8011bc2:	ea89 0201 	eor.w	r2, r9, r1
 8011bc6:	617a      	str	r2, [r7, #20]
 8011bc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011bcc:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 8011bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8011bd6:	6a3a      	ldr	r2, [r7, #32]
 8011bd8:	69fb      	ldr	r3, [r7, #28]
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	08db      	lsrs	r3, r3, #3
 8011bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d3d4      	bcc.n	8011b8e <keccak_absorb+0xb0>
    m += r-pos;
 8011be4:	6a3a      	ldr	r2, [r7, #32]
 8011be6:	69fb      	ldr	r3, [r7, #28]
 8011be8:	1ad3      	subs	r3, r2, r3
 8011bea:	69ba      	ldr	r2, [r7, #24]
 8011bec:	4413      	add	r3, r2
 8011bee:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 8011bf0:	69fa      	ldr	r2, [r7, #28]
 8011bf2:	6a3b      	ldr	r3, [r7, #32]
 8011bf4:	1ad3      	subs	r3, r2, r3
 8011bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bf8:	4413      	add	r3, r2
 8011bfa:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 8011c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c02:	f7fc fee3 	bl	800e9cc <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 8011c06:	e02f      	b.n	8011c68 <keccak_absorb+0x18a>
    for(i=0;i<r/8;i++)
 8011c08:	2300      	movs	r3, #0
 8011c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8011c0c:	e01c      	b.n	8011c48 <keccak_absorb+0x16a>
      s[i] ^= load64(m+8*i);
 8011c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c10:	00db      	lsls	r3, r3, #3
 8011c12:	69ba      	ldr	r2, [r7, #24]
 8011c14:	4413      	add	r3, r2
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fc fe6e 	bl	800e8f8 <load64>
 8011c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c22:	4413      	add	r3, r2
 8011c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c28:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8011c2a:	00e4      	lsls	r4, r4, #3
 8011c2c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011c2e:	442c      	add	r4, r5
 8011c30:	ea80 0502 	eor.w	r5, r0, r2
 8011c34:	60bd      	str	r5, [r7, #8]
 8011c36:	404b      	eors	r3, r1
 8011c38:	60fb      	str	r3, [r7, #12]
 8011c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011c3e:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 8011c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c44:	3301      	adds	r3, #1
 8011c46:	637b      	str	r3, [r7, #52]	; 0x34
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	08db      	lsrs	r3, r3, #3
 8011c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d3dd      	bcc.n	8011c0e <keccak_absorb+0x130>
    m += r;
 8011c52:	69ba      	ldr	r2, [r7, #24]
 8011c54:	6a3b      	ldr	r3, [r7, #32]
 8011c56:	4413      	add	r3, r2
 8011c58:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 8011c5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c5c:	6a3b      	ldr	r3, [r7, #32]
 8011c5e:	1ad3      	subs	r3, r2, r3
 8011c60:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 8011c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c64:	f7fc feb2 	bl	800e9cc <KeccakF1600_StatePermute>
  while(mlen >= r) {
 8011c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c6a:	6a3b      	ldr	r3, [r7, #32]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d2cb      	bcs.n	8011c08 <keccak_absorb+0x12a>
  }

  for(i=0;i<mlen/8;i++)
 8011c70:	2300      	movs	r3, #0
 8011c72:	637b      	str	r3, [r7, #52]	; 0x34
 8011c74:	e020      	b.n	8011cb8 <keccak_absorb+0x1da>
    s[pos/8+i] ^= load64(m+8*i);
 8011c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c78:	00db      	lsls	r3, r3, #3
 8011c7a:	69ba      	ldr	r2, [r7, #24]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7fc fe3a 	bl	800e8f8 <load64>
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	08dc      	lsrs	r4, r3, #3
 8011c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c8a:	4423      	add	r3, r4
 8011c8c:	00db      	lsls	r3, r3, #3
 8011c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c90:	4413      	add	r3, r2
 8011c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c96:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8011c98:	442c      	add	r4, r5
 8011c9a:	00e4      	lsls	r4, r4, #3
 8011c9c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011c9e:	442c      	add	r4, r5
 8011ca0:	ea80 0502 	eor.w	r5, r0, r2
 8011ca4:	603d      	str	r5, [r7, #0]
 8011ca6:	404b      	eors	r3, r1
 8011ca8:	607b      	str	r3, [r7, #4]
 8011caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011cae:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 8011cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8011cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011cba:	08db      	lsrs	r3, r3, #3
 8011cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d3d9      	bcc.n	8011c76 <keccak_absorb+0x198>
  m += 8*i;
 8011cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	69ba      	ldr	r2, [r7, #24]
 8011cc8:	4413      	add	r3, r2
 8011cca:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 8011ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 8011cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd8:	00db      	lsls	r3, r3, #3
 8011cda:	69fa      	ldr	r2, [r7, #28]
 8011cdc:	4413      	add	r3, r2
 8011cde:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 8011ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d03d      	beq.n	8011d62 <keccak_absorb+0x284>
    for(i=0;i<8;i++)
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8011cea:	e008      	b.n	8011cfe <keccak_absorb+0x220>
      t[i] = 0;
 8011cec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cf2:	4413      	add	r3, r2
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 8011cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8011cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d00:	2b07      	cmp	r3, #7
 8011d02:	d9f3      	bls.n	8011cec <keccak_absorb+0x20e>
    for(i=0;i<mlen;i++)
 8011d04:	2300      	movs	r3, #0
 8011d06:	637b      	str	r3, [r7, #52]	; 0x34
 8011d08:	e00c      	b.n	8011d24 <keccak_absorb+0x246>
      t[i] = m[i];
 8011d0a:	69ba      	ldr	r2, [r7, #24]
 8011d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d0e:	4413      	add	r3, r2
 8011d10:	7819      	ldrb	r1, [r3, #0]
 8011d12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d18:	4413      	add	r3, r2
 8011d1a:	460a      	mov	r2, r1
 8011d1c:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 8011d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d20:	3301      	adds	r3, #1
 8011d22:	637b      	str	r3, [r7, #52]	; 0x34
 8011d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d3ee      	bcc.n	8011d0a <keccak_absorb+0x22c>
    s[pos/8] ^= load64(t);
 8011d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7fc fde1 	bl	800e8f8 <load64>
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	f023 0307 	bic.w	r3, r3, #7
 8011d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d3e:	4413      	add	r3, r2
 8011d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d44:	69fc      	ldr	r4, [r7, #28]
 8011d46:	f024 0407 	bic.w	r4, r4, #7
 8011d4a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011d4c:	442c      	add	r4, r5
 8011d4e:	ea80 0a02 	eor.w	sl, r0, r2
 8011d52:	ea81 0b03 	eor.w	fp, r1, r3
 8011d56:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 8011d5a:	69fa      	ldr	r2, [r7, #28]
 8011d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d5e:	4413      	add	r3, r2
 8011d60:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 8011d62:	69fb      	ldr	r3, [r7, #28]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3738      	adds	r7, #56	; 0x38
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011d6e <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 8011d6e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011d72:	b088      	sub	sp, #32
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6178      	str	r0, [r7, #20]
 8011d78:	6139      	str	r1, [r7, #16]
 8011d7a:	60fa      	str	r2, [r7, #12]
 8011d7c:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	08db      	lsrs	r3, r3, #3
 8011d82:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f003 0307 	and.w	r3, r3, #7
 8011d8a:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	00db      	lsls	r3, r3, #3
 8011d90:	697a      	ldr	r2, [r7, #20]
 8011d92:	4413      	add	r3, r2
 8011d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d98:	7afb      	ldrb	r3, [r7, #11]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	4698      	mov	r8, r3
 8011d9e:	4691      	mov	r9, r2
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	00db      	lsls	r3, r3, #3
 8011da4:	f1a3 0620 	sub.w	r6, r3, #32
 8011da8:	f1c3 0220 	rsb	r2, r3, #32
 8011dac:	fa09 f503 	lsl.w	r5, r9, r3
 8011db0:	fa08 f606 	lsl.w	r6, r8, r6
 8011db4:	4335      	orrs	r5, r6
 8011db6:	fa28 f202 	lsr.w	r2, r8, r2
 8011dba:	4315      	orrs	r5, r2
 8011dbc:	fa08 f403 	lsl.w	r4, r8, r3
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	00db      	lsls	r3, r3, #3
 8011dc4:	697a      	ldr	r2, [r7, #20]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	ea80 0a04 	eor.w	sl, r0, r4
 8011dcc:	ea81 0b05 	eor.w	fp, r1, r5
 8011dd0:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	f023 0307 	bic.w	r3, r3, #7
 8011dda:	3b08      	subs	r3, #8
 8011ddc:	697a      	ldr	r2, [r7, #20]
 8011dde:	4413      	add	r3, r2
 8011de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de4:	6939      	ldr	r1, [r7, #16]
 8011de6:	f021 0107 	bic.w	r1, r1, #7
 8011dea:	3908      	subs	r1, #8
 8011dec:	6978      	ldr	r0, [r7, #20]
 8011dee:	4401      	add	r1, r0
 8011df0:	603a      	str	r2, [r7, #0]
 8011df2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011df6:	607b      	str	r3, [r7, #4]
 8011df8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011dfc:	e9c1 3400 	strd	r3, r4, [r1]
}
 8011e00:	bf00      	nop
 8011e02:	3720      	adds	r7, #32
 8011e04:	46bd      	mov	sp, r7
 8011e06:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011e0a:	4770      	bx	lr

08011e0c <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b086      	sub	sp, #24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	607a      	str	r2, [r7, #4]
 8011e18:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 8011e1a:	e021      	b.n	8011e60 <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7fc fdd5 	bl	800e9cc <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8011e22:	2300      	movs	r3, #0
 8011e24:	617b      	str	r3, [r7, #20]
 8011e26:	e00f      	b.n	8011e48 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	00db      	lsls	r3, r3, #3
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	18d1      	adds	r1, r2, r3
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	00db      	lsls	r3, r3, #3
 8011e34:	687a      	ldr	r2, [r7, #4]
 8011e36:	4413      	add	r3, r2
 8011e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3c:	4608      	mov	r0, r1
 8011e3e:	f7fc fd98 	bl	800e972 <store64>
    for(i=0;i<r/8;i++)
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	3301      	adds	r3, #1
 8011e46:	617b      	str	r3, [r7, #20]
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	08db      	lsrs	r3, r3, #3
 8011e4c:	697a      	ldr	r2, [r7, #20]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d3ea      	bcc.n	8011e28 <keccak_squeezeblocks+0x1c>
    out += r;
 8011e52:	68fa      	ldr	r2, [r7, #12]
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	4413      	add	r3, r2
 8011e58:	60fb      	str	r3, [r7, #12]
    nblocks--;
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	3b01      	subs	r3, #1
 8011e5e:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d1da      	bne.n	8011e1c <keccak_squeezeblocks+0x10>
  }
}
 8011e66:	bf00      	nop
 8011e68:	bf00      	nop
 8011e6a:	3718      	adds	r7, #24
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int r,
                                   unsigned int pos)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b088      	sub	sp, #32
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
 8011e7c:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t t[8];

  if(pos & 7) {
 8011e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e80:	f003 0307 	and.w	r3, r3, #7
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d027      	beq.n	8011ed8 <keccak_squeeze+0x68>
    store64(t,s[pos/8]);
 8011e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e8a:	f023 0307 	bic.w	r3, r3, #7
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	4413      	add	r3, r2
 8011e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e96:	f107 0114 	add.w	r1, r7, #20
 8011e9a:	4608      	mov	r0, r1
 8011e9c:	f7fc fd69 	bl	800e972 <store64>
    i = pos & 7;
 8011ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea2:	f003 0307 	and.w	r3, r3, #7
 8011ea6:	61fb      	str	r3, [r7, #28]
    while(i < 8 && outlen > 0) {
 8011ea8:	e010      	b.n	8011ecc <keccak_squeeze+0x5c>
      *out++ = t[i++];
 8011eaa:	69fa      	ldr	r2, [r7, #28]
 8011eac:	1c53      	adds	r3, r2, #1
 8011eae:	61fb      	str	r3, [r7, #28]
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	1c59      	adds	r1, r3, #1
 8011eb4:	60f9      	str	r1, [r7, #12]
 8011eb6:	3220      	adds	r2, #32
 8011eb8:	443a      	add	r2, r7
 8011eba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8011ebe:	701a      	strb	r2, [r3, #0]
      outlen--;
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	3b01      	subs	r3, #1
 8011ec4:	60bb      	str	r3, [r7, #8]
      pos++;
 8011ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec8:	3301      	adds	r3, #1
 8011eca:	62bb      	str	r3, [r7, #40]	; 0x28
    while(i < 8 && outlen > 0) {
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	2b07      	cmp	r3, #7
 8011ed0:	d802      	bhi.n	8011ed8 <keccak_squeeze+0x68>
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1e8      	bne.n	8011eaa <keccak_squeeze+0x3a>
    }
  }

  if(pos && outlen >= r-pos) {
 8011ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d054      	beq.n	8011f88 <keccak_squeeze+0x118>
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	68ba      	ldr	r2, [r7, #8]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d34e      	bcc.n	8011f88 <keccak_squeeze+0x118>
    for(i=0;i<(r-pos)/8;i++)
 8011eea:	2300      	movs	r3, #0
 8011eec:	61fb      	str	r3, [r7, #28]
 8011eee:	e012      	b.n	8011f16 <keccak_squeeze+0xa6>
      store64(out+8*i,s[pos/8+i]);
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	68fa      	ldr	r2, [r7, #12]
 8011ef6:	18d1      	adds	r1, r2, r3
 8011ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efa:	08da      	lsrs	r2, r3, #3
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	4413      	add	r3, r2
 8011f00:	00db      	lsls	r3, r3, #3
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	4413      	add	r3, r2
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	4608      	mov	r0, r1
 8011f0c:	f7fc fd31 	bl	800e972 <store64>
    for(i=0;i<(r-pos)/8;i++)
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	3301      	adds	r3, #1
 8011f14:	61fb      	str	r3, [r7, #28]
 8011f16:	683a      	ldr	r2, [r7, #0]
 8011f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	08db      	lsrs	r3, r3, #3
 8011f1e:	69fa      	ldr	r2, [r7, #28]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d3e5      	bcc.n	8011ef0 <keccak_squeeze+0x80>
    out += r-pos;
 8011f24:	683a      	ldr	r2, [r7, #0]
 8011f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	68fa      	ldr	r2, [r7, #12]
 8011f2c:	4413      	add	r3, r2
 8011f2e:	60fb      	str	r3, [r7, #12]
    outlen -= r-pos;
 8011f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	68ba      	ldr	r2, [r7, #8]
 8011f38:	4413      	add	r3, r2
 8011f3a:	60bb      	str	r3, [r7, #8]
    pos = 0;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  while(outlen >= r) {
 8011f40:	e022      	b.n	8011f88 <keccak_squeeze+0x118>
    KeccakF1600_StatePermute(s);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7fc fd42 	bl	800e9cc <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8011f48:	2300      	movs	r3, #0
 8011f4a:	61fb      	str	r3, [r7, #28]
 8011f4c:	e00f      	b.n	8011f6e <keccak_squeeze+0xfe>
      store64(out+8*i,s[i]);
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	00db      	lsls	r3, r3, #3
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	18d1      	adds	r1, r2, r3
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	00db      	lsls	r3, r3, #3
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f62:	4608      	mov	r0, r1
 8011f64:	f7fc fd05 	bl	800e972 <store64>
    for(i=0;i<r/8;i++)
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	61fb      	str	r3, [r7, #28]
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	08db      	lsrs	r3, r3, #3
 8011f72:	69fa      	ldr	r2, [r7, #28]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d3ea      	bcc.n	8011f4e <keccak_squeeze+0xde>
    out += r;
 8011f78:	68fa      	ldr	r2, [r7, #12]
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	4413      	add	r3, r2
 8011f7e:	60fb      	str	r3, [r7, #12]
    outlen -= r;
 8011f80:	68ba      	ldr	r2, [r7, #8]
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	1ad3      	subs	r3, r2, r3
 8011f86:	60bb      	str	r3, [r7, #8]
  while(outlen >= r) {
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d2d8      	bcs.n	8011f42 <keccak_squeeze+0xd2>
  }

  if(!outlen)
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d101      	bne.n	8011f9a <keccak_squeeze+0x12a>
    return pos;
 8011f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f98:	e053      	b.n	8012042 <keccak_squeeze+0x1d2>
  else if(!pos)
 8011f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d102      	bne.n	8011fa6 <keccak_squeeze+0x136>
    KeccakF1600_StatePermute(s);
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f7fc fd13 	bl	800e9cc <KeccakF1600_StatePermute>

  for(i=0;i<outlen/8;i++)
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	61fb      	str	r3, [r7, #28]
 8011faa:	e012      	b.n	8011fd2 <keccak_squeeze+0x162>
    store64(out+8*i,s[pos/8+i]);
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	00db      	lsls	r3, r3, #3
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	18d1      	adds	r1, r2, r3
 8011fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb6:	08da      	lsrs	r2, r3, #3
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	4413      	add	r3, r2
 8011fbc:	00db      	lsls	r3, r3, #3
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc6:	4608      	mov	r0, r1
 8011fc8:	f7fc fcd3 	bl	800e972 <store64>
  for(i=0;i<outlen/8;i++)
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	3301      	adds	r3, #1
 8011fd0:	61fb      	str	r3, [r7, #28]
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	08db      	lsrs	r3, r3, #3
 8011fd6:	69fa      	ldr	r2, [r7, #28]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d3e7      	bcc.n	8011fac <keccak_squeeze+0x13c>
  out += 8*i;
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	68fa      	ldr	r2, [r7, #12]
 8011fe2:	4413      	add	r3, r2
 8011fe4:	60fb      	str	r3, [r7, #12]
  outlen -= 8*i;
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	68ba      	ldr	r2, [r7, #8]
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	60bb      	str	r3, [r7, #8]
  pos += 8*i;
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	00db      	lsls	r3, r3, #3
 8011ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ff6:	4413      	add	r3, r2
 8011ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  store64(t,s[pos/8]);
 8011ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffc:	f023 0307 	bic.w	r3, r3, #7
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	4413      	add	r3, r2
 8012004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012008:	f107 0114 	add.w	r1, r7, #20
 801200c:	4608      	mov	r0, r1
 801200e:	f7fc fcb0 	bl	800e972 <store64>
  for(i=0;i<outlen;i++)
 8012012:	2300      	movs	r3, #0
 8012014:	61fb      	str	r3, [r7, #28]
 8012016:	e00b      	b.n	8012030 <keccak_squeeze+0x1c0>
    out[i] = t[i];
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	4413      	add	r3, r2
 801201e:	f107 0114 	add.w	r1, r7, #20
 8012022:	69fa      	ldr	r2, [r7, #28]
 8012024:	440a      	add	r2, r1
 8012026:	7812      	ldrb	r2, [r2, #0]
 8012028:	701a      	strb	r2, [r3, #0]
  for(i=0;i<outlen;i++)
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	3301      	adds	r3, #1
 801202e:	61fb      	str	r3, [r7, #28]
 8012030:	69fa      	ldr	r2, [r7, #28]
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	429a      	cmp	r2, r3
 8012036:	d3ef      	bcc.n	8012018 <keccak_squeeze+0x1a8>
  pos += outlen;
 8012038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	4413      	add	r3, r2
 801203e:	62bb      	str	r3, [r7, #40]	; 0x28
  return pos;
 8012040:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012042:	4618      	mov	r0, r3
 8012044:	3720      	adds	r7, #32
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b082      	sub	sp, #8
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f7ff fd22 	bl	8011a9c <keccak_init>
}
 8012058:	bf00      	nop
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b086      	sub	sp, #24
 8012064:	af02      	add	r7, sp, #8
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	9300      	str	r3, [sp, #0]
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2188      	movs	r1, #136	; 0x88
 801207c:	f7ff fd2f 	bl	8011ade <keccak_absorb>
 8012080:	4602      	mov	r2, r0
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012088:	bf00      	nop
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80120a0:	231f      	movs	r3, #31
 80120a2:	2188      	movs	r1, #136	; 0x88
 80120a4:	f7ff fe63 	bl	8011d6e <keccak_finalize>
  state->pos = 0;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80120b0:	bf00      	nop
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	2388      	movs	r3, #136	; 0x88
 80120c8:	68b9      	ldr	r1, [r7, #8]
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f7ff fe9e 	bl	8011e0c <keccak_squeezeblocks>
}
 80120d0:	bf00      	nop
 80120d2:	3710      	adds	r7, #16
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <pqcrystals_fips202_ref_shake256_squeeze>:
*              - size_t outlen :  number of bytes to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af02      	add	r7, sp, #8
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80120ec:	9300      	str	r3, [sp, #0]
 80120ee:	2388      	movs	r3, #136	; 0x88
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f7ff febc 	bl	8011e70 <keccak_squeeze>
 80120f8:	4602      	mov	r2, r0
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012100:	bf00      	nop
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <pqcrystals_fips202_ref_shake256>:
*              - size_t outlen:     requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen:      length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b0b8      	sub	sp, #224	; 0xe0
 801210c:	af00      	add	r7, sp, #0
 801210e:	60f8      	str	r0, [r7, #12]
 8012110:	60b9      	str	r1, [r7, #8]
 8012112:	607a      	str	r2, [r7, #4]
 8012114:	603b      	str	r3, [r7, #0]
  keccak_state state;

  shake256_init(&state);
 8012116:	f107 0310 	add.w	r3, r7, #16
 801211a:	4618      	mov	r0, r3
 801211c:	f7ff ff95 	bl	801204a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, in, inlen);
 8012120:	f107 0310 	add.w	r3, r7, #16
 8012124:	683a      	ldr	r2, [r7, #0]
 8012126:	6879      	ldr	r1, [r7, #4]
 8012128:	4618      	mov	r0, r3
 801212a:	f7ff ff99 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 801212e:	f107 0310 	add.w	r3, r7, #16
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff ffac 	bl	8012090 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(out, outlen, &state);
 8012138:	f107 0310 	add.w	r3, r7, #16
 801213c:	461a      	mov	r2, r3
 801213e:	68b9      	ldr	r1, [r7, #8]
 8012140:	68f8      	ldr	r0, [r7, #12]
 8012142:	f7ff ffc9 	bl	80120d8 <pqcrystals_fips202_ref_shake256_squeeze>
}
 8012146:	bf00      	nop
 8012148:	37e0      	adds	r7, #224	; 0xe0
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
	...

08012150 <pqcrystals_dilithium2aes_r_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N_]) {
 8012150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012154:	b088      	sub	sp, #32
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int32_t zeta, t;

  k = 0;
 801215a:	2300      	movs	r3, #0
 801215c:	613b      	str	r3, [r7, #16]
  for(len = 128; len > 0; len >>= 1) {
 801215e:	2380      	movs	r3, #128	; 0x80
 8012160:	61fb      	str	r3, [r7, #28]
 8012162:	e056      	b.n	8012212 <pqcrystals_dilithium2aes_r_ref_ntt+0xc2>
    for(start = 0; start < N_; start = j + len) {
 8012164:	2300      	movs	r3, #0
 8012166:	61bb      	str	r3, [r7, #24]
 8012168:	e04d      	b.n	8012206 <pqcrystals_dilithium2aes_r_ref_ntt+0xb6>
      zeta = zetas[++k];
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	3301      	adds	r3, #1
 801216e:	613b      	str	r3, [r7, #16]
 8012170:	4a2c      	ldr	r2, [pc, #176]	; (8012224 <pqcrystals_dilithium2aes_r_ref_ntt+0xd4>)
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012178:	60fb      	str	r3, [r7, #12]
      for(j = start; j < start + len; ++j) {
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	617b      	str	r3, [r7, #20]
 801217e:	e038      	b.n	80121f2 <pqcrystals_dilithium2aes_r_ref_ntt+0xa2>
        t = montgomery_reduce((int64_t)zeta * a[j + len]);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	17da      	asrs	r2, r3, #31
 8012184:	4698      	mov	r8, r3
 8012186:	4691      	mov	r9, r2
 8012188:	697a      	ldr	r2, [r7, #20]
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	4413      	add	r3, r2
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	4413      	add	r3, r2
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	17da      	asrs	r2, r3, #31
 8012198:	469a      	mov	sl, r3
 801219a:	4693      	mov	fp, r2
 801219c:	fb0a f209 	mul.w	r2, sl, r9
 80121a0:	fb08 f30b 	mul.w	r3, r8, fp
 80121a4:	4413      	add	r3, r2
 80121a6:	fba8 450a 	umull	r4, r5, r8, sl
 80121aa:	442b      	add	r3, r5
 80121ac:	461d      	mov	r5, r3
 80121ae:	4620      	mov	r0, r4
 80121b0:	4629      	mov	r1, r5
 80121b2:	f002 fe18 	bl	8014de6 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 80121b6:	60b8      	str	r0, [r7, #8]
        a[j + len] = a[j] - t;
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	4413      	add	r3, r2
 80121c0:	6819      	ldr	r1, [r3, #0]
 80121c2:	697a      	ldr	r2, [r7, #20]
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	4413      	add	r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	4413      	add	r3, r2
 80121ce:	68ba      	ldr	r2, [r7, #8]
 80121d0:	1a8a      	subs	r2, r1, r2
 80121d2:	601a      	str	r2, [r3, #0]
        a[j] = a[j] + t;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	4413      	add	r3, r2
 80121dc:	6819      	ldr	r1, [r3, #0]
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	009b      	lsls	r3, r3, #2
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	4413      	add	r3, r2
 80121e6:	68ba      	ldr	r2, [r7, #8]
 80121e8:	440a      	add	r2, r1
 80121ea:	601a      	str	r2, [r3, #0]
      for(j = start; j < start + len; ++j) {
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	3301      	adds	r3, #1
 80121f0:	617b      	str	r3, [r7, #20]
 80121f2:	69ba      	ldr	r2, [r7, #24]
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	4413      	add	r3, r2
 80121f8:	697a      	ldr	r2, [r7, #20]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d3c0      	bcc.n	8012180 <pqcrystals_dilithium2aes_r_ref_ntt+0x30>
    for(start = 0; start < N_; start = j + len) {
 80121fe:	697a      	ldr	r2, [r7, #20]
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	4413      	add	r3, r2
 8012204:	61bb      	str	r3, [r7, #24]
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	2bff      	cmp	r3, #255	; 0xff
 801220a:	d9ae      	bls.n	801216a <pqcrystals_dilithium2aes_r_ref_ntt+0x1a>
  for(len = 128; len > 0; len >>= 1) {
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	085b      	lsrs	r3, r3, #1
 8012210:	61fb      	str	r3, [r7, #28]
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d1a5      	bne.n	8012164 <pqcrystals_dilithium2aes_r_ref_ntt+0x14>
      }
    }
  }
}
 8012218:	bf00      	nop
 801221a:	bf00      	nop
 801221c:	3720      	adds	r7, #32
 801221e:	46bd      	mov	sp, r7
 8012220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012224:	08016608 	.word	0x08016608

08012228 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N_]) {
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	b091      	sub	sp, #68	; 0x44
 801222e:	af00      	add	r7, sp, #0
 8012230:	61f8      	str	r0, [r7, #28]
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
 8012232:	f24a 33fa 	movw	r3, #41978	; 0xa3fa
 8012236:	62fb      	str	r3, [r7, #44]	; 0x2c

  k = 256;
 8012238:	f44f 7380 	mov.w	r3, #256	; 0x100
 801223c:	633b      	str	r3, [r7, #48]	; 0x30
  for(len = 1; len < N_; len <<= 1) {
 801223e:	2301      	movs	r3, #1
 8012240:	63bb      	str	r3, [r7, #56]	; 0x38
 8012242:	e072      	b.n	801232a <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x102>
    for(start = 0; start < N_; start = j + len) {
 8012244:	2300      	movs	r3, #0
 8012246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012248:	e069      	b.n	801231e <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xf6>
      zeta = -zetas[--k];
 801224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224c:	3b01      	subs	r3, #1
 801224e:	633b      	str	r3, [r7, #48]	; 0x30
 8012250:	4a51      	ldr	r2, [pc, #324]	; (8012398 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x170>)
 8012252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012258:	425b      	negs	r3, r3
 801225a:	62bb      	str	r3, [r7, #40]	; 0x28
      for(j = start; j < start + len; ++j) {
 801225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801225e:	637b      	str	r3, [r7, #52]	; 0x34
 8012260:	e053      	b.n	801230a <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xe2>
        t = a[j];
 8012262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	69fa      	ldr	r2, [r7, #28]
 8012268:	4413      	add	r3, r2
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	627b      	str	r3, [r7, #36]	; 0x24
        a[j] = t + a[j + len];
 801226e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	4413      	add	r3, r2
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	69fa      	ldr	r2, [r7, #28]
 8012278:	4413      	add	r3, r2
 801227a:	6819      	ldr	r1, [r3, #0]
 801227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227e:	009a      	lsls	r2, r3, #2
 8012280:	69fb      	ldr	r3, [r7, #28]
 8012282:	441a      	add	r2, r3
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012286:	440b      	add	r3, r1
 8012288:	6013      	str	r3, [r2, #0]
        a[j + len] = t - a[j + len];
 801228a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228e:	4413      	add	r3, r2
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	69fa      	ldr	r2, [r7, #28]
 8012294:	4413      	add	r3, r2
 8012296:	6819      	ldr	r1, [r3, #0]
 8012298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229c:	4413      	add	r3, r2
 801229e:	009a      	lsls	r2, r3, #2
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	441a      	add	r2, r3
 80122a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a6:	1a5b      	subs	r3, r3, r1
 80122a8:	6013      	str	r3, [r2, #0]
        a[j + len] = montgomery_reduce((int64_t)zeta * a[j + len]);
 80122aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ac:	17da      	asrs	r2, r3, #31
 80122ae:	613b      	str	r3, [r7, #16]
 80122b0:	617a      	str	r2, [r7, #20]
 80122b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b6:	4413      	add	r3, r2
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	69fa      	ldr	r2, [r7, #28]
 80122bc:	4413      	add	r3, r2
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	17da      	asrs	r2, r3, #31
 80122c2:	60bb      	str	r3, [r7, #8]
 80122c4:	60fa      	str	r2, [r7, #12]
 80122c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80122ca:	460b      	mov	r3, r1
 80122cc:	68ba      	ldr	r2, [r7, #8]
 80122ce:	fb02 f203 	mul.w	r2, r2, r3
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80122d8:	4601      	mov	r1, r0
 80122da:	fb01 f303 	mul.w	r3, r1, r3
 80122de:	4413      	add	r3, r2
 80122e0:	693a      	ldr	r2, [r7, #16]
 80122e2:	68b9      	ldr	r1, [r7, #8]
 80122e4:	fba2 ab01 	umull	sl, fp, r2, r1
 80122e8:	445b      	add	r3, fp
 80122ea:	469b      	mov	fp, r3
 80122ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f0:	4413      	add	r3, r2
 80122f2:	009b      	lsls	r3, r3, #2
 80122f4:	69fa      	ldr	r2, [r7, #28]
 80122f6:	18d4      	adds	r4, r2, r3
 80122f8:	4650      	mov	r0, sl
 80122fa:	4659      	mov	r1, fp
 80122fc:	f002 fd73 	bl	8014de6 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012300:	4603      	mov	r3, r0
 8012302:	6023      	str	r3, [r4, #0]
      for(j = start; j < start + len; ++j) {
 8012304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012306:	3301      	adds	r3, #1
 8012308:	637b      	str	r3, [r7, #52]	; 0x34
 801230a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230e:	4413      	add	r3, r2
 8012310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012312:	429a      	cmp	r2, r3
 8012314:	d3a5      	bcc.n	8012262 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x3a>
    for(start = 0; start < N_; start = j + len) {
 8012316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231a:	4413      	add	r3, r2
 801231c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801231e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012320:	2bff      	cmp	r3, #255	; 0xff
 8012322:	d992      	bls.n	801224a <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x22>
  for(len = 1; len < N_; len <<= 1) {
 8012324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012326:	005b      	lsls	r3, r3, #1
 8012328:	63bb      	str	r3, [r7, #56]	; 0x38
 801232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232c:	2bff      	cmp	r3, #255	; 0xff
 801232e:	d989      	bls.n	8012244 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x1c>
      }
    }
  }

  for(j = 0; j < N_; ++j) {
 8012330:	2300      	movs	r3, #0
 8012332:	637b      	str	r3, [r7, #52]	; 0x34
 8012334:	e026      	b.n	8012384 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x15c>
    a[j] = montgomery_reduce((int64_t)f * a[j]);
 8012336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012338:	17da      	asrs	r2, r3, #31
 801233a:	461d      	mov	r5, r3
 801233c:	4616      	mov	r6, r2
 801233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	69fa      	ldr	r2, [r7, #28]
 8012344:	4413      	add	r3, r2
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	17da      	asrs	r2, r3, #31
 801234a:	603b      	str	r3, [r7, #0]
 801234c:	607a      	str	r2, [r7, #4]
 801234e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012352:	4603      	mov	r3, r0
 8012354:	fb03 f206 	mul.w	r2, r3, r6
 8012358:	460b      	mov	r3, r1
 801235a:	fb05 f303 	mul.w	r3, r5, r3
 801235e:	4413      	add	r3, r2
 8012360:	4602      	mov	r2, r0
 8012362:	fba5 8902 	umull	r8, r9, r5, r2
 8012366:	444b      	add	r3, r9
 8012368:	4699      	mov	r9, r3
 801236a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	69fa      	ldr	r2, [r7, #28]
 8012370:	18d4      	adds	r4, r2, r3
 8012372:	4640      	mov	r0, r8
 8012374:	4649      	mov	r1, r9
 8012376:	f002 fd36 	bl	8014de6 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 801237a:	4603      	mov	r3, r0
 801237c:	6023      	str	r3, [r4, #0]
  for(j = 0; j < N_; ++j) {
 801237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012380:	3301      	adds	r3, #1
 8012382:	637b      	str	r3, [r7, #52]	; 0x34
 8012384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012386:	2bff      	cmp	r3, #255	; 0xff
 8012388:	d9d5      	bls.n	8012336 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x10e>
  }
}
 801238a:	bf00      	nop
 801238c:	bf00      	nop
 801238e:	3744      	adds	r7, #68	; 0x44
 8012390:	46bd      	mov	sp, r7
 8012392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012396:	bf00      	nop
 8012398:	08016608 	.word	0x08016608

0801239c <pqcrystals_dilithium2aes_r_ref_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b086      	sub	sp, #24
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80123a8:	2300      	movs	r3, #0
 80123aa:	617b      	str	r3, [r7, #20]
 80123ac:	e00a      	b.n	80123c4 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x28>
    pk[i] = rho[i];
 80123ae:	68ba      	ldr	r2, [r7, #8]
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	441a      	add	r2, r3
 80123b4:	68f9      	ldr	r1, [r7, #12]
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	440b      	add	r3, r1
 80123ba:	7812      	ldrb	r2, [r2, #0]
 80123bc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	3301      	adds	r3, #1
 80123c2:	617b      	str	r3, [r7, #20]
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	2b1f      	cmp	r3, #31
 80123c8:	d9f1      	bls.n	80123ae <pqcrystals_dilithium2aes_r_ref_pack_pk+0x12>
  pk += SEEDBYTES;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	3320      	adds	r3, #32
 80123ce:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 80123d0:	2300      	movs	r3, #0
 80123d2:	617b      	str	r3, [r7, #20]
 80123d4:	e011      	b.n	80123fa <pqcrystals_dilithium2aes_r_ref_pack_pk+0x5e>
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 80123d6:	697a      	ldr	r2, [r7, #20]
 80123d8:	4613      	mov	r3, r2
 80123da:	009b      	lsls	r3, r3, #2
 80123dc:	4413      	add	r3, r2
 80123de:	019b      	lsls	r3, r3, #6
 80123e0:	461a      	mov	r2, r3
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	1898      	adds	r0, r3, r2
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	029b      	lsls	r3, r3, #10
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	4413      	add	r3, r2
 80123ee:	4619      	mov	r1, r3
 80123f0:	f000 ff1b 	bl	801322a <pqcrystals_dilithium2aes_r_ref_polyt1_pack>
  for(i = 0; i < K; ++i)
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	3301      	adds	r3, #1
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	2b03      	cmp	r3, #3
 80123fe:	d9ea      	bls.n	80123d6 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x3a>
}
 8012400:	bf00      	nop
 8012402:	bf00      	nop
 8012404:	3718      	adds	r7, #24
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}

0801240a <pqcrystals_dilithium2aes_r_ref_pack_sk_r>:
             const uint8_t rho[SEEDBYTES],
			 const uint8_t rhoprime[SEEDBYTES],
             const uint8_t tr[CRHBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0)
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b086      	sub	sp, #24
 801240e:	af00      	add	r7, sp, #0
 8012410:	60f8      	str	r0, [r7, #12]
 8012412:	60b9      	str	r1, [r7, #8]
 8012414:	607a      	str	r2, [r7, #4]
 8012416:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012418:	2300      	movs	r3, #0
 801241a:	617b      	str	r3, [r7, #20]
 801241c:	e00a      	b.n	8012434 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x2a>
    sk[i] = rho[i];
 801241e:	68ba      	ldr	r2, [r7, #8]
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	441a      	add	r2, r3
 8012424:	68f9      	ldr	r1, [r7, #12]
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	440b      	add	r3, r1
 801242a:	7812      	ldrb	r2, [r2, #0]
 801242c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	3301      	adds	r3, #1
 8012432:	617b      	str	r3, [r7, #20]
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	2b1f      	cmp	r3, #31
 8012438:	d9f1      	bls.n	801241e <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x14>
  sk += SEEDBYTES;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	3320      	adds	r3, #32
 801243e:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 8012440:	2300      	movs	r3, #0
 8012442:	617b      	str	r3, [r7, #20]
 8012444:	e00a      	b.n	801245c <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x52>
    sk[i] = rhoprime[i];
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	441a      	add	r2, r3
 801244c:	68f9      	ldr	r1, [r7, #12]
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	440b      	add	r3, r1
 8012452:	7812      	ldrb	r2, [r2, #0]
 8012454:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	3301      	adds	r3, #1
 801245a:	617b      	str	r3, [r7, #20]
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	2b1f      	cmp	r3, #31
 8012460:	d9f1      	bls.n	8012446 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x3c>
  sk += SEEDBYTES;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	3320      	adds	r3, #32
 8012466:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 8012468:	2300      	movs	r3, #0
 801246a:	617b      	str	r3, [r7, #20]
 801246c:	e00a      	b.n	8012484 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x7a>
    sk[i] = key[i];
 801246e:	6a3a      	ldr	r2, [r7, #32]
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	441a      	add	r2, r3
 8012474:	68f9      	ldr	r1, [r7, #12]
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	440b      	add	r3, r1
 801247a:	7812      	ldrb	r2, [r2, #0]
 801247c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	3301      	adds	r3, #1
 8012482:	617b      	str	r3, [r7, #20]
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	2b1f      	cmp	r3, #31
 8012488:	d9f1      	bls.n	801246e <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x64>
  sk += SEEDBYTES;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	3320      	adds	r3, #32
 801248e:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < CRHBYTES; ++i)
 8012490:	2300      	movs	r3, #0
 8012492:	617b      	str	r3, [r7, #20]
 8012494:	e00a      	b.n	80124ac <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xa2>
    sk[i] = tr[i];
 8012496:	683a      	ldr	r2, [r7, #0]
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	441a      	add	r2, r3
 801249c:	68f9      	ldr	r1, [r7, #12]
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	440b      	add	r3, r1
 80124a2:	7812      	ldrb	r2, [r2, #0]
 80124a4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	3301      	adds	r3, #1
 80124aa:	617b      	str	r3, [r7, #20]
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	2b2f      	cmp	r3, #47	; 0x2f
 80124b0:	d9f1      	bls.n	8012496 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x8c>
  sk += CRHBYTES;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3330      	adds	r3, #48	; 0x30
 80124b6:	60fb      	str	r3, [r7, #12]
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
  sk += K*POLYETA_PACKEDBYTES;
*/


  for(i = 0; i < K; ++i)
 80124b8:	2300      	movs	r3, #0
 80124ba:	617b      	str	r3, [r7, #20]
 80124bc:	e010      	b.n	80124e0 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xd6>
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80124c4:	fb02 f303 	mul.w	r3, r2, r3
 80124c8:	68fa      	ldr	r2, [r7, #12]
 80124ca:	18d0      	adds	r0, r2, r3
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	029b      	lsls	r3, r3, #10
 80124d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124d2:	4413      	add	r3, r2
 80124d4:	4619      	mov	r1, r3
 80124d6:	f000 ffb3 	bl	8013440 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>
  for(i = 0; i < K; ++i)
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	3301      	adds	r3, #1
 80124de:	617b      	str	r3, [r7, #20]
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	2b03      	cmp	r3, #3
 80124e4:	d9eb      	bls.n	80124be <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xb4>
}
 80124e6:	bf00      	nop
 80124e8:	bf00      	nop
 80124ea:	3718      	adds	r7, #24
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r>:
			   uint8_t rhoprime[SEEDBYTES],
               uint8_t tr[CRHBYTES],
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b086      	sub	sp, #24
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	607a      	str	r2, [r7, #4]
 80124fc:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80124fe:	2300      	movs	r3, #0
 8012500:	617b      	str	r3, [r7, #20]
 8012502:	e00a      	b.n	801251a <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x2a>
    rho[i] = sk[i];
 8012504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	441a      	add	r2, r3
 801250a:	68f9      	ldr	r1, [r7, #12]
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	440b      	add	r3, r1
 8012510:	7812      	ldrb	r2, [r2, #0]
 8012512:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	3301      	adds	r3, #1
 8012518:	617b      	str	r3, [r7, #20]
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	2b1f      	cmp	r3, #31
 801251e:	d9f1      	bls.n	8012504 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x14>
  sk += SEEDBYTES;
 8012520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012522:	3320      	adds	r3, #32
 8012524:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 8012526:	2300      	movs	r3, #0
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	e00a      	b.n	8012542 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x52>
    rhoprime[i] = sk[i];
 801252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	441a      	add	r2, r3
 8012532:	68b9      	ldr	r1, [r7, #8]
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	440b      	add	r3, r1
 8012538:	7812      	ldrb	r2, [r2, #0]
 801253a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	3301      	adds	r3, #1
 8012540:	617b      	str	r3, [r7, #20]
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	2b1f      	cmp	r3, #31
 8012546:	d9f1      	bls.n	801252c <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x3c>
  sk += SEEDBYTES;
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	3320      	adds	r3, #32
 801254c:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 801254e:	2300      	movs	r3, #0
 8012550:	617b      	str	r3, [r7, #20]
 8012552:	e00a      	b.n	801256a <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x7a>
    key[i] = sk[i];
 8012554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	441a      	add	r2, r3
 801255a:	6839      	ldr	r1, [r7, #0]
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	440b      	add	r3, r1
 8012560:	7812      	ldrb	r2, [r2, #0]
 8012562:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	3301      	adds	r3, #1
 8012568:	617b      	str	r3, [r7, #20]
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	2b1f      	cmp	r3, #31
 801256e:	d9f1      	bls.n	8012554 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x64>
  sk += SEEDBYTES;
 8012570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012572:	3320      	adds	r3, #32
 8012574:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < CRHBYTES; ++i)
 8012576:	2300      	movs	r3, #0
 8012578:	617b      	str	r3, [r7, #20]
 801257a:	e00a      	b.n	8012592 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xa2>
    tr[i] = sk[i];
 801257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	441a      	add	r2, r3
 8012582:	6879      	ldr	r1, [r7, #4]
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	440b      	add	r3, r1
 8012588:	7812      	ldrb	r2, [r2, #0]
 801258a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	3301      	adds	r3, #1
 8012590:	617b      	str	r3, [r7, #20]
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	2b2f      	cmp	r3, #47	; 0x2f
 8012596:	d9f1      	bls.n	801257c <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x8c>
  sk += CRHBYTES;
 8012598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259a:	3330      	adds	r3, #48	; 0x30
 801259c:	627b      	str	r3, [r7, #36]	; 0x24

  for(i=0; i < K; ++i)
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
  sk += K*POLYETA_PACKEDBYTES;
*/
  for(i=0; i < K; ++i)
 801259e:	2300      	movs	r3, #0
 80125a0:	617b      	str	r3, [r7, #20]
 80125a2:	e010      	b.n	80125c6 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xd6>
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	029b      	lsls	r3, r3, #10
 80125a8:	6a3a      	ldr	r2, [r7, #32]
 80125aa:	18d0      	adds	r0, r2, r3
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80125b2:	fb02 f303 	mul.w	r3, r2, r3
 80125b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125b8:	4413      	add	r3, r2
 80125ba:	4619      	mov	r1, r3
 80125bc:	f001 f901 	bl	80137c2 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>
  for(i=0; i < K; ++i)
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	3301      	adds	r3, #1
 80125c4:	617b      	str	r3, [r7, #20]
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	d9eb      	bls.n	80125a4 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xb4>
}
 80125cc:	bf00      	nop
 80125ce:	bf00      	nop
 80125d0:	3718      	adds	r7, #24
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <pqcrystals_dilithium2aes_r_ref_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b088      	sub	sp, #32
 80125da:	af00      	add	r7, sp, #0
 80125dc:	60f8      	str	r0, [r7, #12]
 80125de:	60b9      	str	r1, [r7, #8]
 80125e0:	607a      	str	r2, [r7, #4]
 80125e2:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
 80125e4:	2300      	movs	r3, #0
 80125e6:	61fb      	str	r3, [r7, #28]
 80125e8:	e00a      	b.n	8012600 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x2a>
    sig[i] = c[i];
 80125ea:	68ba      	ldr	r2, [r7, #8]
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	441a      	add	r2, r3
 80125f0:	68f9      	ldr	r1, [r7, #12]
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	440b      	add	r3, r1
 80125f6:	7812      	ldrb	r2, [r2, #0]
 80125f8:	701a      	strb	r2, [r3, #0]
  for(i=0; i < SEEDBYTES; ++i)
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	3301      	adds	r3, #1
 80125fe:	61fb      	str	r3, [r7, #28]
 8012600:	69fb      	ldr	r3, [r7, #28]
 8012602:	2b1f      	cmp	r3, #31
 8012604:	d9f1      	bls.n	80125ea <pqcrystals_dilithium2aes_r_ref_pack_sig+0x14>
  sig += SEEDBYTES;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	3320      	adds	r3, #32
 801260a:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 801260c:	2300      	movs	r3, #0
 801260e:	61fb      	str	r3, [r7, #28]
 8012610:	e011      	b.n	8012636 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x60>
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 8012612:	69fa      	ldr	r2, [r7, #28]
 8012614:	4613      	mov	r3, r2
 8012616:	00db      	lsls	r3, r3, #3
 8012618:	4413      	add	r3, r2
 801261a:	019b      	lsls	r3, r3, #6
 801261c:	461a      	mov	r2, r3
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	1898      	adds	r0, r3, r2
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	029b      	lsls	r3, r3, #10
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	4413      	add	r3, r2
 801262a:	4619      	mov	r1, r3
 801262c:	f001 fb71 	bl	8013d12 <pqcrystals_dilithium2aes_r_ref_polyz_pack>
  for(i = 0; i < L; ++i)
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	3301      	adds	r3, #1
 8012634:	61fb      	str	r3, [r7, #28]
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	2b03      	cmp	r3, #3
 801263a:	d9ea      	bls.n	8012612 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012642:	60fb      	str	r3, [r7, #12]

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
 8012644:	2300      	movs	r3, #0
 8012646:	61fb      	str	r3, [r7, #28]
 8012648:	e007      	b.n	801265a <pqcrystals_dilithium2aes_r_ref_pack_sig+0x84>
    sig[i] = 0;
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	4413      	add	r3, r2
 8012650:	2200      	movs	r2, #0
 8012652:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < OMEGA + K; ++i)
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	3301      	adds	r3, #1
 8012658:	61fb      	str	r3, [r7, #28]
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	2b53      	cmp	r3, #83	; 0x53
 801265e:	d9f4      	bls.n	801264a <pqcrystals_dilithium2aes_r_ref_pack_sig+0x74>

  k = 0;
 8012660:	2300      	movs	r3, #0
 8012662:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 8012664:	2300      	movs	r3, #0
 8012666:	61fb      	str	r3, [r7, #28]
 8012668:	e023      	b.n	80126b2 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xdc>
    for(j = 0; j < N_; ++j)
 801266a:	2300      	movs	r3, #0
 801266c:	61bb      	str	r3, [r7, #24]
 801266e:	e013      	b.n	8012698 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xc2>
      if(h->vec[i].coeffs[j] != 0)
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	69fa      	ldr	r2, [r7, #28]
 8012674:	0211      	lsls	r1, r2, #8
 8012676:	69ba      	ldr	r2, [r7, #24]
 8012678:	440a      	add	r2, r1
 801267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d007      	beq.n	8012692 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xbc>
        sig[k++] = j;
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	1c5a      	adds	r2, r3, #1
 8012686:	617a      	str	r2, [r7, #20]
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	4413      	add	r3, r2
 801268c:	69ba      	ldr	r2, [r7, #24]
 801268e:	b2d2      	uxtb	r2, r2
 8012690:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < N_; ++j)
 8012692:	69bb      	ldr	r3, [r7, #24]
 8012694:	3301      	adds	r3, #1
 8012696:	61bb      	str	r3, [r7, #24]
 8012698:	69bb      	ldr	r3, [r7, #24]
 801269a:	2bff      	cmp	r3, #255	; 0xff
 801269c:	d9e8      	bls.n	8012670 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x9a>

    sig[OMEGA + i] = k;
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	3350      	adds	r3, #80	; 0x50
 80126a2:	68fa      	ldr	r2, [r7, #12]
 80126a4:	4413      	add	r3, r2
 80126a6:	697a      	ldr	r2, [r7, #20]
 80126a8:	b2d2      	uxtb	r2, r2
 80126aa:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < K; ++i) {
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	3301      	adds	r3, #1
 80126b0:	61fb      	str	r3, [r7, #28]
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	2b03      	cmp	r3, #3
 80126b6:	d9d8      	bls.n	801266a <pqcrystals_dilithium2aes_r_ref_pack_sig+0x94>
  }
}
 80126b8:	bf00      	nop
 80126ba:	bf00      	nop
 80126bc:	3720      	adds	r7, #32
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}

080126c2 <verify_sig_h_malform>:
*              return 0 if signature is ok
*              return 1 if an error found
*
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
static int verify_sig_h_malform(uint8_t h_buf[N_*K], const uint8_t sig[CRYPTO_BYTES]){
 80126c2:	b480      	push	{r7}
 80126c4:	b087      	sub	sp, #28
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
 80126ca:	6039      	str	r1, [r7, #0]
    uint8_t* sig_ptr = sig + SEEDBYTES + L * POLYZ_PACKEDBYTES;
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80126d2:	60bb      	str	r3, [r7, #8]
    /* Decode h */
    unsigned int i, j, k = 0;
 80126d4:	2300      	movs	r3, #0
 80126d6:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < K; ++i) {
 80126d8:	2300      	movs	r3, #0
 80126da:	617b      	str	r3, [r7, #20]
 80126dc:	e045      	b.n	801276a <verify_sig_h_malform+0xa8>

        //for(j = 0; j < N_; ++j)
        //  h_buf[i*N_+j] = 0;

        if (sig_ptr[OMEGA + i] < k || sig_ptr[OMEGA + i] > OMEGA)
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	3350      	adds	r3, #80	; 0x50
 80126e2:	68ba      	ldr	r2, [r7, #8]
 80126e4:	4413      	add	r3, r2
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	461a      	mov	r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d806      	bhi.n	80126fe <verify_sig_h_malform+0x3c>
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	3350      	adds	r3, #80	; 0x50
 80126f4:	68ba      	ldr	r2, [r7, #8]
 80126f6:	4413      	add	r3, r2
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	2b50      	cmp	r3, #80	; 0x50
 80126fc:	d901      	bls.n	8012702 <verify_sig_h_malform+0x40>
            return 3;
 80126fe:	2303      	movs	r3, #3
 8012700:	e048      	b.n	8012794 <verify_sig_h_malform+0xd2>

        for (j = k; j < sig_ptr[OMEGA + i]; ++j) {
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	613b      	str	r3, [r7, #16]
 8012706:	e01e      	b.n	8012746 <verify_sig_h_malform+0x84>
            /* Coefficients are ordered for strong unforgeability */
            if (j > k && sig_ptr[j] <= sig_ptr[j - 1])
 8012708:	693a      	ldr	r2, [r7, #16]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	429a      	cmp	r2, r3
 801270e:	d90c      	bls.n	801272a <verify_sig_h_malform+0x68>
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	4413      	add	r3, r2
 8012716:	781a      	ldrb	r2, [r3, #0]
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	3b01      	subs	r3, #1
 801271c:	68b9      	ldr	r1, [r7, #8]
 801271e:	440b      	add	r3, r1
 8012720:	781b      	ldrb	r3, [r3, #0]
 8012722:	429a      	cmp	r2, r3
 8012724:	d801      	bhi.n	801272a <verify_sig_h_malform+0x68>
                return 4;
 8012726:	2304      	movs	r3, #4
 8012728:	e034      	b.n	8012794 <verify_sig_h_malform+0xd2>
            h_buf[i * N_ + sig_ptr[j]] = 1;
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	021b      	lsls	r3, r3, #8
 801272e:	68b9      	ldr	r1, [r7, #8]
 8012730:	693a      	ldr	r2, [r7, #16]
 8012732:	440a      	add	r2, r1
 8012734:	7812      	ldrb	r2, [r2, #0]
 8012736:	4413      	add	r3, r2
 8012738:	687a      	ldr	r2, [r7, #4]
 801273a:	4413      	add	r3, r2
 801273c:	2201      	movs	r2, #1
 801273e:	701a      	strb	r2, [r3, #0]
        for (j = k; j < sig_ptr[OMEGA + i]; ++j) {
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	3301      	adds	r3, #1
 8012744:	613b      	str	r3, [r7, #16]
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	3350      	adds	r3, #80	; 0x50
 801274a:	68ba      	ldr	r2, [r7, #8]
 801274c:	4413      	add	r3, r2
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	461a      	mov	r2, r3
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	4293      	cmp	r3, r2
 8012756:	d3d7      	bcc.n	8012708 <verify_sig_h_malform+0x46>
        }

        k = sig_ptr[OMEGA + i];
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	3350      	adds	r3, #80	; 0x50
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	4413      	add	r3, r2
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < K; ++i) {
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	3301      	adds	r3, #1
 8012768:	617b      	str	r3, [r7, #20]
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b03      	cmp	r3, #3
 801276e:	d9b6      	bls.n	80126de <verify_sig_h_malform+0x1c>
    }

    /* Extra indices are zero for strong unforgeability */
    for (j = k; j < OMEGA; ++j)
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	613b      	str	r3, [r7, #16]
 8012774:	e00a      	b.n	801278c <verify_sig_h_malform+0xca>
        if (sig_ptr[j])
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	4413      	add	r3, r2
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d001      	beq.n	8012786 <verify_sig_h_malform+0xc4>
            return 5;
 8012782:	2305      	movs	r3, #5
 8012784:	e006      	b.n	8012794 <verify_sig_h_malform+0xd2>
    for (j = k; j < OMEGA; ++j)
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	3301      	adds	r3, #1
 801278a:	613b      	str	r3, [r7, #16]
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	2b4f      	cmp	r3, #79	; 0x4f
 8012790:	d9f1      	bls.n	8012776 <verify_sig_h_malform+0xb4>

    return 0;
 8012792:	2300      	movs	r3, #0
}
 8012794:	4618      	mov	r0, r3
 8012796:	371c      	adds	r7, #28
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr

080127a0 <verify_sig_z_h_malform>:
*              return 0 if signature is ok
*              return 1 if an error found
*
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
int verify_sig_z_h_malform(uint8_t h_buf[N_*K], const uint8_t sig[CRYPTO_BYTES]){
 80127a0:	b580      	push	{r7, lr}
 80127a2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80127ac:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80127b0:	6018      	str	r0, [r3, #0]
 80127b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80127b6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80127ba:	6019      	str	r1, [r3, #0]
	uint8_t *sig_ptr = sig + SEEDBYTES;// + L*POLYZ_PACKEDBYTES;
 80127bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80127c0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	3320      	adds	r3, #32
 80127c8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	unsigned int i = 0;
 80127cc:	2300      	movs	r3, #0
 80127ce:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	poly z_i;
	for(i = 0; i < L; ++i){
 80127d2:	2300      	movs	r3, #0
 80127d4:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80127d8:	e01f      	b.n	801281a <verify_sig_z_h_malform+0x7a>
	    polyz_unpack(&z_i, sig_ptr + i*POLYZ_PACKEDBYTES);
 80127da:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 80127de:	4613      	mov	r3, r2
 80127e0:	00db      	lsls	r3, r3, #3
 80127e2:	4413      	add	r3, r2
 80127e4:	019b      	lsls	r3, r3, #6
 80127e6:	461a      	mov	r2, r3
 80127e8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80127ec:	441a      	add	r2, r3
 80127ee:	f107 0308 	add.w	r3, r7, #8
 80127f2:	4611      	mov	r1, r2
 80127f4:	4618      	mov	r0, r3
 80127f6:	f001 fb6b 	bl	8013ed0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
		if(poly_chknorm(&z_i, GAMMA1 - BETA))
 80127fa:	f107 0308 	add.w	r3, r7, #8
 80127fe:	4912      	ldr	r1, [pc, #72]	; (8012848 <verify_sig_z_h_malform+0xa8>)
 8012800:	4618      	mov	r0, r3
 8012802:	f000 fa11 	bl	8012c28 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d001      	beq.n	8012810 <verify_sig_z_h_malform+0x70>
	      return 2;
 801280c:	2302      	movs	r3, #2
 801280e:	e015      	b.n	801283c <verify_sig_z_h_malform+0x9c>
	for(i = 0; i < L; ++i){
 8012810:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8012814:	3301      	adds	r3, #1
 8012816:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 801281a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 801281e:	2b03      	cmp	r3, #3
 8012820:	d9db      	bls.n	80127da <verify_sig_z_h_malform+0x3a>
	}
	/* Decode h */
	return verify_sig_h_malform(h_buf, sig);
 8012822:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012826:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 801282a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801282e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8012832:	6811      	ldr	r1, [r2, #0]
 8012834:	6818      	ldr	r0, [r3, #0]
 8012836:	f7ff ff44 	bl	80126c2 <verify_sig_h_malform>
 801283a:	4603      	mov	r3, r0
}
 801283c:	4618      	mov	r0, r3
 801283e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	0001ffb2 	.word	0x0001ffb2

0801284c <unpack_sig_c>:


void unpack_sig_c(uint8_t c[SEEDBYTES], const uint8_t sig[CRYPTO_BYTES]){
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
    unsigned int i;
	for(i = 0; i < SEEDBYTES; ++i)
 8012856:	2300      	movs	r3, #0
 8012858:	60fb      	str	r3, [r7, #12]
 801285a:	e00a      	b.n	8012872 <unpack_sig_c+0x26>
	  c[i] = sig[i];
 801285c:	683a      	ldr	r2, [r7, #0]
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	441a      	add	r2, r3
 8012862:	6879      	ldr	r1, [r7, #4]
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	440b      	add	r3, r1
 8012868:	7812      	ldrb	r2, [r2, #0]
 801286a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SEEDBYTES; ++i)
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	3301      	adds	r3, #1
 8012870:	60fb      	str	r3, [r7, #12]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	2b1f      	cmp	r3, #31
 8012876:	d9f1      	bls.n	801285c <unpack_sig_c+0x10>
}
 8012878:	bf00      	nop
 801287a:	bf00      	nop
 801287c:	3714      	adds	r7, #20
 801287e:	46bd      	mov	sp, r7
 8012880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012884:	4770      	bx	lr

08012886 <unpack_sig_z>:

void unpack_sig_z(poly *z_i, uint32_t i, const uint8_t sig[CRYPTO_BYTES]){
 8012886:	b580      	push	{r7, lr}
 8012888:	b084      	sub	sp, #16
 801288a:	af00      	add	r7, sp, #0
 801288c:	60f8      	str	r0, [r7, #12]
 801288e:	60b9      	str	r1, [r7, #8]
 8012890:	607a      	str	r2, [r7, #4]
	polyz_unpack(z_i, sig + SEEDBYTES + i*POLYZ_PACKEDBYTES);
 8012892:	68ba      	ldr	r2, [r7, #8]
 8012894:	4613      	mov	r3, r2
 8012896:	00db      	lsls	r3, r3, #3
 8012898:	4413      	add	r3, r2
 801289a:	019b      	lsls	r3, r3, #6
 801289c:	3320      	adds	r3, #32
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	4413      	add	r3, r2
 80128a2:	4619      	mov	r1, r3
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	f001 fb13 	bl	8013ed0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
}
 80128aa:	bf00      	nop
 80128ac:	3710      	adds	r7, #16
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}

080128b2 <unpack_pk_rho>:

void unpack_pk_rho(uint8_t rho[SEEDBYTES],
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 80128b2:	b480      	push	{r7}
 80128b4:	b085      	sub	sp, #20
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
 80128ba:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80128bc:	2300      	movs	r3, #0
 80128be:	60fb      	str	r3, [r7, #12]
 80128c0:	e00a      	b.n	80128d8 <unpack_pk_rho+0x26>
    rho[i] = pk[i];
 80128c2:	683a      	ldr	r2, [r7, #0]
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	441a      	add	r2, r3
 80128c8:	6879      	ldr	r1, [r7, #4]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	440b      	add	r3, r1
 80128ce:	7812      	ldrb	r2, [r2, #0]
 80128d0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	3301      	adds	r3, #1
 80128d6:	60fb      	str	r3, [r7, #12]
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b1f      	cmp	r3, #31
 80128dc:	d9f1      	bls.n	80128c2 <unpack_pk_rho+0x10>
}
 80128de:	bf00      	nop
 80128e0:	bf00      	nop
 80128e2:	3714      	adds	r7, #20
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr

080128ec <unpack_pk_t1>:

void unpack_pk_t1(poly *t1_i, uint32_t i,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	607a      	str	r2, [r7, #4]
   polyt1_unpack(t1_i, pk + SEEDBYTES + i*POLYT1_PACKEDBYTES);
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	4613      	mov	r3, r2
 80128fc:	009b      	lsls	r3, r3, #2
 80128fe:	4413      	add	r3, r2
 8012900:	019b      	lsls	r3, r3, #6
 8012902:	3320      	adds	r3, #32
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	4413      	add	r3, r2
 8012908:	4619      	mov	r1, r3
 801290a:	68f8      	ldr	r0, [r7, #12]
 801290c:	f000 fd0f 	bl	801332e <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>
}
 8012910:	bf00      	nop
 8012912:	3710      	adds	r7, #16
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <pqcrystals_dilithium2aes_r_ref_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012920:	2300      	movs	r3, #0
 8012922:	60fb      	str	r3, [r7, #12]
 8012924:	e00e      	b.n	8012944 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0x2c>
    a->coeffs[i] = reduce32(a->coeffs[i]);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801292e:	4618      	mov	r0, r3
 8012930:	f002 fa9f 	bl	8014e72 <pqcrystals_dilithium2aes_r_ref_reduce32>
 8012934:	4601      	mov	r1, r0
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	68fa      	ldr	r2, [r7, #12]
 801293a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	3301      	adds	r3, #1
 8012942:	60fb      	str	r3, [r7, #12]
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	2bff      	cmp	r3, #255	; 0xff
 8012948:	d9ed      	bls.n	8012926 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0xe>

  DBENCH_STOP(*tred);
}
 801294a:	bf00      	nop
 801294c:	bf00      	nop
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <pqcrystals_dilithium2aes_r_ref_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
 8012954:	b580      	push	{r7, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 801295c:	2300      	movs	r3, #0
 801295e:	60fb      	str	r3, [r7, #12]
 8012960:	e00e      	b.n	8012980 <pqcrystals_dilithium2aes_r_ref_poly_caddq+0x2c>
    a->coeffs[i] = caddq(a->coeffs[i]);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	68fa      	ldr	r2, [r7, #12]
 8012966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801296a:	4618      	mov	r0, r3
 801296c:	f002 fa9c 	bl	8014ea8 <pqcrystals_dilithium2aes_r_ref_caddq>
 8012970:	4601      	mov	r1, r0
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	3301      	adds	r3, #1
 801297e:	60fb      	str	r3, [r7, #12]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2bff      	cmp	r3, #255	; 0xff
 8012984:	d9ed      	bls.n	8012962 <pqcrystals_dilithium2aes_r_ref_poly_caddq+0xe>

  DBENCH_STOP(*tred);
}
 8012986:	bf00      	nop
 8012988:	bf00      	nop
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <pqcrystals_dilithium2aes_r_ref_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
 8012990:	b480      	push	{r7}
 8012992:	b087      	sub	sp, #28
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	60b9      	str	r1, [r7, #8]
 801299a:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 801299c:	2300      	movs	r3, #0
 801299e:	617b      	str	r3, [r7, #20]
 80129a0:	e00f      	b.n	80129c2 <pqcrystals_dilithium2aes_r_ref_poly_add+0x32>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	697a      	ldr	r2, [r7, #20]
 80129a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6979      	ldr	r1, [r7, #20]
 80129ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80129b2:	18d1      	adds	r1, r2, r3
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	697a      	ldr	r2, [r7, #20]
 80129b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	3301      	adds	r3, #1
 80129c0:	617b      	str	r3, [r7, #20]
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	2bff      	cmp	r3, #255	; 0xff
 80129c6:	d9ec      	bls.n	80129a2 <pqcrystals_dilithium2aes_r_ref_poly_add+0x12>

  DBENCH_STOP(*tadd);
}
 80129c8:	bf00      	nop
 80129ca:	bf00      	nop
 80129cc:	371c      	adds	r7, #28
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr

080129d6 <pqcrystals_dilithium2aes_r_ref_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 80129d6:	b480      	push	{r7}
 80129d8:	b087      	sub	sp, #28
 80129da:	af00      	add	r7, sp, #0
 80129dc:	60f8      	str	r0, [r7, #12]
 80129de:	60b9      	str	r1, [r7, #8]
 80129e0:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80129e2:	2300      	movs	r3, #0
 80129e4:	617b      	str	r3, [r7, #20]
 80129e6:	e00f      	b.n	8012a08 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x32>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	697a      	ldr	r2, [r7, #20]
 80129ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6979      	ldr	r1, [r7, #20]
 80129f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80129f8:	1ad1      	subs	r1, r2, r3
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	697a      	ldr	r2, [r7, #20]
 80129fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	3301      	adds	r3, #1
 8012a06:	617b      	str	r3, [r7, #20]
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	2bff      	cmp	r3, #255	; 0xff
 8012a0c:	d9ec      	bls.n	80129e8 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x12>

  DBENCH_STOP(*tadd);
}
 8012a0e:	bf00      	nop
 8012a10:	bf00      	nop
 8012a12:	371c      	adds	r7, #28
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr

08012a1c <pqcrystals_dilithium2aes_r_ref_poly_shiftl>:
* Description: Multiply polynomial by 2^D without modular reduction. Assumes
*              input coefficients to be less than 2^{31-D} in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_shiftl(poly *a) {
 8012a1c:	b480      	push	{r7}
 8012a1e:	b085      	sub	sp, #20
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012a24:	2300      	movs	r3, #0
 8012a26:	60fb      	str	r3, [r7, #12]
 8012a28:	e00b      	b.n	8012a42 <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0x26>
    a->coeffs[i] <<= D;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	68fa      	ldr	r2, [r7, #12]
 8012a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a32:	0359      	lsls	r1, r3, #13
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	60fb      	str	r3, [r7, #12]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	2bff      	cmp	r3, #255	; 0xff
 8012a46:	d9f0      	bls.n	8012a2a <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0xe>

  DBENCH_STOP(*tmul);
}
 8012a48:	bf00      	nop
 8012a4a:	bf00      	nop
 8012a4c:	3714      	adds	r7, #20
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr

08012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>:
* Description: Inplace forward NTT. Coefficients can grow by
*              8*Q in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_ntt(poly *a) {
 8012a56:	b580      	push	{r7, lr}
 8012a58:	b082      	sub	sp, #8
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  ntt(a->coeffs);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7ff fb75 	bl	8012150 <pqcrystals_dilithium2aes_r_ref_ntt>

  DBENCH_STOP(*tmul);
}
 8012a66:	bf00      	nop
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}

08012a6e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>:
*              Input coefficients need to be less than Q in absolute
*              value and output coefficients are again bounded by Q.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_invntt_tomont(poly *a) {
 8012a6e:	b580      	push	{r7, lr}
 8012a70:	b082      	sub	sp, #8
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  invntt_tomont(a->coeffs);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7ff fbd5 	bl	8012228 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>

  DBENCH_STOP(*tmul);
}
 8012a7e:	bf00      	nop
 8012a80:	3708      	adds	r7, #8
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 8012a86:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012a94:	2300      	movs	r3, #0
 8012a96:	617b      	str	r3, [r7, #20]
 8012a98:	e022      	b.n	8012ae0 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x5a>
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	697a      	ldr	r2, [r7, #20]
 8012a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aa2:	17da      	asrs	r2, r3, #31
 8012aa4:	4698      	mov	r8, r3
 8012aa6:	4691      	mov	r9, r2
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	697a      	ldr	r2, [r7, #20]
 8012aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ab0:	17da      	asrs	r2, r3, #31
 8012ab2:	469a      	mov	sl, r3
 8012ab4:	4693      	mov	fp, r2
 8012ab6:	fb0a f209 	mul.w	r2, sl, r9
 8012aba:	fb08 f30b 	mul.w	r3, r8, fp
 8012abe:	4413      	add	r3, r2
 8012ac0:	fba8 450a 	umull	r4, r5, r8, sl
 8012ac4:	442b      	add	r3, r5
 8012ac6:	461d      	mov	r5, r3
 8012ac8:	4620      	mov	r0, r4
 8012aca:	4629      	mov	r1, r5
 8012acc:	f002 f98b 	bl	8014de6 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012ad0:	4601      	mov	r1, r0
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	697a      	ldr	r2, [r7, #20]
 8012ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	3301      	adds	r3, #1
 8012ade:	617b      	str	r3, [r7, #20]
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	2bff      	cmp	r3, #255	; 0xff
 8012ae4:	d9d9      	bls.n	8012a9a <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x14>

  DBENCH_STOP(*tmul);
}
 8012ae6:	bf00      	nop
 8012ae8:	bf00      	nop
 8012aea:	3718      	adds	r7, #24
 8012aec:	46bd      	mov	sp, r7
 8012aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012af2 <pqcrystals_dilithium2aes_r_ref_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8012af2:	b580      	push	{r7, lr}
 8012af4:	b086      	sub	sp, #24
 8012af6:	af00      	add	r7, sp, #0
 8012af8:	60f8      	str	r0, [r7, #12]
 8012afa:	60b9      	str	r1, [r7, #8]
 8012afc:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012afe:	2300      	movs	r3, #0
 8012b00:	617b      	str	r3, [r7, #20]
 8012b02:	e012      	b.n	8012b2a <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x38>
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	18d0      	adds	r0, r2, r3
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	697a      	ldr	r2, [r7, #20]
 8012b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b14:	4619      	mov	r1, r3
 8012b16:	f002 f9db 	bl	8014ed0 <pqcrystals_dilithium2aes_r_ref_power2round>
 8012b1a:	4601      	mov	r1, r0
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	697a      	ldr	r2, [r7, #20]
 8012b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	3301      	adds	r3, #1
 8012b28:	617b      	str	r3, [r7, #20]
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	2bff      	cmp	r3, #255	; 0xff
 8012b2e:	d9e9      	bls.n	8012b04 <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x12>

  DBENCH_STOP(*tround);
}
 8012b30:	bf00      	nop
 8012b32:	bf00      	nop
 8012b34:	3718      	adds	r7, #24
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <pqcrystals_dilithium2aes_r_ref_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b086      	sub	sp, #24
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	60f8      	str	r0, [r7, #12]
 8012b42:	60b9      	str	r1, [r7, #8]
 8012b44:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012b46:	2300      	movs	r3, #0
 8012b48:	617b      	str	r3, [r7, #20]
 8012b4a:	e012      	b.n	8012b72 <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x38>
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	009b      	lsls	r3, r3, #2
 8012b50:	68ba      	ldr	r2, [r7, #8]
 8012b52:	18d0      	adds	r0, r2, r3
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	697a      	ldr	r2, [r7, #20]
 8012b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	f002 f9cf 	bl	8014f00 <pqcrystals_dilithium2aes_r_ref_decompose>
 8012b62:	4601      	mov	r1, r0
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	697a      	ldr	r2, [r7, #20]
 8012b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	617b      	str	r3, [r7, #20]
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	2bff      	cmp	r3, #255	; 0xff
 8012b76:	d9e9      	bls.n	8012b4c <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x12>

  DBENCH_STOP(*tround);
}
 8012b78:	bf00      	nop
 8012b7a:	bf00      	nop
 8012b7c:	3718      	adds	r7, #24
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8012b82:	b580      	push	{r7, lr}
 8012b84:	b086      	sub	sp, #24
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	60f8      	str	r0, [r7, #12]
 8012b8a:	60b9      	str	r1, [r7, #8]
 8012b8c:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	613b      	str	r3, [r7, #16]
  DBENCH_START();

  for(i = 0; i < N_; ++i) {
 8012b92:	2300      	movs	r3, #0
 8012b94:	617b      	str	r3, [r7, #20]
 8012b96:	e01b      	b.n	8012bd0 <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x4e>
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	697a      	ldr	r2, [r7, #20]
 8012b9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	697a      	ldr	r2, [r7, #20]
 8012ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ba8:	4619      	mov	r1, r3
 8012baa:	f002 f9e5 	bl	8014f78 <pqcrystals_dilithium2aes_r_ref_make_hint>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	697a      	ldr	r2, [r7, #20]
 8012bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s += h->coeffs[i];
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	697a      	ldr	r2, [r7, #20]
 8012bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	4413      	add	r3, r2
 8012bc8:	613b      	str	r3, [r7, #16]
  for(i = 0; i < N_; ++i) {
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	3301      	adds	r3, #1
 8012bce:	617b      	str	r3, [r7, #20]
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	2bff      	cmp	r3, #255	; 0xff
 8012bd4:	d9e0      	bls.n	8012b98 <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x16>
  }

  DBENCH_STOP(*tround);
  return s;
 8012bd6:	693b      	ldr	r3, [r7, #16]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <poly_use_hint_r>:
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);

  DBENCH_STOP(*tround);
}

void poly_use_hint_r(poly *b, const poly *a, const uint8_t h[N_]) {
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b086      	sub	sp, #24
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012bec:	2300      	movs	r3, #0
 8012bee:	617b      	str	r3, [r7, #20]
 8012bf0:	e012      	b.n	8012c18 <poly_use_hint_r+0x38>
    b->coeffs[i] = use_hint(a->coeffs[i], h[i]);
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	697a      	ldr	r2, [r7, #20]
 8012bf6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	4413      	add	r3, r2
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	4619      	mov	r1, r3
 8012c04:	f002 f9d8 	bl	8014fb8 <pqcrystals_dilithium2aes_r_ref_use_hint>
 8012c08:	4601      	mov	r1, r0
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	697a      	ldr	r2, [r7, #20]
 8012c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	3301      	adds	r3, #1
 8012c16:	617b      	str	r3, [r7, #20]
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	2bff      	cmp	r3, #255	; 0xff
 8012c1c:	d9e9      	bls.n	8012bf2 <poly_use_hint_r+0x12>

  DBENCH_STOP(*tround);
}
 8012c1e:	bf00      	nop
 8012c20:	bf00      	nop
 8012c22:	3718      	adds	r7, #24
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>:
* Arguments:   - const poly *a: pointer to polynomial
*              - int32_t B: norm bound
*
* Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
**************************************************/
int poly_chknorm(const poly *a, int32_t B) {
 8012c28:	b480      	push	{r7}
 8012c2a:	b085      	sub	sp, #20
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q_-1)/8)
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	4a16      	ldr	r2, [pc, #88]	; (8012c90 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x68>)
 8012c36:	4293      	cmp	r3, r2
 8012c38:	dd01      	ble.n	8012c3e <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x16>
    return 1;
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	e022      	b.n	8012c84 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N_; ++i) {
 8012c3e:	2300      	movs	r3, #0
 8012c40:	60fb      	str	r3, [r7, #12]
 8012c42:	e01b      	b.n	8012c7c <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x54>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	68fa      	ldr	r2, [r7, #12]
 8012c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c4c:	17db      	asrs	r3, r3, #31
 8012c4e:	60bb      	str	r3, [r7, #8]
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	68fa      	ldr	r2, [r7, #12]
 8012c54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	68f9      	ldr	r1, [r7, #12]
 8012c5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012c60:	0059      	lsls	r1, r3, #1
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	400b      	ands	r3, r1
 8012c66:	1ad3      	subs	r3, r2, r3
 8012c68:	60bb      	str	r3, [r7, #8]

    if(t >= B) {
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	db01      	blt.n	8012c76 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x4e>
      DBENCH_STOP(*tsample);
      return 1;
 8012c72:	2301      	movs	r3, #1
 8012c74:	e006      	b.n	8012c84 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>
  for(i = 0; i < N_; ++i) {
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	60fb      	str	r3, [r7, #12]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2bff      	cmp	r3, #255	; 0xff
 8012c80:	d9e0      	bls.n	8012c44 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x1c>
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
 8012c82:	2300      	movs	r3, #0
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3714      	adds	r7, #20
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8e:	4770      	bx	lr
 8012c90:	000ffc00 	.word	0x000ffc00

08012c94 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b089      	sub	sp, #36	; 0x24
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
 8012ca0:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t;
  DBENCH_START();

  ctr = pos = 0;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	61bb      	str	r3, [r7, #24]
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 8012caa:	e02a      	b.n	8012d02 <rej_uniform+0x6e>
    t  = buf[pos++];
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	1c5a      	adds	r2, r3, #1
 8012cb0:	61ba      	str	r2, [r7, #24]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 8;
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	1c5a      	adds	r2, r3, #1
 8012cbe:	61ba      	str	r2, [r7, #24]
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	021b      	lsls	r3, r3, #8
 8012cc8:	697a      	ldr	r2, [r7, #20]
 8012cca:	4313      	orrs	r3, r2
 8012ccc:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 16;
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	1c5a      	adds	r2, r3, #1
 8012cd2:	61ba      	str	r2, [r7, #24]
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	041b      	lsls	r3, r3, #16
 8012cdc:	697a      	ldr	r2, [r7, #20]
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	617b      	str	r3, [r7, #20]
    t &= 0x7FFFFF;
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012ce8:	617b      	str	r3, [r7, #20]

    if(t < Q_)
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	4a0d      	ldr	r2, [pc, #52]	; (8012d24 <rej_uniform+0x90>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d807      	bhi.n	8012d02 <rej_uniform+0x6e>
      a[ctr++] = t;
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	1c5a      	adds	r2, r3, #1
 8012cf6:	61fa      	str	r2, [r7, #28]
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	68fa      	ldr	r2, [r7, #12]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	697a      	ldr	r2, [r7, #20]
 8012d00:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 8012d02:	69fa      	ldr	r2, [r7, #28]
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d204      	bcs.n	8012d14 <rej_uniform+0x80>
 8012d0a:	69bb      	ldr	r3, [r7, #24]
 8012d0c:	3303      	adds	r3, #3
 8012d0e:	683a      	ldr	r2, [r7, #0]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d2cb      	bcs.n	8012cac <rej_uniform+0x18>
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8012d14:	69fb      	ldr	r3, [r7, #28]
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3724      	adds	r7, #36	; 0x24
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop
 8012d24:	007fe000 	.word	0x007fe000

08012d28 <pqcrystals_dilithium2aes_r_ref_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	f5ad 6de5 	sub.w	sp, sp, #1832	; 0x728
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d34:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012d38:	6018      	str	r0, [r3, #0]
 8012d3a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d3e:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8012d42:	6019      	str	r1, [r3, #0]
 8012d44:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d48:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 8012d4c:	801a      	strh	r2, [r3, #0]
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 8012d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012d52:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 8012d56:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d5a:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 8012d5e:	881a      	ldrh	r2, [r3, #0]
 8012d60:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d64:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8012d68:	f107 0010 	add.w	r0, r7, #16
 8012d6c:	6819      	ldr	r1, [r3, #0]
 8012d6e:	f002 fde3 	bl	8015938 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8012d72:	f107 0210 	add.w	r2, r7, #16
 8012d76:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8012d7a:	210c      	movs	r1, #12
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7fb fd9e 	bl	800e8be <pqcrystals_aes256ctr_ref_squeezeblocks>

  ctr = rej_uniform(a->coeffs, N_, buf, buflen);
 8012d82:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d86:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012d8a:	6818      	ldr	r0, [r3, #0]
 8012d8c:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012d90:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8012d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012d98:	f7ff ff7c 	bl	8012c94 <rej_uniform>
 8012d9c:	f8c7 0720 	str.w	r0, [r7, #1824]	; 0x720

  while(ctr < N_) {
 8012da0:	e059      	b.n	8012e56 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x12e>
    off = buflen % 3;
 8012da2:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8012da6:	4b31      	ldr	r3, [pc, #196]	; (8012e6c <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x144>)
 8012da8:	fba3 1302 	umull	r1, r3, r3, r2
 8012dac:	0859      	lsrs	r1, r3, #1
 8012dae:	460b      	mov	r3, r1
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	440b      	add	r3, r1
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
    for(i = 0; i < off; ++i)
 8012dba:	2300      	movs	r3, #0
 8012dbc:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8012dc0:	e01a      	b.n	8012df8 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0xd0>
      buf[i] = buf[buflen - off + i];
 8012dc2:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8012dc6:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012dca:	1ad2      	subs	r2, r2, r3
 8012dcc:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012dd0:	4413      	add	r3, r2
 8012dd2:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8012dd6:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8012dda:	5cd1      	ldrb	r1, [r2, r3]
 8012ddc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012de0:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8012de4:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012de8:	4413      	add	r3, r2
 8012dea:	460a      	mov	r2, r1
 8012dec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < off; ++i)
 8012dee:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012df2:	3301      	adds	r3, #1
 8012df4:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8012df8:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
 8012dfc:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d3de      	bcc.n	8012dc2 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x9a>

    stream128_squeezeblocks(buf + off, 1, &state);
 8012e04:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012e08:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012e0c:	4413      	add	r3, r2
 8012e0e:	f107 0210 	add.w	r2, r7, #16
 8012e12:	2101      	movs	r1, #1
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fb fd52 	bl	800e8be <pqcrystals_aes256ctr_ref_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
 8012e1a:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012e1e:	3340      	adds	r3, #64	; 0x40
 8012e20:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
    ctr += rej_uniform(a->coeffs + ctr, N_ - ctr, buf, buflen);
 8012e24:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012e28:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	18d0      	adds	r0, r2, r3
 8012e36:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012e3a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8012e3e:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012e42:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8012e46:	f7ff ff25 	bl	8012c94 <rej_uniform>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012e50:	4413      	add	r3, r2
 8012e52:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
  while(ctr < N_) {
 8012e56:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012e5a:	2bff      	cmp	r3, #255	; 0xff
 8012e5c:	d9a1      	bls.n	8012da2 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x7a>
  }
}
 8012e5e:	bf00      	nop
 8012e60:	bf00      	nop
 8012e62:	f507 67e5 	add.w	r7, r7, #1832	; 0x728
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	aaaaaaab 	.word	0xaaaaaaab

08012e70 <rej_eta>:
**************************************************/
static unsigned int rej_eta(int32_t *a,
                            unsigned int len,
                            const uint8_t *buf,
                            unsigned int buflen)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b089      	sub	sp, #36	; 0x24
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	60f8      	str	r0, [r7, #12]
 8012e78:	60b9      	str	r1, [r7, #8]
 8012e7a:	607a      	str	r2, [r7, #4]
 8012e7c:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t0, t1;
  DBENCH_START();

  ctr = pos = 0;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	61bb      	str	r3, [r7, #24]
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos < buflen) {
 8012e86:	e045      	b.n	8012f14 <rej_eta+0xa4>
    t0 = buf[pos] & 0x0F;
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	4413      	add	r3, r2
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	f003 030f 	and.w	r3, r3, #15
 8012e94:	617b      	str	r3, [r7, #20]
    t1 = buf[pos++] >> 4;
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	1c5a      	adds	r2, r3, #1
 8012e9a:	61ba      	str	r2, [r7, #24]
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	4413      	add	r3, r2
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	091b      	lsrs	r3, r3, #4
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	613b      	str	r3, [r7, #16]

#if ETA == 2
    if(t0 < 15) {
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2b0e      	cmp	r3, #14
 8012eac:	d815      	bhi.n	8012eda <rej_eta+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	22cd      	movs	r2, #205	; 0xcd
 8012eb2:	fb02 f303 	mul.w	r3, r2, r3
 8012eb6:	0a9a      	lsrs	r2, r3, #10
 8012eb8:	4613      	mov	r3, r2
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	4413      	add	r3, r2
 8012ebe:	697a      	ldr	r2, [r7, #20]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	617b      	str	r3, [r7, #20]
      a[ctr++] = 2 - t0;
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	f1c3 0102 	rsb	r1, r3, #2
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	1c5a      	adds	r2, r3, #1
 8012ece:	61fa      	str	r2, [r7, #28]
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	68fa      	ldr	r2, [r7, #12]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	460a      	mov	r2, r1
 8012ed8:	601a      	str	r2, [r3, #0]
    }
    if(t1 < 15 && ctr < len) {
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	2b0e      	cmp	r3, #14
 8012ede:	d819      	bhi.n	8012f14 <rej_eta+0xa4>
 8012ee0:	69fa      	ldr	r2, [r7, #28]
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d215      	bcs.n	8012f14 <rej_eta+0xa4>
      t1 = t1 - (205*t1 >> 10)*5;
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	22cd      	movs	r2, #205	; 0xcd
 8012eec:	fb02 f303 	mul.w	r3, r2, r3
 8012ef0:	0a9a      	lsrs	r2, r3, #10
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	4413      	add	r3, r2
 8012ef8:	693a      	ldr	r2, [r7, #16]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	613b      	str	r3, [r7, #16]
      a[ctr++] = 2 - t1;
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	f1c3 0102 	rsb	r1, r3, #2
 8012f04:	69fb      	ldr	r3, [r7, #28]
 8012f06:	1c5a      	adds	r2, r3, #1
 8012f08:	61fa      	str	r2, [r7, #28]
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	68fa      	ldr	r2, [r7, #12]
 8012f0e:	4413      	add	r3, r2
 8012f10:	460a      	mov	r2, r1
 8012f12:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos < buflen) {
 8012f14:	69fa      	ldr	r2, [r7, #28]
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d203      	bcs.n	8012f24 <rej_eta+0xb4>
 8012f1c:	69ba      	ldr	r2, [r7, #24]
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d3b1      	bcc.n	8012e88 <rej_eta+0x18>
      a[ctr++] = 4 - t1;
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8012f24:	69fb      	ldr	r3, [r7, #28]
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3724      	adds	r7, #36	; 0x24
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f30:	4770      	bx	lr

08012f32 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[SEEDBYTES],
                      uint16_t nonce)
{
 8012f32:	b580      	push	{r7, lr}
 8012f34:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012f3e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012f42:	6018      	str	r0, [r3, #0]
 8012f44:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012f48:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8012f4c:	6019      	str	r1, [r3, #0]
 8012f4e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012f52:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 8012f56:	801a      	strh	r2, [r3, #0]
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES;
 8012f58:	23c0      	movs	r3, #192	; 0xc0
 8012f5a:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 8012f5e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012f62:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 8012f66:	881a      	ldrh	r2, [r3, #0]
 8012f68:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012f6c:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8012f70:	f107 0010 	add.w	r0, r7, #16
 8012f74:	6819      	ldr	r1, [r3, #0]
 8012f76:	f002 fcdf 	bl	8015938 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8012f7a:	f107 0210 	add.w	r2, r7, #16
 8012f7e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012f82:	2103      	movs	r1, #3
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7fb fc9a 	bl	800e8be <pqcrystals_aes256ctr_ref_squeezeblocks>

  ctr = rej_eta(a->coeffs, N_, buf, buflen);
 8012f8a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012f8e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012f92:	6818      	ldr	r0, [r3, #0]
 8012f94:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8012f98:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8012f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012fa0:	f7ff ff66 	bl	8012e70 <rej_eta>
 8012fa4:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4

  while(ctr < N_) {
 8012fa8:	e01f      	b.n	8012fea <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0xb8>
    stream128_squeezeblocks(buf, 1, &state);
 8012faa:	f107 0210 	add.w	r2, r7, #16
 8012fae:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012fb2:	2101      	movs	r1, #1
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7fb fc82 	bl	800e8be <pqcrystals_aes256ctr_ref_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N_ - ctr, buf, STREAM128_BLOCKBYTES);
 8012fba:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012fbe:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	18d0      	adds	r0, r2, r3
 8012fcc:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012fd0:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8012fd4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8012fd8:	2340      	movs	r3, #64	; 0x40
 8012fda:	f7ff ff49 	bl	8012e70 <rej_eta>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012fe4:	4413      	add	r3, r2
 8012fe6:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  while(ctr < N_) {
 8012fea:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012fee:	2bff      	cmp	r3, #255	; 0xff
 8012ff0:	d9db      	bls.n	8012faa <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0x78>
  }
}
 8012ff2:	bf00      	nop
 8012ff4:	bf00      	nop
 8012ff6:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	f5ad 6dca 	sub.w	sp, sp, #1616	; 0x650
 8013004:	af00      	add	r7, sp, #0
 8013006:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801300a:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801300e:	6018      	str	r0, [r3, #0]
 8013010:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8013014:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8013018:	6019      	str	r1, [r3, #0]
 801301a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801301e:	f2a3 634a 	subw	r3, r3, #1610	; 0x64a
 8013022:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 8013024:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8013028:	f2a3 634a 	subw	r3, r3, #1610	; 0x64a
 801302c:	881a      	ldrh	r2, [r3, #0]
 801302e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8013032:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8013036:	f107 0010 	add.w	r0, r7, #16
 801303a:	6819      	ldr	r1, [r3, #0]
 801303c:	f002 fc7c 	bl	8015938 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8013040:	f107 0210 	add.w	r2, r7, #16
 8013044:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8013048:	2109      	movs	r1, #9
 801304a:	4618      	mov	r0, r3
 801304c:	f7fb fc37 	bl	800e8be <pqcrystals_aes256ctr_ref_squeezeblocks>
  polyz_unpack(a, buf);
 8013050:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8013054:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8013058:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801305c:	4611      	mov	r1, r2
 801305e:	6818      	ldr	r0, [r3, #0]
 8013060:	f000 ff36 	bl	8013ed0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
}
 8013064:	bf00      	nop
 8013066:	f507 67ca 	add.w	r7, r7, #1616	; 0x650
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}

0801306e <pqcrystals_dilithium2aes_r_ref_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 801306e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013072:	b0de      	sub	sp, #376	; 0x178
 8013074:	af00      	add	r7, sp, #0
 8013076:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801307a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801307e:	6018      	str	r0, [r3, #0]
 8013080:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013084:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8013088:	6019      	str	r1, [r3, #0]
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
 801308a:	f107 0308 	add.w	r3, r7, #8
 801308e:	4618      	mov	r0, r3
 8013090:	f7fe ffdb 	bl	801204a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
 8013094:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013098:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801309c:	f107 0008 	add.w	r0, r7, #8
 80130a0:	2220      	movs	r2, #32
 80130a2:	6819      	ldr	r1, [r3, #0]
 80130a4:	f7fe ffdc 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80130a8:	f107 0308 	add.w	r3, r7, #8
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7fe ffef 	bl	8012090 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
 80130b2:	f107 0208 	add.w	r2, r7, #8
 80130b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80130ba:	2101      	movs	r1, #1
 80130bc:	4618      	mov	r0, r3
 80130be:	f7fe fffb 	bl	80120b8 <pqcrystals_fips202_ref_shake256_squeezeblocks>

  signs = 0;
 80130c2:	f04f 0200 	mov.w	r2, #0
 80130c6:	f04f 0300 	mov.w	r3, #0
 80130ca:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 80130ce:	2300      	movs	r3, #0
 80130d0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80130d4:	e027      	b.n	8013126 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xb8>
    signs |= (uint64_t)buf[i] << 8*i;
 80130d6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80130da:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80130de:	4413      	add	r3, r2
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	2200      	movs	r2, #0
 80130e6:	4698      	mov	r8, r3
 80130e8:	4691      	mov	r9, r2
 80130ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80130ee:	00db      	lsls	r3, r3, #3
 80130f0:	f1a3 0120 	sub.w	r1, r3, #32
 80130f4:	f1c3 0220 	rsb	r2, r3, #32
 80130f8:	fa09 f503 	lsl.w	r5, r9, r3
 80130fc:	fa08 f101 	lsl.w	r1, r8, r1
 8013100:	430d      	orrs	r5, r1
 8013102:	fa28 f202 	lsr.w	r2, r8, r2
 8013106:	4315      	orrs	r5, r2
 8013108:	fa08 f403 	lsl.w	r4, r8, r3
 801310c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8013110:	ea42 0a04 	orr.w	sl, r2, r4
 8013114:	ea43 0b05 	orr.w	fp, r3, r5
 8013118:	e9c7 ab5a 	strd	sl, fp, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 801311c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013120:	3301      	adds	r3, #1
 8013122:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013126:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801312a:	2b07      	cmp	r3, #7
 801312c:	d9d3      	bls.n	80130d6 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x68>
  pos = 8;
 801312e:	2308      	movs	r3, #8
 8013130:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  for(i = 0; i < N_; ++i)
 8013134:	2300      	movs	r3, #0
 8013136:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801313a:	e00e      	b.n	801315a <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xec>
    c->coeffs[i] = 0;
 801313c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013140:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801314a:	2100      	movs	r1, #0
 801314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8013150:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013154:	3301      	adds	r3, #1
 8013156:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801315a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801315e:	2bff      	cmp	r3, #255	; 0xff
 8013160:	d9ec      	bls.n	801313c <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xce>
  for(i = N_-TAU; i < N_; ++i) {
 8013162:	23d9      	movs	r3, #217	; 0xd9
 8013164:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013168:	e054      	b.n	8013214 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x1a6>
    do {
      if(pos >= SHAKE256_RATE) {
 801316a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801316e:	2b87      	cmp	r3, #135	; 0x87
 8013170:	d90a      	bls.n	8013188 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x11a>
        shake256_squeezeblocks(buf, 1, &state);
 8013172:	f107 0208 	add.w	r2, r7, #8
 8013176:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801317a:	2101      	movs	r1, #1
 801317c:	4618      	mov	r0, r3
 801317e:	f7fe ff9b 	bl	80120b8 <pqcrystals_fips202_ref_shake256_squeezeblocks>
        pos = 0;
 8013182:	2300      	movs	r3, #0
 8013184:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      }

      b = buf[pos++];
 8013188:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801318c:	1c5a      	adds	r2, r3, #1
 801318e:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8013192:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013196:	443b      	add	r3, r7
 8013198:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 801319c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    } while(b > i);
 80131a0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80131a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d8de      	bhi.n	801316a <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>

    c->coeffs[i] = c->coeffs[b];
 80131ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80131b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80131ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80131be:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80131c2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80131cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 80131d0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80131d4:	f003 0301 	and.w	r3, r3, #1
 80131d8:	005b      	lsls	r3, r3, #1
 80131da:	f1c3 0301 	rsb	r3, r3, #1
 80131de:	4619      	mov	r1, r3
 80131e0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80131e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80131ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    signs >>= 1;
 80131f2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80131f6:	f04f 0200 	mov.w	r2, #0
 80131fa:	f04f 0300 	mov.w	r3, #0
 80131fe:	0842      	lsrs	r2, r0, #1
 8013200:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013204:	084b      	lsrs	r3, r1, #1
 8013206:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = N_-TAU; i < N_; ++i) {
 801320a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801320e:	3301      	adds	r3, #1
 8013210:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013214:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013218:	2bff      	cmp	r3, #255	; 0xff
 801321a:	d9a6      	bls.n	801316a <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>
  }
}
 801321c:	bf00      	nop
 801321e:	bf00      	nop
 8013220:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8013224:	46bd      	mov	sp, r7
 8013226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801322a <pqcrystals_dilithium2aes_r_ref_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 801322a:	b480      	push	{r7}
 801322c:	b085      	sub	sp, #20
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
 8013232:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013234:	2300      	movs	r3, #0
 8013236:	60fb      	str	r3, [r7, #12]
 8013238:	e06f      	b.n	801331a <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0xf0>
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	009a      	lsls	r2, r3, #2
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	4613      	mov	r3, r2
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	4413      	add	r3, r2
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	4413      	add	r3, r2
 8013250:	b2ca      	uxtb	r2, r1
 8013252:	701a      	strb	r2, [r3, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	009a      	lsls	r2, r3, #2
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801325e:	121b      	asrs	r3, r3, #8
 8013260:	b25a      	sxtb	r2, r3
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	1c59      	adds	r1, r3, #1
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801326e:	009b      	lsls	r3, r3, #2
 8013270:	b25b      	sxtb	r3, r3
 8013272:	4313      	orrs	r3, r2
 8013274:	b259      	sxtb	r1, r3
 8013276:	68fa      	ldr	r2, [r7, #12]
 8013278:	4613      	mov	r3, r2
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	4413      	add	r3, r2
 801327e:	3301      	adds	r3, #1
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	4413      	add	r3, r2
 8013284:	b2ca      	uxtb	r2, r1
 8013286:	701a      	strb	r2, [r3, #0]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	1c5a      	adds	r2, r3, #1
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013294:	119b      	asrs	r3, r3, #6
 8013296:	b25a      	sxtb	r2, r3
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	1c99      	adds	r1, r3, #2
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80132a4:	011b      	lsls	r3, r3, #4
 80132a6:	b25b      	sxtb	r3, r3
 80132a8:	4313      	orrs	r3, r2
 80132aa:	b259      	sxtb	r1, r3
 80132ac:	68fa      	ldr	r2, [r7, #12]
 80132ae:	4613      	mov	r3, r2
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	4413      	add	r3, r2
 80132b4:	3302      	adds	r3, #2
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	4413      	add	r3, r2
 80132ba:	b2ca      	uxtb	r2, r1
 80132bc:	701a      	strb	r2, [r3, #0]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	1c9a      	adds	r2, r3, #2
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ca:	111b      	asrs	r3, r3, #4
 80132cc:	b25a      	sxtb	r2, r3
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	1cd9      	adds	r1, r3, #3
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80132da:	019b      	lsls	r3, r3, #6
 80132dc:	b25b      	sxtb	r3, r3
 80132de:	4313      	orrs	r3, r2
 80132e0:	b259      	sxtb	r1, r3
 80132e2:	68fa      	ldr	r2, [r7, #12]
 80132e4:	4613      	mov	r3, r2
 80132e6:	009b      	lsls	r3, r3, #2
 80132e8:	4413      	add	r3, r2
 80132ea:	3303      	adds	r3, #3
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	4413      	add	r3, r2
 80132f0:	b2ca      	uxtb	r2, r1
 80132f2:	701a      	strb	r2, [r3, #0]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	1cda      	adds	r2, r3, #3
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013300:	1099      	asrs	r1, r3, #2
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	4613      	mov	r3, r2
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	4413      	add	r3, r2
 801330a:	3304      	adds	r3, #4
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	4413      	add	r3, r2
 8013310:	b2ca      	uxtb	r2, r1
 8013312:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	3301      	adds	r3, #1
 8013318:	60fb      	str	r3, [r7, #12]
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	2b3f      	cmp	r3, #63	; 0x3f
 801331e:	d98c      	bls.n	801323a <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013320:	bf00      	nop
 8013322:	bf00      	nop
 8013324:	3714      	adds	r7, #20
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr

0801332e <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>:
*              Output coefficients are standard representatives.
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
 801332e:	b480      	push	{r7}
 8013330:	b085      	sub	sp, #20
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
 8013336:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013338:	2300      	movs	r3, #0
 801333a:	60fb      	str	r3, [r7, #12]
 801333c:	e076      	b.n	801342c <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0xfe>
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 801333e:	68fa      	ldr	r2, [r7, #12]
 8013340:	4613      	mov	r3, r2
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	4413      	add	r3, r2
 8013346:	683a      	ldr	r2, [r7, #0]
 8013348:	4413      	add	r3, r2
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	4619      	mov	r1, r3
 801334e:	68fa      	ldr	r2, [r7, #12]
 8013350:	4613      	mov	r3, r2
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	4413      	add	r3, r2
 8013356:	3301      	adds	r3, #1
 8013358:	683a      	ldr	r2, [r7, #0]
 801335a:	4413      	add	r3, r2
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	021b      	lsls	r3, r3, #8
 8013360:	430b      	orrs	r3, r1
 8013362:	4619      	mov	r1, r3
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	009a      	lsls	r2, r3, #2
 8013368:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 8013372:	68fa      	ldr	r2, [r7, #12]
 8013374:	4613      	mov	r3, r2
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	4413      	add	r3, r2
 801337a:	3301      	adds	r3, #1
 801337c:	683a      	ldr	r2, [r7, #0]
 801337e:	4413      	add	r3, r2
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	089b      	lsrs	r3, r3, #2
 8013384:	b2db      	uxtb	r3, r3
 8013386:	4619      	mov	r1, r3
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	4613      	mov	r3, r2
 801338c:	009b      	lsls	r3, r3, #2
 801338e:	4413      	add	r3, r2
 8013390:	3302      	adds	r3, #2
 8013392:	683a      	ldr	r2, [r7, #0]
 8013394:	4413      	add	r3, r2
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	019b      	lsls	r3, r3, #6
 801339a:	430b      	orrs	r3, r1
 801339c:	4619      	mov	r1, r3
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	1c5a      	adds	r2, r3, #1
 80133a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 80133ae:	68fa      	ldr	r2, [r7, #12]
 80133b0:	4613      	mov	r3, r2
 80133b2:	009b      	lsls	r3, r3, #2
 80133b4:	4413      	add	r3, r2
 80133b6:	3302      	adds	r3, #2
 80133b8:	683a      	ldr	r2, [r7, #0]
 80133ba:	4413      	add	r3, r2
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	091b      	lsrs	r3, r3, #4
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	4619      	mov	r1, r3
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	4613      	mov	r3, r2
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	4413      	add	r3, r2
 80133cc:	3303      	adds	r3, #3
 80133ce:	683a      	ldr	r2, [r7, #0]
 80133d0:	4413      	add	r3, r2
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	011b      	lsls	r3, r3, #4
 80133d6:	430b      	orrs	r3, r1
 80133d8:	4619      	mov	r1, r3
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	1c9a      	adds	r2, r3, #2
 80133e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 80133ea:	68fa      	ldr	r2, [r7, #12]
 80133ec:	4613      	mov	r3, r2
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	4413      	add	r3, r2
 80133f2:	3303      	adds	r3, #3
 80133f4:	683a      	ldr	r2, [r7, #0]
 80133f6:	4413      	add	r3, r2
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	099b      	lsrs	r3, r3, #6
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	4619      	mov	r1, r3
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	4613      	mov	r3, r2
 8013404:	009b      	lsls	r3, r3, #2
 8013406:	4413      	add	r3, r2
 8013408:	3304      	adds	r3, #4
 801340a:	683a      	ldr	r2, [r7, #0]
 801340c:	4413      	add	r3, r2
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	430b      	orrs	r3, r1
 8013414:	4619      	mov	r1, r3
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	1cda      	adds	r2, r3, #3
 801341c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	3301      	adds	r3, #1
 801342a:	60fb      	str	r3, [r7, #12]
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2b3f      	cmp	r3, #63	; 0x3f
 8013430:	d985      	bls.n	801333e <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013432:	bf00      	nop
 8013434:	bf00      	nop
 8013436:	3714      	adds	r7, #20
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr

08013440 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8013440:	b480      	push	{r7}
 8013442:	b08d      	sub	sp, #52	; 0x34
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 801344a:	2300      	movs	r3, #0
 801344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801344e:	e1ad      	b.n	80137ac <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x36c>
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8013450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013452:	00da      	lsls	r2, r3, #3
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801345a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801345e:	60fb      	str	r3, [r7, #12]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8013460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013462:	00db      	lsls	r3, r3, #3
 8013464:	1c5a      	adds	r2, r3, #1
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801346c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013470:	613b      	str	r3, [r7, #16]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8013472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013474:	00db      	lsls	r3, r3, #3
 8013476:	1c9a      	adds	r2, r3, #2
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801347e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013482:	617b      	str	r3, [r7, #20]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8013484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013486:	00db      	lsls	r3, r3, #3
 8013488:	1cda      	adds	r2, r3, #3
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013490:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013494:	61bb      	str	r3, [r7, #24]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8013496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013498:	00db      	lsls	r3, r3, #3
 801349a:	1d1a      	adds	r2, r3, #4
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134a2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80134a6:	61fb      	str	r3, [r7, #28]
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 80134a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134aa:	00db      	lsls	r3, r3, #3
 80134ac:	1d5a      	adds	r2, r3, #5
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134b4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80134b8:	623b      	str	r3, [r7, #32]
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 80134ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134bc:	00db      	lsls	r3, r3, #3
 80134be:	1d9a      	adds	r2, r3, #6
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134c6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80134ca:	627b      	str	r3, [r7, #36]	; 0x24
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 80134cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	1dda      	adds	r2, r3, #7
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134d8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80134dc:	62bb      	str	r3, [r7, #40]	; 0x28

    r[13*i+ 0]  =  t[0];
 80134de:	68f9      	ldr	r1, [r7, #12]
 80134e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134e2:	4613      	mov	r3, r2
 80134e4:	005b      	lsls	r3, r3, #1
 80134e6:	4413      	add	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	4413      	add	r3, r2
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	4413      	add	r3, r2
 80134f0:	b2ca      	uxtb	r2, r1
 80134f2:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1]  =  t[0] >>  8;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	0a19      	lsrs	r1, r3, #8
 80134f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134fa:	4613      	mov	r3, r2
 80134fc:	005b      	lsls	r3, r3, #1
 80134fe:	4413      	add	r3, r2
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	4413      	add	r3, r2
 8013504:	3301      	adds	r3, #1
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	4413      	add	r3, r2
 801350a:	b2ca      	uxtb	r2, r1
 801350c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 801350e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013510:	4613      	mov	r3, r2
 8013512:	005b      	lsls	r3, r3, #1
 8013514:	4413      	add	r3, r2
 8013516:	009b      	lsls	r3, r3, #2
 8013518:	4413      	add	r3, r2
 801351a:	3301      	adds	r3, #1
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	4413      	add	r3, r2
 8013520:	7818      	ldrb	r0, [r3, #0]
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	b2db      	uxtb	r3, r3
 8013526:	015b      	lsls	r3, r3, #5
 8013528:	b2d9      	uxtb	r1, r3
 801352a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801352c:	4613      	mov	r3, r2
 801352e:	005b      	lsls	r3, r3, #1
 8013530:	4413      	add	r3, r2
 8013532:	009b      	lsls	r3, r3, #2
 8013534:	4413      	add	r3, r2
 8013536:	3301      	adds	r3, #1
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	4413      	add	r3, r2
 801353c:	ea40 0201 	orr.w	r2, r0, r1
 8013540:	b2d2      	uxtb	r2, r2
 8013542:	701a      	strb	r2, [r3, #0]
    r[13*i+ 2]  =  t[1] >>  3;
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	08d9      	lsrs	r1, r3, #3
 8013548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801354a:	4613      	mov	r3, r2
 801354c:	005b      	lsls	r3, r3, #1
 801354e:	4413      	add	r3, r2
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	4413      	add	r3, r2
 8013554:	3302      	adds	r3, #2
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	4413      	add	r3, r2
 801355a:	b2ca      	uxtb	r2, r1
 801355c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3]  =  t[1] >> 11;
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	0ad9      	lsrs	r1, r3, #11
 8013562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013564:	4613      	mov	r3, r2
 8013566:	005b      	lsls	r3, r3, #1
 8013568:	4413      	add	r3, r2
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	4413      	add	r3, r2
 801356e:	3303      	adds	r3, #3
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	4413      	add	r3, r2
 8013574:	b2ca      	uxtb	r2, r1
 8013576:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3] |=  t[2] <<  2;
 8013578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801357a:	4613      	mov	r3, r2
 801357c:	005b      	lsls	r3, r3, #1
 801357e:	4413      	add	r3, r2
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	4413      	add	r3, r2
 8013584:	3303      	adds	r3, #3
 8013586:	687a      	ldr	r2, [r7, #4]
 8013588:	4413      	add	r3, r2
 801358a:	7818      	ldrb	r0, [r3, #0]
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	b2db      	uxtb	r3, r3
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	b2d9      	uxtb	r1, r3
 8013594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013596:	4613      	mov	r3, r2
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	4413      	add	r3, r2
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	4413      	add	r3, r2
 80135a0:	3303      	adds	r3, #3
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	4413      	add	r3, r2
 80135a6:	ea40 0201 	orr.w	r2, r0, r1
 80135aa:	b2d2      	uxtb	r2, r2
 80135ac:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4]  =  t[2] >>  6;
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	0999      	lsrs	r1, r3, #6
 80135b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135b4:	4613      	mov	r3, r2
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	4413      	add	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4413      	add	r3, r2
 80135be:	3304      	adds	r3, #4
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	4413      	add	r3, r2
 80135c4:	b2ca      	uxtb	r2, r1
 80135c6:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4] |=  t[3] <<  7;
 80135c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ca:	4613      	mov	r3, r2
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	4413      	add	r3, r2
 80135d0:	009b      	lsls	r3, r3, #2
 80135d2:	4413      	add	r3, r2
 80135d4:	3304      	adds	r3, #4
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	4413      	add	r3, r2
 80135da:	7818      	ldrb	r0, [r3, #0]
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	b2db      	uxtb	r3, r3
 80135e0:	01db      	lsls	r3, r3, #7
 80135e2:	b2d9      	uxtb	r1, r3
 80135e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135e6:	4613      	mov	r3, r2
 80135e8:	005b      	lsls	r3, r3, #1
 80135ea:	4413      	add	r3, r2
 80135ec:	009b      	lsls	r3, r3, #2
 80135ee:	4413      	add	r3, r2
 80135f0:	3304      	adds	r3, #4
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	4413      	add	r3, r2
 80135f6:	ea40 0201 	orr.w	r2, r0, r1
 80135fa:	b2d2      	uxtb	r2, r2
 80135fc:	701a      	strb	r2, [r3, #0]
    r[13*i+ 5]  =  t[3] >>  1;
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	0859      	lsrs	r1, r3, #1
 8013602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013604:	4613      	mov	r3, r2
 8013606:	005b      	lsls	r3, r3, #1
 8013608:	4413      	add	r3, r2
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	4413      	add	r3, r2
 801360e:	3305      	adds	r3, #5
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	4413      	add	r3, r2
 8013614:	b2ca      	uxtb	r2, r1
 8013616:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6]  =  t[3] >>  9;
 8013618:	69bb      	ldr	r3, [r7, #24]
 801361a:	0a59      	lsrs	r1, r3, #9
 801361c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801361e:	4613      	mov	r3, r2
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	4413      	add	r3, r2
 8013624:	009b      	lsls	r3, r3, #2
 8013626:	4413      	add	r3, r2
 8013628:	3306      	adds	r3, #6
 801362a:	687a      	ldr	r2, [r7, #4]
 801362c:	4413      	add	r3, r2
 801362e:	b2ca      	uxtb	r2, r1
 8013630:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6] |=  t[4] <<  4;
 8013632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013634:	4613      	mov	r3, r2
 8013636:	005b      	lsls	r3, r3, #1
 8013638:	4413      	add	r3, r2
 801363a:	009b      	lsls	r3, r3, #2
 801363c:	4413      	add	r3, r2
 801363e:	3306      	adds	r3, #6
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	4413      	add	r3, r2
 8013644:	7818      	ldrb	r0, [r3, #0]
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	b2db      	uxtb	r3, r3
 801364a:	011b      	lsls	r3, r3, #4
 801364c:	b2d9      	uxtb	r1, r3
 801364e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013650:	4613      	mov	r3, r2
 8013652:	005b      	lsls	r3, r3, #1
 8013654:	4413      	add	r3, r2
 8013656:	009b      	lsls	r3, r3, #2
 8013658:	4413      	add	r3, r2
 801365a:	3306      	adds	r3, #6
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	4413      	add	r3, r2
 8013660:	ea40 0201 	orr.w	r2, r0, r1
 8013664:	b2d2      	uxtb	r2, r2
 8013666:	701a      	strb	r2, [r3, #0]
    r[13*i+ 7]  =  t[4] >>  4;
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	0919      	lsrs	r1, r3, #4
 801366c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801366e:	4613      	mov	r3, r2
 8013670:	005b      	lsls	r3, r3, #1
 8013672:	4413      	add	r3, r2
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	4413      	add	r3, r2
 8013678:	3307      	adds	r3, #7
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	4413      	add	r3, r2
 801367e:	b2ca      	uxtb	r2, r1
 8013680:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8]  =  t[4] >> 12;
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	0b19      	lsrs	r1, r3, #12
 8013686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013688:	4613      	mov	r3, r2
 801368a:	005b      	lsls	r3, r3, #1
 801368c:	4413      	add	r3, r2
 801368e:	009b      	lsls	r3, r3, #2
 8013690:	4413      	add	r3, r2
 8013692:	3308      	adds	r3, #8
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	4413      	add	r3, r2
 8013698:	b2ca      	uxtb	r2, r1
 801369a:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8] |=  t[5] <<  1;
 801369c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801369e:	4613      	mov	r3, r2
 80136a0:	005b      	lsls	r3, r3, #1
 80136a2:	4413      	add	r3, r2
 80136a4:	009b      	lsls	r3, r3, #2
 80136a6:	4413      	add	r3, r2
 80136a8:	3308      	adds	r3, #8
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	4413      	add	r3, r2
 80136ae:	7818      	ldrb	r0, [r3, #0]
 80136b0:	6a3b      	ldr	r3, [r7, #32]
 80136b2:	b2db      	uxtb	r3, r3
 80136b4:	005b      	lsls	r3, r3, #1
 80136b6:	b2d9      	uxtb	r1, r3
 80136b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ba:	4613      	mov	r3, r2
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	4413      	add	r3, r2
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	4413      	add	r3, r2
 80136c4:	3308      	adds	r3, #8
 80136c6:	687a      	ldr	r2, [r7, #4]
 80136c8:	4413      	add	r3, r2
 80136ca:	ea40 0201 	orr.w	r2, r0, r1
 80136ce:	b2d2      	uxtb	r2, r2
 80136d0:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9]  =  t[5] >>  7;
 80136d2:	6a3b      	ldr	r3, [r7, #32]
 80136d4:	09d9      	lsrs	r1, r3, #7
 80136d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136d8:	4613      	mov	r3, r2
 80136da:	005b      	lsls	r3, r3, #1
 80136dc:	4413      	add	r3, r2
 80136de:	009b      	lsls	r3, r3, #2
 80136e0:	4413      	add	r3, r2
 80136e2:	3309      	adds	r3, #9
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	4413      	add	r3, r2
 80136e8:	b2ca      	uxtb	r2, r1
 80136ea:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9] |=  t[6] <<  6;
 80136ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ee:	4613      	mov	r3, r2
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	4413      	add	r3, r2
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4413      	add	r3, r2
 80136f8:	3309      	adds	r3, #9
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	4413      	add	r3, r2
 80136fe:	7818      	ldrb	r0, [r3, #0]
 8013700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013702:	b2db      	uxtb	r3, r3
 8013704:	019b      	lsls	r3, r3, #6
 8013706:	b2d9      	uxtb	r1, r3
 8013708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801370a:	4613      	mov	r3, r2
 801370c:	005b      	lsls	r3, r3, #1
 801370e:	4413      	add	r3, r2
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	4413      	add	r3, r2
 8013714:	3309      	adds	r3, #9
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	4413      	add	r3, r2
 801371a:	ea40 0201 	orr.w	r2, r0, r1
 801371e:	b2d2      	uxtb	r2, r2
 8013720:	701a      	strb	r2, [r3, #0]
    r[13*i+10]  =  t[6] >>  2;
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	0899      	lsrs	r1, r3, #2
 8013726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013728:	4613      	mov	r3, r2
 801372a:	005b      	lsls	r3, r3, #1
 801372c:	4413      	add	r3, r2
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	4413      	add	r3, r2
 8013732:	330a      	adds	r3, #10
 8013734:	687a      	ldr	r2, [r7, #4]
 8013736:	4413      	add	r3, r2
 8013738:	b2ca      	uxtb	r2, r1
 801373a:	701a      	strb	r2, [r3, #0]
    r[13*i+11]  =  t[6] >> 10;
 801373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373e:	0a99      	lsrs	r1, r3, #10
 8013740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013742:	4613      	mov	r3, r2
 8013744:	005b      	lsls	r3, r3, #1
 8013746:	4413      	add	r3, r2
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	4413      	add	r3, r2
 801374c:	330b      	adds	r3, #11
 801374e:	687a      	ldr	r2, [r7, #4]
 8013750:	4413      	add	r3, r2
 8013752:	b2ca      	uxtb	r2, r1
 8013754:	701a      	strb	r2, [r3, #0]
    r[13*i+11] |=  t[7] <<  3;
 8013756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013758:	4613      	mov	r3, r2
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	4413      	add	r3, r2
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	4413      	add	r3, r2
 8013762:	330b      	adds	r3, #11
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	4413      	add	r3, r2
 8013768:	7818      	ldrb	r0, [r3, #0]
 801376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376c:	b2db      	uxtb	r3, r3
 801376e:	00db      	lsls	r3, r3, #3
 8013770:	b2d9      	uxtb	r1, r3
 8013772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013774:	4613      	mov	r3, r2
 8013776:	005b      	lsls	r3, r3, #1
 8013778:	4413      	add	r3, r2
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	4413      	add	r3, r2
 801377e:	330b      	adds	r3, #11
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	4413      	add	r3, r2
 8013784:	ea40 0201 	orr.w	r2, r0, r1
 8013788:	b2d2      	uxtb	r2, r2
 801378a:	701a      	strb	r2, [r3, #0]
    r[13*i+12]  =  t[7] >>  5;
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	0959      	lsrs	r1, r3, #5
 8013790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013792:	4613      	mov	r3, r2
 8013794:	005b      	lsls	r3, r3, #1
 8013796:	4413      	add	r3, r2
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	4413      	add	r3, r2
 801379c:	330c      	adds	r3, #12
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	4413      	add	r3, r2
 80137a2:	b2ca      	uxtb	r2, r1
 80137a4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/8; ++i) {
 80137a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a8:	3301      	adds	r3, #1
 80137aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ae:	2b1f      	cmp	r3, #31
 80137b0:	f67f ae4e 	bls.w	8013450 <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 80137b4:	bf00      	nop
 80137b6:	bf00      	nop
 80137b8:	3734      	adds	r7, #52	; 0x34
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr

080137c2 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 80137c2:	b480      	push	{r7}
 80137c4:	b085      	sub	sp, #20
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
 80137ca:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 80137cc:	2300      	movs	r3, #0
 80137ce:	60fb      	str	r3, [r7, #12]
 80137d0:	e294      	b.n	8013cfc <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x53a>
    r->coeffs[8*i+0]  = a[13*i+0];
 80137d2:	68fa      	ldr	r2, [r7, #12]
 80137d4:	4613      	mov	r3, r2
 80137d6:	005b      	lsls	r3, r3, #1
 80137d8:	4413      	add	r3, r2
 80137da:	009b      	lsls	r3, r3, #2
 80137dc:	4413      	add	r3, r2
 80137de:	683a      	ldr	r2, [r7, #0]
 80137e0:	4413      	add	r3, r2
 80137e2:	7819      	ldrb	r1, [r3, #0]
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	00da      	lsls	r2, r3, #3
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	00da      	lsls	r2, r3, #3
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137f8:	4619      	mov	r1, r3
 80137fa:	68fa      	ldr	r2, [r7, #12]
 80137fc:	4613      	mov	r3, r2
 80137fe:	005b      	lsls	r3, r3, #1
 8013800:	4413      	add	r3, r2
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	4413      	add	r3, r2
 8013806:	3301      	adds	r3, #1
 8013808:	683a      	ldr	r2, [r7, #0]
 801380a:	4413      	add	r3, r2
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	021b      	lsls	r3, r3, #8
 8013810:	4319      	orrs	r1, r3
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	00da      	lsls	r2, r3, #3
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] &= 0x1FFF;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	00da      	lsls	r2, r3, #3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013826:	68fa      	ldr	r2, [r7, #12]
 8013828:	00d2      	lsls	r2, r2, #3
 801382a:	f3c3 010c 	ubfx	r1, r3, #0, #13
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	4613      	mov	r3, r2
 8013838:	005b      	lsls	r3, r3, #1
 801383a:	4413      	add	r3, r2
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	4413      	add	r3, r2
 8013840:	3301      	adds	r3, #1
 8013842:	683a      	ldr	r2, [r7, #0]
 8013844:	4413      	add	r3, r2
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	095b      	lsrs	r3, r3, #5
 801384a:	b2d9      	uxtb	r1, r3
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	00db      	lsls	r3, r3, #3
 8013850:	1c5a      	adds	r2, r3, #1
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	00db      	lsls	r3, r3, #3
 801385c:	1c5a      	adds	r2, r3, #1
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013864:	4619      	mov	r1, r3
 8013866:	68fa      	ldr	r2, [r7, #12]
 8013868:	4613      	mov	r3, r2
 801386a:	005b      	lsls	r3, r3, #1
 801386c:	4413      	add	r3, r2
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	4413      	add	r3, r2
 8013872:	3302      	adds	r3, #2
 8013874:	683a      	ldr	r2, [r7, #0]
 8013876:	4413      	add	r3, r2
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	00db      	lsls	r3, r3, #3
 801387c:	4319      	orrs	r1, r3
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	00db      	lsls	r3, r3, #3
 8013882:	1c5a      	adds	r2, r3, #1
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	00db      	lsls	r3, r3, #3
 801388e:	1c5a      	adds	r2, r3, #1
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013896:	4619      	mov	r1, r3
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	4613      	mov	r3, r2
 801389c:	005b      	lsls	r3, r3, #1
 801389e:	4413      	add	r3, r2
 80138a0:	009b      	lsls	r3, r3, #2
 80138a2:	4413      	add	r3, r2
 80138a4:	3303      	adds	r3, #3
 80138a6:	683a      	ldr	r2, [r7, #0]
 80138a8:	4413      	add	r3, r2
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	02db      	lsls	r3, r3, #11
 80138ae:	4319      	orrs	r1, r3
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	00db      	lsls	r3, r3, #3
 80138b4:	1c5a      	adds	r2, r3, #1
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] &= 0x1FFF;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	1c5a      	adds	r2, r3, #1
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	00d2      	lsls	r2, r2, #3
 80138cc:	3201      	adds	r2, #1
 80138ce:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 80138d8:	68fa      	ldr	r2, [r7, #12]
 80138da:	4613      	mov	r3, r2
 80138dc:	005b      	lsls	r3, r3, #1
 80138de:	4413      	add	r3, r2
 80138e0:	009b      	lsls	r3, r3, #2
 80138e2:	4413      	add	r3, r2
 80138e4:	3303      	adds	r3, #3
 80138e6:	683a      	ldr	r2, [r7, #0]
 80138e8:	4413      	add	r3, r2
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	089b      	lsrs	r3, r3, #2
 80138ee:	b2d9      	uxtb	r1, r3
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	00db      	lsls	r3, r3, #3
 80138f4:	1c9a      	adds	r2, r3, #2
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	00db      	lsls	r3, r3, #3
 8013900:	1c9a      	adds	r2, r3, #2
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013908:	4619      	mov	r1, r3
 801390a:	68fa      	ldr	r2, [r7, #12]
 801390c:	4613      	mov	r3, r2
 801390e:	005b      	lsls	r3, r3, #1
 8013910:	4413      	add	r3, r2
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4413      	add	r3, r2
 8013916:	3304      	adds	r3, #4
 8013918:	683a      	ldr	r2, [r7, #0]
 801391a:	4413      	add	r3, r2
 801391c:	781b      	ldrb	r3, [r3, #0]
 801391e:	019b      	lsls	r3, r3, #6
 8013920:	4319      	orrs	r1, r3
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	00db      	lsls	r3, r3, #3
 8013926:	1c9a      	adds	r2, r3, #2
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] &= 0x1FFF;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	00db      	lsls	r3, r3, #3
 8013932:	1c9a      	adds	r2, r3, #2
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801393a:	68fa      	ldr	r2, [r7, #12]
 801393c:	00d2      	lsls	r2, r2, #3
 801393e:	3202      	adds	r2, #2
 8013940:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 801394a:	68fa      	ldr	r2, [r7, #12]
 801394c:	4613      	mov	r3, r2
 801394e:	005b      	lsls	r3, r3, #1
 8013950:	4413      	add	r3, r2
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	4413      	add	r3, r2
 8013956:	3304      	adds	r3, #4
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	4413      	add	r3, r2
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	09db      	lsrs	r3, r3, #7
 8013960:	b2d9      	uxtb	r1, r3
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	00db      	lsls	r3, r3, #3
 8013966:	1cda      	adds	r2, r3, #3
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	00db      	lsls	r3, r3, #3
 8013972:	1cda      	adds	r2, r3, #3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801397a:	4619      	mov	r1, r3
 801397c:	68fa      	ldr	r2, [r7, #12]
 801397e:	4613      	mov	r3, r2
 8013980:	005b      	lsls	r3, r3, #1
 8013982:	4413      	add	r3, r2
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	4413      	add	r3, r2
 8013988:	3305      	adds	r3, #5
 801398a:	683a      	ldr	r2, [r7, #0]
 801398c:	4413      	add	r3, r2
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	005b      	lsls	r3, r3, #1
 8013992:	4319      	orrs	r1, r3
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	00db      	lsls	r3, r3, #3
 8013998:	1cda      	adds	r2, r3, #3
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	00db      	lsls	r3, r3, #3
 80139a4:	1cda      	adds	r2, r3, #3
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ac:	4619      	mov	r1, r3
 80139ae:	68fa      	ldr	r2, [r7, #12]
 80139b0:	4613      	mov	r3, r2
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	4413      	add	r3, r2
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	4413      	add	r3, r2
 80139ba:	3306      	adds	r3, #6
 80139bc:	683a      	ldr	r2, [r7, #0]
 80139be:	4413      	add	r3, r2
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	025b      	lsls	r3, r3, #9
 80139c4:	4319      	orrs	r1, r3
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	00db      	lsls	r3, r3, #3
 80139ca:	1cda      	adds	r2, r3, #3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] &= 0x1FFF;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	00db      	lsls	r3, r3, #3
 80139d6:	1cda      	adds	r2, r3, #3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	00d2      	lsls	r2, r2, #3
 80139e2:	3203      	adds	r2, #3
 80139e4:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 80139ee:	68fa      	ldr	r2, [r7, #12]
 80139f0:	4613      	mov	r3, r2
 80139f2:	005b      	lsls	r3, r3, #1
 80139f4:	4413      	add	r3, r2
 80139f6:	009b      	lsls	r3, r3, #2
 80139f8:	4413      	add	r3, r2
 80139fa:	3306      	adds	r3, #6
 80139fc:	683a      	ldr	r2, [r7, #0]
 80139fe:	4413      	add	r3, r2
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	091b      	lsrs	r3, r3, #4
 8013a04:	b2d9      	uxtb	r1, r3
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	00db      	lsls	r3, r3, #3
 8013a0a:	1d1a      	adds	r2, r3, #4
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	00db      	lsls	r3, r3, #3
 8013a16:	1d1a      	adds	r2, r3, #4
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a1e:	4619      	mov	r1, r3
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	4613      	mov	r3, r2
 8013a24:	005b      	lsls	r3, r3, #1
 8013a26:	4413      	add	r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	4413      	add	r3, r2
 8013a2c:	3307      	adds	r3, #7
 8013a2e:	683a      	ldr	r2, [r7, #0]
 8013a30:	4413      	add	r3, r2
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	011b      	lsls	r3, r3, #4
 8013a36:	4319      	orrs	r1, r3
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	00db      	lsls	r3, r3, #3
 8013a3c:	1d1a      	adds	r2, r3, #4
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	00db      	lsls	r3, r3, #3
 8013a48:	1d1a      	adds	r2, r3, #4
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a50:	4619      	mov	r1, r3
 8013a52:	68fa      	ldr	r2, [r7, #12]
 8013a54:	4613      	mov	r3, r2
 8013a56:	005b      	lsls	r3, r3, #1
 8013a58:	4413      	add	r3, r2
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	4413      	add	r3, r2
 8013a5e:	3308      	adds	r3, #8
 8013a60:	683a      	ldr	r2, [r7, #0]
 8013a62:	4413      	add	r3, r2
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	031b      	lsls	r3, r3, #12
 8013a68:	4319      	orrs	r1, r3
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	00db      	lsls	r3, r3, #3
 8013a6e:	1d1a      	adds	r2, r3, #4
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] &= 0x1FFF;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	00db      	lsls	r3, r3, #3
 8013a7a:	1d1a      	adds	r2, r3, #4
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a82:	68fa      	ldr	r2, [r7, #12]
 8013a84:	00d2      	lsls	r2, r2, #3
 8013a86:	3204      	adds	r2, #4
 8013a88:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	4613      	mov	r3, r2
 8013a96:	005b      	lsls	r3, r3, #1
 8013a98:	4413      	add	r3, r2
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	4413      	add	r3, r2
 8013a9e:	3308      	adds	r3, #8
 8013aa0:	683a      	ldr	r2, [r7, #0]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	085b      	lsrs	r3, r3, #1
 8013aa8:	b2d9      	uxtb	r1, r3
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	00db      	lsls	r3, r3, #3
 8013aae:	1d5a      	adds	r2, r3, #5
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	1d5a      	adds	r2, r3, #5
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac2:	4619      	mov	r1, r3
 8013ac4:	68fa      	ldr	r2, [r7, #12]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	005b      	lsls	r3, r3, #1
 8013aca:	4413      	add	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	4413      	add	r3, r2
 8013ad0:	3309      	adds	r3, #9
 8013ad2:	683a      	ldr	r2, [r7, #0]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	01db      	lsls	r3, r3, #7
 8013ada:	4319      	orrs	r1, r3
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	00db      	lsls	r3, r3, #3
 8013ae0:	1d5a      	adds	r2, r3, #5
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] &= 0x1FFF;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	00db      	lsls	r3, r3, #3
 8013aec:	1d5a      	adds	r2, r3, #5
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013af4:	68fa      	ldr	r2, [r7, #12]
 8013af6:	00d2      	lsls	r2, r2, #3
 8013af8:	3205      	adds	r2, #5
 8013afa:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8013b04:	68fa      	ldr	r2, [r7, #12]
 8013b06:	4613      	mov	r3, r2
 8013b08:	005b      	lsls	r3, r3, #1
 8013b0a:	4413      	add	r3, r2
 8013b0c:	009b      	lsls	r3, r3, #2
 8013b0e:	4413      	add	r3, r2
 8013b10:	3309      	adds	r3, #9
 8013b12:	683a      	ldr	r2, [r7, #0]
 8013b14:	4413      	add	r3, r2
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	099b      	lsrs	r3, r3, #6
 8013b1a:	b2d9      	uxtb	r1, r3
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	00db      	lsls	r3, r3, #3
 8013b20:	1d9a      	adds	r2, r3, #6
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	00db      	lsls	r3, r3, #3
 8013b2c:	1d9a      	adds	r2, r3, #6
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b34:	4619      	mov	r1, r3
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	4413      	add	r3, r2
 8013b3e:	009b      	lsls	r3, r3, #2
 8013b40:	4413      	add	r3, r2
 8013b42:	330a      	adds	r3, #10
 8013b44:	683a      	ldr	r2, [r7, #0]
 8013b46:	4413      	add	r3, r2
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4319      	orrs	r1, r3
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	1d9a      	adds	r2, r3, #6
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	00db      	lsls	r3, r3, #3
 8013b5e:	1d9a      	adds	r2, r3, #6
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b66:	4619      	mov	r1, r3
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	005b      	lsls	r3, r3, #1
 8013b6e:	4413      	add	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4413      	add	r3, r2
 8013b74:	330b      	adds	r3, #11
 8013b76:	683a      	ldr	r2, [r7, #0]
 8013b78:	4413      	add	r3, r2
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	029b      	lsls	r3, r3, #10
 8013b7e:	4319      	orrs	r1, r3
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	00db      	lsls	r3, r3, #3
 8013b84:	1d9a      	adds	r2, r3, #6
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] &= 0x1FFF;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	00db      	lsls	r3, r3, #3
 8013b90:	1d9a      	adds	r2, r3, #6
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	00d2      	lsls	r2, r2, #3
 8013b9c:	3206      	adds	r2, #6
 8013b9e:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	4613      	mov	r3, r2
 8013bac:	005b      	lsls	r3, r3, #1
 8013bae:	4413      	add	r3, r2
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	4413      	add	r3, r2
 8013bb4:	330b      	adds	r3, #11
 8013bb6:	683a      	ldr	r2, [r7, #0]
 8013bb8:	4413      	add	r3, r2
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	08db      	lsrs	r3, r3, #3
 8013bbe:	b2d9      	uxtb	r1, r3
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	00db      	lsls	r3, r3, #3
 8013bc4:	1dda      	adds	r2, r3, #7
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	00db      	lsls	r3, r3, #3
 8013bd0:	1dda      	adds	r2, r3, #7
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bd8:	4619      	mov	r1, r3
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	4613      	mov	r3, r2
 8013bde:	005b      	lsls	r3, r3, #1
 8013be0:	4413      	add	r3, r2
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	4413      	add	r3, r2
 8013be6:	330c      	adds	r3, #12
 8013be8:	683a      	ldr	r2, [r7, #0]
 8013bea:	4413      	add	r3, r2
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	015b      	lsls	r3, r3, #5
 8013bf0:	4319      	orrs	r1, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	00db      	lsls	r3, r3, #3
 8013bf6:	1dda      	adds	r2, r3, #7
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] &= 0x1FFF;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	00db      	lsls	r3, r3, #3
 8013c02:	1dda      	adds	r2, r3, #7
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0a:	68fa      	ldr	r2, [r7, #12]
 8013c0c:	00d2      	lsls	r2, r2, #3
 8013c0e:	3207      	adds	r2, #7
 8013c10:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	00da      	lsls	r2, r3, #3
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	00d2      	lsls	r2, r2, #3
 8013c28:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	00db      	lsls	r3, r3, #3
 8013c36:	1c5a      	adds	r2, r3, #1
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	00d2      	lsls	r2, r2, #3
 8013c42:	3201      	adds	r2, #1
 8013c44:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	1c9a      	adds	r2, r3, #2
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	00d2      	lsls	r2, r2, #3
 8013c5e:	3202      	adds	r2, #2
 8013c60:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	00db      	lsls	r3, r3, #3
 8013c6e:	1cda      	adds	r2, r3, #3
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	00d2      	lsls	r2, r2, #3
 8013c7a:	3203      	adds	r2, #3
 8013c7c:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	00db      	lsls	r3, r3, #3
 8013c8a:	1d1a      	adds	r2, r3, #4
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	00d2      	lsls	r2, r2, #3
 8013c96:	3204      	adds	r2, #4
 8013c98:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	00db      	lsls	r3, r3, #3
 8013ca6:	1d5a      	adds	r2, r3, #5
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cae:	68fa      	ldr	r2, [r7, #12]
 8013cb0:	00d2      	lsls	r2, r2, #3
 8013cb2:	3205      	adds	r2, #5
 8013cb4:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	00db      	lsls	r3, r3, #3
 8013cc2:	1d9a      	adds	r2, r3, #6
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	00d2      	lsls	r2, r2, #3
 8013cce:	3206      	adds	r2, #6
 8013cd0:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	00db      	lsls	r3, r3, #3
 8013cde:	1dda      	adds	r2, r3, #7
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ce6:	68fa      	ldr	r2, [r7, #12]
 8013ce8:	00d2      	lsls	r2, r2, #3
 8013cea:	3207      	adds	r2, #7
 8013cec:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/8; ++i) {
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	60fb      	str	r3, [r7, #12]
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2b1f      	cmp	r3, #31
 8013d00:	f67f ad67 	bls.w	80137d2 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013d04:	bf00      	nop
 8013d06:	bf00      	nop
 8013d08:	3714      	adds	r7, #20
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d10:	4770      	bx	lr

08013d12 <pqcrystals_dilithium2aes_r_ref_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 8013d12:	b480      	push	{r7}
 8013d14:	b089      	sub	sp, #36	; 0x24
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
 8013d1a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	61fb      	str	r3, [r7, #28]
 8013d20:	e0cb      	b.n	8013eba <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x1a8>
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	009a      	lsls	r2, r3, #2
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d2c:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013d30:	60fb      	str	r3, [r7, #12]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	009b      	lsls	r3, r3, #2
 8013d36:	1c5a      	adds	r2, r3, #1
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d3e:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013d42:	613b      	str	r3, [r7, #16]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8013d44:	69fb      	ldr	r3, [r7, #28]
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	1c9a      	adds	r2, r3, #2
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d50:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013d54:	617b      	str	r3, [r7, #20]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8013d56:	69fb      	ldr	r3, [r7, #28]
 8013d58:	009b      	lsls	r3, r3, #2
 8013d5a:	1cda      	adds	r2, r3, #3
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d62:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013d66:	61bb      	str	r3, [r7, #24]

    r[9*i+0]  = t[0];
 8013d68:	68f9      	ldr	r1, [r7, #12]
 8013d6a:	69fa      	ldr	r2, [r7, #28]
 8013d6c:	4613      	mov	r3, r2
 8013d6e:	00db      	lsls	r3, r3, #3
 8013d70:	4413      	add	r3, r2
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	4413      	add	r3, r2
 8013d76:	b2ca      	uxtb	r2, r1
 8013d78:	701a      	strb	r2, [r3, #0]
    r[9*i+1]  = t[0] >> 8;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	0a19      	lsrs	r1, r3, #8
 8013d7e:	69fa      	ldr	r2, [r7, #28]
 8013d80:	4613      	mov	r3, r2
 8013d82:	00db      	lsls	r3, r3, #3
 8013d84:	4413      	add	r3, r2
 8013d86:	3301      	adds	r3, #1
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	b2ca      	uxtb	r2, r1
 8013d8e:	701a      	strb	r2, [r3, #0]
    r[9*i+2]  = t[0] >> 16;
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	0c19      	lsrs	r1, r3, #16
 8013d94:	69fa      	ldr	r2, [r7, #28]
 8013d96:	4613      	mov	r3, r2
 8013d98:	00db      	lsls	r3, r3, #3
 8013d9a:	4413      	add	r3, r2
 8013d9c:	3302      	adds	r3, #2
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	4413      	add	r3, r2
 8013da2:	b2ca      	uxtb	r2, r1
 8013da4:	701a      	strb	r2, [r3, #0]
    r[9*i+2] |= t[1] << 2;
 8013da6:	69fa      	ldr	r2, [r7, #28]
 8013da8:	4613      	mov	r3, r2
 8013daa:	00db      	lsls	r3, r3, #3
 8013dac:	4413      	add	r3, r2
 8013dae:	3302      	adds	r3, #2
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	4413      	add	r3, r2
 8013db4:	7818      	ldrb	r0, [r3, #0]
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	b2db      	uxtb	r3, r3
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	b2d9      	uxtb	r1, r3
 8013dbe:	69fa      	ldr	r2, [r7, #28]
 8013dc0:	4613      	mov	r3, r2
 8013dc2:	00db      	lsls	r3, r3, #3
 8013dc4:	4413      	add	r3, r2
 8013dc6:	3302      	adds	r3, #2
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	4413      	add	r3, r2
 8013dcc:	ea40 0201 	orr.w	r2, r0, r1
 8013dd0:	b2d2      	uxtb	r2, r2
 8013dd2:	701a      	strb	r2, [r3, #0]
    r[9*i+3]  = t[1] >> 6;
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	0999      	lsrs	r1, r3, #6
 8013dd8:	69fa      	ldr	r2, [r7, #28]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	00db      	lsls	r3, r3, #3
 8013dde:	4413      	add	r3, r2
 8013de0:	3303      	adds	r3, #3
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	4413      	add	r3, r2
 8013de6:	b2ca      	uxtb	r2, r1
 8013de8:	701a      	strb	r2, [r3, #0]
    r[9*i+4]  = t[1] >> 14;
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	0b99      	lsrs	r1, r3, #14
 8013dee:	69fa      	ldr	r2, [r7, #28]
 8013df0:	4613      	mov	r3, r2
 8013df2:	00db      	lsls	r3, r3, #3
 8013df4:	4413      	add	r3, r2
 8013df6:	3304      	adds	r3, #4
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	b2ca      	uxtb	r2, r1
 8013dfe:	701a      	strb	r2, [r3, #0]
    r[9*i+4] |= t[2] << 4;
 8013e00:	69fa      	ldr	r2, [r7, #28]
 8013e02:	4613      	mov	r3, r2
 8013e04:	00db      	lsls	r3, r3, #3
 8013e06:	4413      	add	r3, r2
 8013e08:	3304      	adds	r3, #4
 8013e0a:	687a      	ldr	r2, [r7, #4]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	7818      	ldrb	r0, [r3, #0]
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	011b      	lsls	r3, r3, #4
 8013e16:	b2d9      	uxtb	r1, r3
 8013e18:	69fa      	ldr	r2, [r7, #28]
 8013e1a:	4613      	mov	r3, r2
 8013e1c:	00db      	lsls	r3, r3, #3
 8013e1e:	4413      	add	r3, r2
 8013e20:	3304      	adds	r3, #4
 8013e22:	687a      	ldr	r2, [r7, #4]
 8013e24:	4413      	add	r3, r2
 8013e26:	ea40 0201 	orr.w	r2, r0, r1
 8013e2a:	b2d2      	uxtb	r2, r2
 8013e2c:	701a      	strb	r2, [r3, #0]
    r[9*i+5]  = t[2] >> 4;
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	0919      	lsrs	r1, r3, #4
 8013e32:	69fa      	ldr	r2, [r7, #28]
 8013e34:	4613      	mov	r3, r2
 8013e36:	00db      	lsls	r3, r3, #3
 8013e38:	4413      	add	r3, r2
 8013e3a:	3305      	adds	r3, #5
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	4413      	add	r3, r2
 8013e40:	b2ca      	uxtb	r2, r1
 8013e42:	701a      	strb	r2, [r3, #0]
    r[9*i+6]  = t[2] >> 12;
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	0b19      	lsrs	r1, r3, #12
 8013e48:	69fa      	ldr	r2, [r7, #28]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	00db      	lsls	r3, r3, #3
 8013e4e:	4413      	add	r3, r2
 8013e50:	3306      	adds	r3, #6
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	4413      	add	r3, r2
 8013e56:	b2ca      	uxtb	r2, r1
 8013e58:	701a      	strb	r2, [r3, #0]
    r[9*i+6] |= t[3] << 6;
 8013e5a:	69fa      	ldr	r2, [r7, #28]
 8013e5c:	4613      	mov	r3, r2
 8013e5e:	00db      	lsls	r3, r3, #3
 8013e60:	4413      	add	r3, r2
 8013e62:	3306      	adds	r3, #6
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	4413      	add	r3, r2
 8013e68:	7818      	ldrb	r0, [r3, #0]
 8013e6a:	69bb      	ldr	r3, [r7, #24]
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	019b      	lsls	r3, r3, #6
 8013e70:	b2d9      	uxtb	r1, r3
 8013e72:	69fa      	ldr	r2, [r7, #28]
 8013e74:	4613      	mov	r3, r2
 8013e76:	00db      	lsls	r3, r3, #3
 8013e78:	4413      	add	r3, r2
 8013e7a:	3306      	adds	r3, #6
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	4413      	add	r3, r2
 8013e80:	ea40 0201 	orr.w	r2, r0, r1
 8013e84:	b2d2      	uxtb	r2, r2
 8013e86:	701a      	strb	r2, [r3, #0]
    r[9*i+7]  = t[3] >> 2;
 8013e88:	69bb      	ldr	r3, [r7, #24]
 8013e8a:	0899      	lsrs	r1, r3, #2
 8013e8c:	69fa      	ldr	r2, [r7, #28]
 8013e8e:	4613      	mov	r3, r2
 8013e90:	00db      	lsls	r3, r3, #3
 8013e92:	4413      	add	r3, r2
 8013e94:	3307      	adds	r3, #7
 8013e96:	687a      	ldr	r2, [r7, #4]
 8013e98:	4413      	add	r3, r2
 8013e9a:	b2ca      	uxtb	r2, r1
 8013e9c:	701a      	strb	r2, [r3, #0]
    r[9*i+8]  = t[3] >> 10;
 8013e9e:	69bb      	ldr	r3, [r7, #24]
 8013ea0:	0a99      	lsrs	r1, r3, #10
 8013ea2:	69fa      	ldr	r2, [r7, #28]
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	00db      	lsls	r3, r3, #3
 8013ea8:	4413      	add	r3, r2
 8013eaa:	3308      	adds	r3, #8
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	4413      	add	r3, r2
 8013eb0:	b2ca      	uxtb	r2, r1
 8013eb2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8013eb4:	69fb      	ldr	r3, [r7, #28]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	61fb      	str	r3, [r7, #28]
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8013ebe:	f67f af30 	bls.w	8013d22 <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x10>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8013ec2:	bf00      	nop
 8013ec4:	bf00      	nop
 8013ec6:	3724      	adds	r7, #36	; 0x24
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ece:	4770      	bx	lr

08013ed0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 8013ed0:	b480      	push	{r7}
 8013ed2:	b085      	sub	sp, #20
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8013eda:	2300      	movs	r3, #0
 8013edc:	60fb      	str	r3, [r7, #12]
 8013ede:	e15e      	b.n	801419e <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 8013ee0:	68fa      	ldr	r2, [r7, #12]
 8013ee2:	4613      	mov	r3, r2
 8013ee4:	00db      	lsls	r3, r3, #3
 8013ee6:	4413      	add	r3, r2
 8013ee8:	683a      	ldr	r2, [r7, #0]
 8013eea:	4413      	add	r3, r2
 8013eec:	7819      	ldrb	r1, [r3, #0]
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	009a      	lsls	r2, r3, #2
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	009a      	lsls	r2, r3, #2
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f02:	4619      	mov	r1, r3
 8013f04:	68fa      	ldr	r2, [r7, #12]
 8013f06:	4613      	mov	r3, r2
 8013f08:	00db      	lsls	r3, r3, #3
 8013f0a:	4413      	add	r3, r2
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	683a      	ldr	r2, [r7, #0]
 8013f10:	4413      	add	r3, r2
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	021b      	lsls	r3, r3, #8
 8013f16:	4319      	orrs	r1, r3
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	009a      	lsls	r2, r3, #2
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	009a      	lsls	r2, r3, #2
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	68fa      	ldr	r2, [r7, #12]
 8013f30:	4613      	mov	r3, r2
 8013f32:	00db      	lsls	r3, r3, #3
 8013f34:	4413      	add	r3, r2
 8013f36:	3302      	adds	r3, #2
 8013f38:	683a      	ldr	r2, [r7, #0]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	041b      	lsls	r3, r3, #16
 8013f40:	4319      	orrs	r1, r3
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	009a      	lsls	r2, r3, #2
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	009a      	lsls	r2, r3, #2
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f56:	68fa      	ldr	r2, [r7, #12]
 8013f58:	0092      	lsls	r2, r2, #2
 8013f5a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8013f64:	68fa      	ldr	r2, [r7, #12]
 8013f66:	4613      	mov	r3, r2
 8013f68:	00db      	lsls	r3, r3, #3
 8013f6a:	4413      	add	r3, r2
 8013f6c:	3302      	adds	r3, #2
 8013f6e:	683a      	ldr	r2, [r7, #0]
 8013f70:	4413      	add	r3, r2
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	089b      	lsrs	r3, r3, #2
 8013f76:	b2d9      	uxtb	r1, r3
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	009b      	lsls	r3, r3, #2
 8013f7c:	1c5a      	adds	r2, r3, #1
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	009b      	lsls	r3, r3, #2
 8013f88:	1c5a      	adds	r2, r3, #1
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f90:	4619      	mov	r1, r3
 8013f92:	68fa      	ldr	r2, [r7, #12]
 8013f94:	4613      	mov	r3, r2
 8013f96:	00db      	lsls	r3, r3, #3
 8013f98:	4413      	add	r3, r2
 8013f9a:	3303      	adds	r3, #3
 8013f9c:	683a      	ldr	r2, [r7, #0]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	019b      	lsls	r3, r3, #6
 8013fa4:	4319      	orrs	r1, r3
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	009b      	lsls	r3, r3, #2
 8013faa:	1c5a      	adds	r2, r3, #1
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	009b      	lsls	r3, r3, #2
 8013fb6:	1c5a      	adds	r2, r3, #1
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	00db      	lsls	r3, r3, #3
 8013fc6:	4413      	add	r3, r2
 8013fc8:	3304      	adds	r3, #4
 8013fca:	683a      	ldr	r2, [r7, #0]
 8013fcc:	4413      	add	r3, r2
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	039b      	lsls	r3, r3, #14
 8013fd2:	4319      	orrs	r1, r3
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	1c5a      	adds	r2, r3, #1
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	1c5a      	adds	r2, r3, #1
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fec:	68fa      	ldr	r2, [r7, #12]
 8013fee:	0092      	lsls	r2, r2, #2
 8013ff0:	3201      	adds	r2, #1
 8013ff2:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	4613      	mov	r3, r2
 8014000:	00db      	lsls	r3, r3, #3
 8014002:	4413      	add	r3, r2
 8014004:	3304      	adds	r3, #4
 8014006:	683a      	ldr	r2, [r7, #0]
 8014008:	4413      	add	r3, r2
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	091b      	lsrs	r3, r3, #4
 801400e:	b2d9      	uxtb	r1, r3
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	1c9a      	adds	r2, r3, #2
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	1c9a      	adds	r2, r3, #2
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014028:	4619      	mov	r1, r3
 801402a:	68fa      	ldr	r2, [r7, #12]
 801402c:	4613      	mov	r3, r2
 801402e:	00db      	lsls	r3, r3, #3
 8014030:	4413      	add	r3, r2
 8014032:	3305      	adds	r3, #5
 8014034:	683a      	ldr	r2, [r7, #0]
 8014036:	4413      	add	r3, r2
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	011b      	lsls	r3, r3, #4
 801403c:	4319      	orrs	r1, r3
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	1c9a      	adds	r2, r3, #2
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	009b      	lsls	r3, r3, #2
 801404e:	1c9a      	adds	r2, r3, #2
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014056:	4619      	mov	r1, r3
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	4613      	mov	r3, r2
 801405c:	00db      	lsls	r3, r3, #3
 801405e:	4413      	add	r3, r2
 8014060:	3306      	adds	r3, #6
 8014062:	683a      	ldr	r2, [r7, #0]
 8014064:	4413      	add	r3, r2
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	031b      	lsls	r3, r3, #12
 801406a:	4319      	orrs	r1, r3
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	009b      	lsls	r3, r3, #2
 8014070:	1c9a      	adds	r2, r3, #2
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	1c9a      	adds	r2, r3, #2
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	0092      	lsls	r2, r2, #2
 8014088:	3202      	adds	r2, #2
 801408a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8014094:	68fa      	ldr	r2, [r7, #12]
 8014096:	4613      	mov	r3, r2
 8014098:	00db      	lsls	r3, r3, #3
 801409a:	4413      	add	r3, r2
 801409c:	3306      	adds	r3, #6
 801409e:	683a      	ldr	r2, [r7, #0]
 80140a0:	4413      	add	r3, r2
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	099b      	lsrs	r3, r3, #6
 80140a6:	b2d9      	uxtb	r1, r3
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	009b      	lsls	r3, r3, #2
 80140ac:	1cda      	adds	r2, r3, #3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	1cda      	adds	r2, r3, #3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140c0:	4619      	mov	r1, r3
 80140c2:	68fa      	ldr	r2, [r7, #12]
 80140c4:	4613      	mov	r3, r2
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	4413      	add	r3, r2
 80140ca:	3307      	adds	r3, #7
 80140cc:	683a      	ldr	r2, [r7, #0]
 80140ce:	4413      	add	r3, r2
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	4319      	orrs	r1, r3
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	1cda      	adds	r2, r3, #3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	1cda      	adds	r2, r3, #3
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ee:	4619      	mov	r1, r3
 80140f0:	68fa      	ldr	r2, [r7, #12]
 80140f2:	4613      	mov	r3, r2
 80140f4:	00db      	lsls	r3, r3, #3
 80140f6:	4413      	add	r3, r2
 80140f8:	3308      	adds	r3, #8
 80140fa:	683a      	ldr	r2, [r7, #0]
 80140fc:	4413      	add	r3, r2
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	029b      	lsls	r3, r3, #10
 8014102:	4319      	orrs	r1, r3
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	1cda      	adds	r2, r3, #3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	1cda      	adds	r2, r3, #3
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801411c:	68fa      	ldr	r2, [r7, #12]
 801411e:	0092      	lsls	r2, r2, #2
 8014120:	3203      	adds	r2, #3
 8014122:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	009a      	lsls	r2, r3, #2
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014136:	68fa      	ldr	r2, [r7, #12]
 8014138:	0092      	lsls	r2, r2, #2
 801413a:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	1c5a      	adds	r2, r3, #1
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014150:	68fa      	ldr	r2, [r7, #12]
 8014152:	0092      	lsls	r2, r2, #2
 8014154:	3201      	adds	r2, #1
 8014156:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	009b      	lsls	r3, r3, #2
 8014164:	1c9a      	adds	r2, r3, #2
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801416c:	68fa      	ldr	r2, [r7, #12]
 801416e:	0092      	lsls	r2, r2, #2
 8014170:	3202      	adds	r2, #2
 8014172:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	1cda      	adds	r2, r3, #3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014188:	68fa      	ldr	r2, [r7, #12]
 801418a:	0092      	lsls	r2, r2, #2
 801418c:	3203      	adds	r2, #3
 801418e:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	3301      	adds	r3, #1
 801419c:	60fb      	str	r3, [r7, #12]
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	2b3f      	cmp	r3, #63	; 0x3f
 80141a2:	f67f ae9d 	bls.w	8013ee0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 80141a6:	bf00      	nop
 80141a8:	bf00      	nop
 80141aa:	3714      	adds	r7, #20
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr

080141b4 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 80141b4:	b480      	push	{r7}
 80141b6:	b085      	sub	sp, #20
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q_-1)/88
  for(i = 0; i < N_/4; ++i) {
 80141be:	2300      	movs	r3, #0
 80141c0:	60fb      	str	r3, [r7, #12]
 80141c2:	e081      	b.n	80142c8 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x114>
    r[3*i+0]  = a->coeffs[4*i+0];
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	009a      	lsls	r2, r3, #2
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80141ce:	68fa      	ldr	r2, [r7, #12]
 80141d0:	4613      	mov	r3, r2
 80141d2:	005b      	lsls	r3, r3, #1
 80141d4:	4413      	add	r3, r2
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	4413      	add	r3, r2
 80141da:	b2ca      	uxtb	r2, r1
 80141dc:	701a      	strb	r2, [r3, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	4613      	mov	r3, r2
 80141e2:	005b      	lsls	r3, r3, #1
 80141e4:	4413      	add	r3, r2
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	4413      	add	r3, r2
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	b25a      	sxtb	r2, r3
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	009b      	lsls	r3, r3, #2
 80141f2:	1c59      	adds	r1, r3, #1
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141fa:	019b      	lsls	r3, r3, #6
 80141fc:	b25b      	sxtb	r3, r3
 80141fe:	4313      	orrs	r3, r2
 8014200:	b259      	sxtb	r1, r3
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	4613      	mov	r3, r2
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	4413      	add	r3, r2
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	4413      	add	r3, r2
 801420e:	b2ca      	uxtb	r2, r1
 8014210:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	1c5a      	adds	r2, r3, #1
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801421e:	1099      	asrs	r1, r3, #2
 8014220:	68fa      	ldr	r2, [r7, #12]
 8014222:	4613      	mov	r3, r2
 8014224:	005b      	lsls	r3, r3, #1
 8014226:	4413      	add	r3, r2
 8014228:	3301      	adds	r3, #1
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	4413      	add	r3, r2
 801422e:	b2ca      	uxtb	r2, r1
 8014230:	701a      	strb	r2, [r3, #0]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	4613      	mov	r3, r2
 8014236:	005b      	lsls	r3, r3, #1
 8014238:	4413      	add	r3, r2
 801423a:	3301      	adds	r3, #1
 801423c:	687a      	ldr	r2, [r7, #4]
 801423e:	4413      	add	r3, r2
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	b25a      	sxtb	r2, r3
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	1c99      	adds	r1, r3, #2
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014250:	011b      	lsls	r3, r3, #4
 8014252:	b25b      	sxtb	r3, r3
 8014254:	4313      	orrs	r3, r2
 8014256:	b259      	sxtb	r1, r3
 8014258:	68fa      	ldr	r2, [r7, #12]
 801425a:	4613      	mov	r3, r2
 801425c:	005b      	lsls	r3, r3, #1
 801425e:	4413      	add	r3, r2
 8014260:	3301      	adds	r3, #1
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	4413      	add	r3, r2
 8014266:	b2ca      	uxtb	r2, r1
 8014268:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	1c9a      	adds	r2, r3, #2
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014276:	1119      	asrs	r1, r3, #4
 8014278:	68fa      	ldr	r2, [r7, #12]
 801427a:	4613      	mov	r3, r2
 801427c:	005b      	lsls	r3, r3, #1
 801427e:	4413      	add	r3, r2
 8014280:	3302      	adds	r3, #2
 8014282:	687a      	ldr	r2, [r7, #4]
 8014284:	4413      	add	r3, r2
 8014286:	b2ca      	uxtb	r2, r1
 8014288:	701a      	strb	r2, [r3, #0]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 801428a:	68fa      	ldr	r2, [r7, #12]
 801428c:	4613      	mov	r3, r2
 801428e:	005b      	lsls	r3, r3, #1
 8014290:	4413      	add	r3, r2
 8014292:	3302      	adds	r3, #2
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	4413      	add	r3, r2
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	b25a      	sxtb	r2, r3
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	009b      	lsls	r3, r3, #2
 80142a0:	1cd9      	adds	r1, r3, #3
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	b25b      	sxtb	r3, r3
 80142ac:	4313      	orrs	r3, r2
 80142ae:	b259      	sxtb	r1, r3
 80142b0:	68fa      	ldr	r2, [r7, #12]
 80142b2:	4613      	mov	r3, r2
 80142b4:	005b      	lsls	r3, r3, #1
 80142b6:	4413      	add	r3, r2
 80142b8:	3302      	adds	r3, #2
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	4413      	add	r3, r2
 80142be:	b2ca      	uxtb	r2, r1
 80142c0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	3301      	adds	r3, #1
 80142c6:	60fb      	str	r3, [r7, #12]
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2b3f      	cmp	r3, #63	; 0x3f
 80142cc:	f67f af7a 	bls.w	80141c4 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x10>
  for(i = 0; i < N_/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 80142d0:	bf00      	nop
 80142d2:	bf00      	nop
 80142d4:	3714      	adds	r7, #20
 80142d6:	46bd      	mov	sp, r7
 80142d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142dc:	4770      	bx	lr

080142de <polyvec_matrix_poly_smul_montgomery>:
*
* Arguments:   - polyveck t: output vector after multiplication of A*s1+s2
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors s1 and s2
**************************************************/
void polyvec_matrix_poly_smul_montgomery(polyveck *t, const uint8_t rho[], const uint8_t rhoprime[]) {
 80142de:	b580      	push	{r7, lr}
 80142e0:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80142e4:	b086      	sub	sp, #24
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	f107 0318 	add.w	r3, r7, #24
 80142ec:	f843 0c0c 	str.w	r0, [r3, #-12]
 80142f0:	f107 0318 	add.w	r3, r7, #24
 80142f4:	f843 1c10 	str.w	r1, [r3, #-16]
 80142f8:	f107 0318 	add.w	r3, r7, #24
 80142fc:	f843 2c14 	str.w	r2, [r3, #-20]
	  poly acc;
	  poly a_ij;
	  poly s1_j;
	  poly s2_j;

	  for(i = 0; i < K; ++i) {
 8014300:	2300      	movs	r3, #0
 8014302:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8014306:	f102 0214 	add.w	r2, r2, #20
 801430a:	6013      	str	r3, [r2, #0]
 801430c:	e09d      	b.n	801444a <polyvec_matrix_poly_smul_montgomery+0x16c>
		memset(&acc, 0, sizeof(acc));
 801430e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8014312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014316:	2100      	movs	r1, #0
 8014318:	4618      	mov	r0, r3
 801431a:	f001 fb67 	bl	80159ec <memset>
		for(j = 0; j < L; ++j) {
 801431e:	2300      	movs	r3, #0
 8014320:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8014324:	f102 0210 	add.w	r2, r2, #16
 8014328:	6013      	str	r3, [r2, #0]
 801432a:	e04b      	b.n	80143c4 <polyvec_matrix_poly_smul_montgomery+0xe6>
			poly_uniform(&a_ij, rho, (i << 8) + j); // generate A[i][j]
 801432c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014330:	f103 0314 	add.w	r3, r3, #20
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	b29b      	uxth	r3, r3
 8014338:	021b      	lsls	r3, r3, #8
 801433a:	b29a      	uxth	r2, r3
 801433c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014340:	f103 0310 	add.w	r3, r3, #16
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	b29b      	uxth	r3, r3
 8014348:	4413      	add	r3, r2
 801434a:	b29a      	uxth	r2, r3
 801434c:	f107 0318 	add.w	r3, r7, #24
 8014350:	4619      	mov	r1, r3
 8014352:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8014356:	f851 1c10 	ldr.w	r1, [r1, #-16]
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe fce4 	bl	8012d28 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			poly_uniform_eta(&s1_j, rhoprime, j);		// generate s1[j]
 8014360:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014364:	f103 0310 	add.w	r3, r3, #16
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	b29a      	uxth	r2, r3
 801436c:	f107 0318 	add.w	r3, r7, #24
 8014370:	4619      	mov	r1, r3
 8014372:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8014376:	f851 1c14 	ldr.w	r1, [r1, #-20]
 801437a:	4618      	mov	r0, r3
 801437c:	f7fe fdd9 	bl	8012f32 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
			poly_ntt(&s1_j);						// transform s1[j] to ntt
 8014380:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8014384:	4618      	mov	r0, r3
 8014386:	f7fe fb66 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &s1_j); // multiply A[i][j] on s1[j]
 801438a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801438e:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8014392:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8014396:	4618      	mov	r0, r3
 8014398:	f7fe fb75 	bl	8012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&acc, &acc, &a_ij);
 801439c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80143a0:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 80143a4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fe faf1 	bl	8012990 <pqcrystals_dilithium2aes_r_ref_poly_add>
		for(j = 0; j < L; ++j) {
 80143ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80143b2:	f103 0310 	add.w	r3, r3, #16
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	3301      	adds	r3, #1
 80143ba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80143be:	f102 0210 	add.w	r2, r2, #16
 80143c2:	6013      	str	r3, [r2, #0]
 80143c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80143c8:	f103 0310 	add.w	r3, r3, #16
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b03      	cmp	r3, #3
 80143d0:	d9ac      	bls.n	801432c <polyvec_matrix_poly_smul_montgomery+0x4e>
		}
		poly_reduce(&acc);
 80143d2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7fe fa9e 	bl	8012918 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&acc); // invert accumulated result from ntt
 80143dc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7fe fb44 	bl	8012a6e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
		poly_uniform_eta(&s2_j, rhoprime, L+i); // generate s2[j]
 80143e6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80143ea:	f103 0314 	add.w	r3, r3, #20
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	3304      	adds	r3, #4
 80143f4:	b29a      	uxth	r2, r3
 80143f6:	f107 0318 	add.w	r3, r7, #24
 80143fa:	4619      	mov	r1, r3
 80143fc:	f107 0318 	add.w	r3, r7, #24
 8014400:	3b08      	subs	r3, #8
 8014402:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8014406:	4618      	mov	r0, r3
 8014408:	f7fe fd93 	bl	8012f32 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		poly_add(&t->vec[i], &acc, &s2_j);	// add accumulator and s2[j]
 801440c:	f107 0318 	add.w	r3, r7, #24
 8014410:	461a      	mov	r2, r3
 8014412:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014416:	f103 0314 	add.w	r3, r3, #20
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	029b      	lsls	r3, r3, #10
 801441e:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8014422:	18d0      	adds	r0, r2, r3
 8014424:	f107 0318 	add.w	r3, r7, #24
 8014428:	3b08      	subs	r3, #8
 801442a:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 801442e:	461a      	mov	r2, r3
 8014430:	f7fe faae 	bl	8012990 <pqcrystals_dilithium2aes_r_ref_poly_add>
	  for(i = 0; i < K; ++i) {
 8014434:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014438:	f103 0314 	add.w	r3, r3, #20
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	3301      	adds	r3, #1
 8014440:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8014444:	f102 0214 	add.w	r2, r2, #20
 8014448:	6013      	str	r3, [r2, #0]
 801444a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801444e:	f103 0314 	add.w	r3, r3, #20
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b03      	cmp	r3, #3
 8014456:	f67f af5a 	bls.w	801430e <polyvec_matrix_poly_smul_montgomery+0x30>
	  }
}
 801445a:	bf00      	nop
 801445c:	bf00      	nop
 801445e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8014462:	3718      	adds	r7, #24
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <polyvec_matrix_poly_ymul_montgomery>:
*
* Arguments:   - polyveck w: output vector after multiplication of A*y
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors y
**************************************************/
void polyvec_matrix_poly_ymul_montgomery(polyveck *w, const uint8_t rho[], const uint8_t rhoprime[], uint16_t nonce) {
 8014468:	b590      	push	{r4, r7, lr}
 801446a:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 801446e:	af00      	add	r7, sp, #0
 8014470:	f607 0418 	addw	r4, r7, #2072	; 0x818
 8014474:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 8014478:	6020      	str	r0, [r4, #0]
 801447a:	f607 0018 	addw	r0, r7, #2072	; 0x818
 801447e:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 8014482:	6001      	str	r1, [r0, #0]
 8014484:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8014488:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 801448c:	600a      	str	r2, [r1, #0]
 801448e:	461a      	mov	r2, r3
 8014490:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014494:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 8014498:	801a      	strh	r2, [r3, #0]
	  unsigned int i, j;
	  poly a_ij;
	  poly y_j;

	  for(i = 0; i < K; ++i) {
 801449a:	2300      	movs	r3, #0
 801449c:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80144a0:	e085      	b.n	80145ae <polyvec_matrix_poly_ymul_montgomery+0x146>
		memset(&w->vec[i], 0, sizeof(uint32_t)*N_);
 80144a2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80144a6:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 80144aa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80144ae:	029b      	lsls	r3, r3, #10
 80144b0:	6812      	ldr	r2, [r2, #0]
 80144b2:	4413      	add	r3, r2
 80144b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80144b8:	2100      	movs	r1, #0
 80144ba:	4618      	mov	r0, r3
 80144bc:	f001 fa96 	bl	80159ec <memset>
		for(j = 0; j < L; ++j) {
 80144c0:	2300      	movs	r3, #0
 80144c2:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 80144c6:	e051      	b.n	801456c <polyvec_matrix_poly_ymul_montgomery+0x104>
			poly_uniform(&a_ij, rho, (i << 8) + j); 		// generate A[i][j]
 80144c8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	021b      	lsls	r3, r3, #8
 80144d0:	b29a      	uxth	r2, r3
 80144d2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	4413      	add	r3, r2
 80144da:	b29a      	uxth	r2, r3
 80144dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80144e0:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80144e4:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 80144e8:	6819      	ldr	r1, [r3, #0]
 80144ea:	f7fe fc1d 	bl	8012d28 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			poly_uniform_gamma1(&y_j, rhoprime, L*nonce + j);	// generate y[j]
 80144ee:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80144f2:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 80144f6:	881b      	ldrh	r3, [r3, #0]
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	b29a      	uxth	r2, r3
 80144fc:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8014500:	b29b      	uxth	r3, r3
 8014502:	4413      	add	r3, r2
 8014504:	b29a      	uxth	r2, r3
 8014506:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801450a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801450e:	f107 0010 	add.w	r0, r7, #16
 8014512:	6819      	ldr	r1, [r3, #0]
 8014514:	f7fe fd73 	bl	8012ffe <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
			poly_ntt(&y_j);									// transform s1[j] to ntt
 8014518:	f107 0310 	add.w	r3, r7, #16
 801451c:	4618      	mov	r0, r3
 801451e:	f7fe fa9a 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &y_j); // multiply A[i][j] on y[j]
 8014522:	f107 0210 	add.w	r2, r7, #16
 8014526:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 801452a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801452e:	4618      	mov	r0, r3
 8014530:	f7fe faa9 	bl	8012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&w->vec[i], &w->vec[i], &a_ij);
 8014534:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014538:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801453c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014540:	029b      	lsls	r3, r3, #10
 8014542:	6812      	ldr	r2, [r2, #0]
 8014544:	18d0      	adds	r0, r2, r3
 8014546:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801454a:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801454e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014552:	029b      	lsls	r3, r3, #10
 8014554:	6812      	ldr	r2, [r2, #0]
 8014556:	4413      	add	r3, r2
 8014558:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801455c:	4619      	mov	r1, r3
 801455e:	f7fe fa17 	bl	8012990 <pqcrystals_dilithium2aes_r_ref_poly_add>
		for(j = 0; j < L; ++j) {
 8014562:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8014566:	3301      	adds	r3, #1
 8014568:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 801456c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8014570:	2b03      	cmp	r3, #3
 8014572:	d9a9      	bls.n	80144c8 <polyvec_matrix_poly_ymul_montgomery+0x60>
		}
		poly_reduce(&w->vec[i]);
 8014574:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014578:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801457c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014580:	029b      	lsls	r3, r3, #10
 8014582:	6812      	ldr	r2, [r2, #0]
 8014584:	4413      	add	r3, r2
 8014586:	4618      	mov	r0, r3
 8014588:	f7fe f9c6 	bl	8012918 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&w->vec[i]); // invert accumulated result from ntt
 801458c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014590:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8014594:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014598:	029b      	lsls	r3, r3, #10
 801459a:	6812      	ldr	r2, [r2, #0]
 801459c:	4413      	add	r3, r2
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fe fa65 	bl	8012a6e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	  for(i = 0; i < K; ++i) {
 80145a4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80145a8:	3301      	adds	r3, #1
 80145aa:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80145ae:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80145b2:	2b03      	cmp	r3, #3
 80145b4:	f67f af75 	bls.w	80144a2 <polyvec_matrix_poly_ymul_montgomery+0x3a>
	  }
}
 80145b8:	bf00      	nop
 80145ba:	bf00      	nop
 80145bc:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd90      	pop	{r4, r7, pc}

080145c4 <polyvec_compute_z_montgomery>:
* Arguments:   - polyvecl z: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s1
*              - const uint8_t y_rhoprime[]: byte array containing seed for vector y
**************************************************/
void polyvec_compute_z_montgomery(polyvecl *z, const poly *cp, const uint8_t s_rhoprime[], const uint8_t y_rhoprime[], uint16_t nonce) {
 80145c4:	b590      	push	{r4, r7, lr}
 80145c6:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 80145ca:	af00      	add	r7, sp, #0
 80145cc:	f607 0418 	addw	r4, r7, #2072	; 0x818
 80145d0:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 80145d4:	6020      	str	r0, [r4, #0]
 80145d6:	f607 0018 	addw	r0, r7, #2072	; 0x818
 80145da:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 80145de:	6001      	str	r1, [r0, #0]
 80145e0:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80145e4:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 80145e8:	600a      	str	r2, [r1, #0]
 80145ea:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80145ee:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 80145f2:	6013      	str	r3, [r2, #0]
	  unsigned int j;
	  poly s1_j;
	  poly y_j;

	  for(j = 0; j < L; ++j) {
 80145f4:	2300      	movs	r3, #0
 80145f6:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80145fa:	e053      	b.n	80146a4 <polyvec_compute_z_montgomery+0xe0>
		  poly_uniform_eta(&s1_j, s_rhoprime, j);		// generate s1[j]
 80145fc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014600:	b29a      	uxth	r2, r3
 8014602:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014606:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801460a:	f207 4014 	addw	r0, r7, #1044	; 0x414
 801460e:	6819      	ldr	r1, [r3, #0]
 8014610:	f7fe fc8f 	bl	8012f32 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		  poly_ntt(&s1_j);								// transform s1[j] to ntt
 8014614:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8014618:	4618      	mov	r0, r3
 801461a:	f7fe fa1c 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		  poly_uniform_gamma1(&y_j, y_rhoprime, L*nonce + j);	// generate y[j]; nonce == j
 801461e:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	b29a      	uxth	r2, r3
 8014626:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801462a:	b29b      	uxth	r3, r3
 801462c:	4413      	add	r3, r2
 801462e:	b29a      	uxth	r2, r3
 8014630:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014634:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8014638:	f107 0014 	add.w	r0, r7, #20
 801463c:	6819      	ldr	r1, [r3, #0]
 801463e:	f7fe fcde 	bl	8012ffe <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
		  poly_pointwise_montgomery(&s1_j, cp, &s1_j); // multiply cp on s1[j]
 8014642:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8014646:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801464a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801464e:	f207 4014 	addw	r0, r7, #1044	; 0x414
 8014652:	6819      	ldr	r1, [r3, #0]
 8014654:	f7fe fa17 	bl	8012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		  poly_invntt_tomont(&s1_j);					// invert multiplication result
 8014658:	f207 4314 	addw	r3, r7, #1044	; 0x414
 801465c:	4618      	mov	r0, r3
 801465e:	f7fe fa06 	bl	8012a6e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>

		  poly_add(&z->vec[j], &y_j, &s1_j);			// z = y + cp*s1.
 8014662:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014666:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801466a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801466e:	029b      	lsls	r3, r3, #10
 8014670:	6812      	ldr	r2, [r2, #0]
 8014672:	4413      	add	r3, r2
 8014674:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8014678:	f107 0114 	add.w	r1, r7, #20
 801467c:	4618      	mov	r0, r3
 801467e:	f7fe f987 	bl	8012990 <pqcrystals_dilithium2aes_r_ref_poly_add>
		  poly_reduce(&z->vec[j]);
 8014682:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014686:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801468a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801468e:	029b      	lsls	r3, r3, #10
 8014690:	6812      	ldr	r2, [r2, #0]
 8014692:	4413      	add	r3, r2
 8014694:	4618      	mov	r0, r3
 8014696:	f7fe f93f 	bl	8012918 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
	  for(j = 0; j < L; ++j) {
 801469a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801469e:	3301      	adds	r3, #1
 80146a0:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80146a4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80146a8:	2b03      	cmp	r3, #3
 80146aa:	d9a7      	bls.n	80145fc <polyvec_compute_z_montgomery+0x38>
	  }
}
 80146ac:	bf00      	nop
 80146ae:	bf00      	nop
 80146b0:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd90      	pop	{r4, r7, pc}

080146b8 <polyvec_compute_h_montgomery>:
*
* Arguments:   - polyveck h: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s2
**************************************************/
void polyvec_compute_h_montgomery(polyveck *h, const poly *cp, const uint8_t s_rhoprime[]) {
 80146b8:	b580      	push	{r7, lr}
 80146ba:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80146be:	af00      	add	r7, sp, #0
 80146c0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80146c4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80146c8:	6018      	str	r0, [r3, #0]
 80146ca:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80146ce:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80146d2:	6019      	str	r1, [r3, #0]
 80146d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80146d8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80146dc:	601a      	str	r2, [r3, #0]
	  unsigned int j;
	  poly s2_j;

	  for(j = 0; j < K; ++j) {
 80146de:	2300      	movs	r3, #0
 80146e0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80146e4:	e035      	b.n	8014752 <polyvec_compute_h_montgomery+0x9a>
		  poly_uniform_eta(&s2_j, s_rhoprime, L+j);		// generate s2[j]
 80146e6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	3304      	adds	r3, #4
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80146f4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80146f8:	f107 0014 	add.w	r0, r7, #20
 80146fc:	6819      	ldr	r1, [r3, #0]
 80146fe:	f7fe fc18 	bl	8012f32 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		  poly_ntt(&s2_j);								// transform s2[j] to ntt
 8014702:	f107 0314 	add.w	r3, r7, #20
 8014706:	4618      	mov	r0, r3
 8014708:	f7fe f9a5 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		  poly_pointwise_montgomery(&h->vec[j], cp, &s2_j); // h_j = cp*s2_j
 801470c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014710:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8014714:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014718:	029b      	lsls	r3, r3, #10
 801471a:	6812      	ldr	r2, [r2, #0]
 801471c:	18d0      	adds	r0, r2, r3
 801471e:	f107 0214 	add.w	r2, r7, #20
 8014722:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014726:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801472a:	6819      	ldr	r1, [r3, #0]
 801472c:	f7fe f9ab 	bl	8012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		  poly_invntt_tomont(&h->vec[j]);					// invert multiplication result
 8014730:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014734:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8014738:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801473c:	029b      	lsls	r3, r3, #10
 801473e:	6812      	ldr	r2, [r2, #0]
 8014740:	4413      	add	r3, r2
 8014742:	4618      	mov	r0, r3
 8014744:	f7fe f993 	bl	8012a6e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	  for(j = 0; j < K; ++j) {
 8014748:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801474c:	3301      	adds	r3, #1
 801474e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8014752:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014756:	2b03      	cmp	r3, #3
 8014758:	d9c5      	bls.n	80146e6 <polyvec_compute_h_montgomery+0x2e>
		  //poly_reduce(&h->vec[j]);
	  }
}
 801475a:	bf00      	nop
 801475c:	bf00      	nop
 801475e:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <polyvec_reconstruct_w1_montgomery>:
* Arguments:   - polyveck *w: output vector
* 			   - const uint8_t sig[CRYPTO_BYTES]: signature
* 			   - const uint8_t pk[CRYPTO_PUBLICKEYBYTES]: public key
*
**************************************************/
void polyvec_reconstruct_w1_montgomery(polyveck *w, const uint8_t sig[CRYPTO_BYTES], const uint8_t pk[CRYPTO_PUBLICKEYBYTES]) {
 8014766:	b580      	push	{r7, lr}
 8014768:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 801476c:	b086      	sub	sp, #24
 801476e:	af00      	add	r7, sp, #0
 8014770:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014774:	f843 0c4c 	str.w	r0, [r3, #-76]
 8014778:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801477c:	f843 1c50 	str.w	r1, [r3, #-80]
 8014780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014784:	f843 2c54 	str.w	r2, [r3, #-84]
	  poly cp;
	  poly a_ij;
	  poly z_j;
	  poly t1_i;

	  unpack_pk_rho(rho, pk);
 8014788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801478c:	461a      	mov	r2, r3
 801478e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8014792:	f103 0310 	add.w	r3, r3, #16
 8014796:	f852 1c54 	ldr.w	r1, [r2, #-84]
 801479a:	4618      	mov	r0, r3
 801479c:	f7fe f889 	bl	80128b2 <unpack_pk_rho>
	  unpack_sig_c(c, sig);
 80147a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147a4:	461a      	mov	r2, r3
 80147a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80147aa:	f103 0310 	add.w	r3, r3, #16
 80147ae:	f852 1c50 	ldr.w	r1, [r2, #-80]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7fe f84a 	bl	801284c <unpack_sig_c>
	  poly_challenge(&cp, c);
 80147b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80147bc:	f102 0210 	add.w	r2, r2, #16
 80147c0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80147c4:	4611      	mov	r1, r2
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7fe fc51 	bl	801306e <pqcrystals_dilithium2aes_r_ref_poly_challenge>
	  poly_ntt(&cp);
 80147cc:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fe f940 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>

	  for(i = 0; i < K; ++i) {
 80147d6:	2300      	movs	r3, #0
 80147d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80147dc:	f102 0214 	add.w	r2, r2, #20
 80147e0:	6013      	str	r3, [r2, #0]
 80147e2:	e0eb      	b.n	80149bc <polyvec_reconstruct_w1_montgomery+0x256>
		memset(&w->vec[i], 0, sizeof(uint32_t)*N_);
 80147e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147e8:	461a      	mov	r2, r3
 80147ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80147ee:	f103 0314 	add.w	r3, r3, #20
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	029b      	lsls	r3, r3, #10
 80147f6:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80147fa:	4413      	add	r3, r2
 80147fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014800:	2100      	movs	r1, #0
 8014802:	4618      	mov	r0, r3
 8014804:	f001 f8f2 	bl	80159ec <memset>
		for(j = 0; j < L; ++j) {
 8014808:	2300      	movs	r3, #0
 801480a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 801480e:	f102 0210 	add.w	r2, r2, #16
 8014812:	6013      	str	r3, [r2, #0]
 8014814:	e05d      	b.n	80148d2 <polyvec_reconstruct_w1_montgomery+0x16c>
			poly_uniform(&a_ij, rho, (i << 8) + j); 		// generate A[i][j]
 8014816:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801481a:	f103 0314 	add.w	r3, r3, #20
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	b29b      	uxth	r3, r3
 8014822:	021b      	lsls	r3, r3, #8
 8014824:	b29a      	uxth	r2, r3
 8014826:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801482a:	f103 0310 	add.w	r3, r3, #16
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	b29b      	uxth	r3, r3
 8014832:	4413      	add	r3, r2
 8014834:	b29a      	uxth	r2, r3
 8014836:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 801483a:	f101 0110 	add.w	r1, r1, #16
 801483e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe fa70 	bl	8012d28 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			unpack_sig_z(&z_j, j, sig);						// extract z_j from signature
 8014848:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801484c:	461a      	mov	r2, r3
 801484e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8014852:	f852 2c50 	ldr.w	r2, [r2, #-80]
 8014856:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 801485a:	f101 0110 	add.w	r1, r1, #16
 801485e:	6809      	ldr	r1, [r1, #0]
 8014860:	4618      	mov	r0, r3
 8014862:	f7fe f810 	bl	8012886 <unpack_sig_z>
			poly_ntt(&z_j);									// transform z[j] to ntt
 8014866:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801486a:	4618      	mov	r0, r3
 801486c:	f7fe f8f3 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &z_j);  // multiply A[i][j] on z[j]
 8014870:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8014874:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8014878:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801487c:	4618      	mov	r0, r3
 801487e:	f7fe f902 	bl	8012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&w->vec[i], &w->vec[i], &a_ij);		// accumulate result
 8014882:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014886:	461a      	mov	r2, r3
 8014888:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801488c:	f103 0314 	add.w	r3, r3, #20
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	029b      	lsls	r3, r3, #10
 8014894:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014898:	18d0      	adds	r0, r2, r3
 801489a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801489e:	461a      	mov	r2, r3
 80148a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80148a4:	f103 0314 	add.w	r3, r3, #20
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	029b      	lsls	r3, r3, #10
 80148ac:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80148b0:	4413      	add	r3, r2
 80148b2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80148b6:	4619      	mov	r1, r3
 80148b8:	f7fe f86a 	bl	8012990 <pqcrystals_dilithium2aes_r_ref_poly_add>
		for(j = 0; j < L; ++j) {
 80148bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80148c0:	f103 0310 	add.w	r3, r3, #16
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	3301      	adds	r3, #1
 80148c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80148cc:	f102 0210 	add.w	r2, r2, #16
 80148d0:	6013      	str	r3, [r2, #0]
 80148d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80148d6:	f103 0310 	add.w	r3, r3, #16
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2b03      	cmp	r3, #3
 80148de:	d99a      	bls.n	8014816 <polyvec_reconstruct_w1_montgomery+0xb0>
		}
		// compute c*2^d*t1
		unpack_pk_t1(&t1_i, i, pk);
 80148e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148e4:	461a      	mov	r2, r3
 80148e6:	f107 0318 	add.w	r3, r7, #24
 80148ea:	3b08      	subs	r3, #8
 80148ec:	f852 2c54 	ldr.w	r2, [r2, #-84]
 80148f0:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80148f4:	f101 0114 	add.w	r1, r1, #20
 80148f8:	6809      	ldr	r1, [r1, #0]
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7fd fff6 	bl	80128ec <unpack_pk_t1>
		poly_shiftl(&t1_i);
 8014900:	f107 0318 	add.w	r3, r7, #24
 8014904:	3b08      	subs	r3, #8
 8014906:	4618      	mov	r0, r3
 8014908:	f7fe f888 	bl	8012a1c <pqcrystals_dilithium2aes_r_ref_poly_shiftl>
		poly_ntt(&t1_i);
 801490c:	f107 0318 	add.w	r3, r7, #24
 8014910:	3b08      	subs	r3, #8
 8014912:	4618      	mov	r0, r3
 8014914:	f7fe f89f 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		poly_pointwise_montgomery(&t1_i, &cp, &t1_i);
 8014918:	f107 0218 	add.w	r2, r7, #24
 801491c:	3a08      	subs	r2, #8
 801491e:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 8014922:	f107 0318 	add.w	r3, r7, #24
 8014926:	3b08      	subs	r3, #8
 8014928:	4618      	mov	r0, r3
 801492a:	f7fe f8ac 	bl	8012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>

		poly_sub(&w->vec[i], &w->vec[i], &t1_i);
 801492e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014932:	461a      	mov	r2, r3
 8014934:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014938:	f103 0314 	add.w	r3, r3, #20
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	029b      	lsls	r3, r3, #10
 8014940:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014944:	18d0      	adds	r0, r2, r3
 8014946:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801494a:	461a      	mov	r2, r3
 801494c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014950:	f103 0314 	add.w	r3, r3, #20
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	029b      	lsls	r3, r3, #10
 8014958:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 801495c:	18d1      	adds	r1, r2, r3
 801495e:	f107 0318 	add.w	r3, r7, #24
 8014962:	3b08      	subs	r3, #8
 8014964:	461a      	mov	r2, r3
 8014966:	f7fe f836 	bl	80129d6 <pqcrystals_dilithium2aes_r_ref_poly_sub>
		poly_reduce(&w->vec[i]);
 801496a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801496e:	461a      	mov	r2, r3
 8014970:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014974:	f103 0314 	add.w	r3, r3, #20
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	029b      	lsls	r3, r3, #10
 801497c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014980:	4413      	add	r3, r2
 8014982:	4618      	mov	r0, r3
 8014984:	f7fd ffc8 	bl	8012918 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&w->vec[i]); // invert accumulated result from ntt
 8014988:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801498c:	461a      	mov	r2, r3
 801498e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014992:	f103 0314 	add.w	r3, r3, #20
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	029b      	lsls	r3, r3, #10
 801499a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 801499e:	4413      	add	r3, r2
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7fe f864 	bl	8012a6e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	  for(i = 0; i < K; ++i) {
 80149a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80149aa:	f103 0314 	add.w	r3, r3, #20
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	3301      	adds	r3, #1
 80149b2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80149b6:	f102 0214 	add.w	r2, r2, #20
 80149ba:	6013      	str	r3, [r2, #0]
 80149bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80149c0:	f103 0314 	add.w	r3, r3, #20
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2b03      	cmp	r3, #3
 80149c8:	f67f af0c 	bls.w	80147e4 <polyvec_reconstruct_w1_montgomery+0x7e>
	  }
}
 80149cc:	bf00      	nop
 80149ce:	bf00      	nop
 80149d0:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80149d4:	3718      	adds	r7, #24
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 80149da:	b580      	push	{r7, lr}
 80149dc:	b084      	sub	sp, #16
 80149de:	af00      	add	r7, sp, #0
 80149e0:	6078      	str	r0, [r7, #4]
 80149e2:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < L; ++i)
 80149e4:	2300      	movs	r3, #0
 80149e6:	60fb      	str	r3, [r7, #12]
 80149e8:	e00f      	b.n	8014a0a <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	029b      	lsls	r3, r3, #10
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	4413      	add	r3, r2
 80149f2:	6839      	ldr	r1, [r7, #0]
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fe f917 	bl	8012c28 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d001      	beq.n	8014a04 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x2a>
      return 1;
 8014a00:	2301      	movs	r3, #1
 8014a02:	e006      	b.n	8014a12 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x38>
  for(i = 0; i < L; ++i)
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	3301      	adds	r3, #1
 8014a08:	60fb      	str	r3, [r7, #12]
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2b03      	cmp	r3, #3
 8014a0e:	d9ec      	bls.n	80149ea <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x10>

  return 0;
 8014a10:	2300      	movs	r3, #0
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3710      	adds	r7, #16
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd80      	pop	{r7, pc}

08014a1a <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 8014a1a:	b580      	push	{r7, lr}
 8014a1c:	b084      	sub	sp, #16
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014a22:	2300      	movs	r3, #0
 8014a24:	60fb      	str	r3, [r7, #12]
 8014a26:	e009      	b.n	8014a3c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0x22>
    poly_reduce(&v->vec[i]);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	029b      	lsls	r3, r3, #10
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	4413      	add	r3, r2
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7fd ff71 	bl	8012918 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
  for(i = 0; i < K; ++i)
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	3301      	adds	r3, #1
 8014a3a:	60fb      	str	r3, [r7, #12]
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	2b03      	cmp	r3, #3
 8014a40:	d9f2      	bls.n	8014a28 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0xe>
}
 8014a42:	bf00      	nop
 8014a44:	bf00      	nop
 8014a46:	3710      	adds	r7, #16
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014a54:	2300      	movs	r3, #0
 8014a56:	60fb      	str	r3, [r7, #12]
 8014a58:	e009      	b.n	8014a6e <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0x22>
    poly_caddq(&v->vec[i]);
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	029b      	lsls	r3, r3, #10
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	4413      	add	r3, r2
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7fd ff76 	bl	8012954 <pqcrystals_dilithium2aes_r_ref_poly_caddq>
  for(i = 0; i < K; ++i)
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	60fb      	str	r3, [r7, #12]
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2b03      	cmp	r3, #3
 8014a72:	d9f2      	bls.n	8014a5a <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0xe>
}
 8014a74:	bf00      	nop
 8014a76:	bf00      	nop
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <pqcrystals_dilithium2aes_r_ref_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b086      	sub	sp, #24
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	60f8      	str	r0, [r7, #12]
 8014a86:	60b9      	str	r1, [r7, #8]
 8014a88:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	617b      	str	r3, [r7, #20]
 8014a8e:	e011      	b.n	8014ab4 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	029b      	lsls	r3, r3, #10
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	18d0      	adds	r0, r2, r3
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	029b      	lsls	r3, r3, #10
 8014a9c:	68ba      	ldr	r2, [r7, #8]
 8014a9e:	18d1      	adds	r1, r2, r3
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	029b      	lsls	r3, r3, #10
 8014aa4:	687a      	ldr	r2, [r7, #4]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	f7fd ff71 	bl	8012990 <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 0; i < K; ++i)
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	617b      	str	r3, [r7, #20]
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	2b03      	cmp	r3, #3
 8014ab8:	d9ea      	bls.n	8014a90 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x12>
}
 8014aba:	bf00      	nop
 8014abc:	bf00      	nop
 8014abe:	3718      	adds	r7, #24
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	617b      	str	r3, [r7, #20]
 8014ad4:	e011      	b.n	8014afa <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x36>
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	029b      	lsls	r3, r3, #10
 8014ada:	68fa      	ldr	r2, [r7, #12]
 8014adc:	18d0      	adds	r0, r2, r3
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	029b      	lsls	r3, r3, #10
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	18d1      	adds	r1, r2, r3
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	029b      	lsls	r3, r3, #10
 8014aea:	687a      	ldr	r2, [r7, #4]
 8014aec:	4413      	add	r3, r2
 8014aee:	461a      	mov	r2, r3
 8014af0:	f7fd ff71 	bl	80129d6 <pqcrystals_dilithium2aes_r_ref_poly_sub>
  for(i = 0; i < K; ++i)
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	3301      	adds	r3, #1
 8014af8:	617b      	str	r3, [r7, #20]
 8014afa:	697b      	ldr	r3, [r7, #20]
 8014afc:	2b03      	cmp	r3, #3
 8014afe:	d9ea      	bls.n	8014ad6 <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x12>
}
 8014b00:	bf00      	nop
 8014b02:	bf00      	nop
 8014b04:	3718      	adds	r7, #24
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b084      	sub	sp, #16
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014b12:	2300      	movs	r3, #0
 8014b14:	60fb      	str	r3, [r7, #12]
 8014b16:	e009      	b.n	8014b2c <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0x22>
    poly_ntt(&v->vec[i]);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	029b      	lsls	r3, r3, #10
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	4413      	add	r3, r2
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fd ff98 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  for(i = 0; i < K; ++i)
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	60fb      	str	r3, [r7, #12]
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2b03      	cmp	r3, #3
 8014b30:	d9f2      	bls.n	8014b18 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0xe>
}
 8014b32:	bf00      	nop
 8014b34:	bf00      	nop
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014b44:	2300      	movs	r3, #0
 8014b46:	60fb      	str	r3, [r7, #12]
 8014b48:	e009      	b.n	8014b5e <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	029b      	lsls	r3, r3, #10
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	4413      	add	r3, r2
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7fd ff8b 	bl	8012a6e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
  for(i = 0; i < K; ++i)
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	60fb      	str	r3, [r7, #12]
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2b03      	cmp	r3, #3
 8014b62:	d9f2      	bls.n	8014b4a <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0xe>
}
 8014b64:	bf00      	nop
 8014b66:	bf00      	nop
 8014b68:	3710      	adds	r7, #16
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}

08014b6e <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>:

void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8014b6e:	b580      	push	{r7, lr}
 8014b70:	b086      	sub	sp, #24
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	60f8      	str	r0, [r7, #12]
 8014b76:	60b9      	str	r1, [r7, #8]
 8014b78:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	e00e      	b.n	8014b9e <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	029b      	lsls	r3, r3, #10
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	18d0      	adds	r0, r2, r3
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	029b      	lsls	r3, r3, #10
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	4413      	add	r3, r2
 8014b90:	461a      	mov	r2, r3
 8014b92:	68b9      	ldr	r1, [r7, #8]
 8014b94:	f7fd ff77 	bl	8012a86 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 0; i < K; ++i)
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	617b      	str	r3, [r7, #20]
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	2b03      	cmp	r3, #3
 8014ba2:	d9ed      	bls.n	8014b80 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x12>
}
 8014ba4:	bf00      	nop
 8014ba6:	bf00      	nop
 8014ba8:	3718      	adds	r7, #24
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b084      	sub	sp, #16
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014bb8:	2300      	movs	r3, #0
 8014bba:	60fb      	str	r3, [r7, #12]
 8014bbc:	e00f      	b.n	8014bde <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	029b      	lsls	r3, r3, #10
 8014bc2:	687a      	ldr	r2, [r7, #4]
 8014bc4:	4413      	add	r3, r2
 8014bc6:	6839      	ldr	r1, [r7, #0]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fe f82d 	bl	8012c28 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d001      	beq.n	8014bd8 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x2a>
      return 1;
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e006      	b.n	8014be6 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x38>
  for(i = 0; i < K; ++i)
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	3301      	adds	r3, #1
 8014bdc:	60fb      	str	r3, [r7, #12]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2b03      	cmp	r3, #3
 8014be2:	d9ec      	bls.n	8014bbe <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x10>

  return 0;
 8014be4:	2300      	movs	r3, #0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}

08014bee <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8014bee:	b580      	push	{r7, lr}
 8014bf0:	b086      	sub	sp, #24
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	60f8      	str	r0, [r7, #12]
 8014bf6:	60b9      	str	r1, [r7, #8]
 8014bf8:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	617b      	str	r3, [r7, #20]
 8014bfe:	e011      	b.n	8014c24 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x36>
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	029b      	lsls	r3, r3, #10
 8014c04:	68fa      	ldr	r2, [r7, #12]
 8014c06:	18d0      	adds	r0, r2, r3
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	029b      	lsls	r3, r3, #10
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	18d1      	adds	r1, r2, r3
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	029b      	lsls	r3, r3, #10
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	4413      	add	r3, r2
 8014c18:	461a      	mov	r2, r3
 8014c1a:	f7fd ff6a 	bl	8012af2 <pqcrystals_dilithium2aes_r_ref_poly_power2round>
  for(i = 0; i < K; ++i)
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	3301      	adds	r3, #1
 8014c22:	617b      	str	r3, [r7, #20]
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	2b03      	cmp	r3, #3
 8014c28:	d9ea      	bls.n	8014c00 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x12>
}
 8014c2a:	bf00      	nop
 8014c2c:	bf00      	nop
 8014c2e:	3718      	adds	r7, #24
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b086      	sub	sp, #24
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014c40:	2300      	movs	r3, #0
 8014c42:	617b      	str	r3, [r7, #20]
 8014c44:	e011      	b.n	8014c6a <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x36>
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	029b      	lsls	r3, r3, #10
 8014c4a:	68fa      	ldr	r2, [r7, #12]
 8014c4c:	18d0      	adds	r0, r2, r3
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	029b      	lsls	r3, r3, #10
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	18d1      	adds	r1, r2, r3
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	029b      	lsls	r3, r3, #10
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	461a      	mov	r2, r3
 8014c60:	f7fd ff6b 	bl	8012b3a <pqcrystals_dilithium2aes_r_ref_poly_decompose>
  for(i = 0; i < K; ++i)
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	3301      	adds	r3, #1
 8014c68:	617b      	str	r3, [r7, #20]
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	2b03      	cmp	r3, #3
 8014c6e:	d9ea      	bls.n	8014c46 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x12>
}
 8014c70:	bf00      	nop
 8014c72:	bf00      	nop
 8014c74:	3718      	adds	r7, #24
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}

08014c7a <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	b086      	sub	sp, #24
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	60f8      	str	r0, [r7, #12]
 8014c82:	60b9      	str	r1, [r7, #8]
 8014c84:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8014c86:	2300      	movs	r3, #0
 8014c88:	613b      	str	r3, [r7, #16]

  for(i = 0; i < K; ++i)
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	617b      	str	r3, [r7, #20]
 8014c8e:	e015      	b.n	8014cbc <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x42>
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	029b      	lsls	r3, r3, #10
 8014c94:	68fa      	ldr	r2, [r7, #12]
 8014c96:	18d0      	adds	r0, r2, r3
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	029b      	lsls	r3, r3, #10
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	18d1      	adds	r1, r2, r3
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	029b      	lsls	r3, r3, #10
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	4413      	add	r3, r2
 8014ca8:	461a      	mov	r2, r3
 8014caa:	f7fd ff6a 	bl	8012b82 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	613b      	str	r3, [r7, #16]
  for(i = 0; i < K; ++i)
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	3301      	adds	r3, #1
 8014cba:	617b      	str	r3, [r7, #20]
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	2b03      	cmp	r3, #3
 8014cc0:	d9e6      	bls.n	8014c90 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x16>

  return s;
 8014cc2:	693b      	ldr	r3, [r7, #16]
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3718      	adds	r7, #24
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}

08014ccc <polyveck_use_hint_r>:

  for(i = 0; i < K; ++i)
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
}

void polyveck_use_hint_r(polyveck *w, const polyveck *u, const uint8_t h[N_*K]) {
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b086      	sub	sp, #24
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i, h += i*N_)
 8014cd8:	2300      	movs	r3, #0
 8014cda:	617b      	str	r3, [r7, #20]
 8014cdc:	e013      	b.n	8014d06 <polyveck_use_hint_r+0x3a>
    poly_use_hint_r(&w->vec[i], &u->vec[i], h);
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	029b      	lsls	r3, r3, #10
 8014ce2:	68fa      	ldr	r2, [r7, #12]
 8014ce4:	18d0      	adds	r0, r2, r3
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	029b      	lsls	r3, r3, #10
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	4413      	add	r3, r2
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	f7fd ff75 	bl	8012be0 <poly_use_hint_r>
  for(i = 0; i < K; ++i, h += i*N_)
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	617b      	str	r3, [r7, #20]
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	021b      	lsls	r3, r3, #8
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	4413      	add	r3, r2
 8014d04:	607b      	str	r3, [r7, #4]
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	2b03      	cmp	r3, #3
 8014d0a:	d9e8      	bls.n	8014cde <polyveck_use_hint_r+0x12>
}
 8014d0c:	bf00      	nop
 8014d0e:	bf00      	nop
 8014d10:	3718      	adds	r7, #24
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}

08014d16 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 8014d16:	b580      	push	{r7, lr}
 8014d18:	b084      	sub	sp, #16
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	6078      	str	r0, [r7, #4]
 8014d1e:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014d20:	2300      	movs	r3, #0
 8014d22:	60fb      	str	r3, [r7, #12]
 8014d24:	e011      	b.n	8014d4a <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x34>
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 8014d26:	68fa      	ldr	r2, [r7, #12]
 8014d28:	4613      	mov	r3, r2
 8014d2a:	005b      	lsls	r3, r3, #1
 8014d2c:	4413      	add	r3, r2
 8014d2e:	019b      	lsls	r3, r3, #6
 8014d30:	461a      	mov	r2, r3
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	1898      	adds	r0, r3, r2
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	029b      	lsls	r3, r3, #10
 8014d3a:	683a      	ldr	r2, [r7, #0]
 8014d3c:	4413      	add	r3, r2
 8014d3e:	4619      	mov	r1, r3
 8014d40:	f7ff fa38 	bl	80141b4 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>
  for(i = 0; i < K; ++i)
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	3301      	adds	r3, #1
 8014d48:	60fb      	str	r3, [r7, #12]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2b03      	cmp	r3, #3
 8014d4e:	d9ea      	bls.n	8014d26 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x10>
}
 8014d50:	bf00      	nop
 8014d52:	bf00      	nop
 8014d54:	3710      	adds	r7, #16
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}

08014d5a <randombytes>:
#include <stdint.h>
#include <stdlib.h>
#include "randombytes.h"


void randombytes(RNG_HandleTypeDef *hrng, uint8_t *out, size_t outlen) {
 8014d5a:	b580      	push	{r7, lr}
 8014d5c:	b08a      	sub	sp, #40	; 0x28
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	60f8      	str	r0, [r7, #12]
 8014d62:	60b9      	str	r1, [r7, #8]
 8014d64:	607a      	str	r2, [r7, #4]
	uint32_t rand_int = 0;
 8014d66:	2300      	movs	r3, #0
 8014d68:	613b      	str	r3, [r7, #16]
	uint8_t *rand_int_byte = (uint8_t*)&rand_int;
 8014d6a:	f107 0310 	add.w	r3, r7, #16
 8014d6e:	61fb      	str	r3, [r7, #28]
	uint32_t *int_out = (uint32_t*)out;
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	61bb      	str	r3, [r7, #24]
	int i = 0;
 8014d74:	2300      	movs	r3, #0
 8014d76:	627b      	str	r3, [r7, #36]	; 0x24
	int j = 0;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	623b      	str	r3, [r7, #32]

	for(; i < outlen/4; i++){
 8014d7c:	e00a      	b.n	8014d94 <randombytes+0x3a>
		HAL_RNG_GenerateRandomNumber(hrng, &int_out[i]);
 8014d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	69ba      	ldr	r2, [r7, #24]
 8014d84:	4413      	add	r3, r2
 8014d86:	4619      	mov	r1, r3
 8014d88:	68f8      	ldr	r0, [r7, #12]
 8014d8a:	f7f0 fbb8 	bl	80054fe <HAL_RNG_GenerateRandomNumber>
	for(; i < outlen/4; i++){
 8014d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d90:	3301      	adds	r3, #1
 8014d92:	627b      	str	r3, [r7, #36]	; 0x24
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	089a      	lsrs	r2, r3, #2
 8014d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d8ef      	bhi.n	8014d7e <randombytes+0x24>
	}

	int rem = outlen % 4;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f003 0303 	and.w	r3, r3, #3
 8014da4:	617b      	str	r3, [r7, #20]
	if (rem) {
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d018      	beq.n	8014dde <randombytes+0x84>
		HAL_RNG_GenerateRandomNumber(hrng, &rand_int);
 8014dac:	f107 0310 	add.w	r3, r7, #16
 8014db0:	4619      	mov	r1, r3
 8014db2:	68f8      	ldr	r0, [r7, #12]
 8014db4:	f7f0 fba3 	bl	80054fe <HAL_RNG_GenerateRandomNumber>
		for(; j < rem; j++){
 8014db8:	e00d      	b.n	8014dd6 <randombytes+0x7c>
			out[i+j] = rand_int_byte[j];
 8014dba:	6a3b      	ldr	r3, [r7, #32]
 8014dbc:	69fa      	ldr	r2, [r7, #28]
 8014dbe:	441a      	add	r2, r3
 8014dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014dc2:	6a3b      	ldr	r3, [r7, #32]
 8014dc4:	440b      	add	r3, r1
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	440b      	add	r3, r1
 8014dcc:	7812      	ldrb	r2, [r2, #0]
 8014dce:	701a      	strb	r2, [r3, #0]
		for(; j < rem; j++){
 8014dd0:	6a3b      	ldr	r3, [r7, #32]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	623b      	str	r3, [r7, #32]
 8014dd6:	6a3a      	ldr	r2, [r7, #32]
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	dbed      	blt.n	8014dba <randombytes+0x60>
		}
	}
}
 8014dde:	bf00      	nop
 8014de0:	3728      	adds	r7, #40	; 0x28
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}

08014de6 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>:
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
 8014de6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int32_t t;

  t = (int32_t)a*QINV;
 8014df2:	68b8      	ldr	r0, [r7, #8]
 8014df4:	4601      	mov	r1, r0
 8014df6:	00c9      	lsls	r1, r1, #3
 8014df8:	1a09      	subs	r1, r1, r0
 8014dfa:	0289      	lsls	r1, r1, #10
 8014dfc:	4401      	add	r1, r0
 8014dfe:	0349      	lsls	r1, r1, #13
 8014e00:	4401      	add	r1, r0
 8014e02:	6179      	str	r1, [r7, #20]
  t = (a - (int64_t)t*Q_) >> 32;
 8014e04:	6979      	ldr	r1, [r7, #20]
 8014e06:	17c8      	asrs	r0, r1, #31
 8014e08:	460c      	mov	r4, r1
 8014e0a:	4605      	mov	r5, r0
 8014e0c:	e9c7 4500 	strd	r4, r5, [r7]
 8014e10:	f04f 0000 	mov.w	r0, #0
 8014e14:	f04f 0100 	mov.w	r1, #0
 8014e18:	02a9      	lsls	r1, r5, #10
 8014e1a:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8014e1e:	02a0      	lsls	r0, r4, #10
 8014e20:	683e      	ldr	r6, [r7, #0]
 8014e22:	1a32      	subs	r2, r6, r0
 8014e24:	687e      	ldr	r6, [r7, #4]
 8014e26:	eb66 0301 	sbc.w	r3, r6, r1
 8014e2a:	f04f 0000 	mov.w	r0, #0
 8014e2e:	f04f 0100 	mov.w	r1, #0
 8014e32:	0359      	lsls	r1, r3, #13
 8014e34:	ea41 41d2 	orr.w	r1, r1, r2, lsr #19
 8014e38:	0350      	lsls	r0, r2, #13
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	ebb2 0a04 	subs.w	sl, r2, r4
 8014e42:	eb63 0b05 	sbc.w	fp, r3, r5
 8014e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014e4a:	eb1a 0802 	adds.w	r8, sl, r2
 8014e4e:	eb4b 0903 	adc.w	r9, fp, r3
 8014e52:	f04f 0200 	mov.w	r2, #0
 8014e56:	f04f 0300 	mov.w	r3, #0
 8014e5a:	464a      	mov	r2, r9
 8014e5c:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8014e60:	4613      	mov	r3, r2
 8014e62:	617b      	str	r3, [r7, #20]
  return t;
 8014e64:	697b      	ldr	r3, [r7, #20]
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3718      	adds	r7, #24
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014e70:	4770      	bx	lr

08014e72 <pqcrystals_dilithium2aes_r_ref_reduce32>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
 8014e72:	b480      	push	{r7}
 8014e74:	b085      	sub	sp, #20
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
  int32_t t;

  t = (a + (1 << 22)) >> 23;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8014e80:	15db      	asrs	r3, r3, #23
 8014e82:	60fb      	str	r3, [r7, #12]
  t = a - t*Q_;
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	4613      	mov	r3, r2
 8014e88:	025b      	lsls	r3, r3, #9
 8014e8a:	1a9b      	subs	r3, r3, r2
 8014e8c:	029b      	lsls	r3, r3, #10
 8014e8e:	4413      	add	r3, r2
 8014e90:	035b      	lsls	r3, r3, #13
 8014e92:	1a9b      	subs	r3, r3, r2
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	4413      	add	r3, r2
 8014e98:	60fb      	str	r3, [r7, #12]
  return t;
 8014e9a:	68fb      	ldr	r3, [r7, #12]
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3714      	adds	r7, #20
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea6:	4770      	bx	lr

08014ea8 <pqcrystals_dilithium2aes_r_ref_caddq>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
 8014ea8:	b480      	push	{r7}
 8014eaa:	b083      	sub	sp, #12
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  a += (a >> 31) & Q_;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	17da      	asrs	r2, r3, #31
 8014eb4:	4b05      	ldr	r3, [pc, #20]	; (8014ecc <pqcrystals_dilithium2aes_r_ref_caddq+0x24>)
 8014eb6:	4013      	ands	r3, r2
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	4413      	add	r3, r2
 8014ebc:	607b      	str	r3, [r7, #4]
  return a;
 8014ebe:	687b      	ldr	r3, [r7, #4]
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	007fe001 	.word	0x007fe001

08014ed0 <pqcrystals_dilithium2aes_r_ref_power2round>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
 8014ed0:	b480      	push	{r7}
 8014ed2:	b085      	sub	sp, #20
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8014ee0:	135b      	asrs	r3, r3, #13
 8014ee2:	60fb      	str	r3, [r7, #12]
  *a0 = a - (a1 << D);
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	035b      	lsls	r3, r3, #13
 8014ee8:	683a      	ldr	r2, [r7, #0]
 8014eea:	1ad2      	subs	r2, r2, r3
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	601a      	str	r2, [r3, #0]
  return a1;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3714      	adds	r7, #20
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr
	...

08014f00 <pqcrystals_dilithium2aes_r_ref_decompose>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
 8014f00:	b480      	push	{r7}
 8014f02:	b085      	sub	sp, #20
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1  = (a + 127) >> 7;
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	337f      	adds	r3, #127	; 0x7f
 8014f0e:	11db      	asrs	r3, r3, #7
 8014f10:	60fb      	str	r3, [r7, #12]
#if GAMMA2 == (Q_-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q_-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	f642 420b 	movw	r2, #11275	; 0x2c0b
 8014f18:	fb02 f303 	mul.w	r3, r2, r3
 8014f1c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8014f20:	161b      	asrs	r3, r3, #24
 8014f22:	60fb      	str	r3, [r7, #12]
  a1 ^= ((43 - a1) >> 31) & a1;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8014f2a:	17db      	asrs	r3, r3, #31
 8014f2c:	43db      	mvns	r3, r3
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	4013      	ands	r3, r2
 8014f32:	60fb      	str	r3, [r7, #12]
#endif

  *a0  = a - a1*2*GAMMA2;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	4a0e      	ldr	r2, [pc, #56]	; (8014f70 <pqcrystals_dilithium2aes_r_ref_decompose+0x70>)
 8014f38:	fb03 f202 	mul.w	r2, r3, r2
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	441a      	add	r2, r3
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	601a      	str	r2, [r3, #0]
  *a0 -= (((Q_-1)/2 - *a0) >> 31) & Q_;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	f5c3 137f 	rsb	r3, r3, #4177920	; 0x3fc000
 8014f50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014f54:	17d9      	asrs	r1, r3, #31
 8014f56:	4b07      	ldr	r3, [pc, #28]	; (8014f74 <pqcrystals_dilithium2aes_r_ref_decompose+0x74>)
 8014f58:	400b      	ands	r3, r1
 8014f5a:	1ad2      	subs	r2, r2, r3
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	601a      	str	r2, [r3, #0]
  return a1;
 8014f60:	68fb      	ldr	r3, [r7, #12]
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3714      	adds	r7, #20
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr
 8014f6e:	bf00      	nop
 8014f70:	fffd1800 	.word	0xfffd1800
 8014f74:	007fe001 	.word	0x007fe001

08014f78 <pqcrystals_dilithium2aes_r_ref_make_hint>:
* Arguments:   - int32_t a0: low bits of input element
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
 8014f78:	b480      	push	{r7}
 8014f7a:	b083      	sub	sp, #12
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
  if(a0 <= GAMMA2 || a0 > Q_ - GAMMA2 || (a0 == Q_ - GAMMA2 && a1 == 0))
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f5b3 3fba 	cmp.w	r3, #95232	; 0x17400
 8014f88:	dd0a      	ble.n	8014fa0 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4a09      	ldr	r2, [pc, #36]	; (8014fb4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	dc06      	bgt.n	8014fa0 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	4a07      	ldr	r2, [pc, #28]	; (8014fb4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d104      	bne.n	8014fa4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d101      	bne.n	8014fa4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
    return 0;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	e000      	b.n	8014fa6 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2e>

  return 1;
 8014fa4:	2301      	movs	r3, #1
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	370c      	adds	r7, #12
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	007e6c01 	.word	0x007e6c01

08014fb8 <pqcrystals_dilithium2aes_r_ref_use_hint>:
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  int32_t a0, a1;

  a1 = decompose(&a0, a);
 8014fc2:	f107 0308 	add.w	r3, r7, #8
 8014fc6:	6879      	ldr	r1, [r7, #4]
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7ff ff99 	bl	8014f00 <pqcrystals_dilithium2aes_r_ref_decompose>
 8014fce:	60f8      	str	r0, [r7, #12]
  if(hint == 0)
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d101      	bne.n	8014fda <pqcrystals_dilithium2aes_r_ref_use_hint+0x22>
    return a1;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	e011      	b.n	8014ffe <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  if(a0 > 0)
    return (a1 + 1) & 15;
  else
    return (a1 - 1) & 15;
#elif GAMMA2 == (Q_-1)/88
  if(a0 > 0)
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	dd07      	ble.n	8014ff0 <pqcrystals_dilithium2aes_r_ref_use_hint+0x38>
    return (a1 == 43) ?  0 : a1 + 1;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	2b2b      	cmp	r3, #43	; 0x2b
 8014fe4:	d002      	beq.n	8014fec <pqcrystals_dilithium2aes_r_ref_use_hint+0x34>
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	3301      	adds	r3, #1
 8014fea:	e008      	b.n	8014ffe <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 8014fec:	2300      	movs	r3, #0
 8014fee:	e006      	b.n	8014ffe <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  else
    return (a1 ==  0) ? 43 : a1 - 1;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d002      	beq.n	8014ffc <pqcrystals_dilithium2aes_r_ref_use_hint+0x44>
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	e000      	b.n	8014ffe <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 8014ffc:	232b      	movs	r3, #43	; 0x2b
#endif
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3710      	adds	r7, #16
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}

08015006 <pqcrystals_dilithium2aes_r_ref_keypair>:
#ifdef STM32WB55xx
int crypto_sign_keypair(RNG_HandleTypeDef *hrng, uint8_t *pk, uint8_t *sk)
#else
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk)
#endif
{
 8015006:	b580      	push	{r7, lr}
 8015008:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 801500c:	b08e      	sub	sp, #56	; 0x38
 801500e:	af02      	add	r7, sp, #8
 8015010:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015014:	f843 0ca4 	str.w	r0, [r3, #-164]
 8015018:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801501c:	f843 1ca8 	str.w	r1, [r3, #-168]
 8015020:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015024:	f843 2cac 	str.w	r2, [r3, #-172]

	randombytes(seedbuf, SEEDBYTES);
#endif
  /* Get randomness for rho, rhoprime and key */
#ifdef STM32WB55xx
	randombytes(hrng, seedbuf, SEEDBYTES);
 8015028:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 801502c:	f103 0304 	add.w	r3, r3, #4
 8015030:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015034:	4610      	mov	r0, r2
 8015036:	2220      	movs	r2, #32
 8015038:	4619      	mov	r1, r3
 801503a:	f850 0ca4 	ldr.w	r0, [r0, #-164]
 801503e:	f7ff fe8c 	bl	8014d5a <randombytes>
#else
	randombytes(seedbuf, SEEDBYTES);
#endif
	shake256(seedbuf, 3*SEEDBYTES, seedbuf, SEEDBYTES);
 8015042:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8015046:	f102 0204 	add.w	r2, r2, #4
 801504a:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 801504e:	f100 0004 	add.w	r0, r0, #4
 8015052:	2320      	movs	r3, #32
 8015054:	2160      	movs	r1, #96	; 0x60
 8015056:	f7fd f857 	bl	8012108 <pqcrystals_fips202_ref_shake256>
	rho = seedbuf;
 801505a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 801505e:	f103 0304 	add.w	r3, r3, #4
 8015062:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8015066:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 801506a:	6013      	str	r3, [r2, #0]
	rhoprime = seedbuf + SEEDBYTES;
 801506c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8015070:	f103 0304 	add.w	r3, r3, #4
 8015074:	3320      	adds	r3, #32
 8015076:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 801507a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 801507e:	6013      	str	r3, [r2, #0]
	key = seedbuf + 2*SEEDBYTES;
 8015080:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8015084:	f103 0304 	add.w	r3, r3, #4
 8015088:	3340      	adds	r3, #64	; 0x40
 801508a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 801508e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8015092:	6013      	str	r3, [r2, #0]

#ifdef CONSTRAINED_DEVICE
	polyvec_matrix_poly_smul_montgomery(&t1, rho, rhoprime);
 8015094:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8015098:	f103 0310 	add.w	r3, r3, #16
 801509c:	3b1c      	subs	r3, #28
 801509e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80150a2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80150a6:	6812      	ldr	r2, [r2, #0]
 80150a8:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 80150ac:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 80150b0:	6809      	ldr	r1, [r1, #0]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7ff f913 	bl	80142de <polyvec_matrix_poly_smul_montgomery>
	// Add error vector s2
	polyveck_add(&t1, &t1, &s2);
#endif

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 80150b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80150bc:	f103 0310 	add.w	r3, r3, #16
 80150c0:	3b1c      	subs	r3, #28
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7ff fcc2 	bl	8014a4c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 80150c8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80150cc:	f102 0210 	add.w	r2, r2, #16
 80150d0:	3a1c      	subs	r2, #28
 80150d2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80150d6:	391c      	subs	r1, #28
 80150d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80150dc:	f103 0310 	add.w	r3, r3, #16
 80150e0:	3b1c      	subs	r3, #28
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7ff fd83 	bl	8014bee <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>
  pack_pk(pk, rho, &t1);
 80150e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80150ec:	f103 0310 	add.w	r3, r3, #16
 80150f0:	3b1c      	subs	r3, #28
 80150f2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80150f6:	4610      	mov	r0, r2
 80150f8:	461a      	mov	r2, r3
 80150fa:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80150fe:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8015102:	6819      	ldr	r1, [r3, #0]
 8015104:	f850 0ca8 	ldr.w	r0, [r0, #-168]
 8015108:	f7fd f948 	bl	801239c <pqcrystals_dilithium2aes_r_ref_pack_pk>

  /* Compute CRH(rho, t1) and write secret key */
  crh(tr, pk, CRYPTO_PUBLICKEYBYTES);
 801510c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015110:	461a      	mov	r2, r3
 8015112:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8015116:	f100 0014 	add.w	r0, r0, #20
 801511a:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 801511e:	f852 2ca8 	ldr.w	r2, [r2, #-168]
 8015122:	2130      	movs	r1, #48	; 0x30
 8015124:	f7fc fff0 	bl	8012108 <pqcrystals_fips202_ref_shake256>
#ifdef CONSTRAINED_DEVICE
  pack_sk_r(sk, rho, rhoprime, tr, key, &t0);
 8015128:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801512c:	f102 0214 	add.w	r2, r2, #20
 8015130:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015134:	4618      	mov	r0, r3
 8015136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801513a:	3b1c      	subs	r3, #28
 801513c:	9301      	str	r3, [sp, #4]
 801513e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8015142:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	9300      	str	r3, [sp, #0]
 801514a:	4613      	mov	r3, r2
 801514c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8015150:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8015154:	6812      	ldr	r2, [r2, #0]
 8015156:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 801515a:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 801515e:	6809      	ldr	r1, [r1, #0]
 8015160:	f850 0cac 	ldr.w	r0, [r0, #-172]
 8015164:	f7fd f951 	bl	801240a <pqcrystals_dilithium2aes_r_ref_pack_sk_r>
#else
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
#endif
  return 0;
 8015168:	2300      	movs	r3, #0
}
 801516a:	4618      	mov	r0, r3
 801516c:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8015170:	3730      	adds	r7, #48	; 0x30
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
	...

08015178 <pqcrystals_dilithium2aes_r_ref_signature>:
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
#endif
{
 8015178:	b590      	push	{r4, r7, lr}
 801517a:	f5ad 4dab 	sub.w	sp, sp, #21888	; 0x5580
 801517e:	b09f      	sub	sp, #124	; 0x7c
 8015180:	af02      	add	r7, sp, #8
 8015182:	f507 64be 	add.w	r4, r7, #1520	; 0x5f0
 8015186:	f2a4 54e4 	subw	r4, r4, #1508	; 0x5e4
 801518a:	6020      	str	r0, [r4, #0]
 801518c:	f507 60be 	add.w	r0, r7, #1520	; 0x5f0
 8015190:	f5a0 60bd 	sub.w	r0, r0, #1512	; 0x5e8
 8015194:	6001      	str	r1, [r0, #0]
 8015196:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 801519a:	f2a1 51ec 	subw	r1, r1, #1516	; 0x5ec
 801519e:	600a      	str	r2, [r1, #0]
 80151a0:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 80151a4:	f5a2 62be 	sub.w	r2, r2, #1520	; 0x5f0
 80151a8:	6013      	str	r3, [r2, #0]

#ifdef CONSTRAINED_DEVICE
  unsigned int n;
  uint8_t seedbuf[3*SEEDBYTES + 3*CRHBYTES];
  uint8_t *rho, *s_rhoprime, *tr, *key, *mu, *y_rhoprime;
  uint16_t nonce = 0;
 80151aa:	2300      	movs	r3, #0
 80151ac:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80151b0:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80151b4:	8013      	strh	r3, [r2, #0]
  polyvecl z;
  polyveck t0, w1, w0, h;
  poly cp;
  keccak_state state;

  rho = seedbuf;
 80151b6:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 80151ba:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80151be:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80151c2:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80151c6:	6013      	str	r3, [r2, #0]
  s_rhoprime = rho + SEEDBYTES;
 80151c8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80151cc:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	3320      	adds	r3, #32
 80151d4:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80151d8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80151dc:	6013      	str	r3, [r2, #0]
  tr = s_rhoprime + SEEDBYTES;
 80151de:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80151e2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	3320      	adds	r3, #32
 80151ea:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80151ee:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80151f2:	6013      	str	r3, [r2, #0]
  key = tr + CRHBYTES;
 80151f4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80151f8:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	3330      	adds	r3, #48	; 0x30
 8015200:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015204:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8015208:	6013      	str	r3, [r2, #0]
  mu = key + SEEDBYTES;
 801520a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 801520e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	3320      	adds	r3, #32
 8015216:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801521a:	f102 0258 	add.w	r2, r2, #88	; 0x58
 801521e:	6013      	str	r3, [r2, #0]
  y_rhoprime = mu + CRHBYTES;
 8015220:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015224:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	3330      	adds	r3, #48	; 0x30
 801522c:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015230:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8015234:	6013      	str	r3, [r2, #0]
  unpack_sk_r(rho, s_rhoprime, tr, key, &t0, sk);
 8015236:	f507 43ac 	add.w	r3, r7, #22016	; 0x5600
 801523a:	f103 0304 	add.w	r3, r3, #4
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	9301      	str	r3, [sp, #4]
 8015242:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8015246:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801524a:	3b10      	subs	r3, #16
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015252:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801525c:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8015260:	6812      	ldr	r2, [r2, #0]
 8015262:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015266:	f101 0164 	add.w	r1, r1, #100	; 0x64
 801526a:	6809      	ldr	r1, [r1, #0]
 801526c:	f507 40ab 	add.w	r0, r7, #21888	; 0x5580
 8015270:	f100 0068 	add.w	r0, r0, #104	; 0x68
 8015274:	6800      	ldr	r0, [r0, #0]
 8015276:	f7fd f93b 	bl	80124f0 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r>
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
#endif


  /* Compute CRH(tr, msg) */
  shake256_init(&state);
 801527a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801527e:	3b60      	subs	r3, #96	; 0x60
 8015280:	4618      	mov	r0, r3
 8015282:	f7fc fee2 	bl	801204a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, tr, CRHBYTES);
 8015286:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801528a:	3b60      	subs	r3, #96	; 0x60
 801528c:	2230      	movs	r2, #48	; 0x30
 801528e:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015292:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8015296:	6809      	ldr	r1, [r1, #0]
 8015298:	4618      	mov	r0, r3
 801529a:	f7fc fee1 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 801529e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80152a2:	f5a3 61be 	sub.w	r1, r3, #1520	; 0x5f0
 80152a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80152aa:	3b60      	subs	r3, #96	; 0x60
 80152ac:	f507 42ac 	add.w	r2, r7, #22016	; 0x5600
 80152b0:	6812      	ldr	r2, [r2, #0]
 80152b2:	6809      	ldr	r1, [r1, #0]
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7fc fed3 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80152ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80152be:	3b60      	subs	r3, #96	; 0x60
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7fc fee5 	bl	8012090 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
 80152c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80152ca:	3b60      	subs	r3, #96	; 0x60
 80152cc:	461a      	mov	r2, r3
 80152ce:	2130      	movs	r1, #48	; 0x30
 80152d0:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80152d4:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80152d8:	6818      	ldr	r0, [r3, #0]
 80152da:	f7fc fefd 	bl	80120d8 <pqcrystals_fips202_ref_shake256_squeeze>

#if defined(CONSTRAINED_DEVICE) && defined(DILITHIUM_RANDOMIZED_SIGNING)
#ifdef STM32WB55xx
  randombytes(hrng, y_rhoprime, CRHBYTES);
 80152de:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80152e2:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80152e6:	2230      	movs	r2, #48	; 0x30
 80152e8:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 80152ec:	f101 0154 	add.w	r1, r1, #84	; 0x54
 80152f0:	6809      	ldr	r1, [r1, #0]
 80152f2:	6818      	ldr	r0, [r3, #0]
 80152f4:	f7ff fd31 	bl	8014d5a <randombytes>
  /* Expand matrix and transform vectors */
  polyvec_matrix_expand(mat, rho);
  polyvecl_ntt(&s1);
  polyveck_ntt(&s2);
#endif
  polyveck_ntt(&t0);
 80152f8:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80152fc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8015300:	3b10      	subs	r3, #16
 8015302:	4618      	mov	r0, r3
 8015304:	f7ff fc01 	bl	8014b0a <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>
  // Matrix-vector multiplication
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
  polyveck_reduce(&w1);
  polyveck_invntt_tomont(&w1);
#else
  polyvec_matrix_poly_ymul_montgomery(&w1, rho, y_rhoprime, nonce++);
 8015308:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 801530c:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8015310:	881b      	ldrh	r3, [r3, #0]
 8015312:	1c5a      	adds	r2, r3, #1
 8015314:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015318:	f101 016e 	add.w	r1, r1, #110	; 0x6e
 801531c:	800a      	strh	r2, [r1, #0]
 801531e:	f507 5013 	add.w	r0, r7, #9408	; 0x24c0
 8015322:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8015326:	3810      	subs	r0, #16
 8015328:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801532c:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8015330:	6812      	ldr	r2, [r2, #0]
 8015332:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015336:	f101 0168 	add.w	r1, r1, #104	; 0x68
 801533a:	6809      	ldr	r1, [r1, #0]
 801533c:	f7ff f894 	bl	8014468 <polyvec_matrix_poly_ymul_montgomery>
#endif

  /* Decompose w and call the random oracle */
  polyveck_caddq(&w1);
 8015340:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 8015344:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8015348:	3b10      	subs	r3, #16
 801534a:	4618      	mov	r0, r3
 801534c:	f7ff fb7e 	bl	8014a4c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 8015350:	f507 5213 	add.w	r2, r7, #9408	; 0x24c0
 8015354:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8015358:	3a10      	subs	r2, #16
 801535a:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 801535e:	f101 0110 	add.w	r1, r1, #16
 8015362:	3910      	subs	r1, #16
 8015364:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 8015368:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801536c:	3b10      	subs	r3, #16
 801536e:	4618      	mov	r0, r3
 8015370:	f7ff fc60 	bl	8014c34 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 8015374:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 8015378:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801537c:	3b10      	subs	r3, #16
 801537e:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 8015382:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 8015386:	4619      	mov	r1, r3
 8015388:	6810      	ldr	r0, [r2, #0]
 801538a:	f7ff fcc4 	bl	8014d16 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>

  shake256_init(&state);
 801538e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015392:	3b60      	subs	r3, #96	; 0x60
 8015394:	4618      	mov	r0, r3
 8015396:	f7fc fe58 	bl	801204a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 801539a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801539e:	3b60      	subs	r3, #96	; 0x60
 80153a0:	2230      	movs	r2, #48	; 0x30
 80153a2:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 80153a6:	f101 0158 	add.w	r1, r1, #88	; 0x58
 80153aa:	6809      	ldr	r1, [r1, #0]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7fc fe57 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 80153b2:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80153b6:	f5a3 61bd 	sub.w	r1, r3, #1512	; 0x5e8
 80153ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80153be:	3b60      	subs	r3, #96	; 0x60
 80153c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80153c4:	6809      	ldr	r1, [r1, #0]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7fc fe4a 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80153cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80153d0:	3b60      	subs	r3, #96	; 0x60
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7fc fe5c 	bl	8012090 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(sig, SEEDBYTES, &state);
 80153d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80153dc:	3b60      	subs	r3, #96	; 0x60
 80153de:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 80153e2:	f5a2 60bd 	sub.w	r0, r2, #1512	; 0x5e8
 80153e6:	461a      	mov	r2, r3
 80153e8:	2120      	movs	r1, #32
 80153ea:	6800      	ldr	r0, [r0, #0]
 80153ec:	f7fc fe74 	bl	80120d8 <pqcrystals_fips202_ref_shake256_squeeze>
  poly_challenge(&cp, sig);
 80153f0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80153f4:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 80153f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80153fc:	3b10      	subs	r3, #16
 80153fe:	6811      	ldr	r1, [r2, #0]
 8015400:	4618      	mov	r0, r3
 8015402:	f7fd fe34 	bl	801306e <pqcrystals_dilithium2aes_r_ref_poly_challenge>
  poly_ntt(&cp);
 8015406:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801540a:	3b10      	subs	r3, #16
 801540c:	4618      	mov	r0, r3
 801540e:	f7fd fb22 	bl	8012a56 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  polyveck_invntt_tomont(&h);


#else
  /* Compute z, reject if it reveals secret */
  polyvec_compute_z_montgomery(&z, &cp, s_rhoprime, y_rhoprime, nonce);
 8015412:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8015416:	3910      	subs	r1, #16
 8015418:	f507 4089 	add.w	r0, r7, #17536	; 0x4480
 801541c:	f100 0070 	add.w	r0, r0, #112	; 0x70
 8015420:	3810      	subs	r0, #16
 8015422:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015426:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 801542a:	881b      	ldrh	r3, [r3, #0]
 801542c:	9300      	str	r3, [sp, #0]
 801542e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015432:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801543c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8015440:	6812      	ldr	r2, [r2, #0]
 8015442:	f7ff f8bf 	bl	80145c4 <polyvec_compute_z_montgomery>

  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 8015446:	f507 4389 	add.w	r3, r7, #17536	; 0x4480
 801544a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 801544e:	3b10      	subs	r3, #16
 8015450:	495c      	ldr	r1, [pc, #368]	; (80155c4 <pqcrystals_dilithium2aes_r_ref_signature+0x44c>)
 8015452:	4618      	mov	r0, r3
 8015454:	f7ff fac1 	bl	80149da <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>
 8015458:	4603      	mov	r3, r0
 801545a:	2b00      	cmp	r3, #0
 801545c:	d000      	beq.n	8015460 <pqcrystals_dilithium2aes_r_ref_signature+0x2e8>
    goto rej;
 801545e:	e753      	b.n	8015308 <pqcrystals_dilithium2aes_r_ref_signature+0x190>

  /* Check that subtracting cs2 does not change high bits of w and low bits
   * do not reveal secret information */
  polyvec_compute_h_montgomery(&h, &cp, s_rhoprime);
 8015460:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8015464:	3910      	subs	r1, #16
 8015466:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801546a:	3b10      	subs	r3, #16
 801546c:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015470:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8015474:	6812      	ldr	r2, [r2, #0]
 8015476:	4618      	mov	r0, r3
 8015478:	f7ff f91e 	bl	80146b8 <polyvec_compute_h_montgomery>
#endif

  polyveck_sub(&w0, &w0, &h);
 801547c:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8015480:	3a10      	subs	r2, #16
 8015482:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 8015486:	f101 0110 	add.w	r1, r1, #16
 801548a:	3910      	subs	r1, #16
 801548c:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8015490:	f103 0310 	add.w	r3, r3, #16
 8015494:	3b10      	subs	r3, #16
 8015496:	4618      	mov	r0, r3
 8015498:	f7ff fb14 	bl	8014ac4 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>
  polyveck_reduce(&w0);
 801549c:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 80154a0:	f103 0310 	add.w	r3, r3, #16
 80154a4:	3b10      	subs	r3, #16
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7ff fab7 	bl	8014a1a <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
 80154ac:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 80154b0:	f103 0310 	add.w	r3, r3, #16
 80154b4:	3b10      	subs	r3, #16
 80154b6:	4944      	ldr	r1, [pc, #272]	; (80155c8 <pqcrystals_dilithium2aes_r_ref_signature+0x450>)
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7ff fb78 	bl	8014bae <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 80154be:	4603      	mov	r3, r0
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d000      	beq.n	80154c6 <pqcrystals_dilithium2aes_r_ref_signature+0x34e>
    goto rej;
 80154c4:	e720      	b.n	8015308 <pqcrystals_dilithium2aes_r_ref_signature+0x190>

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 80154c6:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80154ca:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80154ce:	3a10      	subs	r2, #16
 80154d0:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80154d4:	3910      	subs	r1, #16
 80154d6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80154da:	3b10      	subs	r3, #16
 80154dc:	4618      	mov	r0, r3
 80154de:	f7ff fb46 	bl	8014b6e <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 80154e2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80154e6:	3b10      	subs	r3, #16
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7ff fb27 	bl	8014b3c <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>
  polyveck_reduce(&h);
 80154ee:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80154f2:	3b10      	subs	r3, #16
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7ff fa90 	bl	8014a1a <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  if(polyveck_chknorm(&h, GAMMA2))
 80154fa:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80154fe:	3b10      	subs	r3, #16
 8015500:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 8015504:	4618      	mov	r0, r3
 8015506:	f7ff fb52 	bl	8014bae <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 801550a:	4603      	mov	r3, r0
 801550c:	2b00      	cmp	r3, #0
 801550e:	d000      	beq.n	8015512 <pqcrystals_dilithium2aes_r_ref_signature+0x39a>
    goto rej;
 8015510:	e6fa      	b.n	8015308 <pqcrystals_dilithium2aes_r_ref_signature+0x190>

  polyveck_add(&w0, &w0, &h);
 8015512:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8015516:	3a10      	subs	r2, #16
 8015518:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 801551c:	f101 0110 	add.w	r1, r1, #16
 8015520:	3910      	subs	r1, #16
 8015522:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8015526:	f103 0310 	add.w	r3, r3, #16
 801552a:	3b10      	subs	r3, #16
 801552c:	4618      	mov	r0, r3
 801552e:	f7ff faa6 	bl	8014a7e <pqcrystals_dilithium2aes_r_ref_polyveck_add>
  polyveck_caddq(&w0);
 8015532:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8015536:	f103 0310 	add.w	r3, r3, #16
 801553a:	3b10      	subs	r3, #16
 801553c:	4618      	mov	r0, r3
 801553e:	f7ff fa85 	bl	8014a4c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  n = polyveck_make_hint(&h, &w0, &w1);
 8015542:	f507 5213 	add.w	r2, r7, #9408	; 0x24c0
 8015546:	f102 0230 	add.w	r2, r2, #48	; 0x30
 801554a:	3a10      	subs	r2, #16
 801554c:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 8015550:	f101 0110 	add.w	r1, r1, #16
 8015554:	3910      	subs	r1, #16
 8015556:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801555a:	3b10      	subs	r3, #16
 801555c:	4618      	mov	r0, r3
 801555e:	f7ff fb8c 	bl	8014c7a <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>
 8015562:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015566:	f103 0350 	add.w	r3, r3, #80	; 0x50
 801556a:	6018      	str	r0, [r3, #0]
  if(n > OMEGA)
 801556c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015570:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	2b50      	cmp	r3, #80	; 0x50
 8015578:	d900      	bls.n	801557c <pqcrystals_dilithium2aes_r_ref_signature+0x404>
    goto rej;
 801557a:	e6c5      	b.n	8015308 <pqcrystals_dilithium2aes_r_ref_signature+0x190>

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
 801557c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8015580:	3b10      	subs	r3, #16
 8015582:	f507 4289 	add.w	r2, r7, #17536	; 0x4480
 8015586:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801558a:	3a10      	subs	r2, #16
 801558c:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8015590:	f5a1 61bd 	sub.w	r1, r1, #1512	; 0x5e8
 8015594:	f507 60be 	add.w	r0, r7, #1520	; 0x5f0
 8015598:	f5a0 60bd 	sub.w	r0, r0, #1512	; 0x5e8
 801559c:	6809      	ldr	r1, [r1, #0]
 801559e:	6800      	ldr	r0, [r0, #0]
 80155a0:	f7fd f819 	bl	80125d6 <pqcrystals_dilithium2aes_r_ref_pack_sig>
  *siglen = CRYPTO_BYTES;
 80155a4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80155a8:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	f640 1274 	movw	r2, #2420	; 0x974
 80155b2:	601a      	str	r2, [r3, #0]
  return 0;
 80155b4:	2300      	movs	r3, #0
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	f507 47ab 	add.w	r7, r7, #21888	; 0x5580
 80155bc:	3774      	adds	r7, #116	; 0x74
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd90      	pop	{r4, r7, pc}
 80155c2:	bf00      	nop
 80155c4:	0001ffb2 	.word	0x0001ffb2
 80155c8:	000173b2 	.word	0x000173b2

080155cc <pqcrystals_dilithium2aes_r_ref>:
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
#endif
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b088      	sub	sp, #32
 80155d0:	af02      	add	r7, sp, #8
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
 80155d8:	603b      	str	r3, [r7, #0]
  size_t i;

  for(i = 0; i < mlen; ++i)
 80155da:	2300      	movs	r3, #0
 80155dc:	617b      	str	r3, [r7, #20]
 80155de:	e011      	b.n	8015604 <pqcrystals_dilithium2aes_r_ref+0x38>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 80155e0:	6a3a      	ldr	r2, [r7, #32]
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	1ad3      	subs	r3, r2, r3
 80155e6:	3b01      	subs	r3, #1
 80155e8:	683a      	ldr	r2, [r7, #0]
 80155ea:	441a      	add	r2, r3
 80155ec:	6a39      	ldr	r1, [r7, #32]
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	1acb      	subs	r3, r1, r3
 80155f2:	f603 1373 	addw	r3, r3, #2419	; 0x973
 80155f6:	68b9      	ldr	r1, [r7, #8]
 80155f8:	440b      	add	r3, r1
 80155fa:	7812      	ldrb	r2, [r2, #0]
 80155fc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < mlen; ++i)
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	3301      	adds	r3, #1
 8015602:	617b      	str	r3, [r7, #20]
 8015604:	697a      	ldr	r2, [r7, #20]
 8015606:	6a3b      	ldr	r3, [r7, #32]
 8015608:	429a      	cmp	r2, r3
 801560a:	d3e9      	bcc.n	80155e0 <pqcrystals_dilithium2aes_r_ref+0x14>
#ifdef STM32WB55xx
  crypto_sign_signature(hrng, sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8015612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015614:	9301      	str	r3, [sp, #4]
 8015616:	6a3b      	ldr	r3, [r7, #32]
 8015618:	9300      	str	r3, [sp, #0]
 801561a:	4613      	mov	r3, r2
 801561c:	687a      	ldr	r2, [r7, #4]
 801561e:	68b9      	ldr	r1, [r7, #8]
 8015620:	68f8      	ldr	r0, [r7, #12]
 8015622:	f7ff fda9 	bl	8015178 <pqcrystals_dilithium2aes_r_ref_signature>
#else
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
#endif
  *smlen += mlen;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	6a3b      	ldr	r3, [r7, #32]
 801562c:	441a      	add	r2, r3
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	601a      	str	r2, [r3, #0]
  return 0;
 8015632:	2300      	movs	r3, #0
}
 8015634:	4618      	mov	r0, r3
 8015636:	3718      	adds	r7, #24
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <pqcrystals_dilithium2aes_r_ref_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
 801563c:	b590      	push	{r4, r7, lr}
 801563e:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 8015642:	b087      	sub	sp, #28
 8015644:	af00      	add	r7, sp, #0
 8015646:	f607 0458 	addw	r4, r7, #2136	; 0x858
 801564a:	f6a4 044c 	subw	r4, r4, #2124	; 0x84c
 801564e:	6020      	str	r0, [r4, #0]
 8015650:	f607 0058 	addw	r0, r7, #2136	; 0x858
 8015654:	f5a0 6005 	sub.w	r0, r0, #2128	; 0x850
 8015658:	6001      	str	r1, [r0, #0]
 801565a:	f607 0158 	addw	r1, r7, #2136	; 0x858
 801565e:	f6a1 0154 	subw	r1, r1, #2132	; 0x854
 8015662:	600a      	str	r2, [r1, #0]
 8015664:	f607 0258 	addw	r2, r7, #2136	; 0x858
 8015668:	f6a2 0258 	subw	r2, r2, #2136	; 0x858
 801566c:	6013      	str	r3, [r2, #0]
  uint8_t buf[K*POLYW1_PACKEDBYTES];
  uint8_t mu[CRHBYTES];
  uint8_t c2[SEEDBYTES];
  uint8_t c[SEEDBYTES];
  polyveck w1;
  uint8_t h[N_*K] = {0};
 801566e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8015672:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8015676:	2200      	movs	r2, #0
 8015678:	601a      	str	r2, [r3, #0]
 801567a:	3304      	adds	r3, #4
 801567c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8015680:	2100      	movs	r1, #0
 8015682:	4618      	mov	r0, r3
 8015684:	f000 f9b2 	bl	80159ec <memset>
  keccak_state state;

  if(siglen != CRYPTO_BYTES)
 8015688:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801568c:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	f640 1274 	movw	r2, #2420	; 0x974
 8015696:	4293      	cmp	r3, r2
 8015698:	d001      	beq.n	801569e <pqcrystals_dilithium2aes_r_ref_verify+0x62>
    return 1;
 801569a:	2301      	movs	r3, #1
 801569c:	e0ef      	b.n	801587e <pqcrystals_dilithium2aes_r_ref_verify+0x242>

  //if signature OK - the h part will be unpacked - else - error
  int err_code = verify_sig_z_h_malform(h, sig);
 801569e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80156a2:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 80156a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80156aa:	3b18      	subs	r3, #24
 80156ac:	6811      	ldr	r1, [r2, #0]
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7fd f876 	bl	80127a0 <verify_sig_z_h_malform>
 80156b4:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80156b8:	f103 0310 	add.w	r3, r3, #16
 80156bc:	6018      	str	r0, [r3, #0]
  if(err_code)
 80156be:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80156c2:	f103 0310 	add.w	r3, r3, #16
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d005      	beq.n	80156d8 <pqcrystals_dilithium2aes_r_ref_verify+0x9c>
	  return err_code;
 80156cc:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80156d0:	f103 0310 	add.w	r3, r3, #16
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	e0d2      	b.n	801587e <pqcrystals_dilithium2aes_r_ref_verify+0x242>

  unpack_sig_c(c, sig);
 80156d8:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80156dc:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 80156e0:	f507 52a7 	add.w	r2, r7, #5344	; 0x14e0
 80156e4:	6819      	ldr	r1, [r3, #0]
 80156e6:	4610      	mov	r0, r2
 80156e8:	f7fd f8b0 	bl	801284c <unpack_sig_c>
    return -1;
#endif


  /* Compute CRH(CRH(rho, t1), msg) */
  crh(mu, pk, CRYPTO_PUBLICKEYBYTES);
 80156ec:	f507 50a9 	add.w	r0, r7, #5408	; 0x1520
 80156f0:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80156f4:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80156f8:	f102 0208 	add.w	r2, r2, #8
 80156fc:	6812      	ldr	r2, [r2, #0]
 80156fe:	2130      	movs	r1, #48	; 0x30
 8015700:	f7fc fd02 	bl	8012108 <pqcrystals_fips202_ref_shake256>
  shake256_init(&state);
 8015704:	f107 0318 	add.w	r3, r7, #24
 8015708:	3b08      	subs	r3, #8
 801570a:	4618      	mov	r0, r3
 801570c:	f7fc fc9d 	bl	801204a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 8015710:	f507 51a9 	add.w	r1, r7, #5408	; 0x1520
 8015714:	f107 0318 	add.w	r3, r7, #24
 8015718:	3b08      	subs	r3, #8
 801571a:	2230      	movs	r2, #48	; 0x30
 801571c:	4618      	mov	r0, r3
 801571e:	f7fc fc9f 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 8015722:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8015726:	f6a3 0258 	subw	r2, r3, #2136	; 0x858
 801572a:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801572e:	f6a3 0154 	subw	r1, r3, #2132	; 0x854
 8015732:	f107 0318 	add.w	r3, r7, #24
 8015736:	3b08      	subs	r3, #8
 8015738:	6812      	ldr	r2, [r2, #0]
 801573a:	6809      	ldr	r1, [r1, #0]
 801573c:	4618      	mov	r0, r3
 801573e:	f7fc fc8f 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8015742:	f107 0318 	add.w	r3, r7, #24
 8015746:	3b08      	subs	r3, #8
 8015748:	4618      	mov	r0, r3
 801574a:	f7fc fca1 	bl	8012090 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
 801574e:	f107 0318 	add.w	r3, r7, #24
 8015752:	3b08      	subs	r3, #8
 8015754:	f507 50a9 	add.w	r0, r7, #5408	; 0x1520
 8015758:	461a      	mov	r2, r3
 801575a:	2130      	movs	r1, #48	; 0x30
 801575c:	f7fc fcbc 	bl	80120d8 <pqcrystals_fips202_ref_shake256_squeeze>

#ifdef CONSTRAINED_DEVICE
  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  polyvec_reconstruct_w1_montgomery(&w1, sig, pk);
 8015760:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8015764:	f6a3 014c 	subw	r1, r3, #2124	; 0x84c
 8015768:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801576c:	3b18      	subs	r3, #24
 801576e:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8015772:	f102 0208 	add.w	r2, r2, #8
 8015776:	6812      	ldr	r2, [r2, #0]
 8015778:	6809      	ldr	r1, [r1, #0]
 801577a:	4618      	mov	r0, r3
 801577c:	f7fe fff3 	bl	8014766 <polyvec_reconstruct_w1_montgomery>

  /* Reconstruct w1 */
  polyveck_caddq(&w1);
 8015780:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8015784:	3b18      	subs	r3, #24
 8015786:	4618      	mov	r0, r3
 8015788:	f7ff f960 	bl	8014a4c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_use_hint_r(&w1, &w1, h);
 801578c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015790:	3a18      	subs	r2, #24
 8015792:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8015796:	3918      	subs	r1, #24
 8015798:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801579c:	3b18      	subs	r3, #24
 801579e:	4618      	mov	r0, r3
 80157a0:	f7ff fa94 	bl	8014ccc <polyveck_use_hint_r>
  polyveck_pack_w1(buf, &w1);
 80157a4:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80157a8:	3b18      	subs	r3, #24
 80157aa:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 80157ae:	f102 0210 	add.w	r2, r2, #16
 80157b2:	4619      	mov	r1, r3
 80157b4:	4610      	mov	r0, r2
 80157b6:	f7ff faae 	bl	8014d16 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>
  polyveck_use_hint(&w1, &w1, &h);
  polyveck_pack_w1(buf, &w1);

#endif
  /* Call random oracle and verify challenge */
  shake256_init(&state);
 80157ba:	f107 0318 	add.w	r3, r7, #24
 80157be:	3b08      	subs	r3, #8
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7fc fc42 	bl	801204a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 80157c6:	f507 51a9 	add.w	r1, r7, #5408	; 0x1520
 80157ca:	f107 0318 	add.w	r3, r7, #24
 80157ce:	3b08      	subs	r3, #8
 80157d0:	2230      	movs	r2, #48	; 0x30
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7fc fc44 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
 80157d8:	f507 51aa 	add.w	r1, r7, #5440	; 0x1540
 80157dc:	f101 0110 	add.w	r1, r1, #16
 80157e0:	f107 0318 	add.w	r3, r7, #24
 80157e4:	3b08      	subs	r3, #8
 80157e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7fc fc38 	bl	8012060 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80157f0:	f107 0318 	add.w	r3, r7, #24
 80157f4:	3b08      	subs	r3, #8
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7fc fc4a 	bl	8012090 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(c2, SEEDBYTES, &state);
 80157fc:	f107 0318 	add.w	r3, r7, #24
 8015800:	3b08      	subs	r3, #8
 8015802:	f507 50a8 	add.w	r0, r7, #5376	; 0x1500
 8015806:	461a      	mov	r2, r3
 8015808:	2120      	movs	r1, #32
 801580a:	f7fc fc65 	bl	80120d8 <pqcrystals_fips202_ref_shake256_squeeze>
  for(i = 0; i < SEEDBYTES; ++i)
 801580e:	2300      	movs	r3, #0
 8015810:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8015814:	f102 0214 	add.w	r2, r2, #20
 8015818:	6013      	str	r3, [r2, #0]
 801581a:	e028      	b.n	801586e <pqcrystals_dilithium2aes_r_ref_verify+0x232>
    if(c[i] != c2[i])
 801581c:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8015820:	f103 0318 	add.w	r3, r3, #24
 8015824:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8015828:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 801582c:	f103 0314 	add.w	r3, r3, #20
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	4413      	add	r3, r2
 8015834:	781a      	ldrb	r2, [r3, #0]
 8015836:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 801583a:	f103 0318 	add.w	r3, r3, #24
 801583e:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 8015842:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8015846:	f103 0314 	add.w	r3, r3, #20
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	440b      	add	r3, r1
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	429a      	cmp	r2, r3
 8015852:	d001      	beq.n	8015858 <pqcrystals_dilithium2aes_r_ref_verify+0x21c>
      return 6;
 8015854:	2306      	movs	r3, #6
 8015856:	e012      	b.n	801587e <pqcrystals_dilithium2aes_r_ref_verify+0x242>
  for(i = 0; i < SEEDBYTES; ++i)
 8015858:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 801585c:	f103 0314 	add.w	r3, r3, #20
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	3301      	adds	r3, #1
 8015864:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8015868:	f102 0214 	add.w	r2, r2, #20
 801586c:	6013      	str	r3, [r2, #0]
 801586e:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8015872:	f103 0314 	add.w	r3, r3, #20
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	2b1f      	cmp	r3, #31
 801587a:	d9cf      	bls.n	801581c <pqcrystals_dilithium2aes_r_ref_verify+0x1e0>

  return 0;
 801587c:	2300      	movs	r3, #0
}
 801587e:	4618      	mov	r0, r3
 8015880:	f507 57c2 	add.w	r7, r7, #6208	; 0x1840
 8015884:	371c      	adds	r7, #28
 8015886:	46bd      	mov	sp, r7
 8015888:	bd90      	pop	{r4, r7, pc}

0801588a <pqcrystals_dilithium2aes_r_ref_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
 801588a:	b580      	push	{r7, lr}
 801588c:	b088      	sub	sp, #32
 801588e:	af02      	add	r7, sp, #8
 8015890:	60f8      	str	r0, [r7, #12]
 8015892:	60b9      	str	r1, [r7, #8]
 8015894:	607a      	str	r2, [r7, #4]
 8015896:	603b      	str	r3, [r7, #0]
  size_t i;
  int err_code = -1;
 8015898:	f04f 33ff 	mov.w	r3, #4294967295
 801589c:	613b      	str	r3, [r7, #16]

  if(smlen < CRYPTO_BYTES)
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	f640 1273 	movw	r2, #2419	; 0x973
 80158a4:	4293      	cmp	r3, r2
 80158a6:	d92c      	bls.n	8015902 <pqcrystals_dilithium2aes_r_ref_open+0x78>
    goto badsig;

  *mlen = smlen - CRYPTO_BYTES;
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	f6a3 1274 	subw	r2, r3, #2420	; 0x974
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	601a      	str	r2, [r3, #0]
  err_code = crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f603 1274 	addw	r2, r3, #2420	; 0x974
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	6819      	ldr	r1, [r3, #0]
 80158bc:	6a3b      	ldr	r3, [r7, #32]
 80158be:	9300      	str	r3, [sp, #0]
 80158c0:	460b      	mov	r3, r1
 80158c2:	f640 1174 	movw	r1, #2420	; 0x974
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f7ff feb8 	bl	801563c <pqcrystals_dilithium2aes_r_ref_verify>
 80158cc:	6138      	str	r0, [r7, #16]
  if(err_code)
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d118      	bne.n	8015906 <pqcrystals_dilithium2aes_r_ref_open+0x7c>
    goto badsig;
  else {
    /* All good, copy msg, return 0 */
    for(i = 0; i < *mlen; ++i)
 80158d4:	2300      	movs	r3, #0
 80158d6:	617b      	str	r3, [r7, #20]
 80158d8:	e00c      	b.n	80158f4 <pqcrystals_dilithium2aes_r_ref_open+0x6a>
      m[i] = sm[CRYPTO_BYTES + i];
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	f603 1374 	addw	r3, r3, #2420	; 0x974
 80158e0:	687a      	ldr	r2, [r7, #4]
 80158e2:	441a      	add	r2, r3
 80158e4:	68f9      	ldr	r1, [r7, #12]
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	440b      	add	r3, r1
 80158ea:	7812      	ldrb	r2, [r2, #0]
 80158ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < *mlen; ++i)
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	3301      	adds	r3, #1
 80158f2:	617b      	str	r3, [r7, #20]
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	697a      	ldr	r2, [r7, #20]
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d3ed      	bcc.n	80158da <pqcrystals_dilithium2aes_r_ref_open+0x50>
    return 0;
 80158fe:	2300      	movs	r3, #0
 8015900:	e016      	b.n	8015930 <pqcrystals_dilithium2aes_r_ref_open+0xa6>
    goto badsig;
 8015902:	bf00      	nop
 8015904:	e000      	b.n	8015908 <pqcrystals_dilithium2aes_r_ref_open+0x7e>
    goto badsig;
 8015906:	bf00      	nop
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	f04f 32ff 	mov.w	r2, #4294967295
 801590e:	601a      	str	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 8015910:	2300      	movs	r3, #0
 8015912:	617b      	str	r3, [r7, #20]
 8015914:	e007      	b.n	8015926 <pqcrystals_dilithium2aes_r_ref_open+0x9c>
    m[i] = 0;
 8015916:	68fa      	ldr	r2, [r7, #12]
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	4413      	add	r3, r2
 801591c:	2200      	movs	r2, #0
 801591e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	3301      	adds	r3, #1
 8015924:	617b      	str	r3, [r7, #20]
 8015926:	697a      	ldr	r2, [r7, #20]
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	429a      	cmp	r2, r3
 801592c:	d3f3      	bcc.n	8015916 <pqcrystals_dilithium2aes_r_ref_open+0x8c>

  return err_code;
 801592e:	693b      	ldr	r3, [r7, #16]
}
 8015930:	4618      	mov	r0, r3
 8015932:	3718      	adds	r7, #24
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>:
#include "aes256ctr.h"

void dilithium_aes256ctr_init(aes256ctr_ctx *state,
                              const uint8_t key[32],
                              uint16_t nonce)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b088      	sub	sp, #32
 801593c:	af00      	add	r7, sp, #0
 801593e:	60f8      	str	r0, [r7, #12]
 8015940:	60b9      	str	r1, [r7, #8]
 8015942:	4613      	mov	r3, r2
 8015944:	80fb      	strh	r3, [r7, #6]
  uint8_t expnonce[12] = {0};
 8015946:	2300      	movs	r3, #0
 8015948:	617b      	str	r3, [r7, #20]
 801594a:	f107 0318 	add.w	r3, r7, #24
 801594e:	2200      	movs	r2, #0
 8015950:	601a      	str	r2, [r3, #0]
 8015952:	605a      	str	r2, [r3, #4]
  expnonce[0] = nonce;
 8015954:	88fb      	ldrh	r3, [r7, #6]
 8015956:	b2db      	uxtb	r3, r3
 8015958:	753b      	strb	r3, [r7, #20]
  expnonce[1] = nonce >> 8;
 801595a:	88fb      	ldrh	r3, [r7, #6]
 801595c:	0a1b      	lsrs	r3, r3, #8
 801595e:	b29b      	uxth	r3, r3
 8015960:	b2db      	uxtb	r3, r3
 8015962:	757b      	strb	r3, [r7, #21]
  aes256ctr_init(state, key, expnonce);
 8015964:	f107 0314 	add.w	r3, r7, #20
 8015968:	461a      	mov	r2, r3
 801596a:	68b9      	ldr	r1, [r7, #8]
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f7f8 ff4f 	bl	800e810 <pqcrystals_aes256ctr_ref_init>
}
 8015972:	bf00      	nop
 8015974:	3720      	adds	r7, #32
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
	...

0801597c <__errno>:
 801597c:	4b01      	ldr	r3, [pc, #4]	; (8015984 <__errno+0x8>)
 801597e:	6818      	ldr	r0, [r3, #0]
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop
 8015984:	20000108 	.word	0x20000108

08015988 <__libc_init_array>:
 8015988:	b570      	push	{r4, r5, r6, lr}
 801598a:	4d0d      	ldr	r5, [pc, #52]	; (80159c0 <__libc_init_array+0x38>)
 801598c:	4c0d      	ldr	r4, [pc, #52]	; (80159c4 <__libc_init_array+0x3c>)
 801598e:	1b64      	subs	r4, r4, r5
 8015990:	10a4      	asrs	r4, r4, #2
 8015992:	2600      	movs	r6, #0
 8015994:	42a6      	cmp	r6, r4
 8015996:	d109      	bne.n	80159ac <__libc_init_array+0x24>
 8015998:	4d0b      	ldr	r5, [pc, #44]	; (80159c8 <__libc_init_array+0x40>)
 801599a:	4c0c      	ldr	r4, [pc, #48]	; (80159cc <__libc_init_array+0x44>)
 801599c:	f000 fc8e 	bl	80162bc <_init>
 80159a0:	1b64      	subs	r4, r4, r5
 80159a2:	10a4      	asrs	r4, r4, #2
 80159a4:	2600      	movs	r6, #0
 80159a6:	42a6      	cmp	r6, r4
 80159a8:	d105      	bne.n	80159b6 <__libc_init_array+0x2e>
 80159aa:	bd70      	pop	{r4, r5, r6, pc}
 80159ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80159b0:	4798      	blx	r3
 80159b2:	3601      	adds	r6, #1
 80159b4:	e7ee      	b.n	8015994 <__libc_init_array+0xc>
 80159b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80159ba:	4798      	blx	r3
 80159bc:	3601      	adds	r6, #1
 80159be:	e7f2      	b.n	80159a6 <__libc_init_array+0x1e>
 80159c0:	08016a44 	.word	0x08016a44
 80159c4:	08016a44 	.word	0x08016a44
 80159c8:	08016a44 	.word	0x08016a44
 80159cc:	08016a48 	.word	0x08016a48

080159d0 <memcpy>:
 80159d0:	440a      	add	r2, r1
 80159d2:	4291      	cmp	r1, r2
 80159d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80159d8:	d100      	bne.n	80159dc <memcpy+0xc>
 80159da:	4770      	bx	lr
 80159dc:	b510      	push	{r4, lr}
 80159de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159e6:	4291      	cmp	r1, r2
 80159e8:	d1f9      	bne.n	80159de <memcpy+0xe>
 80159ea:	bd10      	pop	{r4, pc}

080159ec <memset>:
 80159ec:	4402      	add	r2, r0
 80159ee:	4603      	mov	r3, r0
 80159f0:	4293      	cmp	r3, r2
 80159f2:	d100      	bne.n	80159f6 <memset+0xa>
 80159f4:	4770      	bx	lr
 80159f6:	f803 1b01 	strb.w	r1, [r3], #1
 80159fa:	e7f9      	b.n	80159f0 <memset+0x4>

080159fc <siprintf>:
 80159fc:	b40e      	push	{r1, r2, r3}
 80159fe:	b500      	push	{lr}
 8015a00:	b09c      	sub	sp, #112	; 0x70
 8015a02:	ab1d      	add	r3, sp, #116	; 0x74
 8015a04:	9002      	str	r0, [sp, #8]
 8015a06:	9006      	str	r0, [sp, #24]
 8015a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a0c:	4809      	ldr	r0, [pc, #36]	; (8015a34 <siprintf+0x38>)
 8015a0e:	9107      	str	r1, [sp, #28]
 8015a10:	9104      	str	r1, [sp, #16]
 8015a12:	4909      	ldr	r1, [pc, #36]	; (8015a38 <siprintf+0x3c>)
 8015a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a18:	9105      	str	r1, [sp, #20]
 8015a1a:	6800      	ldr	r0, [r0, #0]
 8015a1c:	9301      	str	r3, [sp, #4]
 8015a1e:	a902      	add	r1, sp, #8
 8015a20:	f000 f868 	bl	8015af4 <_svfiprintf_r>
 8015a24:	9b02      	ldr	r3, [sp, #8]
 8015a26:	2200      	movs	r2, #0
 8015a28:	701a      	strb	r2, [r3, #0]
 8015a2a:	b01c      	add	sp, #112	; 0x70
 8015a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a30:	b003      	add	sp, #12
 8015a32:	4770      	bx	lr
 8015a34:	20000108 	.word	0x20000108
 8015a38:	ffff0208 	.word	0xffff0208

08015a3c <__ssputs_r>:
 8015a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a40:	688e      	ldr	r6, [r1, #8]
 8015a42:	429e      	cmp	r6, r3
 8015a44:	4682      	mov	sl, r0
 8015a46:	460c      	mov	r4, r1
 8015a48:	4690      	mov	r8, r2
 8015a4a:	461f      	mov	r7, r3
 8015a4c:	d838      	bhi.n	8015ac0 <__ssputs_r+0x84>
 8015a4e:	898a      	ldrh	r2, [r1, #12]
 8015a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015a54:	d032      	beq.n	8015abc <__ssputs_r+0x80>
 8015a56:	6825      	ldr	r5, [r4, #0]
 8015a58:	6909      	ldr	r1, [r1, #16]
 8015a5a:	eba5 0901 	sub.w	r9, r5, r1
 8015a5e:	6965      	ldr	r5, [r4, #20]
 8015a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015a68:	3301      	adds	r3, #1
 8015a6a:	444b      	add	r3, r9
 8015a6c:	106d      	asrs	r5, r5, #1
 8015a6e:	429d      	cmp	r5, r3
 8015a70:	bf38      	it	cc
 8015a72:	461d      	movcc	r5, r3
 8015a74:	0553      	lsls	r3, r2, #21
 8015a76:	d531      	bpl.n	8015adc <__ssputs_r+0xa0>
 8015a78:	4629      	mov	r1, r5
 8015a7a:	f000 fb55 	bl	8016128 <_malloc_r>
 8015a7e:	4606      	mov	r6, r0
 8015a80:	b950      	cbnz	r0, 8015a98 <__ssputs_r+0x5c>
 8015a82:	230c      	movs	r3, #12
 8015a84:	f8ca 3000 	str.w	r3, [sl]
 8015a88:	89a3      	ldrh	r3, [r4, #12]
 8015a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a8e:	81a3      	strh	r3, [r4, #12]
 8015a90:	f04f 30ff 	mov.w	r0, #4294967295
 8015a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a98:	6921      	ldr	r1, [r4, #16]
 8015a9a:	464a      	mov	r2, r9
 8015a9c:	f7ff ff98 	bl	80159d0 <memcpy>
 8015aa0:	89a3      	ldrh	r3, [r4, #12]
 8015aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015aaa:	81a3      	strh	r3, [r4, #12]
 8015aac:	6126      	str	r6, [r4, #16]
 8015aae:	6165      	str	r5, [r4, #20]
 8015ab0:	444e      	add	r6, r9
 8015ab2:	eba5 0509 	sub.w	r5, r5, r9
 8015ab6:	6026      	str	r6, [r4, #0]
 8015ab8:	60a5      	str	r5, [r4, #8]
 8015aba:	463e      	mov	r6, r7
 8015abc:	42be      	cmp	r6, r7
 8015abe:	d900      	bls.n	8015ac2 <__ssputs_r+0x86>
 8015ac0:	463e      	mov	r6, r7
 8015ac2:	6820      	ldr	r0, [r4, #0]
 8015ac4:	4632      	mov	r2, r6
 8015ac6:	4641      	mov	r1, r8
 8015ac8:	f000 faa8 	bl	801601c <memmove>
 8015acc:	68a3      	ldr	r3, [r4, #8]
 8015ace:	1b9b      	subs	r3, r3, r6
 8015ad0:	60a3      	str	r3, [r4, #8]
 8015ad2:	6823      	ldr	r3, [r4, #0]
 8015ad4:	4433      	add	r3, r6
 8015ad6:	6023      	str	r3, [r4, #0]
 8015ad8:	2000      	movs	r0, #0
 8015ada:	e7db      	b.n	8015a94 <__ssputs_r+0x58>
 8015adc:	462a      	mov	r2, r5
 8015ade:	f000 fb97 	bl	8016210 <_realloc_r>
 8015ae2:	4606      	mov	r6, r0
 8015ae4:	2800      	cmp	r0, #0
 8015ae6:	d1e1      	bne.n	8015aac <__ssputs_r+0x70>
 8015ae8:	6921      	ldr	r1, [r4, #16]
 8015aea:	4650      	mov	r0, sl
 8015aec:	f000 fab0 	bl	8016050 <_free_r>
 8015af0:	e7c7      	b.n	8015a82 <__ssputs_r+0x46>
	...

08015af4 <_svfiprintf_r>:
 8015af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af8:	4698      	mov	r8, r3
 8015afa:	898b      	ldrh	r3, [r1, #12]
 8015afc:	061b      	lsls	r3, r3, #24
 8015afe:	b09d      	sub	sp, #116	; 0x74
 8015b00:	4607      	mov	r7, r0
 8015b02:	460d      	mov	r5, r1
 8015b04:	4614      	mov	r4, r2
 8015b06:	d50e      	bpl.n	8015b26 <_svfiprintf_r+0x32>
 8015b08:	690b      	ldr	r3, [r1, #16]
 8015b0a:	b963      	cbnz	r3, 8015b26 <_svfiprintf_r+0x32>
 8015b0c:	2140      	movs	r1, #64	; 0x40
 8015b0e:	f000 fb0b 	bl	8016128 <_malloc_r>
 8015b12:	6028      	str	r0, [r5, #0]
 8015b14:	6128      	str	r0, [r5, #16]
 8015b16:	b920      	cbnz	r0, 8015b22 <_svfiprintf_r+0x2e>
 8015b18:	230c      	movs	r3, #12
 8015b1a:	603b      	str	r3, [r7, #0]
 8015b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b20:	e0d1      	b.n	8015cc6 <_svfiprintf_r+0x1d2>
 8015b22:	2340      	movs	r3, #64	; 0x40
 8015b24:	616b      	str	r3, [r5, #20]
 8015b26:	2300      	movs	r3, #0
 8015b28:	9309      	str	r3, [sp, #36]	; 0x24
 8015b2a:	2320      	movs	r3, #32
 8015b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b34:	2330      	movs	r3, #48	; 0x30
 8015b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015ce0 <_svfiprintf_r+0x1ec>
 8015b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b3e:	f04f 0901 	mov.w	r9, #1
 8015b42:	4623      	mov	r3, r4
 8015b44:	469a      	mov	sl, r3
 8015b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b4a:	b10a      	cbz	r2, 8015b50 <_svfiprintf_r+0x5c>
 8015b4c:	2a25      	cmp	r2, #37	; 0x25
 8015b4e:	d1f9      	bne.n	8015b44 <_svfiprintf_r+0x50>
 8015b50:	ebba 0b04 	subs.w	fp, sl, r4
 8015b54:	d00b      	beq.n	8015b6e <_svfiprintf_r+0x7a>
 8015b56:	465b      	mov	r3, fp
 8015b58:	4622      	mov	r2, r4
 8015b5a:	4629      	mov	r1, r5
 8015b5c:	4638      	mov	r0, r7
 8015b5e:	f7ff ff6d 	bl	8015a3c <__ssputs_r>
 8015b62:	3001      	adds	r0, #1
 8015b64:	f000 80aa 	beq.w	8015cbc <_svfiprintf_r+0x1c8>
 8015b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b6a:	445a      	add	r2, fp
 8015b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8015b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	f000 80a2 	beq.w	8015cbc <_svfiprintf_r+0x1c8>
 8015b78:	2300      	movs	r3, #0
 8015b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b82:	f10a 0a01 	add.w	sl, sl, #1
 8015b86:	9304      	str	r3, [sp, #16]
 8015b88:	9307      	str	r3, [sp, #28]
 8015b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8015b90:	4654      	mov	r4, sl
 8015b92:	2205      	movs	r2, #5
 8015b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b98:	4851      	ldr	r0, [pc, #324]	; (8015ce0 <_svfiprintf_r+0x1ec>)
 8015b9a:	f7ea faf1 	bl	8000180 <memchr>
 8015b9e:	9a04      	ldr	r2, [sp, #16]
 8015ba0:	b9d8      	cbnz	r0, 8015bda <_svfiprintf_r+0xe6>
 8015ba2:	06d0      	lsls	r0, r2, #27
 8015ba4:	bf44      	itt	mi
 8015ba6:	2320      	movmi	r3, #32
 8015ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bac:	0711      	lsls	r1, r2, #28
 8015bae:	bf44      	itt	mi
 8015bb0:	232b      	movmi	r3, #43	; 0x2b
 8015bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8015bba:	2b2a      	cmp	r3, #42	; 0x2a
 8015bbc:	d015      	beq.n	8015bea <_svfiprintf_r+0xf6>
 8015bbe:	9a07      	ldr	r2, [sp, #28]
 8015bc0:	4654      	mov	r4, sl
 8015bc2:	2000      	movs	r0, #0
 8015bc4:	f04f 0c0a 	mov.w	ip, #10
 8015bc8:	4621      	mov	r1, r4
 8015bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bce:	3b30      	subs	r3, #48	; 0x30
 8015bd0:	2b09      	cmp	r3, #9
 8015bd2:	d94e      	bls.n	8015c72 <_svfiprintf_r+0x17e>
 8015bd4:	b1b0      	cbz	r0, 8015c04 <_svfiprintf_r+0x110>
 8015bd6:	9207      	str	r2, [sp, #28]
 8015bd8:	e014      	b.n	8015c04 <_svfiprintf_r+0x110>
 8015bda:	eba0 0308 	sub.w	r3, r0, r8
 8015bde:	fa09 f303 	lsl.w	r3, r9, r3
 8015be2:	4313      	orrs	r3, r2
 8015be4:	9304      	str	r3, [sp, #16]
 8015be6:	46a2      	mov	sl, r4
 8015be8:	e7d2      	b.n	8015b90 <_svfiprintf_r+0x9c>
 8015bea:	9b03      	ldr	r3, [sp, #12]
 8015bec:	1d19      	adds	r1, r3, #4
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	9103      	str	r1, [sp, #12]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	bfbb      	ittet	lt
 8015bf6:	425b      	neglt	r3, r3
 8015bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8015bfc:	9307      	strge	r3, [sp, #28]
 8015bfe:	9307      	strlt	r3, [sp, #28]
 8015c00:	bfb8      	it	lt
 8015c02:	9204      	strlt	r2, [sp, #16]
 8015c04:	7823      	ldrb	r3, [r4, #0]
 8015c06:	2b2e      	cmp	r3, #46	; 0x2e
 8015c08:	d10c      	bne.n	8015c24 <_svfiprintf_r+0x130>
 8015c0a:	7863      	ldrb	r3, [r4, #1]
 8015c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8015c0e:	d135      	bne.n	8015c7c <_svfiprintf_r+0x188>
 8015c10:	9b03      	ldr	r3, [sp, #12]
 8015c12:	1d1a      	adds	r2, r3, #4
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	9203      	str	r2, [sp, #12]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	bfb8      	it	lt
 8015c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c20:	3402      	adds	r4, #2
 8015c22:	9305      	str	r3, [sp, #20]
 8015c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015cf0 <_svfiprintf_r+0x1fc>
 8015c28:	7821      	ldrb	r1, [r4, #0]
 8015c2a:	2203      	movs	r2, #3
 8015c2c:	4650      	mov	r0, sl
 8015c2e:	f7ea faa7 	bl	8000180 <memchr>
 8015c32:	b140      	cbz	r0, 8015c46 <_svfiprintf_r+0x152>
 8015c34:	2340      	movs	r3, #64	; 0x40
 8015c36:	eba0 000a 	sub.w	r0, r0, sl
 8015c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8015c3e:	9b04      	ldr	r3, [sp, #16]
 8015c40:	4303      	orrs	r3, r0
 8015c42:	3401      	adds	r4, #1
 8015c44:	9304      	str	r3, [sp, #16]
 8015c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c4a:	4826      	ldr	r0, [pc, #152]	; (8015ce4 <_svfiprintf_r+0x1f0>)
 8015c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c50:	2206      	movs	r2, #6
 8015c52:	f7ea fa95 	bl	8000180 <memchr>
 8015c56:	2800      	cmp	r0, #0
 8015c58:	d038      	beq.n	8015ccc <_svfiprintf_r+0x1d8>
 8015c5a:	4b23      	ldr	r3, [pc, #140]	; (8015ce8 <_svfiprintf_r+0x1f4>)
 8015c5c:	bb1b      	cbnz	r3, 8015ca6 <_svfiprintf_r+0x1b2>
 8015c5e:	9b03      	ldr	r3, [sp, #12]
 8015c60:	3307      	adds	r3, #7
 8015c62:	f023 0307 	bic.w	r3, r3, #7
 8015c66:	3308      	adds	r3, #8
 8015c68:	9303      	str	r3, [sp, #12]
 8015c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6c:	4433      	add	r3, r6
 8015c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8015c70:	e767      	b.n	8015b42 <_svfiprintf_r+0x4e>
 8015c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c76:	460c      	mov	r4, r1
 8015c78:	2001      	movs	r0, #1
 8015c7a:	e7a5      	b.n	8015bc8 <_svfiprintf_r+0xd4>
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	3401      	adds	r4, #1
 8015c80:	9305      	str	r3, [sp, #20]
 8015c82:	4619      	mov	r1, r3
 8015c84:	f04f 0c0a 	mov.w	ip, #10
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c8e:	3a30      	subs	r2, #48	; 0x30
 8015c90:	2a09      	cmp	r2, #9
 8015c92:	d903      	bls.n	8015c9c <_svfiprintf_r+0x1a8>
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d0c5      	beq.n	8015c24 <_svfiprintf_r+0x130>
 8015c98:	9105      	str	r1, [sp, #20]
 8015c9a:	e7c3      	b.n	8015c24 <_svfiprintf_r+0x130>
 8015c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ca0:	4604      	mov	r4, r0
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	e7f0      	b.n	8015c88 <_svfiprintf_r+0x194>
 8015ca6:	ab03      	add	r3, sp, #12
 8015ca8:	9300      	str	r3, [sp, #0]
 8015caa:	462a      	mov	r2, r5
 8015cac:	4b0f      	ldr	r3, [pc, #60]	; (8015cec <_svfiprintf_r+0x1f8>)
 8015cae:	a904      	add	r1, sp, #16
 8015cb0:	4638      	mov	r0, r7
 8015cb2:	f3af 8000 	nop.w
 8015cb6:	1c42      	adds	r2, r0, #1
 8015cb8:	4606      	mov	r6, r0
 8015cba:	d1d6      	bne.n	8015c6a <_svfiprintf_r+0x176>
 8015cbc:	89ab      	ldrh	r3, [r5, #12]
 8015cbe:	065b      	lsls	r3, r3, #25
 8015cc0:	f53f af2c 	bmi.w	8015b1c <_svfiprintf_r+0x28>
 8015cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cc6:	b01d      	add	sp, #116	; 0x74
 8015cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ccc:	ab03      	add	r3, sp, #12
 8015cce:	9300      	str	r3, [sp, #0]
 8015cd0:	462a      	mov	r2, r5
 8015cd2:	4b06      	ldr	r3, [pc, #24]	; (8015cec <_svfiprintf_r+0x1f8>)
 8015cd4:	a904      	add	r1, sp, #16
 8015cd6:	4638      	mov	r0, r7
 8015cd8:	f000 f87a 	bl	8015dd0 <_printf_i>
 8015cdc:	e7eb      	b.n	8015cb6 <_svfiprintf_r+0x1c2>
 8015cde:	bf00      	nop
 8015ce0:	08016a08 	.word	0x08016a08
 8015ce4:	08016a12 	.word	0x08016a12
 8015ce8:	00000000 	.word	0x00000000
 8015cec:	08015a3d 	.word	0x08015a3d
 8015cf0:	08016a0e 	.word	0x08016a0e

08015cf4 <_printf_common>:
 8015cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cf8:	4616      	mov	r6, r2
 8015cfa:	4699      	mov	r9, r3
 8015cfc:	688a      	ldr	r2, [r1, #8]
 8015cfe:	690b      	ldr	r3, [r1, #16]
 8015d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015d04:	4293      	cmp	r3, r2
 8015d06:	bfb8      	it	lt
 8015d08:	4613      	movlt	r3, r2
 8015d0a:	6033      	str	r3, [r6, #0]
 8015d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015d10:	4607      	mov	r7, r0
 8015d12:	460c      	mov	r4, r1
 8015d14:	b10a      	cbz	r2, 8015d1a <_printf_common+0x26>
 8015d16:	3301      	adds	r3, #1
 8015d18:	6033      	str	r3, [r6, #0]
 8015d1a:	6823      	ldr	r3, [r4, #0]
 8015d1c:	0699      	lsls	r1, r3, #26
 8015d1e:	bf42      	ittt	mi
 8015d20:	6833      	ldrmi	r3, [r6, #0]
 8015d22:	3302      	addmi	r3, #2
 8015d24:	6033      	strmi	r3, [r6, #0]
 8015d26:	6825      	ldr	r5, [r4, #0]
 8015d28:	f015 0506 	ands.w	r5, r5, #6
 8015d2c:	d106      	bne.n	8015d3c <_printf_common+0x48>
 8015d2e:	f104 0a19 	add.w	sl, r4, #25
 8015d32:	68e3      	ldr	r3, [r4, #12]
 8015d34:	6832      	ldr	r2, [r6, #0]
 8015d36:	1a9b      	subs	r3, r3, r2
 8015d38:	42ab      	cmp	r3, r5
 8015d3a:	dc26      	bgt.n	8015d8a <_printf_common+0x96>
 8015d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015d40:	1e13      	subs	r3, r2, #0
 8015d42:	6822      	ldr	r2, [r4, #0]
 8015d44:	bf18      	it	ne
 8015d46:	2301      	movne	r3, #1
 8015d48:	0692      	lsls	r2, r2, #26
 8015d4a:	d42b      	bmi.n	8015da4 <_printf_common+0xb0>
 8015d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d50:	4649      	mov	r1, r9
 8015d52:	4638      	mov	r0, r7
 8015d54:	47c0      	blx	r8
 8015d56:	3001      	adds	r0, #1
 8015d58:	d01e      	beq.n	8015d98 <_printf_common+0xa4>
 8015d5a:	6823      	ldr	r3, [r4, #0]
 8015d5c:	68e5      	ldr	r5, [r4, #12]
 8015d5e:	6832      	ldr	r2, [r6, #0]
 8015d60:	f003 0306 	and.w	r3, r3, #6
 8015d64:	2b04      	cmp	r3, #4
 8015d66:	bf08      	it	eq
 8015d68:	1aad      	subeq	r5, r5, r2
 8015d6a:	68a3      	ldr	r3, [r4, #8]
 8015d6c:	6922      	ldr	r2, [r4, #16]
 8015d6e:	bf0c      	ite	eq
 8015d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d74:	2500      	movne	r5, #0
 8015d76:	4293      	cmp	r3, r2
 8015d78:	bfc4      	itt	gt
 8015d7a:	1a9b      	subgt	r3, r3, r2
 8015d7c:	18ed      	addgt	r5, r5, r3
 8015d7e:	2600      	movs	r6, #0
 8015d80:	341a      	adds	r4, #26
 8015d82:	42b5      	cmp	r5, r6
 8015d84:	d11a      	bne.n	8015dbc <_printf_common+0xc8>
 8015d86:	2000      	movs	r0, #0
 8015d88:	e008      	b.n	8015d9c <_printf_common+0xa8>
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	4652      	mov	r2, sl
 8015d8e:	4649      	mov	r1, r9
 8015d90:	4638      	mov	r0, r7
 8015d92:	47c0      	blx	r8
 8015d94:	3001      	adds	r0, #1
 8015d96:	d103      	bne.n	8015da0 <_printf_common+0xac>
 8015d98:	f04f 30ff 	mov.w	r0, #4294967295
 8015d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015da0:	3501      	adds	r5, #1
 8015da2:	e7c6      	b.n	8015d32 <_printf_common+0x3e>
 8015da4:	18e1      	adds	r1, r4, r3
 8015da6:	1c5a      	adds	r2, r3, #1
 8015da8:	2030      	movs	r0, #48	; 0x30
 8015daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015dae:	4422      	add	r2, r4
 8015db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015db8:	3302      	adds	r3, #2
 8015dba:	e7c7      	b.n	8015d4c <_printf_common+0x58>
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	4622      	mov	r2, r4
 8015dc0:	4649      	mov	r1, r9
 8015dc2:	4638      	mov	r0, r7
 8015dc4:	47c0      	blx	r8
 8015dc6:	3001      	adds	r0, #1
 8015dc8:	d0e6      	beq.n	8015d98 <_printf_common+0xa4>
 8015dca:	3601      	adds	r6, #1
 8015dcc:	e7d9      	b.n	8015d82 <_printf_common+0x8e>
	...

08015dd0 <_printf_i>:
 8015dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd4:	7e0f      	ldrb	r7, [r1, #24]
 8015dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015dd8:	2f78      	cmp	r7, #120	; 0x78
 8015dda:	4691      	mov	r9, r2
 8015ddc:	4680      	mov	r8, r0
 8015dde:	460c      	mov	r4, r1
 8015de0:	469a      	mov	sl, r3
 8015de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015de6:	d807      	bhi.n	8015df8 <_printf_i+0x28>
 8015de8:	2f62      	cmp	r7, #98	; 0x62
 8015dea:	d80a      	bhi.n	8015e02 <_printf_i+0x32>
 8015dec:	2f00      	cmp	r7, #0
 8015dee:	f000 80d8 	beq.w	8015fa2 <_printf_i+0x1d2>
 8015df2:	2f58      	cmp	r7, #88	; 0x58
 8015df4:	f000 80a3 	beq.w	8015f3e <_printf_i+0x16e>
 8015df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015e00:	e03a      	b.n	8015e78 <_printf_i+0xa8>
 8015e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015e06:	2b15      	cmp	r3, #21
 8015e08:	d8f6      	bhi.n	8015df8 <_printf_i+0x28>
 8015e0a:	a101      	add	r1, pc, #4	; (adr r1, 8015e10 <_printf_i+0x40>)
 8015e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e10:	08015e69 	.word	0x08015e69
 8015e14:	08015e7d 	.word	0x08015e7d
 8015e18:	08015df9 	.word	0x08015df9
 8015e1c:	08015df9 	.word	0x08015df9
 8015e20:	08015df9 	.word	0x08015df9
 8015e24:	08015df9 	.word	0x08015df9
 8015e28:	08015e7d 	.word	0x08015e7d
 8015e2c:	08015df9 	.word	0x08015df9
 8015e30:	08015df9 	.word	0x08015df9
 8015e34:	08015df9 	.word	0x08015df9
 8015e38:	08015df9 	.word	0x08015df9
 8015e3c:	08015f89 	.word	0x08015f89
 8015e40:	08015ead 	.word	0x08015ead
 8015e44:	08015f6b 	.word	0x08015f6b
 8015e48:	08015df9 	.word	0x08015df9
 8015e4c:	08015df9 	.word	0x08015df9
 8015e50:	08015fab 	.word	0x08015fab
 8015e54:	08015df9 	.word	0x08015df9
 8015e58:	08015ead 	.word	0x08015ead
 8015e5c:	08015df9 	.word	0x08015df9
 8015e60:	08015df9 	.word	0x08015df9
 8015e64:	08015f73 	.word	0x08015f73
 8015e68:	682b      	ldr	r3, [r5, #0]
 8015e6a:	1d1a      	adds	r2, r3, #4
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	602a      	str	r2, [r5, #0]
 8015e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e0a3      	b.n	8015fc4 <_printf_i+0x1f4>
 8015e7c:	6820      	ldr	r0, [r4, #0]
 8015e7e:	6829      	ldr	r1, [r5, #0]
 8015e80:	0606      	lsls	r6, r0, #24
 8015e82:	f101 0304 	add.w	r3, r1, #4
 8015e86:	d50a      	bpl.n	8015e9e <_printf_i+0xce>
 8015e88:	680e      	ldr	r6, [r1, #0]
 8015e8a:	602b      	str	r3, [r5, #0]
 8015e8c:	2e00      	cmp	r6, #0
 8015e8e:	da03      	bge.n	8015e98 <_printf_i+0xc8>
 8015e90:	232d      	movs	r3, #45	; 0x2d
 8015e92:	4276      	negs	r6, r6
 8015e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e98:	485e      	ldr	r0, [pc, #376]	; (8016014 <_printf_i+0x244>)
 8015e9a:	230a      	movs	r3, #10
 8015e9c:	e019      	b.n	8015ed2 <_printf_i+0x102>
 8015e9e:	680e      	ldr	r6, [r1, #0]
 8015ea0:	602b      	str	r3, [r5, #0]
 8015ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015ea6:	bf18      	it	ne
 8015ea8:	b236      	sxthne	r6, r6
 8015eaa:	e7ef      	b.n	8015e8c <_printf_i+0xbc>
 8015eac:	682b      	ldr	r3, [r5, #0]
 8015eae:	6820      	ldr	r0, [r4, #0]
 8015eb0:	1d19      	adds	r1, r3, #4
 8015eb2:	6029      	str	r1, [r5, #0]
 8015eb4:	0601      	lsls	r1, r0, #24
 8015eb6:	d501      	bpl.n	8015ebc <_printf_i+0xec>
 8015eb8:	681e      	ldr	r6, [r3, #0]
 8015eba:	e002      	b.n	8015ec2 <_printf_i+0xf2>
 8015ebc:	0646      	lsls	r6, r0, #25
 8015ebe:	d5fb      	bpl.n	8015eb8 <_printf_i+0xe8>
 8015ec0:	881e      	ldrh	r6, [r3, #0]
 8015ec2:	4854      	ldr	r0, [pc, #336]	; (8016014 <_printf_i+0x244>)
 8015ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8015ec6:	bf0c      	ite	eq
 8015ec8:	2308      	moveq	r3, #8
 8015eca:	230a      	movne	r3, #10
 8015ecc:	2100      	movs	r1, #0
 8015ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015ed2:	6865      	ldr	r5, [r4, #4]
 8015ed4:	60a5      	str	r5, [r4, #8]
 8015ed6:	2d00      	cmp	r5, #0
 8015ed8:	bfa2      	ittt	ge
 8015eda:	6821      	ldrge	r1, [r4, #0]
 8015edc:	f021 0104 	bicge.w	r1, r1, #4
 8015ee0:	6021      	strge	r1, [r4, #0]
 8015ee2:	b90e      	cbnz	r6, 8015ee8 <_printf_i+0x118>
 8015ee4:	2d00      	cmp	r5, #0
 8015ee6:	d04d      	beq.n	8015f84 <_printf_i+0x1b4>
 8015ee8:	4615      	mov	r5, r2
 8015eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8015eee:	fb03 6711 	mls	r7, r3, r1, r6
 8015ef2:	5dc7      	ldrb	r7, [r0, r7]
 8015ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015ef8:	4637      	mov	r7, r6
 8015efa:	42bb      	cmp	r3, r7
 8015efc:	460e      	mov	r6, r1
 8015efe:	d9f4      	bls.n	8015eea <_printf_i+0x11a>
 8015f00:	2b08      	cmp	r3, #8
 8015f02:	d10b      	bne.n	8015f1c <_printf_i+0x14c>
 8015f04:	6823      	ldr	r3, [r4, #0]
 8015f06:	07de      	lsls	r6, r3, #31
 8015f08:	d508      	bpl.n	8015f1c <_printf_i+0x14c>
 8015f0a:	6923      	ldr	r3, [r4, #16]
 8015f0c:	6861      	ldr	r1, [r4, #4]
 8015f0e:	4299      	cmp	r1, r3
 8015f10:	bfde      	ittt	le
 8015f12:	2330      	movle	r3, #48	; 0x30
 8015f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f1c:	1b52      	subs	r2, r2, r5
 8015f1e:	6122      	str	r2, [r4, #16]
 8015f20:	f8cd a000 	str.w	sl, [sp]
 8015f24:	464b      	mov	r3, r9
 8015f26:	aa03      	add	r2, sp, #12
 8015f28:	4621      	mov	r1, r4
 8015f2a:	4640      	mov	r0, r8
 8015f2c:	f7ff fee2 	bl	8015cf4 <_printf_common>
 8015f30:	3001      	adds	r0, #1
 8015f32:	d14c      	bne.n	8015fce <_printf_i+0x1fe>
 8015f34:	f04f 30ff 	mov.w	r0, #4294967295
 8015f38:	b004      	add	sp, #16
 8015f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f3e:	4835      	ldr	r0, [pc, #212]	; (8016014 <_printf_i+0x244>)
 8015f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015f44:	6829      	ldr	r1, [r5, #0]
 8015f46:	6823      	ldr	r3, [r4, #0]
 8015f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8015f4c:	6029      	str	r1, [r5, #0]
 8015f4e:	061d      	lsls	r5, r3, #24
 8015f50:	d514      	bpl.n	8015f7c <_printf_i+0x1ac>
 8015f52:	07df      	lsls	r7, r3, #31
 8015f54:	bf44      	itt	mi
 8015f56:	f043 0320 	orrmi.w	r3, r3, #32
 8015f5a:	6023      	strmi	r3, [r4, #0]
 8015f5c:	b91e      	cbnz	r6, 8015f66 <_printf_i+0x196>
 8015f5e:	6823      	ldr	r3, [r4, #0]
 8015f60:	f023 0320 	bic.w	r3, r3, #32
 8015f64:	6023      	str	r3, [r4, #0]
 8015f66:	2310      	movs	r3, #16
 8015f68:	e7b0      	b.n	8015ecc <_printf_i+0xfc>
 8015f6a:	6823      	ldr	r3, [r4, #0]
 8015f6c:	f043 0320 	orr.w	r3, r3, #32
 8015f70:	6023      	str	r3, [r4, #0]
 8015f72:	2378      	movs	r3, #120	; 0x78
 8015f74:	4828      	ldr	r0, [pc, #160]	; (8016018 <_printf_i+0x248>)
 8015f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f7a:	e7e3      	b.n	8015f44 <_printf_i+0x174>
 8015f7c:	0659      	lsls	r1, r3, #25
 8015f7e:	bf48      	it	mi
 8015f80:	b2b6      	uxthmi	r6, r6
 8015f82:	e7e6      	b.n	8015f52 <_printf_i+0x182>
 8015f84:	4615      	mov	r5, r2
 8015f86:	e7bb      	b.n	8015f00 <_printf_i+0x130>
 8015f88:	682b      	ldr	r3, [r5, #0]
 8015f8a:	6826      	ldr	r6, [r4, #0]
 8015f8c:	6961      	ldr	r1, [r4, #20]
 8015f8e:	1d18      	adds	r0, r3, #4
 8015f90:	6028      	str	r0, [r5, #0]
 8015f92:	0635      	lsls	r5, r6, #24
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	d501      	bpl.n	8015f9c <_printf_i+0x1cc>
 8015f98:	6019      	str	r1, [r3, #0]
 8015f9a:	e002      	b.n	8015fa2 <_printf_i+0x1d2>
 8015f9c:	0670      	lsls	r0, r6, #25
 8015f9e:	d5fb      	bpl.n	8015f98 <_printf_i+0x1c8>
 8015fa0:	8019      	strh	r1, [r3, #0]
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	6123      	str	r3, [r4, #16]
 8015fa6:	4615      	mov	r5, r2
 8015fa8:	e7ba      	b.n	8015f20 <_printf_i+0x150>
 8015faa:	682b      	ldr	r3, [r5, #0]
 8015fac:	1d1a      	adds	r2, r3, #4
 8015fae:	602a      	str	r2, [r5, #0]
 8015fb0:	681d      	ldr	r5, [r3, #0]
 8015fb2:	6862      	ldr	r2, [r4, #4]
 8015fb4:	2100      	movs	r1, #0
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	f7ea f8e2 	bl	8000180 <memchr>
 8015fbc:	b108      	cbz	r0, 8015fc2 <_printf_i+0x1f2>
 8015fbe:	1b40      	subs	r0, r0, r5
 8015fc0:	6060      	str	r0, [r4, #4]
 8015fc2:	6863      	ldr	r3, [r4, #4]
 8015fc4:	6123      	str	r3, [r4, #16]
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fcc:	e7a8      	b.n	8015f20 <_printf_i+0x150>
 8015fce:	6923      	ldr	r3, [r4, #16]
 8015fd0:	462a      	mov	r2, r5
 8015fd2:	4649      	mov	r1, r9
 8015fd4:	4640      	mov	r0, r8
 8015fd6:	47d0      	blx	sl
 8015fd8:	3001      	adds	r0, #1
 8015fda:	d0ab      	beq.n	8015f34 <_printf_i+0x164>
 8015fdc:	6823      	ldr	r3, [r4, #0]
 8015fde:	079b      	lsls	r3, r3, #30
 8015fe0:	d413      	bmi.n	801600a <_printf_i+0x23a>
 8015fe2:	68e0      	ldr	r0, [r4, #12]
 8015fe4:	9b03      	ldr	r3, [sp, #12]
 8015fe6:	4298      	cmp	r0, r3
 8015fe8:	bfb8      	it	lt
 8015fea:	4618      	movlt	r0, r3
 8015fec:	e7a4      	b.n	8015f38 <_printf_i+0x168>
 8015fee:	2301      	movs	r3, #1
 8015ff0:	4632      	mov	r2, r6
 8015ff2:	4649      	mov	r1, r9
 8015ff4:	4640      	mov	r0, r8
 8015ff6:	47d0      	blx	sl
 8015ff8:	3001      	adds	r0, #1
 8015ffa:	d09b      	beq.n	8015f34 <_printf_i+0x164>
 8015ffc:	3501      	adds	r5, #1
 8015ffe:	68e3      	ldr	r3, [r4, #12]
 8016000:	9903      	ldr	r1, [sp, #12]
 8016002:	1a5b      	subs	r3, r3, r1
 8016004:	42ab      	cmp	r3, r5
 8016006:	dcf2      	bgt.n	8015fee <_printf_i+0x21e>
 8016008:	e7eb      	b.n	8015fe2 <_printf_i+0x212>
 801600a:	2500      	movs	r5, #0
 801600c:	f104 0619 	add.w	r6, r4, #25
 8016010:	e7f5      	b.n	8015ffe <_printf_i+0x22e>
 8016012:	bf00      	nop
 8016014:	08016a19 	.word	0x08016a19
 8016018:	08016a2a 	.word	0x08016a2a

0801601c <memmove>:
 801601c:	4288      	cmp	r0, r1
 801601e:	b510      	push	{r4, lr}
 8016020:	eb01 0402 	add.w	r4, r1, r2
 8016024:	d902      	bls.n	801602c <memmove+0x10>
 8016026:	4284      	cmp	r4, r0
 8016028:	4623      	mov	r3, r4
 801602a:	d807      	bhi.n	801603c <memmove+0x20>
 801602c:	1e43      	subs	r3, r0, #1
 801602e:	42a1      	cmp	r1, r4
 8016030:	d008      	beq.n	8016044 <memmove+0x28>
 8016032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016036:	f803 2f01 	strb.w	r2, [r3, #1]!
 801603a:	e7f8      	b.n	801602e <memmove+0x12>
 801603c:	4402      	add	r2, r0
 801603e:	4601      	mov	r1, r0
 8016040:	428a      	cmp	r2, r1
 8016042:	d100      	bne.n	8016046 <memmove+0x2a>
 8016044:	bd10      	pop	{r4, pc}
 8016046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801604a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801604e:	e7f7      	b.n	8016040 <memmove+0x24>

08016050 <_free_r>:
 8016050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016052:	2900      	cmp	r1, #0
 8016054:	d044      	beq.n	80160e0 <_free_r+0x90>
 8016056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801605a:	9001      	str	r0, [sp, #4]
 801605c:	2b00      	cmp	r3, #0
 801605e:	f1a1 0404 	sub.w	r4, r1, #4
 8016062:	bfb8      	it	lt
 8016064:	18e4      	addlt	r4, r4, r3
 8016066:	f000 f913 	bl	8016290 <__malloc_lock>
 801606a:	4a1e      	ldr	r2, [pc, #120]	; (80160e4 <_free_r+0x94>)
 801606c:	9801      	ldr	r0, [sp, #4]
 801606e:	6813      	ldr	r3, [r2, #0]
 8016070:	b933      	cbnz	r3, 8016080 <_free_r+0x30>
 8016072:	6063      	str	r3, [r4, #4]
 8016074:	6014      	str	r4, [r2, #0]
 8016076:	b003      	add	sp, #12
 8016078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801607c:	f000 b90e 	b.w	801629c <__malloc_unlock>
 8016080:	42a3      	cmp	r3, r4
 8016082:	d908      	bls.n	8016096 <_free_r+0x46>
 8016084:	6825      	ldr	r5, [r4, #0]
 8016086:	1961      	adds	r1, r4, r5
 8016088:	428b      	cmp	r3, r1
 801608a:	bf01      	itttt	eq
 801608c:	6819      	ldreq	r1, [r3, #0]
 801608e:	685b      	ldreq	r3, [r3, #4]
 8016090:	1949      	addeq	r1, r1, r5
 8016092:	6021      	streq	r1, [r4, #0]
 8016094:	e7ed      	b.n	8016072 <_free_r+0x22>
 8016096:	461a      	mov	r2, r3
 8016098:	685b      	ldr	r3, [r3, #4]
 801609a:	b10b      	cbz	r3, 80160a0 <_free_r+0x50>
 801609c:	42a3      	cmp	r3, r4
 801609e:	d9fa      	bls.n	8016096 <_free_r+0x46>
 80160a0:	6811      	ldr	r1, [r2, #0]
 80160a2:	1855      	adds	r5, r2, r1
 80160a4:	42a5      	cmp	r5, r4
 80160a6:	d10b      	bne.n	80160c0 <_free_r+0x70>
 80160a8:	6824      	ldr	r4, [r4, #0]
 80160aa:	4421      	add	r1, r4
 80160ac:	1854      	adds	r4, r2, r1
 80160ae:	42a3      	cmp	r3, r4
 80160b0:	6011      	str	r1, [r2, #0]
 80160b2:	d1e0      	bne.n	8016076 <_free_r+0x26>
 80160b4:	681c      	ldr	r4, [r3, #0]
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	6053      	str	r3, [r2, #4]
 80160ba:	4421      	add	r1, r4
 80160bc:	6011      	str	r1, [r2, #0]
 80160be:	e7da      	b.n	8016076 <_free_r+0x26>
 80160c0:	d902      	bls.n	80160c8 <_free_r+0x78>
 80160c2:	230c      	movs	r3, #12
 80160c4:	6003      	str	r3, [r0, #0]
 80160c6:	e7d6      	b.n	8016076 <_free_r+0x26>
 80160c8:	6825      	ldr	r5, [r4, #0]
 80160ca:	1961      	adds	r1, r4, r5
 80160cc:	428b      	cmp	r3, r1
 80160ce:	bf04      	itt	eq
 80160d0:	6819      	ldreq	r1, [r3, #0]
 80160d2:	685b      	ldreq	r3, [r3, #4]
 80160d4:	6063      	str	r3, [r4, #4]
 80160d6:	bf04      	itt	eq
 80160d8:	1949      	addeq	r1, r1, r5
 80160da:	6021      	streq	r1, [r4, #0]
 80160dc:	6054      	str	r4, [r2, #4]
 80160de:	e7ca      	b.n	8016076 <_free_r+0x26>
 80160e0:	b003      	add	sp, #12
 80160e2:	bd30      	pop	{r4, r5, pc}
 80160e4:	20001cec 	.word	0x20001cec

080160e8 <sbrk_aligned>:
 80160e8:	b570      	push	{r4, r5, r6, lr}
 80160ea:	4e0e      	ldr	r6, [pc, #56]	; (8016124 <sbrk_aligned+0x3c>)
 80160ec:	460c      	mov	r4, r1
 80160ee:	6831      	ldr	r1, [r6, #0]
 80160f0:	4605      	mov	r5, r0
 80160f2:	b911      	cbnz	r1, 80160fa <sbrk_aligned+0x12>
 80160f4:	f000 f8bc 	bl	8016270 <_sbrk_r>
 80160f8:	6030      	str	r0, [r6, #0]
 80160fa:	4621      	mov	r1, r4
 80160fc:	4628      	mov	r0, r5
 80160fe:	f000 f8b7 	bl	8016270 <_sbrk_r>
 8016102:	1c43      	adds	r3, r0, #1
 8016104:	d00a      	beq.n	801611c <sbrk_aligned+0x34>
 8016106:	1cc4      	adds	r4, r0, #3
 8016108:	f024 0403 	bic.w	r4, r4, #3
 801610c:	42a0      	cmp	r0, r4
 801610e:	d007      	beq.n	8016120 <sbrk_aligned+0x38>
 8016110:	1a21      	subs	r1, r4, r0
 8016112:	4628      	mov	r0, r5
 8016114:	f000 f8ac 	bl	8016270 <_sbrk_r>
 8016118:	3001      	adds	r0, #1
 801611a:	d101      	bne.n	8016120 <sbrk_aligned+0x38>
 801611c:	f04f 34ff 	mov.w	r4, #4294967295
 8016120:	4620      	mov	r0, r4
 8016122:	bd70      	pop	{r4, r5, r6, pc}
 8016124:	20001cf0 	.word	0x20001cf0

08016128 <_malloc_r>:
 8016128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801612c:	1ccd      	adds	r5, r1, #3
 801612e:	f025 0503 	bic.w	r5, r5, #3
 8016132:	3508      	adds	r5, #8
 8016134:	2d0c      	cmp	r5, #12
 8016136:	bf38      	it	cc
 8016138:	250c      	movcc	r5, #12
 801613a:	2d00      	cmp	r5, #0
 801613c:	4607      	mov	r7, r0
 801613e:	db01      	blt.n	8016144 <_malloc_r+0x1c>
 8016140:	42a9      	cmp	r1, r5
 8016142:	d905      	bls.n	8016150 <_malloc_r+0x28>
 8016144:	230c      	movs	r3, #12
 8016146:	603b      	str	r3, [r7, #0]
 8016148:	2600      	movs	r6, #0
 801614a:	4630      	mov	r0, r6
 801614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016150:	4e2e      	ldr	r6, [pc, #184]	; (801620c <_malloc_r+0xe4>)
 8016152:	f000 f89d 	bl	8016290 <__malloc_lock>
 8016156:	6833      	ldr	r3, [r6, #0]
 8016158:	461c      	mov	r4, r3
 801615a:	bb34      	cbnz	r4, 80161aa <_malloc_r+0x82>
 801615c:	4629      	mov	r1, r5
 801615e:	4638      	mov	r0, r7
 8016160:	f7ff ffc2 	bl	80160e8 <sbrk_aligned>
 8016164:	1c43      	adds	r3, r0, #1
 8016166:	4604      	mov	r4, r0
 8016168:	d14d      	bne.n	8016206 <_malloc_r+0xde>
 801616a:	6834      	ldr	r4, [r6, #0]
 801616c:	4626      	mov	r6, r4
 801616e:	2e00      	cmp	r6, #0
 8016170:	d140      	bne.n	80161f4 <_malloc_r+0xcc>
 8016172:	6823      	ldr	r3, [r4, #0]
 8016174:	4631      	mov	r1, r6
 8016176:	4638      	mov	r0, r7
 8016178:	eb04 0803 	add.w	r8, r4, r3
 801617c:	f000 f878 	bl	8016270 <_sbrk_r>
 8016180:	4580      	cmp	r8, r0
 8016182:	d13a      	bne.n	80161fa <_malloc_r+0xd2>
 8016184:	6821      	ldr	r1, [r4, #0]
 8016186:	3503      	adds	r5, #3
 8016188:	1a6d      	subs	r5, r5, r1
 801618a:	f025 0503 	bic.w	r5, r5, #3
 801618e:	3508      	adds	r5, #8
 8016190:	2d0c      	cmp	r5, #12
 8016192:	bf38      	it	cc
 8016194:	250c      	movcc	r5, #12
 8016196:	4629      	mov	r1, r5
 8016198:	4638      	mov	r0, r7
 801619a:	f7ff ffa5 	bl	80160e8 <sbrk_aligned>
 801619e:	3001      	adds	r0, #1
 80161a0:	d02b      	beq.n	80161fa <_malloc_r+0xd2>
 80161a2:	6823      	ldr	r3, [r4, #0]
 80161a4:	442b      	add	r3, r5
 80161a6:	6023      	str	r3, [r4, #0]
 80161a8:	e00e      	b.n	80161c8 <_malloc_r+0xa0>
 80161aa:	6822      	ldr	r2, [r4, #0]
 80161ac:	1b52      	subs	r2, r2, r5
 80161ae:	d41e      	bmi.n	80161ee <_malloc_r+0xc6>
 80161b0:	2a0b      	cmp	r2, #11
 80161b2:	d916      	bls.n	80161e2 <_malloc_r+0xba>
 80161b4:	1961      	adds	r1, r4, r5
 80161b6:	42a3      	cmp	r3, r4
 80161b8:	6025      	str	r5, [r4, #0]
 80161ba:	bf18      	it	ne
 80161bc:	6059      	strne	r1, [r3, #4]
 80161be:	6863      	ldr	r3, [r4, #4]
 80161c0:	bf08      	it	eq
 80161c2:	6031      	streq	r1, [r6, #0]
 80161c4:	5162      	str	r2, [r4, r5]
 80161c6:	604b      	str	r3, [r1, #4]
 80161c8:	4638      	mov	r0, r7
 80161ca:	f104 060b 	add.w	r6, r4, #11
 80161ce:	f000 f865 	bl	801629c <__malloc_unlock>
 80161d2:	f026 0607 	bic.w	r6, r6, #7
 80161d6:	1d23      	adds	r3, r4, #4
 80161d8:	1af2      	subs	r2, r6, r3
 80161da:	d0b6      	beq.n	801614a <_malloc_r+0x22>
 80161dc:	1b9b      	subs	r3, r3, r6
 80161de:	50a3      	str	r3, [r4, r2]
 80161e0:	e7b3      	b.n	801614a <_malloc_r+0x22>
 80161e2:	6862      	ldr	r2, [r4, #4]
 80161e4:	42a3      	cmp	r3, r4
 80161e6:	bf0c      	ite	eq
 80161e8:	6032      	streq	r2, [r6, #0]
 80161ea:	605a      	strne	r2, [r3, #4]
 80161ec:	e7ec      	b.n	80161c8 <_malloc_r+0xa0>
 80161ee:	4623      	mov	r3, r4
 80161f0:	6864      	ldr	r4, [r4, #4]
 80161f2:	e7b2      	b.n	801615a <_malloc_r+0x32>
 80161f4:	4634      	mov	r4, r6
 80161f6:	6876      	ldr	r6, [r6, #4]
 80161f8:	e7b9      	b.n	801616e <_malloc_r+0x46>
 80161fa:	230c      	movs	r3, #12
 80161fc:	603b      	str	r3, [r7, #0]
 80161fe:	4638      	mov	r0, r7
 8016200:	f000 f84c 	bl	801629c <__malloc_unlock>
 8016204:	e7a1      	b.n	801614a <_malloc_r+0x22>
 8016206:	6025      	str	r5, [r4, #0]
 8016208:	e7de      	b.n	80161c8 <_malloc_r+0xa0>
 801620a:	bf00      	nop
 801620c:	20001cec 	.word	0x20001cec

08016210 <_realloc_r>:
 8016210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016214:	4680      	mov	r8, r0
 8016216:	4614      	mov	r4, r2
 8016218:	460e      	mov	r6, r1
 801621a:	b921      	cbnz	r1, 8016226 <_realloc_r+0x16>
 801621c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016220:	4611      	mov	r1, r2
 8016222:	f7ff bf81 	b.w	8016128 <_malloc_r>
 8016226:	b92a      	cbnz	r2, 8016234 <_realloc_r+0x24>
 8016228:	f7ff ff12 	bl	8016050 <_free_r>
 801622c:	4625      	mov	r5, r4
 801622e:	4628      	mov	r0, r5
 8016230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016234:	f000 f838 	bl	80162a8 <_malloc_usable_size_r>
 8016238:	4284      	cmp	r4, r0
 801623a:	4607      	mov	r7, r0
 801623c:	d802      	bhi.n	8016244 <_realloc_r+0x34>
 801623e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016242:	d812      	bhi.n	801626a <_realloc_r+0x5a>
 8016244:	4621      	mov	r1, r4
 8016246:	4640      	mov	r0, r8
 8016248:	f7ff ff6e 	bl	8016128 <_malloc_r>
 801624c:	4605      	mov	r5, r0
 801624e:	2800      	cmp	r0, #0
 8016250:	d0ed      	beq.n	801622e <_realloc_r+0x1e>
 8016252:	42bc      	cmp	r4, r7
 8016254:	4622      	mov	r2, r4
 8016256:	4631      	mov	r1, r6
 8016258:	bf28      	it	cs
 801625a:	463a      	movcs	r2, r7
 801625c:	f7ff fbb8 	bl	80159d0 <memcpy>
 8016260:	4631      	mov	r1, r6
 8016262:	4640      	mov	r0, r8
 8016264:	f7ff fef4 	bl	8016050 <_free_r>
 8016268:	e7e1      	b.n	801622e <_realloc_r+0x1e>
 801626a:	4635      	mov	r5, r6
 801626c:	e7df      	b.n	801622e <_realloc_r+0x1e>
	...

08016270 <_sbrk_r>:
 8016270:	b538      	push	{r3, r4, r5, lr}
 8016272:	4d06      	ldr	r5, [pc, #24]	; (801628c <_sbrk_r+0x1c>)
 8016274:	2300      	movs	r3, #0
 8016276:	4604      	mov	r4, r0
 8016278:	4608      	mov	r0, r1
 801627a:	602b      	str	r3, [r5, #0]
 801627c:	f7ea fecc 	bl	8001018 <_sbrk>
 8016280:	1c43      	adds	r3, r0, #1
 8016282:	d102      	bne.n	801628a <_sbrk_r+0x1a>
 8016284:	682b      	ldr	r3, [r5, #0]
 8016286:	b103      	cbz	r3, 801628a <_sbrk_r+0x1a>
 8016288:	6023      	str	r3, [r4, #0]
 801628a:	bd38      	pop	{r3, r4, r5, pc}
 801628c:	20001cf4 	.word	0x20001cf4

08016290 <__malloc_lock>:
 8016290:	4801      	ldr	r0, [pc, #4]	; (8016298 <__malloc_lock+0x8>)
 8016292:	f000 b811 	b.w	80162b8 <__retarget_lock_acquire_recursive>
 8016296:	bf00      	nop
 8016298:	20001cf8 	.word	0x20001cf8

0801629c <__malloc_unlock>:
 801629c:	4801      	ldr	r0, [pc, #4]	; (80162a4 <__malloc_unlock+0x8>)
 801629e:	f000 b80c 	b.w	80162ba <__retarget_lock_release_recursive>
 80162a2:	bf00      	nop
 80162a4:	20001cf8 	.word	0x20001cf8

080162a8 <_malloc_usable_size_r>:
 80162a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162ac:	1f18      	subs	r0, r3, #4
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	bfbc      	itt	lt
 80162b2:	580b      	ldrlt	r3, [r1, r0]
 80162b4:	18c0      	addlt	r0, r0, r3
 80162b6:	4770      	bx	lr

080162b8 <__retarget_lock_acquire_recursive>:
 80162b8:	4770      	bx	lr

080162ba <__retarget_lock_release_recursive>:
 80162ba:	4770      	bx	lr

080162bc <_init>:
 80162bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162be:	bf00      	nop
 80162c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162c2:	bc08      	pop	{r3}
 80162c4:	469e      	mov	lr, r3
 80162c6:	4770      	bx	lr

080162c8 <_fini>:
 80162c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ca:	bf00      	nop
 80162cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162ce:	bc08      	pop	{r3}
 80162d0:	469e      	mov	lr, r3
 80162d2:	4770      	bx	lr
