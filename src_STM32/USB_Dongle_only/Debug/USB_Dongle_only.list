
USB_Dongle_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016224  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  08016368  08016368  00026368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016aec  08016aec  00026aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016af4  08016af4  00026af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016af8  08016af8  00026af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  20000008  08016afc  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001be0  2000016c  08016c60  0003016c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001d4c  08016c60  00031d4c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000255a9  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058ca  00000000  00000000  00055745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b8  00000000  00000000  0005b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002030  00000000  00000000  0005d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000281bb  00000000  00000000  0005f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a036  00000000  00000000  000874b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7072  00000000  00000000  000b14e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0019855b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093e8  00000000  00000000  001985ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	0801634c 	.word	0x0801634c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	0801634c 	.word	0x0801634c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	f5ad 5dff 	sub.w	sp, sp, #8160	; 0x1fe0
 800059e:	b085      	sub	sp, #20
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fe63 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 fa19 	bl	80009dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005aa:	f000 fa7f 	bl	8000aac <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80005ae:	f000 fa9d 	bl	8000aec <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fb5d 	bl	8000c70 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b6:	f000 fb49 	bl	8000c4c <MX_DMA_Init>
  MX_RF_Init();
 80005ba:	f000 faab 	bl	8000b14 <MX_RF_Init>
  MX_USART1_UART_Init();
 80005be:	f000 faf9 	bl	8000bb4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005c2:	f000 fac5 	bl	8000b50 <MX_RTC_Init>
  MX_USB_Device_Init();
 80005c6:	f00a fa27 	bl	800aa18 <MX_USB_Device_Init>
  MX_RNG_Init();
 80005ca:	f000 faab 	bl	8000b24 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin); // BLUE LED
 80005ce:	2101      	movs	r1, #1
 80005d0:	48b9      	ldr	r0, [pc, #740]	; (80008b8 <main+0x320>)
 80005d2:	f001 fb49 	bl	8001c68 <HAL_GPIO_TogglePin>
  //char msg_buf[80] = "Dilithium Signature Start\r\n";
  //CDC_Transmit_FS((uint8_t*)msg_buf, 80);

  HAL_Delay(3000);
 80005d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005da:	f000 fecd 	bl	8001378 <HAL_Delay>
  USB_DEBUG_MSG("Program Compilation Date: %s %s\n", __DATE__, __TIME__);
 80005de:	2250      	movs	r2, #80	; 0x50
 80005e0:	2100      	movs	r1, #0
 80005e2:	48b6      	ldr	r0, [pc, #728]	; (80008bc <main+0x324>)
 80005e4:	f015 fa4a 	bl	8015a7c <memset>
 80005e8:	4bb5      	ldr	r3, [pc, #724]	; (80008c0 <main+0x328>)
 80005ea:	4ab6      	ldr	r2, [pc, #728]	; (80008c4 <main+0x32c>)
 80005ec:	49b6      	ldr	r1, [pc, #728]	; (80008c8 <main+0x330>)
 80005ee:	48b3      	ldr	r0, [pc, #716]	; (80008bc <main+0x324>)
 80005f0:	f015 fa4c 	bl	8015a8c <siprintf>
 80005f4:	48b1      	ldr	r0, [pc, #708]	; (80008bc <main+0x324>)
 80005f6:	f7ff fdc3 	bl	8000180 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	48ae      	ldr	r0, [pc, #696]	; (80008bc <main+0x324>)
 8000602:	f00a fac7 	bl	800ab94 <CDC_Transmit_FS>
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f015 f9ea 	bl	80159e2 <Delay_100ns>
  USB_DEBUG_MSG("Dilithium Signature Start\n");
 800060e:	2250      	movs	r2, #80	; 0x50
 8000610:	2100      	movs	r1, #0
 8000612:	48aa      	ldr	r0, [pc, #680]	; (80008bc <main+0x324>)
 8000614:	f015 fa32 	bl	8015a7c <memset>
 8000618:	49ac      	ldr	r1, [pc, #688]	; (80008cc <main+0x334>)
 800061a:	48a8      	ldr	r0, [pc, #672]	; (80008bc <main+0x324>)
 800061c:	f015 fa36 	bl	8015a8c <siprintf>
 8000620:	48a6      	ldr	r0, [pc, #664]	; (80008bc <main+0x324>)
 8000622:	f7ff fdad 	bl	8000180 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29b      	uxth	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	48a3      	ldr	r0, [pc, #652]	; (80008bc <main+0x324>)
 800062e:	f00a fab1 	bl	800ab94 <CDC_Transmit_FS>
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f015 f9d4 	bl	80159e2 <Delay_100ns>
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800063a:	2101      	movs	r1, #1
 800063c:	489e      	ldr	r0, [pc, #632]	; (80008b8 <main+0x320>)
 800063e:	f001 fb13 	bl	8001c68 <HAL_GPIO_TogglePin>

  unsigned int i, j;
  int ret;
  size_t mlen, smlen;
  uint8_t m[MLEN] = { 0x55 };
 8000642:	2355      	movs	r3, #85	; 0x55
 8000644:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8000648:	f102 0214 	add.w	r2, r2, #20
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8000652:	f103 0318 	add.w	r3, r3, #24
 8000656:	2237      	movs	r2, #55	; 0x37
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f015 fa0e 	bl	8015a7c <memset>
#ifndef STATIC_KEYS
  uint8_t pk[CRYPTO_PUBLICKEYBYTES];
  uint8_t sk[CRYPTO_SECRETKEYBYTES];
#endif

  uint8_t test_ok = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 8000666:	f102 021b 	add.w	r2, r2, #27
 800066a:	7013      	strb	r3, [r2, #0]

  for (i = 0; i < NTESTS; ++i) {
 800066c:	2300      	movs	r3, #0
 800066e:	f507 52ff 	add.w	r2, r7, #8160	; 0x1fe0
 8000672:	f102 0204 	add.w	r2, r2, #4
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	e0f3      	b.n	8000862 <main+0x2ca>
	  //

#ifndef STATIC_KEYS
	  randombytes(&hrng, m, MLEN);
 800067a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800067e:	f103 0314 	add.w	r3, r3, #20
 8000682:	223b      	movs	r2, #59	; 0x3b
 8000684:	4619      	mov	r1, r3
 8000686:	4892      	ldr	r0, [pc, #584]	; (80008d0 <main+0x338>)
 8000688:	f014 fbcd 	bl	8014e26 <randombytes>
	  crypto_sign_keypair(&hrng, pk, sk);
 800068c:	f107 0208 	add.w	r2, r7, #8
 8000690:	3a04      	subs	r2, #4
 8000692:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8000696:	3b14      	subs	r3, #20
 8000698:	4619      	mov	r1, r3
 800069a:	488d      	ldr	r0, [pc, #564]	; (80008d0 <main+0x338>)
 800069c:	f014 fd19 	bl	80150d2 <pqcrystals_dilithium2aes_r_ref_keypair>
#endif
	  crypto_sign(&hrng, sm, &smlen, m, MLEN, sk);
 80006a0:	f507 50fc 	add.w	r0, r7, #8064	; 0x1f80
 80006a4:	f100 0014 	add.w	r0, r0, #20
 80006a8:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 80006ac:	f102 0210 	add.w	r2, r2, #16
 80006b0:	f507 51af 	add.w	r1, r7, #5600	; 0x15e0
 80006b4:	f101 0104 	add.w	r1, r1, #4
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	3b04      	subs	r3, #4
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	233b      	movs	r3, #59	; 0x3b
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	4882      	ldr	r0, [pc, #520]	; (80008d0 <main+0x338>)
 80006c8:	f014 ffb4 	bl	8015634 <pqcrystals_dilithium2aes_r_ref>
	  ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
 80006cc:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 80006d0:	f103 0310 	add.w	r3, r3, #16
 80006d4:	681c      	ldr	r4, [r3, #0]
 80006d6:	f507 52af 	add.w	r2, r7, #5600	; 0x15e0
 80006da:	f102 0204 	add.w	r2, r2, #4
 80006de:	f507 51fe 	add.w	r1, r7, #8128	; 0x1fc0
 80006e2:	f101 0114 	add.w	r1, r1, #20
 80006e6:	f607 4048 	addw	r0, r7, #3144	; 0xc48
 80006ea:	3814      	subs	r0, #20
 80006ec:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80006f0:	3b14      	subs	r3, #20
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	4623      	mov	r3, r4
 80006f6:	f015 f8fc 	bl	80158f2 <pqcrystals_dilithium2aes_r_ref_open>
 80006fa:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 80006fe:	f103 031c 	add.w	r3, r3, #28
 8000702:	6018      	str	r0, [r3, #0]

	  //memset(msg_buf, 0, sizeof(msg_buf));
	  if (ret) {
 8000704:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000708:	f103 031c 	add.w	r3, r3, #28
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d026      	beq.n	8000760 <main+0x1c8>
		  USB_DEBUG_MSG("Verification failed - err_code = %d\r\n", ret);
 8000712:	2250      	movs	r2, #80	; 0x50
 8000714:	2100      	movs	r1, #0
 8000716:	4869      	ldr	r0, [pc, #420]	; (80008bc <main+0x324>)
 8000718:	f015 f9b0 	bl	8015a7c <memset>
 800071c:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000720:	f103 031c 	add.w	r3, r3, #28
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	496b      	ldr	r1, [pc, #428]	; (80008d4 <main+0x33c>)
 8000728:	4864      	ldr	r0, [pc, #400]	; (80008bc <main+0x324>)
 800072a:	f015 f9af 	bl	8015a8c <siprintf>
 800072e:	4863      	ldr	r0, [pc, #396]	; (80008bc <main+0x324>)
 8000730:	f7ff fd26 	bl	8000180 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29b      	uxth	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	4860      	ldr	r0, [pc, #384]	; (80008bc <main+0x324>)
 800073c:	f00a fa2a 	bl	800ab94 <CDC_Transmit_FS>
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f015 f94d 	bl	80159e2 <Delay_100ns>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	4862      	ldr	r0, [pc, #392]	; (80008d8 <main+0x340>)
 8000750:	f001 fa72 	bl	8001c38 <HAL_GPIO_WritePin>
		  test_ok = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 800075a:	f102 021b 	add.w	r2, r2, #27
 800075e:	7013      	strb	r3, [r2, #0]
		  //return -1;
	  }

	  if (mlen != MLEN) {
 8000760:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000764:	f103 0314 	add.w	r3, r3, #20
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b3b      	cmp	r3, #59	; 0x3b
 800076c:	d021      	beq.n	80007b2 <main+0x21a>
		  USB_DEBUG_MSG("Message lengths don't match\r\n");
 800076e:	2250      	movs	r2, #80	; 0x50
 8000770:	2100      	movs	r1, #0
 8000772:	4852      	ldr	r0, [pc, #328]	; (80008bc <main+0x324>)
 8000774:	f015 f982 	bl	8015a7c <memset>
 8000778:	4958      	ldr	r1, [pc, #352]	; (80008dc <main+0x344>)
 800077a:	4850      	ldr	r0, [pc, #320]	; (80008bc <main+0x324>)
 800077c:	f015 f986 	bl	8015a8c <siprintf>
 8000780:	484e      	ldr	r0, [pc, #312]	; (80008bc <main+0x324>)
 8000782:	f7ff fcfd 	bl	8000180 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	b29b      	uxth	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	484b      	ldr	r0, [pc, #300]	; (80008bc <main+0x324>)
 800078e:	f00a fa01 	bl	800ab94 <CDC_Transmit_FS>
 8000792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000796:	f015 f924 	bl	80159e2 <Delay_100ns>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	484d      	ldr	r0, [pc, #308]	; (80008d8 <main+0x340>)
 80007a2:	f001 fa49 	bl	8001c38 <HAL_GPIO_WritePin>
		  test_ok = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 80007ac:	f102 021b 	add.w	r2, r2, #27
 80007b0:	7013      	strb	r3, [r2, #0]
		  //return -1;
	  }

	  for (j = 0; j < mlen; ++j) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	f507 52ff 	add.w	r2, r7, #8160	; 0x1fe0
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e03d      	b.n	8000838 <main+0x2a0>
		  if (m[j] != m2[j]) {
 80007bc:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80007c0:	f102 0214 	add.w	r2, r2, #20
 80007c4:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 80007d2:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 80007d6:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	440b      	add	r3, r1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d022      	beq.n	800082a <main+0x292>
			  USB_DEBUG_MSG("Messages don't match\r\n");
 80007e4:	2250      	movs	r2, #80	; 0x50
 80007e6:	2100      	movs	r1, #0
 80007e8:	4834      	ldr	r0, [pc, #208]	; (80008bc <main+0x324>)
 80007ea:	f015 f947 	bl	8015a7c <memset>
 80007ee:	493c      	ldr	r1, [pc, #240]	; (80008e0 <main+0x348>)
 80007f0:	4832      	ldr	r0, [pc, #200]	; (80008bc <main+0x324>)
 80007f2:	f015 f94b 	bl	8015a8c <siprintf>
 80007f6:	4831      	ldr	r0, [pc, #196]	; (80008bc <main+0x324>)
 80007f8:	f7ff fcc2 	bl	8000180 <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	482e      	ldr	r0, [pc, #184]	; (80008bc <main+0x324>)
 8000804:	f00a f9c6 	bl	800ab94 <CDC_Transmit_FS>
 8000808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080c:	f015 f8e9 	bl	80159e2 <Delay_100ns>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000816:	4830      	ldr	r0, [pc, #192]	; (80008d8 <main+0x340>)
 8000818:	f001 fa0e 	bl	8001c38 <HAL_GPIO_WritePin>
			  test_ok = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 8000822:	f102 021b 	add.w	r2, r2, #27
 8000826:	7013      	strb	r3, [r2, #0]
			  break;
 8000828:	e010      	b.n	800084c <main+0x2b4>
	  for (j = 0; j < mlen; ++j) {
 800082a:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	f507 52ff 	add.w	r2, r7, #8160	; 0x1fe0
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 800083c:	f103 0314 	add.w	r3, r3, #20
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f507 52ff 	add.w	r2, r7, #8160	; 0x1fe0
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d3b7      	bcc.n	80007bc <main+0x224>
  for (i = 0; i < NTESTS; ++i) {
 800084c:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8000850:	f103 0304 	add.w	r3, r3, #4
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	f507 52ff 	add.w	r2, r7, #8160	; 0x1fe0
 800085c:	f102 0204 	add.w	r2, r2, #4
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8000866:	f103 0304 	add.w	r3, r3, #4
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	f43f af04 	beq.w	800067a <main+0xe2>
		  break;
		  //return -1;
	  }
*/
  }
  if (test_ok){
 8000872:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000876:	f103 031b 	add.w	r3, r3, #27
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d033      	beq.n	80008e8 <main+0x350>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // GREEN LED
 8000880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000884:	4814      	ldr	r0, [pc, #80]	; (80008d8 <main+0x340>)
 8000886:	f001 f9ef 	bl	8001c68 <HAL_GPIO_TogglePin>
	  USB_DEBUG_MSG("New Dilithium - OK\r\n");
 800088a:	2250      	movs	r2, #80	; 0x50
 800088c:	2100      	movs	r1, #0
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <main+0x324>)
 8000890:	f015 f8f4 	bl	8015a7c <memset>
 8000894:	4913      	ldr	r1, [pc, #76]	; (80008e4 <main+0x34c>)
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <main+0x324>)
 8000898:	f015 f8f8 	bl	8015a8c <siprintf>
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <main+0x324>)
 800089e:	f7ff fc6f 	bl	8000180 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <main+0x324>)
 80008aa:	f00a f973 	bl	800ab94 <CDC_Transmit_FS>
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f015 f896 	bl	80159e2 <Delay_100ns>
 80008b6:	e032      	b.n	800091e <main+0x386>
 80008b8:	48000c00 	.word	0x48000c00
 80008bc:	20001cec 	.word	0x20001cec
 80008c0:	08016368 	.word	0x08016368
 80008c4:	08016374 	.word	0x08016374
 80008c8:	08016380 	.word	0x08016380
 80008cc:	080163a4 	.word	0x080163a4
 80008d0:	200001c4 	.word	0x200001c4
 80008d4:	080163c0 	.word	0x080163c0
 80008d8:	48000800 	.word	0x48000800
 80008dc:	080163e8 	.word	0x080163e8
 80008e0:	08016408 	.word	0x08016408
 80008e4:	08016420 	.word	0x08016420
  }
  else {
	  USB_DEBUG_MSG("New Dilithium - err_code = %d\r\n", ret);
 80008e8:	2250      	movs	r2, #80	; 0x50
 80008ea:	2100      	movs	r1, #0
 80008ec:	4835      	ldr	r0, [pc, #212]	; (80009c4 <main+0x42c>)
 80008ee:	f015 f8c5 	bl	8015a7c <memset>
 80008f2:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 80008f6:	f103 031c 	add.w	r3, r3, #28
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4932      	ldr	r1, [pc, #200]	; (80009c8 <main+0x430>)
 80008fe:	4831      	ldr	r0, [pc, #196]	; (80009c4 <main+0x42c>)
 8000900:	f015 f8c4 	bl	8015a8c <siprintf>
 8000904:	482f      	ldr	r0, [pc, #188]	; (80009c4 <main+0x42c>)
 8000906:	f7ff fc3b 	bl	8000180 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	b29b      	uxth	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	482c      	ldr	r0, [pc, #176]	; (80009c4 <main+0x42c>)
 8000912:	f00a f93f 	bl	800ab94 <CDC_Transmit_FS>
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f015 f862 	bl	80159e2 <Delay_100ns>
  }

  USB_DEBUG_MSG("CRYPTO_PUBLICKEYBYTES = %d\r\n", CRYPTO_PUBLICKEYBYTES);
 800091e:	2250      	movs	r2, #80	; 0x50
 8000920:	2100      	movs	r1, #0
 8000922:	4828      	ldr	r0, [pc, #160]	; (80009c4 <main+0x42c>)
 8000924:	f015 f8aa 	bl	8015a7c <memset>
 8000928:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800092c:	4927      	ldr	r1, [pc, #156]	; (80009cc <main+0x434>)
 800092e:	4825      	ldr	r0, [pc, #148]	; (80009c4 <main+0x42c>)
 8000930:	f015 f8ac 	bl	8015a8c <siprintf>
 8000934:	4823      	ldr	r0, [pc, #140]	; (80009c4 <main+0x42c>)
 8000936:	f7ff fc23 	bl	8000180 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29b      	uxth	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	4820      	ldr	r0, [pc, #128]	; (80009c4 <main+0x42c>)
 8000942:	f00a f927 	bl	800ab94 <CDC_Transmit_FS>
 8000946:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094a:	f015 f84a 	bl	80159e2 <Delay_100ns>
  USB_DEBUG_MSG("CRYPTO_SECRETKEYBYTES = %d\r\n", CRYPTO_SECRETKEYBYTES);
 800094e:	2250      	movs	r2, #80	; 0x50
 8000950:	2100      	movs	r1, #0
 8000952:	481c      	ldr	r0, [pc, #112]	; (80009c4 <main+0x42c>)
 8000954:	f015 f892 	bl	8015a7c <memset>
 8000958:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800095c:	491c      	ldr	r1, [pc, #112]	; (80009d0 <main+0x438>)
 800095e:	4819      	ldr	r0, [pc, #100]	; (80009c4 <main+0x42c>)
 8000960:	f015 f894 	bl	8015a8c <siprintf>
 8000964:	4817      	ldr	r0, [pc, #92]	; (80009c4 <main+0x42c>)
 8000966:	f7ff fc0b 	bl	8000180 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29b      	uxth	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	4814      	ldr	r0, [pc, #80]	; (80009c4 <main+0x42c>)
 8000972:	f00a f90f 	bl	800ab94 <CDC_Transmit_FS>
 8000976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097a:	f015 f832 	bl	80159e2 <Delay_100ns>
  USB_DEBUG_MSG("CRYPTO_BYTES = %d\r\n", CRYPTO_BYTES);
 800097e:	2250      	movs	r2, #80	; 0x50
 8000980:	2100      	movs	r1, #0
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <main+0x42c>)
 8000984:	f015 f87a 	bl	8015a7c <memset>
 8000988:	f640 1274 	movw	r2, #2420	; 0x974
 800098c:	4911      	ldr	r1, [pc, #68]	; (80009d4 <main+0x43c>)
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <main+0x42c>)
 8000990:	f015 f87c 	bl	8015a8c <siprintf>
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <main+0x42c>)
 8000996:	f7ff fbf3 	bl	8000180 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	b29b      	uxth	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <main+0x42c>)
 80009a2:	f00a f8f7 	bl	800ab94 <CDC_Transmit_FS>
 80009a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009aa:	f015 f81a 	bl	80159e2 <Delay_100ns>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f000 fce1 	bl	8001378 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // YELLOW LED
 80009b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <main+0x440>)
 80009bc:	f001 f954 	bl	8001c68 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80009c0:	e7f5      	b.n	80009ae <main+0x416>
 80009c2:	bf00      	nop
 80009c4:	20001cec 	.word	0x20001cec
 80009c8:	08016438 	.word	0x08016438
 80009cc:	08016458 	.word	0x08016458
 80009d0:	08016478 	.word	0x08016478
 80009d4:	08016498 	.word	0x08016498
 80009d8:	48000800 	.word	0x48000800

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09a      	sub	sp, #104	; 0x68
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2248      	movs	r2, #72	; 0x48
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f015 f846 	bl	8015a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a0a:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000a1e:	234b      	movs	r3, #75	; 0x4b
 8000a20:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI1|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a36:	2305      	movs	r3, #5
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a42:	2330      	movs	r3, #48	; 0x30
 8000a44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a46:	2310      	movs	r3, #16
 8000a48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a5a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fb47 	bl	80040f4 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a6c:	f000 f952 	bl	8000d14 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000a70:	236f      	movs	r3, #111	; 0x6f
 8000a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2303      	movs	r3, #3
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 fea3 	bl	80047dc <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a9c:	f000 f93a 	bl	8000d14 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3768      	adds	r7, #104	; 0x68
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	58000400 	.word	0x58000400

08000aac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	; 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2250      	movs	r2, #80	; 0x50
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f014 ffdf 	bl	8015a7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000abe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ac2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000ac4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ac8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000aca:	2300      	movs	r3, #0
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 fabe 	bl	8005056 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000ae0:	f000 f918 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000ae4:	bf00      	nop
 8000ae6:	3750      	adds	r7, #80	; 0x50
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_IPCC_Init+0x20>)
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <MX_IPCC_Init+0x24>)
 8000af4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_IPCC_Init+0x20>)
 8000af8:	f001 f8f4 	bl	8001ce4 <HAL_IPCC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000b02:	f000 f907 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000188 	.word	0x20000188
 8000b10:	58000c00 	.word	0x58000c00

08000b14 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_RNG_Init+0x24>)
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <MX_RNG_Init+0x28>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_RNG_Init+0x24>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_RNG_Init+0x24>)
 8000b36:	f004 fd15 	bl	8005564 <HAL_RNG_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b40:	f000 f8e8 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200001c4 	.word	0x200001c4
 8000b4c:	58001000 	.word	0x58001000

08000b50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b56:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <MX_RTC_Init+0x60>)
 8000b58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b62:	227f      	movs	r2, #127	; 0x7f
 8000b64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b86:	f004 fd79 	bl	800567c <HAL_RTC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b90:	f000 f8c0 	bl	8000d14 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_RTC_Init+0x5c>)
 8000b9a:	f004 fe6f 	bl	800587c <HAL_RTCEx_SetWakeUpTimer>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 f8b6 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001d8 	.word	0x200001d8
 8000bb0:	40002800 	.word	0x40002800

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <MX_USART1_UART_Init+0x94>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfc:	4811      	ldr	r0, [pc, #68]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bfe:	f004 fef8 	bl	80059f2 <HAL_UART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c08:	f000 f884 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c10:	f005 fb59 	bl	80062c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f000 f87b 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c22:	f005 fb8e 	bl	8006342 <HAL_UARTEx_SetRxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f000 f872 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c32:	f005 fb0f 	bl	8006254 <HAL_UARTEx_DisableFifoMode>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c3c:	f000 f86a 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200001fc 	.word	0x200001fc
 8000c48:	40013800 	.word	0x40013800

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c50:	2004      	movs	r0, #4
 8000c52:	f7ff fc6f 	bl	8000534 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fc6c 	bl	8000534 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	200b      	movs	r0, #11
 8000c62:	f000 fc88 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c66:	200b      	movs	r0, #11
 8000c68:	f000 fc9f 	bl	80015aa <HAL_NVIC_EnableIRQ>

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2004      	movs	r0, #4
 8000c86:	f7ff fc6e 	bl	8000566 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fc6b 	bl	8000566 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c90:	2008      	movs	r0, #8
 8000c92:	f7ff fc68 	bl	8000566 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2002      	movs	r0, #2
 8000c98:	f7ff fc65 	bl	8000566 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000ca2:	481a      	ldr	r0, [pc, #104]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000ca4:	f000 ffc8 	bl	8001c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	4818      	ldr	r0, [pc, #96]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000cae:	f000 ffc3 	bl	8001c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTI10_Pin */
  GPIO_InitStruct.Pin = EXTI10_Pin;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXTI10_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 fe45 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000cce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <MX_GPIO_Init+0x9c>)
 8000ce6:	f000 fe37 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000cea:	2301      	movs	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_GPIO_Init+0xa0>)
 8000d00:	f000 fe2a 	bl	8001958 <HAL_GPIO_Init>

}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	48000c00 	.word	0x48000c00

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <Error_Handler+0x38>)
 8000d22:	f000 ffa1 	bl	8001c68 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2a:	4808      	ldr	r0, [pc, #32]	; (8000d4c <Error_Handler+0x38>)
 8000d2c:	f000 ff9c 	bl	8001c68 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <Error_Handler+0x38>)
 8000d36:	f000 ff97 	bl	8001c68 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <Error_Handler+0x3c>)
 8000d3e:	f000 ff93 	bl	8001c68 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d46:	f000 fb17 	bl	8001378 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000d4a:	e7e7      	b.n	8000d1c <Error_Handler+0x8>
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	48000c00 	.word	0x48000c00

08000d54 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_AHB2_GRP1_EnableClock>:
{
 8000d76:	b480      	push	{r7}
 8000d78:	b085      	sub	sp, #20
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4013      	ands	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000e42:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e46:	f7ff ffaf 	bl	8000da8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	202e      	movs	r0, #46	; 0x2e
 8000e50:	f000 fb91 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000e54:	202e      	movs	r0, #46	; 0x2e
 8000e56:	f000 fba8 	bl	80015aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_IPCC_MspInit+0x44>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d113      	bne.n	8000e9a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000e72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e76:	f7ff ff97 	bl	8000da8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	202c      	movs	r0, #44	; 0x2c
 8000e80:	f000 fb79 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000e84:	202c      	movs	r0, #44	; 0x2c
 8000e86:	f000 fb90 	bl	80015aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	202d      	movs	r0, #45	; 0x2d
 8000e90:	f000 fb71 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000e94:	202d      	movs	r0, #45	; 0x2d
 8000e96:	f000 fb88 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	58000c00 	.word	0x58000c00

08000ea8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b096      	sub	sp, #88	; 0x58
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	2250      	movs	r2, #80	; 0x50
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f014 fddf 	bl	8015a7c <memset>
  if(hrng->Instance==RNG)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_RNG_MspInit+0x50>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d113      	bne.n	8000ef0 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ecc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 f8bc 	bl	8005056 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000ee4:	f7ff ff16 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ee8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000eec:	f7ff ff5c 	bl	8000da8 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3758      	adds	r7, #88	; 0x58
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58001000 	.word	0x58001000

08000efc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b096      	sub	sp, #88	; 0x58
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	2250      	movs	r2, #80	; 0x50
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f014 fdb5 	bl	8015a7c <memset>
  if(hrtc->Instance==RTC)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_RTC_MspInit+0x54>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d115      	bne.n	8000f48 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f20:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 f892 	bl	8005056 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f38:	f7ff feec 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3c:	f7ff ff0a 	bl	8000d54 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f44:	f7ff ff49 	bl	8000dda <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3758      	adds	r7, #88	; 0x58
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40002800 	.word	0x40002800

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09c      	sub	sp, #112	; 0x70
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2250      	movs	r2, #80	; 0x50
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f014 fd81 	bl	8015a7c <memset>
  if(huart->Instance==USART1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <HAL_UART_MspInit+0xd4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d14d      	bne.n	8001020 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 f860 	bl	8005056 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f9c:	f7ff feba 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fa4:	f7ff ff32 	bl	8000e0c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f7ff fee4 	bl	8000d76 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fae:	23c0      	movs	r3, #192	; 0xc0
 8000fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4818      	ldr	r0, [pc, #96]	; (800102c <HAL_UART_MspInit+0xd8>)
 8000fca:	f000 fcc5 	bl	8001958 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <HAL_UART_MspInit+0xe0>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8001006:	f000 faeb 	bl	80015e0 <HAL_DMA_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001010:	f7ff fe80 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8001018:	67da      	str	r2, [r3, #124]	; 0x7c
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <HAL_UART_MspInit+0xdc>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	3770      	adds	r7, #112	; 0x70
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40013800 	.word	0x40013800
 800102c:	48000400 	.word	0x48000400
 8001030:	20000290 	.word	0x20000290
 8001034:	40020008 	.word	0x40020008

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f94c 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <DMA1_Channel1_IRQHandler+0x10>)
 8001092:	f000 fb4d 	bl	8001730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000290 	.word	0x20000290

080010a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <USB_LP_IRQHandler+0x10>)
 80010a6:	f001 f838 	bl	800211a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200017d8 	.word	0x200017d8

080010b4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <IPCC_C1_RX_IRQHandler+0x10>)
 80010ba:	f000 fe93 	bl	8001de4 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000188 	.word	0x20000188

080010c8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <IPCC_C1_TX_IRQHandler+0x10>)
 80010ce:	f000 fe3b 	bl	8001d48 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000188 	.word	0x20000188

080010dc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80010e0:	f000 fddc 	bl	8001c9c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f014 fc78 	bl	8015a0c <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20030000 	.word	0x20030000
 8001148:	00000400 	.word	0x00000400
 800114c:	200002f0 	.word	0x200002f0
 8001150:	20001d50 	.word	0x20001d50

08001154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <SystemInit+0x98>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <SystemInit+0x98>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001180:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <SystemInit+0x9c>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800119e:	f023 0305 	bic.w	r3, r3, #5
 80011a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80011ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011be:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <SystemInit+0xa0>)
 80011c0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <SystemInit+0xa0>)
 80011c8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	faf6fefb 	.word	0xfaf6fefb
 80011f4:	22041000 	.word	0x22041000

080011f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80011f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fc:	3304      	adds	r3, #4

080011fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001200:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001202:	d3f9      	bcc.n	80011f8 <CopyDataInit>
  bx lr
 8001204:	4770      	bx	lr

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001206:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001208:	3004      	adds	r0, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800120a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>
  bx lr
 800120e:	4770      	bx	lr

08001210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001214:	f7ff ff9e 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <LoopForever+0x6>)
 800121a:	490c      	ldr	r1, [pc, #48]	; (800124c <LoopForever+0xa>)
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <LoopForever+0xe>)
 800121e:	2300      	movs	r3, #0
 8001220:	f7ff ffed 	bl	80011fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <LoopForever+0x12>)
 8001226:	490c      	ldr	r1, [pc, #48]	; (8001258 <LoopForever+0x16>)
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <LoopForever+0x1a>)
 800122a:	2300      	movs	r3, #0
 800122c:	f7ff ffe7 	bl	80011fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <LoopForever+0x1e>)
 8001232:	490c      	ldr	r1, [pc, #48]	; (8001264 <LoopForever+0x22>)
 8001234:	2300      	movs	r3, #0
 8001236:	f7ff ffe8 	bl	800120a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800123a:	f014 fbed 	bl	8015a18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800123e:	f7ff f9ab 	bl	8000598 <main>

08001242 <LoopForever>:

LoopForever:
  b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001248:	20000008 	.word	0x20000008
 800124c:	2000016c 	.word	0x2000016c
 8001250:	08016afc 	.word	0x08016afc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001254:	20030000 	.word	0x20030000
 8001258:	20030000 	.word	0x20030000
 800125c:	08016c60 	.word	0x08016c60
  INIT_BSS _sbss, _ebss
 8001260:	2000016c 	.word	0x2000016c
 8001264:	20001d4c 	.word	0x20001d4c

08001268 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC1_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_Init+0x3c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_Init+0x3c>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001282:	2003      	movs	r0, #3
 8001284:	f000 f96c 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001288:	200f      	movs	r0, #15
 800128a:	f000 f80f 	bl	80012ac <HAL_InitTick>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	e001      	b.n	800129e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800129a:	f7ff fdd0 	bl	8000e3e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800129e:	79fb      	ldrb	r3, [r7, #7]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58004000 	.word	0x58004000

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_InitTick+0x6c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d024      	beq.n	800130a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012c0:	f003 fc38 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_InitTick+0x6c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f974 	bl	80015c6 <HAL_SYSTICK_Config>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10f      	bne.n	8001304 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	d809      	bhi.n	80012fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ea:	2200      	movs	r2, #0
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295
 80012f2:	f000 f940 	bl	8001576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_InitTick+0x70>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e007      	b.n	800130e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e004      	b.n	800130e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e001      	b.n	800130e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000010 	.word	0x20000010
 800131c:	2000000c 	.word	0x2000000c

08001320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000010 	.word	0x20000010
 8001344:	200002f4 	.word	0x200002f4

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200002f4 	.word	0x200002f4

08001360 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTickPrio+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000000c 	.word	0x2000000c

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffe2 	bl	8001348 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffd2 	bl	8001348 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000010 	.word	0x20000010

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff40 	bl	8001408 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff90 	bl	80014b4 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5f 	bl	8001460 <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff33 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa4 	bl	800151c <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e08e      	b.n	8001710 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_DMA_Init+0x138>)
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d80f      	bhi.n	800161e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_DMA_Init+0x13c>)
 8001606:	4413      	add	r3, r2
 8001608:	4a45      	ldr	r2, [pc, #276]	; (8001720 <HAL_DMA_Init+0x140>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	009a      	lsls	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a42      	ldr	r2, [pc, #264]	; (8001724 <HAL_DMA_Init+0x144>)
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
 800161c:	e00e      	b.n	800163c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_DMA_Init+0x148>)
 8001626:	4413      	add	r3, r2
 8001628:	4a3d      	ldr	r2, [pc, #244]	; (8001720 <HAL_DMA_Init+0x140>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	009a      	lsls	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a3c      	ldr	r2, [pc, #240]	; (800172c <HAL_DMA_Init+0x14c>)
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001656:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f8fe 	bl	8001890 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800169c:	d102      	bne.n	80016a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80016b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d010      	beq.n	80016e6 <HAL_DMA_Init+0x106>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d80c      	bhi.n	80016e6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f91d 	bl	800190c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	e008      	b.n	80016f8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020407 	.word	0x40020407
 800171c:	bffdfff8 	.word	0xbffdfff8
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40020000 	.word	0x40020000
 8001728:	bffdfbf8 	.word	0xbffdfbf8
 800172c:	40020400 	.word	0x40020400

08001730 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	f003 031c 	and.w	r3, r3, #28
 8001750:	2204      	movs	r2, #4
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d026      	beq.n	80017aa <HAL_DMA_IRQHandler+0x7a>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d021      	beq.n	80017aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b00      	cmp	r3, #0
 8001772:	d107      	bne.n	8001784 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0204 	bic.w	r2, r2, #4
 8001782:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	f003 021c 	and.w	r2, r3, #28
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2104      	movs	r1, #4
 8001792:	fa01 f202 	lsl.w	r2, r1, r2
 8001796:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	2b00      	cmp	r3, #0
 800179e:	d071      	beq.n	8001884 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017a8:	e06c      	b.n	8001884 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f003 031c 	and.w	r3, r3, #28
 80017b2:	2202      	movs	r2, #2
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d02e      	beq.n	800181c <HAL_DMA_IRQHandler+0xec>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d029      	beq.n	800181c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10b      	bne.n	80017ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020a 	bic.w	r2, r2, #10
 80017e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f003 021c 	and.w	r2, r3, #28
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2102      	movs	r1, #2
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d038      	beq.n	8001884 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800181a:	e033      	b.n	8001884 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f003 031c 	and.w	r3, r3, #28
 8001824:	2208      	movs	r2, #8
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d02a      	beq.n	8001886 <HAL_DMA_IRQHandler+0x156>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d025      	beq.n	8001886 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 020e 	bic.w	r2, r2, #14
 8001848:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f003 021c 	and.w	r2, r3, #28
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001884:	bf00      	nop
 8001886:	bf00      	nop
}
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d80a      	bhi.n	80018ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6493      	str	r3, [r2, #72]	; 0x48
 80018b8:	e007      	b.n	80018ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018c4:	4413      	add	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3b08      	subs	r3, #8
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2201      	movs	r2, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40020407 	.word	0x40020407
 8001900:	4002081c 	.word	0x4002081c
 8001904:	cccccccd 	.word	0xcccccccd
 8001908:	40020880 	.word	0x40020880

0800190c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800191c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001930:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3b01      	subs	r3, #1
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2201      	movs	r2, #1
 800193c:	409a      	lsls	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	1000823f 	.word	0x1000823f
 8001954:	40020940 	.word	0x40020940

08001958 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e14c      	b.n	8001c02 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 813e 	beq.w	8001bfc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d017      	beq.n	8001a36 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0203 	and.w	r2, r3, #3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8098 	beq.w	8001bfc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001acc:	4a54      	ldr	r2, [pc, #336]	; (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001af6:	d019      	beq.n	8001b2c <HAL_GPIO_Init+0x1d4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1d0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1cc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_GPIO_Init+0x2d4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1c8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_GPIO_Init+0x2d8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1c4>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e008      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3e:	4938      	ldr	r1, [pc, #224]	; (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b70:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b9a:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f aeab 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40010000 	.word	0x40010000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	48000c00 	.word	0x48000c00
 8001c30:	48001000 	.word	0x48001000
 8001c34:	58000800 	.word	0x58000800

08001c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
 8001c44:	4613      	mov	r3, r2
 8001c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43d9      	mvns	r1, r3
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	400b      	ands	r3, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_HSEM_IRQHandler+0x30>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_HSEM_IRQHandler+0x30>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4906      	ldr	r1, [pc, #24]	; (8001ccc <HAL_HSEM_IRQHandler+0x30>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <HAL_HSEM_IRQHandler+0x30>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f807 	bl	8001cd0 <HAL_HSEM_FreeCallback>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	58001500 	.word	0x58001500

08001cd0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01e      	beq.n	8001d34 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_IPCC_Init+0x60>)
 8001cf8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff f8aa 	bl	8000e60 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001d0c:	68b8      	ldr	r0, [r7, #8]
 8001d0e:	f000 f8f5 	bl	8001efc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8c6 	bl	8001eb0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001d32:	e001      	b.n	8001d38 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	58000c00 	.word	0x58000c00

08001d48 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_IPCC_TX_IRQHandler+0x98>)
 8001d56:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001d62:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001d72:	e02c      	b.n	8001dce <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3310      	adds	r3, #16
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01c      	beq.n	8001dc8 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	3306      	adds	r3, #6
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	3306      	adds	r3, #6
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	6939      	ldr	r1, [r7, #16]
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1cf      	bne.n	8001d74 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	58000c00 	.word	0x58000c00

08001de4 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_IPCC_RX_IRQHandler+0x90>)
 8001df2:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_IPCC_RX_IRQHandler+0x94>)
 8001df6:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e02:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001e0e:	e029      	b.n	8001e64 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	2201      	movs	r2, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01a      	beq.n	8001e5e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1d2      	bne.n	8001e10 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	58000c00 	.word	0x58000c00
 8001e78:	58000c10 	.word	0x58000c10

08001e7c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e00f      	b.n	8001ede <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <IPCC_SetDefaultCallbacks+0x44>)
 8001ec8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3306      	adds	r3, #6
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <IPCC_SetDefaultCallbacks+0x48>)
 8001ed6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d9ec      	bls.n	8001ebe <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	08001e7d 	.word	0x08001e7d
 8001ef8:	08001e97 	.word	0x08001e97

08001efc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001f10:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	223f      	movs	r2, #63	; 0x3f
 8001f16:	609a      	str	r2, [r3, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af06      	add	r7, sp, #24
 8001f2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0cb      	b.n	80020ce <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f008 ff9c 	bl	800ae88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fa94 	bl	800648a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e040      	b.n	8001fea <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	3301      	adds	r3, #1
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3303      	adds	r3, #3
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3338      	adds	r3, #56	; 0x38
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	333c      	adds	r3, #60	; 0x3c
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3340      	adds	r3, #64	; 0x40
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d3b9      	bcc.n	8001f68 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e044      	b.n	8002084 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	f203 1369 	addw	r3, r3, #361	; 0x169
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	440b      	add	r3, r1
 8002034:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	3301      	adds	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	d3b5      	bcc.n	8001ffa <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	687e      	ldr	r6, [r7, #4]
 8002096:	466d      	mov	r5, sp
 8002098:	f106 0410 	add.w	r4, r6, #16
 800209c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	602b      	str	r3, [r5, #0]
 80020a4:	1d33      	adds	r3, r6, #4
 80020a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	f004 fa09 	bl	80064c0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f001 fc45 	bl	8003956 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_PCD_Start+0x16>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e012      	b.n	8002112 <HAL_PCD_Start+0x3c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f004 f9af 	bl	800645c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f006 fc73 	bl	80089ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f006 fc78 	bl	8008a1c <USB_ReadInterrupts>
 800212c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fb05 	bl	8002748 <PCD_EP_ISR_Handler>

    return;
 800213e:	e110      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	2b00      	cmp	r3, #0
 8002148:	d013      	beq.n	8002172 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215c:	b292      	uxth	r2, r2
 800215e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f008 ff33 	bl	800afce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002168:	2100      	movs	r1, #0
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8fc 	bl	8002368 <HAL_PCD_SetAddress>

    return;
 8002170:	e0f7      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00c      	beq.n	8002196 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800218e:	b292      	uxth	r2, r2
 8002190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002194:	e0e5      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00c      	beq.n	80021ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b2:	b292      	uxth	r2, r2
 80021b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021b8:	e0d3      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d034      	beq.n	800222e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0204 	bic.w	r2, r2, #4
 80021d6:	b292      	uxth	r2, r2
 80021d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0208 	bic.w	r2, r2, #8
 80021ee:	b292      	uxth	r2, r2
 80021f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002206:	2100      	movs	r1, #0
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f009 f8d7 	bl	800b3bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f008 ff16 	bl	800b040 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800221c:	b29a      	uxth	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002226:	b292      	uxth	r2, r2
 8002228:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800222c:	e099      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002234:	2b00      	cmp	r3, #0
 8002236:	d027      	beq.n	8002288 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0208 	orr.w	r2, r2, #8
 800224a:	b292      	uxth	r2, r2
 800224c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002262:	b292      	uxth	r2, r2
 8002264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002270:	b29a      	uxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0204 	orr.w	r2, r2, #4
 800227a:	b292      	uxth	r2, r2
 800227c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f008 fec3 	bl	800b00c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002286:	e06c      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	d040      	beq.n	8002314 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	b292      	uxth	r2, r2
 80022a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d12b      	bne.n	800230c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0204 	orr.w	r2, r2, #4
 80022c6:	b292      	uxth	r2, r2
 80022c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	b292      	uxth	r2, r2
 80022e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002302:	2101      	movs	r1, #1
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f009 f859 	bl	800b3bc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800230a:	e02a      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f008 fe7d 	bl	800b00c <HAL_PCD_SuspendCallback>
    return;
 8002312:	e026      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00f      	beq.n	800233e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002330:	b292      	uxth	r2, r2
 8002332:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f008 fe3b 	bl	800afb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800233c:	e011      	b.n	8002362 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800235a:	b292      	uxth	r2, r2
 800235c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002360:	bf00      	nop
  }
}
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_PCD_SetAddress+0x1a>
 800237e:	2302      	movs	r3, #2
 8002380:	e013      	b.n	80023aa <HAL_PCD_SetAddress+0x42>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f006 fb13 	bl	80089c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	4608      	mov	r0, r1
 80023bc:	4611      	mov	r1, r2
 80023be:	461a      	mov	r2, r3
 80023c0:	4603      	mov	r3, r0
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	460b      	mov	r3, r1
 80023c6:	803b      	strh	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da0e      	bge.n	80023f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	705a      	strb	r2, [r3, #1]
 80023f4:	e00e      	b.n	8002414 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0207 	and.w	r2, r3, #7
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002420:	883a      	ldrh	r2, [r7, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	78ba      	ldrb	r2, [r7, #2]
 800242a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800242c:	78bb      	ldrb	r3, [r7, #2]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d102      	bne.n	8002438 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_PCD_EP_Open+0x94>
 8002442:	2302      	movs	r3, #2
 8002444:	e00e      	b.n	8002464 <HAL_PCD_EP_Open+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	4618      	mov	r0, r3
 8002456:	f004 f855 	bl	8006504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002462:	7afb      	ldrb	r3, [r7, #11]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800247c:	2b00      	cmp	r3, #0
 800247e:	da0e      	bge.n	800249e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	705a      	strb	r2, [r3, #1]
 800249c:	e00e      	b.n	80024bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	f003 0207 	and.w	r2, r3, #7
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_PCD_EP_Close+0x6a>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e00e      	b.n	80024f4 <HAL_PCD_EP_Close+0x88>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 fbd1 	bl	8006c8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	460b      	mov	r3, r1
 800250a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250c:	7afb      	ldrb	r3, [r7, #11]
 800250e:	f003 0207 	and.w	r2, r3, #7
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2200      	movs	r2, #0
 800253a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	b2da      	uxtb	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6979      	ldr	r1, [r7, #20]
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fd89 	bl	8007066 <USB_EPStartXfer>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 0207 	and.w	r2, r3, #7
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002580:	681b      	ldr	r3, [r3, #0]
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	460b      	mov	r3, r1
 800259c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4413      	add	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2201      	movs	r2, #1
 80025d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6979      	ldr	r1, [r7, #20]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 fd3a 	bl	8007066 <USB_EPStartXfer>

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d901      	bls.n	800261a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e03e      	b.n	8002698 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800261a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800261e:	2b00      	cmp	r3, #0
 8002620:	da0e      	bge.n	8002640 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	705a      	strb	r2, [r3, #1]
 800263e:	e00c      	b.n	800265a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_PCD_EP_SetStall+0x7e>
 8002676:	2302      	movs	r3, #2
 8002678:	e00e      	b.n	8002698 <HAL_PCD_EP_SetStall+0x9c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	4618      	mov	r0, r3
 800268a:	f006 f89d 	bl	80087c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d901      	bls.n	80026be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e040      	b.n	8002740 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da0e      	bge.n	80026e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	705a      	strb	r2, [r3, #1]
 80026e2:	e00e      	b.n	8002702 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_PCD_EP_ClrStall+0x82>
 800271e:	2302      	movs	r3, #2
 8002720:	e00e      	b.n	8002740 <HAL_PCD_EP_ClrStall+0xa0>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	4618      	mov	r0, r3
 8002732:	f006 f89a 	bl	800886a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b096      	sub	sp, #88	; 0x58
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002750:	e3b1      	b.n	8002eb6 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800275a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800275e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800276c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8173 	bne.w	8002a5c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d150      	bne.n	8002824 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	81fb      	strh	r3, [r7, #14]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3328      	adds	r3, #40	; 0x28
 80027aa:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	441a      	add	r2, r3
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027e2:	2100      	movs	r1, #0
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f008 fbca 	bl	800af7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 835f 	beq.w	8002eb6 <PCD_EP_ISR_Handler+0x76e>
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 835a 	bne.w	8002eb6 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800280e:	b2da      	uxtb	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b292      	uxth	r2, r2
 8002816:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002822:	e348      	b.n	8002eb6 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800282a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002836:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800283a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283e:	2b00      	cmp	r3, #0
 8002840:	d032      	beq.n	80028a8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4413      	add	r3, r2
 800285c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002876:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800287c:	b29b      	uxth	r3, r3
 800287e:	f006 f91f 	bl	8008ac0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29a      	uxth	r2, r3
 800288a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800288e:	4013      	ands	r3, r2
 8002890:	823b      	strh	r3, [r7, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	8a3a      	ldrh	r2, [r7, #16]
 8002898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800289c:	b292      	uxth	r2, r2
 800289e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f008 fb3f 	bl	800af24 <HAL_PCD_SetupStageCallback>
 80028a6:	e306      	b.n	8002eb6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f280 8302 	bge.w	8002eb6 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028be:	4013      	ands	r3, r2
 80028c0:	83fb      	strh	r3, [r7, #30]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	8bfa      	ldrh	r2, [r7, #30]
 80028c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028cc:	b292      	uxth	r2, r2
 80028ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d019      	beq.n	8002934 <PCD_EP_ISR_Handler+0x1ec>
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	6959      	ldr	r1, [r3, #20]
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002918:	b29b      	uxth	r3, r3
 800291a:	f006 f8d1 	bl	8008ac0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800291e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	441a      	add	r2, r3
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800292c:	2100      	movs	r1, #0
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f008 fb0a 	bl	800af48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800293e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 82b5 	bne.w	8002eb6 <PCD_EP_ISR_Handler+0x76e>
 800294c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002950:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002958:	f000 82ad 	beq.w	8002eb6 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002986:	b29a      	uxth	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b3e      	cmp	r3, #62	; 0x3e
 8002992:	d91d      	bls.n	80029d0 <PCD_EP_ISR_Handler+0x288>
 8002994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
 800299c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <PCD_EP_ISR_Handler+0x266>
 80029a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029aa:	3b01      	subs	r3, #1
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	029b      	lsls	r3, r3, #10
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	e026      	b.n	8002a1e <PCD_EP_ISR_Handler+0x2d6>
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <PCD_EP_ISR_Handler+0x2a6>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	e017      	b.n	8002a1e <PCD_EP_ISR_Handler+0x2d6>
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	647b      	str	r3, [r7, #68]	; 0x44
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <PCD_EP_ISR_Handler+0x2c0>
 8002a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a04:	3301      	adds	r3, #1
 8002a06:	647b      	str	r3, [r7, #68]	; 0x44
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4313      	orrs	r3, r2
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	827b      	strh	r3, [r7, #18]
 8002a30:	8a7b      	ldrh	r3, [r7, #18]
 8002a32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a36:	827b      	strh	r3, [r7, #18]
 8002a38:	8a7b      	ldrh	r3, [r7, #18]
 8002a3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a3e:	827b      	strh	r3, [r7, #18]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	8a7b      	ldrh	r3, [r7, #18]
 8002a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	8013      	strh	r3, [r2, #0]
 8002a5a:	e22c      	b.n	8002eb6 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a70:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f280 80f6 	bge.w	8002c66 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a90:	4013      	ands	r3, r2
 8002a92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002aa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aac:	b292      	uxth	r2, r2
 8002aae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ab0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac8:	7b1b      	ldrb	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d123      	bne.n	8002b16 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002af6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 808e 	beq.w	8002c1c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	6959      	ldr	r1, [r3, #20]
 8002b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0a:	88da      	ldrh	r2, [r3, #6]
 8002b0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b10:	f005 ffd6 	bl	8008ac0 <USB_ReadPMA>
 8002b14:	e082      	b.n	8002c1c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b18:	78db      	ldrb	r3, [r3, #3]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d10a      	bne.n	8002b34 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b22:	461a      	mov	r2, r3
 8002b24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f9d3 	bl	8002ed2 <HAL_PCD_EP_DB_Receive>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002b32:	e073      	b.n	8002c1c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	441a      	add	r2, r3
 8002b60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d022      	beq.n	8002bd8 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002bba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d02c      	beq.n	8002c1c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc8:	6959      	ldr	r1, [r3, #20]
 8002bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bcc:	891a      	ldrh	r2, [r3, #8]
 8002bce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bd2:	f005 ff75 	bl	8008ac0 <USB_ReadPMA>
 8002bd6:	e021      	b.n	8002c1c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002c00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	6959      	ldr	r1, [r3, #20]
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	895a      	ldrh	r2, [r3, #10]
 8002c14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c18:	f005 ff52 	bl	8008ac0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c24:	441a      	add	r2, r3
 8002c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c32:	441a      	add	r2, r3
 8002c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c36:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <PCD_EP_ISR_Handler+0x504>
 8002c40:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d206      	bcs.n	8002c5a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f008 f978 	bl	800af48 <HAL_PCD_DataOutStageCallback>
 8002c58:	e005      	b.n	8002c66 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fa00 	bl	8007066 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8121 	beq.w	8002eb6 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	441a      	add	r2, r3
 8002cb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	78db      	ldrb	r3, [r3, #3]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	f040 80a2 	bne.w	8002e12 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd6:	7b1b      	ldrb	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8093 	beq.w	8002e04 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d046      	beq.n	8002d78 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d126      	bne.n	8002d40 <PCD_EP_ISR_Handler+0x5f8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	4413      	add	r3, r2
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	00da      	lsls	r2, r3, #3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	4413      	add	r3, r2
 8002d14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d18:	623b      	str	r3, [r7, #32]
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	e061      	b.n	8002e04 <PCD_EP_ISR_Handler+0x6bc>
 8002d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d15d      	bne.n	8002e04 <PCD_EP_ISR_Handler+0x6bc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	4413      	add	r3, r2
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00da      	lsls	r2, r3, #3
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	2200      	movs	r2, #0
 8002d74:	801a      	strh	r2, [r3, #0]
 8002d76:	e045      	b.n	8002e04 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d80:	785b      	ldrb	r3, [r3, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d126      	bne.n	8002dd4 <PCD_EP_ISR_Handler+0x68c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	4413      	add	r3, r2
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	00da      	lsls	r2, r3, #3
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	4413      	add	r3, r2
 8002da8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	e017      	b.n	8002e04 <PCD_EP_ISR_Handler+0x6bc>
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d113      	bne.n	8002e04 <PCD_EP_ISR_Handler+0x6bc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	4413      	add	r3, r2
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	00da      	lsls	r2, r3, #3
 8002df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df6:	4413      	add	r3, r2
 8002df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f008 f8b7 	bl	800af7e <HAL_PCD_DataInStageCallback>
 8002e10:	e051      	b.n	8002eb6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d144      	bne.n	8002ea8 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d907      	bls.n	8002e62 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e5a:	1ad2      	subs	r2, r2, r3
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5e:	619a      	str	r2, [r3, #24]
 8002e60:	e002      	b.n	8002e68 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f008 f881 	bl	800af7e <HAL_PCD_DataInStageCallback>
 8002e7c:	e01b      	b.n	8002eb6 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e86:	441a      	add	r2, r3
 8002e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e94:	441a      	add	r2, r3
 8002e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e98:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 f8e0 	bl	8007066 <USB_EPStartXfer>
 8002ea6:	e006      	b.n	8002eb6 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ea8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002eac:	461a      	mov	r2, r3
 8002eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f917 	bl	80030e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f6ff ac45 	blt.w	8002752 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3758      	adds	r7, #88	; 0x58
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d07c      	beq.n	8002fe4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	8b7b      	ldrh	r3, [r7, #26]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d306      	bcc.n	8002f28 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	8b7b      	ldrh	r3, [r7, #26]
 8002f20:	1ad2      	subs	r2, r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	619a      	str	r2, [r3, #24]
 8002f26:	e002      	b.n	8002f2e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d123      	bne.n	8002f7e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f50:	833b      	strh	r3, [r7, #24]
 8002f52:	8b3b      	ldrh	r3, [r7, #24]
 8002f54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f58:	833b      	strh	r3, [r7, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	8b3b      	ldrh	r3, [r7, #24]
 8002f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01f      	beq.n	8002fc8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	82fb      	strh	r3, [r7, #22]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	8afb      	ldrh	r3, [r7, #22]
 8002fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8085 	beq.w	80030da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6959      	ldr	r1, [r3, #20]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	891a      	ldrh	r2, [r3, #8]
 8002fdc:	8b7b      	ldrh	r3, [r7, #26]
 8002fde:	f005 fd6f 	bl	8008ac0 <USB_ReadPMA>
 8002fe2:	e07a      	b.n	80030da <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003008:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	8b7b      	ldrh	r3, [r7, #26]
 8003010:	429a      	cmp	r2, r3
 8003012:	d306      	bcc.n	8003022 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	8b7b      	ldrh	r3, [r7, #26]
 800301a:	1ad2      	subs	r2, r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	619a      	str	r2, [r3, #24]
 8003020:	e002      	b.n	8003028 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d123      	bne.n	8003078 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	83fb      	strh	r3, [r7, #30]
 800304c:	8bfb      	ldrh	r3, [r7, #30]
 800304e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003052:	83fb      	strh	r3, [r7, #30]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	8bfb      	ldrh	r3, [r7, #30]
 8003064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003074:	b29b      	uxth	r3, r3
 8003076:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11f      	bne.n	80030c2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309c:	83bb      	strh	r3, [r7, #28]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	441a      	add	r2, r3
 80030ac:	8bbb      	ldrh	r3, [r7, #28]
 80030ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030be:	b29b      	uxth	r3, r3
 80030c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030c2:	8b7b      	ldrh	r3, [r7, #26]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	6959      	ldr	r1, [r3, #20]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	895a      	ldrh	r2, [r3, #10]
 80030d4:	8b7b      	ldrh	r3, [r7, #26]
 80030d6:	f005 fcf3 	bl	8008ac0 <USB_ReadPMA>
    }
  }

  return count;
 80030da:	8b7b      	ldrh	r3, [r7, #26]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0a4      	sub	sp, #144	; 0x90
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 81db 	beq.w	80034b4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4413      	add	r3, r2
 8003118:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003122:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800312e:	429a      	cmp	r2, r3
 8003130:	d907      	bls.n	8003142 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	619a      	str	r2, [r3, #24]
 8003140:	e002      	b.n	8003148 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 80b9 	bne.w	80032c4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d126      	bne.n	80031a8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003168:	b29b      	uxth	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	4413      	add	r3, r2
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	00da      	lsls	r2, r3, #3
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	4413      	add	r3, r2
 800317c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318c:	b29a      	uxth	r2, r3
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	e01a      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0xfa>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d116      	bne.n	80031de <HAL_PCD_EP_DB_Transmit+0xfa>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	4413      	add	r3, r2
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00da      	lsls	r2, r3, #3
 80031ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d126      	bne.n	800323a <HAL_PCD_EP_DB_Transmit+0x156>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	00da      	lsls	r2, r3, #3
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321e:	b29a      	uxth	r2, r3
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	801a      	strh	r2, [r3, #0]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800322e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003232:	b29a      	uxth	r2, r3
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	801a      	strh	r2, [r3, #0]
 8003238:	e017      	b.n	800326a <HAL_PCD_EP_DB_Transmit+0x186>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d113      	bne.n	800326a <HAL_PCD_EP_DB_Transmit+0x186>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	4413      	add	r3, r2
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	00da      	lsls	r2, r3, #3
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	4413      	add	r3, r2
 800325e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	2200      	movs	r2, #0
 8003268:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f007 fe84 	bl	800af7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 82fa 	beq.w	8003876 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329c:	82fb      	strh	r3, [r7, #22]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	441a      	add	r2, r3
 80032ac:	8afb      	ldrh	r3, [r7, #22]
 80032ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032be:	b29b      	uxth	r3, r3
 80032c0:	8013      	strh	r3, [r2, #0]
 80032c2:	e2d8      	b.n	8003876 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d021      	beq.n	8003312 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80032fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003306:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800330a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330e:	b29b      	uxth	r3, r3
 8003310:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 82ac 	bne.w	8003876 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003326:	441a      	add	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003334:	441a      	add	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	6a1a      	ldr	r2, [r3, #32]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	429a      	cmp	r2, r3
 8003344:	d30b      	bcc.n	800335e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	6a1a      	ldr	r2, [r3, #32]
 8003352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	621a      	str	r2, [r3, #32]
 800335c:	e017      	b.n	800338e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003366:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800336a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003376:	e00a      	b.n	800338e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2200      	movs	r2, #0
 800338c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d165      	bne.n	8003462 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033aa:	4413      	add	r3, r2
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	00da      	lsls	r2, r3, #3
 80033b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b6:	4413      	add	r3, r2
 80033b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d2:	2b3e      	cmp	r3, #62	; 0x3e
 80033d4:	d91d      	bls.n	8003412 <HAL_PCD_EP_DB_Transmit+0x32e>
 80033d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80033de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ec:	3b01      	subs	r3, #1
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	4313      	orrs	r3, r2
 8003400:	b29b      	uxth	r3, r3
 8003402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800340a:	b29a      	uxth	r2, r3
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	e044      	b.n	800349c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_PCD_EP_DB_Transmit+0x34c>
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003428:	b29a      	uxth	r2, r3
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	e035      	b.n	800349c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
 8003438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_PCD_EP_DB_Transmit+0x366>
 8003444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003446:	3301      	adds	r3, #1
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29a      	uxth	r2, r3
 8003450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003452:	b29b      	uxth	r3, r3
 8003454:	029b      	lsls	r3, r3, #10
 8003456:	b29b      	uxth	r3, r3
 8003458:	4313      	orrs	r3, r2
 800345a:	b29a      	uxth	r2, r3
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	801a      	strh	r2, [r3, #0]
 8003460:	e01c      	b.n	800349c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d118      	bne.n	800349c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	647b      	str	r3, [r7, #68]	; 0x44
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347e:	4413      	add	r3, r2
 8003480:	647b      	str	r3, [r7, #68]	; 0x44
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	00da      	lsls	r2, r3, #3
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	4413      	add	r3, r2
 800348c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003496:	b29a      	uxth	r2, r3
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6959      	ldr	r1, [r3, #20]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	891a      	ldrh	r2, [r3, #8]
 80034a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f005 fac5 	bl	8008a3c <USB_WritePMA>
 80034b2:	e1e0      	b.n	8003876 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d307      	bcc.n	80034f8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034f0:	1ad2      	subs	r2, r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	619a      	str	r2, [r3, #24]
 80034f6:	e002      	b.n	80034fe <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f040 80c0 	bne.w	8003688 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d126      	bne.n	800355e <HAL_PCD_EP_DB_Transmit+0x47a>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800351e:	b29b      	uxth	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003524:	4413      	add	r3, r2
 8003526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	00da      	lsls	r2, r3, #3
 800352e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003530:	4413      	add	r3, r2
 8003532:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003536:	67bb      	str	r3, [r7, #120]	; 0x78
 8003538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003542:	b29a      	uxth	r2, r3
 8003544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003546:	801a      	strh	r2, [r3, #0]
 8003548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003556:	b29a      	uxth	r2, r3
 8003558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800355a:	801a      	strh	r2, [r3, #0]
 800355c:	e01a      	b.n	8003594 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d116      	bne.n	8003594 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	667b      	str	r3, [r7, #100]	; 0x64
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003574:	b29b      	uxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357a:	4413      	add	r3, r2
 800357c:	667b      	str	r3, [r7, #100]	; 0x64
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00da      	lsls	r2, r3, #3
 8003584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003586:	4413      	add	r3, r2
 8003588:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800358c:	663b      	str	r3, [r7, #96]	; 0x60
 800358e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003590:	2200      	movs	r2, #0
 8003592:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	677b      	str	r3, [r7, #116]	; 0x74
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d12b      	bne.n	80035fa <HAL_PCD_EP_DB_Transmit+0x516>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	4413      	add	r3, r2
 80035b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	00da      	lsls	r2, r3, #3
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	4413      	add	r3, r2
 80035c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d8:	b29a      	uxth	r2, r3
 80035da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	e017      	b.n	800362a <HAL_PCD_EP_DB_Transmit+0x546>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	785b      	ldrb	r3, [r3, #1]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d113      	bne.n	800362a <HAL_PCD_EP_DB_Transmit+0x546>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003610:	4413      	add	r3, r2
 8003612:	677b      	str	r3, [r7, #116]	; 0x74
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	00da      	lsls	r2, r3, #3
 800361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361c:	4413      	add	r3, r2
 800361e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003622:	673b      	str	r3, [r7, #112]	; 0x70
 8003624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003626:	2200      	movs	r2, #0
 8003628:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	4619      	mov	r1, r3
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f007 fca4 	bl	800af7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 811a 	bne.w	8003876 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]
 8003686:	e0f6      	b.n	8003876 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d121      	bne.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 80ca 	bne.w	8003876 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036ea:	441a      	add	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036f8:	441a      	add	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	429a      	cmp	r2, r3
 8003708:	d30b      	bcc.n	8003722 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	621a      	str	r2, [r3, #32]
 8003720:	e017      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800372a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800372e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800373a:	e00a      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2200      	movs	r2, #0
 8003748:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	657b      	str	r3, [r7, #84]	; 0x54
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d165      	bne.n	800382c <HAL_PCD_EP_DB_Transmit+0x748>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376e:	b29b      	uxth	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003774:	4413      	add	r3, r2
 8003776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	00da      	lsls	r2, r3, #3
 800377e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003780:	4413      	add	r3, r2
 8003782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003786:	65bb      	str	r3, [r7, #88]	; 0x58
 8003788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003792:	b29a      	uxth	r2, r3
 8003794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003796:	801a      	strh	r2, [r3, #0]
 8003798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800379c:	2b3e      	cmp	r3, #62	; 0x3e
 800379e:	d91d      	bls.n	80037dc <HAL_PCD_EP_DB_Transmit+0x6f8>
 80037a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <HAL_PCD_EP_DB_Transmit+0x6d6>
 80037b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b6:	3b01      	subs	r3, #1
 80037b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	029b      	lsls	r3, r3, #10
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	e041      	b.n	8003860 <HAL_PCD_EP_DB_Transmit+0x77c>
 80037dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_PCD_EP_DB_Transmit+0x716>
 80037e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	e032      	b.n	8003860 <HAL_PCD_EP_DB_Transmit+0x77c>
 80037fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	66bb      	str	r3, [r7, #104]	; 0x68
 8003802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_PCD_EP_DB_Transmit+0x730>
 800380e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003810:	3301      	adds	r3, #1
 8003812:	66bb      	str	r3, [r7, #104]	; 0x68
 8003814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29a      	uxth	r2, r3
 800381a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800381c:	b29b      	uxth	r3, r3
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	b29b      	uxth	r3, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	b29a      	uxth	r2, r3
 8003826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	e019      	b.n	8003860 <HAL_PCD_EP_DB_Transmit+0x77c>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	785b      	ldrb	r3, [r3, #1]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d115      	bne.n	8003860 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003842:	4413      	add	r3, r2
 8003844:	657b      	str	r3, [r7, #84]	; 0x54
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	00da      	lsls	r2, r3, #3
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	4413      	add	r3, r2
 8003850:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003854:	653b      	str	r3, [r7, #80]	; 0x50
 8003856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800385a:	b29a      	uxth	r2, r3
 800385c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6959      	ldr	r1, [r3, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	895a      	ldrh	r2, [r3, #10]
 800386c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003870:	b29b      	uxth	r3, r3
 8003872:	f005 f8e3 	bl	8008a3c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003890:	82bb      	strh	r3, [r7, #20]
 8003892:	8abb      	ldrh	r3, [r7, #20]
 8003894:	f083 0310 	eor.w	r3, r3, #16
 8003898:	82bb      	strh	r3, [r7, #20]
 800389a:	8abb      	ldrh	r3, [r7, #20]
 800389c:	f083 0320 	eor.w	r3, r3, #32
 80038a0:	82bb      	strh	r3, [r7, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	8abb      	ldrh	r3, [r7, #20]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3790      	adds	r7, #144	; 0x90
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	4613      	mov	r3, r2
 80038e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e009      	b.n	800391a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003906:	897a      	ldrh	r2, [r7, #10]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800391a:	893b      	ldrh	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2200      	movs	r2, #0
 8003924:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	b29a      	uxth	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	80da      	strh	r2, [r3, #6]
 800392e:	e00b      	b.n	8003948 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2201      	movs	r2, #1
 8003934:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	b29a      	uxth	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	b29a      	uxth	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800397a:	b29b      	uxth	r3, r3
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800398e:	b29b      	uxth	r3, r3
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	58000400 	.word	0x58000400

080039cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	58000400 	.word	0x58000400

080039e8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039f6:	6053      	str	r3, [r2, #4]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	58000400 	.word	0x58000400

08003a08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1a:	d101      	bne.n	8003a20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_RCC_HSE_Enable>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_RCC_HSE_Disable>:
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_HSE_IsReady>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a7a:	d101      	bne.n	8003a80 <LL_RCC_HSE_IsReady+0x18>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <LL_RCC_HSE_IsReady+0x1a>
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_RCC_HSI_Enable>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	6013      	str	r3, [r2, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_RCC_HSI_Disable>:
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003abc:	6013      	str	r3, [r2, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_HSI_IsReady>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d101      	bne.n	8003ae0 <LL_RCC_HSI_IsReady+0x18>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <LL_RCC_HSI_IsReady+0x1a>
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_RCC_HSI_SetCalibTrimming>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LL_RCC_HSI48_Enable>:
{
 8003b16:	b480      	push	{r7}
 8003b18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_RCC_HSI48_Disable>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_HSI48_IsReady>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d101      	bne.n	8003b72 <LL_RCC_HSI48_IsReady+0x18>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <LL_RCC_HSI48_IsReady+0x1a>
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_LSE_Enable>:
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_LSE_Disable>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_LSE_EnableBypass>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd2:	f043 0304 	orr.w	r3, r3, #4
 8003bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_RCC_LSE_DisableBypass>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_RCC_LSE_IsReady>:
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d101      	bne.n	8003c1e <LL_RCC_LSE_IsReady+0x18>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <LL_RCC_LSE_IsReady+0x1a>
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_LSI1_Enable>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_RCC_LSI1_Disable>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_LSI1_IsReady>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <LL_RCC_LSI1_IsReady+0x18>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_RCC_LSI1_IsReady+0x1a>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_LSI2_Enable>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_RCC_LSI2_Disable>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_RCC_LSI2_IsReady>:
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d101      	bne.n	8003cee <LL_RCC_LSI2_IsReady+0x18>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <LL_RCC_LSI2_IsReady+0x1a>
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_RCC_LSI2_SetTrimming>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_RCC_MSI_Enable>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_RCC_MSI_Disable>:
{
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6013      	str	r3, [r2, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_RCC_MSI_IsReady>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d101      	bne.n	8003d7a <LL_RCC_MSI_IsReady+0x16>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_RCC_MSI_IsReady+0x18>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_RCC_MSI_SetRange>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_MSI_GetRange>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2bb0      	cmp	r3, #176	; 0xb0
 8003dc4:	d901      	bls.n	8003dca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003dc6:	23b0      	movs	r3, #176	; 0xb0
 8003dc8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003dca:	687b      	ldr	r3, [r7, #4]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <LL_RCC_SetSysClkSource>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 0203 	bic.w	r2, r3, #3
 8003e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_GetSysClkSource>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LL_RCC_SetAHBPrescaler>:
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_SetAHB4Prescaler>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ea6:	f023 020f 	bic.w	r2, r3, #15
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_RCC_SetAPB1Prescaler>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_RCC_SetAPB2Prescaler>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_GetAHBPrescaler>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_GetAHB4Prescaler>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_GetAPB1Prescaler>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_RCC_GetAPB2Prescaler>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc6:	d101      	bne.n	8003fcc <LL_RCC_PLL_IsReady+0x18>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <LL_RCC_PLL_IsReady+0x1a>
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0303 	and.w	r3, r3, #3
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800403a:	b480      	push	{r7}
 800403c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404c:	d101      	bne.n	8004052 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004072:	d101      	bne.n	8004078 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d101      	bne.n	800409e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040bc:	d101      	bne.n	80040c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e0:	d101      	bne.n	80040e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b08d      	sub	sp, #52	; 0x34
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e363      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 808d 	beq.w	800422e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004114:	f7ff fe89 	bl	8003e2a <LL_RCC_GetSysClkSource>
 8004118:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800411a:	f7ff ff82 	bl	8004022 <LL_RCC_PLL_GetMainSource>
 800411e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_RCC_OscConfig+0x3e>
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	2b0c      	cmp	r3, #12
 800412a:	d147      	bne.n	80041bc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	2b01      	cmp	r3, #1
 8004130:	d144      	bne.n	80041bc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e347      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004142:	f7ff fe34 	bl	8003dae <LL_RCC_MSI_GetRange>
 8004146:	4603      	mov	r3, r0
 8004148:	429c      	cmp	r4, r3
 800414a:	d914      	bls.n	8004176 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fd2f 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e336      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fe0e 	bl	8003d86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fe32 	bl	8003dd8 <LL_RCC_MSI_SetCalibTrimming>
 8004174:	e013      	b.n	800419e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fe03 	bl	8003d86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fe27 	bl	8003dd8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fd10 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e317      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800419e:	f000 fcc9 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4aa4      	ldr	r2, [pc, #656]	; (8004438 <HAL_RCC_OscConfig+0x344>)
 80041a6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a8:	4ba4      	ldr	r3, [pc, #656]	; (800443c <HAL_RCC_OscConfig+0x348>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fd f87d 	bl	80012ac <HAL_InitTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d039      	beq.n	800422c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e308      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01e      	beq.n	8004202 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041c4:	f7ff fdb0 	bl	8003d28 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041c8:	f7fd f8be 	bl	8001348 <HAL_GetTick>
 80041cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d0:	f7fd f8ba 	bl	8001348 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e2f5      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041e2:	f7ff fdbf 	bl	8003d64 <LL_RCC_MSI_IsReady>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f1      	beq.n	80041d0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fdc8 	bl	8003d86 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fdec 	bl	8003dd8 <LL_RCC_MSI_SetCalibTrimming>
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004202:	f7ff fda0 	bl	8003d46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004206:	f7fd f89f 	bl	8001348 <HAL_GetTick>
 800420a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800420e:	f7fd f89b 	bl	8001348 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e2d6      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004220:	f7ff fda0 	bl	8003d64 <LL_RCC_MSI_IsReady>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f1      	bne.n	800420e <HAL_RCC_OscConfig+0x11a>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800422c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d047      	beq.n	80042ca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800423a:	f7ff fdf6 	bl	8003e2a <LL_RCC_GetSysClkSource>
 800423e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004240:	f7ff feef 	bl	8004022 <LL_RCC_PLL_GetMainSource>
 8004244:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d005      	beq.n	8004258 <HAL_RCC_OscConfig+0x164>
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d108      	bne.n	8004264 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d105      	bne.n	8004264 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d134      	bne.n	80042ca <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e2b4      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d102      	bne.n	8004274 <HAL_RCC_OscConfig+0x180>
 800426e:	f7ff fbdd 	bl	8003a2c <LL_RCC_HSE_Enable>
 8004272:	e001      	b.n	8004278 <HAL_RCC_OscConfig+0x184>
 8004274:	f7ff fbe9 	bl	8003a4a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd f862 	bl	8001348 <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fd f85e 	bl	8001348 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e299      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800429a:	f7ff fbe5 	bl	8003a68 <LL_RCC_HSE_IsReady>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f1      	beq.n	8004288 <HAL_RCC_OscConfig+0x194>
 80042a4:	e011      	b.n	80042ca <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7fd f84f 	bl	8001348 <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ae:	f7fd f84b 	bl	8001348 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b64      	cmp	r3, #100	; 0x64
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e286      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042c0:	f7ff fbd2 	bl	8003a68 <LL_RCC_HSE_IsReady>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f1      	bne.n	80042ae <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04c      	beq.n	8004370 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	f7ff fda8 	bl	8003e2a <LL_RCC_GetSysClkSource>
 80042da:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042dc:	f7ff fea1 	bl	8004022 <LL_RCC_PLL_GetMainSource>
 80042e0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_OscConfig+0x200>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d10e      	bne.n	800430c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d10b      	bne.n	800430c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e266      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fbf1 	bl	8003aec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800430a:	e031      	b.n	8004370 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004314:	f7ff fbba 	bl	8003a8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fd f816 	bl	8001348 <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004320:	f7fd f812 	bl	8001348 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e24d      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004332:	f7ff fbc9 	bl	8003ac8 <LL_RCC_HSI_IsReady>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f1      	beq.n	8004320 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fbd3 	bl	8003aec <LL_RCC_HSI_SetCalibTrimming>
 8004346:	e013      	b.n	8004370 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004348:	f7ff fbaf 	bl	8003aaa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fc fffc 	bl	8001348 <HAL_GetTick>
 8004350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fc fff8 	bl	8001348 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e233      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004366:	f7ff fbaf 	bl	8003ac8 <LL_RCC_HSI_IsReady>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f1      	bne.n	8004354 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a3 	beq.w	80044d0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d076      	beq.n	8004480 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	d046      	beq.n	800442c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800439e:	f7ff fc66 	bl	8003c6e <LL_RCC_LSI1_IsReady>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d113      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80043a8:	f7ff fc3f 	bl	8003c2a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043ac:	f7fc ffcc 	bl	8001348 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043b4:	f7fc ffc8 	bl	8001348 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e203      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043c6:	f7ff fc52 	bl	8003c6e <LL_RCC_LSI1_IsReady>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f1      	beq.n	80043b4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80043d0:	f7ff fc5f 	bl	8003c92 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fc ffb8 	bl	8001348 <HAL_GetTick>
 80043d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043dc:	f7fc ffb4 	bl	8001348 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1ef      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043ee:	f7ff fc72 	bl	8003cd6 <LL_RCC_LSI2_IsReady>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f1      	beq.n	80043dc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fc7c 	bl	8003cfa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004402:	f7ff fc23 	bl	8003c4c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fc ff9f 	bl	8001348 <HAL_GetTick>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800440e:	f7fc ff9b 	bl	8001348 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1d6      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004420:	f7ff fc25 	bl	8003c6e <LL_RCC_LSI1_IsReady>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f1      	bne.n	800440e <HAL_RCC_OscConfig+0x31a>
 800442a:	e051      	b.n	80044d0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800442c:	f7ff fbfd 	bl	8003c2a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fc ff8a 	bl	8001348 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004436:	e00c      	b.n	8004452 <HAL_RCC_OscConfig+0x35e>
 8004438:	20000008 	.word	0x20000008
 800443c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004440:	f7fc ff82 	bl	8001348 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1bd      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004452:	f7ff fc0c 	bl	8003c6e <LL_RCC_LSI1_IsReady>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f1      	beq.n	8004440 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800445c:	f7ff fc2a 	bl	8003cb4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004462:	f7fc ff71 	bl	8001348 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b03      	cmp	r3, #3
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1ac      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004474:	f7ff fc2f 	bl	8003cd6 <LL_RCC_LSI2_IsReady>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f1      	bne.n	8004462 <HAL_RCC_OscConfig+0x36e>
 800447e:	e027      	b.n	80044d0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004480:	f7ff fc18 	bl	8003cb4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fc ff60 	bl	8001348 <HAL_GetTick>
 8004488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800448c:	f7fc ff5c 	bl	8001348 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b03      	cmp	r3, #3
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e197      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800449e:	f7ff fc1a 	bl	8003cd6 <LL_RCC_LSI2_IsReady>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f1      	bne.n	800448c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80044a8:	f7ff fbd0 	bl	8003c4c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fc ff4c 	bl	8001348 <HAL_GetTick>
 80044b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044b4:	f7fc ff48 	bl	8001348 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e183      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044c6:	f7ff fbd2 	bl	8003c6e <LL_RCC_LSI1_IsReady>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f1      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05b      	beq.n	8004594 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044dc:	4ba7      	ldr	r3, [pc, #668]	; (800477c <HAL_RCC_OscConfig+0x688>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d114      	bne.n	8004512 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80044e8:	f7ff fa60 	bl	80039ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ec:	f7fc ff2c 	bl	8001348 <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fc ff28 	bl	8001348 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e163      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004506:	4b9d      	ldr	r3, [pc, #628]	; (800477c <HAL_RCC_OscConfig+0x688>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <HAL_RCC_OscConfig+0x42c>
 800451a:	f7ff fb30 	bl	8003b7e <LL_RCC_LSE_Enable>
 800451e:	e00c      	b.n	800453a <HAL_RCC_OscConfig+0x446>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d104      	bne.n	8004532 <HAL_RCC_OscConfig+0x43e>
 8004528:	f7ff fb4b 	bl	8003bc2 <LL_RCC_LSE_EnableBypass>
 800452c:	f7ff fb27 	bl	8003b7e <LL_RCC_LSE_Enable>
 8004530:	e003      	b.n	800453a <HAL_RCC_OscConfig+0x446>
 8004532:	f7ff fb35 	bl	8003ba0 <LL_RCC_LSE_Disable>
 8004536:	f7ff fb55 	bl	8003be4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d014      	beq.n	800456c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fc ff01 	bl	8001348 <HAL_GetTick>
 8004546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fc fefd 	bl	8001348 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e136      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004560:	f7ff fb51 	bl	8003c06 <LL_RCC_LSE_IsReady>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0ef      	beq.n	800454a <HAL_RCC_OscConfig+0x456>
 800456a:	e013      	b.n	8004594 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456c:	f7fc feec 	bl	8001348 <HAL_GetTick>
 8004570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004572:	e00a      	b.n	800458a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004574:	f7fc fee8 	bl	8001348 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e121      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800458a:	f7ff fb3c 	bl	8003c06 <LL_RCC_LSE_IsReady>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ef      	bne.n	8004574 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02c      	beq.n	80045fa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d014      	beq.n	80045d2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045a8:	f7ff fab5 	bl	8003b16 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ac:	f7fc fecc 	bl	8001348 <HAL_GetTick>
 80045b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045b4:	f7fc fec8 	bl	8001348 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e103      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045c6:	f7ff fac8 	bl	8003b5a <LL_RCC_HSI48_IsReady>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f1      	beq.n	80045b4 <HAL_RCC_OscConfig+0x4c0>
 80045d0:	e013      	b.n	80045fa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045d2:	f7ff fab1 	bl	8003b38 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fc feb7 	bl	8001348 <HAL_GetTick>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045de:	f7fc feb3 	bl	8001348 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e0ee      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045f0:	f7ff fab3 	bl	8003b5a <LL_RCC_HSI48_IsReady>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f1      	bne.n	80045de <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80e4 	beq.w	80047cc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004604:	f7ff fc11 	bl	8003e2a <LL_RCC_GetSysClkSource>
 8004608:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800460a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	2b02      	cmp	r3, #2
 8004618:	f040 80b4 	bne.w	8004784 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0203 	and.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	429a      	cmp	r2, r3
 8004628:	d123      	bne.n	8004672 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d11c      	bne.n	8004672 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d114      	bne.n	8004672 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d10d      	bne.n	8004672 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d106      	bne.n	8004672 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d05d      	beq.n	800472e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d058      	beq.n	800472a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0a1      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800468a:	f7ff fc84 	bl	8003f96 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800468e:	f7fc fe5b 	bl	8001348 <HAL_GetTick>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fc fe57 	bl	8001348 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e092      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ef      	bne.n	8004696 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	4b30      	ldr	r3, [pc, #192]	; (8004780 <HAL_RCC_OscConfig+0x68c>)
 80046be:	4013      	ands	r3, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c8:	4311      	orrs	r1, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ce:	0212      	lsls	r2, r2, #8
 80046d0:	4311      	orrs	r1, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d6:	4311      	orrs	r1, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046dc:	4311      	orrs	r1, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046e2:	430a      	orrs	r2, r1
 80046e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046ec:	f7ff fc44 	bl	8003f78 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004700:	f7fc fe22 	bl	8001348 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004708:	f7fc fe1e 	bl	8001348 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e059      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ef      	beq.n	8004708 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004728:	e050      	b.n	80047cc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e04f      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d147      	bne.n	80047cc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800473c:	f7ff fc1c 	bl	8003f78 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004750:	f7fc fdfa 	bl	8001348 <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fc fdf6 	bl	8001348 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e031      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <HAL_RCC_OscConfig+0x664>
 8004778:	e028      	b.n	80047cc <HAL_RCC_OscConfig+0x6d8>
 800477a:	bf00      	nop
 800477c:	58000400 	.word	0x58000400
 8004780:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d01e      	beq.n	80047c8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	f7ff fc04 	bl	8003f96 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fc fddb 	bl	8001348 <HAL_GetTick>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004796:	f7fc fdd7 	bl	8001348 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e012      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ef      	bne.n	8004796 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_OscConfig+0x6e4>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
 80047c6:	e001      	b.n	80047cc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3734      	adds	r7, #52	; 0x34
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	bf00      	nop
 80047d8:	eefefffc 	.word	0xeefefffc

080047dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e12d      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f0:	4b98      	ldr	r3, [pc, #608]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d91b      	bls.n	8004836 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b95      	ldr	r3, [pc, #596]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 0207 	bic.w	r2, r3, #7
 8004806:	4993      	ldr	r1, [pc, #588]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480e:	f7fc fd9b 	bl	8001348 <HAL_GetTick>
 8004812:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004814:	e008      	b.n	8004828 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004816:	f7fc fd97 	bl	8001348 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e111      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004828:	4b8a      	ldr	r3, [pc, #552]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d1ef      	bne.n	8004816 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fafb 	bl	8003e42 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800484c:	f7fc fd7c 	bl	8001348 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004854:	f7fc fd78 	bl	8001348 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0f2      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004866:	f7ff fbe8 	bl	800403a <LL_RCC_IsActiveFlag_HPRE>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f1      	beq.n	8004854 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d016      	beq.n	80048aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff faf2 	bl	8003e6a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004886:	f7fc fd5f 	bl	8001348 <HAL_GetTick>
 800488a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800488e:	f7fc fd5b 	bl	8001348 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0d5      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048a0:	f7ff fbdd 	bl	800405e <LL_RCC_IsActiveFlag_C2HPRE>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f1      	beq.n	800488e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff faeb 	bl	8003e96 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048c0:	f7fc fd42 	bl	8001348 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048c8:	f7fc fd3e 	bl	8001348 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0b8      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048da:	f7ff fbd3 	bl	8004084 <LL_RCC_IsActiveFlag_SHDHPRE>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f1      	beq.n	80048c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d016      	beq.n	800491e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fae5 	bl	8003ec4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048fa:	f7fc fd25 	bl	8001348 <HAL_GetTick>
 80048fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004902:	f7fc fd21 	bl	8001348 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e09b      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004914:	f7ff fbc9 	bl	80040aa <LL_RCC_IsActiveFlag_PPRE1>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f1      	beq.n	8004902 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d017      	beq.n	800495a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fadb 	bl	8003eec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004936:	f7fc fd07 	bl	8001348 <HAL_GetTick>
 800493a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800493e:	f7fc fd03 	bl	8001348 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e07d      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004950:	f7ff fbbd 	bl	80040ce <LL_RCC_IsActiveFlag_PPRE2>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f1      	beq.n	800493e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d043      	beq.n	80049ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d106      	bne.n	800497c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800496e:	f7ff f87b 	bl	8003a68 <LL_RCC_HSE_IsReady>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11e      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e067      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d106      	bne.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004984:	f7ff fb16 	bl	8003fb4 <LL_RCC_PLL_IsReady>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d113      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e05c      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800499a:	f7ff f9e3 	bl	8003d64 <LL_RCC_MSI_IsReady>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e051      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80049a8:	f7ff f88e 	bl	8003ac8 <LL_RCC_HSI_IsReady>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e04a      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fa21 	bl	8003e02 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fc fcc2 	bl	8001348 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	e00a      	b.n	80049de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c8:	f7fc fcbe 	bl	8001348 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e036      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	f7ff fa24 	bl	8003e2a <LL_RCC_GetSysClkSource>
 80049e2:	4602      	mov	r2, r0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d1ec      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d21b      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 0207 	bic.w	r2, r3, #7
 8004a04:	4913      	ldr	r1, [pc, #76]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0c:	f7fc fc9c 	bl	8001348 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a14:	f7fc fc98 	bl	8001348 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e012      	b.n	8004a4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_ClockConfig+0x278>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1ef      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a34:	f000 f87e 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <HAL_RCC_ClockConfig+0x27c>)
 8004a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a3e:	f7fc fc8f 	bl	8001360 <HAL_GetTickPrio>
 8004a42:	4603      	mov	r3, r0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fc fc31 	bl	80012ac <HAL_InitTick>
 8004a4a:	4603      	mov	r3, r0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	58004000 	.word	0x58004000
 8004a58:	20000008 	.word	0x20000008

08004a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	f7ff f9e2 	bl	8003e2a <LL_RCC_GetSysClkSource>
 8004a66:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a6e:	f7ff f99e 	bl	8003dae <LL_RCC_MSI_GetRange>
 8004a72:	4603      	mov	r3, r0
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e04b      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d102      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a8a:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e045      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d10a      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a96:	f7fe ffb7 	bl	8003a08 <LL_RCC_HSE_IsEnabledDiv2>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d102      	bne.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004aa0:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e03a      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004aa6:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e037      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004aac:	f7ff fab9 	bl	8004022 <LL_RCC_PLL_GetMainSource>
 8004ab0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x64>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004abe:	e00d      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ac2:	60bb      	str	r3, [r7, #8]
        break;
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ac6:	f7fe ff9f 	bl	8003a08 <LL_RCC_HSE_IsEnabledDiv2>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d102      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ad0:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ad2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ad4:	e00d      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ad6:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ad8:	60bb      	str	r3, [r7, #8]
        break;
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004adc:	f7ff f967 	bl	8003dae <LL_RCC_MSI_GetRange>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	4a0f      	ldr	r2, [pc, #60]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aee:	60bb      	str	r3, [r7, #8]
        break;
 8004af0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004af2:	f7ff fa71 	bl	8003fd8 <LL_RCC_PLL_GetN>
 8004af6:	4602      	mov	r2, r0
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	fb03 f402 	mul.w	r4, r3, r2
 8004afe:	f7ff fa84 	bl	800400a <LL_RCC_PLL_GetDivider>
 8004b02:	4603      	mov	r3, r0
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	3301      	adds	r3, #1
 8004b08:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b0c:	f7ff fa71 	bl	8003ff2 <LL_RCC_PLL_GetR>
 8004b10:	4603      	mov	r3, r0
 8004b12:	0f5b      	lsrs	r3, r3, #29
 8004b14:	3301      	adds	r3, #1
 8004b16:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b1a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd90      	pop	{r4, r7, pc}
 8004b26:	bf00      	nop
 8004b28:	08016580 	.word	0x08016580
 8004b2c:	00f42400 	.word	0x00f42400
 8004b30:	01e84800 	.word	0x01e84800

08004b34 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b34:	b598      	push	{r3, r4, r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b38:	f7ff ff90 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	f7ff f9e9 	bl	8003f14 <LL_RCC_GetAHBPrescaler>
 8004b42:	4603      	mov	r3, r0
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	4a03      	ldr	r2, [pc, #12]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd98      	pop	{r3, r4, r7, pc}
 8004b58:	08016520 	.word	0x08016520

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b598      	push	{r3, r4, r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b60:	f7ff ffe8 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b64:	4604      	mov	r4, r0
 8004b66:	f7ff f9ef 	bl	8003f48 <LL_RCC_GetAPB1Prescaler>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd98      	pop	{r3, r4, r7, pc}
 8004b84:	08016560 	.word	0x08016560

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b598      	push	{r3, r4, r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b8c:	f7ff ffd2 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b90:	4604      	mov	r4, r0
 8004b92:	f7ff f9e5 	bl	8003f60 <LL_RCC_GetAPB2Prescaler>
 8004b96:	4603      	mov	r3, r0
 8004b98:	0adb      	lsrs	r3, r3, #11
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd98      	pop	{r3, r4, r7, pc}
 8004bb0:	08016560 	.word	0x08016560

08004bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2bb0      	cmp	r3, #176	; 0xb0
 8004bc0:	d903      	bls.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e007      	b.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004bda:	f7ff f9a7 	bl	8003f2c <LL_RCC_GetAHB4Prescaler>
 8004bde:	4603      	mov	r3, r0
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	4a0d      	ldr	r2, [pc, #52]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	0c9c      	lsrs	r4, r3, #18
 8004bfe:	f7fe fee5 	bl	80039cc <HAL_PWREx_GetVoltageRange>
 8004c02:	4603      	mov	r3, r0
 8004c04:	4619      	mov	r1, r3
 8004c06:	4620      	mov	r0, r4
 8004c08:	f000 f80c 	bl	8004c24 <RCC_SetFlashLatency>
 8004c0c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	08016580 	.word	0x08016580
 8004c1c:	08016520 	.word	0x08016520
 8004c20:	431bde83 	.word	0x431bde83

08004c24 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b093      	sub	sp, #76	; 0x4c
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c2e:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <RCC_SetFlashLatency+0xe8>)
 8004c30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c3a:	4a35      	ldr	r2, [pc, #212]	; (8004d10 <RCC_SetFlashLatency+0xec>)
 8004c3c:	f107 031c 	add.w	r3, r7, #28
 8004c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c46:	4b33      	ldr	r3, [pc, #204]	; (8004d14 <RCC_SetFlashLatency+0xf0>)
 8004c48:	f107 040c 	add.w	r4, r7, #12
 8004c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c52:	2300      	movs	r3, #0
 8004c54:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5c:	d11a      	bne.n	8004c94 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	643b      	str	r3, [r7, #64]	; 0x40
 8004c62:	e013      	b.n	8004c8c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	3348      	adds	r3, #72	; 0x48
 8004c6a:	443b      	add	r3, r7
 8004c6c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d807      	bhi.n	8004c86 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	3348      	adds	r3, #72	; 0x48
 8004c7c:	443b      	add	r3, r7
 8004c7e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c82:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004c84:	e020      	b.n	8004cc8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c88:	3301      	adds	r3, #1
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d9e8      	bls.n	8004c64 <RCC_SetFlashLatency+0x40>
 8004c92:	e019      	b.n	8004cc8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c98:	e013      	b.n	8004cc2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	3348      	adds	r3, #72	; 0x48
 8004ca0:	443b      	add	r3, r7
 8004ca2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d807      	bhi.n	8004cbc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	3348      	adds	r3, #72	; 0x48
 8004cb2:	443b      	add	r3, r7
 8004cb4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cb8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cba:	e005      	b.n	8004cc8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d9e8      	bls.n	8004c9a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <RCC_SetFlashLatency+0xf4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 0207 	bic.w	r2, r3, #7
 8004cd0:	4911      	ldr	r1, [pc, #68]	; (8004d18 <RCC_SetFlashLatency+0xf4>)
 8004cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cd8:	f7fc fb36 	bl	8001348 <HAL_GetTick>
 8004cdc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cde:	e008      	b.n	8004cf2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ce0:	f7fc fb32 	bl	8001348 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e007      	b.n	8004d02 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <RCC_SetFlashLatency+0xf4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d1ef      	bne.n	8004ce0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	374c      	adds	r7, #76	; 0x4c
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd90      	pop	{r4, r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	080164ac 	.word	0x080164ac
 8004d10:	080164bc 	.word	0x080164bc
 8004d14:	080164c8 	.word	0x080164c8
 8004d18:	58004000 	.word	0x58004000

08004d1c <LL_RCC_LSE_IsEnabled>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <LL_RCC_LSE_IsEnabled+0x18>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <LL_RCC_LSE_IsEnabled+0x1a>
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_RCC_LSE_IsReady>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d101      	bne.n	8004d58 <LL_RCC_LSE_IsReady+0x18>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <LL_RCC_LSE_IsReady+0x1a>
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_RCC_SetRFWKPClockSource>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <LL_RCC_SetSMPSClockSource>:
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <LL_RCC_SetSMPSPrescaler>:
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_SetUSARTClockSource>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 0203 	bic.w	r2, r3, #3
 8004df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <LL_RCC_SetLPUARTClockSource>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LL_RCC_SetI2CClockSource>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_SetLPTIMClockSource>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_SetSAIClockSource>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_SetRNGClockSource>:
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_SetCLK48ClockSource>:
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <LL_RCC_SetUSBClockSource>:
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ffe3 	bl	8004efe <LL_RCC_SetCLK48ClockSource>
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <LL_RCC_SetADCClockSource>:
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <LL_RCC_SetRTCClockSource>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_RCC_GetRTCClockSource>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_ForceBackupDomainReset>:
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fca:	bf00      	nop
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_PLLSAI1_Enable>:
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005008:	6013      	str	r3, [r2, #0]
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_RCC_PLLSAI1_Disable>:
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005026:	6013      	str	r3, [r2, #0]
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <LL_RCC_PLLSAI1_IsReady>:
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005044:	d101      	bne.n	800504a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b088      	sub	sp, #32
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800505e:	2300      	movs	r3, #0
 8005060:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005062:	2300      	movs	r3, #0
 8005064:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d034      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800507a:	d021      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800507c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005080:	d81b      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005086:	d01d      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005088:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800508c:	d815      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x64>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005096:	d110      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80050a8:	e00d      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f947 	bl	8005342 <RCCEx_PLLSAI1_ConfigNP>
 80050b4:	4603      	mov	r3, r0
 80050b6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050b8:	e005      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	77fb      	strb	r3, [r7, #31]
        break;
 80050be:	e002      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050c0:	bf00      	nop
 80050c2:	e000      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c6:	7ffb      	ldrb	r3, [r7, #31]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fee8 	bl	8004ea6 <LL_RCC_SetSAIClockSource>
 80050d6:	e001      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	7ffb      	ldrb	r3, [r7, #31]
 80050da:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d046      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80050e8:	f7ff ff56 	bl	8004f98 <LL_RCC_GetRTCClockSource>
 80050ec:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d03c      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050f8:	f7fe fc58 	bl	80039ac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff ff30 	bl	8004f6c <LL_RCC_SetRTCClockSource>
 800510c:	e02e      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005118:	f7ff ff4b 	bl	8004fb2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800511c:	f7ff ff5a 	bl	8004fd4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800512e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005138:	f7ff fdf0 	bl	8004d1c <LL_RCC_LSE_IsEnabled>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d114      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005142:	f7fc f901 	bl	8001348 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005148:	e00b      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fc f8fd 	bl	8001348 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d902      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	77fb      	strb	r3, [r7, #31]
              break;
 8005160:	e004      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005162:	f7ff fded 	bl	8004d40 <LL_RCC_LSE_IsReady>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d1ee      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800516c:	7ffb      	ldrb	r3, [r7, #31]
 800516e:	77bb      	strb	r3, [r7, #30]
 8005170:	e001      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005172:	7ffb      	ldrb	r3, [r7, #31]
 8005174:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fe2a 	bl	8004de0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fe35 	bl	8004e0c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff fe5d 	bl	8004e72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fe52 	bl	8004e72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fe2a 	bl	8004e38 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fe1f 	bl	8004e38 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d022      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff fe8d 	bl	8004f2a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005218:	d107      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800521a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005228:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005232:	d10b      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f8dd 	bl	80053f8 <RCCEx_PLLSAI1_ConfigNQ>
 800523e:	4603      	mov	r3, r0
 8005240:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005248:	7ffb      	ldrb	r3, [r7, #31]
 800524a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005254:	2b00      	cmp	r3, #0
 8005256:	d02b      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d008      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526a:	d003      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff fe2a 	bl	8004ed2 <LL_RCC_SetRNGClockSource>
 800527e:	e00a      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	2000      	movs	r0, #0
 800528c:	f7ff fe21 	bl	8004ed2 <LL_RCC_SetRNGClockSource>
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff fe34 	bl	8004efe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800529e:	d107      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d022      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fe3d 	bl	8004f40 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ce:	d107      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052de:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052e8:	d10b      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 f8dd 	bl	80054ae <RCCEx_PLLSAI1_ConfigNR>
 80052f4:	4603      	mov	r3, r0
 80052f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052f8:	7ffb      	ldrb	r3, [r7, #31]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80052fe:	7ffb      	ldrb	r3, [r7, #31]
 8005300:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fd26 	bl	8004d64 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fd45 	bl	8004db8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fd2c 	bl	8004d90 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005338:	7fbb      	ldrb	r3, [r7, #30]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800534e:	f7ff fe61 	bl	8005014 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005352:	f7fb fff9 	bl	8001348 <HAL_GetTick>
 8005356:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005358:	e009      	b.n	800536e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800535a:	f7fb fff5 	bl	8001348 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d902      	bls.n	800536e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e004      	b.n	8005378 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800536e:	f7ff fe60 	bl	8005032 <LL_RCC_PLLSAI1_IsReady>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d137      	bne.n	80053ee <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005392:	4313      	orrs	r3, r2
 8005394:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a8:	4313      	orrs	r3, r2
 80053aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053ac:	f7ff fe23 	bl	8004ff6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b0:	f7fb ffca 	bl	8001348 <HAL_GetTick>
 80053b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053b6:	e009      	b.n	80053cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053b8:	f7fb ffc6 	bl	8001348 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d902      	bls.n	80053cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	73fb      	strb	r3, [r7, #15]
        break;
 80053ca:	e004      	b.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053cc:	f7ff fe31 	bl	8005032 <LL_RCC_PLLSAI1_IsReady>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d1f0      	bne.n	80053b8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d108      	bne.n	80053ee <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ea:	4313      	orrs	r3, r2
 80053ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005404:	f7ff fe06 	bl	8005014 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005408:	f7fb ff9e 	bl	8001348 <HAL_GetTick>
 800540c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800540e:	e009      	b.n	8005424 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005410:	f7fb ff9a 	bl	8001348 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d902      	bls.n	8005424 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	73fb      	strb	r3, [r7, #15]
      break;
 8005422:	e004      	b.n	800542e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005424:	f7ff fe05 	bl	8005032 <LL_RCC_PLLSAI1_IsReady>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d137      	bne.n	80054a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005448:	4313      	orrs	r3, r2
 800544a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800545e:	4313      	orrs	r3, r2
 8005460:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005462:	f7ff fdc8 	bl	8004ff6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005466:	f7fb ff6f 	bl	8001348 <HAL_GetTick>
 800546a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800546c:	e009      	b.n	8005482 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800546e:	f7fb ff6b 	bl	8001348 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d902      	bls.n	8005482 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	73fb      	strb	r3, [r7, #15]
        break;
 8005480:	e004      	b.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005482:	f7ff fdd6 	bl	8005032 <LL_RCC_PLLSAI1_IsReady>
 8005486:	4603      	mov	r3, r0
 8005488:	2b01      	cmp	r3, #1
 800548a:	d1f0      	bne.n	800546e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054a0:	4313      	orrs	r3, r2
 80054a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054ba:	f7ff fdab 	bl	8005014 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054be:	f7fb ff43 	bl	8001348 <HAL_GetTick>
 80054c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054c4:	e009      	b.n	80054da <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c6:	f7fb ff3f 	bl	8001348 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d902      	bls.n	80054da <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	73fb      	strb	r3, [r7, #15]
      break;
 80054d8:	e004      	b.n	80054e4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054da:	f7ff fdaa 	bl	8005032 <LL_RCC_PLLSAI1_IsReady>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1f0      	bne.n	80054c6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d137      	bne.n	800555a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054fe:	4313      	orrs	r3, r2
 8005500:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005514:	4313      	orrs	r3, r2
 8005516:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005518:	f7ff fd6d 	bl	8004ff6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551c:	f7fb ff14 	bl	8001348 <HAL_GetTick>
 8005520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005522:	e009      	b.n	8005538 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005524:	f7fb ff10 	bl	8001348 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d902      	bls.n	8005538 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	73fb      	strb	r3, [r7, #15]
        break;
 8005536:	e004      	b.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005538:	f7ff fd7b 	bl	8005032 <LL_RCC_PLLSAI1_IsReady>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d1f0      	bne.n	8005524 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e027      	b.n	80055c6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7a5b      	ldrb	r3, [r3, #9]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fb fc8e 	bl	8000ea8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 0120 	bic.w	r1, r3, #32
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0204 	orr.w	r2, r2, #4
 80055b6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	7a1b      	ldrb	r3, [r3, #8]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_RNG_GenerateRandomNumber+0x1a>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e044      	b.n	8005672 <HAL_RNG_GenerateRandomNumber+0xa4>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7a5b      	ldrb	r3, [r3, #9]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d133      	bne.n	8005660 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055fe:	f7fb fea3 	bl	8001348 <HAL_GetTick>
 8005602:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005604:	e018      	b.n	8005638 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005606:	f7fb fe9f 	bl	8001348 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d911      	bls.n	8005638 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d00a      	beq.n	8005638 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e01c      	b.n	8005672 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d1df      	bne.n	8005606 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	725a      	strb	r2, [r3, #9]
 800565e:	e004      	b.n	800566a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2204      	movs	r2, #4
 8005664:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	721a      	strb	r2, [r3, #8]

  return status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e09f      	b.n	80057ce <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fb fc2a 	bl	8000efc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80056b0:	4b49      	ldr	r3, [pc, #292]	; (80057d8 <HAL_RTC_Init+0x15c>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d07e      	beq.n	80057ba <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	22ca      	movs	r2, #202	; 0xca
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2253      	movs	r2, #83	; 0x53
 80056ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8ab 	bl	8005828 <RTC_EnterInitMode>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2204      	movs	r2, #4
 80056e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e067      	b.n	80057be <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005700:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6899      	ldr	r1, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	68d2      	ldr	r2, [r2, #12]
 8005728:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6919      	ldr	r1, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	041a      	lsls	r2, r3, #16
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0203 	bic.w	r2, r2, #3
 800575c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d113      	bne.n	80057ac <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f829 	bl	80057dc <HAL_RTC_WaitForSynchro>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	22ff      	movs	r2, #255	; 0xff
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2204      	movs	r2, #4
 800579c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e010      	b.n	80057ce <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]
 80057b8:	e001      	b.n	80057be <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40002800 	.word	0x40002800

080057dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80057f4:	f7fb fda8 	bl	8001348 <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057fa:	e009      	b.n	8005810 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057fc:	f7fb fda4 	bl	8001348 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800580a:	d901      	bls.n	8005810 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e007      	b.n	8005820 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ee      	beq.n	80057fc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d119      	bne.n	8005872 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f04f 32ff 	mov.w	r2, #4294967295
 8005846:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005848:	f7fb fd7e 	bl	8001348 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800584e:	e009      	b.n	8005864 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005850:	f7fb fd7a 	bl	8001348 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800585e:	d901      	bls.n	8005864 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e007      	b.n	8005874 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0ee      	beq.n	8005850 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8005892:	2302      	movs	r3, #2
 8005894:	e089      	b.n	80059aa <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	22ca      	movs	r2, #202	; 0xca
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2253      	movs	r2, #83	; 0x53
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80058c4:	f7fb fd40 	bl	8001348 <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80058ca:	e015      	b.n	80058f8 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058cc:	f7fb fd3c 	bl	8001348 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058da:	d90d      	bls.n	80058f8 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	22ff      	movs	r2, #255	; 0xff
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2203      	movs	r2, #3
 80058e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e058      	b.n	80059aa <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e2      	bne.n	80058cc <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005914:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005916:	f7fb fd17 	bl	8001348 <HAL_GetTick>
 800591a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800591c:	e015      	b.n	800594a <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800591e:	f7fb fd13 	bl	8001348 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800592c:	d90d      	bls.n	800594a <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2203      	movs	r2, #3
 800593a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e02f      	b.n	80059aa <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0e2      	beq.n	800591e <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0207 	bic.w	r2, r2, #7
 8005966:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6899      	ldr	r1, [r3, #8]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	430a      	orrs	r2, r1
 8005976:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800598e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <LL_RCC_GetUSARTClockSource>:
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80059ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4013      	ands	r3, r2
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_RCC_GetLPUARTClockSource>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4013      	ands	r3, r2
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e042      	b.n	8005a8a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fb fa9c 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2224      	movs	r2, #36	; 0x24
 8005a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f82d 	bl	8005a94 <UART_SetConfig>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e022      	b.n	8005a8a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fa49 	bl	8005ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0201 	orr.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fad0 	bl	8006028 <UART_CheckIdleState>
 8005a88:	4603      	mov	r3, r0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a98:	b08c      	sub	sp, #48	; 0x30
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4baf      	ldr	r3, [pc, #700]	; (8005d80 <UART_SetConfig+0x2ec>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4aa4      	ldr	r2, [pc, #656]	; (8005d84 <UART_SetConfig+0x2f0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afc:	4313      	orrs	r3, r2
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b14:	430b      	orrs	r3, r1
 8005b16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	f023 010f 	bic.w	r1, r3, #15
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a95      	ldr	r2, [pc, #596]	; (8005d88 <UART_SetConfig+0x2f4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d125      	bne.n	8005b84 <UART_SetConfig+0xf0>
 8005b38:	2003      	movs	r0, #3
 8005b3a:	f7ff ff3a 	bl	80059b2 <LL_RCC_GetUSARTClockSource>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d81b      	bhi.n	8005b7c <UART_SetConfig+0xe8>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0xb8>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005b65 	.word	0x08005b65
 8005b58:	08005b75 	.word	0x08005b75
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b62:	e042      	b.n	8005bea <UART_SetConfig+0x156>
 8005b64:	2302      	movs	r3, #2
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6a:	e03e      	b.n	8005bea <UART_SetConfig+0x156>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b72:	e03a      	b.n	8005bea <UART_SetConfig+0x156>
 8005b74:	2308      	movs	r3, #8
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7a:	e036      	b.n	8005bea <UART_SetConfig+0x156>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b82:	e032      	b.n	8005bea <UART_SetConfig+0x156>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a7e      	ldr	r2, [pc, #504]	; (8005d84 <UART_SetConfig+0x2f0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d12a      	bne.n	8005be4 <UART_SetConfig+0x150>
 8005b8e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005b92:	f7ff ff1e 	bl	80059d2 <LL_RCC_GetLPUARTClockSource>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9c:	d01a      	beq.n	8005bd4 <UART_SetConfig+0x140>
 8005b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba2:	d81b      	bhi.n	8005bdc <UART_SetConfig+0x148>
 8005ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba8:	d00c      	beq.n	8005bc4 <UART_SetConfig+0x130>
 8005baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bae:	d815      	bhi.n	8005bdc <UART_SetConfig+0x148>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <UART_SetConfig+0x128>
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d008      	beq.n	8005bcc <UART_SetConfig+0x138>
 8005bba:	e00f      	b.n	8005bdc <UART_SetConfig+0x148>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc2:	e012      	b.n	8005bea <UART_SetConfig+0x156>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bca:	e00e      	b.n	8005bea <UART_SetConfig+0x156>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e00a      	b.n	8005bea <UART_SetConfig+0x156>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e006      	b.n	8005bea <UART_SetConfig+0x156>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e002      	b.n	8005bea <UART_SetConfig+0x156>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a65      	ldr	r2, [pc, #404]	; (8005d84 <UART_SetConfig+0x2f0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	f040 8097 	bne.w	8005d24 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d823      	bhi.n	8005c46 <UART_SetConfig+0x1b2>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x170>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c47 	.word	0x08005c47
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c47 	.word	0x08005c47
 8005c14:	08005c37 	.word	0x08005c37
 8005c18:	08005c47 	.word	0x08005c47
 8005c1c:	08005c47 	.word	0x08005c47
 8005c20:	08005c47 	.word	0x08005c47
 8005c24:	08005c3f 	.word	0x08005c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c28:	f7fe ff98 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c2e:	e010      	b.n	8005c52 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c30:	4b56      	ldr	r3, [pc, #344]	; (8005d8c <UART_SetConfig+0x2f8>)
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c34:	e00d      	b.n	8005c52 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c36:	f7fe ff11 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8005c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3c:	e009      	b.n	8005c52 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c44:	e005      	b.n	8005c52 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 812b 	beq.w	8005eb0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	4a4c      	ldr	r2, [pc, #304]	; (8005d90 <UART_SetConfig+0x2fc>)
 8005c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4413      	add	r3, r2
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d305      	bcc.n	8005c8a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d903      	bls.n	8005c92 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c90:	e10e      	b.n	8005eb0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	2200      	movs	r2, #0
 8005c96:	60bb      	str	r3, [r7, #8]
 8005c98:	60fa      	str	r2, [r7, #12]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	4a3c      	ldr	r2, [pc, #240]	; (8005d90 <UART_SetConfig+0x2fc>)
 8005ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cb4:	f7fa fabc 	bl	8000230 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	020b      	lsls	r3, r1, #8
 8005cca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cce:	0202      	lsls	r2, r0, #8
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	6849      	ldr	r1, [r1, #4]
 8005cd4:	0849      	lsrs	r1, r1, #1
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	4605      	mov	r5, r0
 8005cdc:	eb12 0804 	adds.w	r8, r2, r4
 8005ce0:	eb43 0905 	adc.w	r9, r3, r5
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	469a      	mov	sl, r3
 8005cec:	4693      	mov	fp, r2
 8005cee:	4652      	mov	r2, sl
 8005cf0:	465b      	mov	r3, fp
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	f7fa fa9b 	bl	8000230 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4613      	mov	r3, r2
 8005d00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d08:	d308      	bcc.n	8005d1c <UART_SetConfig+0x288>
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d10:	d204      	bcs.n	8005d1c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6a3a      	ldr	r2, [r7, #32]
 8005d18:	60da      	str	r2, [r3, #12]
 8005d1a:	e0c9      	b.n	8005eb0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d22:	e0c5      	b.n	8005eb0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2c:	d16d      	bne.n	8005e0a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b07      	cmp	r3, #7
 8005d36:	d82d      	bhi.n	8005d94 <UART_SetConfig+0x300>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x2ac>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d61 	.word	0x08005d61
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d95 	.word	0x08005d95
 8005d4c:	08005d6f 	.word	0x08005d6f
 8005d50:	08005d95 	.word	0x08005d95
 8005d54:	08005d95 	.word	0x08005d95
 8005d58:	08005d95 	.word	0x08005d95
 8005d5c:	08005d77 	.word	0x08005d77
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d60:	f7fe ff12 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8005d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d66:	e01b      	b.n	8005da0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d68:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <UART_SetConfig+0x2f8>)
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d6c:	e018      	b.n	8005da0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6e:	f7fe fe75 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8005d72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d74:	e014      	b.n	8005da0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d7c:	e010      	b.n	8005da0 <UART_SetConfig+0x30c>
 8005d7e:	bf00      	nop
 8005d80:	cfff69f3 	.word	0xcfff69f3
 8005d84:	40008000 	.word	0x40008000
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	080165c0 	.word	0x080165c0
      default:
        pclk = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8084 	beq.w	8005eb0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	4a4b      	ldr	r2, [pc, #300]	; (8005edc <UART_SetConfig+0x448>)
 8005dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dba:	005a      	lsls	r2, r3, #1
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	441a      	add	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dcc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2b0f      	cmp	r3, #15
 8005dd2:	d916      	bls.n	8005e02 <UART_SetConfig+0x36e>
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dda:	d212      	bcs.n	8005e02 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f023 030f 	bic.w	r3, r3, #15
 8005de4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	8bfb      	ldrh	r3, [r7, #30]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	8bfa      	ldrh	r2, [r7, #30]
 8005dfe:	60da      	str	r2, [r3, #12]
 8005e00:	e056      	b.n	8005eb0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e08:	e052      	b.n	8005eb0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b07      	cmp	r3, #7
 8005e12:	d822      	bhi.n	8005e5a <UART_SetConfig+0x3c6>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x388>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e3d 	.word	0x08005e3d
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e5b 	.word	0x08005e5b
 8005e28:	08005e4b 	.word	0x08005e4b
 8005e2c:	08005e5b 	.word	0x08005e5b
 8005e30:	08005e5b 	.word	0x08005e5b
 8005e34:	08005e5b 	.word	0x08005e5b
 8005e38:	08005e53 	.word	0x08005e53
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fe fea4 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8005e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e42:	e010      	b.n	8005e66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b26      	ldr	r3, [pc, #152]	; (8005ee0 <UART_SetConfig+0x44c>)
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e48:	e00d      	b.n	8005e66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7fe fe07 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e50:	e009      	b.n	8005e66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e58:	e005      	b.n	8005e66 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e64:	bf00      	nop
    }

    if (pclk != 0U)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d021      	beq.n	8005eb0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <UART_SetConfig+0x448>)
 8005e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	441a      	add	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	2b0f      	cmp	r3, #15
 8005e94:	d909      	bls.n	8005eaa <UART_SetConfig+0x416>
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9c:	d205      	bcs.n	8005eaa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
 8005ea8:	e002      	b.n	8005eb0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ecc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3730      	adds	r7, #48	; 0x30
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eda:	bf00      	nop
 8005edc:	080165c0 	.word	0x080165c0
 8005ee0:	00f42400 	.word	0x00f42400

08005ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01a      	beq.n	8005ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe2:	d10a      	bne.n	8005ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af02      	add	r7, sp, #8
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006038:	f7fb f986 	bl	8001348 <HAL_GetTick>
 800603c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b08      	cmp	r3, #8
 800604a:	d10e      	bne.n	800606a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800604c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f832 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e028      	b.n	80060bc <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b04      	cmp	r3, #4
 8006076:	d10e      	bne.n	8006096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f81c 	bl	80060c4 <UART_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e012      	b.n	80060bc <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b09c      	sub	sp, #112	; 0x70
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d4:	e0a9      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	f000 80a5 	beq.w	800622a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e0:	f7fb f932 	bl	8001348 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <UART_WaitOnFlagUntilTimeout+0x32>
 80060f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d140      	bne.n	8006178 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006106:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800610a:	667b      	str	r3, [r7, #100]	; 0x64
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006116:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800611a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e6      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	663b      	str	r3, [r7, #96]	; 0x60
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006148:	64ba      	str	r2, [r7, #72]	; 0x48
 800614a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800614e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e069      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d051      	beq.n	800622a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006194:	d149      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800619e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
 80061c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e6      	bne.n	80061a0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	613b      	str	r3, [r7, #16]
   return(result);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061f2:	623a      	str	r2, [r7, #32]
 80061f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	69f9      	ldr	r1, [r7, #28]
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e5      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e010      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	429a      	cmp	r2, r3
 8006246:	f43f af46 	beq.w	80060d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3770      	adds	r7, #112	; 0x70
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_UARTEx_DisableFifoMode+0x16>
 8006266:	2302      	movs	r3, #2
 8006268:	e027      	b.n	80062ba <HAL_UARTEx_DisableFifoMode+0x66>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2224      	movs	r2, #36	; 0x24
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006298:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062da:	2302      	movs	r3, #2
 80062dc:	e02d      	b.n	800633a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2224      	movs	r2, #36	; 0x24
 80062ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0201 	bic.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f850 	bl	80063c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006356:	2302      	movs	r3, #2
 8006358:	e02d      	b.n	80063b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2224      	movs	r2, #36	; 0x24
 8006366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f812 	bl	80063c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063e0:	e031      	b.n	8006446 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063e2:	2308      	movs	r3, #8
 80063e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063e6:	2308      	movs	r3, #8
 80063e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	0e5b      	lsrs	r3, r3, #25
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	0f5b      	lsrs	r3, r3, #29
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	7b3a      	ldrb	r2, [r7, #12]
 800640e:	4911      	ldr	r1, [pc, #68]	; (8006454 <UARTEx_SetNbDataToProcess+0x94>)
 8006410:	5c8a      	ldrb	r2, [r1, r2]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006416:	7b3a      	ldrb	r2, [r7, #12]
 8006418:	490f      	ldr	r1, [pc, #60]	; (8006458 <UARTEx_SetNbDataToProcess+0x98>)
 800641a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800641c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	7b7a      	ldrb	r2, [r7, #13]
 800642c:	4909      	ldr	r1, [pc, #36]	; (8006454 <UARTEx_SetNbDataToProcess+0x94>)
 800642e:	5c8a      	ldrb	r2, [r1, r2]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006434:	7b7a      	ldrb	r2, [r7, #13]
 8006436:	4908      	ldr	r1, [pc, #32]	; (8006458 <UARTEx_SetNbDataToProcess+0x98>)
 8006438:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643a:	fb93 f3f2 	sdiv	r3, r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	080165d8 	.word	0x080165d8
 8006458:	080165e0 	.word	0x080165e0

0800645c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800646c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006470:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	b29a      	uxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006492:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006496:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4013      	ands	r3, r2
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064c0:	b084      	sub	sp, #16
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	f107 0014 	add.w	r0, r7, #20
 80064ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	b004      	add	sp, #16
 8006500:	4770      	bx	lr
	...

08006504 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006504:	b480      	push	{r7}
 8006506:	b09d      	sub	sp, #116	; 0x74
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	78db      	ldrb	r3, [r3, #3]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d81f      	bhi.n	8006576 <USB_ActivateEndpoint+0x72>
 8006536:	a201      	add	r2, pc, #4	; (adr r2, 800653c <USB_ActivateEndpoint+0x38>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	0800654d 	.word	0x0800654d
 8006540:	08006569 	.word	0x08006569
 8006544:	0800657f 	.word	0x0800657f
 8006548:	0800655b 	.word	0x0800655b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800654c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006554:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006558:	e012      	b.n	8006580 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800655a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800655e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006562:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006566:	e00b      	b.n	8006580 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800656c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006570:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006574:	e004      	b.n	8006580 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800657c:	e000      	b.n	8006580 <USB_ActivateEndpoint+0x7c>
      break;
 800657e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800658e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659e:	b29b      	uxth	r3, r3
 80065a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	b21b      	sxth	r3, r3
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ba:	b21a      	sxth	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	b21b      	sxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b21b      	sxth	r3, r3
 80065c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	7b1b      	ldrb	r3, [r3, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8178 	bne.w	80068e6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8084 	beq.w	8006708 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	4413      	add	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	827b      	strh	r3, [r7, #18]
 8006642:	8a7b      	ldrh	r3, [r7, #18]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <USB_ActivateEndpoint+0x180>
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	823b      	strh	r3, [r7, #16]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	8a3b      	ldrh	r3, [r7, #16]
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	78db      	ldrb	r3, [r3, #3]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d020      	beq.n	80066ce <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a2:	81bb      	strh	r3, [r7, #12]
 80066a4:	89bb      	ldrh	r3, [r7, #12]
 80066a6:	f083 0320 	eor.w	r3, r3, #32
 80066aa:	81bb      	strh	r3, [r7, #12]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	89bb      	ldrh	r3, [r7, #12]
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
 80066cc:	e2d5      	b.n	8006c7a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e4:	81fb      	strh	r3, [r7, #14]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	89fb      	ldrh	r3, [r7, #14]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]
 8006706:	e2b8      	b.n	8006c7a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	633b      	str	r3, [r7, #48]	; 0x30
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	4413      	add	r3, r2
 800671a:	633b      	str	r3, [r7, #48]	; 0x30
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	00da      	lsls	r2, r3, #3
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	4413      	add	r3, r2
 8006726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	88db      	ldrh	r3, [r3, #6]
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	b29b      	uxth	r3, r3
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	4413      	add	r3, r2
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	00da      	lsls	r2, r3, #3
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	4413      	add	r3, r2
 800675a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676a:	b29a      	uxth	r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b3e      	cmp	r3, #62	; 0x3e
 8006776:	d91d      	bls.n	80067b4 <USB_ActivateEndpoint+0x2b0>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <USB_ActivateEndpoint+0x28e>
 800678c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800678e:	3b01      	subs	r3, #1
 8006790:	66bb      	str	r3, [r7, #104]	; 0x68
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29a      	uxth	r2, r3
 8006798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800679a:	b29b      	uxth	r3, r3
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	b29b      	uxth	r3, r3
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	e026      	b.n	8006802 <USB_ActivateEndpoint+0x2fe>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <USB_ActivateEndpoint+0x2ce>
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	e017      	b.n	8006802 <USB_ActivateEndpoint+0x2fe>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <USB_ActivateEndpoint+0x2e8>
 80067e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067e8:	3301      	adds	r3, #1
 80067ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <USB_ActivateEndpoint+0x34e>
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	843b      	strh	r3, [r7, #32]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	8c3b      	ldrh	r3, [r7, #32]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d124      	bne.n	80068a4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800686c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006870:	83bb      	strh	r3, [r7, #28]
 8006872:	8bbb      	ldrh	r3, [r7, #28]
 8006874:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006878:	83bb      	strh	r3, [r7, #28]
 800687a:	8bbb      	ldrh	r3, [r7, #28]
 800687c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006880:	83bb      	strh	r3, [r7, #28]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	8bbb      	ldrh	r3, [r7, #28]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
 80068a2:	e1ea      	b.n	8006c7a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	83fb      	strh	r3, [r7, #30]
 80068bc:	8bfb      	ldrh	r3, [r7, #30]
 80068be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068c2:	83fb      	strh	r3, [r7, #30]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	8bfb      	ldrh	r3, [r7, #30]
 80068d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8013      	strh	r3, [r2, #0]
 80068e4:	e1c9      	b.n	8006c7a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d11e      	bne.n	800692c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006904:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	441a      	add	r2, r3
 8006912:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006926:	b29b      	uxth	r3, r3
 8006928:	8013      	strh	r3, [r2, #0]
 800692a:	e01d      	b.n	8006968 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	441a      	add	r2, r3
 8006950:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006964:	b29b      	uxth	r3, r3
 8006966:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006972:	b29b      	uxth	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006978:	4413      	add	r3, r2
 800697a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	00da      	lsls	r2, r3, #3
 8006982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006984:	4413      	add	r3, r2
 8006986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800698a:	65bb      	str	r3, [r7, #88]	; 0x58
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	891b      	ldrh	r3, [r3, #8]
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	b29b      	uxth	r3, r3
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	657b      	str	r3, [r7, #84]	; 0x54
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ac:	4413      	add	r3, r2
 80069ae:	657b      	str	r3, [r7, #84]	; 0x54
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	00da      	lsls	r2, r3, #3
 80069b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069be:	653b      	str	r3, [r7, #80]	; 0x50
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	895b      	ldrh	r3, [r3, #10]
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 8093 	bne.w	8006b00 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01b      	beq.n	8006a2e <USB_ActivateEndpoint+0x52a>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01b      	beq.n	8006a7e <USB_ActivateEndpoint+0x57a>
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a94:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a9c:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006aa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aa4:	873b      	strh	r3, [r7, #56]	; 0x38
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006adc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	441a      	add	r2, r3
 8006ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	8013      	strh	r3, [r2, #0]
 8006afe:	e0bc      	b.n	8006c7a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006b10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01d      	beq.n	8006b58 <USB_ActivateEndpoint+0x654>
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01d      	beq.n	8006bb0 <USB_ActivateEndpoint+0x6ac>
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d024      	beq.n	8006c02 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006bd6:	f083 0320 	eor.w	r3, r3, #32
 8006bda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	441a      	add	r2, r3
 8006be8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	8013      	strh	r3, [r2, #0]
 8006c00:	e01d      	b.n	8006c3e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006c7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3774      	adds	r7, #116	; 0x74
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop

08006c8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b08d      	sub	sp, #52	; 0x34
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	7b1b      	ldrb	r3, [r3, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 808e 	bne.w	8006dbc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d044      	beq.n	8006d32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	81bb      	strh	r3, [r7, #12]
 8006cb6:	89bb      	ldrh	r3, [r7, #12]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01b      	beq.n	8006cf8 <USB_DeactivateEndpoint+0x6c>
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	817b      	strh	r3, [r7, #10]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	441a      	add	r2, r3
 8006ce2:	897b      	ldrh	r3, [r7, #10]
 8006ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0e:	813b      	strh	r3, [r7, #8]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	441a      	add	r2, r3
 8006d1a:	893b      	ldrh	r3, [r7, #8]
 8006d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	8013      	strh	r3, [r2, #0]
 8006d30:	e192      	b.n	8007058 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	827b      	strh	r3, [r7, #18]
 8006d40:	8a7b      	ldrh	r3, [r7, #18]
 8006d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01b      	beq.n	8006d82 <USB_DeactivateEndpoint+0xf6>
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d60:	823b      	strh	r3, [r7, #16]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	441a      	add	r2, r3
 8006d6c:	8a3b      	ldrh	r3, [r7, #16]
 8006d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d98:	81fb      	strh	r3, [r7, #14]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	89fb      	ldrh	r3, [r7, #14]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
 8006dba:	e14d      	b.n	8007058 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 80a5 	bne.w	8006f10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	843b      	strh	r3, [r7, #32]
 8006dd4:	8c3b      	ldrh	r3, [r7, #32]
 8006dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d01b      	beq.n	8006e16 <USB_DeactivateEndpoint+0x18a>
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df4:	83fb      	strh	r3, [r7, #30]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	441a      	add	r2, r3
 8006e00:	8bfb      	ldrh	r3, [r7, #30]
 8006e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	83bb      	strh	r3, [r7, #28]
 8006e24:	8bbb      	ldrh	r3, [r7, #28]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01b      	beq.n	8006e66 <USB_DeactivateEndpoint+0x1da>
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e44:	837b      	strh	r3, [r7, #26]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	441a      	add	r2, r3
 8006e50:	8b7b      	ldrh	r3, [r7, #26]
 8006e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7c:	833b      	strh	r3, [r7, #24]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	8b3b      	ldrh	r3, [r7, #24]
 8006e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb4:	82fb      	strh	r3, [r7, #22]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	8afb      	ldrh	r3, [r7, #22]
 8006ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eec:	82bb      	strh	r3, [r7, #20]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	441a      	add	r2, r3
 8006ef8:	8abb      	ldrh	r3, [r7, #20]
 8006efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	8013      	strh	r3, [r2, #0]
 8006f0e:	e0a3      	b.n	8007058 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01b      	beq.n	8006f60 <USB_DeactivateEndpoint+0x2d4>
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	441a      	add	r2, r3
 8006f4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01b      	beq.n	8006fb0 <USB_DeactivateEndpoint+0x324>
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800700c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	b29b      	uxth	r3, r3
 800701e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	847b      	strh	r3, [r7, #34]	; 0x22
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007054:	b29b      	uxth	r3, r3
 8007056:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3734      	adds	r7, #52	; 0x34
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b0c2      	sub	sp, #264	; 0x108
 800706a:	af00      	add	r7, sp, #0
 800706c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007074:	6018      	str	r0, [r3, #0]
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b01      	cmp	r3, #1
 800708e:	f040 86b7 	bne.w	8007e00 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d908      	bls.n	80070c0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070be:	e007      	b.n	80070d0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80070c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	7b1b      	ldrb	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d13a      	bne.n	8007156 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6959      	ldr	r1, [r3, #20]
 80070ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	88da      	ldrh	r2, [r3, #6]
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007102:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007106:	6800      	ldr	r0, [r0, #0]
 8007108:	f001 fc98 	bl	8008a3c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800710c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4413      	add	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	00da      	lsls	r2, r3, #3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4413      	add	r3, r2
 8007142:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	f000 be1f 	b.w	8007d94 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	78db      	ldrb	r3, [r3, #3]
 8007162:	2b02      	cmp	r3, #2
 8007164:	f040 8462 	bne.w	8007a2c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6a1a      	ldr	r2, [r3, #32]
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	429a      	cmp	r2, r3
 8007182:	f240 83df 	bls.w	8007944 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071de:	b29b      	uxth	r3, r3
 80071e0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80071e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a1a      	ldr	r2, [r3, #32]
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 81c7 	beq.w	80075b6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	633b      	str	r3, [r7, #48]	; 0x30
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d177      	bne.n	8007334 <USB_EPStartXfer+0x2ce>
 8007244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	4413      	add	r3, r2
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00da      	lsls	r2, r3, #3
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	4413      	add	r3, r2
 800727a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800728a:	b29a      	uxth	r2, r3
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007294:	2b3e      	cmp	r3, #62	; 0x3e
 8007296:	d921      	bls.n	80072dc <USB_EPStartXfer+0x276>
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <USB_EPStartXfer+0x252>
 80072ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072b2:	3b01      	subs	r3, #1
 80072b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29a      	uxth	r2, r3
 80072be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	029b      	lsls	r3, r3, #10
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4313      	orrs	r3, r2
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	e050      	b.n	800737e <USB_EPStartXfer+0x318>
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <USB_EPStartXfer+0x294>
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	e041      	b.n	800737e <USB_EPStartXfer+0x318>
 80072fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <USB_EPStartXfer+0x2b4>
 8007310:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007314:	3301      	adds	r3, #1
 8007316:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007324:	b29b      	uxth	r3, r3
 8007326:	029b      	lsls	r3, r3, #10
 8007328:	b29b      	uxth	r3, r3
 800732a:	4313      	orrs	r3, r2
 800732c:	b29a      	uxth	r2, r3
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	801a      	strh	r2, [r3, #0]
 8007332:	e024      	b.n	800737e <USB_EPStartXfer+0x318>
 8007334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d11c      	bne.n	800737e <USB_EPStartXfer+0x318>
 8007344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007352:	b29b      	uxth	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	4413      	add	r3, r2
 800735a:	633b      	str	r3, [r7, #48]	; 0x30
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	00da      	lsls	r2, r3, #3
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	4413      	add	r3, r2
 800736e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007378:	b29a      	uxth	r2, r3
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800737e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	895b      	ldrh	r3, [r3, #10]
 800738a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6959      	ldr	r1, [r3, #20]
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f001 fb45 	bl	8008a3c <USB_WritePMA>
            ep->xfer_buff += len;
 80073b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695a      	ldr	r2, [r3, #20]
 80073be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c2:	441a      	add	r2, r3
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6a1a      	ldr	r2, [r3, #32]
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d90f      	bls.n	800740c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80073ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a1a      	ldr	r2, [r3, #32]
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073fc:	1ad2      	subs	r2, r2, r3
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	621a      	str	r2, [r3, #32]
 800740a:	e00e      	b.n	800742a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2200      	movs	r2, #0
 8007428:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d177      	bne.n	800752a <USB_EPStartXfer+0x4c4>
 800743a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007454:	b29b      	uxth	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	4413      	add	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	00da      	lsls	r2, r3, #3
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	4413      	add	r3, r2
 8007470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007480:	b29a      	uxth	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	2b3e      	cmp	r3, #62	; 0x3e
 800748c:	d921      	bls.n	80074d2 <USB_EPStartXfer+0x46c>
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d104      	bne.n	80074ae <USB_EPStartXfer+0x448>
 80074a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a8:	3b01      	subs	r3, #1
 80074aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	029b      	lsls	r3, r3, #10
 80074bc:	b29b      	uxth	r3, r3
 80074be:	4313      	orrs	r3, r2
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	801a      	strh	r2, [r3, #0]
 80074d0:	e056      	b.n	8007580 <USB_EPStartXfer+0x51a>
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <USB_EPStartXfer+0x48a>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	e047      	b.n	8007580 <USB_EPStartXfer+0x51a>
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <USB_EPStartXfer+0x4aa>
 8007506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800750a:	3301      	adds	r3, #1
 800750c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751a:	b29b      	uxth	r3, r3
 800751c:	029b      	lsls	r3, r3, #10
 800751e:	b29b      	uxth	r3, r3
 8007520:	4313      	orrs	r3, r2
 8007522:	b29a      	uxth	r2, r3
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	801a      	strh	r2, [r3, #0]
 8007528:	e02a      	b.n	8007580 <USB_EPStartXfer+0x51a>
 800752a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d122      	bne.n	8007580 <USB_EPStartXfer+0x51a>
 800753a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	623b      	str	r3, [r7, #32]
 8007546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	4413      	add	r3, r2
 800755c:	623b      	str	r3, [r7, #32]
 800755e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	00da      	lsls	r2, r3, #3
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	4413      	add	r3, r2
 8007570:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800757a:	b29a      	uxth	r2, r3
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	891b      	ldrh	r3, [r3, #8]
 800758c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6959      	ldr	r1, [r3, #20]
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075ae:	6800      	ldr	r0, [r0, #0]
 80075b0:	f001 fa44 	bl	8008a3c <USB_WritePMA>
 80075b4:	e3ee      	b.n	8007d94 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d177      	bne.n	80076b6 <USB_EPStartXfer+0x650>
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e6:	4413      	add	r3, r2
 80075e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00da      	lsls	r2, r3, #3
 80075f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007600:	647b      	str	r3, [r7, #68]	; 0x44
 8007602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800760c:	b29a      	uxth	r2, r3
 800760e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007616:	2b3e      	cmp	r3, #62	; 0x3e
 8007618:	d921      	bls.n	800765e <USB_EPStartXfer+0x5f8>
 800761a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <USB_EPStartXfer+0x5d4>
 8007630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007634:	3b01      	subs	r3, #1
 8007636:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800763a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007644:	b29b      	uxth	r3, r3
 8007646:	029b      	lsls	r3, r3, #10
 8007648:	b29b      	uxth	r3, r3
 800764a:	4313      	orrs	r3, r2
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	e056      	b.n	800770c <USB_EPStartXfer+0x6a6>
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <USB_EPStartXfer+0x616>
 8007666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007674:	b29a      	uxth	r2, r3
 8007676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e047      	b.n	800770c <USB_EPStartXfer+0x6a6>
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <USB_EPStartXfer+0x636>
 8007692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007696:	3301      	adds	r3, #1
 8007698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800769c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	029b      	lsls	r3, r3, #10
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	4313      	orrs	r3, r2
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e02a      	b.n	800770c <USB_EPStartXfer+0x6a6>
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	785b      	ldrb	r3, [r3, #1]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d122      	bne.n	800770c <USB_EPStartXfer+0x6a6>
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	653b      	str	r3, [r7, #80]	; 0x50
 80076d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e6:	4413      	add	r3, r2
 80076e8:	653b      	str	r3, [r7, #80]	; 0x50
 80076ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	00da      	lsls	r2, r3, #3
 80076f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fa:	4413      	add	r3, r2
 80076fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007700:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007706:	b29a      	uxth	r2, r3
 8007708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	891b      	ldrh	r3, [r3, #8]
 8007718:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800771c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6959      	ldr	r1, [r3, #20]
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772c:	b29b      	uxth	r3, r3
 800772e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007732:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007736:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800773a:	6800      	ldr	r0, [r0, #0]
 800773c:	f001 f97e 	bl	8008a3c <USB_WritePMA>
            ep->xfer_buff += len;
 8007740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007750:	441a      	add	r2, r3
 8007752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	429a      	cmp	r2, r3
 8007778:	d90f      	bls.n	800779a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778a:	1ad2      	subs	r2, r2, r3
 800778c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	621a      	str	r2, [r3, #32]
 8007798:	e00e      	b.n	80077b8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80077aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2200      	movs	r2, #0
 80077b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	643b      	str	r3, [r7, #64]	; 0x40
 80077c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d177      	bne.n	80078c4 <USB_EPStartXfer+0x85e>
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	63bb      	str	r3, [r7, #56]	; 0x38
 80077e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	4413      	add	r3, r2
 80077f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	00da      	lsls	r2, r3, #3
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	4413      	add	r3, r2
 800780a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
 8007810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800781a:	b29a      	uxth	r2, r3
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007824:	2b3e      	cmp	r3, #62	; 0x3e
 8007826:	d921      	bls.n	800786c <USB_EPStartXfer+0x806>
 8007828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782c:	095b      	lsrs	r3, r3, #5
 800782e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <USB_EPStartXfer+0x7e2>
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	3b01      	subs	r3, #1
 8007844:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007852:	b29b      	uxth	r3, r3
 8007854:	029b      	lsls	r3, r3, #10
 8007856:	b29b      	uxth	r3, r3
 8007858:	4313      	orrs	r3, r2
 800785a:	b29b      	uxth	r3, r3
 800785c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007864:	b29a      	uxth	r2, r3
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	e050      	b.n	800790e <USB_EPStartXfer+0x8a8>
 800786c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <USB_EPStartXfer+0x824>
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007882:	b29a      	uxth	r2, r3
 8007884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007886:	801a      	strh	r2, [r3, #0]
 8007888:	e041      	b.n	800790e <USB_EPStartXfer+0x8a8>
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <USB_EPStartXfer+0x844>
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a4:	3301      	adds	r3, #1
 80078a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	029b      	lsls	r3, r3, #10
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	4313      	orrs	r3, r2
 80078bc:	b29a      	uxth	r2, r3
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	e024      	b.n	800790e <USB_EPStartXfer+0x8a8>
 80078c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	785b      	ldrb	r3, [r3, #1]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d11c      	bne.n	800790e <USB_EPStartXfer+0x8a8>
 80078d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e8:	4413      	add	r3, r2
 80078ea:	643b      	str	r3, [r7, #64]	; 0x40
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	00da      	lsls	r2, r3, #3
 80078fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fc:	4413      	add	r3, r2
 80078fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007908:	b29a      	uxth	r2, r3
 800790a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800790c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800790e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	895b      	ldrh	r3, [r3, #10]
 800791a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800791e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6959      	ldr	r1, [r3, #20]
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792e:	b29b      	uxth	r3, r3
 8007930:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007934:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007938:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f001 f87d 	bl	8008a3c <USB_WritePMA>
 8007942:	e227      	b.n	8007d94 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29b      	uxth	r3, r3
 8007972:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800797e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	441a      	add	r2, r3
 8007998:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800799c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079d0:	4413      	add	r3, r2
 80079d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	00da      	lsls	r2, r3, #3
 80079e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e4:	4413      	add	r3, r2
 80079e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	891b      	ldrh	r3, [r3, #8]
 8007a02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6959      	ldr	r1, [r3, #20]
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a24:	6800      	ldr	r0, [r0, #0]
 8007a26:	f001 f809 	bl	8008a3c <USB_WritePMA>
 8007a2a:	e1b3      	b.n	8007d94 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3c:	1ad2      	subs	r2, r2, r3
 8007a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80c6 	beq.w	8007bfe <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d177      	bne.n	8007b7e <USB_EPStartXfer+0xb18>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aae:	4413      	add	r3, r2
 8007ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	00da      	lsls	r2, r3, #3
 8007ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8007aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ad8:	801a      	strh	r2, [r3, #0]
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ade:	2b3e      	cmp	r3, #62	; 0x3e
 8007ae0:	d921      	bls.n	8007b26 <USB_EPStartXfer+0xac0>
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af0:	f003 031f 	and.w	r3, r3, #31
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <USB_EPStartXfer+0xa9c>
 8007af8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007afc:	3b01      	subs	r3, #1
 8007afe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	029b      	lsls	r3, r3, #10
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	e050      	b.n	8007bc8 <USB_EPStartXfer+0xb62>
 8007b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <USB_EPStartXfer+0xade>
 8007b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	e041      	b.n	8007bc8 <USB_EPStartXfer+0xb62>
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b48:	085b      	lsrs	r3, r3, #1
 8007b4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <USB_EPStartXfer+0xafe>
 8007b5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	029b      	lsls	r3, r3, #10
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	4313      	orrs	r3, r2
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	e024      	b.n	8007bc8 <USB_EPStartXfer+0xb62>
 8007b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d11c      	bne.n	8007bc8 <USB_EPStartXfer+0xb62>
 8007b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba2:	4413      	add	r3, r2
 8007ba4:	673b      	str	r3, [r7, #112]	; 0x70
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	00da      	lsls	r2, r3, #3
 8007bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	895b      	ldrh	r3, [r3, #10]
 8007bd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6959      	ldr	r1, [r3, #20]
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007bee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007bf2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007bf6:	6800      	ldr	r0, [r0, #0]
 8007bf8:	f000 ff20 	bl	8008a3c <USB_WritePMA>
 8007bfc:	e0ca      	b.n	8007d94 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d177      	bne.n	8007cfe <USB_EPStartXfer+0xc98>
 8007c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c2e:	4413      	add	r3, r2
 8007c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	00da      	lsls	r2, r3, #3
 8007c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c42:	4413      	add	r3, r2
 8007c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c58:	801a      	strh	r2, [r3, #0]
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c60:	d921      	bls.n	8007ca6 <USB_EPStartXfer+0xc40>
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <USB_EPStartXfer+0xc1c>
 8007c78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	029b      	lsls	r3, r3, #10
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4313      	orrs	r3, r2
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca2:	801a      	strh	r2, [r3, #0]
 8007ca4:	e05c      	b.n	8007d60 <USB_EPStartXfer+0xcfa>
 8007ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10a      	bne.n	8007cc4 <USB_EPStartXfer+0xc5e>
 8007cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	e04d      	b.n	8007d60 <USB_EPStartXfer+0xcfa>
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <USB_EPStartXfer+0xc7e>
 8007cda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	029b      	lsls	r3, r3, #10
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	e030      	b.n	8007d60 <USB_EPStartXfer+0xcfa>
 8007cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d128      	bne.n	8007d60 <USB_EPStartXfer+0xcfa>
 8007d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d32:	4413      	add	r3, r2
 8007d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	00da      	lsls	r2, r3, #3
 8007d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	891b      	ldrh	r3, [r3, #8]
 8007d6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6959      	ldr	r1, [r3, #20]
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	f000 fe54 	bl	8008a3c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dba:	817b      	strh	r3, [r7, #10]
 8007dbc:	897b      	ldrh	r3, [r7, #10]
 8007dbe:	f083 0310 	eor.w	r3, r3, #16
 8007dc2:	817b      	strh	r3, [r7, #10]
 8007dc4:	897b      	ldrh	r3, [r7, #10]
 8007dc6:	f083 0320 	eor.w	r3, r3, #32
 8007dca:	817b      	strh	r3, [r7, #10]
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	441a      	add	r2, r3
 8007de6:	897b      	ldrh	r3, [r7, #10]
 8007de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	8013      	strh	r3, [r2, #0]
 8007dfc:	f000 bcde 	b.w	80087bc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	7b1b      	ldrb	r3, [r3, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f040 80bb 	bne.w	8007f88 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d917      	bls.n	8007e5e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	619a      	str	r2, [r3, #24]
 8007e5c:	e00e      	b.n	8007e7c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	00da      	lsls	r2, r3, #3
 8007eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ed4:	801a      	strh	r2, [r3, #0]
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eda:	2b3e      	cmp	r3, #62	; 0x3e
 8007edc:	d924      	bls.n	8007f28 <USB_EPStartXfer+0xec2>
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USB_EPStartXfer+0xe98>
 8007ef4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	029b      	lsls	r3, r3, #10
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	f000 bc10 	b.w	8008748 <USB_EPStartXfer+0x16e2>
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10c      	bne.n	8007f4a <USB_EPStartXfer+0xee4>
 8007f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	e3fe      	b.n	8008748 <USB_EPStartXfer+0x16e2>
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <USB_EPStartXfer+0xf04>
 8007f60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f64:	3301      	adds	r3, #1
 8007f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	029b      	lsls	r3, r3, #10
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	e3df      	b.n	8008748 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	78db      	ldrb	r3, [r3, #3]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	f040 8218 	bne.w	80083ca <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f040 809d 	bne.w	80080e6 <USB_EPStartXfer+0x1080>
 8007fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	00da      	lsls	r2, r3, #3
 8007fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fe8:	4413      	add	r3, r2
 8007fea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	2b3e      	cmp	r3, #62	; 0x3e
 8008014:	d92b      	bls.n	800806e <USB_EPStartXfer+0x1008>
 8008016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	095b      	lsrs	r3, r3, #5
 8008024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <USB_EPStartXfer+0xfe0>
 800803c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008040:	3b01      	subs	r3, #1
 8008042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29a      	uxth	r2, r3
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008052:	b29b      	uxth	r3, r3
 8008054:	029b      	lsls	r3, r3, #10
 8008056:	b29b      	uxth	r3, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	b29b      	uxth	r3, r3
 800805c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008064:	b29a      	uxth	r2, r3
 8008066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	e070      	b.n	8008150 <USB_EPStartXfer+0x10ea>
 800806e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10c      	bne.n	8008098 <USB_EPStartXfer+0x1032>
 800807e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808e:	b29a      	uxth	r2, r3
 8008090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008094:	801a      	strh	r2, [r3, #0]
 8008096:	e05b      	b.n	8008150 <USB_EPStartXfer+0x10ea>
 8008098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	085b      	lsrs	r3, r3, #1
 80080a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d004      	beq.n	80080c8 <USB_EPStartXfer+0x1062>
 80080be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c2:	3301      	adds	r3, #1
 80080c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	029b      	lsls	r3, r3, #10
 80080d8:	b29b      	uxth	r3, r3
 80080da:	4313      	orrs	r3, r2
 80080dc:	b29a      	uxth	r2, r3
 80080de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	e034      	b.n	8008150 <USB_EPStartXfer+0x10ea>
 80080e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d12c      	bne.n	8008150 <USB_EPStartXfer+0x10ea>
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008112:	b29b      	uxth	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800811a:	4413      	add	r3, r2
 800811c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	00da      	lsls	r2, r3, #3
 800812e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008132:	4413      	add	r3, r2
 8008134:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800813c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	b29a      	uxth	r2, r3
 800814a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b00      	cmp	r3, #0
 800816c:	f040 809d 	bne.w	80082aa <USB_EPStartXfer+0x1244>
 8008170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800817e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818c:	b29b      	uxth	r3, r3
 800818e:	461a      	mov	r2, r3
 8008190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008194:	4413      	add	r3, r2
 8008196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800819a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	00da      	lsls	r2, r3, #3
 80081a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ac:	4413      	add	r3, r2
 80081ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081c8:	801a      	strh	r2, [r3, #0]
 80081ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b3e      	cmp	r3, #62	; 0x3e
 80081d8:	d92b      	bls.n	8008232 <USB_EPStartXfer+0x11cc>
 80081da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f003 031f 	and.w	r3, r3, #31
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <USB_EPStartXfer+0x11a4>
 8008200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008204:	3b01      	subs	r3, #1
 8008206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800820a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29a      	uxth	r2, r3
 8008212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008216:	b29b      	uxth	r3, r3
 8008218:	029b      	lsls	r3, r3, #10
 800821a:	b29b      	uxth	r3, r3
 800821c:	4313      	orrs	r3, r2
 800821e:	b29b      	uxth	r3, r3
 8008220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	e069      	b.n	8008306 <USB_EPStartXfer+0x12a0>
 8008232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10c      	bne.n	800825c <USB_EPStartXfer+0x11f6>
 8008242:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008252:	b29a      	uxth	r2, r3
 8008254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008258:	801a      	strh	r2, [r3, #0]
 800825a:	e054      	b.n	8008306 <USB_EPStartXfer+0x12a0>
 800825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800826e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <USB_EPStartXfer+0x1226>
 8008282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008286:	3301      	adds	r3, #1
 8008288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800828c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29a      	uxth	r2, r3
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008298:	b29b      	uxth	r3, r3
 800829a:	029b      	lsls	r3, r3, #10
 800829c:	b29b      	uxth	r3, r3
 800829e:	4313      	orrs	r3, r2
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	e02d      	b.n	8008306 <USB_EPStartXfer+0x12a0>
 80082aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d125      	bne.n	8008306 <USB_EPStartXfer+0x12a0>
 80082ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	461a      	mov	r2, r3
 80082cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082d0:	4413      	add	r3, r2
 80082d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	00da      	lsls	r2, r3, #3
 80082e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082e8:	4413      	add	r3, r2
 80082ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	b29a      	uxth	r2, r3
 8008300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008304:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 8218 	beq.w	8008748 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008338:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800833c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <USB_EPStartXfer+0x12ea>
 8008344:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10d      	bne.n	800836c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008350:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008358:	2b00      	cmp	r3, #0
 800835a:	f040 81f5 	bne.w	8008748 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800835e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 81ee 	bne.w	8008748 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008392:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80083b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	8013      	strh	r3, [r2, #0]
 80083c8:	e1be      	b.n	8008748 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	78db      	ldrb	r3, [r3, #3]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	f040 81b4 	bne.w	8008744 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80083dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d917      	bls.n	8008428 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008418:	1ad2      	subs	r2, r2, r3
 800841a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	619a      	str	r2, [r3, #24]
 8008426:	e00e      	b.n	8008446 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2200      	movs	r2, #0
 8008444:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	2b00      	cmp	r3, #0
 8008454:	f040 8085 	bne.w	8008562 <USB_EPStartXfer+0x14fc>
 8008458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008474:	b29b      	uxth	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800847c:	4413      	add	r3, r2
 800847e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	00da      	lsls	r2, r3, #3
 8008490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008494:	4413      	add	r3, r2
 8008496:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800849a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800849e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b6:	2b3e      	cmp	r3, #62	; 0x3e
 80084b8:	d923      	bls.n	8008502 <USB_EPStartXfer+0x149c>
 80084ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c8:	f003 031f 	and.w	r3, r3, #31
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d104      	bne.n	80084da <USB_EPStartXfer+0x1474>
 80084d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d4:	3b01      	subs	r3, #1
 80084d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	029b      	lsls	r3, r3, #10
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	4313      	orrs	r3, r2
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	e060      	b.n	80085c4 <USB_EPStartXfer+0x155e>
 8008502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10c      	bne.n	8008524 <USB_EPStartXfer+0x14be>
 800850a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851a:	b29a      	uxth	r2, r3
 800851c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	e04f      	b.n	80085c4 <USB_EPStartXfer+0x155e>
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008528:	085b      	lsrs	r3, r3, #1
 800852a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800852e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <USB_EPStartXfer+0x14de>
 800853a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800853e:	3301      	adds	r3, #1
 8008540:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	b29a      	uxth	r2, r3
 800854c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008550:	b29b      	uxth	r3, r3
 8008552:	029b      	lsls	r3, r3, #10
 8008554:	b29b      	uxth	r3, r3
 8008556:	4313      	orrs	r3, r2
 8008558:	b29a      	uxth	r2, r3
 800855a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	e030      	b.n	80085c4 <USB_EPStartXfer+0x155e>
 8008562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d128      	bne.n	80085c4 <USB_EPStartXfer+0x155e>
 8008572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800858e:	b29b      	uxth	r3, r3
 8008590:	461a      	mov	r2, r3
 8008592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008596:	4413      	add	r3, r2
 8008598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800859c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ae:	4413      	add	r3, r2
 80085b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085bc:	b29a      	uxth	r2, r3
 80085be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085c2:	801a      	strh	r2, [r3, #0]
 80085c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f040 8085 	bne.w	80086ee <USB_EPStartXfer+0x1688>
 80085e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008600:	b29b      	uxth	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008608:	4413      	add	r3, r2
 800860a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800860e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	00da      	lsls	r2, r3, #3
 800861c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008620:	4413      	add	r3, r2
 8008622:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008626:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800862a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008636:	b29a      	uxth	r2, r3
 8008638:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008642:	2b3e      	cmp	r3, #62	; 0x3e
 8008644:	d923      	bls.n	800868e <USB_EPStartXfer+0x1628>
 8008646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <USB_EPStartXfer+0x1600>
 800865c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008660:	3b01      	subs	r3, #1
 8008662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29a      	uxth	r2, r3
 800866e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008672:	b29b      	uxth	r3, r3
 8008674:	029b      	lsls	r3, r3, #10
 8008676:	b29b      	uxth	r3, r3
 8008678:	4313      	orrs	r3, r2
 800867a:	b29b      	uxth	r3, r3
 800867c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008684:	b29a      	uxth	r2, r3
 8008686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800868a:	801a      	strh	r2, [r3, #0]
 800868c:	e05c      	b.n	8008748 <USB_EPStartXfer+0x16e2>
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10c      	bne.n	80086b0 <USB_EPStartXfer+0x164a>
 8008696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	e04b      	b.n	8008748 <USB_EPStartXfer+0x16e2>
 80086b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b4:	085b      	lsrs	r3, r3, #1
 80086b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <USB_EPStartXfer+0x166a>
 80086c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ca:	3301      	adds	r3, #1
 80086cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086dc:	b29b      	uxth	r3, r3
 80086de:	029b      	lsls	r3, r3, #10
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	4313      	orrs	r3, r2
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	e02c      	b.n	8008748 <USB_EPStartXfer+0x16e2>
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	785b      	ldrb	r3, [r3, #1]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d124      	bne.n	8008748 <USB_EPStartXfer+0x16e2>
 80086fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800870c:	b29b      	uxth	r3, r3
 800870e:	461a      	mov	r2, r3
 8008710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008714:	4413      	add	r3, r2
 8008716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800871a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	00da      	lsls	r2, r3, #3
 8008728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800872c:	4413      	add	r3, r2
 800872e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873a:	b29a      	uxth	r2, r3
 800873c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008740:	801a      	strh	r2, [r3, #0]
 8008742:	e001      	b.n	8008748 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e03a      	b.n	80087be <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29b      	uxth	r3, r3
 8008766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008772:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008776:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800877a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800877e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008782:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008786:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800878a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	441a      	add	r2, r3
 80087a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80087a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d020      	beq.n	800881c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f0:	81bb      	strh	r3, [r7, #12]
 80087f2:	89bb      	ldrh	r3, [r7, #12]
 80087f4:	f083 0310 	eor.w	r3, r3, #16
 80087f8:	81bb      	strh	r3, [r7, #12]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	441a      	add	r2, r3
 8008804:	89bb      	ldrh	r3, [r7, #12]
 8008806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800880e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008816:	b29b      	uxth	r3, r3
 8008818:	8013      	strh	r3, [r2, #0]
 800881a:	e01f      	b.n	800885c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	81fb      	strh	r3, [r7, #14]
 8008834:	89fb      	ldrh	r3, [r7, #14]
 8008836:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800883a:	81fb      	strh	r3, [r7, #14]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	441a      	add	r2, r3
 8008846:	89fb      	ldrh	r3, [r7, #14]
 8008848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008858:	b29b      	uxth	r3, r3
 800885a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800886a:	b480      	push	{r7}
 800886c:	b087      	sub	sp, #28
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	7b1b      	ldrb	r3, [r3, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f040 809d 	bne.w	80089b8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d04c      	beq.n	8008920 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	823b      	strh	r3, [r7, #16]
 8008894:	8a3b      	ldrh	r3, [r7, #16]
 8008896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01b      	beq.n	80088d6 <USB_EPClearStall+0x6c>
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b4:	81fb      	strh	r3, [r7, #14]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	441a      	add	r2, r3
 80088c0:	89fb      	ldrh	r3, [r7, #14]
 80088c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	78db      	ldrb	r3, [r3, #3]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d06c      	beq.n	80089b8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f4:	81bb      	strh	r3, [r7, #12]
 80088f6:	89bb      	ldrh	r3, [r7, #12]
 80088f8:	f083 0320 	eor.w	r3, r3, #32
 80088fc:	81bb      	strh	r3, [r7, #12]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	441a      	add	r2, r3
 8008908:	89bb      	ldrh	r3, [r7, #12]
 800890a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800890e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891a:	b29b      	uxth	r3, r3
 800891c:	8013      	strh	r3, [r2, #0]
 800891e:	e04b      	b.n	80089b8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	82fb      	strh	r3, [r7, #22]
 800892e:	8afb      	ldrh	r3, [r7, #22]
 8008930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01b      	beq.n	8008970 <USB_EPClearStall+0x106>
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894e:	82bb      	strh	r3, [r7, #20]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	441a      	add	r2, r3
 800895a:	8abb      	ldrh	r3, [r7, #20]
 800895c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896c:	b29b      	uxth	r3, r3
 800896e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008986:	827b      	strh	r3, [r7, #18]
 8008988:	8a7b      	ldrh	r3, [r7, #18]
 800898a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800898e:	827b      	strh	r3, [r7, #18]
 8008990:	8a7b      	ldrh	r3, [r7, #18]
 8008992:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008996:	827b      	strh	r3, [r7, #18]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	441a      	add	r2, r3
 80089a2:	8a7b      	ldrh	r3, [r7, #18]
 80089a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d103      	bne.n	80089e0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2280      	movs	r2, #128	; 0x80
 80089dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b08b      	sub	sp, #44	; 0x2c
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4611      	mov	r1, r2
 8008a48:	461a      	mov	r2, r3
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	80fb      	strh	r3, [r7, #6]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a52:	88bb      	ldrh	r3, [r7, #4]
 8008a54:	3301      	adds	r3, #1
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a62:	88fa      	ldrh	r2, [r7, #6]
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
 8008a72:	e01b      	b.n	8008aac <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b21a      	sxth	r2, r3
 8008a84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	b21b      	sxth	r3, r3
 8008a8c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	8a7a      	ldrh	r2, [r7, #18]
 8008a92:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	3302      	adds	r3, #2
 8008a98:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e0      	bne.n	8008a74 <USB_WritePMA+0x38>
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	372c      	adds	r7, #44	; 0x2c
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b08b      	sub	sp, #44	; 0x2c
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	4611      	mov	r1, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	460b      	mov	r3, r1
 8008ad0:	80fb      	strh	r3, [r7, #6]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ad6:	88bb      	ldrh	r3, [r7, #4]
 8008ad8:	085b      	lsrs	r3, r3, #1
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ae6:	88fa      	ldrh	r2, [r7, #6]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
 8008af6:	e018      	b.n	8008b2a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	3302      	adds	r3, #2
 8008b04:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	3301      	adds	r3, #1
 8008b12:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	0a1b      	lsrs	r3, r3, #8
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	3301      	adds	r3, #1
 8008b22:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	3b01      	subs	r3, #1
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e3      	bne.n	8008af8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008b30:	88bb      	ldrh	r3, [r7, #4]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	701a      	strb	r2, [r3, #0]
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	372c      	adds	r7, #44	; 0x2c
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b68:	f002 fc5e 	bl	800b428 <USBD_static_malloc>
 8008b6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d109      	bne.n	8008b88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	32b0      	adds	r2, #176	; 0xb0
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008b84:	2302      	movs	r3, #2
 8008b86:	e0d4      	b.n	8008d32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008b88:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f00c ff74 	bl	8015a7c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32b0      	adds	r2, #176	; 0xb0
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32b0      	adds	r2, #176	; 0xb0
 8008bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7c1b      	ldrb	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d138      	bne.n	8008c32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008bc0:	4b5e      	ldr	r3, [pc, #376]	; (8008d3c <USBD_CDC_Init+0x1e4>)
 8008bc2:	7819      	ldrb	r1, [r3, #0]
 8008bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc8:	2202      	movs	r2, #2
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f002 fad1 	bl	800b172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008bd0:	4b5a      	ldr	r3, [pc, #360]	; (8008d3c <USBD_CDC_Init+0x1e4>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f003 020f 	and.w	r2, r3, #15
 8008bd8:	6879      	ldr	r1, [r7, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	3324      	adds	r3, #36	; 0x24
 8008be6:	2201      	movs	r2, #1
 8008be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bea:	4b55      	ldr	r3, [pc, #340]	; (8008d40 <USBD_CDC_Init+0x1e8>)
 8008bec:	7819      	ldrb	r1, [r3, #0]
 8008bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f002 fabc 	bl	800b172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008bfa:	4b51      	ldr	r3, [pc, #324]	; (8008d40 <USBD_CDC_Init+0x1e8>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f003 020f 	and.w	r2, r3, #15
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c12:	2201      	movs	r2, #1
 8008c14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c16:	4b4b      	ldr	r3, [pc, #300]	; (8008d44 <USBD_CDC_Init+0x1ec>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	f003 020f 	and.w	r2, r3, #15
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	440b      	add	r3, r1
 8008c2a:	3326      	adds	r3, #38	; 0x26
 8008c2c:	2210      	movs	r2, #16
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	e035      	b.n	8008c9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c32:	4b42      	ldr	r3, [pc, #264]	; (8008d3c <USBD_CDC_Init+0x1e4>)
 8008c34:	7819      	ldrb	r1, [r3, #0]
 8008c36:	2340      	movs	r3, #64	; 0x40
 8008c38:	2202      	movs	r2, #2
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f002 fa99 	bl	800b172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c40:	4b3e      	ldr	r3, [pc, #248]	; (8008d3c <USBD_CDC_Init+0x1e4>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f003 020f 	and.w	r2, r3, #15
 8008c48:	6879      	ldr	r1, [r7, #4]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	440b      	add	r3, r1
 8008c54:	3324      	adds	r3, #36	; 0x24
 8008c56:	2201      	movs	r2, #1
 8008c58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c5a:	4b39      	ldr	r3, [pc, #228]	; (8008d40 <USBD_CDC_Init+0x1e8>)
 8008c5c:	7819      	ldrb	r1, [r3, #0]
 8008c5e:	2340      	movs	r3, #64	; 0x40
 8008c60:	2202      	movs	r2, #2
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f002 fa85 	bl	800b172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c68:	4b35      	ldr	r3, [pc, #212]	; (8008d40 <USBD_CDC_Init+0x1e8>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	f003 020f 	and.w	r2, r3, #15
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c80:	2201      	movs	r2, #1
 8008c82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c84:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <USBD_CDC_Init+0x1ec>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	f003 020f 	and.w	r2, r3, #15
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	3326      	adds	r3, #38	; 0x26
 8008c9a:	2210      	movs	r2, #16
 8008c9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c9e:	4b29      	ldr	r3, [pc, #164]	; (8008d44 <USBD_CDC_Init+0x1ec>)
 8008ca0:	7819      	ldrb	r1, [r3, #0]
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f002 fa63 	bl	800b172 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008cac:	4b25      	ldr	r3, [pc, #148]	; (8008d44 <USBD_CDC_Init+0x1ec>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	3324      	adds	r3, #36	; 0x24
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	33b0      	adds	r3, #176	; 0xb0
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e018      	b.n	8008d32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7c1b      	ldrb	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <USBD_CDC_Init+0x1e8>)
 8008d0a:	7819      	ldrb	r1, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f002 fb1b 	bl	800b352 <USBD_LL_PrepareReceive>
 8008d1c:	e008      	b.n	8008d30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d1e:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <USBD_CDC_Init+0x1e8>)
 8008d20:	7819      	ldrb	r1, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d28:	2340      	movs	r3, #64	; 0x40
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f002 fb11 	bl	800b352 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	2000009b 	.word	0x2000009b
 8008d40:	2000009c 	.word	0x2000009c
 8008d44:	2000009d 	.word	0x2000009d

08008d48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008d54:	4b3a      	ldr	r3, [pc, #232]	; (8008e40 <USBD_CDC_DeInit+0xf8>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f002 fa2f 	bl	800b1be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008d60:	4b37      	ldr	r3, [pc, #220]	; (8008e40 <USBD_CDC_DeInit+0xf8>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 020f 	and.w	r2, r3, #15
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	3324      	adds	r3, #36	; 0x24
 8008d76:	2200      	movs	r2, #0
 8008d78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008d7a:	4b32      	ldr	r3, [pc, #200]	; (8008e44 <USBD_CDC_DeInit+0xfc>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f002 fa1c 	bl	800b1be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008d86:	4b2f      	ldr	r3, [pc, #188]	; (8008e44 <USBD_CDC_DeInit+0xfc>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	f003 020f 	and.w	r2, r3, #15
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d9e:	2200      	movs	r2, #0
 8008da0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008da2:	4b29      	ldr	r3, [pc, #164]	; (8008e48 <USBD_CDC_DeInit+0x100>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f002 fa08 	bl	800b1be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008dae:	4b26      	ldr	r3, [pc, #152]	; (8008e48 <USBD_CDC_DeInit+0x100>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	f003 020f 	and.w	r2, r3, #15
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	3324      	adds	r3, #36	; 0x24
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008dc8:	4b1f      	ldr	r3, [pc, #124]	; (8008e48 <USBD_CDC_DeInit+0x100>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	f003 020f 	and.w	r2, r3, #15
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	3326      	adds	r3, #38	; 0x26
 8008dde:	2200      	movs	r2, #0
 8008de0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	32b0      	adds	r2, #176	; 0xb0
 8008dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01f      	beq.n	8008e34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	33b0      	adds	r3, #176	; 0xb0
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	32b0      	adds	r2, #176	; 0xb0
 8008e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f002 fb14 	bl	800b444 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	32b0      	adds	r2, #176	; 0xb0
 8008e26:	2100      	movs	r1, #0
 8008e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	2000009b 	.word	0x2000009b
 8008e44:	2000009c 	.word	0x2000009c
 8008e48:	2000009d 	.word	0x2000009d

08008e4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	32b0      	adds	r2, #176	; 0xb0
 8008e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e0bf      	b.n	8008ffc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d050      	beq.n	8008f2a <USBD_CDC_Setup+0xde>
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	f040 80af 	bne.w	8008fec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d03a      	beq.n	8008f0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	da1b      	bge.n	8008ed8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	33b0      	adds	r3, #176	; 0xb0
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008eb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	88d2      	ldrh	r2, [r2, #6]
 8008ebc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	88db      	ldrh	r3, [r3, #6]
 8008ec2:	2b07      	cmp	r3, #7
 8008ec4:	bf28      	it	cs
 8008ec6:	2307      	movcs	r3, #7
 8008ec8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	89fa      	ldrh	r2, [r7, #14]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fd21 	bl	800a918 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008ed6:	e090      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	785a      	ldrb	r2, [r3, #1]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	88db      	ldrh	r3, [r3, #6]
 8008ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8008ee8:	d803      	bhi.n	8008ef2 <USBD_CDC_Setup+0xa6>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	88db      	ldrh	r3, [r3, #6]
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	e000      	b.n	8008ef4 <USBD_CDC_Setup+0xa8>
 8008ef2:	2240      	movs	r2, #64	; 0x40
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008efa:	6939      	ldr	r1, [r7, #16]
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008f02:	461a      	mov	r2, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fd33 	bl	800a970 <USBD_CtlPrepareRx>
      break;
 8008f0a:	e076      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	33b0      	adds	r3, #176	; 0xb0
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	7850      	ldrb	r0, [r2, #1]
 8008f22:	2200      	movs	r2, #0
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	4798      	blx	r3
      break;
 8008f28:	e067      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b0b      	cmp	r3, #11
 8008f30:	d851      	bhi.n	8008fd6 <USBD_CDC_Setup+0x18a>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <USBD_CDC_Setup+0xec>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f69 	.word	0x08008f69
 8008f3c:	08008fe5 	.word	0x08008fe5
 8008f40:	08008fd7 	.word	0x08008fd7
 8008f44:	08008fd7 	.word	0x08008fd7
 8008f48:	08008fd7 	.word	0x08008fd7
 8008f4c:	08008fd7 	.word	0x08008fd7
 8008f50:	08008fd7 	.word	0x08008fd7
 8008f54:	08008fd7 	.word	0x08008fd7
 8008f58:	08008fd7 	.word	0x08008fd7
 8008f5c:	08008fd7 	.word	0x08008fd7
 8008f60:	08008f93 	.word	0x08008f93
 8008f64:	08008fbd 	.word	0x08008fbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d107      	bne.n	8008f84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f74:	f107 030a 	add.w	r3, r7, #10
 8008f78:	2202      	movs	r2, #2
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fccb 	bl	800a918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f82:	e032      	b.n	8008fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fc55 	bl	800a836 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8008f90:	e02b      	b.n	8008fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d107      	bne.n	8008fae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f9e:	f107 030d 	add.w	r3, r7, #13
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fcb6 	bl	800a918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fac:	e01d      	b.n	8008fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fc40 	bl	800a836 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8008fba:	e016      	b.n	8008fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d00f      	beq.n	8008fe8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fc33 	bl	800a836 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008fd4:	e008      	b.n	8008fe8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fc2c 	bl	800a836 <USBD_CtlError>
          ret = USBD_FAIL;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fe2:	e002      	b.n	8008fea <USBD_CDC_Setup+0x19e>
          break;
 8008fe4:	bf00      	nop
 8008fe6:	e008      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>
          break;
 8008fe8:	bf00      	nop
      }
      break;
 8008fea:	e006      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fc21 	bl	800a836 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	32b0      	adds	r2, #176	; 0xb0
 8009022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800902a:	2303      	movs	r3, #3
 800902c:	e065      	b.n	80090fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	32b0      	adds	r2, #176	; 0xb0
 8009038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	3318      	adds	r3, #24
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d02f      	beq.n	80090b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	f003 020f 	and.w	r2, r3, #15
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	3318      	adds	r3, #24
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	f003 010f 	and.w	r1, r3, #15
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	460b      	mov	r3, r1
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	440b      	add	r3, r1
 800907c:	00db      	lsls	r3, r3, #3
 800907e:	4403      	add	r3, r0
 8009080:	3338      	adds	r3, #56	; 0x38
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	fbb2 f1f3 	udiv	r1, r2, r3
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800908e:	2b00      	cmp	r3, #0
 8009090:	d112      	bne.n	80090b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	3318      	adds	r3, #24
 80090a6:	2200      	movs	r2, #0
 80090a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090aa:	78f9      	ldrb	r1, [r7, #3]
 80090ac:	2300      	movs	r3, #0
 80090ae:	2200      	movs	r2, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f002 f92d 	bl	800b310 <USBD_LL_Transmit>
 80090b6:	e01f      	b.n	80090f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	33b0      	adds	r3, #176	; 0xb0
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d010      	beq.n	80090f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	33b0      	adds	r3, #176	; 0xb0
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	32b0      	adds	r2, #176	; 0xb0
 8009118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	32b0      	adds	r2, #176	; 0xb0
 8009128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009130:	2303      	movs	r3, #3
 8009132:	e01a      	b.n	800916a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f002 f92b 	bl	800b394 <USBD_LL_GetRxDataSize>
 800913e:	4602      	mov	r2, r0
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	33b0      	adds	r3, #176	; 0xb0
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009164:	4611      	mov	r1, r2
 8009166:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	32b0      	adds	r2, #176	; 0xb0
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009190:	2303      	movs	r3, #3
 8009192:	e025      	b.n	80091e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	33b0      	adds	r3, #176	; 0xb0
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01a      	beq.n	80091de <USBD_CDC_EP0_RxReady+0x6c>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091ae:	2bff      	cmp	r3, #255	; 0xff
 80091b0:	d015      	beq.n	80091de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	33b0      	adds	r3, #176	; 0xb0
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80091ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091d2:	b292      	uxth	r2, r2
 80091d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	22ff      	movs	r2, #255	; 0xff
 80091da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091f0:	2182      	movs	r1, #130	; 0x82
 80091f2:	4818      	ldr	r0, [pc, #96]	; (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091f4:	f000 fcbd 	bl	8009b72 <USBD_GetEpDesc>
 80091f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091fa:	2101      	movs	r1, #1
 80091fc:	4815      	ldr	r0, [pc, #84]	; (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091fe:	f000 fcb8 	bl	8009b72 <USBD_GetEpDesc>
 8009202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009204:	2181      	movs	r1, #129	; 0x81
 8009206:	4813      	ldr	r0, [pc, #76]	; (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009208:	f000 fcb3 	bl	8009b72 <USBD_GetEpDesc>
 800920c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2210      	movs	r2, #16
 8009218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d006      	beq.n	800922e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2200      	movs	r2, #0
 8009224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009228:	711a      	strb	r2, [r3, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800923c:	711a      	strb	r2, [r3, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2243      	movs	r2, #67	; 0x43
 8009246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009248:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20000058 	.word	0x20000058

08009258 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009260:	2182      	movs	r1, #130	; 0x82
 8009262:	4818      	ldr	r0, [pc, #96]	; (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009264:	f000 fc85 	bl	8009b72 <USBD_GetEpDesc>
 8009268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800926a:	2101      	movs	r1, #1
 800926c:	4815      	ldr	r0, [pc, #84]	; (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800926e:	f000 fc80 	bl	8009b72 <USBD_GetEpDesc>
 8009272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009274:	2181      	movs	r1, #129	; 0x81
 8009276:	4813      	ldr	r0, [pc, #76]	; (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009278:	f000 fc7b 	bl	8009b72 <USBD_GetEpDesc>
 800927c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2210      	movs	r2, #16
 8009288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d006      	beq.n	800929e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2200      	movs	r2, #0
 8009294:	711a      	strb	r2, [r3, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f042 0202 	orr.w	r2, r2, #2
 800929c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	711a      	strb	r2, [r3, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f042 0202 	orr.w	r2, r2, #2
 80092b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2243      	movs	r2, #67	; 0x43
 80092b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000058 	.word	0x20000058

080092c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092d0:	2182      	movs	r1, #130	; 0x82
 80092d2:	4818      	ldr	r0, [pc, #96]	; (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092d4:	f000 fc4d 	bl	8009b72 <USBD_GetEpDesc>
 80092d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092da:	2101      	movs	r1, #1
 80092dc:	4815      	ldr	r0, [pc, #84]	; (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092de:	f000 fc48 	bl	8009b72 <USBD_GetEpDesc>
 80092e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092e4:	2181      	movs	r1, #129	; 0x81
 80092e6:	4813      	ldr	r0, [pc, #76]	; (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092e8:	f000 fc43 	bl	8009b72 <USBD_GetEpDesc>
 80092ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2210      	movs	r2, #16
 80092f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d006      	beq.n	800930e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2200      	movs	r2, #0
 8009304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009308:	711a      	strb	r2, [r3, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d006      	beq.n	8009322 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800931c:	711a      	strb	r2, [r3, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2243      	movs	r2, #67	; 0x43
 8009326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000058 	.word	0x20000058

08009338 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	220a      	movs	r2, #10
 8009344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009346:	4b03      	ldr	r3, [pc, #12]	; (8009354 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	20000014 	.word	0x20000014

08009358 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009368:	2303      	movs	r3, #3
 800936a:	e009      	b.n	8009380 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	33b0      	adds	r3, #176	; 0xb0
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	32b0      	adds	r2, #176	; 0xb0
 80093a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e008      	b.n	80093c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	; 0xb0
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e004      	b.n	80093fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32b0      	adds	r2, #176	; 0xb0
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800942e:	2303      	movs	r3, #3
 8009430:	e025      	b.n	800947e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11f      	bne.n	800947c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2201      	movs	r2, #1
 8009440:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009444:	4b10      	ldr	r3, [pc, #64]	; (8009488 <USBD_CDC_TransmitPacket+0x7c>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 020f 	and.w	r2, r3, #15
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4403      	add	r3, r0
 800945e:	3318      	adds	r3, #24
 8009460:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009462:	4b09      	ldr	r3, [pc, #36]	; (8009488 <USBD_CDC_TransmitPacket+0x7c>)
 8009464:	7819      	ldrb	r1, [r3, #0]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 ff4c 	bl	800b310 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	2000009b 	.word	0x2000009b

0800948c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32b0      	adds	r2, #176	; 0xb0
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32b0      	adds	r2, #176	; 0xb0
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e018      	b.n	80094ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7c1b      	ldrb	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094c2:	4b0c      	ldr	r3, [pc, #48]	; (80094f4 <USBD_CDC_ReceivePacket+0x68>)
 80094c4:	7819      	ldrb	r1, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 ff3e 	bl	800b352 <USBD_LL_PrepareReceive>
 80094d6:	e008      	b.n	80094ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094d8:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <USBD_CDC_ReceivePacket+0x68>)
 80094da:	7819      	ldrb	r1, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 ff34 	bl	800b352 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	2000009c 	.word	0x2000009c

080094f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	4613      	mov	r3, r2
 8009504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800950c:	2303      	movs	r3, #3
 800950e:	e01f      	b.n	8009550 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	79fa      	ldrb	r2, [r7, #7]
 8009542:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f001 fd97 	bl	800b078 <USBD_LL_Init>
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	e025      	b.n	80095bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	32ae      	adds	r2, #174	; 0xae
 8009582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00f      	beq.n	80095ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	32ae      	adds	r2, #174	; 0xae
 8009596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	f107 020e 	add.w	r2, r7, #14
 80095a0:	4610      	mov	r0, r2
 80095a2:	4798      	blx	r3
 80095a4:	4602      	mov	r2, r0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 fdb5 	bl	800b13c <USBD_LL_Start>
 80095d2:	4603      	mov	r3, r0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	78fa      	ldrb	r2, [r7, #3]
 8009616:	4611      	mov	r1, r2
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	4798      	blx	r3
 800961c:	4603      	mov	r3, r0
 800961e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	4611      	mov	r1, r2
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	4798      	blx	r3
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009650:	2303      	movs	r3, #3
 8009652:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	4618      	mov	r0, r3
 8009672:	f001 f8a6 	bl	800a7c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009684:	461a      	mov	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009692:	f003 031f 	and.w	r3, r3, #31
 8009696:	2b02      	cmp	r3, #2
 8009698:	d01a      	beq.n	80096d0 <USBD_LL_SetupStage+0x72>
 800969a:	2b02      	cmp	r3, #2
 800969c:	d822      	bhi.n	80096e4 <USBD_LL_SetupStage+0x86>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <USBD_LL_SetupStage+0x4a>
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d00a      	beq.n	80096bc <USBD_LL_SetupStage+0x5e>
 80096a6:	e01d      	b.n	80096e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fad3 	bl	8009c5c <USBD_StdDevReq>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]
      break;
 80096ba:	e020      	b.n	80096fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fb3b 	bl	8009d40 <USBD_StdItfReq>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73fb      	strb	r3, [r7, #15]
      break;
 80096ce:	e016      	b.n	80096fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fb9d 	bl	8009e18 <USBD_StdEPReq>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]
      break;
 80096e2:	e00c      	b.n	80096fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 fd82 	bl	800b1fc <USBD_LL_StallEP>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
      break;
 80096fc:	bf00      	nop
  }

  return ret;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	460b      	mov	r3, r1
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800971a:	7afb      	ldrb	r3, [r7, #11]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d16e      	bne.n	80097fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009726:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800972e:	2b03      	cmp	r3, #3
 8009730:	f040 8098 	bne.w	8009864 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	429a      	cmp	r2, r3
 800973e:	d913      	bls.n	8009768 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	1ad2      	subs	r2, r2, r3
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	4293      	cmp	r3, r2
 8009758:	bf28      	it	cs
 800975a:	4613      	movcs	r3, r2
 800975c:	461a      	mov	r2, r3
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f001 f922 	bl	800a9aa <USBD_CtlContinueRx>
 8009766:	e07d      	b.n	8009864 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800976e:	f003 031f 	and.w	r3, r3, #31
 8009772:	2b02      	cmp	r3, #2
 8009774:	d014      	beq.n	80097a0 <USBD_LL_DataOutStage+0x98>
 8009776:	2b02      	cmp	r3, #2
 8009778:	d81d      	bhi.n	80097b6 <USBD_LL_DataOutStage+0xae>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <USBD_LL_DataOutStage+0x7c>
 800977e:	2b01      	cmp	r3, #1
 8009780:	d003      	beq.n	800978a <USBD_LL_DataOutStage+0x82>
 8009782:	e018      	b.n	80097b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	75bb      	strb	r3, [r7, #22]
            break;
 8009788:	e018      	b.n	80097bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009790:	b2db      	uxtb	r3, r3
 8009792:	4619      	mov	r1, r3
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f9d2 	bl	8009b3e <USBD_CoreFindIF>
 800979a:	4603      	mov	r3, r0
 800979c:	75bb      	strb	r3, [r7, #22]
            break;
 800979e:	e00d      	b.n	80097bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	4619      	mov	r1, r3
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 f9d4 	bl	8009b58 <USBD_CoreFindEP>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75bb      	strb	r3, [r7, #22]
            break;
 80097b4:	e002      	b.n	80097bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	75bb      	strb	r3, [r7, #22]
            break;
 80097ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80097bc:	7dbb      	ldrb	r3, [r7, #22]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d119      	bne.n	80097f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d113      	bne.n	80097f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80097ce:	7dba      	ldrb	r2, [r7, #22]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	32ae      	adds	r2, #174	; 0xae
 80097d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80097de:	7dba      	ldrb	r2, [r7, #22]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80097e6:	7dba      	ldrb	r2, [r7, #22]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	32ae      	adds	r2, #174	; 0xae
 80097ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f001 f8e8 	bl	800a9cc <USBD_CtlSendStatus>
 80097fc:	e032      	b.n	8009864 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80097fe:	7afb      	ldrb	r3, [r7, #11]
 8009800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009804:	b2db      	uxtb	r3, r3
 8009806:	4619      	mov	r1, r3
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f9a5 	bl	8009b58 <USBD_CoreFindEP>
 800980e:	4603      	mov	r3, r0
 8009810:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009812:	7dbb      	ldrb	r3, [r7, #22]
 8009814:	2bff      	cmp	r3, #255	; 0xff
 8009816:	d025      	beq.n	8009864 <USBD_LL_DataOutStage+0x15c>
 8009818:	7dbb      	ldrb	r3, [r7, #22]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d122      	bne.n	8009864 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b03      	cmp	r3, #3
 8009828:	d117      	bne.n	800985a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800982a:	7dba      	ldrb	r2, [r7, #22]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	32ae      	adds	r2, #174	; 0xae
 8009830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00f      	beq.n	800985a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800983a:	7dba      	ldrb	r2, [r7, #22]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009842:	7dba      	ldrb	r2, [r7, #22]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	32ae      	adds	r2, #174	; 0xae
 8009848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	7afa      	ldrb	r2, [r7, #11]
 8009850:	4611      	mov	r1, r2
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	4798      	blx	r3
 8009856:	4603      	mov	r3, r0
 8009858:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	e000      	b.n	8009866 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b086      	sub	sp, #24
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	460b      	mov	r3, r1
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800987c:	7afb      	ldrb	r3, [r7, #11]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d16f      	bne.n	8009962 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3314      	adds	r3, #20
 8009886:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800988e:	2b02      	cmp	r3, #2
 8009890:	d15a      	bne.n	8009948 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	429a      	cmp	r2, r3
 800989c:	d914      	bls.n	80098c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	689a      	ldr	r2, [r3, #8]
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f001 f84a 	bl	800a94e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ba:	2300      	movs	r3, #0
 80098bc:	2200      	movs	r2, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f001 fd46 	bl	800b352 <USBD_LL_PrepareReceive>
 80098c6:	e03f      	b.n	8009948 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d11c      	bne.n	800990e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80098dc:	429a      	cmp	r2, r3
 80098de:	d316      	bcc.n	800990e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d20f      	bcs.n	800990e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098ee:	2200      	movs	r2, #0
 80098f0:	2100      	movs	r1, #0
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f001 f82b 	bl	800a94e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009900:	2300      	movs	r3, #0
 8009902:	2200      	movs	r2, #0
 8009904:	2100      	movs	r1, #0
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f001 fd23 	bl	800b352 <USBD_LL_PrepareReceive>
 800990c:	e01c      	b.n	8009948 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b03      	cmp	r3, #3
 8009918:	d10f      	bne.n	800993a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800993a:	2180      	movs	r1, #128	; 0x80
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f001 fc5d 	bl	800b1fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f001 f855 	bl	800a9f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d03a      	beq.n	80099c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff fe42 	bl	80095dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009960:	e032      	b.n	80099c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009962:	7afb      	ldrb	r3, [r7, #11]
 8009964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009968:	b2db      	uxtb	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f8f3 	bl	8009b58 <USBD_CoreFindEP>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	2bff      	cmp	r3, #255	; 0xff
 800997a:	d025      	beq.n	80099c8 <USBD_LL_DataInStage+0x15a>
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d122      	bne.n	80099c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b03      	cmp	r3, #3
 800998c:	d11c      	bne.n	80099c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800998e:	7dfa      	ldrb	r2, [r7, #23]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	32ae      	adds	r2, #174	; 0xae
 8009994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d014      	beq.n	80099c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800999e:	7dfa      	ldrb	r2, [r7, #23]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80099a6:	7dfa      	ldrb	r2, [r7, #23]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	32ae      	adds	r2, #174	; 0xae
 80099ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	7afa      	ldrb	r2, [r7, #11]
 80099b4:	4611      	mov	r1, r2
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	4798      	blx	r3
 80099ba:	4603      	mov	r3, r0
 80099bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80099be:	7dbb      	ldrb	r3, [r7, #22]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80099c4:	7dbb      	ldrb	r3, [r7, #22]
 80099c6:	e000      	b.n	80099ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d014      	beq.n	8009a38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00e      	beq.n	8009a38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6852      	ldr	r2, [r2, #4]
 8009a26:	b2d2      	uxtb	r2, r2
 8009a28:	4611      	mov	r1, r2
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	4798      	blx	r3
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a34:	2303      	movs	r3, #3
 8009a36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a38:	2340      	movs	r3, #64	; 0x40
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 fb97 	bl	800b172 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2240      	movs	r2, #64	; 0x40
 8009a50:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	2200      	movs	r2, #0
 8009a58:	2180      	movs	r1, #128	; 0x80
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 fb89 	bl	800b172 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2240      	movs	r2, #64	; 0x40
 8009a6a:	621a      	str	r2, [r3, #32]

  return ret;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	78fa      	ldrb	r2, [r7, #3]
 8009a86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d006      	beq.n	8009ab8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2204      	movs	r2, #4
 8009abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d106      	bne.n	8009af0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d110      	bne.n	8009b34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	460b      	mov	r3, r1
 8009b48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	885b      	ldrh	r3, [r3, #2]
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d920      	bls.n	8009bdc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009ba2:	e013      	b.n	8009bcc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ba4:	f107 030a 	add.w	r3, r7, #10
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6978      	ldr	r0, [r7, #20]
 8009bac:	f000 f81b 	bl	8009be6 <USBD_GetNextDesc>
 8009bb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	785b      	ldrb	r3, [r3, #1]
 8009bb6:	2b05      	cmp	r3, #5
 8009bb8:	d108      	bne.n	8009bcc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	789b      	ldrb	r3, [r3, #2]
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d008      	beq.n	8009bda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	885b      	ldrh	r3, [r3, #2]
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	897b      	ldrh	r3, [r7, #10]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d8e5      	bhi.n	8009ba4 <USBD_GetEpDesc+0x32>
 8009bd8:	e000      	b.n	8009bdc <USBD_GetEpDesc+0x6a>
          break;
 8009bda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009bdc:	693b      	ldr	r3, [r7, #16]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b085      	sub	sp, #20
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	881a      	ldrh	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4413      	add	r3, r2
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4413      	add	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c12:	68fb      	ldr	r3, [r7, #12]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	3301      	adds	r3, #1
 8009c36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c3e:	8a3b      	ldrh	r3, [r7, #16]
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	b21a      	sxth	r2, r3
 8009c44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	b21b      	sxth	r3, r3
 8009c4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c4e:	89fb      	ldrh	r3, [r7, #14]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	371c      	adds	r7, #28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c72:	2b40      	cmp	r3, #64	; 0x40
 8009c74:	d005      	beq.n	8009c82 <USBD_StdDevReq+0x26>
 8009c76:	2b40      	cmp	r3, #64	; 0x40
 8009c78:	d857      	bhi.n	8009d2a <USBD_StdDevReq+0xce>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00f      	beq.n	8009c9e <USBD_StdDevReq+0x42>
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d153      	bne.n	8009d2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	32ae      	adds	r2, #174	; 0xae
 8009c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	4798      	blx	r3
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c9c:	e04a      	b.n	8009d34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	785b      	ldrb	r3, [r3, #1]
 8009ca2:	2b09      	cmp	r3, #9
 8009ca4:	d83b      	bhi.n	8009d1e <USBD_StdDevReq+0xc2>
 8009ca6:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <USBD_StdDevReq+0x50>)
 8009ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cac:	08009d01 	.word	0x08009d01
 8009cb0:	08009d15 	.word	0x08009d15
 8009cb4:	08009d1f 	.word	0x08009d1f
 8009cb8:	08009d0b 	.word	0x08009d0b
 8009cbc:	08009d1f 	.word	0x08009d1f
 8009cc0:	08009cdf 	.word	0x08009cdf
 8009cc4:	08009cd5 	.word	0x08009cd5
 8009cc8:	08009d1f 	.word	0x08009d1f
 8009ccc:	08009cf7 	.word	0x08009cf7
 8009cd0:	08009ce9 	.word	0x08009ce9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa3c 	bl	800a154 <USBD_GetDescriptor>
          break;
 8009cdc:	e024      	b.n	8009d28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fbcb 	bl	800a47c <USBD_SetAddress>
          break;
 8009ce6:	e01f      	b.n	8009d28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fc0a 	bl	800a504 <USBD_SetConfig>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
          break;
 8009cf4:	e018      	b.n	8009d28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fcad 	bl	800a658 <USBD_GetConfig>
          break;
 8009cfe:	e013      	b.n	8009d28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fcde 	bl	800a6c4 <USBD_GetStatus>
          break;
 8009d08:	e00e      	b.n	8009d28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fd0d 	bl	800a72c <USBD_SetFeature>
          break;
 8009d12:	e009      	b.n	8009d28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fd31 	bl	800a77e <USBD_ClrFeature>
          break;
 8009d1c:	e004      	b.n	8009d28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fd88 	bl	800a836 <USBD_CtlError>
          break;
 8009d26:	bf00      	nop
      }
      break;
 8009d28:	e004      	b.n	8009d34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fd82 	bl	800a836 <USBD_CtlError>
      break;
 8009d32:	bf00      	nop
  }

  return ret;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop

08009d40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d56:	2b40      	cmp	r3, #64	; 0x40
 8009d58:	d005      	beq.n	8009d66 <USBD_StdItfReq+0x26>
 8009d5a:	2b40      	cmp	r3, #64	; 0x40
 8009d5c:	d852      	bhi.n	8009e04 <USBD_StdItfReq+0xc4>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <USBD_StdItfReq+0x26>
 8009d62:	2b20      	cmp	r3, #32
 8009d64:	d14e      	bne.n	8009e04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d840      	bhi.n	8009df6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	889b      	ldrh	r3, [r3, #4]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d836      	bhi.n	8009dec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	889b      	ldrh	r3, [r3, #4]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fed9 	bl	8009b3e <USBD_CoreFindIF>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2bff      	cmp	r3, #255	; 0xff
 8009d94:	d01d      	beq.n	8009dd2 <USBD_StdItfReq+0x92>
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d11a      	bne.n	8009dd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d9c:	7bba      	ldrb	r2, [r7, #14]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	32ae      	adds	r2, #174	; 0xae
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00f      	beq.n	8009dcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009dac:	7bba      	ldrb	r2, [r7, #14]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009db4:	7bba      	ldrb	r2, [r7, #14]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	32ae      	adds	r2, #174	; 0xae
 8009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009dca:	e004      	b.n	8009dd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009dd0:	e001      	b.n	8009dd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	88db      	ldrh	r3, [r3, #6]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d110      	bne.n	8009e00 <USBD_StdItfReq+0xc0>
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10d      	bne.n	8009e00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fdf1 	bl	800a9cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009dea:	e009      	b.n	8009e00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fd21 	bl	800a836 <USBD_CtlError>
          break;
 8009df4:	e004      	b.n	8009e00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fd1c 	bl	800a836 <USBD_CtlError>
          break;
 8009dfe:	e000      	b.n	8009e02 <USBD_StdItfReq+0xc2>
          break;
 8009e00:	bf00      	nop
      }
      break;
 8009e02:	e004      	b.n	8009e0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fd15 	bl	800a836 <USBD_CtlError>
      break;
 8009e0c:	bf00      	nop
  }

  return ret;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	889b      	ldrh	r3, [r3, #4]
 8009e2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e34:	2b40      	cmp	r3, #64	; 0x40
 8009e36:	d007      	beq.n	8009e48 <USBD_StdEPReq+0x30>
 8009e38:	2b40      	cmp	r3, #64	; 0x40
 8009e3a:	f200 817f 	bhi.w	800a13c <USBD_StdEPReq+0x324>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d02a      	beq.n	8009e98 <USBD_StdEPReq+0x80>
 8009e42:	2b20      	cmp	r3, #32
 8009e44:	f040 817a 	bne.w	800a13c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff fe83 	bl	8009b58 <USBD_CoreFindEP>
 8009e52:	4603      	mov	r3, r0
 8009e54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e56:	7b7b      	ldrb	r3, [r7, #13]
 8009e58:	2bff      	cmp	r3, #255	; 0xff
 8009e5a:	f000 8174 	beq.w	800a146 <USBD_StdEPReq+0x32e>
 8009e5e:	7b7b      	ldrb	r3, [r7, #13]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f040 8170 	bne.w	800a146 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e66:	7b7a      	ldrb	r2, [r7, #13]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e6e:	7b7a      	ldrb	r2, [r7, #13]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	32ae      	adds	r2, #174	; 0xae
 8009e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 8163 	beq.w	800a146 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e80:	7b7a      	ldrb	r2, [r7, #13]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	32ae      	adds	r2, #174	; 0xae
 8009e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	4798      	blx	r3
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e96:	e156      	b.n	800a146 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d008      	beq.n	8009eb2 <USBD_StdEPReq+0x9a>
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	f300 8145 	bgt.w	800a130 <USBD_StdEPReq+0x318>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 809b 	beq.w	8009fe2 <USBD_StdEPReq+0x1ca>
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d03c      	beq.n	8009f2a <USBD_StdEPReq+0x112>
 8009eb0:	e13e      	b.n	800a130 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d002      	beq.n	8009ec4 <USBD_StdEPReq+0xac>
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d016      	beq.n	8009ef0 <USBD_StdEPReq+0xd8>
 8009ec2:	e02c      	b.n	8009f1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00d      	beq.n	8009ee6 <USBD_StdEPReq+0xce>
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	2b80      	cmp	r3, #128	; 0x80
 8009ece:	d00a      	beq.n	8009ee6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 f991 	bl	800b1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eda:	2180      	movs	r1, #128	; 0x80
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 f98d 	bl	800b1fc <USBD_LL_StallEP>
 8009ee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ee4:	e020      	b.n	8009f28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fca4 	bl	800a836 <USBD_CtlError>
              break;
 8009eee:	e01b      	b.n	8009f28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	885b      	ldrh	r3, [r3, #2]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10e      	bne.n	8009f16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00b      	beq.n	8009f16 <USBD_StdEPReq+0xfe>
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	2b80      	cmp	r3, #128	; 0x80
 8009f02:	d008      	beq.n	8009f16 <USBD_StdEPReq+0xfe>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	88db      	ldrh	r3, [r3, #6]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d104      	bne.n	8009f16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f973 	bl	800b1fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fd58 	bl	800a9cc <USBD_CtlSendStatus>

              break;
 8009f1c:	e004      	b.n	8009f28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fc88 	bl	800a836 <USBD_CtlError>
              break;
 8009f26:	bf00      	nop
          }
          break;
 8009f28:	e107      	b.n	800a13a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d002      	beq.n	8009f3c <USBD_StdEPReq+0x124>
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d016      	beq.n	8009f68 <USBD_StdEPReq+0x150>
 8009f3a:	e04b      	b.n	8009fd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00d      	beq.n	8009f5e <USBD_StdEPReq+0x146>
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	2b80      	cmp	r3, #128	; 0x80
 8009f46:	d00a      	beq.n	8009f5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 f955 	bl	800b1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f52:	2180      	movs	r1, #128	; 0x80
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f951 	bl	800b1fc <USBD_LL_StallEP>
 8009f5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f5c:	e040      	b.n	8009fe0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fc68 	bl	800a836 <USBD_CtlError>
              break;
 8009f66:	e03b      	b.n	8009fe0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	885b      	ldrh	r3, [r3, #2]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d136      	bne.n	8009fde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f7a:	7bbb      	ldrb	r3, [r7, #14]
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 f95b 	bl	800b23a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fd21 	bl	800a9cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff fde2 	bl	8009b58 <USBD_CoreFindEP>
 8009f94:	4603      	mov	r3, r0
 8009f96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f98:	7b7b      	ldrb	r3, [r7, #13]
 8009f9a:	2bff      	cmp	r3, #255	; 0xff
 8009f9c:	d01f      	beq.n	8009fde <USBD_StdEPReq+0x1c6>
 8009f9e:	7b7b      	ldrb	r3, [r7, #13]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d11c      	bne.n	8009fde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009fa4:	7b7a      	ldrb	r2, [r7, #13]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009fac:	7b7a      	ldrb	r2, [r7, #13]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	32ae      	adds	r2, #174	; 0xae
 8009fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d010      	beq.n	8009fde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fbc:	7b7a      	ldrb	r2, [r7, #13]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	32ae      	adds	r2, #174	; 0xae
 8009fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009fd2:	e004      	b.n	8009fde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fc2d 	bl	800a836 <USBD_CtlError>
              break;
 8009fdc:	e000      	b.n	8009fe0 <USBD_StdEPReq+0x1c8>
              break;
 8009fde:	bf00      	nop
          }
          break;
 8009fe0:	e0ab      	b.n	800a13a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d002      	beq.n	8009ff4 <USBD_StdEPReq+0x1dc>
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d032      	beq.n	800a058 <USBD_StdEPReq+0x240>
 8009ff2:	e097      	b.n	800a124 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d007      	beq.n	800a00a <USBD_StdEPReq+0x1f2>
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d004      	beq.n	800a00a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fc17 	bl	800a836 <USBD_CtlError>
                break;
 800a008:	e091      	b.n	800a12e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a00a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	da0b      	bge.n	800a02a <USBD_StdEPReq+0x212>
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	3310      	adds	r3, #16
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	4413      	add	r3, r2
 800a026:	3304      	adds	r3, #4
 800a028:	e00b      	b.n	800a042 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	4413      	add	r3, r2
 800a040:	3304      	adds	r3, #4
 800a042:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2202      	movs	r2, #2
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fc61 	bl	800a918 <USBD_CtlSendData>
              break;
 800a056:	e06a      	b.n	800a12e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	da11      	bge.n	800a084 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a060:	7bbb      	ldrb	r3, [r7, #14]
 800a062:	f003 020f 	and.w	r2, r3, #15
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	3324      	adds	r3, #36	; 0x24
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d117      	bne.n	800a0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fbda 	bl	800a836 <USBD_CtlError>
                  break;
 800a082:	e054      	b.n	800a12e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	f003 020f 	and.w	r2, r3, #15
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d104      	bne.n	800a0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fbc7 	bl	800a836 <USBD_CtlError>
                  break;
 800a0a8:	e041      	b.n	800a12e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	da0b      	bge.n	800a0ca <USBD_StdEPReq+0x2b2>
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	3310      	adds	r3, #16
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	e00b      	b.n	800a0e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	4413      	add	r3, r2
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USBD_StdEPReq+0x2d8>
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
 800a0ec:	2b80      	cmp	r3, #128	; 0x80
 800a0ee:	d103      	bne.n	800a0f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	e00e      	b.n	800a116 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 f8bb 	bl	800b278 <USBD_LL_IsStallEP>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2201      	movs	r2, #1
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	e002      	b.n	800a116 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2202      	movs	r2, #2
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fbfb 	bl	800a918 <USBD_CtlSendData>
              break;
 800a122:	e004      	b.n	800a12e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fb85 	bl	800a836 <USBD_CtlError>
              break;
 800a12c:	bf00      	nop
          }
          break;
 800a12e:	e004      	b.n	800a13a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fb7f 	bl	800a836 <USBD_CtlError>
          break;
 800a138:	bf00      	nop
      }
      break;
 800a13a:	e005      	b.n	800a148 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fb79 	bl	800a836 <USBD_CtlError>
      break;
 800a144:	e000      	b.n	800a148 <USBD_StdEPReq+0x330>
      break;
 800a146:	bf00      	nop
  }

  return ret;
 800a148:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a15e:	2300      	movs	r3, #0
 800a160:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a166:	2300      	movs	r3, #0
 800a168:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	885b      	ldrh	r3, [r3, #2]
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b29b      	uxth	r3, r3
 800a172:	3b01      	subs	r3, #1
 800a174:	2b0e      	cmp	r3, #14
 800a176:	f200 8152 	bhi.w	800a41e <USBD_GetDescriptor+0x2ca>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <USBD_GetDescriptor+0x2c>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a1f1 	.word	0x0800a1f1
 800a184:	0800a209 	.word	0x0800a209
 800a188:	0800a249 	.word	0x0800a249
 800a18c:	0800a41f 	.word	0x0800a41f
 800a190:	0800a41f 	.word	0x0800a41f
 800a194:	0800a3bf 	.word	0x0800a3bf
 800a198:	0800a3eb 	.word	0x0800a3eb
 800a19c:	0800a41f 	.word	0x0800a41f
 800a1a0:	0800a41f 	.word	0x0800a41f
 800a1a4:	0800a41f 	.word	0x0800a41f
 800a1a8:	0800a41f 	.word	0x0800a41f
 800a1ac:	0800a41f 	.word	0x0800a41f
 800a1b0:	0800a41f 	.word	0x0800a41f
 800a1b4:	0800a41f 	.word	0x0800a41f
 800a1b8:	0800a1bd 	.word	0x0800a1bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ce:	69db      	ldr	r3, [r3, #28]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	7c12      	ldrb	r2, [r2, #16]
 800a1d4:	f107 0108 	add.w	r1, r7, #8
 800a1d8:	4610      	mov	r0, r2
 800a1da:	4798      	blx	r3
 800a1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1de:	e126      	b.n	800a42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fb27 	bl	800a836 <USBD_CtlError>
        err++;
 800a1e8:	7afb      	ldrb	r3, [r7, #11]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ee:	e11e      	b.n	800a42e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	7c12      	ldrb	r2, [r2, #16]
 800a1fc:	f107 0108 	add.w	r1, r7, #8
 800a200:	4610      	mov	r0, r2
 800a202:	4798      	blx	r3
 800a204:	60f8      	str	r0, [r7, #12]
      break;
 800a206:	e112      	b.n	800a42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7c1b      	ldrb	r3, [r3, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10d      	bne.n	800a22c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	f107 0208 	add.w	r2, r7, #8
 800a21c:	4610      	mov	r0, r2
 800a21e:	4798      	blx	r3
 800a220:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3301      	adds	r3, #1
 800a226:	2202      	movs	r2, #2
 800a228:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a22a:	e100      	b.n	800a42e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a234:	f107 0208 	add.w	r2, r7, #8
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	2202      	movs	r2, #2
 800a244:	701a      	strb	r2, [r3, #0]
      break;
 800a246:	e0f2      	b.n	800a42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	885b      	ldrh	r3, [r3, #2]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b05      	cmp	r3, #5
 800a250:	f200 80ac 	bhi.w	800a3ac <USBD_GetDescriptor+0x258>
 800a254:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <USBD_GetDescriptor+0x108>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a275 	.word	0x0800a275
 800a260:	0800a2a9 	.word	0x0800a2a9
 800a264:	0800a2dd 	.word	0x0800a2dd
 800a268:	0800a311 	.word	0x0800a311
 800a26c:	0800a345 	.word	0x0800a345
 800a270:	0800a379 	.word	0x0800a379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7c12      	ldrb	r2, [r2, #16]
 800a28c:	f107 0108 	add.w	r1, r7, #8
 800a290:	4610      	mov	r0, r2
 800a292:	4798      	blx	r3
 800a294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a296:	e091      	b.n	800a3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 facb 	bl	800a836 <USBD_CtlError>
            err++;
 800a2a0:	7afb      	ldrb	r3, [r7, #11]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a6:	e089      	b.n	800a3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	7c12      	ldrb	r2, [r2, #16]
 800a2c0:	f107 0108 	add.w	r1, r7, #8
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ca:	e077      	b.n	800a3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fab1 	bl	800a836 <USBD_CtlError>
            err++;
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2da:	e06f      	b.n	800a3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	7c12      	ldrb	r2, [r2, #16]
 800a2f4:	f107 0108 	add.w	r1, r7, #8
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	4798      	blx	r3
 800a2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fe:	e05d      	b.n	800a3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa97 	bl	800a836 <USBD_CtlError>
            err++;
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	3301      	adds	r3, #1
 800a30c:	72fb      	strb	r3, [r7, #11]
          break;
 800a30e:	e055      	b.n	800a3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00b      	beq.n	800a334 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	7c12      	ldrb	r2, [r2, #16]
 800a328:	f107 0108 	add.w	r1, r7, #8
 800a32c:	4610      	mov	r0, r2
 800a32e:	4798      	blx	r3
 800a330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a332:	e043      	b.n	800a3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa7d 	bl	800a836 <USBD_CtlError>
            err++;
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	3301      	adds	r3, #1
 800a340:	72fb      	strb	r3, [r7, #11]
          break;
 800a342:	e03b      	b.n	800a3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	7c12      	ldrb	r2, [r2, #16]
 800a35c:	f107 0108 	add.w	r1, r7, #8
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3
 800a364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a366:	e029      	b.n	800a3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa63 	bl	800a836 <USBD_CtlError>
            err++;
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	3301      	adds	r3, #1
 800a374:	72fb      	strb	r3, [r7, #11]
          break;
 800a376:	e021      	b.n	800a3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	7c12      	ldrb	r2, [r2, #16]
 800a390:	f107 0108 	add.w	r1, r7, #8
 800a394:	4610      	mov	r0, r2
 800a396:	4798      	blx	r3
 800a398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a39a:	e00f      	b.n	800a3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa49 	bl	800a836 <USBD_CtlError>
            err++;
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3aa:	e007      	b.n	800a3bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fa41 	bl	800a836 <USBD_CtlError>
          err++;
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a3ba:	bf00      	nop
      }
      break;
 800a3bc:	e037      	b.n	800a42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	7c1b      	ldrb	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	f107 0208 	add.w	r2, r7, #8
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	4798      	blx	r3
 800a3d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3d8:	e029      	b.n	800a42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fa2a 	bl	800a836 <USBD_CtlError>
        err++;
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3e8:	e021      	b.n	800a42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	7c1b      	ldrb	r3, [r3, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10d      	bne.n	800a40e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fa:	f107 0208 	add.w	r2, r7, #8
 800a3fe:	4610      	mov	r0, r2
 800a400:	4798      	blx	r3
 800a402:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3301      	adds	r3, #1
 800a408:	2207      	movs	r2, #7
 800a40a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a40c:	e00f      	b.n	800a42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fa10 	bl	800a836 <USBD_CtlError>
        err++;
 800a416:	7afb      	ldrb	r3, [r7, #11]
 800a418:	3301      	adds	r3, #1
 800a41a:	72fb      	strb	r3, [r7, #11]
      break;
 800a41c:	e007      	b.n	800a42e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fa08 	bl	800a836 <USBD_CtlError>
      err++;
 800a426:	7afb      	ldrb	r3, [r7, #11]
 800a428:	3301      	adds	r3, #1
 800a42a:	72fb      	strb	r3, [r7, #11]
      break;
 800a42c:	bf00      	nop
  }

  if (err != 0U)
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d11e      	bne.n	800a472 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	88db      	ldrh	r3, [r3, #6]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d016      	beq.n	800a46a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a43c:	893b      	ldrh	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00e      	beq.n	800a460 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	88da      	ldrh	r2, [r3, #6]
 800a446:	893b      	ldrh	r3, [r7, #8]
 800a448:	4293      	cmp	r3, r2
 800a44a:	bf28      	it	cs
 800a44c:	4613      	movcs	r3, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a452:	893b      	ldrh	r3, [r7, #8]
 800a454:	461a      	mov	r2, r3
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fa5d 	bl	800a918 <USBD_CtlSendData>
 800a45e:	e009      	b.n	800a474 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a460:	6839      	ldr	r1, [r7, #0]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f9e7 	bl	800a836 <USBD_CtlError>
 800a468:	e004      	b.n	800a474 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 faae 	bl	800a9cc <USBD_CtlSendStatus>
 800a470:	e000      	b.n	800a474 <USBD_GetDescriptor+0x320>
    return;
 800a472:	bf00      	nop
  }
}
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop

0800a47c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	889b      	ldrh	r3, [r3, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d131      	bne.n	800a4f2 <USBD_SetAddress+0x76>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	88db      	ldrh	r3, [r3, #6]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d12d      	bne.n	800a4f2 <USBD_SetAddress+0x76>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	885b      	ldrh	r3, [r3, #2]
 800a49a:	2b7f      	cmp	r3, #127	; 0x7f
 800a49c:	d829      	bhi.n	800a4f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	885b      	ldrh	r3, [r3, #2]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d104      	bne.n	800a4c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f9bc 	bl	800a836 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4be:	e01d      	b.n	800a4fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	7bfa      	ldrb	r2, [r7, #15]
 800a4c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 ff00 	bl	800b2d2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa7a 	bl	800a9cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e6:	e009      	b.n	800a4fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f0:	e004      	b.n	800a4fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f99e 	bl	800a836 <USBD_CtlError>
  }
}
 800a4fa:	bf00      	nop
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	885b      	ldrh	r3, [r3, #2]
 800a516:	b2da      	uxtb	r2, r3
 800a518:	4b4e      	ldr	r3, [pc, #312]	; (800a654 <USBD_SetConfig+0x150>)
 800a51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a51c:	4b4d      	ldr	r3, [pc, #308]	; (800a654 <USBD_SetConfig+0x150>)
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d905      	bls.n	800a530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f985 	bl	800a836 <USBD_CtlError>
    return USBD_FAIL;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e08c      	b.n	800a64a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d002      	beq.n	800a542 <USBD_SetConfig+0x3e>
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d029      	beq.n	800a594 <USBD_SetConfig+0x90>
 800a540:	e075      	b.n	800a62e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a542:	4b44      	ldr	r3, [pc, #272]	; (800a654 <USBD_SetConfig+0x150>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d020      	beq.n	800a58c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a54a:	4b42      	ldr	r3, [pc, #264]	; (800a654 <USBD_SetConfig+0x150>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a554:	4b3f      	ldr	r3, [pc, #252]	; (800a654 <USBD_SetConfig+0x150>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7ff f849 	bl	80095f2 <USBD_SetClassConfig>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f962 	bl	800a836 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2202      	movs	r2, #2
 800a576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a57a:	e065      	b.n	800a648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fa25 	bl	800a9cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2203      	movs	r2, #3
 800a586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a58a:	e05d      	b.n	800a648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fa1d 	bl	800a9cc <USBD_CtlSendStatus>
      break;
 800a592:	e059      	b.n	800a648 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a594:	4b2f      	ldr	r3, [pc, #188]	; (800a654 <USBD_SetConfig+0x150>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d112      	bne.n	800a5c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a5a4:	4b2b      	ldr	r3, [pc, #172]	; (800a654 <USBD_SetConfig+0x150>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5ae:	4b29      	ldr	r3, [pc, #164]	; (800a654 <USBD_SetConfig+0x150>)
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff f838 	bl	800962a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fa06 	bl	800a9cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a5c0:	e042      	b.n	800a648 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a5c2:	4b24      	ldr	r3, [pc, #144]	; (800a654 <USBD_SetConfig+0x150>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d02a      	beq.n	800a626 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff f826 	bl	800962a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a5de:	4b1d      	ldr	r3, [pc, #116]	; (800a654 <USBD_SetConfig+0x150>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5e8:	4b1a      	ldr	r3, [pc, #104]	; (800a654 <USBD_SetConfig+0x150>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7fe ffff 	bl	80095f2 <USBD_SetClassConfig>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00f      	beq.n	800a61e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f918 	bl	800a836 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff f80b 	bl	800962a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2202      	movs	r2, #2
 800a618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a61c:	e014      	b.n	800a648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f9d4 	bl	800a9cc <USBD_CtlSendStatus>
      break;
 800a624:	e010      	b.n	800a648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f9d0 	bl	800a9cc <USBD_CtlSendStatus>
      break;
 800a62c:	e00c      	b.n	800a648 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f900 	bl	800a836 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a636:	4b07      	ldr	r3, [pc, #28]	; (800a654 <USBD_SetConfig+0x150>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7fe fff4 	bl	800962a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a642:	2303      	movs	r3, #3
 800a644:	73fb      	strb	r3, [r7, #15]
      break;
 800a646:	bf00      	nop
  }

  return ret;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	200002f8 	.word	0x200002f8

0800a658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	88db      	ldrh	r3, [r3, #6]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d004      	beq.n	800a674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f8e2 	bl	800a836 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a672:	e023      	b.n	800a6bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	dc02      	bgt.n	800a686 <USBD_GetConfig+0x2e>
 800a680:	2b00      	cmp	r3, #0
 800a682:	dc03      	bgt.n	800a68c <USBD_GetConfig+0x34>
 800a684:	e015      	b.n	800a6b2 <USBD_GetConfig+0x5a>
 800a686:	2b03      	cmp	r3, #3
 800a688:	d00b      	beq.n	800a6a2 <USBD_GetConfig+0x4a>
 800a68a:	e012      	b.n	800a6b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3308      	adds	r3, #8
 800a696:	2201      	movs	r2, #1
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f93c 	bl	800a918 <USBD_CtlSendData>
        break;
 800a6a0:	e00c      	b.n	800a6bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f934 	bl	800a918 <USBD_CtlSendData>
        break;
 800a6b0:	e004      	b.n	800a6bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f8be 	bl	800a836 <USBD_CtlError>
        break;
 800a6ba:	bf00      	nop
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d81e      	bhi.n	800a71a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	88db      	ldrh	r3, [r3, #6]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d004      	beq.n	800a6ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f8a5 	bl	800a836 <USBD_CtlError>
        break;
 800a6ec:	e01a      	b.n	800a724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d005      	beq.n	800a70a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f043 0202 	orr.w	r2, r3, #2
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	330c      	adds	r3, #12
 800a70e:	2202      	movs	r2, #2
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f900 	bl	800a918 <USBD_CtlSendData>
      break;
 800a718:	e004      	b.n	800a724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f88a 	bl	800a836 <USBD_CtlError>
      break;
 800a722:	bf00      	nop
  }
}
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	885b      	ldrh	r3, [r3, #2]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d107      	bne.n	800a74e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f940 	bl	800a9cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a74c:	e013      	b.n	800a776 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	885b      	ldrh	r3, [r3, #2]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d10b      	bne.n	800a76e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	889b      	ldrh	r3, [r3, #4]
 800a75a:	0a1b      	lsrs	r3, r3, #8
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f930 	bl	800a9cc <USBD_CtlSendStatus>
}
 800a76c:	e003      	b.n	800a776 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f860 	bl	800a836 <USBD_CtlError>
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	3b01      	subs	r3, #1
 800a792:	2b02      	cmp	r3, #2
 800a794:	d80b      	bhi.n	800a7ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	885b      	ldrh	r3, [r3, #2]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10c      	bne.n	800a7b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f910 	bl	800a9cc <USBD_CtlSendStatus>
      }
      break;
 800a7ac:	e004      	b.n	800a7b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f840 	bl	800a836 <USBD_CtlError>
      break;
 800a7b6:	e000      	b.n	800a7ba <USBD_ClrFeature+0x3c>
      break;
 800a7b8:	bf00      	nop
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	781a      	ldrb	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	781a      	ldrb	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7ff fa17 	bl	8009c20 <SWAPBYTE>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3301      	adds	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fa0a 	bl	8009c20 <SWAPBYTE>
 800a80c:	4603      	mov	r3, r0
 800a80e:	461a      	mov	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3301      	adds	r3, #1
 800a818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3301      	adds	r3, #1
 800a81e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7ff f9fd 	bl	8009c20 <SWAPBYTE>
 800a826:	4603      	mov	r3, r0
 800a828:	461a      	mov	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	80da      	strh	r2, [r3, #6]
}
 800a82e:	bf00      	nop
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a840:	2180      	movs	r1, #128	; 0x80
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fcda 	bl	800b1fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a848:	2100      	movs	r1, #0
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fcd6 	bl	800b1fc <USBD_LL_StallEP>
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d036      	beq.n	800a8dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a872:	6938      	ldr	r0, [r7, #16]
 800a874:	f000 f836 	bl	800a8e4 <USBD_GetLen>
 800a878:	4603      	mov	r3, r0
 800a87a:	3301      	adds	r3, #1
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	4413      	add	r3, r2
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	7812      	ldrb	r2, [r2, #0]
 800a890:	701a      	strb	r2, [r3, #0]
  idx++;
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	3301      	adds	r3, #1
 800a896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	4413      	add	r3, r2
 800a89e:	2203      	movs	r2, #3
 800a8a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a8a8:	e013      	b.n	800a8d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	7812      	ldrb	r2, [r2, #0]
 800a8b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	613b      	str	r3, [r7, #16]
    idx++;
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e7      	bne.n	800a8aa <USBD_GetString+0x52>
 800a8da:	e000      	b.n	800a8de <USBD_GetString+0x86>
    return;
 800a8dc:	bf00      	nop
  }
}
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a8f4:	e005      	b.n	800a902 <USBD_GetLen+0x1e>
  {
    len++;
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	3301      	adds	r3, #1
 800a900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1f5      	bne.n	800a8f6 <USBD_GetLen+0x12>
  }

  return len;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2202      	movs	r2, #2
 800a928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	2100      	movs	r1, #0
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 fce6 	bl	800b310 <USBD_LL_Transmit>

  return USBD_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	2100      	movs	r1, #0
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fcd5 	bl	800b310 <USBD_LL_Transmit>

  return USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2203      	movs	r2, #3
 800a980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	2100      	movs	r1, #0
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 fcd9 	bl	800b352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f000 fcc8 	bl	800b352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9dc:	2300      	movs	r3, #0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fc94 	bl	800b310 <USBD_LL_Transmit>

  return USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2205      	movs	r2, #5
 800a9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa02:	2300      	movs	r3, #0
 800aa04:	2200      	movs	r2, #0
 800aa06:	2100      	movs	r1, #0
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fca2 	bl	800b352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4912      	ldr	r1, [pc, #72]	; (800aa68 <MX_USB_Device_Init+0x50>)
 800aa20:	4812      	ldr	r0, [pc, #72]	; (800aa6c <MX_USB_Device_Init+0x54>)
 800aa22:	f7fe fd69 	bl	80094f8 <USBD_Init>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800aa2c:	f7f6 f972 	bl	8000d14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800aa30:	490f      	ldr	r1, [pc, #60]	; (800aa70 <MX_USB_Device_Init+0x58>)
 800aa32:	480e      	ldr	r0, [pc, #56]	; (800aa6c <MX_USB_Device_Init+0x54>)
 800aa34:	f7fe fd90 	bl	8009558 <USBD_RegisterClass>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800aa3e:	f7f6 f969 	bl	8000d14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800aa42:	490c      	ldr	r1, [pc, #48]	; (800aa74 <MX_USB_Device_Init+0x5c>)
 800aa44:	4809      	ldr	r0, [pc, #36]	; (800aa6c <MX_USB_Device_Init+0x54>)
 800aa46:	f7fe fc87 	bl	8009358 <USBD_CDC_RegisterInterface>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800aa50:	f7f6 f960 	bl	8000d14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aa54:	4805      	ldr	r0, [pc, #20]	; (800aa6c <MX_USB_Device_Init+0x54>)
 800aa56:	f7fe fdb5 	bl	80095c4 <USBD_Start>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aa60:	f7f6 f958 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aa64:	bf00      	nop
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	200000b4 	.word	0x200000b4
 800aa6c:	200002fc 	.word	0x200002fc
 800aa70:	20000020 	.word	0x20000020
 800aa74:	200000a0 	.word	0x200000a0

0800aa78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4905      	ldr	r1, [pc, #20]	; (800aa94 <CDC_Init_FS+0x1c>)
 800aa80:	4805      	ldr	r0, [pc, #20]	; (800aa98 <CDC_Init_FS+0x20>)
 800aa82:	f7fe fc83 	bl	800938c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa86:	4905      	ldr	r1, [pc, #20]	; (800aa9c <CDC_Init_FS+0x24>)
 800aa88:	4803      	ldr	r0, [pc, #12]	; (800aa98 <CDC_Init_FS+0x20>)
 800aa8a:	f7fe fca1 	bl	80093d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20000dd8 	.word	0x20000dd8
 800aa98:	200002fc 	.word	0x200002fc
 800aa9c:	200005d8 	.word	0x200005d8

0800aaa0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aaa4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	6039      	str	r1, [r7, #0]
 800aaba:	71fb      	strb	r3, [r7, #7]
 800aabc:	4613      	mov	r3, r2
 800aabe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aac0:	79fb      	ldrb	r3, [r7, #7]
 800aac2:	2b23      	cmp	r3, #35	; 0x23
 800aac4:	d84a      	bhi.n	800ab5c <CDC_Control_FS+0xac>
 800aac6:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <CDC_Control_FS+0x1c>)
 800aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aacc:	0800ab5d 	.word	0x0800ab5d
 800aad0:	0800ab5d 	.word	0x0800ab5d
 800aad4:	0800ab5d 	.word	0x0800ab5d
 800aad8:	0800ab5d 	.word	0x0800ab5d
 800aadc:	0800ab5d 	.word	0x0800ab5d
 800aae0:	0800ab5d 	.word	0x0800ab5d
 800aae4:	0800ab5d 	.word	0x0800ab5d
 800aae8:	0800ab5d 	.word	0x0800ab5d
 800aaec:	0800ab5d 	.word	0x0800ab5d
 800aaf0:	0800ab5d 	.word	0x0800ab5d
 800aaf4:	0800ab5d 	.word	0x0800ab5d
 800aaf8:	0800ab5d 	.word	0x0800ab5d
 800aafc:	0800ab5d 	.word	0x0800ab5d
 800ab00:	0800ab5d 	.word	0x0800ab5d
 800ab04:	0800ab5d 	.word	0x0800ab5d
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800ab5d 	.word	0x0800ab5d
 800ab10:	0800ab5d 	.word	0x0800ab5d
 800ab14:	0800ab5d 	.word	0x0800ab5d
 800ab18:	0800ab5d 	.word	0x0800ab5d
 800ab1c:	0800ab5d 	.word	0x0800ab5d
 800ab20:	0800ab5d 	.word	0x0800ab5d
 800ab24:	0800ab5d 	.word	0x0800ab5d
 800ab28:	0800ab5d 	.word	0x0800ab5d
 800ab2c:	0800ab5d 	.word	0x0800ab5d
 800ab30:	0800ab5d 	.word	0x0800ab5d
 800ab34:	0800ab5d 	.word	0x0800ab5d
 800ab38:	0800ab5d 	.word	0x0800ab5d
 800ab3c:	0800ab5d 	.word	0x0800ab5d
 800ab40:	0800ab5d 	.word	0x0800ab5d
 800ab44:	0800ab5d 	.word	0x0800ab5d
 800ab48:	0800ab5d 	.word	0x0800ab5d
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800ab5d 	.word	0x0800ab5d
 800ab54:	0800ab5d 	.word	0x0800ab5d
 800ab58:	0800ab5d 	.word	0x0800ab5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab5c:	bf00      	nop
  }

  return (USBD_OK);
 800ab5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <CDC_Receive_FS+0x24>)
 800ab7a:	f7fe fc29 	bl	80093d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab7e:	4804      	ldr	r0, [pc, #16]	; (800ab90 <CDC_Receive_FS+0x24>)
 800ab80:	f7fe fc84 	bl	800948c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	200002fc 	.word	0x200002fc

0800ab94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aba4:	4b0d      	ldr	r3, [pc, #52]	; (800abdc <CDC_Transmit_FS+0x48>)
 800aba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e00b      	b.n	800abd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800abba:	887b      	ldrh	r3, [r7, #2]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	4806      	ldr	r0, [pc, #24]	; (800abdc <CDC_Transmit_FS+0x48>)
 800abc2:	f7fe fbe3 	bl	800938c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800abc6:	4805      	ldr	r0, [pc, #20]	; (800abdc <CDC_Transmit_FS+0x48>)
 800abc8:	f7fe fc20 	bl	800940c <USBD_CDC_TransmitPacket>
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	200002fc 	.word	0x200002fc

0800abe0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4613      	mov	r3, r2
 800abec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800abf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	371c      	adds	r7, #28
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
	...

0800ac04 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2212      	movs	r2, #18
 800ac14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ac16:	4b03      	ldr	r3, [pc, #12]	; (800ac24 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	200000d4 	.word	0x200000d4

0800ac28 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	6039      	str	r1, [r7, #0]
 800ac32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2204      	movs	r2, #4
 800ac38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac3a:	4b03      	ldr	r3, [pc, #12]	; (800ac48 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	200000e8 	.word	0x200000e8

0800ac4c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d105      	bne.n	800ac6a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	4907      	ldr	r1, [pc, #28]	; (800ac80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac62:	4808      	ldr	r0, [pc, #32]	; (800ac84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac64:	f7ff fdf8 	bl	800a858 <USBD_GetString>
 800ac68:	e004      	b.n	800ac74 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4904      	ldr	r1, [pc, #16]	; (800ac80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac6e:	4805      	ldr	r0, [pc, #20]	; (800ac84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac70:	f7ff fdf2 	bl	800a858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac74:	4b02      	ldr	r3, [pc, #8]	; (800ac80 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	200015d8 	.word	0x200015d8
 800ac84:	080164d8 	.word	0x080164d8

0800ac88 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	4904      	ldr	r1, [pc, #16]	; (800aca8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac98:	4804      	ldr	r0, [pc, #16]	; (800acac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac9a:	f7ff fddd 	bl	800a858 <USBD_GetString>
  return USBD_StrDesc;
 800ac9e:	4b02      	ldr	r3, [pc, #8]	; (800aca8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	200015d8 	.word	0x200015d8
 800acac:	080164f0 	.word	0x080164f0

0800acb0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	6039      	str	r1, [r7, #0]
 800acba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	221a      	movs	r2, #26
 800acc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acc2:	f000 f843 	bl	800ad4c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800acc6:	4b02      	ldr	r3, [pc, #8]	; (800acd0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	200000ec 	.word	0x200000ec

0800acd4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d105      	bne.n	800acf2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4907      	ldr	r1, [pc, #28]	; (800ad08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800acea:	4808      	ldr	r0, [pc, #32]	; (800ad0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800acec:	f7ff fdb4 	bl	800a858 <USBD_GetString>
 800acf0:	e004      	b.n	800acfc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4904      	ldr	r1, [pc, #16]	; (800ad08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800acf6:	4805      	ldr	r0, [pc, #20]	; (800ad0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800acf8:	f7ff fdae 	bl	800a858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acfc:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200015d8 	.word	0x200015d8
 800ad0c:	08016504 	.word	0x08016504

0800ad10 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	4907      	ldr	r1, [pc, #28]	; (800ad44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ad26:	4808      	ldr	r0, [pc, #32]	; (800ad48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ad28:	f7ff fd96 	bl	800a858 <USBD_GetString>
 800ad2c:	e004      	b.n	800ad38 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	4904      	ldr	r1, [pc, #16]	; (800ad44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ad32:	4805      	ldr	r0, [pc, #20]	; (800ad48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ad34:	f7ff fd90 	bl	800a858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad38:	4b02      	ldr	r3, [pc, #8]	; (800ad44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	200015d8 	.word	0x200015d8
 800ad48:	08016510 	.word	0x08016510

0800ad4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad52:	4b0f      	ldr	r3, [pc, #60]	; (800ad90 <Get_SerialNum+0x44>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad58:	4b0e      	ldr	r3, [pc, #56]	; (800ad94 <Get_SerialNum+0x48>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <Get_SerialNum+0x4c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4413      	add	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad72:	2208      	movs	r2, #8
 800ad74:	4909      	ldr	r1, [pc, #36]	; (800ad9c <Get_SerialNum+0x50>)
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 f814 	bl	800ada4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad7c:	2204      	movs	r2, #4
 800ad7e:	4908      	ldr	r1, [pc, #32]	; (800ada0 <Get_SerialNum+0x54>)
 800ad80:	68b8      	ldr	r0, [r7, #8]
 800ad82:	f000 f80f 	bl	800ada4 <IntToUnicode>
  }
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	1fff7590 	.word	0x1fff7590
 800ad94:	1fff7594 	.word	0x1fff7594
 800ad98:	1fff7598 	.word	0x1fff7598
 800ad9c:	200000ee 	.word	0x200000ee
 800ada0:	200000fe 	.word	0x200000fe

0800ada4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	4613      	mov	r3, r2
 800adb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800adb6:	2300      	movs	r3, #0
 800adb8:	75fb      	strb	r3, [r7, #23]
 800adba:	e027      	b.n	800ae0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	0f1b      	lsrs	r3, r3, #28
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d80b      	bhi.n	800addc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	0f1b      	lsrs	r3, r3, #28
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	4619      	mov	r1, r3
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	440b      	add	r3, r1
 800add4:	3230      	adds	r2, #48	; 0x30
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	e00a      	b.n	800adf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	0f1b      	lsrs	r3, r3, #28
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	4619      	mov	r1, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	440b      	add	r3, r1
 800adec:	3237      	adds	r2, #55	; 0x37
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	3301      	adds	r3, #1
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	4413      	add	r3, r2
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	75fb      	strb	r3, [r7, #23]
 800ae0c:	7dfa      	ldrb	r2, [r7, #23]
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d3d3      	bcc.n	800adbc <IntToUnicode+0x18>
  }
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <LL_AHB2_GRP1_EnableClock>:
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ae2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ae3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4013      	ands	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ae46:	68fb      	ldr	r3, [r7, #12]
}
 800ae48:	bf00      	nop
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <LL_APB1_GRP1_EnableClock>:
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ae5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ae6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4013      	ands	r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ae78:	68fb      	ldr	r3, [r7, #12]
}
 800ae7a:	bf00      	nop
 800ae7c:	3714      	adds	r7, #20
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
	...

0800ae88 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b09c      	sub	sp, #112	; 0x70
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ae94:	2200      	movs	r2, #0
 800ae96:	601a      	str	r2, [r3, #0]
 800ae98:	605a      	str	r2, [r3, #4]
 800ae9a:	609a      	str	r2, [r3, #8]
 800ae9c:	60da      	str	r2, [r3, #12]
 800ae9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aea0:	f107 030c 	add.w	r3, r7, #12
 800aea4:	2250      	movs	r2, #80	; 0x50
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f00a fde7 	bl	8015a7c <memset>
  if(pcdHandle->Instance==USB)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a1b      	ldr	r2, [pc, #108]	; (800af20 <HAL_PCD_MspInit+0x98>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d12f      	bne.n	800af18 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800aeb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aebc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800aebe:	2300      	movs	r3, #0
 800aec0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aec2:	f107 030c 	add.w	r3, r7, #12
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fa f8c5 	bl	8005056 <HAL_RCCEx_PeriphCLKConfig>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800aed2:	f7f5 ff1f 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aed6:	2001      	movs	r0, #1
 800aed8:	f7ff ffa3 	bl	800ae22 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aedc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aee0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aee2:	2302      	movs	r3, #2
 800aee4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeea:	2300      	movs	r3, #0
 800aeec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800aeee:	230a      	movs	r3, #10
 800aef0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aef2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800aef6:	4619      	mov	r1, r3
 800aef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aefc:	f7f6 fd2c 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800af00:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800af04:	f7ff ffa6 	bl	800ae54 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800af08:	2200      	movs	r2, #0
 800af0a:	2100      	movs	r1, #0
 800af0c:	2014      	movs	r0, #20
 800af0e:	f7f6 fb32 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800af12:	2014      	movs	r0, #20
 800af14:	f7f6 fb49 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800af18:	bf00      	nop
 800af1a:	3770      	adds	r7, #112	; 0x70
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	40006800 	.word	0x40006800

0800af24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7fe fb8f 	bl	800965e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800af5a:	78fa      	ldrb	r2, [r7, #3]
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	00db      	lsls	r3, r3, #3
 800af66:	440b      	add	r3, r1
 800af68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	4619      	mov	r1, r3
 800af72:	f7fe fbc9 	bl	8009708 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800af90:	78fa      	ldrb	r2, [r7, #3]
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	00db      	lsls	r3, r3, #3
 800af9c:	440b      	add	r3, r1
 800af9e:	333c      	adds	r3, #60	; 0x3c
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	78fb      	ldrb	r3, [r7, #3]
 800afa4:	4619      	mov	r1, r3
 800afa6:	f7fe fc62 	bl	800986e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800afaa:	bf00      	nop
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe fd9c 	bl	8009afe <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800afd6:	2301      	movs	r3, #1
 800afd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d001      	beq.n	800afe6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800afe2:	f7f5 fe97 	bl	8000d14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800afec:	7bfa      	ldrb	r2, [r7, #15]
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fe fd40 	bl	8009a76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800affc:	4618      	mov	r0, r3
 800affe:	f7fe fce8 	bl	80099d2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b002:	bf00      	nop
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fd3b 	bl	8009a96 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d005      	beq.n	800b034 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b028:	4b04      	ldr	r3, [pc, #16]	; (800b03c <HAL_PCD_SuspendCallback+0x30>)
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	4a03      	ldr	r2, [pc, #12]	; (800b03c <HAL_PCD_SuspendCallback+0x30>)
 800b02e:	f043 0306 	orr.w	r3, r3, #6
 800b032:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	e000ed00 	.word	0xe000ed00

0800b040 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d007      	beq.n	800b060 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b050:	4b08      	ldr	r3, [pc, #32]	; (800b074 <HAL_PCD_ResumeCallback+0x34>)
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	4a07      	ldr	r2, [pc, #28]	; (800b074 <HAL_PCD_ResumeCallback+0x34>)
 800b056:	f023 0306 	bic.w	r3, r3, #6
 800b05a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b05c:	f000 f9fc 	bl	800b458 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fd31 	bl	8009ace <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	e000ed00 	.word	0xe000ed00

0800b078 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b080:	4a2c      	ldr	r2, [pc, #176]	; (800b134 <USBD_LL_Init+0xbc>)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a2a      	ldr	r2, [pc, #168]	; (800b134 <USBD_LL_Init+0xbc>)
 800b08c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b090:	f7f8 fcaa 	bl	80039e8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800b094:	4b27      	ldr	r3, [pc, #156]	; (800b134 <USBD_LL_Init+0xbc>)
 800b096:	4a28      	ldr	r2, [pc, #160]	; (800b138 <USBD_LL_Init+0xc0>)
 800b098:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b09a:	4b26      	ldr	r3, [pc, #152]	; (800b134 <USBD_LL_Init+0xbc>)
 800b09c:	2208      	movs	r2, #8
 800b09e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b0a0:	4b24      	ldr	r3, [pc, #144]	; (800b134 <USBD_LL_Init+0xbc>)
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b0a6:	4b23      	ldr	r3, [pc, #140]	; (800b134 <USBD_LL_Init+0xbc>)
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b0ac:	4b21      	ldr	r3, [pc, #132]	; (800b134 <USBD_LL_Init+0xbc>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b0b2:	4b20      	ldr	r3, [pc, #128]	; (800b134 <USBD_LL_Init+0xbc>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <USBD_LL_Init+0xbc>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b0be:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <USBD_LL_Init+0xbc>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b0c4:	481b      	ldr	r0, [pc, #108]	; (800b134 <USBD_LL_Init+0xbc>)
 800b0c6:	f7f6 ff2d 	bl	8001f24 <HAL_PCD_Init>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b0d0:	f7f5 fe20 	bl	8000d14 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0da:	2318      	movs	r3, #24
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	f7f8 fbf6 	bl	80038d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0ea:	2358      	movs	r3, #88	; 0x58
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2180      	movs	r1, #128	; 0x80
 800b0f0:	f7f8 fbee 	bl	80038d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0fa:	23c0      	movs	r3, #192	; 0xc0
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	2181      	movs	r1, #129	; 0x81
 800b100:	f7f8 fbe6 	bl	80038d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b10a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b10e:	2200      	movs	r2, #0
 800b110:	2101      	movs	r1, #1
 800b112:	f7f8 fbdd 	bl	80038d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b120:	2200      	movs	r2, #0
 800b122:	2182      	movs	r1, #130	; 0x82
 800b124:	f7f8 fbd4 	bl	80038d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200017d8 	.word	0x200017d8
 800b138:	40006800 	.word	0x40006800

0800b13c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b152:	4618      	mov	r0, r3
 800b154:	f7f6 ffbf 	bl	80020d6 <HAL_PCD_Start>
 800b158:	4603      	mov	r3, r0
 800b15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f980 	bl	800b464 <USBD_Get_USB_Status>
 800b164:	4603      	mov	r3, r0
 800b166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b168:	7bbb      	ldrb	r3, [r7, #14]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	4608      	mov	r0, r1
 800b17c:	4611      	mov	r1, r2
 800b17e:	461a      	mov	r2, r3
 800b180:	4603      	mov	r3, r0
 800b182:	70fb      	strb	r3, [r7, #3]
 800b184:	460b      	mov	r3, r1
 800b186:	70bb      	strb	r3, [r7, #2]
 800b188:	4613      	mov	r3, r2
 800b18a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b19a:	78bb      	ldrb	r3, [r7, #2]
 800b19c:	883a      	ldrh	r2, [r7, #0]
 800b19e:	78f9      	ldrb	r1, [r7, #3]
 800b1a0:	f7f7 f907 	bl	80023b2 <HAL_PCD_EP_Open>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 f95a 	bl	800b464 <USBD_Get_USB_Status>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1d8:	78fa      	ldrb	r2, [r7, #3]
 800b1da:	4611      	mov	r1, r2
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7f7 f945 	bl	800246c <HAL_PCD_EP_Close>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 f93b 	bl	800b464 <USBD_Get_USB_Status>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b216:	78fa      	ldrb	r2, [r7, #3]
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7f7 f9ee 	bl	80025fc <HAL_PCD_EP_SetStall>
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f91c 	bl	800b464 <USBD_Get_USB_Status>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b230:	7bbb      	ldrb	r3, [r7, #14]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	460b      	mov	r3, r1
 800b244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b254:	78fa      	ldrb	r2, [r7, #3]
 800b256:	4611      	mov	r1, r2
 800b258:	4618      	mov	r0, r3
 800b25a:	f7f7 fa21 	bl	80026a0 <HAL_PCD_EP_ClrStall>
 800b25e:	4603      	mov	r3, r0
 800b260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b262:	7bfb      	ldrb	r3, [r7, #15]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 f8fd 	bl	800b464 <USBD_Get_USB_Status>
 800b26a:	4603      	mov	r3, r0
 800b26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b28a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b28c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b290:	2b00      	cmp	r3, #0
 800b292:	da0c      	bge.n	800b2ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b29a:	68f9      	ldr	r1, [r7, #12]
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	00db      	lsls	r3, r3, #3
 800b2a6:	440b      	add	r3, r1
 800b2a8:	3302      	adds	r3, #2
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	e00b      	b.n	800b2c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2ae:	78fb      	ldrb	r3, [r7, #3]
 800b2b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2b4:	68f9      	ldr	r1, [r7, #12]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	00db      	lsls	r3, r3, #3
 800b2be:	440b      	add	r3, r1
 800b2c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b2c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2ec:	78fa      	ldrb	r2, [r7, #3]
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7f7 f839 	bl	8002368 <HAL_PCD_SetAddress>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 f8b1 	bl	800b464 <USBD_Get_USB_Status>
 800b302:	4603      	mov	r3, r0
 800b304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b306:	7bbb      	ldrb	r3, [r7, #14]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	607a      	str	r2, [r7, #4]
 800b31a:	603b      	str	r3, [r7, #0]
 800b31c:	460b      	mov	r3, r1
 800b31e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b32e:	7af9      	ldrb	r1, [r7, #11]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	f7f7 f92b 	bl	800258e <HAL_PCD_EP_Transmit>
 800b338:	4603      	mov	r3, r0
 800b33a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f890 	bl	800b464 <USBD_Get_USB_Status>
 800b344:	4603      	mov	r3, r0
 800b346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b348:	7dbb      	ldrb	r3, [r7, #22]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b086      	sub	sp, #24
 800b356:	af00      	add	r7, sp, #0
 800b358:	60f8      	str	r0, [r7, #12]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
 800b35e:	460b      	mov	r3, r1
 800b360:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b370:	7af9      	ldrb	r1, [r7, #11]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	f7f7 f8c1 	bl	80024fc <HAL_PCD_EP_Receive>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f86f 	bl	800b464 <USBD_Get_USB_Status>
 800b386:	4603      	mov	r3, r0
 800b388:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b38a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3a6:	78fa      	ldrb	r2, [r7, #3]
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f7 f8d7 	bl	800255e <HAL_PCD_EP_GetRxCount>
 800b3b0:	4603      	mov	r3, r0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <HAL_PCDEx_LPM_Callback+0x18>
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d013      	beq.n	800b3fa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b3d2:	e023      	b.n	800b41c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d007      	beq.n	800b3ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b3dc:	f000 f83c 	bl	800b458 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3e0:	4b10      	ldr	r3, [pc, #64]	; (800b424 <HAL_PCDEx_LPM_Callback+0x68>)
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	4a0f      	ldr	r2, [pc, #60]	; (800b424 <HAL_PCDEx_LPM_Callback+0x68>)
 800b3e6:	f023 0306 	bic.w	r3, r3, #6
 800b3ea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fb6b 	bl	8009ace <USBD_LL_Resume>
    break;
 800b3f8:	e010      	b.n	800b41c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe fb48 	bl	8009a96 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b40e:	4b05      	ldr	r3, [pc, #20]	; (800b424 <HAL_PCDEx_LPM_Callback+0x68>)
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	4a04      	ldr	r2, [pc, #16]	; (800b424 <HAL_PCDEx_LPM_Callback+0x68>)
 800b414:	f043 0306 	orr.w	r3, r3, #6
 800b418:	6113      	str	r3, [r2, #16]
    break;
 800b41a:	bf00      	nop
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	e000ed00 	.word	0xe000ed00

0800b428 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b430:	4b03      	ldr	r3, [pc, #12]	; (800b440 <USBD_static_malloc+0x18>)
}
 800b432:	4618      	mov	r0, r3
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	20001acc 	.word	0x20001acc

0800b444 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b45c:	f7f5 fabe 	bl	80009dc <SystemClock_Config>
}
 800b460:	bf00      	nop
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	2b03      	cmp	r3, #3
 800b476:	d817      	bhi.n	800b4a8 <USBD_Get_USB_Status+0x44>
 800b478:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <USBD_Get_USB_Status+0x1c>)
 800b47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47e:	bf00      	nop
 800b480:	0800b491 	.word	0x0800b491
 800b484:	0800b497 	.word	0x0800b497
 800b488:	0800b49d 	.word	0x0800b49d
 800b48c:	0800b4a3 	.word	0x0800b4a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]
    break;
 800b494:	e00b      	b.n	800b4ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b496:	2303      	movs	r3, #3
 800b498:	73fb      	strb	r3, [r7, #15]
    break;
 800b49a:	e008      	b.n	800b4ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b49c:	2301      	movs	r3, #1
 800b49e:	73fb      	strb	r3, [r7, #15]
    break;
 800b4a0:	e005      	b.n	800b4ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4a6:	e002      	b.n	800b4ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ac:	bf00      	nop
  }
  return usb_status;
 800b4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <br_dec32le>:
#include <stdint.h>
#include <string.h>
#include "aes256ctr.h"

static inline uint32_t br_dec32le(const uint8_t *src)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
	return (uint32_t)src[0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
		| ((uint32_t)src[1] << 8)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	021b      	lsls	r3, r3, #8
 800b4d2:	431a      	orrs	r2, r3
		| ((uint32_t)src[2] << 16)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3302      	adds	r3, #2
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	041b      	lsls	r3, r3, #16
 800b4dc:	431a      	orrs	r2, r3
		| ((uint32_t)src[3] << 24);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3303      	adds	r3, #3
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	061b      	lsls	r3, r3, #24
 800b4e6:	4313      	orrs	r3, r2
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <br_range_dec32le>:

static void br_range_dec32le(uint32_t *v, size_t num, const uint8_t *src)
{
 800b4f4:	b590      	push	{r4, r7, lr}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b500:	e00a      	b.n	800b518 <br_range_dec32le+0x24>
		*v ++ = br_dec32le(src);
 800b502:	68fc      	ldr	r4, [r7, #12]
 800b504:	1d23      	adds	r3, r4, #4
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff ffd7 	bl	800b4bc <br_dec32le>
 800b50e:	4603      	mov	r3, r0
 800b510:	6023      	str	r3, [r4, #0]
		src += 4;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3304      	adds	r3, #4
 800b516:	607b      	str	r3, [r7, #4]
	while (num-- > 0) {
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	1e5a      	subs	r2, r3, #1
 800b51c:	60ba      	str	r2, [r7, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1ef      	bne.n	800b502 <br_range_dec32le+0xe>
	}
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd90      	pop	{r4, r7, pc}

0800b52c <br_swap32>:

static inline uint32_t br_swap32(uint32_t x)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
		| ((x >> 8) & (uint32_t)0x00FF00FF);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	0a1b      	lsrs	r3, r3, #8
 800b540:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b544:	4313      	orrs	r3, r2
 800b546:	607b      	str	r3, [r7, #4]
	return (x << 16) | (x >> 16);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	ea4f 4333 	mov.w	r3, r3, ror #16
}
 800b54e:	4618      	mov	r0, r3
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <br_enc32le>:

static inline void br_enc32le(uint8_t *dst, uint32_t x)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	6039      	str	r1, [r7, #0]
	dst[0] = (uint8_t)x;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	b2da      	uxtb	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	701a      	strb	r2, [r3, #0]
	dst[1] = (uint8_t)(x >> 8);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	0a1a      	lsrs	r2, r3, #8
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3301      	adds	r3, #1
 800b574:	b2d2      	uxtb	r2, r2
 800b576:	701a      	strb	r2, [r3, #0]
	dst[2] = (uint8_t)(x >> 16);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	0c1a      	lsrs	r2, r3, #16
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3302      	adds	r3, #2
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	701a      	strb	r2, [r3, #0]
	dst[3] = (uint8_t)(x >> 24);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	0e1a      	lsrs	r2, r3, #24
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3303      	adds	r3, #3
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <br_range_enc32le>:

static void br_range_enc32le(uint8_t *dst, const uint32_t *v, size_t num)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b5a8:	e00a      	b.n	800b5c0 <br_range_enc32le+0x24>
		br_enc32le(dst, *v ++);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	1d1a      	adds	r2, r3, #4
 800b5ae:	60ba      	str	r2, [r7, #8]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f7ff ffd0 	bl	800b55a <br_enc32le>
		dst += 4;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3304      	adds	r3, #4
 800b5be:	60fb      	str	r3, [r7, #12]
	while (num-- > 0) {
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	1e5a      	subs	r2, r3, #1
 800b5c4:	607a      	str	r2, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1ef      	bne.n	800b5aa <br_range_enc32le+0xe>
	}
}
 800b5ca:	bf00      	nop
 800b5cc:	bf00      	nop
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <br_aes_ct64_bitslice_Sbox>:

static void br_aes_ct64_bitslice_Sbox(uint64_t *q)
{
 800b5d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b5d8:	f2ad 7d84 	subw	sp, sp, #1924	; 0x784
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b5e2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b5e6:	6018      	str	r0, [r3, #0]
	uint64_t t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	uint64_t t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	uint64_t t60, t61, t62, t63, t64, t65, t66, t67;
	uint64_t s0, s1, s2, s3, s4, s5, s6, s7;

	x0 = q[7];
 800b5e8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b5ec:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b5f6:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 800b5fa:	e9c1 2300 	strd	r2, r3, [r1]
	x1 = q[6];
 800b5fe:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b602:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b60c:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 800b610:	e9c1 2300 	strd	r2, r3, [r1]
	x2 = q[5];
 800b614:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b618:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800b622:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800b626:	e9c1 2300 	strd	r2, r3, [r1]
	x3 = q[4];
 800b62a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b62e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b638:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800b63c:	e9c1 2300 	strd	r2, r3, [r1]
	x4 = q[3];
 800b640:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b644:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b64e:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800b652:	e9c1 2300 	strd	r2, r3, [r1]
	x5 = q[2];
 800b656:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b65a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b664:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800b668:	e9c1 2300 	strd	r2, r3, [r1]
	x6 = q[1];
 800b66c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b670:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b67a:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800b67e:	e9c1 2300 	strd	r2, r3, [r1]
	x7 = q[0];
 800b682:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b686:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800b694:	e9c1 2300 	strd	r2, r3, [r1]

	/*
	 * Top linear transformation.
	 */
	y14 = x3 ^ x5;
 800b698:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b69c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6a0:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	ea80 0402 	eor.w	r4, r0, r2
 800b6ac:	ea81 0503 	eor.w	r5, r1, r3
 800b6b0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b6b4:	e9c3 4500 	strd	r4, r5, [r3]
	y13 = x0 ^ x6;
 800b6b8:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b6bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6c0:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	ea80 0802 	eor.w	r8, r0, r2
 800b6cc:	ea81 0903 	eor.w	r9, r1, r3
 800b6d0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b6d4:	e9c3 8900 	strd	r8, r9, [r3]
	y9 = x0 ^ x3;
 800b6d8:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b6dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6e0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	ea80 0a02 	eor.w	sl, r0, r2
 800b6ec:	ea81 0b03 	eor.w	fp, r1, r3
 800b6f0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800b6f4:	e9c3 ab00 	strd	sl, fp, [r3]
	y8 = x0 ^ x5;
 800b6f8:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b6fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b700:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	ea80 0402 	eor.w	r4, r0, r2
 800b70c:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 800b710:	404b      	eors	r3, r1
 800b712:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800b716:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 800b71a:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800b71e:	e9c2 3400 	strd	r3, r4, [r2]
	t0 = x1 ^ x2;
 800b722:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800b726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b72a:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	ea80 0402 	eor.w	r4, r0, r2
 800b736:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800b73a:	404b      	eors	r3, r1
 800b73c:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800b740:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 800b744:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800b748:	e9c2 3400 	strd	r3, r4, [r2]
	y1 = t0 ^ x7;
 800b74c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b750:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b754:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	ea80 0402 	eor.w	r4, r0, r2
 800b760:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 800b764:	404b      	eors	r3, r1
 800b766:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800b76a:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 800b76e:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 800b772:	e9c2 3400 	strd	r3, r4, [r2]
	y4 = y1 ^ x3;
 800b776:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b77a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b77e:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	ea80 0402 	eor.w	r4, r0, r2
 800b78a:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800b78e:	404b      	eors	r3, r1
 800b790:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b794:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 800b798:	f507 62e1 	add.w	r2, r7, #1800	; 0x708
 800b79c:	e9c2 3400 	strd	r3, r4, [r2]
	y12 = y13 ^ y14;
 800b7a0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b7a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7a8:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	ea80 0402 	eor.w	r4, r0, r2
 800b7b4:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 800b7b8:	404b      	eors	r3, r1
 800b7ba:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800b7be:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 800b7c2:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 800b7c6:	e9c2 3400 	strd	r3, r4, [r2]
	y2 = y1 ^ x0;
 800b7ca:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b7ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7d2:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	ea80 0402 	eor.w	r4, r0, r2
 800b7de:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800b7e2:	404b      	eors	r3, r1
 800b7e4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b7e8:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800b7ec:	f507 62df 	add.w	r2, r7, #1784	; 0x6f8
 800b7f0:	e9c2 3400 	strd	r3, r4, [r2]
	y5 = y1 ^ x6;
 800b7f4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b7f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7fc:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	ea80 0402 	eor.w	r4, r0, r2
 800b808:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800b80c:	404b      	eors	r3, r1
 800b80e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800b812:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800b816:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800b81a:	e9c2 3400 	strd	r3, r4, [r2]
	y3 = y5 ^ y8;
 800b81e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b822:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b826:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	ea80 0402 	eor.w	r4, r0, r2
 800b832:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 800b836:	404b      	eors	r3, r1
 800b838:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800b83c:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 800b840:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800b844:	e9c2 3400 	strd	r3, r4, [r2]
	t1 = x4 ^ y12;
 800b848:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800b84c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b850:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	ea80 0402 	eor.w	r4, r0, r2
 800b85c:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800b860:	404b      	eors	r3, r1
 800b862:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b866:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 800b86a:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 800b86e:	e9c2 3400 	strd	r3, r4, [r2]
	y15 = t1 ^ x5;
 800b872:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b87a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	ea80 0402 	eor.w	r4, r0, r2
 800b886:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 800b88a:	404b      	eors	r3, r1
 800b88c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800b890:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800b894:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800b898:	e9c2 3400 	strd	r3, r4, [r2]
	y20 = t1 ^ x1;
 800b89c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b8a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8a4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	ea80 0402 	eor.w	r4, r0, r2
 800b8b0:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 800b8b4:	404b      	eors	r3, r1
 800b8b6:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800b8ba:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800b8be:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 800b8c2:	e9c2 3400 	strd	r3, r4, [r2]
	y6 = y15 ^ x7;
 800b8c6:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b8ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8ce:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	ea80 0402 	eor.w	r4, r0, r2
 800b8da:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 800b8de:	404b      	eors	r3, r1
 800b8e0:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800b8e4:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 800b8e8:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 800b8ec:	e9c2 3400 	strd	r3, r4, [r2]
	y10 = y15 ^ t0;
 800b8f0:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b8f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8f8:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	ea80 0402 	eor.w	r4, r0, r2
 800b904:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 800b908:	404b      	eors	r3, r1
 800b90a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800b90e:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800b912:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800b916:	e9c2 3400 	strd	r3, r4, [r2]
	y11 = y20 ^ y9;
 800b91a:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b91e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b922:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92a:	ea80 0402 	eor.w	r4, r0, r2
 800b92e:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 800b932:	404b      	eors	r3, r1
 800b934:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800b938:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800b93c:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800b940:	e9c2 3400 	strd	r3, r4, [r2]
	y7 = x7 ^ y11;
 800b944:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b948:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b94c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	ea80 0402 	eor.w	r4, r0, r2
 800b958:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 800b95c:	404b      	eors	r3, r1
 800b95e:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800b962:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 800b966:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 800b96a:	e9c2 3400 	strd	r3, r4, [r2]
	y17 = y10 ^ y11;
 800b96e:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800b972:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b976:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	ea80 0402 	eor.w	r4, r0, r2
 800b982:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 800b986:	404b      	eors	r3, r1
 800b988:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800b98c:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800b990:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
 800b994:	e9c2 3400 	strd	r3, r4, [r2]
	y19 = y10 ^ y8;
 800b998:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800b99c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9a0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800b9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a8:	ea80 0402 	eor.w	r4, r0, r2
 800b9ac:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 800b9b0:	404b      	eors	r3, r1
 800b9b2:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800b9b6:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800b9ba:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800b9be:	e9c2 3400 	strd	r3, r4, [r2]
	y16 = t0 ^ y11;
 800b9c2:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b9c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9ca:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	ea80 0402 	eor.w	r4, r0, r2
 800b9d6:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 800b9da:	404b      	eors	r3, r1
 800b9dc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800b9e0:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 800b9e4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800b9e8:	e9c2 3400 	strd	r3, r4, [r2]
	y21 = y13 ^ y16;
 800b9ec:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b9f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9f4:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	ea80 0402 	eor.w	r4, r0, r2
 800ba00:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 800ba04:	404b      	eors	r3, r1
 800ba06:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800ba0a:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 800ba0e:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 800ba12:	e9c2 3400 	strd	r3, r4, [r2]
	y18 = x0 ^ y16;
 800ba16:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800ba1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba1e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	ea80 0402 	eor.w	r4, r0, r2
 800ba2a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 800ba2e:	404b      	eors	r3, r1
 800ba30:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800ba34:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 800ba38:	f507 62d1 	add.w	r2, r7, #1672	; 0x688
 800ba3c:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Non-linear section.
	 */
	t2 = y12 & y15;
 800ba40:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800ba44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba48:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	ea00 0402 	and.w	r4, r0, r2
 800ba54:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 800ba58:	400b      	ands	r3, r1
 800ba5a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800ba5e:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 800ba62:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 800ba66:	e9c2 3400 	strd	r3, r4, [r2]
	t3 = y3 & y6;
 800ba6a:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800ba6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba72:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	ea00 0402 	and.w	r4, r0, r2
 800ba7e:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 800ba82:	400b      	ands	r3, r1
 800ba84:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800ba88:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800ba8c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 800ba90:	e9c2 3400 	strd	r3, r4, [r2]
	t4 = t3 ^ t2;
 800ba94:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800ba98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba9c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	ea80 0402 	eor.w	r4, r0, r2
 800baa8:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 800baac:	404b      	eors	r3, r1
 800baae:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800bab2:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800bab6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800baba:	e9c2 3400 	strd	r3, r4, [r2]
	t5 = y4 & x7;
 800babe:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800bac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bac6:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	ea00 0402 	and.w	r4, r0, r2
 800bad2:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 800bad6:	400b      	ands	r3, r1
 800bad8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800badc:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 800bae0:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 800bae4:	e9c2 3400 	strd	r3, r4, [r2]
	t6 = t5 ^ t2;
 800bae8:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800baec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baf0:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	ea80 0402 	eor.w	r4, r0, r2
 800bafc:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 800bb00:	404b      	eors	r3, r1
 800bb02:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800bb06:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800bb0a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800bb0e:	e9c2 3400 	strd	r3, r4, [r2]
	t7 = y13 & y16;
 800bb12:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800bb16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb1a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	ea00 0402 	and.w	r4, r0, r2
 800bb26:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 800bb2a:	400b      	ands	r3, r1
 800bb2c:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800bb30:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800bb34:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800bb38:	e9c2 3400 	strd	r3, r4, [r2]
	t8 = y5 & y1;
 800bb3c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800bb40:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb44:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	ea00 0402 	and.w	r4, r0, r2
 800bb50:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 800bb54:	400b      	ands	r3, r1
 800bb56:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800bb5a:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 800bb5e:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800bb62:	e9c2 3400 	strd	r3, r4, [r2]
	t9 = t8 ^ t7;
 800bb66:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800bb6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb6e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	ea80 0402 	eor.w	r4, r0, r2
 800bb7a:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 800bb7e:	404b      	eors	r3, r1
 800bb80:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800bb84:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800bb88:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
 800bb8c:	e9c2 3400 	strd	r3, r4, [r2]
	t10 = y2 & y7;
 800bb90:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800bb94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb98:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	ea00 0402 	and.w	r4, r0, r2
 800bba4:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 800bba8:	400b      	ands	r3, r1
 800bbaa:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800bbae:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800bbb2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800bbb6:	e9c2 3400 	strd	r3, r4, [r2]
	t11 = t10 ^ t7;
 800bbba:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800bbbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbc2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	ea80 0402 	eor.w	r4, r0, r2
 800bbce:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 800bbd2:	404b      	eors	r3, r1
 800bbd4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800bbd8:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 800bbdc:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 800bbe0:	e9c2 3400 	strd	r3, r4, [r2]
	t12 = y9 & y11;
 800bbe4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800bbe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbec:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	ea00 0402 	and.w	r4, r0, r2
 800bbf8:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 800bbfc:	400b      	ands	r3, r1
 800bbfe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800bc02:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800bc06:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bc0a:	e9c2 3400 	strd	r3, r4, [r2]
	t13 = y14 & y17;
 800bc0e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800bc12:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc16:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	ea00 0402 	and.w	r4, r0, r2
 800bc22:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 800bc26:	400b      	ands	r3, r1
 800bc28:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800bc2c:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800bc30:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 800bc34:	e9c2 3400 	strd	r3, r4, [r2]
	t14 = t13 ^ t12;
 800bc38:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800bc3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	ea80 0402 	eor.w	r4, r0, r2
 800bc4c:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 800bc50:	404b      	eors	r3, r1
 800bc52:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800bc56:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 800bc5a:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 800bc5e:	e9c2 3400 	strd	r3, r4, [r2]
	t15 = y8 & y10;
 800bc62:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800bc66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc6a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	ea00 0402 	and.w	r4, r0, r2
 800bc76:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 800bc7a:	400b      	ands	r3, r1
 800bc7c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800bc80:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800bc84:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800bc88:	e9c2 3400 	strd	r3, r4, [r2]
	t16 = t15 ^ t12;
 800bc8c:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800bc90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	ea80 0402 	eor.w	r4, r0, r2
 800bca0:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 800bca4:	404b      	eors	r3, r1
 800bca6:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800bcaa:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800bcae:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 800bcb2:	e9c2 3400 	strd	r3, r4, [r2]
	t17 = t4 ^ t14;
 800bcb6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800bcba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcbe:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	ea80 0402 	eor.w	r4, r0, r2
 800bcca:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 800bcce:	404b      	eors	r3, r1
 800bcd0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800bcd4:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 800bcd8:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 800bcdc:	e9c2 3400 	strd	r3, r4, [r2]
	t18 = t6 ^ t16;
 800bce0:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bce8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	ea80 0402 	eor.w	r4, r0, r2
 800bcf4:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 800bcf8:	404b      	eors	r3, r1
 800bcfa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800bcfe:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800bd02:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800bd06:	e9c2 3400 	strd	r3, r4, [r2]
	t19 = t9 ^ t14;
 800bd0a:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800bd0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd12:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	ea80 0402 	eor.w	r4, r0, r2
 800bd1e:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 800bd22:	404b      	eors	r3, r1
 800bd24:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800bd28:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800bd2c:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800bd30:	e9c2 3400 	strd	r3, r4, [r2]
	t20 = t11 ^ t16;
 800bd34:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800bd38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd3c:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	ea80 0402 	eor.w	r4, r0, r2
 800bd48:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 800bd4c:	404b      	eors	r3, r1
 800bd4e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800bd52:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800bd56:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 800bd5a:	e9c2 3400 	strd	r3, r4, [r2]
	t21 = t17 ^ y20;
 800bd5e:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800bd62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd66:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	ea80 0402 	eor.w	r4, r0, r2
 800bd72:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 800bd76:	404b      	eors	r3, r1
 800bd78:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800bd7c:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800bd80:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800bd84:	e9c2 3400 	strd	r3, r4, [r2]
	t22 = t18 ^ y19;
 800bd88:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800bd8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd90:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	ea80 0402 	eor.w	r4, r0, r2
 800bd9c:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 800bda0:	404b      	eors	r3, r1
 800bda2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800bda6:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800bdaa:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800bdae:	e9c2 3400 	strd	r3, r4, [r2]
	t23 = t19 ^ y21;
 800bdb2:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800bdb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdba:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800bdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc2:	ea80 0402 	eor.w	r4, r0, r2
 800bdc6:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 800bdca:	404b      	eors	r3, r1
 800bdcc:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800bdd0:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800bdd4:	f507 62bb 	add.w	r2, r7, #1496	; 0x5d8
 800bdd8:	e9c2 3400 	strd	r3, r4, [r2]
	t24 = t20 ^ y18;
 800bddc:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800bde0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bde4:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	ea80 0402 	eor.w	r4, r0, r2
 800bdf0:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 800bdf4:	404b      	eors	r3, r1
 800bdf6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bdfa:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800bdfe:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 800be02:	e9c2 3400 	strd	r3, r4, [r2]

	t25 = t21 ^ t22;
 800be06:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800be0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be0e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	ea80 0402 	eor.w	r4, r0, r2
 800be1a:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 800be1e:	404b      	eors	r3, r1
 800be20:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800be24:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800be28:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800be2c:	e9c2 3400 	strd	r3, r4, [r2]
	t26 = t21 & t23;
 800be30:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800be34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be38:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	ea00 0402 	and.w	r4, r0, r2
 800be44:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 800be48:	400b      	ands	r3, r1
 800be4a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800be4e:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 800be52:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800be56:	e9c2 3400 	strd	r3, r4, [r2]
	t27 = t24 ^ t26;
 800be5a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800be5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be62:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	ea80 0402 	eor.w	r4, r0, r2
 800be6e:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800be72:	404b      	eors	r3, r1
 800be74:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800be78:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800be7c:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 800be80:	e9c2 3400 	strd	r3, r4, [r2]
	t28 = t25 & t27;
 800be84:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800be88:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be8c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	ea00 0402 	and.w	r4, r0, r2
 800be98:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 800be9c:	400b      	ands	r3, r1
 800be9e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800bea2:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800bea6:	f507 62b6 	add.w	r2, r7, #1456	; 0x5b0
 800beaa:	e9c2 3400 	strd	r3, r4, [r2]
	t29 = t28 ^ t22;
 800beae:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800beb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800beb6:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	ea80 0402 	eor.w	r4, r0, r2
 800bec2:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800bec6:	404b      	eors	r3, r1
 800bec8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800becc:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800bed0:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800bed4:	e9c2 3400 	strd	r3, r4, [r2]
	t30 = t23 ^ t24;
 800bed8:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800bedc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bee0:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	ea80 0402 	eor.w	r4, r0, r2
 800beec:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 800bef0:	404b      	eors	r3, r1
 800bef2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800bef6:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800befa:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 800befe:	e9c2 3400 	strd	r3, r4, [r2]
	t31 = t22 ^ t26;
 800bf02:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800bf06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf0a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	ea80 0402 	eor.w	r4, r0, r2
 800bf16:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800bf1a:	404b      	eors	r3, r1
 800bf1c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800bf20:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800bf24:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800bf28:	e9c2 3400 	strd	r3, r4, [r2]
	t32 = t31 & t30;
 800bf2c:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800bf30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf34:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	ea00 0402 	and.w	r4, r0, r2
 800bf40:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800bf44:	400b      	ands	r3, r1
 800bf46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800bf4a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800bf4e:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800bf52:	e9c2 3400 	strd	r3, r4, [r2]
	t33 = t32 ^ t24;
 800bf56:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800bf5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf5e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	ea80 0402 	eor.w	r4, r0, r2
 800bf6a:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800bf6e:	404b      	eors	r3, r1
 800bf70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bf74:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800bf78:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 800bf7c:	e9c2 3400 	strd	r3, r4, [r2]
	t34 = t23 ^ t33;
 800bf80:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800bf84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf88:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	ea80 0402 	eor.w	r4, r0, r2
 800bf94:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800bf98:	404b      	eors	r3, r1
 800bf9a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800bf9e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800bfa2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800bfa6:	e9c2 3400 	strd	r3, r4, [r2]
	t35 = t27 ^ t33;
 800bfaa:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800bfae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfb2:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	ea80 0402 	eor.w	r4, r0, r2
 800bfbe:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800bfc2:	404b      	eors	r3, r1
 800bfc4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800bfc8:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800bfcc:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 800bfd0:	e9c2 3400 	strd	r3, r4, [r2]
	t36 = t24 & t35;
 800bfd4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bfd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfdc:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	ea00 0402 	and.w	r4, r0, r2
 800bfe8:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800bfec:	400b      	ands	r3, r1
 800bfee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800bff2:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800bff6:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 800bffa:	e9c2 3400 	strd	r3, r4, [r2]
	t37 = t36 ^ t34;
 800bffe:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800c002:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c006:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	ea80 0402 	eor.w	r4, r0, r2
 800c012:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 800c016:	404b      	eors	r3, r1
 800c018:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800c01c:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800c020:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800c024:	e9c2 3400 	strd	r3, r4, [r2]
	t38 = t27 ^ t36;
 800c028:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800c02c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c030:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	ea80 0402 	eor.w	r4, r0, r2
 800c03c:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800c040:	404b      	eors	r3, r1
 800c042:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800c046:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800c04a:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800c04e:	e9c2 3400 	strd	r3, r4, [r2]
	t39 = t29 & t38;
 800c052:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c05a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	ea00 0402 	and.w	r4, r0, r2
 800c066:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800c06a:	400b      	ands	r3, r1
 800c06c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800c070:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 800c074:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800c078:	e9c2 3400 	strd	r3, r4, [r2]
	t40 = t25 ^ t39;
 800c07c:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800c080:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c084:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	ea80 0402 	eor.w	r4, r0, r2
 800c090:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800c094:	404b      	eors	r3, r1
 800c096:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800c09a:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800c09e:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800c0a2:	e9c2 3400 	strd	r3, r4, [r2]

	t41 = t40 ^ t37;
 800c0a6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c0aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0ae:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	ea80 0402 	eor.w	r4, r0, r2
 800c0ba:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800c0be:	404b      	eors	r3, r1
 800c0c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800c0c4:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800c0c8:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800c0cc:	e9c2 3400 	strd	r3, r4, [r2]
	t42 = t29 ^ t33;
 800c0d0:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c0d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0d8:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	ea80 0402 	eor.w	r4, r0, r2
 800c0e4:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800c0e8:	404b      	eors	r3, r1
 800c0ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800c0ee:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800c0f2:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800c0f6:	e9c2 3400 	strd	r3, r4, [r2]
	t43 = t29 ^ t40;
 800c0fa:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c0fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c102:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	ea80 0402 	eor.w	r4, r0, r2
 800c10e:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 800c112:	404b      	eors	r3, r1
 800c114:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800c118:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800c11c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800c120:	e9c2 3400 	strd	r3, r4, [r2]
	t44 = t33 ^ t37;
 800c124:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c12c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	ea80 0402 	eor.w	r4, r0, r2
 800c138:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800c13c:	404b      	eors	r3, r1
 800c13e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800c142:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800c146:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 800c14a:	e9c2 3400 	strd	r3, r4, [r2]
	t45 = t42 ^ t41;
 800c14e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c152:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c156:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	ea80 0402 	eor.w	r4, r0, r2
 800c162:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800c166:	404b      	eors	r3, r1
 800c168:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800c16c:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800c170:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 800c174:	e9c2 3400 	strd	r3, r4, [r2]
	z0 = t44 & y15;
 800c178:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c17c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c180:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	ea00 0402 	and.w	r4, r0, r2
 800c18c:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800c190:	400b      	ands	r3, r1
 800c192:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c196:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800c19a:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800c19e:	e9c2 3400 	strd	r3, r4, [r2]
	z1 = t37 & y6;
 800c1a2:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c1a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1aa:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	ea00 0402 	and.w	r4, r0, r2
 800c1b6:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 800c1ba:	400b      	ands	r3, r1
 800c1bc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800c1c0:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800c1c4:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800c1c8:	e9c2 3400 	strd	r3, r4, [r2]
	z2 = t33 & x7;
 800c1cc:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c1d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1d4:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800c1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1dc:	ea00 0402 	and.w	r4, r0, r2
 800c1e0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800c1e4:	400b      	ands	r3, r1
 800c1e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800c1ea:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800c1ee:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 800c1f2:	e9c2 3400 	strd	r3, r4, [r2]
	z3 = t43 & y16;
 800c1f6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c1fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1fe:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	ea00 0402 	and.w	r4, r0, r2
 800c20a:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800c20e:	400b      	ands	r3, r1
 800c210:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800c214:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800c218:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800c21c:	e9c2 3400 	strd	r3, r4, [r2]
	z4 = t40 & y1;
 800c220:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c224:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c228:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	ea00 0402 	and.w	r4, r0, r2
 800c234:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 800c238:	400b      	ands	r3, r1
 800c23a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800c23e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800c242:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800c246:	e9c2 3400 	strd	r3, r4, [r2]
	z5 = t29 & y7;
 800c24a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c24e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c252:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	ea00 0402 	and.w	r4, r0, r2
 800c25e:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800c262:	400b      	ands	r3, r1
 800c264:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c268:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800c26c:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800c270:	e9c2 3400 	strd	r3, r4, [r2]
	z6 = t42 & y11;
 800c274:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c27c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	ea00 0402 	and.w	r4, r0, r2
 800c288:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800c28c:	400b      	ands	r3, r1
 800c28e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c292:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800c296:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800c29a:	e9c2 3400 	strd	r3, r4, [r2]
	z7 = t45 & y17;
 800c29e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c2a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2a6:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ae:	ea00 0402 	and.w	r4, r0, r2
 800c2b2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800c2b6:	400b      	ands	r3, r1
 800c2b8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800c2bc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800c2c0:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800c2c4:	e9c2 3400 	strd	r3, r4, [r2]
	z8 = t41 & y10;
 800c2c8:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c2cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2d0:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	ea00 0402 	and.w	r4, r0, r2
 800c2dc:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800c2e0:	400b      	ands	r3, r1
 800c2e2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800c2e6:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800c2ea:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800c2ee:	e9c2 3400 	strd	r3, r4, [r2]
	z9 = t44 & y12;
 800c2f2:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c2f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2fa:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	ea00 0402 	and.w	r4, r0, r2
 800c306:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800c30a:	400b      	ands	r3, r1
 800c30c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800c310:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800c314:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800c318:	e9c2 3400 	strd	r3, r4, [r2]
	z10 = t37 & y3;
 800c31c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c320:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c324:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	ea00 0402 	and.w	r4, r0, r2
 800c330:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800c334:	400b      	ands	r3, r1
 800c336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c33a:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800c33e:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800c342:	e9c2 3400 	strd	r3, r4, [r2]
	z11 = t33 & y4;
 800c346:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c34a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c34e:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	ea00 0402 	and.w	r4, r0, r2
 800c35a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800c35e:	400b      	ands	r3, r1
 800c360:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c364:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800c368:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800c36c:	e9c2 3400 	strd	r3, r4, [r2]
	z12 = t43 & y13;
 800c370:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c374:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c378:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	ea00 0402 	and.w	r4, r0, r2
 800c384:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800c388:	400b      	ands	r3, r1
 800c38a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c38e:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800c392:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800c396:	e9c2 3400 	strd	r3, r4, [r2]
	z13 = t40 & y5;
 800c39a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c39e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3a2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	ea00 0402 	and.w	r4, r0, r2
 800c3ae:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800c3b2:	400b      	ands	r3, r1
 800c3b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c3b8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800c3bc:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800c3c0:	e9c2 3400 	strd	r3, r4, [r2]
	z14 = t29 & y2;
 800c3c4:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c3c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3cc:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	ea00 0402 	and.w	r4, r0, r2
 800c3d8:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800c3dc:	400b      	ands	r3, r1
 800c3de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c3e2:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800c3e6:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800c3ea:	e9c2 3400 	strd	r3, r4, [r2]
	z15 = t42 & y9;
 800c3ee:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c3f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3f6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	ea00 0402 	and.w	r4, r0, r2
 800c402:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 800c406:	400b      	ands	r3, r1
 800c408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c40c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800c410:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800c414:	e9c2 3400 	strd	r3, r4, [r2]
	z16 = t45 & y14;
 800c418:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c41c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c420:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	ea00 0402 	and.w	r4, r0, r2
 800c42c:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800c430:	400b      	ands	r3, r1
 800c432:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c436:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800c43a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800c43e:	e9c2 3400 	strd	r3, r4, [r2]
	z17 = t41 & y8;
 800c442:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c44a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	ea00 0402 	and.w	r4, r0, r2
 800c456:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800c45a:	400b      	ands	r3, r1
 800c45c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c460:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800c464:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800c468:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Bottom linear transformation.
	 */
	t46 = z15 ^ z16;
 800c46c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800c470:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c474:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	ea80 0402 	eor.w	r4, r0, r2
 800c480:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800c484:	404b      	eors	r3, r1
 800c486:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c48a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c48e:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800c492:	e9c2 3400 	strd	r3, r4, [r2]
	t47 = z10 ^ z11;
 800c496:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c49a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c49e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	ea80 0402 	eor.w	r4, r0, r2
 800c4aa:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800c4ae:	404b      	eors	r3, r1
 800c4b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4b4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c4b8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800c4bc:	e9c2 3400 	strd	r3, r4, [r2]
	t48 = z5 ^ z13;
 800c4c0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c4c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4c8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	ea80 0402 	eor.w	r4, r0, r2
 800c4d4:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800c4d8:	404b      	eors	r3, r1
 800c4da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4de:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c4e2:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800c4e6:	e9c2 3400 	strd	r3, r4, [r2]
	t49 = z9 ^ z10;
 800c4ea:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800c4ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4f2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fa:	ea80 0402 	eor.w	r4, r0, r2
 800c4fe:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800c502:	404b      	eors	r3, r1
 800c504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c508:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c50c:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800c510:	e9c2 3400 	strd	r3, r4, [r2]
	t50 = z2 ^ z12;
 800c514:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c51c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	ea80 0402 	eor.w	r4, r0, r2
 800c528:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c52c:	404b      	eors	r3, r1
 800c52e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c532:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800c536:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800c53a:	e9c2 3400 	strd	r3, r4, [r2]
	t51 = z2 ^ z5;
 800c53e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c542:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c546:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	ea80 0402 	eor.w	r4, r0, r2
 800c552:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800c556:	404b      	eors	r3, r1
 800c558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c55c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800c560:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800c564:	e9c2 3400 	strd	r3, r4, [r2]
	t52 = z7 ^ z8;
 800c568:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c56c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c570:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	ea80 0402 	eor.w	r4, r0, r2
 800c57c:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800c580:	404b      	eors	r3, r1
 800c582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c586:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800c58a:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800c58e:	e9c2 3400 	strd	r3, r4, [r2]
	t53 = z0 ^ z3;
 800c592:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800c596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c59a:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	ea80 0402 	eor.w	r4, r0, r2
 800c5a6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800c5aa:	404b      	eors	r3, r1
 800c5ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5b0:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800c5b4:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800c5b8:	e9c2 3400 	strd	r3, r4, [r2]
	t54 = z6 ^ z7;
 800c5bc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800c5c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5c4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	ea80 0402 	eor.w	r4, r0, r2
 800c5d0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c5d4:	404b      	eors	r3, r1
 800c5d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5da:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800c5de:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800c5e2:	e9c2 3400 	strd	r3, r4, [r2]
	t55 = z16 ^ z17;
 800c5e6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c5ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5ee:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	ea80 0402 	eor.w	r4, r0, r2
 800c5fa:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c5fe:	404b      	eors	r3, r1
 800c600:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c604:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800c608:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800c60c:	e9c2 3400 	strd	r3, r4, [r2]
	t56 = z12 ^ t48;
 800c610:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c614:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c618:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	ea80 0402 	eor.w	r4, r0, r2
 800c624:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800c628:	404b      	eors	r3, r1
 800c62a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c62e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800c632:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800c636:	e9c2 3400 	strd	r3, r4, [r2]
	t57 = t50 ^ t53;
 800c63a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800c63e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c642:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	ea80 0402 	eor.w	r4, r0, r2
 800c64e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c652:	404b      	eors	r3, r1
 800c654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c658:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c65c:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800c660:	e9c2 3400 	strd	r3, r4, [r2]
	t58 = z4 ^ t46;
 800c664:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c66c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	ea80 0402 	eor.w	r4, r0, r2
 800c678:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800c67c:	404b      	eors	r3, r1
 800c67e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c682:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800c686:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800c68a:	e9c2 3400 	strd	r3, r4, [r2]
	t59 = z3 ^ t54;
 800c68e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c692:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c696:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	ea80 0402 	eor.w	r4, r0, r2
 800c6a2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800c6a6:	404b      	eors	r3, r1
 800c6a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c6ac:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c6b0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800c6b4:	e9c2 3400 	strd	r3, r4, [r2]
	t60 = t46 ^ t57;
 800c6b8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c6bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6c0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c8:	ea80 0402 	eor.w	r4, r0, r2
 800c6cc:	67bc      	str	r4, [r7, #120]	; 0x78
 800c6ce:	404b      	eors	r3, r1
 800c6d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c6d2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c6d6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800c6da:	e9c2 3400 	strd	r3, r4, [r2]
	t61 = z14 ^ t57;
 800c6de:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800c6e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6e6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	ea80 0402 	eor.w	r4, r0, r2
 800c6f2:	673c      	str	r4, [r7, #112]	; 0x70
 800c6f4:	404b      	eors	r3, r1
 800c6f6:	677b      	str	r3, [r7, #116]	; 0x74
 800c6f8:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c6fc:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800c700:	e9c2 3400 	strd	r3, r4, [r2]
	t62 = t52 ^ t58;
 800c704:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800c708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c70c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	ea80 0402 	eor.w	r4, r0, r2
 800c718:	66bc      	str	r4, [r7, #104]	; 0x68
 800c71a:	404b      	eors	r3, r1
 800c71c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c71e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800c722:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800c726:	e9c2 3400 	strd	r3, r4, [r2]
	t63 = t49 ^ t58;
 800c72a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800c72e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c732:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	ea80 0402 	eor.w	r4, r0, r2
 800c73e:	663c      	str	r4, [r7, #96]	; 0x60
 800c740:	404b      	eors	r3, r1
 800c742:	667b      	str	r3, [r7, #100]	; 0x64
 800c744:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c748:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800c74c:	e9c2 3400 	strd	r3, r4, [r2]
	t64 = z4 ^ t59;
 800c750:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c754:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c758:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	ea80 0402 	eor.w	r4, r0, r2
 800c764:	65bc      	str	r4, [r7, #88]	; 0x58
 800c766:	404b      	eors	r3, r1
 800c768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c76a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c76e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800c772:	e9c2 3400 	strd	r3, r4, [r2]
	t65 = t61 ^ t62;
 800c776:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800c77a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c77e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c786:	ea80 0402 	eor.w	r4, r0, r2
 800c78a:	653c      	str	r4, [r7, #80]	; 0x50
 800c78c:	404b      	eors	r3, r1
 800c78e:	657b      	str	r3, [r7, #84]	; 0x54
 800c790:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c794:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	; 0x3f8
	t66 = z1 ^ t63;
 800c798:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800c79c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7a0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	ea80 0402 	eor.w	r4, r0, r2
 800c7ac:	64bc      	str	r4, [r7, #72]	; 0x48
 800c7ae:	404b      	eors	r3, r1
 800c7b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7b2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c7b6:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
	s0 = t59 ^ t63;
 800c7ba:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c7be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7c2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	ea80 0402 	eor.w	r4, r0, r2
 800c7ce:	643c      	str	r4, [r7, #64]	; 0x40
 800c7d0:	404b      	eors	r3, r1
 800c7d2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7d4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c7d8:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	; 0x3e8
	s6 = t56 ^ ~t62;
 800c7dc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800c7e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7e4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	ea80 0402 	eor.w	r4, r0, r2
 800c7f0:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 800c7f4:	404b      	eors	r3, r1
 800c7f6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800c7fa:	e9d7 12e6 	ldrd	r1, r2, [r7, #920]	; 0x398
 800c7fe:	460b      	mov	r3, r1
 800c800:	43db      	mvns	r3, r3
 800c802:	63bb      	str	r3, [r7, #56]	; 0x38
 800c804:	4613      	mov	r3, r2
 800c806:	43db      	mvns	r3, r3
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c80a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c80e:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
	s7 = t48 ^ ~t60;
 800c812:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800c816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c81a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	ea80 0402 	eor.w	r4, r0, r2
 800c826:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 800c82a:	404b      	eors	r3, r1
 800c82c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800c830:	e9d7 12e4 	ldrd	r1, r2, [r7, #912]	; 0x390
 800c834:	460b      	mov	r3, r1
 800c836:	43db      	mvns	r3, r3
 800c838:	633b      	str	r3, [r7, #48]	; 0x30
 800c83a:	4613      	mov	r3, r2
 800c83c:	43db      	mvns	r3, r3
 800c83e:	637b      	str	r3, [r7, #52]	; 0x34
 800c840:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c844:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
	t67 = t64 ^ t65;
 800c848:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800c84c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c850:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800c854:	ea80 0402 	eor.w	r4, r0, r2
 800c858:	62bc      	str	r4, [r7, #40]	; 0x28
 800c85a:	404b      	eors	r3, r1
 800c85c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c85e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c862:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
	s3 = t53 ^ t66;
 800c866:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800c86a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c86e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800c872:	ea80 0402 	eor.w	r4, r0, r2
 800c876:	623c      	str	r4, [r7, #32]
 800c878:	404b      	eors	r3, r1
 800c87a:	627b      	str	r3, [r7, #36]	; 0x24
 800c87c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c880:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
	s4 = t51 ^ t66;
 800c884:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800c888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c88c:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800c890:	ea80 0402 	eor.w	r4, r0, r2
 800c894:	61bc      	str	r4, [r7, #24]
 800c896:	404b      	eors	r3, r1
 800c898:	61fb      	str	r3, [r7, #28]
 800c89a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c89e:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
	s5 = t47 ^ t65;
 800c8a2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800c8a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8aa:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800c8ae:	ea80 0402 	eor.w	r4, r0, r2
 800c8b2:	613c      	str	r4, [r7, #16]
 800c8b4:	404b      	eors	r3, r1
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c8bc:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
	s1 = t64 ^ ~s3;
 800c8c0:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800c8c4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	ea80 0402 	eor.w	r4, r0, r2
 800c8d0:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800c8d4:	404b      	eors	r3, r1
 800c8d6:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800c8da:	e9d7 12e2 	ldrd	r1, r2, [r7, #904]	; 0x388
 800c8de:	460b      	mov	r3, r1
 800c8e0:	43db      	mvns	r3, r3
 800c8e2:	60bb      	str	r3, [r7, #8]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	43db      	mvns	r3, r3
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c8ee:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
	s2 = t55 ^ ~t67;
 800c8f2:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 800c8f6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	ea80 0402 	eor.w	r4, r0, r2
 800c902:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 800c906:	404b      	eors	r3, r1
 800c908:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800c90c:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	; 0x380
 800c910:	460b      	mov	r3, r1
 800c912:	43db      	mvns	r3, r3
 800c914:	603b      	str	r3, [r7, #0]
 800c916:	4613      	mov	r3, r2
 800c918:	43db      	mvns	r3, r3
 800c91a:	607b      	str	r3, [r7, #4]
 800c91c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c920:	e9c7 34ea 	strd	r3, r4, [r7, #936]	; 0x3a8

	q[7] = s0;
 800c924:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c928:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c932:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800c936:	e9c1 2300 	strd	r2, r3, [r1]
	q[6] = s1;
 800c93a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c93e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c948:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800c94c:	e9c1 2300 	strd	r2, r3, [r1]
	q[5] = s2;
 800c950:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c954:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c95e:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800c962:	e9c1 2300 	strd	r2, r3, [r1]
	q[4] = s3;
 800c966:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c96a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f103 0120 	add.w	r1, r3, #32
 800c974:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800c978:	e9c1 2300 	strd	r2, r3, [r1]
	q[3] = s4;
 800c97c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c980:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f103 0118 	add.w	r1, r3, #24
 800c98a:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800c98e:	e9c1 2300 	strd	r2, r3, [r1]
	q[2] = s5;
 800c992:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c996:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f103 0110 	add.w	r1, r3, #16
 800c9a0:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800c9a4:	e9c1 2300 	strd	r2, r3, [r1]
	q[1] = s6;
 800c9a8:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c9ac:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f103 0108 	add.w	r1, r3, #8
 800c9b6:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800c9ba:	e9c1 2300 	strd	r2, r3, [r1]
	q[0] = s7;
 800c9be:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c9c2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c9c6:	6819      	ldr	r1, [r3, #0]
 800c9c8:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800c9cc:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c9d0:	bf00      	nop
 800c9d2:	f207 7784 	addw	r7, r7, #1924	; 0x784
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c9dc:	4770      	bx	lr

0800c9de <br_aes_ct64_ortho>:

static void br_aes_ct64_ortho(uint64_t *q)
{
 800c9de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c9e2:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c

#define SWAP2(x, y)    SWAPN(0x5555555555555555, 0xAAAAAAAAAAAAAAAA,  1, x, y)
#define SWAP4(x, y)    SWAPN(0x3333333333333333, 0xCCCCCCCCCCCCCCCC,  2, x, y)
#define SWAP8(x, y)    SWAPN(0x0F0F0F0F0F0F0F0F, 0xF0F0F0F0F0F0F0F0,  4, x, y)

	SWAP2(q[0], q[1]);
 800c9ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f4:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
 800c9f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ca00:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
 800ca04:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800ca08:	f002 3855 	and.w	r8, r2, #1431655765	; 0x55555555
 800ca0c:	f003 3955 	and.w	r9, r3, #1431655765	; 0x55555555
 800ca10:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800ca14:	1891      	adds	r1, r2, r2
 800ca16:	61b9      	str	r1, [r7, #24]
 800ca18:	415b      	adcs	r3, r3
 800ca1a:	61fb      	str	r3, [r7, #28]
 800ca1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca20:	f002 34aa 	and.w	r4, r2, #2863311530	; 0xaaaaaaaa
 800ca24:	f003 35aa 	and.w	r5, r3, #2863311530	; 0xaaaaaaaa
 800ca28:	ea48 0304 	orr.w	r3, r8, r4
 800ca2c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800ca30:	ea49 0305 	orr.w	r3, r9, r5
 800ca34:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800ca38:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca3c:	e9d7 1290 	ldrd	r1, r2, [r7, #576]	; 0x240
 800ca40:	e9c3 1200 	strd	r1, r2, [r3]
 800ca44:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800ca48:	f04f 0000 	mov.w	r0, #0
 800ca4c:	f04f 0100 	mov.w	r1, #0
 800ca50:	0850      	lsrs	r0, r2, #1
 800ca52:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800ca56:	0859      	lsrs	r1, r3, #1
 800ca58:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800ca5c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800ca60:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800ca64:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800ca68:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800ca6c:	f002 3aaa 	and.w	sl, r2, #2863311530	; 0xaaaaaaaa
 800ca70:	f003 3baa 	and.w	fp, r3, #2863311530	; 0xaaaaaaaa
 800ca74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca78:	3308      	adds	r3, #8
 800ca7a:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 800ca7e:	4602      	mov	r2, r0
 800ca80:	ea42 020a 	orr.w	r2, r2, sl
 800ca84:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 800ca88:	460a      	mov	r2, r1
 800ca8a:	ea42 020b 	orr.w	r2, r2, fp
 800ca8e:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 800ca92:	e9d7 128c 	ldrd	r1, r2, [r7, #560]	; 0x230
 800ca96:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[2], q[3]);
 800ca9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800caa2:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
 800caa6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800caaa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800caae:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
 800cab2:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800cab6:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800caba:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 800cabe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800cac2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800cac6:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800caca:	1891      	adds	r1, r2, r2
 800cacc:	6139      	str	r1, [r7, #16]
 800cace:	415b      	adcs	r3, r3
 800cad0:	617b      	str	r3, [r7, #20]
 800cad2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cad6:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cada:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800cade:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cae2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800cae6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800caea:	3310      	adds	r3, #16
 800caec:	e9d7 898a 	ldrd	r8, r9, [r7, #552]	; 0x228
 800caf0:	4642      	mov	r2, r8
 800caf2:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 800caf6:	4621      	mov	r1, r4
 800caf8:	430a      	orrs	r2, r1
 800cafa:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 800cafe:	464a      	mov	r2, r9
 800cb00:	4629      	mov	r1, r5
 800cb02:	430a      	orrs	r2, r1
 800cb04:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800cb08:	e9d7 1286 	ldrd	r1, r2, [r7, #536]	; 0x218
 800cb0c:	e9c3 1200 	strd	r1, r2, [r3]
 800cb10:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800cb14:	f04f 0000 	mov.w	r0, #0
 800cb18:	f04f 0100 	mov.w	r1, #0
 800cb1c:	0850      	lsrs	r0, r2, #1
 800cb1e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cb22:	0859      	lsrs	r1, r3, #1
 800cb24:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cb28:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800cb2c:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cb30:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800cb34:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800cb38:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cb3c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800cb40:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cb44:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800cb48:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb4c:	3318      	adds	r3, #24
 800cb4e:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 800cb52:	4642      	mov	r2, r8
 800cb54:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 800cb58:	4621      	mov	r1, r4
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 800cb60:	464a      	mov	r2, r9
 800cb62:	4629      	mov	r1, r5
 800cb64:	430a      	orrs	r2, r1
 800cb66:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 800cb6a:	e9d7 1280 	ldrd	r1, r2, [r7, #512]	; 0x200
 800cb6e:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[4], q[5]);
 800cb72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb7a:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
 800cb7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800cb86:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
 800cb8a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800cb8e:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800cb92:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 800cb96:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800cb9a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cb9e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800cba2:	1891      	adds	r1, r2, r2
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	415b      	adcs	r3, r3
 800cba8:	60fb      	str	r3, [r7, #12]
 800cbaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbae:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cbb2:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800cbb6:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cbba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800cbbe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cbc2:	3320      	adds	r3, #32
 800cbc4:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 800cbc8:	4642      	mov	r2, r8
 800cbca:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800cbce:	4621      	mov	r1, r4
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	f8c7 21e8 	str.w	r2, [r7, #488]	; 0x1e8
 800cbd6:	464a      	mov	r2, r9
 800cbd8:	4629      	mov	r1, r5
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800cbe0:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 800cbe4:	e9c3 1200 	strd	r1, r2, [r3]
 800cbe8:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800cbec:	f04f 0000 	mov.w	r0, #0
 800cbf0:	f04f 0100 	mov.w	r1, #0
 800cbf4:	0850      	lsrs	r0, r2, #1
 800cbf6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cbfa:	0859      	lsrs	r1, r3, #1
 800cbfc:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cc00:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800cc04:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cc08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800cc0c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800cc10:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cc14:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 800cc18:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cc1c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800cc20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc24:	3328      	adds	r3, #40	; 0x28
 800cc26:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 800cc2a:	4642      	mov	r2, r8
 800cc2c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800cc30:	4621      	mov	r1, r4
 800cc32:	430a      	orrs	r2, r1
 800cc34:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
 800cc38:	464a      	mov	r2, r9
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 800cc42:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 800cc46:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[6], q[7]);
 800cc4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc4e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800cc52:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
 800cc56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc5e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800cc62:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800cc66:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800cc6a:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800cc6e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800cc72:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800cc76:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cc7a:	1891      	adds	r1, r2, r2
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	415b      	adcs	r3, r3
 800cc80:	607b      	str	r3, [r7, #4]
 800cc82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc86:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cc8a:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 800cc8e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cc92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800cc96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc9a:	3330      	adds	r3, #48	; 0x30
 800cc9c:	e9d7 8972 	ldrd	r8, r9, [r7, #456]	; 0x1c8
 800cca0:	4642      	mov	r2, r8
 800cca2:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 800cca6:	4621      	mov	r1, r4
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800ccae:	464a      	mov	r2, r9
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800ccb8:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	; 0x1b8
 800ccbc:	e9c3 1200 	strd	r1, r2, [r3]
 800ccc0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800ccc4:	f04f 0000 	mov.w	r0, #0
 800ccc8:	f04f 0100 	mov.w	r1, #0
 800cccc:	0850      	lsrs	r0, r2, #1
 800ccce:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800ccd2:	0859      	lsrs	r1, r3, #1
 800ccd4:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800ccd8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800ccdc:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cce0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800cce4:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cce8:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800ccec:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 800ccf0:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ccf4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800ccf8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ccfc:	3338      	adds	r3, #56	; 0x38
 800ccfe:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 800cd02:	4642      	mov	r2, r8
 800cd04:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800cd08:	4621      	mov	r1, r4
 800cd0a:	430a      	orrs	r2, r1
 800cd0c:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
 800cd10:	464a      	mov	r2, r9
 800cd12:	4629      	mov	r1, r5
 800cd14:	430a      	orrs	r2, r1
 800cd16:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800cd1a:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	; 0x1a0
 800cd1e:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP4(q[0], q[2]);
 800cd22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2a:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
 800cd2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cd36:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
 800cd3a:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800cd3e:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cd42:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800cd46:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cd4a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800cd4e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800cd52:	f04f 0000 	mov.w	r0, #0
 800cd56:	f04f 0100 	mov.w	r1, #0
 800cd5a:	0099      	lsls	r1, r3, #2
 800cd5c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cd60:	0090      	lsls	r0, r2, #2
 800cd62:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cd66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800cd6a:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cd6e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800cd72:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800cd76:	4623      	mov	r3, r4
 800cd78:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800cd84:	462b      	mov	r3, r5
 800cd86:	460a      	mov	r2, r1
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800cd8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd92:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 800cd96:	e9c3 1200 	strd	r1, r2, [r3]
 800cd9a:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800cd9e:	f04f 0000 	mov.w	r0, #0
 800cda2:	f04f 0100 	mov.w	r1, #0
 800cda6:	0890      	lsrs	r0, r2, #2
 800cda8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cdac:	0899      	lsrs	r1, r3, #2
 800cdae:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cdb2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800cdb6:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cdba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800cdbe:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800cdc2:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800cdc6:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800cdca:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800cdce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800cdd2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cdd6:	3310      	adds	r3, #16
 800cdd8:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 800cddc:	4642      	mov	r2, r8
 800cdde:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800cde2:	4621      	mov	r1, r4
 800cde4:	430a      	orrs	r2, r1
 800cde6:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800cdea:	464a      	mov	r2, r9
 800cdec:	4629      	mov	r1, r5
 800cdee:	430a      	orrs	r2, r1
 800cdf0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800cdf4:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	; 0x170
 800cdf8:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[1], q[3]);
 800cdfc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ce04:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
 800ce08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ce10:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 800ce14:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800ce18:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800ce1c:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800ce20:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800ce24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800ce28:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800ce2c:	f04f 0000 	mov.w	r0, #0
 800ce30:	f04f 0100 	mov.w	r1, #0
 800ce34:	0099      	lsls	r1, r3, #2
 800ce36:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ce3a:	0090      	lsls	r0, r2, #2
 800ce3c:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800ce40:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800ce44:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800ce48:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800ce4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce50:	3308      	adds	r3, #8
 800ce52:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 800ce56:	4642      	mov	r2, r8
 800ce58:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800ce5c:	4621      	mov	r1, r4
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 800ce64:	464a      	mov	r2, r9
 800ce66:	4629      	mov	r1, r5
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800ce6e:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800ce72:	e9c3 1200 	strd	r1, r2, [r3]
 800ce76:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800ce7a:	f04f 0000 	mov.w	r0, #0
 800ce7e:	f04f 0100 	mov.w	r1, #0
 800ce82:	0890      	lsrs	r0, r2, #2
 800ce84:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ce88:	0899      	lsrs	r1, r3, #2
 800ce8a:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800ce8e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ce92:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800ce96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800ce9a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800ce9e:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800cea2:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800cea6:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800ceaa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800ceae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ceb2:	3318      	adds	r3, #24
 800ceb4:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 800ceb8:	4642      	mov	r2, r8
 800ceba:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800cebe:	4621      	mov	r1, r4
 800cec0:	430a      	orrs	r2, r1
 800cec2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800cec6:	464a      	mov	r2, r9
 800cec8:	4629      	mov	r1, r5
 800ceca:	430a      	orrs	r2, r1
 800cecc:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800ced0:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800ced4:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[4], q[6]);
 800ced8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cedc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cee0:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 800cee4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cee8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800ceec:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 800cef0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800cef4:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cef8:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800cefc:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cf00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800cf04:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800cf08:	f04f 0000 	mov.w	r0, #0
 800cf0c:	f04f 0100 	mov.w	r1, #0
 800cf10:	0099      	lsls	r1, r3, #2
 800cf12:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cf16:	0090      	lsls	r0, r2, #2
 800cf18:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cf1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800cf20:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cf24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800cf28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf2c:	3320      	adds	r3, #32
 800cf2e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800cf32:	4642      	mov	r2, r8
 800cf34:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800cf38:	4621      	mov	r1, r4
 800cf3a:	430a      	orrs	r2, r1
 800cf3c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800cf40:	464a      	mov	r2, r9
 800cf42:	4629      	mov	r1, r5
 800cf44:	430a      	orrs	r2, r1
 800cf46:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800cf4a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800cf4e:	e9c3 1200 	strd	r1, r2, [r3]
 800cf52:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800cf56:	f04f 0000 	mov.w	r0, #0
 800cf5a:	f04f 0100 	mov.w	r1, #0
 800cf5e:	0890      	lsrs	r0, r2, #2
 800cf60:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cf64:	0899      	lsrs	r1, r3, #2
 800cf66:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cf6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800cf6e:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cf72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800cf76:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800cf7a:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800cf7e:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800cf82:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800cf86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800cf8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf8e:	3330      	adds	r3, #48	; 0x30
 800cf90:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800cf94:	4642      	mov	r2, r8
 800cf96:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	430a      	orrs	r2, r1
 800cf9e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800cfa2:	464a      	mov	r2, r9
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800cfac:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800cfb0:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[5], q[7]);
 800cfb4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cfb8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800cfbc:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
 800cfc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cfc4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cfc8:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
 800cfcc:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800cfd0:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cfd4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800cfd8:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cfdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cfe0:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800cfe4:	f04f 0000 	mov.w	r0, #0
 800cfe8:	f04f 0100 	mov.w	r1, #0
 800cfec:	0099      	lsls	r1, r3, #2
 800cfee:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cff2:	0090      	lsls	r0, r2, #2
 800cff4:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cff8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cffc:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800d000:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d004:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d008:	3328      	adds	r3, #40	; 0x28
 800d00a:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 800d00e:	4642      	mov	r2, r8
 800d010:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800d014:	4621      	mov	r1, r4
 800d016:	430a      	orrs	r2, r1
 800d018:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d01c:	464a      	mov	r2, r9
 800d01e:	4629      	mov	r1, r5
 800d020:	430a      	orrs	r2, r1
 800d022:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800d026:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d02a:	e9c3 1200 	strd	r1, r2, [r3]
 800d02e:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800d032:	f04f 0000 	mov.w	r0, #0
 800d036:	f04f 0100 	mov.w	r1, #0
 800d03a:	0890      	lsrs	r0, r2, #2
 800d03c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d040:	0899      	lsrs	r1, r3, #2
 800d042:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800d046:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d04a:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800d04e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d052:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800d056:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800d05a:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800d05e:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800d062:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d066:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d06a:	3338      	adds	r3, #56	; 0x38
 800d06c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d070:	4642      	mov	r2, r8
 800d072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d076:	4621      	mov	r1, r4
 800d078:	430a      	orrs	r2, r1
 800d07a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800d07e:	464a      	mov	r2, r9
 800d080:	4629      	mov	r1, r5
 800d082:	430a      	orrs	r2, r1
 800d084:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800d088:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d08c:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP8(q[0], q[4]);
 800d090:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d098:	e9c7 23a2 	strd	r2, r3, [r7, #648]	; 0x288
 800d09c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d0a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0a4:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
 800d0a8:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800d0ac:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d0b0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800d0b4:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d0b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d0bc:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800d0c0:	f04f 0000 	mov.w	r0, #0
 800d0c4:	f04f 0100 	mov.w	r1, #0
 800d0c8:	0119      	lsls	r1, r3, #4
 800d0ca:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d0ce:	0110      	lsls	r0, r2, #4
 800d0d0:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d0d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0d8:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d0dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d0e0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d0e4:	4623      	mov	r3, r4
 800d0e6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d0f2:	462b      	mov	r3, r5
 800d0f4:	460a      	mov	r2, r1
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d0fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d100:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d104:	e9c3 1200 	strd	r1, r2, [r3]
 800d108:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800d10c:	f04f 0000 	mov.w	r0, #0
 800d110:	f04f 0100 	mov.w	r1, #0
 800d114:	0910      	lsrs	r0, r2, #4
 800d116:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d11a:	0919      	lsrs	r1, r3, #4
 800d11c:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d124:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d128:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d12c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800d130:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d134:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800d138:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d13c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d140:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d144:	3320      	adds	r3, #32
 800d146:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800d14a:	4642      	mov	r2, r8
 800d14c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d150:	4621      	mov	r1, r4
 800d152:	430a      	orrs	r2, r1
 800d154:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d158:	464a      	mov	r2, r9
 800d15a:	4629      	mov	r1, r5
 800d15c:	430a      	orrs	r2, r1
 800d15e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d162:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d166:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[1], q[5]);
 800d16a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d16e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d172:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 800d176:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d17a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d17e:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
 800d182:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d186:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d18a:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800d18e:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d196:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d19a:	f04f 0000 	mov.w	r0, #0
 800d19e:	f04f 0100 	mov.w	r1, #0
 800d1a2:	0119      	lsls	r1, r3, #4
 800d1a4:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d1a8:	0110      	lsls	r0, r2, #4
 800d1aa:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d1ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d1b2:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d1b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d1ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d1be:	3308      	adds	r3, #8
 800d1c0:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	430a      	orrs	r2, r1
 800d1ce:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800d1d2:	464a      	mov	r2, r9
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	430a      	orrs	r2, r1
 800d1d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d1dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d1e0:	e9c3 1200 	strd	r1, r2, [r3]
 800d1e4:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d1e8:	f04f 0000 	mov.w	r0, #0
 800d1ec:	f04f 0100 	mov.w	r1, #0
 800d1f0:	0910      	lsrs	r0, r2, #4
 800d1f2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d1f6:	0919      	lsrs	r1, r3, #4
 800d1f8:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d1fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d200:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d208:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d20c:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d210:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d214:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d21c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d220:	3328      	adds	r3, #40	; 0x28
 800d222:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800d226:	4642      	mov	r2, r8
 800d228:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d22c:	4621      	mov	r1, r4
 800d22e:	430a      	orrs	r2, r1
 800d230:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d234:	464a      	mov	r2, r9
 800d236:	4629      	mov	r1, r5
 800d238:	430a      	orrs	r2, r1
 800d23a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d23e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d242:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[2], q[6]);
 800d246:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d24a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d24e:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
 800d252:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d256:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800d25a:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
 800d25e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d262:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d266:	67b9      	str	r1, [r7, #120]	; 0x78
 800d268:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d26c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d26e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d272:	f04f 0000 	mov.w	r0, #0
 800d276:	f04f 0100 	mov.w	r1, #0
 800d27a:	0119      	lsls	r1, r3, #4
 800d27c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d280:	0110      	lsls	r0, r2, #4
 800d282:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d286:	673b      	str	r3, [r7, #112]	; 0x70
 800d288:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d28c:	677b      	str	r3, [r7, #116]	; 0x74
 800d28e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d292:	3310      	adds	r3, #16
 800d294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d298:	4642      	mov	r2, r8
 800d29a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800d29e:	4621      	mov	r1, r4
 800d2a0:	430a      	orrs	r2, r1
 800d2a2:	66ba      	str	r2, [r7, #104]	; 0x68
 800d2a4:	464a      	mov	r2, r9
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d2ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d2b0:	e9c3 1200 	strd	r1, r2, [r3]
 800d2b4:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d2b8:	f04f 0000 	mov.w	r0, #0
 800d2bc:	f04f 0100 	mov.w	r1, #0
 800d2c0:	0910      	lsrs	r0, r2, #4
 800d2c2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d2c6:	0919      	lsrs	r1, r3, #4
 800d2c8:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d2cc:	663b      	str	r3, [r7, #96]	; 0x60
 800d2ce:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d2d2:	667b      	str	r3, [r7, #100]	; 0x64
 800d2d4:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d2d8:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d2dc:	65b9      	str	r1, [r7, #88]	; 0x58
 800d2de:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d2e8:	3330      	adds	r3, #48	; 0x30
 800d2ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d2ee:	4642      	mov	r2, r8
 800d2f0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	430a      	orrs	r2, r1
 800d2f8:	653a      	str	r2, [r7, #80]	; 0x50
 800d2fa:	464a      	mov	r2, r9
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	430a      	orrs	r2, r1
 800d300:	657a      	str	r2, [r7, #84]	; 0x54
 800d302:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d306:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[3], q[7]);
 800d30a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d30e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d312:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800d316:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d31a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d31e:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 800d322:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800d326:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d32a:	64b9      	str	r1, [r7, #72]	; 0x48
 800d32c:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d330:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d332:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d336:	f04f 0000 	mov.w	r0, #0
 800d33a:	f04f 0100 	mov.w	r1, #0
 800d33e:	0119      	lsls	r1, r3, #4
 800d340:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d344:	0110      	lsls	r0, r2, #4
 800d346:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d34a:	643b      	str	r3, [r7, #64]	; 0x40
 800d34c:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d350:	647b      	str	r3, [r7, #68]	; 0x44
 800d352:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d356:	3318      	adds	r3, #24
 800d358:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800d35c:	4642      	mov	r2, r8
 800d35e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d362:	4621      	mov	r1, r4
 800d364:	430a      	orrs	r2, r1
 800d366:	63ba      	str	r2, [r7, #56]	; 0x38
 800d368:	464a      	mov	r2, r9
 800d36a:	4629      	mov	r1, r5
 800d36c:	430a      	orrs	r2, r1
 800d36e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d370:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d374:	e9c3 1200 	strd	r1, r2, [r3]
 800d378:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800d37c:	f04f 0200 	mov.w	r2, #0
 800d380:	f04f 0300 	mov.w	r3, #0
 800d384:	0902      	lsrs	r2, r0, #4
 800d386:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d38a:	090b      	lsrs	r3, r1, #4
 800d38c:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d390:	6339      	str	r1, [r7, #48]	; 0x30
 800d392:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d396:	637b      	str	r3, [r7, #52]	; 0x34
 800d398:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d39c:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d3a0:	62b9      	str	r1, [r7, #40]	; 0x28
 800d3a2:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d3ac:	3338      	adds	r3, #56	; 0x38
 800d3ae:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d3b2:	4642      	mov	r2, r8
 800d3b4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	623a      	str	r2, [r7, #32]
 800d3be:	464a      	mov	r2, r9
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	430a      	orrs	r2, r1
 800d3c4:	627a      	str	r2, [r7, #36]	; 0x24
 800d3c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d3ca:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d3ce:	bf00      	nop
 800d3d0:	f507 7745 	add.w	r7, r7, #788	; 0x314
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d3da:	4770      	bx	lr

0800d3dc <br_aes_ct64_interleave_in>:

static void br_aes_ct64_interleave_in(uint64_t *q0, uint64_t *q1, const uint32_t *w)
{
 800d3dc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d3e0:	b0bb      	sub	sp, #236	; 0xec
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d3e8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d3ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
	uint64_t x0, x1, x2, x3;

	x0 = w[0];
 800d3f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	469a      	mov	sl, r3
 800d3fa:	4693      	mov	fp, r2
 800d3fc:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
	x1 = w[1];
 800d400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d404:	3304      	adds	r3, #4
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2200      	movs	r2, #0
 800d40a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d40e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d412:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d416:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	x2 = w[2];
 800d41a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d41e:	3308      	adds	r3, #8
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2200      	movs	r2, #0
 800d424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d428:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d42c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d430:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	x3 = w[3];
 800d434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d438:	330c      	adds	r3, #12
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d442:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d446:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d44a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	x0 |= (x0 << 16);
 800d44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d452:	0c1d      	lsrs	r5, r3, #16
 800d454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d458:	041c      	lsls	r4, r3, #16
 800d45a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d45e:	ea42 0104 	orr.w	r1, r2, r4
 800d462:	67b9      	str	r1, [r7, #120]	; 0x78
 800d464:	432b      	orrs	r3, r5
 800d466:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d468:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d46c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 16);
 800d470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800d478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d47c:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800d480:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d484:	ea42 0108 	orr.w	r1, r2, r8
 800d488:	6739      	str	r1, [r7, #112]	; 0x70
 800d48a:	ea43 0309 	orr.w	r3, r3, r9
 800d48e:	677b      	str	r3, [r7, #116]	; 0x74
 800d490:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d494:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 16);
 800d498:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d49c:	0c1b      	lsrs	r3, r3, #16
 800d49e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d4a6:	041b      	lsls	r3, r3, #16
 800d4a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d4ac:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d4b0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4311      	orrs	r1, r2
 800d4b8:	66b9      	str	r1, [r7, #104]	; 0x68
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	4319      	orrs	r1, r3
 800d4be:	66f9      	str	r1, [r7, #108]	; 0x6c
 800d4c0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d4c4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 16);
 800d4c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d4cc:	0c1b      	lsrs	r3, r3, #16
 800d4ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d4d6:	041b      	lsls	r3, r3, #16
 800d4d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d4dc:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d4e0:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4311      	orrs	r1, r2
 800d4e8:	6639      	str	r1, [r7, #96]	; 0x60
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	4319      	orrs	r1, r3
 800d4ee:	6679      	str	r1, [r7, #100]	; 0x64
 800d4f0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d4f4:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800d4f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d4fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d504:	ea00 0402 	and.w	r4, r0, r2
 800d508:	65bc      	str	r4, [r7, #88]	; 0x58
 800d50a:	400b      	ands	r3, r1
 800d50c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d50e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d512:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800d516:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d51a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d51e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d522:	ea00 0402 	and.w	r4, r0, r2
 800d526:	653c      	str	r4, [r7, #80]	; 0x50
 800d528:	400b      	ands	r3, r1
 800d52a:	657b      	str	r3, [r7, #84]	; 0x54
 800d52c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d530:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800d534:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d53c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d540:	ea00 0402 	and.w	r4, r0, r2
 800d544:	64bc      	str	r4, [r7, #72]	; 0x48
 800d546:	400b      	ands	r3, r1
 800d548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d54a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d54e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800d552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d55a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d55e:	ea00 0402 	and.w	r4, r0, r2
 800d562:	643c      	str	r4, [r7, #64]	; 0x40
 800d564:	400b      	ands	r3, r1
 800d566:	647b      	str	r3, [r7, #68]	; 0x44
 800d568:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d56c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 |= (x0 << 8);
 800d570:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d574:	f04f 0000 	mov.w	r0, #0
 800d578:	f04f 0100 	mov.w	r1, #0
 800d57c:	0219      	lsls	r1, r3, #8
 800d57e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d582:	0210      	lsls	r0, r2, #8
 800d584:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d588:	ea42 0400 	orr.w	r4, r2, r0
 800d58c:	63bc      	str	r4, [r7, #56]	; 0x38
 800d58e:	430b      	orrs	r3, r1
 800d590:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d592:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d596:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 8);
 800d59a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d59e:	f04f 0000 	mov.w	r0, #0
 800d5a2:	f04f 0100 	mov.w	r1, #0
 800d5a6:	0219      	lsls	r1, r3, #8
 800d5a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d5ac:	0210      	lsls	r0, r2, #8
 800d5ae:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d5b2:	ea42 0400 	orr.w	r4, r2, r0
 800d5b6:	633c      	str	r4, [r7, #48]	; 0x30
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d5bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d5c0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 8);
 800d5c4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d5c8:	f04f 0000 	mov.w	r0, #0
 800d5cc:	f04f 0100 	mov.w	r1, #0
 800d5d0:	0219      	lsls	r1, r3, #8
 800d5d2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d5d6:	0210      	lsls	r0, r2, #8
 800d5d8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d5dc:	ea42 0400 	orr.w	r4, r2, r0
 800d5e0:	62bc      	str	r4, [r7, #40]	; 0x28
 800d5e2:	430b      	orrs	r3, r1
 800d5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5e6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d5ea:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 8);
 800d5ee:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d5f2:	f04f 0000 	mov.w	r0, #0
 800d5f6:	f04f 0100 	mov.w	r1, #0
 800d5fa:	0219      	lsls	r1, r3, #8
 800d5fc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d600:	0210      	lsls	r0, r2, #8
 800d602:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d606:	ea42 0400 	orr.w	r4, r2, r0
 800d60a:	623c      	str	r4, [r7, #32]
 800d60c:	430b      	orrs	r3, r1
 800d60e:	627b      	str	r3, [r7, #36]	; 0x24
 800d610:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d614:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x00FF00FF00FF00FF;
 800d618:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d61c:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d620:	61b9      	str	r1, [r7, #24]
 800d622:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d62c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x00FF00FF00FF00FF;
 800d630:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d634:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d638:	6139      	str	r1, [r7, #16]
 800d63a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d63e:	617b      	str	r3, [r7, #20]
 800d640:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d644:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x00FF00FF00FF00FF;
 800d648:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d64c:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d65c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x00FF00FF00FF00FF;
 800d660:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d664:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d668:	6039      	str	r1, [r7, #0]
 800d66a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d66e:	607b      	str	r3, [r7, #4]
 800d670:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d674:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	*q0 = x0 | (x2 << 8);
 800d678:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d67c:	f04f 0200 	mov.w	r2, #0
 800d680:	f04f 0300 	mov.w	r3, #0
 800d684:	020b      	lsls	r3, r1, #8
 800d686:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d68a:	0202      	lsls	r2, r0, #8
 800d68c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d690:	ea42 0400 	orr.w	r4, r2, r0
 800d694:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800d698:	430b      	orrs	r3, r1
 800d69a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d69e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d6a2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d6a6:	e9c3 1200 	strd	r1, r2, [r3]
	*q1 = x1 | (x3 << 8);
 800d6aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d6ae:	f04f 0200 	mov.w	r2, #0
 800d6b2:	f04f 0300 	mov.w	r3, #0
 800d6b6:	020b      	lsls	r3, r1, #8
 800d6b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d6bc:	0202      	lsls	r2, r0, #8
 800d6be:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d6c2:	ea42 0400 	orr.w	r4, r2, r0
 800d6c6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800d6ca:	430b      	orrs	r3, r1
 800d6cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d6d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d6d8:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d6dc:	bf00      	nop
 800d6de:	37ec      	adds	r7, #236	; 0xec
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d6e6:	4770      	bx	lr

0800d6e8 <br_aes_ct64_interleave_out>:

static void br_aes_ct64_interleave_out(uint32_t *w, uint64_t q0, uint64_t q1)
{
 800d6e8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d6ec:	b09f      	sub	sp, #124	; 0x7c
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6578      	str	r0, [r7, #84]	; 0x54
 800d6f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint64_t x0, x1, x2, x3;

	x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 800d6f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d6fa:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 800d6fe:	f003 15ff 	and.w	r5, r3, #16711935	; 0xff00ff
 800d702:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
	x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 800d706:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d70a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 800d70e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 800d712:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d716:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d71a:	f04f 0000 	mov.w	r0, #0
 800d71e:	f04f 0100 	mov.w	r1, #0
 800d722:	0a10      	lsrs	r0, r2, #8
 800d724:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d728:	0a19      	lsrs	r1, r3, #8
 800d72a:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 800d72e:	f001 1bff 	and.w	fp, r1, #16711935	; 0xff00ff
 800d732:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d736:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d73a:	f04f 0000 	mov.w	r0, #0
 800d73e:	f04f 0100 	mov.w	r1, #0
 800d742:	0a10      	lsrs	r0, r2, #8
 800d744:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d748:	0a19      	lsrs	r1, r3, #8
 800d74a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 800d74e:	643b      	str	r3, [r7, #64]	; 0x40
 800d750:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800d754:	647b      	str	r3, [r7, #68]	; 0x44
 800d756:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d75a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 |= (x0 >> 8);
 800d75e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d762:	f04f 0000 	mov.w	r0, #0
 800d766:	f04f 0100 	mov.w	r1, #0
 800d76a:	0a10      	lsrs	r0, r2, #8
 800d76c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d770:	0a19      	lsrs	r1, r3, #8
 800d772:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d776:	ea42 0400 	orr.w	r4, r2, r0
 800d77a:	63bc      	str	r4, [r7, #56]	; 0x38
 800d77c:	430b      	orrs	r3, r1
 800d77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d780:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d784:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 |= (x1 >> 8);
 800d788:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d78c:	f04f 0000 	mov.w	r0, #0
 800d790:	f04f 0100 	mov.w	r1, #0
 800d794:	0a10      	lsrs	r0, r2, #8
 800d796:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d79a:	0a19      	lsrs	r1, r3, #8
 800d79c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d7a0:	ea42 0400 	orr.w	r4, r2, r0
 800d7a4:	633c      	str	r4, [r7, #48]	; 0x30
 800d7a6:	430b      	orrs	r3, r1
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d7aa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d7ae:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 |= (x2 >> 8);
 800d7b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d7b6:	f04f 0000 	mov.w	r0, #0
 800d7ba:	f04f 0100 	mov.w	r1, #0
 800d7be:	0a10      	lsrs	r0, r2, #8
 800d7c0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d7c4:	0a19      	lsrs	r1, r3, #8
 800d7c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d7ca:	ea42 0400 	orr.w	r4, r2, r0
 800d7ce:	62bc      	str	r4, [r7, #40]	; 0x28
 800d7d0:	430b      	orrs	r3, r1
 800d7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7d4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d7d8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 |= (x3 >> 8);
 800d7dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d7e0:	f04f 0000 	mov.w	r0, #0
 800d7e4:	f04f 0100 	mov.w	r1, #0
 800d7e8:	0a10      	lsrs	r0, r2, #8
 800d7ea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d7ee:	0a19      	lsrs	r1, r3, #8
 800d7f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d7f4:	ea42 0400 	orr.w	r4, r2, r0
 800d7f8:	623c      	str	r4, [r7, #32]
 800d7fa:	430b      	orrs	r3, r1
 800d7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d7fe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d802:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800d806:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d80a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d80e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d812:	ea02 0400 	and.w	r4, r2, r0
 800d816:	61bc      	str	r4, [r7, #24]
 800d818:	400b      	ands	r3, r1
 800d81a:	61fb      	str	r3, [r7, #28]
 800d81c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d820:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800d824:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d828:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d82c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d830:	ea02 0400 	and.w	r4, r2, r0
 800d834:	613c      	str	r4, [r7, #16]
 800d836:	400b      	ands	r3, r1
 800d838:	617b      	str	r3, [r7, #20]
 800d83a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d83e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800d842:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d846:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d84a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d84e:	ea02 0400 	and.w	r4, r2, r0
 800d852:	60bc      	str	r4, [r7, #8]
 800d854:	400b      	ands	r3, r1
 800d856:	60fb      	str	r3, [r7, #12]
 800d858:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d85c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800d860:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d864:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d868:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d86c:	ea02 0400 	and.w	r4, r2, r0
 800d870:	603c      	str	r4, [r7, #0]
 800d872:	400b      	ands	r3, r1
 800d874:	607b      	str	r3, [r7, #4]
 800d876:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d87a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 800d87e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800d880:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800d884:	f04f 0200 	mov.w	r2, #0
 800d888:	f04f 0300 	mov.w	r3, #0
 800d88c:	0c02      	lsrs	r2, r0, #16
 800d88e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d892:	0c0b      	lsrs	r3, r1, #16
 800d894:	4613      	mov	r3, r2
 800d896:	ea44 0203 	orr.w	r2, r4, r3
 800d89a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d89c:	601a      	str	r2, [r3, #0]
	w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 800d89e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800d8a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d8a4:	f04f 0200 	mov.w	r2, #0
 800d8a8:	f04f 0300 	mov.w	r3, #0
 800d8ac:	0c02      	lsrs	r2, r0, #16
 800d8ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d8b2:	0c0b      	lsrs	r3, r1, #16
 800d8b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b6:	3304      	adds	r3, #4
 800d8b8:	4322      	orrs	r2, r4
 800d8ba:	601a      	str	r2, [r3, #0]
	w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 800d8bc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800d8be:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d8c2:	f04f 0200 	mov.w	r2, #0
 800d8c6:	f04f 0300 	mov.w	r3, #0
 800d8ca:	0c02      	lsrs	r2, r0, #16
 800d8cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d8d0:	0c0b      	lsrs	r3, r1, #16
 800d8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8d4:	3308      	adds	r3, #8
 800d8d6:	4322      	orrs	r2, r4
 800d8d8:	601a      	str	r2, [r3, #0]
	w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 800d8da:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800d8dc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d8e0:	f04f 0200 	mov.w	r2, #0
 800d8e4:	f04f 0300 	mov.w	r3, #0
 800d8e8:	0c02      	lsrs	r2, r0, #16
 800d8ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d8ee:	0c0b      	lsrs	r3, r1, #16
 800d8f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8f2:	330c      	adds	r3, #12
 800d8f4:	4322      	orrs	r2, r4
 800d8f6:	601a      	str	r2, [r3, #0]
}
 800d8f8:	bf00      	nop
 800d8fa:	377c      	adds	r7, #124	; 0x7c
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d902:	4770      	bx	lr

0800d904 <sub_word>:
static const uint8_t Rcon[] = {
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

static uint32_t sub_word(uint32_t x)
{
 800d904:	b5b0      	push	{r4, r5, r7, lr}
 800d906:	b092      	sub	sp, #72	; 0x48
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
	uint64_t q[8];

	memset(q, 0, sizeof q);
 800d90c:	f107 0308 	add.w	r3, r7, #8
 800d910:	2240      	movs	r2, #64	; 0x40
 800d912:	2100      	movs	r1, #0
 800d914:	4618      	mov	r0, r3
 800d916:	f008 f8b1 	bl	8015a7c <memset>
	q[0] = x;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	461c      	mov	r4, r3
 800d920:	4615      	mov	r5, r2
 800d922:	e9c7 4502 	strd	r4, r5, [r7, #8]
	br_aes_ct64_ortho(q);
 800d926:	f107 0308 	add.w	r3, r7, #8
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7ff f857 	bl	800c9de <br_aes_ct64_ortho>
	br_aes_ct64_bitslice_Sbox(q);
 800d930:	f107 0308 	add.w	r3, r7, #8
 800d934:	4618      	mov	r0, r3
 800d936:	f7fd fe4d 	bl	800b5d4 <br_aes_ct64_bitslice_Sbox>
	br_aes_ct64_ortho(q);
 800d93a:	f107 0308 	add.w	r3, r7, #8
 800d93e:	4618      	mov	r0, r3
 800d940:	f7ff f84d 	bl	800c9de <br_aes_ct64_ortho>
	return (uint32_t)q[0];
 800d944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d948:	4613      	mov	r3, r2
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3748      	adds	r7, #72	; 0x48
 800d94e:	46bd      	mov	sp, r7
 800d950:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d954 <br_aes_ct64_keysched>:

static void br_aes_ct64_keysched(uint64_t *comp_skey, const uint8_t *key)
{
 800d954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d958:	b0ec      	sub	sp, #432	; 0x1b0
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d960:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d964:	6018      	str	r0, [r3, #0]
 800d966:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d96a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d96e:	6019      	str	r1, [r3, #0]
	int i, j, k, nk, nkf;
	uint32_t tmp;
	uint32_t skey[60];

	int key_len = 32;
 800d970:	2320      	movs	r3, #32
 800d972:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	nk = (int)(key_len >> 2);
 800d976:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d97a:	109b      	asrs	r3, r3, #2
 800d97c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	nkf = (int)((14 + 1) << 2);
 800d980:	233c      	movs	r3, #60	; 0x3c
 800d982:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	br_range_dec32le(skey, (key_len >> 2), key);
 800d986:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d98a:	109b      	asrs	r3, r3, #2
 800d98c:	4619      	mov	r1, r3
 800d98e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d992:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d996:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	f7fd fdaa 	bl	800b4f4 <br_range_dec32le>
	tmp = skey[(key_len >> 2) - 1];
 800d9a0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d9a4:	109b      	asrs	r3, r3, #2
 800d9a6:	1e5a      	subs	r2, r3, #1
 800d9a8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800d9b8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d9bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800d9cc:	e057      	b.n	800da7e <br_aes_ct64_keysched+0x12a>
		if (j == 0) {
 800d9ce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d113      	bne.n	800d9fe <br_aes_ct64_keysched+0xaa>
			tmp = (tmp << 24) | (tmp >> 8);
 800d9d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d9da:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d9de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			tmp = sub_word(tmp) ^ Rcon[k];
 800d9e2:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800d9e6:	f7ff ff8d 	bl	800d904 <sub_word>
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	4aba      	ldr	r2, [pc, #744]	; (800dcd8 <br_aes_ct64_keysched+0x384>)
 800d9ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d9f2:	4413      	add	r3, r2
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	404b      	eors	r3, r1
 800d9f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800d9fc:	e00d      	b.n	800da1a <br_aes_ct64_keysched+0xc6>
		} else if (nk > 6 && j == 4) {
 800d9fe:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800da02:	2b06      	cmp	r3, #6
 800da04:	dd09      	ble.n	800da1a <br_aes_ct64_keysched+0xc6>
 800da06:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800da0a:	2b04      	cmp	r3, #4
 800da0c:	d105      	bne.n	800da1a <br_aes_ct64_keysched+0xc6>
			tmp = sub_word(tmp);
 800da0e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800da12:	f7ff ff77 	bl	800d904 <sub_word>
 800da16:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		}
		tmp ^= skey[i - nk];
 800da1a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800da1e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800da22:	1ad2      	subs	r2, r2, r3
 800da24:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800da2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800da30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800da34:	4053      	eors	r3, r2
 800da36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		skey[i] = tmp;
 800da3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da3e:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 800da42:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800da46:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800da4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		if (++ j == nk) {
 800da4e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800da52:	3301      	adds	r3, #1
 800da54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800da58:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800da5c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800da60:	429a      	cmp	r2, r3
 800da62:	d107      	bne.n	800da74 <br_aes_ct64_keysched+0x120>
			j = 0;
 800da64:	2300      	movs	r3, #0
 800da66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			k ++;
 800da6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800da6e:	3301      	adds	r3, #1
 800da70:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800da74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da78:	3301      	adds	r3, #1
 800da7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800da7e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800da82:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800da86:	429a      	cmp	r2, r3
 800da88:	dba1      	blt.n	800d9ce <br_aes_ct64_keysched+0x7a>
		}
	}

	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800da8a:	2300      	movs	r3, #0
 800da8c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800da90:	2300      	movs	r3, #0
 800da92:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800da96:	e110      	b.n	800dcba <br_aes_ct64_keysched+0x366>
		uint64_t q[8];

		br_aes_ct64_interleave_in(&q[0], &q[4], skey + i);
 800da98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800da9c:	009a      	lsls	r2, r3, #2
 800da9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800daa2:	441a      	add	r2, r3
 800daa4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800daa8:	f103 0120 	add.w	r1, r3, #32
 800daac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff fc93 	bl	800d3dc <br_aes_ct64_interleave_in>
		q[1] = q[0];
 800dab6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dabe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dac2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dac6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800daca:	e9c3 0102 	strd	r0, r1, [r3, #8]
		q[2] = q[0];
 800dace:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dad2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dada:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dade:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dae2:	e9c3 0104 	strd	r0, r1, [r3, #16]
		q[3] = q[0];
 800dae6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800daee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800daf2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daf6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dafa:	e9c3 0106 	strd	r0, r1, [r3, #24]
		q[5] = q[4];
 800dafe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db02:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db06:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800db0a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db0e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db12:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
		q[6] = q[4];
 800db16:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800db22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db26:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db2a:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
		q[7] = q[4];
 800db2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db32:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db36:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800db3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db42:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
		br_aes_ct64_ortho(q);
 800db46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe ff47 	bl	800c9de <br_aes_ct64_ortho>
		comp_skey[j + 0] =
			  (q[0] & (uint64_t)0x1111111111111111)
 800db50:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800db60:	6539      	str	r1, [r7, #80]	; 0x50
 800db62:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800db66:	657b      	str	r3, [r7, #84]	; 0x54
			| (q[1] & (uint64_t)0x2222222222222222)
 800db68:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800db74:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800db78:	62b9      	str	r1, [r7, #40]	; 0x28
 800db7a:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800db7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800db86:	4602      	mov	r2, r0
 800db88:	4313      	orrs	r3, r2
 800db8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800db8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db8e:	460a      	mov	r2, r1
 800db90:	4313      	orrs	r3, r2
 800db92:	64fb      	str	r3, [r7, #76]	; 0x4c
			| (q[2] & (uint64_t)0x4444444444444444)
 800db94:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dba0:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800dba4:	6239      	str	r1, [r7, #32]
 800dba6:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800dbaa:	627b      	str	r3, [r7, #36]	; 0x24
 800dbac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	643b      	str	r3, [r7, #64]	; 0x40
 800dbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbba:	460a      	mov	r2, r1
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	647b      	str	r3, [r7, #68]	; 0x44
			| (q[3] & (uint64_t)0x8888888888888888);
 800dbc0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dbc8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800dbcc:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800dbd0:	63b9      	str	r1, [r7, #56]	; 0x38
 800dbd2:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
		comp_skey[j + 0] =
 800dbd8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dbdc:	00da      	lsls	r2, r3, #3
 800dbde:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbe2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4413      	add	r3, r2
			| (q[3] & (uint64_t)0x8888888888888888);
 800dbea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dbec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	61ba      	str	r2, [r7, #24]
 800dbf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbf6:	430a      	orrs	r2, r1
 800dbf8:	61fa      	str	r2, [r7, #28]
		comp_skey[j + 0] =
 800dbfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dbfe:	e9c3 1200 	strd	r1, r2, [r3]
		comp_skey[j + 1] =
			  (q[4] & (uint64_t)0x1111111111111111)
 800dc02:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc06:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dc0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc0e:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800dc12:	6339      	str	r1, [r7, #48]	; 0x30
 800dc14:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800dc18:	637b      	str	r3, [r7, #52]	; 0x34
			| (q[5] & (uint64_t)0x2222222222222222)
 800dc1a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc1e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dc22:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800dc26:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800dc2a:	6139      	str	r1, [r7, #16]
 800dc2c:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800dc30:	617b      	str	r3, [r7, #20]
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dc38:	4602      	mov	r2, r0
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	60bb      	str	r3, [r7, #8]
 800dc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc40:	460a      	mov	r2, r1
 800dc42:	4313      	orrs	r3, r2
 800dc44:	60fb      	str	r3, [r7, #12]
			| (q[6] & (uint64_t)0x4444444444444444)
 800dc46:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dc4e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800dc52:	f002 3a44 	and.w	sl, r2, #1145324612	; 0x44444444
 800dc56:	f003 3b44 	and.w	fp, r3, #1145324612	; 0x44444444
 800dc5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dc5e:	460b      	mov	r3, r1
 800dc60:	ea43 080a 	orr.w	r8, r3, sl
 800dc64:	4613      	mov	r3, r2
 800dc66:	ea43 090b 	orr.w	r9, r3, fp
			| (q[7] & (uint64_t)0x8888888888888888);
 800dc6a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc6e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dc72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dc76:	f002 3488 	and.w	r4, r2, #2290649224	; 0x88888888
 800dc7a:	f003 3588 	and.w	r5, r3, #2290649224	; 0x88888888
		comp_skey[j + 1] =
 800dc7e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dc82:	3301      	adds	r3, #1
 800dc84:	00da      	lsls	r2, r3, #3
 800dc86:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4413      	add	r3, r2
			| (q[7] & (uint64_t)0x8888888888888888);
 800dc92:	ea48 0204 	orr.w	r2, r8, r4
 800dc96:	603a      	str	r2, [r7, #0]
 800dc98:	ea49 0205 	orr.w	r2, r9, r5
 800dc9c:	607a      	str	r2, [r7, #4]
		comp_skey[j + 1] =
 800dc9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dca2:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800dca6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcaa:	3304      	adds	r3, #4
 800dcac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800dcb0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dcb4:	3302      	adds	r3, #2
 800dcb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800dcba:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dcbe:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	f6ff aee8 	blt.w	800da98 <br_aes_ct64_keysched+0x144>
	}
}
 800dcc8:	bf00      	nop
 800dcca:	bf00      	nop
 800dccc:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcd6:	bf00      	nop
 800dcd8:	080165e8 	.word	0x080165e8

0800dcdc <br_aes_ct64_skey_expand>:

static void br_aes_ct64_skey_expand(uint64_t *skey, const uint64_t *comp_skey)
{
 800dcdc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dce0:	b098      	sub	sp, #96	; 0x60
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dce6:	62b9      	str	r1, [r7, #40]	; 0x28
	unsigned u, v, n;

	n = (14 + 1) << 1;
 800dce8:	231e      	movs	r3, #30
 800dcea:	657b      	str	r3, [r7, #84]	; 0x54
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800dcec:	2300      	movs	r3, #0
 800dcee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcf4:	e0cb      	b.n	800de8e <br_aes_ct64_skey_expand+0x1b2>
		uint64_t x0, x1, x2, x3;

		x0 = x1 = x2 = x3 = comp_skey[u];
 800dcf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcf8:	00da      	lsls	r2, r3, #3
 800dcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfc:	4413      	add	r3, r2
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800dd06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800dd0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800dd16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		x0 &= (uint64_t)0x1111111111111111;
 800dd1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dd22:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800dd26:	61b9      	str	r1, [r7, #24]
 800dd28:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800dd2c:	61fb      	str	r3, [r7, #28]
 800dd2e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dd32:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		x1 &= (uint64_t)0x2222222222222222;
 800dd36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd3a:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800dd3e:	6139      	str	r1, [r7, #16]
 800dd40:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800dd44:	617b      	str	r3, [r7, #20]
 800dd46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dd4a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		x2 &= (uint64_t)0x4444444444444444;
 800dd4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd52:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800dd56:	60b9      	str	r1, [r7, #8]
 800dd58:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800dd5c:	60fb      	str	r3, [r7, #12]
 800dd5e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dd62:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		x3 &= (uint64_t)0x8888888888888888;
 800dd66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd6a:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800dd6e:	6039      	str	r1, [r7, #0]
 800dd70:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800dd74:	607b      	str	r3, [r7, #4]
 800dd76:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dd7a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		x1 >>= 1;
 800dd7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd82:	f04f 0000 	mov.w	r0, #0
 800dd86:	f04f 0100 	mov.w	r1, #0
 800dd8a:	0850      	lsrs	r0, r2, #1
 800dd8c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800dd90:	0859      	lsrs	r1, r3, #1
 800dd92:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
		x2 >>= 2;
 800dd96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd9a:	f04f 0000 	mov.w	r0, #0
 800dd9e:	f04f 0100 	mov.w	r1, #0
 800dda2:	0890      	lsrs	r0, r2, #2
 800dda4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800dda8:	0899      	lsrs	r1, r3, #2
 800ddaa:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
		x3 >>= 3;
 800ddae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ddb2:	f04f 0000 	mov.w	r0, #0
 800ddb6:	f04f 0100 	mov.w	r1, #0
 800ddba:	08d0      	lsrs	r0, r2, #3
 800ddbc:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800ddc0:	08d9      	lsrs	r1, r3, #3
 800ddc2:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		skey[v + 0] = (x0 << 4) - x0;
 800ddc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ddca:	f04f 0000 	mov.w	r0, #0
 800ddce:	f04f 0100 	mov.w	r1, #0
 800ddd2:	0119      	lsls	r1, r3, #4
 800ddd4:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800ddd8:	0110      	lsls	r0, r2, #4
 800ddda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dddc:	00da      	lsls	r2, r3, #3
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	eb03 0c02 	add.w	ip, r3, r2
 800dde4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dde8:	1a84      	subs	r4, r0, r2
 800ddea:	623c      	str	r4, [r7, #32]
 800ddec:	eb61 0303 	sbc.w	r3, r1, r3
 800ddf0:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ddf6:	e9cc 3400 	strd	r3, r4, [ip]
		skey[v + 1] = (x1 << 4) - x1;
 800ddfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ddfe:	f04f 0000 	mov.w	r0, #0
 800de02:	f04f 0100 	mov.w	r1, #0
 800de06:	0119      	lsls	r1, r3, #4
 800de08:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800de0c:	0110      	lsls	r0, r2, #4
 800de0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de10:	3301      	adds	r3, #1
 800de12:	00da      	lsls	r2, r3, #3
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	189c      	adds	r4, r3, r2
 800de18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800de1c:	1a85      	subs	r5, r0, r2
 800de1e:	eb61 0603 	sbc.w	r6, r1, r3
 800de22:	e9c4 5600 	strd	r5, r6, [r4]
		skey[v + 2] = (x2 << 4) - x2;
 800de26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de2a:	f04f 0000 	mov.w	r0, #0
 800de2e:	f04f 0100 	mov.w	r1, #0
 800de32:	0119      	lsls	r1, r3, #4
 800de34:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800de38:	0110      	lsls	r0, r2, #4
 800de3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de3c:	3302      	adds	r3, #2
 800de3e:	00da      	lsls	r2, r3, #3
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	189c      	adds	r4, r3, r2
 800de44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de48:	ebb0 0a02 	subs.w	sl, r0, r2
 800de4c:	eb61 0b03 	sbc.w	fp, r1, r3
 800de50:	e9c4 ab00 	strd	sl, fp, [r4]
		skey[v + 3] = (x3 << 4) - x3;
 800de54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de58:	f04f 0000 	mov.w	r0, #0
 800de5c:	f04f 0100 	mov.w	r1, #0
 800de60:	0119      	lsls	r1, r3, #4
 800de62:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800de66:	0110      	lsls	r0, r2, #4
 800de68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de6a:	3303      	adds	r3, #3
 800de6c:	00da      	lsls	r2, r3, #3
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	189c      	adds	r4, r3, r2
 800de72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de76:	ebb0 0802 	subs.w	r8, r0, r2
 800de7a:	eb61 0903 	sbc.w	r9, r1, r3
 800de7e:	e9c4 8900 	strd	r8, r9, [r4]
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800de82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de84:	3301      	adds	r3, #1
 800de86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de8a:	3304      	adds	r3, #4
 800de8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800de8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de92:	429a      	cmp	r2, r3
 800de94:	f4ff af2f 	bcc.w	800dcf6 <br_aes_ct64_skey_expand+0x1a>
	}
}
 800de98:	bf00      	nop
 800de9a:	bf00      	nop
 800de9c:	3760      	adds	r7, #96	; 0x60
 800de9e:	46bd      	mov	sp, r7
 800dea0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dea4:	4770      	bx	lr

0800dea6 <add_round_key>:

static inline void add_round_key(uint64_t *q, const uint64_t *sk)
{
 800dea6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800deaa:	b08d      	sub	sp, #52	; 0x34
 800deac:	af00      	add	r7, sp, #0
 800deae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800deb0:	62b9      	str	r1, [r7, #40]	; 0x28
	q[0] ^= sk[0];
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	ea80 0402 	eor.w	r4, r0, r2
 800dec2:	ea81 0503 	eor.w	r5, r1, r3
 800dec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec8:	e9c3 4500 	strd	r4, r5, [r3]
	q[1] ^= sk[1];
 800decc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dece:	3308      	adds	r3, #8
 800ded0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	3308      	adds	r3, #8
 800ded8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dede:	3308      	adds	r3, #8
 800dee0:	ea84 0800 	eor.w	r8, r4, r0
 800dee4:	ea85 0901 	eor.w	r9, r5, r1
 800dee8:	e9c3 8900 	strd	r8, r9, [r3]
	q[2] ^= sk[2];
 800deec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deee:	3310      	adds	r3, #16
 800def0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def6:	3310      	adds	r3, #16
 800def8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	3310      	adds	r3, #16
 800df00:	ea84 0a00 	eor.w	sl, r4, r0
 800df04:	ea85 0b01 	eor.w	fp, r5, r1
 800df08:	e9c3 ab00 	strd	sl, fp, [r3]
	q[3] ^= sk[3];
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	3318      	adds	r3, #24
 800df10:	e9d3 4500 	ldrd	r4, r5, [r3]
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	3318      	adds	r3, #24
 800df18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	3318      	adds	r3, #24
 800df20:	ea84 0200 	eor.w	r2, r4, r0
 800df24:	623a      	str	r2, [r7, #32]
 800df26:	ea85 0201 	eor.w	r2, r5, r1
 800df2a:	627a      	str	r2, [r7, #36]	; 0x24
 800df2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800df30:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] ^= sk[4];
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	3320      	adds	r3, #32
 800df38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3e:	3320      	adds	r3, #32
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800df46:	3420      	adds	r4, #32
 800df48:	ea80 0502 	eor.w	r5, r0, r2
 800df4c:	61bd      	str	r5, [r7, #24]
 800df4e:	404b      	eors	r3, r1
 800df50:	61fb      	str	r3, [r7, #28]
 800df52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800df56:	e9c4 2300 	strd	r2, r3, [r4]
	q[5] ^= sk[5];
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	3328      	adds	r3, #40	; 0x28
 800df5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df64:	3328      	adds	r3, #40	; 0x28
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800df6c:	3428      	adds	r4, #40	; 0x28
 800df6e:	ea80 0502 	eor.w	r5, r0, r2
 800df72:	613d      	str	r5, [r7, #16]
 800df74:	404b      	eors	r3, r1
 800df76:	617b      	str	r3, [r7, #20]
 800df78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800df7c:	e9c4 2300 	strd	r2, r3, [r4]
	q[6] ^= sk[6];
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	3330      	adds	r3, #48	; 0x30
 800df84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	3330      	adds	r3, #48	; 0x30
 800df8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df90:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800df92:	3430      	adds	r4, #48	; 0x30
 800df94:	ea80 0502 	eor.w	r5, r0, r2
 800df98:	60bd      	str	r5, [r7, #8]
 800df9a:	404b      	eors	r3, r1
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dfa2:	e9c4 2300 	strd	r2, r3, [r4]
	q[7] ^= sk[7];
 800dfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa8:	3338      	adds	r3, #56	; 0x38
 800dfaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb0:	3338      	adds	r3, #56	; 0x38
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800dfb8:	3438      	adds	r4, #56	; 0x38
 800dfba:	ea80 0502 	eor.w	r5, r0, r2
 800dfbe:	603d      	str	r5, [r7, #0]
 800dfc0:	404b      	eors	r3, r1
 800dfc2:	607b      	str	r3, [r7, #4]
 800dfc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfc8:	e9c4 2300 	strd	r2, r3, [r4]
}
 800dfcc:	bf00      	nop
 800dfce:	3734      	adds	r7, #52	; 0x34
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dfd6:	4770      	bx	lr

0800dfd8 <shift_rows>:

static inline void shift_rows(uint64_t *q)
{
 800dfd8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dfdc:	b09b      	sub	sp, #108	; 0x6c
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6578      	str	r0, [r7, #84]	; 0x54
	int i;

	for (i = 0; i < 8; i ++) {
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	667b      	str	r3, [r7, #100]	; 0x64
 800dfe6:	e0ab      	b.n	800e140 <shift_rows+0x168>
		uint64_t x;

		x = q[i];
 800dfe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dfea:	00da      	lsls	r2, r3, #3
 800dfec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfee:	4413      	add	r3, r2
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800dff8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dffc:	b293      	uxth	r3, r2
 800dffe:	62bb      	str	r3, [r7, #40]	; 0x28
 800e000:	2300      	movs	r3, #0
 800e002:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800e004:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e008:	f04f 0000 	mov.w	r0, #0
 800e00c:	f04f 0100 	mov.w	r1, #0
 800e010:	0910      	lsrs	r0, r2, #4
 800e012:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800e016:	0919      	lsrs	r1, r3, #4
 800e018:	f020 4870 	bic.w	r8, r0, #4026531840	; 0xf0000000
 800e01c:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800e020:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800e024:	f04f 0900 	mov.w	r9, #0
 800e028:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e02c:	460b      	mov	r3, r1
 800e02e:	ea43 0308 	orr.w	r3, r3, r8
 800e032:	64bb      	str	r3, [r7, #72]	; 0x48
 800e034:	4613      	mov	r3, r2
 800e036:	ea43 0309 	orr.w	r3, r3, r9
 800e03a:	64fb      	str	r3, [r7, #76]	; 0x4c
			| ((x & (uint64_t)0x00000000000F0000) << 12)
 800e03c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e040:	f04f 0000 	mov.w	r0, #0
 800e044:	f04f 0100 	mov.w	r1, #0
 800e048:	0319      	lsls	r1, r3, #12
 800e04a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e04e:	0310      	lsls	r0, r2, #12
 800e050:	f000 4370 	and.w	r3, r0, #4026531840	; 0xf0000000
 800e054:	623b      	str	r3, [r7, #32]
 800e056:	2300      	movs	r3, #0
 800e058:	627b      	str	r3, [r7, #36]	; 0x24
 800e05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e05c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e060:	4602      	mov	r2, r0
 800e062:	4313      	orrs	r3, r2
 800e064:	643b      	str	r3, [r7, #64]	; 0x40
 800e066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e068:	460a      	mov	r2, r1
 800e06a:	4313      	orrs	r3, r2
 800e06c:	647b      	str	r3, [r7, #68]	; 0x44
			| ((x & (uint64_t)0x0000FF0000000000) >> 8)
 800e06e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e072:	f04f 0000 	mov.w	r0, #0
 800e076:	f04f 0100 	mov.w	r1, #0
 800e07a:	0a10      	lsrs	r0, r2, #8
 800e07c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800e080:	0a19      	lsrs	r1, r3, #8
 800e082:	2300      	movs	r3, #0
 800e084:	61bb      	str	r3, [r7, #24]
 800e086:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800e08a:	61fb      	str	r3, [r7, #28]
 800e08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e08e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e092:	4602      	mov	r2, r0
 800e094:	4313      	orrs	r3, r2
 800e096:	63bb      	str	r3, [r7, #56]	; 0x38
 800e098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e09a:	460a      	mov	r2, r1
 800e09c:	4313      	orrs	r3, r2
 800e09e:	63fb      	str	r3, [r7, #60]	; 0x3c
			| ((x & (uint64_t)0x000000FF00000000) << 8)
 800e0a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e0a4:	f04f 0000 	mov.w	r0, #0
 800e0a8:	f04f 0100 	mov.w	r1, #0
 800e0ac:	0219      	lsls	r1, r3, #8
 800e0ae:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e0b2:	0210      	lsls	r0, r2, #8
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	613b      	str	r3, [r7, #16]
 800e0b8:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 800e0bc:	617b      	str	r3, [r7, #20]
 800e0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	633b      	str	r3, [r7, #48]	; 0x30
 800e0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0cc:	460a      	mov	r2, r1
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	637b      	str	r3, [r7, #52]	; 0x34
			| ((x & (uint64_t)0xF000000000000000) >> 12)
 800e0d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e0d6:	f04f 0000 	mov.w	r0, #0
 800e0da:	f04f 0100 	mov.w	r1, #0
 800e0de:	0b10      	lsrs	r0, r2, #12
 800e0e0:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e0e4:	0b19      	lsrs	r1, r3, #12
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	60bb      	str	r3, [r7, #8]
 800e0ea:	f401 2370 	and.w	r3, r1, #983040	; 0xf0000
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	ea43 0a02 	orr.w	sl, r3, r2
 800e0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fe:	460a      	mov	r2, r1
 800e100:	ea43 0b02 	orr.w	fp, r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e104:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e108:	f04f 0000 	mov.w	r0, #0
 800e10c:	f04f 0100 	mov.w	r1, #0
 800e110:	0119      	lsls	r1, r3, #4
 800e112:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e116:	0110      	lsls	r0, r2, #4
 800e118:	2400      	movs	r4, #0
 800e11a:	0d0d      	lsrs	r5, r1, #20
 800e11c:	052d      	lsls	r5, r5, #20
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e11e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e120:	00da      	lsls	r2, r3, #3
 800e122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e124:	4413      	add	r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e126:	ea4a 0204 	orr.w	r2, sl, r4
 800e12a:	603a      	str	r2, [r7, #0]
 800e12c:	ea4b 0205 	orr.w	r2, fp, r5
 800e130:	607a      	str	r2, [r7, #4]
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e132:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e136:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0; i < 8; i ++) {
 800e13a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e13c:	3301      	adds	r3, #1
 800e13e:	667b      	str	r3, [r7, #100]	; 0x64
 800e140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e142:	2b07      	cmp	r3, #7
 800e144:	f77f af50 	ble.w	800dfe8 <shift_rows+0x10>
	}
}
 800e148:	bf00      	nop
 800e14a:	bf00      	nop
 800e14c:	376c      	adds	r7, #108	; 0x6c
 800e14e:	46bd      	mov	sp, r7
 800e150:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e154:	4770      	bx	lr

0800e156 <rotr32>:

static inline uint64_t rotr32(uint64_t x)
{
 800e156:	b480      	push	{r7}
 800e158:	b083      	sub	sp, #12
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	e9c7 0100 	strd	r0, r1, [r7]
	return (x << 32) | (x >> 32);
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	683b      	ldr	r3, [r7, #0]
}
 800e164:	4610      	mov	r0, r2
 800e166:	4619      	mov	r1, r3
 800e168:	370c      	adds	r7, #12
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <mix_columns>:

static inline void mix_columns(uint64_t *q)
{
 800e172:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e176:	b0f8      	sub	sp, #480	; 0x1e0
 800e178:	af00      	add	r7, sp, #0
 800e17a:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	uint64_t q0, q1, q2, q3, q4, q5, q6, q7;
	uint64_t r0, r1, r2, r3, r4, r5, r6, r7;

	q0 = q[0];
 800e17e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e186:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	q1 = q[1];
 800e18a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e18e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e192:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	q2 = q[2];
 800e196:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e19a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e19e:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
	q3 = q[3];
 800e1a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e1a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e1aa:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	q4 = q[4];
 800e1ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e1b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1b6:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
	q5 = q[5];
 800e1ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e1be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e1c2:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
	q6 = q[6];
 800e1c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e1ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800e1ce:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
	q7 = q[7];
 800e1d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e1d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e1da:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	r0 = (q0 >> 16) | (q0 << 48);
 800e1de:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e1e2:	041a      	lsls	r2, r3, #16
 800e1e4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e1e8:	0c1b      	lsrs	r3, r3, #16
 800e1ea:	ea42 0403 	orr.w	r4, r2, r3
 800e1ee:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e1f2:	041a      	lsls	r2, r3, #16
 800e1f4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e1f8:	0c1b      	lsrs	r3, r3, #16
 800e1fa:	ea42 0503 	orr.w	r5, r2, r3
 800e1fe:	e9c7 4566 	strd	r4, r5, [r7, #408]	; 0x198
	r1 = (q1 >> 16) | (q1 << 48);
 800e202:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e206:	041a      	lsls	r2, r3, #16
 800e208:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e20c:	0c1b      	lsrs	r3, r3, #16
 800e20e:	ea42 0803 	orr.w	r8, r2, r3
 800e212:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e216:	041a      	lsls	r2, r3, #16
 800e218:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e21c:	0c1b      	lsrs	r3, r3, #16
 800e21e:	ea42 0903 	orr.w	r9, r2, r3
 800e222:	e9c7 8964 	strd	r8, r9, [r7, #400]	; 0x190
	r2 = (q2 >> 16) | (q2 << 48);
 800e226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e22a:	041a      	lsls	r2, r3, #16
 800e22c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e230:	0c1b      	lsrs	r3, r3, #16
 800e232:	4313      	orrs	r3, r2
 800e234:	62bb      	str	r3, [r7, #40]	; 0x28
 800e236:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e23a:	041a      	lsls	r2, r3, #16
 800e23c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e240:	0c1b      	lsrs	r3, r3, #16
 800e242:	4313      	orrs	r3, r2
 800e244:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e246:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e24a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	r3 = (q3 >> 16) | (q3 << 48);
 800e24e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e252:	041a      	lsls	r2, r3, #16
 800e254:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e258:	0c1b      	lsrs	r3, r3, #16
 800e25a:	4313      	orrs	r3, r2
 800e25c:	623b      	str	r3, [r7, #32]
 800e25e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e262:	041a      	lsls	r2, r3, #16
 800e264:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e268:	0c1b      	lsrs	r3, r3, #16
 800e26a:	4313      	orrs	r3, r2
 800e26c:	627b      	str	r3, [r7, #36]	; 0x24
 800e26e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e272:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	r4 = (q4 >> 16) | (q4 << 48);
 800e276:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e27a:	041a      	lsls	r2, r3, #16
 800e27c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e280:	0c1b      	lsrs	r3, r3, #16
 800e282:	4313      	orrs	r3, r2
 800e284:	61bb      	str	r3, [r7, #24]
 800e286:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e28a:	041a      	lsls	r2, r3, #16
 800e28c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e290:	0c1b      	lsrs	r3, r3, #16
 800e292:	4313      	orrs	r3, r2
 800e294:	61fb      	str	r3, [r7, #28]
 800e296:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e29a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
	r5 = (q5 >> 16) | (q5 << 48);
 800e29e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e2a2:	041a      	lsls	r2, r3, #16
 800e2a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e2a8:	0c1b      	lsrs	r3, r3, #16
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	613b      	str	r3, [r7, #16]
 800e2ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e2b2:	041a      	lsls	r2, r3, #16
 800e2b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e2b8:	0c1b      	lsrs	r3, r3, #16
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e2c2:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
	r6 = (q6 >> 16) | (q6 << 48);
 800e2c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e2ca:	041a      	lsls	r2, r3, #16
 800e2cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e2d0:	0c1b      	lsrs	r3, r3, #16
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	60bb      	str	r3, [r7, #8]
 800e2d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e2da:	041a      	lsls	r2, r3, #16
 800e2dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e2e0:	0c1b      	lsrs	r3, r3, #16
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	60fb      	str	r3, [r7, #12]
 800e2e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e2ea:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
	r7 = (q7 >> 16) | (q7 << 48);
 800e2ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e2f2:	041a      	lsls	r2, r3, #16
 800e2f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e2f8:	0c1b      	lsrs	r3, r3, #16
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	603b      	str	r3, [r7, #0]
 800e2fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e302:	041a      	lsls	r2, r3, #16
 800e304:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e308:	0c1b      	lsrs	r3, r3, #16
 800e30a:	4313      	orrs	r3, r2
 800e30c:	607b      	str	r3, [r7, #4]
 800e30e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e312:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160

	q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800e316:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e31a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e31e:	ea80 0a02 	eor.w	sl, r0, r2
 800e322:	ea81 0b03 	eor.w	fp, r1, r3
 800e326:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e32a:	ea8a 0102 	eor.w	r1, sl, r2
 800e32e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800e332:	ea8b 0303 	eor.w	r3, fp, r3
 800e336:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e33a:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e33e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e342:	ea80 0402 	eor.w	r4, r0, r2
 800e346:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800e34a:	404b      	eors	r3, r1
 800e34c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800e350:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e354:	f7ff feff 	bl	800e156 <rotr32>
 800e358:	4602      	mov	r2, r0
 800e35a:	460b      	mov	r3, r1
 800e35c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800e360:	4621      	mov	r1, r4
 800e362:	4051      	eors	r1, r2
 800e364:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800e368:	4629      	mov	r1, r5
 800e36a:	4059      	eors	r1, r3
 800e36c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800e370:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e374:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800e378:	e9c3 1200 	strd	r1, r2, [r3]
	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 800e37c:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e380:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e384:	ea80 0402 	eor.w	r4, r0, r2
 800e388:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800e38c:	404b      	eors	r3, r1
 800e38e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800e392:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e396:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800e39a:	4621      	mov	r1, r4
 800e39c:	4051      	eors	r1, r2
 800e39e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4059      	eors	r1, r3
 800e3a6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800e3aa:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e3ae:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	4051      	eors	r1, r2
 800e3b6:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800e3ba:	4629      	mov	r1, r5
 800e3bc:	4059      	eors	r1, r3
 800e3be:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800e3c2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e3c6:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	4051      	eors	r1, r2
 800e3ce:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4059      	eors	r1, r3
 800e3d6:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800e3da:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e3de:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e3e2:	ea80 0402 	eor.w	r4, r0, r2
 800e3e6:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800e3ea:	404b      	eors	r3, r1
 800e3ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e3f0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e3f4:	f7ff feaf 	bl	800e156 <rotr32>
 800e3f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800e402:	4622      	mov	r2, r4
 800e404:	4042      	eors	r2, r0
 800e406:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800e40a:	462a      	mov	r2, r5
 800e40c:	404a      	eors	r2, r1
 800e40e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800e412:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800e416:	e9c3 1200 	strd	r1, r2, [r3]
	q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 800e41a:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e41e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e422:	ea80 0402 	eor.w	r4, r0, r2
 800e426:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800e42a:	404b      	eors	r3, r1
 800e42c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e430:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e434:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800e438:	4621      	mov	r1, r4
 800e43a:	4051      	eors	r1, r2
 800e43c:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800e440:	4629      	mov	r1, r5
 800e442:	4059      	eors	r1, r3
 800e444:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800e448:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e44c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e450:	ea80 0402 	eor.w	r4, r0, r2
 800e454:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800e458:	404b      	eors	r3, r1
 800e45a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e45e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800e462:	f7ff fe78 	bl	800e156 <rotr32>
 800e466:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e46a:	3310      	adds	r3, #16
 800e46c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800e470:	4622      	mov	r2, r4
 800e472:	4042      	eors	r2, r0
 800e474:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800e478:	462a      	mov	r2, r5
 800e47a:	404a      	eors	r2, r1
 800e47c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800e480:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e484:	e9c3 1200 	strd	r1, r2, [r3]
	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 800e488:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e48c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e490:	ea80 0402 	eor.w	r4, r0, r2
 800e494:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800e498:	404b      	eors	r3, r1
 800e49a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e49e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e4a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	4051      	eors	r1, r2
 800e4aa:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	4059      	eors	r1, r3
 800e4b2:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800e4b6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e4ba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800e4be:	4621      	mov	r1, r4
 800e4c0:	4051      	eors	r1, r2
 800e4c2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	4059      	eors	r1, r3
 800e4ca:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800e4ce:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e4d2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	4051      	eors	r1, r2
 800e4da:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4059      	eors	r1, r3
 800e4e2:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800e4e6:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e4ea:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e4ee:	ea80 0402 	eor.w	r4, r0, r2
 800e4f2:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e4f6:	404b      	eors	r3, r1
 800e4f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e4fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e500:	f7ff fe29 	bl	800e156 <rotr32>
 800e504:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e508:	3318      	adds	r3, #24
 800e50a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800e50e:	4622      	mov	r2, r4
 800e510:	4042      	eors	r2, r0
 800e512:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800e516:	462a      	mov	r2, r5
 800e518:	404a      	eors	r2, r1
 800e51a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e51e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e522:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 800e526:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e52a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e52e:	ea80 0402 	eor.w	r4, r0, r2
 800e532:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800e536:	404b      	eors	r3, r1
 800e538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e53c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e540:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800e544:	4621      	mov	r1, r4
 800e546:	4051      	eors	r1, r2
 800e548:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800e54c:	4629      	mov	r1, r5
 800e54e:	4059      	eors	r1, r3
 800e550:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800e554:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e558:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800e55c:	4621      	mov	r1, r4
 800e55e:	4051      	eors	r1, r2
 800e560:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800e564:	4629      	mov	r1, r5
 800e566:	4059      	eors	r1, r3
 800e568:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800e56c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e570:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e574:	4621      	mov	r1, r4
 800e576:	4051      	eors	r1, r2
 800e578:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800e57c:	4629      	mov	r1, r5
 800e57e:	4059      	eors	r1, r3
 800e580:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800e584:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e588:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e58c:	ea80 0402 	eor.w	r4, r0, r2
 800e590:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800e594:	404b      	eors	r3, r1
 800e596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e59a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e59e:	f7ff fdda 	bl	800e156 <rotr32>
 800e5a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e5a6:	3320      	adds	r3, #32
 800e5a8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800e5ac:	4622      	mov	r2, r4
 800e5ae:	4042      	eors	r2, r0
 800e5b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e5b4:	462a      	mov	r2, r5
 800e5b6:	404a      	eors	r2, r1
 800e5b8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e5bc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e5c0:	e9c3 1200 	strd	r1, r2, [r3]
	q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 800e5c4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e5c8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e5cc:	ea80 0402 	eor.w	r4, r0, r2
 800e5d0:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800e5d4:	404b      	eors	r3, r1
 800e5d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e5da:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e5de:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	4051      	eors	r1, r2
 800e5e6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	4059      	eors	r1, r3
 800e5ee:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800e5f2:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e5f6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e5fa:	ea80 0402 	eor.w	r4, r0, r2
 800e5fe:	67bc      	str	r4, [r7, #120]	; 0x78
 800e600:	404b      	eors	r3, r1
 800e602:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e604:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800e608:	f7ff fda5 	bl	800e156 <rotr32>
 800e60c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e610:	3328      	adds	r3, #40	; 0x28
 800e612:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e616:	4622      	mov	r2, r4
 800e618:	4042      	eors	r2, r0
 800e61a:	673a      	str	r2, [r7, #112]	; 0x70
 800e61c:	462a      	mov	r2, r5
 800e61e:	404a      	eors	r2, r1
 800e620:	677a      	str	r2, [r7, #116]	; 0x74
 800e622:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e626:	e9c3 1200 	strd	r1, r2, [r3]
	q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 800e62a:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e62e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e632:	ea80 0402 	eor.w	r4, r0, r2
 800e636:	66bc      	str	r4, [r7, #104]	; 0x68
 800e638:	404b      	eors	r3, r1
 800e63a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e63c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e640:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800e644:	4621      	mov	r1, r4
 800e646:	4051      	eors	r1, r2
 800e648:	6639      	str	r1, [r7, #96]	; 0x60
 800e64a:	4629      	mov	r1, r5
 800e64c:	4059      	eors	r1, r3
 800e64e:	6679      	str	r1, [r7, #100]	; 0x64
 800e650:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e654:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e658:	ea80 0402 	eor.w	r4, r0, r2
 800e65c:	65bc      	str	r4, [r7, #88]	; 0x58
 800e65e:	404b      	eors	r3, r1
 800e660:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e662:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e666:	f7ff fd76 	bl	800e156 <rotr32>
 800e66a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e66e:	3330      	adds	r3, #48	; 0x30
 800e670:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e674:	4622      	mov	r2, r4
 800e676:	4042      	eors	r2, r0
 800e678:	653a      	str	r2, [r7, #80]	; 0x50
 800e67a:	462a      	mov	r2, r5
 800e67c:	404a      	eors	r2, r1
 800e67e:	657a      	str	r2, [r7, #84]	; 0x54
 800e680:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e684:	e9c3 1200 	strd	r1, r2, [r3]
	q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
 800e688:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e68c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e690:	ea80 0402 	eor.w	r4, r0, r2
 800e694:	64bc      	str	r4, [r7, #72]	; 0x48
 800e696:	404b      	eors	r3, r1
 800e698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e69a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e69e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	4051      	eors	r1, r2
 800e6a6:	6439      	str	r1, [r7, #64]	; 0x40
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	4059      	eors	r1, r3
 800e6ac:	6479      	str	r1, [r7, #68]	; 0x44
 800e6ae:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e6b2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e6b6:	ea80 0402 	eor.w	r4, r0, r2
 800e6ba:	63bc      	str	r4, [r7, #56]	; 0x38
 800e6bc:	404b      	eors	r3, r1
 800e6be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e6c4:	f7ff fd47 	bl	800e156 <rotr32>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800e6d0:	3138      	adds	r1, #56	; 0x38
 800e6d2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4050      	eors	r0, r2
 800e6da:	6338      	str	r0, [r7, #48]	; 0x30
 800e6dc:	4628      	mov	r0, r5
 800e6de:	4058      	eors	r0, r3
 800e6e0:	6378      	str	r0, [r7, #52]	; 0x34
 800e6e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e6e6:	e9c1 3400 	strd	r3, r4, [r1]
}
 800e6ea:	bf00      	nop
 800e6ec:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e6f6 <inc4_be>:

static void inc4_be(uint32_t *x)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
  *x = br_swap32(*x)+4;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4618      	mov	r0, r3
 800e704:	f7fc ff12 	bl	800b52c <br_swap32>
 800e708:	4603      	mov	r3, r0
 800e70a:	1d1a      	adds	r2, r3, #4
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	601a      	str	r2, [r3, #0]
  *x = br_swap32(*x);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4618      	mov	r0, r3
 800e716:	f7fc ff09 	bl	800b52c <br_swap32>
 800e71a:	4602      	mov	r2, r0
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	601a      	str	r2, [r3, #0]
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <aes_ctr4x>:

static void aes_ctr4x(uint8_t out[64], uint32_t ivw[16], uint64_t sk_exp[64])
{
 800e728:	b590      	push	{r4, r7, lr}
 800e72a:	b0a9      	sub	sp, #164	; 0xa4
 800e72c:	af02      	add	r7, sp, #8
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
  uint32_t w[16];
  uint64_t q[8];
  int i;

  memcpy(w, ivw, sizeof(w));
 800e734:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e738:	2240      	movs	r2, #64	; 0x40
 800e73a:	68b9      	ldr	r1, [r7, #8]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f007 f98f 	bl	8015a60 <memcpy>
  for (i = 0; i < 4; i++) {
 800e742:	2300      	movs	r3, #0
 800e744:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e748:	e01b      	b.n	800e782 <aes_ctr4x+0x5a>
    br_aes_ct64_interleave_in(&q[i], &q[i + 4], w + (i << 2));
 800e74a:	f107 0210 	add.w	r2, r7, #16
 800e74e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e752:	00db      	lsls	r3, r3, #3
 800e754:	18d0      	adds	r0, r2, r3
 800e756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e75a:	3304      	adds	r3, #4
 800e75c:	f107 0210 	add.w	r2, r7, #16
 800e760:	00db      	lsls	r3, r3, #3
 800e762:	18d1      	adds	r1, r2, r3
 800e764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e770:	4413      	add	r3, r2
 800e772:	461a      	mov	r2, r3
 800e774:	f7fe fe32 	bl	800d3dc <br_aes_ct64_interleave_in>
  for (i = 0; i < 4; i++) {
 800e778:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e77c:	3301      	adds	r3, #1
 800e77e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e786:	2b03      	cmp	r3, #3
 800e788:	dddf      	ble.n	800e74a <aes_ctr4x+0x22>
  }
  br_aes_ct64_ortho(q);
 800e78a:	f107 0310 	add.w	r3, r7, #16
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fe f925 	bl	800c9de <br_aes_ct64_ortho>

  add_round_key(q, sk_exp);
 800e794:	f107 0310 	add.w	r3, r7, #16
 800e798:	6879      	ldr	r1, [r7, #4]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7ff fb83 	bl	800dea6 <add_round_key>
  for (i = 1; i < 14; i++) {
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e7a6:	e01f      	b.n	800e7e8 <aes_ctr4x+0xc0>
    br_aes_ct64_bitslice_Sbox(q);
 800e7a8:	f107 0310 	add.w	r3, r7, #16
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fc ff11 	bl	800b5d4 <br_aes_ct64_bitslice_Sbox>
    shift_rows(q);
 800e7b2:	f107 0310 	add.w	r3, r7, #16
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff fc0e 	bl	800dfd8 <shift_rows>
    mix_columns(q);
 800e7bc:	f107 0310 	add.w	r3, r7, #16
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7ff fcd6 	bl	800e172 <mix_columns>
    add_round_key(q, sk_exp + (i << 3));
 800e7c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	00db      	lsls	r3, r3, #3
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	441a      	add	r2, r3
 800e7d2:	f107 0310 	add.w	r3, r7, #16
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fb64 	bl	800dea6 <add_round_key>
  for (i = 1; i < 14; i++) {
 800e7de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e7e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7ec:	2b0d      	cmp	r3, #13
 800e7ee:	dddb      	ble.n	800e7a8 <aes_ctr4x+0x80>
  }
  br_aes_ct64_bitslice_Sbox(q);
 800e7f0:	f107 0310 	add.w	r3, r7, #16
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fc feed 	bl	800b5d4 <br_aes_ct64_bitslice_Sbox>
  shift_rows(q);
 800e7fa:	f107 0310 	add.w	r3, r7, #16
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff fbea 	bl	800dfd8 <shift_rows>
  add_round_key(q, sk_exp + 112);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f503 7260 	add.w	r2, r3, #896	; 0x380
 800e80a:	f107 0310 	add.w	r3, r7, #16
 800e80e:	4611      	mov	r1, r2
 800e810:	4618      	mov	r0, r3
 800e812:	f7ff fb48 	bl	800dea6 <add_round_key>

  br_aes_ct64_ortho(q);
 800e816:	f107 0310 	add.w	r3, r7, #16
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe f8df 	bl	800c9de <br_aes_ct64_ortho>
  for (i = 0; i < 4; i ++) {
 800e820:	2300      	movs	r3, #0
 800e822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e826:	e023      	b.n	800e870 <aes_ctr4x+0x148>
    br_aes_ct64_interleave_out(w + (i << 2), q[i], q[i + 4]);
 800e828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e834:	18d4      	adds	r4, r2, r3
 800e836:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e83a:	00db      	lsls	r3, r3, #3
 800e83c:	3398      	adds	r3, #152	; 0x98
 800e83e:	443b      	add	r3, r7
 800e840:	3b88      	subs	r3, #136	; 0x88
 800e842:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e84a:	3304      	adds	r3, #4
 800e84c:	00db      	lsls	r3, r3, #3
 800e84e:	3398      	adds	r3, #152	; 0x98
 800e850:	443b      	add	r3, r7
 800e852:	3b88      	subs	r3, #136	; 0x88
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	e9cd 2300 	strd	r2, r3, [sp]
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	4620      	mov	r0, r4
 800e862:	f7fe ff41 	bl	800d6e8 <br_aes_ct64_interleave_out>
  for (i = 0; i < 4; i ++) {
 800e866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e86a:	3301      	adds	r3, #1
 800e86c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e870:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e874:	2b03      	cmp	r3, #3
 800e876:	ddd7      	ble.n	800e828 <aes_ctr4x+0x100>
  }
  br_range_enc32le(out, w, 16);
 800e878:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e87c:	2210      	movs	r2, #16
 800e87e:	4619      	mov	r1, r3
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f7fc fe8b 	bl	800b59c <br_range_enc32le>

  /* Increase counter for next 4 blocks */
  inc4_be(ivw+3);
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	330c      	adds	r3, #12
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff ff33 	bl	800e6f6 <inc4_be>
  inc4_be(ivw+7);
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	331c      	adds	r3, #28
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff ff2e 	bl	800e6f6 <inc4_be>
  inc4_be(ivw+11);
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	332c      	adds	r3, #44	; 0x2c
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7ff ff29 	bl	800e6f6 <inc4_be>
  inc4_be(ivw+15);
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	333c      	adds	r3, #60	; 0x3c
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7ff ff24 	bl	800e6f6 <inc4_be>
}
 800e8ae:	bf00      	nop
 800e8b0:	379c      	adds	r7, #156	; 0x9c
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd90      	pop	{r4, r7, pc}

0800e8b6 <br_aes_ct64_ctr_init>:

static void br_aes_ct64_ctr_init(uint64_t sk_exp[120], const uint8_t *key)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b0be      	sub	sp, #248	; 0xf8
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
 800e8be:	6039      	str	r1, [r7, #0]
	uint64_t skey[30];

	br_aes_ct64_keysched(skey, key);
 800e8c0:	f107 0308 	add.w	r3, r7, #8
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7ff f844 	bl	800d954 <br_aes_ct64_keysched>
	br_aes_ct64_skey_expand(sk_exp, skey);
 800e8cc:	f107 0308 	add.w	r3, r7, #8
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff fa02 	bl	800dcdc <br_aes_ct64_skey_expand>
}
 800e8d8:	bf00      	nop
 800e8da:	37f8      	adds	r7, #248	; 0xf8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <pqcrystals_aes256ctr_ref_init>:
  br_aes_ct64_ctr_init(sk_exp, key);
  br_aes_ct64_ctr_run(sk_exp, nonce, 0, out, outlen);
}

void aes256ctr_init(aes256ctr_ctx *s, const uint8_t *key, const uint8_t *nonce)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
  br_aes_ct64_ctr_init(s->sk_exp, key);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	68b9      	ldr	r1, [r7, #8]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7ff ffe0 	bl	800e8b6 <br_aes_ct64_ctr_init>

  br_range_dec32le(s->ivw, 3, nonce);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	2103      	movs	r1, #3
 800e900:	4618      	mov	r0, r3
 800e902:	f7fc fdf7 	bl	800b4f4 <br_range_dec32le>
  memcpy(s->ivw +  4, s->ivw, 3 * sizeof(uint32_t));
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e90c:	f103 0010 	add.w	r0, r3, #16
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e916:	220c      	movs	r2, #12
 800e918:	4619      	mov	r1, r3
 800e91a:	f007 f8a1 	bl	8015a60 <memcpy>
  memcpy(s->ivw +  8, s->ivw, 3 * sizeof(uint32_t));
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e924:	f103 0020 	add.w	r0, r3, #32
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e92e:	220c      	movs	r2, #12
 800e930:	4619      	mov	r1, r3
 800e932:	f007 f895 	bl	8015a60 <memcpy>
  memcpy(s->ivw + 12, s->ivw, 3 * sizeof(uint32_t));
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e93c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e946:	220c      	movs	r2, #12
 800e948:	4619      	mov	r1, r3
 800e94a:	f007 f889 	bl	8015a60 <memcpy>
  s->ivw[ 3] = br_swap32(0);
 800e94e:	2000      	movs	r0, #0
 800e950:	f7fc fdec 	bl	800b52c <br_swap32>
 800e954:	4602      	mov	r2, r0
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  s->ivw[ 7] = br_swap32(1);
 800e95c:	2001      	movs	r0, #1
 800e95e:	f7fc fde5 	bl	800b52c <br_swap32>
 800e962:	4602      	mov	r2, r0
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
  s->ivw[11] = br_swap32(2);
 800e96a:	2002      	movs	r0, #2
 800e96c:	f7fc fdde 	bl	800b52c <br_swap32>
 800e970:	4602      	mov	r2, r0
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
  s->ivw[15] = br_swap32(3);
 800e978:	2003      	movs	r0, #3
 800e97a:	f7fc fdd7 	bl	800b52c <br_swap32>
 800e97e:	4602      	mov	r2, r0
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
}
 800e986:	bf00      	nop
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <pqcrystals_aes256ctr_ref_squeezeblocks>:

void aes256ctr_squeezeblocks(uint8_t *out, size_t nblocks, aes256ctr_ctx *s)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b084      	sub	sp, #16
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	607a      	str	r2, [r7, #4]
  while (nblocks > 0) {
 800e99a:	e00d      	b.n	800e9b8 <pqcrystals_aes256ctr_ref_squeezeblocks+0x2a>
    aes_ctr4x(out, s->ivw, s->sk_exp);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7ff febe 	bl	800e728 <aes_ctr4x>
    out += 64;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3340      	adds	r3, #64	; 0x40
 800e9b0:	60fb      	str	r3, [r7, #12]
    nblocks--;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	60bb      	str	r3, [r7, #8]
  while (nblocks > 0) {
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1ee      	bne.n	800e99c <pqcrystals_aes256ctr_ref_squeezeblocks+0xe>
  }
}
 800e9be:	bf00      	nop
 800e9c0:	bf00      	nop
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 800e9c8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e9cc:	b086      	sub	sp, #24
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800e9d2:	f04f 0000 	mov.w	r0, #0
 800e9d6:	f04f 0100 	mov.w	r1, #0
 800e9da:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 800e9de:	2100      	movs	r1, #0
 800e9e0:	6179      	str	r1, [r7, #20]
 800e9e2:	e022      	b.n	800ea2a <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	6979      	ldr	r1, [r7, #20]
 800e9e8:	4401      	add	r1, r0
 800e9ea:	7809      	ldrb	r1, [r1, #0]
 800e9ec:	b2c9      	uxtb	r1, r1
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	460c      	mov	r4, r1
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	6979      	ldr	r1, [r7, #20]
 800e9f6:	00c9      	lsls	r1, r1, #3
 800e9f8:	f1a1 0620 	sub.w	r6, r1, #32
 800e9fc:	f1c1 0020 	rsb	r0, r1, #32
 800ea00:	fa05 f301 	lsl.w	r3, r5, r1
 800ea04:	fa04 f606 	lsl.w	r6, r4, r6
 800ea08:	4333      	orrs	r3, r6
 800ea0a:	fa24 f000 	lsr.w	r0, r4, r0
 800ea0e:	4303      	orrs	r3, r0
 800ea10:	fa04 f201 	lsl.w	r2, r4, r1
 800ea14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea18:	ea40 0802 	orr.w	r8, r0, r2
 800ea1c:	ea41 0903 	orr.w	r9, r1, r3
 800ea20:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 800ea24:	6979      	ldr	r1, [r7, #20]
 800ea26:	3101      	adds	r1, #1
 800ea28:	6179      	str	r1, [r7, #20]
 800ea2a:	6979      	ldr	r1, [r7, #20]
 800ea2c:	2907      	cmp	r1, #7
 800ea2e:	d9d9      	bls.n	800e9e4 <load64+0x1c>

  return r;
 800ea30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800ea34:	4610      	mov	r0, r2
 800ea36:	4619      	mov	r1, r3
 800ea38:	3718      	adds	r7, #24
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800ea40:	4770      	bx	lr

0800ea42 <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800ea42:	b4f0      	push	{r4, r5, r6, r7}
 800ea44:	b086      	sub	sp, #24
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	60f8      	str	r0, [r7, #12]
 800ea4a:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 800ea4e:	2300      	movs	r3, #0
 800ea50:	617b      	str	r3, [r7, #20]
 800ea52:	e019      	b.n	800ea88 <store64+0x46>
    x[i] = u >> 8*i;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	00d9      	lsls	r1, r3, #3
 800ea58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea5c:	f1c1 0620 	rsb	r6, r1, #32
 800ea60:	f1a1 0020 	sub.w	r0, r1, #32
 800ea64:	fa22 f401 	lsr.w	r4, r2, r1
 800ea68:	fa03 f606 	lsl.w	r6, r3, r6
 800ea6c:	4334      	orrs	r4, r6
 800ea6e:	fa23 f000 	lsr.w	r0, r3, r0
 800ea72:	4304      	orrs	r4, r0
 800ea74:	fa23 f501 	lsr.w	r5, r3, r1
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	b2e2      	uxtb	r2, r4
 800ea80:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	3301      	adds	r3, #1
 800ea86:	617b      	str	r3, [r7, #20]
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	2b07      	cmp	r3, #7
 800ea8c:	d9e2      	bls.n	800ea54 <store64+0x12>
}
 800ea8e:	bf00      	nop
 800ea90:	bf00      	nop
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bcf0      	pop	{r4, r5, r6, r7}
 800ea98:	4770      	bx	lr
	...

0800ea9c <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 800ea9c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800eaa0:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eaaa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eaae:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800eab0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eab4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabe:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800eac2:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 800eac6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eaca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ead4:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800ead8:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 800eadc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eae0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eaea:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800eaee:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 800eaf2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eaf6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800eb00:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800eb04:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 800eb08:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb0c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb16:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800eb1a:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 800eb1e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800eb2c:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800eb30:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 800eb34:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb38:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800eb42:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800eb46:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800eb4a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eb58:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800eb5c:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800eb60:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb64:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800eb6e:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800eb72:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800eb76:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800eb84:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800eb88:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 800eb8c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800eb9a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800eb9e:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800eba2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eba6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800ebb0:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800ebb4:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 800ebb8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebbc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800ebc6:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800ebca:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 800ebce:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebd2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800ebdc:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800ebe0:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 800ebe4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebe8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800ebf2:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800ebf6:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 800ebfa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800ec08:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800ec0c:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 800ec10:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ec14:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800ec1e:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800ec22:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 800ec26:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ec2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800ec34:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800ec38:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 800ec3c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ec40:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800ec4a:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800ec4e:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 800ec52:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ec56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800ec60:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800ec64:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 800ec68:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ec6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800ec76:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800ec7a:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 800ec7e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ec82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800ec8c:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800ec90:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 800ec94:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ec98:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800eca2:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800eca6:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 800ecaa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ecae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ecb8:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800ecbc:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 800ecc0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ecc4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800ecce:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800ecd2:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800ecdc:	f002 bdf7 	b.w	80118ce <KeccakF1600_StatePermute+0x2e32>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 800ece0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800ece4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ece8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf0:	ea80 0602 	eor.w	r6, r0, r2
 800ecf4:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 800ecf8:	404b      	eors	r3, r1
 800ecfa:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 800ecfe:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800ed02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed06:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 800ed0a:	4051      	eors	r1, r2
 800ed0c:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 800ed10:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 800ed14:	404b      	eors	r3, r1
 800ed16:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 800ed1a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800ed1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed22:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 800ed26:	4051      	eors	r1, r2
 800ed28:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 800ed2c:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 800ed30:	404b      	eors	r3, r1
 800ed32:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 800ed36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ed3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3e:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 800ed42:	4051      	eors	r1, r2
 800ed44:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800ed48:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 800ed4c:	404b      	eors	r3, r1
 800ed4e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800ed52:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800ed5e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 800ed62:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800ed66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed6a:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	ea80 0602 	eor.w	r6, r0, r2
 800ed76:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 800ed7a:	404b      	eors	r3, r1
 800ed7c:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 800ed80:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800ed84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed88:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 800ed8c:	4051      	eors	r1, r2
 800ed8e:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 800ed92:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 800ed96:	404b      	eors	r3, r1
 800ed98:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 800ed9c:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800eda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda4:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 800eda8:	4051      	eors	r1, r2
 800edaa:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 800edae:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 800edb2:	404b      	eors	r3, r1
 800edb4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800edb8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800edbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc0:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 800edc4:	4051      	eors	r1, r2
 800edc6:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 800edca:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 800edce:	404b      	eors	r3, r1
 800edd0:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800edd4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eddc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ede0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 800ede4:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800ede8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edec:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	ea80 0602 	eor.w	r6, r0, r2
 800edf8:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 800edfc:	404b      	eors	r3, r1
 800edfe:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800ee02:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800ee06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0a:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 800ee0e:	4051      	eors	r1, r2
 800ee10:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 800ee14:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 800ee18:	404b      	eors	r3, r1
 800ee1a:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 800ee1e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 800ee2a:	4051      	eors	r1, r2
 800ee2c:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 800ee30:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 800ee34:	404b      	eors	r3, r1
 800ee36:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800ee3a:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800ee3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee42:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 800ee46:	4051      	eors	r1, r2
 800ee48:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 800ee4c:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 800ee50:	404b      	eors	r3, r1
 800ee52:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800ee56:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ee62:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 800ee66:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800ee6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee6e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee76:	ea80 0602 	eor.w	r6, r0, r2
 800ee7a:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 800ee7e:	404b      	eors	r3, r1
 800ee80:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 800ee84:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 800ee90:	4051      	eors	r1, r2
 800ee92:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 800ee96:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 800ee9a:	404b      	eors	r3, r1
 800ee9c:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 800eea0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800eea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea8:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 800eeac:	4051      	eors	r1, r2
 800eeae:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 800eeb2:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 800eeb6:	404b      	eors	r3, r1
 800eeb8:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800eebc:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec4:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 800eec8:	4051      	eors	r1, r2
 800eeca:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 800eece:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 800eed2:	404b      	eors	r3, r1
 800eed4:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800eed8:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800eedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee0:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800eee4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 800eee8:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800eeec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eef0:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	ea80 0602 	eor.w	r6, r0, r2
 800eefc:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 800ef00:	404b      	eors	r3, r1
 800ef02:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 800ef06:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 800ef12:	4051      	eors	r1, r2
 800ef14:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 800ef18:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 800ef1c:	404b      	eors	r3, r1
 800ef1e:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 800ef22:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 800ef2e:	4051      	eors	r1, r2
 800ef30:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 800ef34:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 800ef38:	404b      	eors	r3, r1
 800ef3a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 800ef3e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800ef4a:	4051      	eors	r1, r2
 800ef4c:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 800ef50:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 800ef54:	404b      	eors	r3, r1
 800ef56:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800ef5a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef62:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800ef66:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 800ef6a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800ef6e:	0fda      	lsrs	r2, r3, #31
 800ef70:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	4313      	orrs	r3, r2
 800ef78:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800ef7c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800ef80:	0fda      	lsrs	r2, r3, #31
 800ef82:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800ef86:	005b      	lsls	r3, r3, #1
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 800ef8e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef96:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 800ef9a:	4051      	eors	r1, r2
 800ef9c:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 800efa0:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 800efa4:	404b      	eors	r3, r1
 800efa6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800efaa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800efb6:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800efba:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800efbe:	0fda      	lsrs	r2, r3, #31
 800efc0:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	4313      	orrs	r3, r2
 800efc8:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 800efcc:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800efd0:	0fda      	lsrs	r2, r3, #31
 800efd2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800efd6:	005b      	lsls	r3, r3, #1
 800efd8:	4313      	orrs	r3, r2
 800efda:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800efde:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800efe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe6:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 800efea:	4051      	eors	r1, r2
 800efec:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 800eff0:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 800eff4:	404b      	eors	r3, r1
 800eff6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800effa:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f002:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800f006:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800f00a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800f00e:	0fda      	lsrs	r2, r3, #31
 800f010:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	4313      	orrs	r3, r2
 800f018:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 800f01c:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800f020:	0fda      	lsrs	r2, r3, #31
 800f022:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	4313      	orrs	r3, r2
 800f02a:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800f02e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f036:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800f03a:	4051      	eors	r1, r2
 800f03c:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 800f040:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 800f044:	404b      	eors	r3, r1
 800f046:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800f04a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f052:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800f056:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800f05a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800f05e:	0fda      	lsrs	r2, r3, #31
 800f060:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	4313      	orrs	r3, r2
 800f068:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 800f06c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800f070:	0fda      	lsrs	r2, r3, #31
 800f072:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	4313      	orrs	r3, r2
 800f07a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800f07e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f086:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 800f08a:	4051      	eors	r1, r2
 800f08c:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 800f090:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 800f094:	404b      	eors	r3, r1
 800f096:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800f09a:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a2:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800f0a6:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800f0aa:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800f0ae:	0fda      	lsrs	r2, r3, #31
 800f0b0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 800f0bc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800f0c0:	0fda      	lsrs	r2, r3, #31
 800f0c2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800f0c6:	005b      	lsls	r3, r3, #1
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800f0ce:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d6:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 800f0da:	4051      	eors	r1, r2
 800f0dc:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800f0e0:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 800f0e4:	404b      	eors	r3, r1
 800f0e6:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800f0ea:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f2:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800f0f6:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 800f0fa:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f0fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f102:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	ea80 0602 	eor.w	r6, r0, r2
 800f10e:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 800f112:	404b      	eors	r3, r1
 800f114:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800f118:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f120:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800f124:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 800f128:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f130:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f134:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 800f138:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800f13c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f140:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	ea80 0602 	eor.w	r6, r0, r2
 800f14c:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 800f150:	404b      	eors	r3, r1
 800f152:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800f156:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800f162:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 800f166:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f16a:	031a      	lsls	r2, r3, #12
 800f16c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f170:	0d1b      	lsrs	r3, r3, #20
 800f172:	4313      	orrs	r3, r2
 800f174:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800f178:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f17c:	031a      	lsls	r2, r3, #12
 800f17e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f182:	0d1b      	lsrs	r3, r3, #20
 800f184:	4313      	orrs	r3, r2
 800f186:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800f18a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f196:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 800f19a:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800f19e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1a2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1aa:	ea80 0602 	eor.w	r6, r0, r2
 800f1ae:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 800f1b2:	404b      	eors	r3, r1
 800f1b4:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800f1b8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800f1c4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 800f1c8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f1cc:	02da      	lsls	r2, r3, #11
 800f1ce:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f1d2:	0d5b      	lsrs	r3, r3, #21
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800f1da:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f1de:	02da      	lsls	r2, r3, #11
 800f1e0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f1e4:	0d5b      	lsrs	r3, r3, #21
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800f1ec:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f4:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f1f8:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 800f1fc:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800f200:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f204:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	ea80 0602 	eor.w	r6, r0, r2
 800f210:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 800f214:	404b      	eors	r3, r1
 800f216:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800f21a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800f21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f222:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800f226:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 800f22a:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f22e:	0ada      	lsrs	r2, r3, #11
 800f230:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f234:	055b      	lsls	r3, r3, #21
 800f236:	4313      	orrs	r3, r2
 800f238:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800f23c:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f240:	0ada      	lsrs	r2, r3, #11
 800f242:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f246:	055b      	lsls	r3, r3, #21
 800f248:	4313      	orrs	r3, r2
 800f24a:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800f24e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f25a:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800f25e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800f262:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f266:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26e:	ea80 0602 	eor.w	r6, r0, r2
 800f272:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 800f276:	404b      	eors	r3, r1
 800f278:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800f27c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f284:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800f288:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 800f28c:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f290:	0c9a      	lsrs	r2, r3, #18
 800f292:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f296:	039b      	lsls	r3, r3, #14
 800f298:	4313      	orrs	r3, r2
 800f29a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800f29e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f2a2:	0c9a      	lsrs	r2, r3, #18
 800f2a4:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f2a8:	039b      	lsls	r3, r3, #14
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f2b0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800f2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f2bc:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800f2c0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c8:	43d1      	mvns	r1, r2
 800f2ca:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 800f2ce:	43db      	mvns	r3, r3
 800f2d0:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800f2d4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2dc:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 800f2e0:	4011      	ands	r1, r2
 800f2e2:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 800f2e6:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 800f2ea:	400b      	ands	r3, r1
 800f2ec:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800f2f0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 800f2fc:	4051      	eors	r1, r2
 800f2fe:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 800f302:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 800f306:	404b      	eors	r3, r1
 800f308:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800f30c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f314:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f318:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800f31c:	4afd      	ldr	r2, [pc, #1012]	; (800f714 <KeccakF1600_StatePermute+0xc78>)
 800f31e:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	4413      	add	r3, r2
 800f326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f32a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	ea82 0600 	eor.w	r6, r2, r0
 800f336:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 800f33a:	404b      	eors	r3, r1
 800f33c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800f340:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f348:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f34c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 800f350:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f358:	43d1      	mvns	r1, r2
 800f35a:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800f35e:	43db      	mvns	r3, r3
 800f360:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800f364:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 800f370:	4011      	ands	r1, r2
 800f372:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 800f376:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 800f37a:	400b      	ands	r3, r1
 800f37c:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 800f380:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 800f38c:	4051      	eors	r1, r2
 800f38e:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800f392:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 800f396:	404b      	eors	r3, r1
 800f398:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800f39c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800f3a8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 800f3ac:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b4:	43d1      	mvns	r1, r2
 800f3b6:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 800f3ba:	43db      	mvns	r3, r3
 800f3bc:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800f3c0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c8:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 800f3cc:	4011      	ands	r1, r2
 800f3ce:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 800f3d2:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 800f3d6:	400b      	ands	r3, r1
 800f3d8:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 800f3dc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e4:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 800f3e8:	4051      	eors	r1, r2
 800f3ea:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800f3ee:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 800f3f2:	404b      	eors	r3, r1
 800f3f4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800f3f8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f400:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800f404:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 800f408:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f410:	43d1      	mvns	r1, r2
 800f412:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 800f416:	43db      	mvns	r3, r3
 800f418:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800f41c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 800f428:	4011      	ands	r1, r2
 800f42a:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 800f42e:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800f432:	400b      	ands	r3, r1
 800f434:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800f438:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f440:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 800f444:	4051      	eors	r1, r2
 800f446:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 800f44a:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800f44e:	404b      	eors	r3, r1
 800f450:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800f454:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800f458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45c:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800f460:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 800f464:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	43d1      	mvns	r1, r2
 800f46e:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800f472:	43db      	mvns	r3, r3
 800f474:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 800f478:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800f484:	4011      	ands	r1, r2
 800f486:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 800f48a:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 800f48e:	400b      	ands	r3, r1
 800f490:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800f494:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49c:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 800f4a0:	4051      	eors	r1, r2
 800f4a2:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 800f4a6:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 800f4aa:	404b      	eors	r3, r1
 800f4ac:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800f4b0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800f4bc:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800f4c0:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800f4c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4c8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d0:	ea80 0602 	eor.w	r6, r0, r2
 800f4d4:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 800f4d8:	404b      	eors	r3, r1
 800f4da:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800f4de:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e6:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800f4ea:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800f4ee:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f4f2:	091a      	lsrs	r2, r3, #4
 800f4f4:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f4f8:	071b      	lsls	r3, r3, #28
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800f500:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f504:	091a      	lsrs	r2, r3, #4
 800f506:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f50a:	071b      	lsls	r3, r3, #28
 800f50c:	4313      	orrs	r3, r2
 800f50e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800f512:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f51e:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 800f522:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800f526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f52a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f532:	ea80 0602 	eor.w	r6, r0, r2
 800f536:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800f53a:	404b      	eors	r3, r1
 800f53c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800f540:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800f54c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 800f550:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f554:	0b1a      	lsrs	r2, r3, #12
 800f556:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f55a:	051b      	lsls	r3, r3, #20
 800f55c:	4313      	orrs	r3, r2
 800f55e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800f562:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f566:	0b1a      	lsrs	r2, r3, #12
 800f568:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f56c:	051b      	lsls	r3, r3, #20
 800f56e:	4313      	orrs	r3, r2
 800f570:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800f574:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f580:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 800f584:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800f588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f58c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	ea80 0602 	eor.w	r6, r0, r2
 800f598:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 800f59c:	404b      	eors	r3, r1
 800f59e:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800f5a2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800f5ae:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800f5b2:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f5b6:	0f5a      	lsrs	r2, r3, #29
 800f5b8:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f5bc:	00db      	lsls	r3, r3, #3
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800f5c4:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f5c8:	0f5a      	lsrs	r2, r3, #29
 800f5ca:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f5ce:	00db      	lsls	r3, r3, #3
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800f5d6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f5e2:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 800f5e6:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800f5ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5ee:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	ea80 0602 	eor.w	r6, r0, r2
 800f5fa:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 800f5fe:	404b      	eors	r3, r1
 800f600:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800f604:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60c:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800f610:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 800f614:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f618:	035a      	lsls	r2, r3, #13
 800f61a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f61e:	0cdb      	lsrs	r3, r3, #19
 800f620:	4313      	orrs	r3, r2
 800f622:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800f626:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f62a:	035a      	lsls	r2, r3, #13
 800f62c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f630:	0cdb      	lsrs	r3, r3, #19
 800f632:	4313      	orrs	r3, r2
 800f634:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800f638:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f640:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f644:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 800f648:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800f64c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f650:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f658:	ea80 0602 	eor.w	r6, r0, r2
 800f65c:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 800f660:	404b      	eors	r3, r1
 800f662:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800f666:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800f672:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 800f676:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800f67a:	075a      	lsls	r2, r3, #29
 800f67c:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800f680:	08db      	lsrs	r3, r3, #3
 800f682:	4313      	orrs	r3, r2
 800f684:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800f688:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800f68c:	075a      	lsls	r2, r3, #29
 800f68e:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800f692:	08db      	lsrs	r3, r3, #3
 800f694:	4313      	orrs	r3, r2
 800f696:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800f69a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f6a6:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800f6aa:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b2:	43d1      	mvns	r1, r2
 800f6b4:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800f6b8:	43db      	mvns	r3, r3
 800f6ba:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 800f6be:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c6:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 800f6ca:	4011      	ands	r1, r2
 800f6cc:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 800f6d0:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800f6d4:	400b      	ands	r3, r1
 800f6d6:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 800f6da:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e2:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 800f6e6:	4051      	eors	r1, r2
 800f6e8:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800f6ec:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 800f6f0:	404b      	eors	r3, r1
 800f6f2:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800f6f6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fe:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800f702:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 800f706:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	43d1      	mvns	r1, r2
 800f710:	e002      	b.n	800f718 <KeccakF1600_StatePermute+0xc7c>
 800f712:	bf00      	nop
 800f714:	080165f8 	.word	0x080165f8
 800f718:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 800f71c:	43db      	mvns	r3, r3
 800f71e:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 800f722:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 800f72e:	4011      	ands	r1, r2
 800f730:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 800f734:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 800f738:	400b      	ands	r3, r1
 800f73a:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800f73e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f746:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800f74a:	4051      	eors	r1, r2
 800f74c:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 800f750:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 800f754:	404b      	eors	r3, r1
 800f756:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800f75a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f762:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800f766:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800f76a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f772:	43d1      	mvns	r1, r2
 800f774:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 800f778:	43db      	mvns	r3, r3
 800f77a:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 800f77e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f786:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 800f78a:	4011      	ands	r1, r2
 800f78c:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 800f790:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800f794:	400b      	ands	r3, r1
 800f796:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 800f79a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 800f7a6:	4051      	eors	r1, r2
 800f7a8:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 800f7ac:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 800f7b0:	404b      	eors	r3, r1
 800f7b2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800f7b6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800f7c2:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800f7c6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	43d1      	mvns	r1, r2
 800f7d0:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800f7d4:	43db      	mvns	r3, r3
 800f7d6:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800f7da:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 800f7e6:	4011      	ands	r1, r2
 800f7e8:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 800f7ec:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 800f7f0:	400b      	ands	r3, r1
 800f7f2:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800f7f6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 800f802:	4051      	eors	r1, r2
 800f804:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800f808:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 800f80c:	404b      	eors	r3, r1
 800f80e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800f812:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81a:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800f81e:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 800f822:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	43d1      	mvns	r1, r2
 800f82c:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 800f830:	43db      	mvns	r3, r3
 800f832:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800f836:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83e:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 800f842:	4011      	ands	r1, r2
 800f844:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 800f848:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 800f84c:	400b      	ands	r3, r1
 800f84e:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 800f852:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85a:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 800f85e:	4051      	eors	r1, r2
 800f860:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 800f864:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 800f868:	404b      	eors	r3, r1
 800f86a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800f86e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800f872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f876:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800f87a:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 800f87e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800f882:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f886:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88e:	ea80 0602 	eor.w	r6, r0, r2
 800f892:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 800f896:	404b      	eors	r3, r1
 800f898:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800f89c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800f8a8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 800f8ac:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800f8b0:	0fda      	lsrs	r2, r3, #31
 800f8b2:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800f8b6:	005b      	lsls	r3, r3, #1
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800f8be:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800f8c2:	0fda      	lsrs	r2, r3, #31
 800f8c4:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800f8d0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800f8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f8dc:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 800f8e0:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800f8e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8e8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f0:	ea80 0602 	eor.w	r6, r0, r2
 800f8f4:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 800f8f8:	404b      	eors	r3, r1
 800f8fa:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800f8fe:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800f902:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800f906:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 800f90a:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800f90e:	0e9a      	lsrs	r2, r3, #26
 800f910:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800f914:	019b      	lsls	r3, r3, #6
 800f916:	4313      	orrs	r3, r2
 800f918:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800f91c:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800f920:	0e9a      	lsrs	r2, r3, #26
 800f922:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800f926:	019b      	lsls	r3, r3, #6
 800f928:	4313      	orrs	r3, r2
 800f92a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800f92e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800f932:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f936:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 800f93a:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800f93e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f942:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94a:	ea80 0602 	eor.w	r6, r0, r2
 800f94e:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 800f952:	404b      	eors	r3, r1
 800f954:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800f958:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800f95c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800f960:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 800f964:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800f968:	09da      	lsrs	r2, r3, #7
 800f96a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800f96e:	065b      	lsls	r3, r3, #25
 800f970:	4313      	orrs	r3, r2
 800f972:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800f976:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800f97a:	09da      	lsrs	r2, r3, #7
 800f97c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800f980:	065b      	lsls	r3, r3, #25
 800f982:	4313      	orrs	r3, r2
 800f984:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800f988:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800f98c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f990:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800f994:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800f998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f99c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a4:	ea80 0602 	eor.w	r6, r0, r2
 800f9a8:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 800f9ac:	404b      	eors	r3, r1
 800f9ae:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800f9b2:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800f9b6:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800f9ba:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 800f9be:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800f9c2:	0e1a      	lsrs	r2, r3, #24
 800f9c4:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800f9c8:	021b      	lsls	r3, r3, #8
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800f9d0:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800f9d4:	0e1a      	lsrs	r2, r3, #24
 800f9d6:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800f9da:	021b      	lsls	r3, r3, #8
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800f9e2:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800f9e6:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f9ea:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 800f9ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800f9f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9f6:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fe:	ea80 0602 	eor.w	r6, r0, r2
 800fa02:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 800fa06:	404b      	eors	r3, r1
 800fa08:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800fa0c:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800fa10:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800fa14:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 800fa18:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800fa1c:	0b9a      	lsrs	r2, r3, #14
 800fa1e:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800fa22:	049b      	lsls	r3, r3, #18
 800fa24:	4313      	orrs	r3, r2
 800fa26:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800fa2a:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800fa2e:	0b9a      	lsrs	r2, r3, #14
 800fa30:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800fa34:	049b      	lsls	r3, r3, #18
 800fa36:	4313      	orrs	r3, r2
 800fa38:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800fa3c:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800fa40:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800fa44:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 800fa48:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	43d1      	mvns	r1, r2
 800fa52:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 800fa56:	43db      	mvns	r3, r3
 800fa58:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800fa5c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa64:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 800fa68:	4011      	ands	r1, r2
 800fa6a:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 800fa6e:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 800fa72:	400b      	ands	r3, r1
 800fa74:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800fa78:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 800fa84:	4051      	eors	r1, r2
 800fa86:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 800fa8a:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 800fa8e:	404b      	eors	r3, r1
 800fa90:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800fa94:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800fa98:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800fa9c:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800faa0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	43d1      	mvns	r1, r2
 800faaa:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 800faae:	43db      	mvns	r3, r3
 800fab0:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800fab4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 800fac0:	4011      	ands	r1, r2
 800fac2:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 800fac6:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 800faca:	400b      	ands	r3, r1
 800facc:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 800fad0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad8:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 800fadc:	4051      	eors	r1, r2
 800fade:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800fae2:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 800fae6:	404b      	eors	r3, r1
 800fae8:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800faec:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800faf0:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800faf4:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 800faf8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	43d1      	mvns	r1, r2
 800fb02:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800fb06:	43db      	mvns	r3, r3
 800fb08:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800fb0c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb14:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 800fb18:	4011      	ands	r1, r2
 800fb1a:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 800fb1e:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 800fb22:	400b      	ands	r3, r1
 800fb24:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800fb28:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 800fb34:	4051      	eors	r1, r2
 800fb36:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 800fb3a:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 800fb3e:	404b      	eors	r3, r1
 800fb40:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800fb44:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800fb48:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800fb4c:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 800fb50:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb58:	43d1      	mvns	r1, r2
 800fb5a:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 800fb5e:	43db      	mvns	r3, r3
 800fb60:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800fb64:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 800fb70:	4011      	ands	r1, r2
 800fb72:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 800fb76:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 800fb7a:	400b      	ands	r3, r1
 800fb7c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800fb80:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb88:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 800fb8c:	4051      	eors	r1, r2
 800fb8e:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800fb92:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800fb96:	404b      	eors	r3, r1
 800fb98:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800fb9c:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 800fba0:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800fba4:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 800fba8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	43d1      	mvns	r1, r2
 800fbb2:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 800fbb6:	43db      	mvns	r3, r3
 800fbb8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800fbbc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc4:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 800fbc8:	4011      	ands	r1, r2
 800fbca:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 800fbce:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 800fbd2:	400b      	ands	r3, r1
 800fbd4:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800fbd8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800fbe4:	4051      	eors	r1, r2
 800fbe6:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800fbea:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 800fbee:	404b      	eors	r3, r1
 800fbf0:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800fbf4:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 800fbf8:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800fbfc:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 800fc00:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800fc04:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc08:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800fc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc10:	ea80 0602 	eor.w	r6, r0, r2
 800fc14:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 800fc18:	404b      	eors	r3, r1
 800fc1a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800fc1e:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 800fc22:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800fc26:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 800fc2a:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800fc2e:	095a      	lsrs	r2, r3, #5
 800fc30:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800fc34:	06db      	lsls	r3, r3, #27
 800fc36:	4313      	orrs	r3, r2
 800fc38:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800fc3c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800fc40:	095a      	lsrs	r2, r3, #5
 800fc42:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800fc46:	06db      	lsls	r3, r3, #27
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800fc4e:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 800fc52:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800fc56:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 800fc5a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800fc5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc62:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800fc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6a:	ea80 0602 	eor.w	r6, r0, r2
 800fc6e:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 800fc72:	404b      	eors	r3, r1
 800fc74:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800fc78:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 800fc7c:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800fc80:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 800fc84:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800fc88:	011a      	lsls	r2, r3, #4
 800fc8a:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800fc8e:	0f1b      	lsrs	r3, r3, #28
 800fc90:	4313      	orrs	r3, r2
 800fc92:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800fc96:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800fc9a:	011a      	lsls	r2, r3, #4
 800fc9c:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800fca0:	0f1b      	lsrs	r3, r3, #28
 800fca2:	4313      	orrs	r3, r2
 800fca4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800fca8:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800fcac:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800fcb0:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 800fcb4:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800fcb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fcbc:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800fcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc4:	ea80 0602 	eor.w	r6, r0, r2
 800fcc8:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 800fccc:	404b      	eors	r3, r1
 800fcce:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800fcd2:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800fcd6:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800fcda:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 800fcde:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800fce2:	0d9a      	lsrs	r2, r3, #22
 800fce4:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800fce8:	029b      	lsls	r3, r3, #10
 800fcea:	4313      	orrs	r3, r2
 800fcec:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800fcf0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800fcf4:	0d9a      	lsrs	r2, r3, #22
 800fcf6:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800fcfa:	029b      	lsls	r3, r3, #10
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800fd02:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 800fd06:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800fd0a:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 800fd0e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800fd12:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd16:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	ea80 0602 	eor.w	r6, r0, r2
 800fd22:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 800fd26:	404b      	eors	r3, r1
 800fd28:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800fd2c:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 800fd30:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800fd34:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 800fd38:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800fd3c:	0c5a      	lsrs	r2, r3, #17
 800fd3e:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800fd42:	03db      	lsls	r3, r3, #15
 800fd44:	4313      	orrs	r3, r2
 800fd46:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800fd4a:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800fd4e:	0c5a      	lsrs	r2, r3, #17
 800fd50:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800fd54:	03db      	lsls	r3, r3, #15
 800fd56:	4313      	orrs	r3, r2
 800fd58:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800fd5c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 800fd60:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800fd64:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 800fd68:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800fd6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd70:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800fd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd78:	ea80 0602 	eor.w	r6, r0, r2
 800fd7c:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 800fd80:	404b      	eors	r3, r1
 800fd82:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800fd86:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 800fd8a:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800fd8e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 800fd92:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800fd96:	061a      	lsls	r2, r3, #24
 800fd98:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800fd9c:	0a1b      	lsrs	r3, r3, #8
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800fda4:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800fda8:	061a      	lsls	r2, r3, #24
 800fdaa:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800fdae:	0a1b      	lsrs	r3, r3, #8
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800fdb6:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800fdba:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800fdbe:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 800fdc2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	43d1      	mvns	r1, r2
 800fdcc:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 800fdd0:	43db      	mvns	r3, r3
 800fdd2:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800fdd6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 800fde2:	4011      	ands	r1, r2
 800fde4:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 800fde8:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 800fdec:	400b      	ands	r3, r1
 800fdee:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800fdf2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 800fdfe:	4051      	eors	r1, r2
 800fe00:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 800fe04:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 800fe08:	404b      	eors	r3, r1
 800fe0a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800fe0e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800fe12:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800fe16:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 800fe1a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	43d1      	mvns	r1, r2
 800fe24:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 800fe28:	43db      	mvns	r3, r3
 800fe2a:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 800fe2e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 800fe3a:	4011      	ands	r1, r2
 800fe3c:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 800fe40:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 800fe44:	400b      	ands	r3, r1
 800fe46:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 800fe4a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fe4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe52:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 800fe56:	4051      	eors	r1, r2
 800fe58:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 800fe5c:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 800fe60:	404b      	eors	r3, r1
 800fe62:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800fe66:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 800fe6a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800fe6e:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 800fe72:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	43d1      	mvns	r1, r2
 800fe7c:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 800fe80:	43db      	mvns	r3, r3
 800fe82:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 800fe86:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fe8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8e:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 800fe92:	4011      	ands	r1, r2
 800fe94:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 800fe98:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 800fe9c:	400b      	ands	r3, r1
 800fe9e:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 800fea2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feaa:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 800feae:	4051      	eors	r1, r2
 800feb0:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 800feb4:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 800feb8:	404b      	eors	r3, r1
 800feba:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800febe:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800fec2:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800fec6:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 800feca:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed2:	43d1      	mvns	r1, r2
 800fed4:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 800fed8:	43db      	mvns	r3, r3
 800feda:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 800fede:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 800feea:	4011      	ands	r1, r2
 800feec:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 800fef0:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 800fef4:	400b      	ands	r3, r1
 800fef6:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 800fefa:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff02:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 800ff06:	4051      	eors	r1, r2
 800ff08:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800ff0c:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 800ff10:	404b      	eors	r3, r1
 800ff12:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800ff16:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800ff1a:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800ff1e:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 800ff22:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2a:	43d1      	mvns	r1, r2
 800ff2c:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 800ff30:	43db      	mvns	r3, r3
 800ff32:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 800ff36:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 800ff42:	4011      	ands	r1, r2
 800ff44:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 800ff48:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 800ff4c:	400b      	ands	r3, r1
 800ff4e:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 800ff52:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ff56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5a:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 800ff5e:	4051      	eors	r1, r2
 800ff60:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800ff64:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800ff68:	404b      	eors	r3, r1
 800ff6a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800ff6e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800ff72:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800ff76:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 800ff7a:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800ff7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff82:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	ea80 0602 	eor.w	r6, r0, r2
 800ff8e:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 800ff92:	404b      	eors	r3, r1
 800ff94:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800ff98:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 800ff9c:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800ffa0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 800ffa4:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800ffa8:	079a      	lsls	r2, r3, #30
 800ffaa:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800ffae:	089b      	lsrs	r3, r3, #2
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800ffb6:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800ffba:	079a      	lsls	r2, r3, #30
 800ffbc:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800ffc0:	089b      	lsrs	r3, r3, #2
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800ffc8:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800ffcc:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800ffd0:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 800ffd4:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800ffd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffdc:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	ea80 0602 	eor.w	r6, r0, r2
 800ffe8:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 800ffec:	404b      	eors	r3, r1
 800ffee:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800fff2:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800fff6:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800fffa:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 800fffe:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8010002:	05da      	lsls	r2, r3, #23
 8010004:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8010008:	0a5b      	lsrs	r3, r3, #9
 801000a:	4313      	orrs	r3, r2
 801000c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8010010:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8010014:	05da      	lsls	r2, r3, #23
 8010016:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 801001a:	0a5b      	lsrs	r3, r3, #9
 801001c:	4313      	orrs	r3, r2
 801001e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8010022:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8010026:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801002a:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 801002e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8010032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010036:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 801003a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003e:	ea80 0602 	eor.w	r6, r0, r2
 8010042:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 8010046:	404b      	eors	r3, r1
 8010048:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 801004c:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8010050:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8010054:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8010058:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 801005c:	01da      	lsls	r2, r3, #7
 801005e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8010062:	0e5b      	lsrs	r3, r3, #25
 8010064:	4313      	orrs	r3, r2
 8010066:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 801006a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801006e:	01da      	lsls	r2, r3, #7
 8010070:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8010074:	0e5b      	lsrs	r3, r3, #25
 8010076:	4313      	orrs	r3, r2
 8010078:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 801007c:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8010080:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010084:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8010088:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 801008c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010090:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010098:	ea80 0602 	eor.w	r6, r0, r2
 801009c:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 80100a0:	404b      	eors	r3, r1
 80100a2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80100a6:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80100aa:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80100ae:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 80100b2:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80100b6:	025a      	lsls	r2, r3, #9
 80100b8:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80100bc:	0ddb      	lsrs	r3, r3, #23
 80100be:	4313      	orrs	r3, r2
 80100c0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80100c4:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80100c8:	025a      	lsls	r2, r3, #9
 80100ca:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80100ce:	0ddb      	lsrs	r3, r3, #23
 80100d0:	4313      	orrs	r3, r2
 80100d2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80100d6:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 80100da:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80100de:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 80100e2:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80100e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100ea:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	ea80 0602 	eor.w	r6, r0, r2
 80100f6:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 80100fa:	404b      	eors	r3, r1
 80100fc:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8010100:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8010104:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8010108:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 801010c:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8010110:	0f9a      	lsrs	r2, r3, #30
 8010112:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4313      	orrs	r3, r2
 801011a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 801011e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8010122:	0f9a      	lsrs	r2, r3, #30
 8010124:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	4313      	orrs	r3, r2
 801012c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8010130:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8010134:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010138:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 801013c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010144:	43d1      	mvns	r1, r2
 8010146:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 801014a:	43db      	mvns	r3, r3
 801014c:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8010150:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010158:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 801015c:	4011      	ands	r1, r2
 801015e:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 8010162:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 8010166:	400b      	ands	r3, r1
 8010168:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 801016c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010174:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 8010178:	4051      	eors	r1, r2
 801017a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 801017e:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 8010182:	404b      	eors	r3, r1
 8010184:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8010188:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 801018c:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8010190:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8010194:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019c:	43d1      	mvns	r1, r2
 801019e:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 80101a2:	43db      	mvns	r3, r3
 80101a4:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 80101a8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80101ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b0:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 80101b4:	4011      	ands	r1, r2
 80101b6:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 80101ba:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 80101be:	400b      	ands	r3, r1
 80101c0:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 80101c4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80101c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101cc:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 80101d0:	4051      	eors	r1, r2
 80101d2:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80101d6:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 80101da:	404b      	eors	r3, r1
 80101dc:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80101e0:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80101e4:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 80101e8:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 80101ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	43d1      	mvns	r1, r2
 80101f6:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 80101fa:	43db      	mvns	r3, r3
 80101fc:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8010200:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 801020c:	4011      	ands	r1, r2
 801020e:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 8010212:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 8010216:	400b      	ands	r3, r1
 8010218:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 801021c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010224:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 8010228:	4051      	eors	r1, r2
 801022a:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 801022e:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 8010232:	404b      	eors	r3, r1
 8010234:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8010238:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 801023c:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8010240:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8010244:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	43d1      	mvns	r1, r2
 801024e:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8010252:	43db      	mvns	r3, r3
 8010254:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8010258:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010260:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 8010264:	4011      	ands	r1, r2
 8010266:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 801026a:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 801026e:	400b      	ands	r3, r1
 8010270:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8010274:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027c:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 8010280:	4051      	eors	r1, r2
 8010282:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8010286:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 801028a:	404b      	eors	r3, r1
 801028c:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8010290:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8010294:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8010298:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 801029c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	43d1      	mvns	r1, r2
 80102a6:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 80102aa:	43db      	mvns	r3, r3
 80102ac:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 80102b0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 80102bc:	4011      	ands	r1, r2
 80102be:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 80102c2:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 80102c6:	400b      	ands	r3, r1
 80102c8:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80102cc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80102d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d4:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 80102d8:	4051      	eors	r1, r2
 80102da:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 80102de:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 80102e2:	404b      	eors	r3, r1
 80102e4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80102e8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80102ec:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80102f0:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 80102f4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80102f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102fc:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	ea80 0602 	eor.w	r6, r0, r2
 8010308:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 801030c:	404b      	eors	r3, r1
 801030e:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 8010312:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8010316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031a:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 801031e:	4051      	eors	r1, r2
 8010320:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 8010324:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 8010328:	404b      	eors	r3, r1
 801032a:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 801032e:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 801033a:	4051      	eors	r1, r2
 801033c:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 8010340:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 8010344:	404b      	eors	r3, r1
 8010346:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 801034a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8010356:	4051      	eors	r1, r2
 8010358:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 801035c:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 8010360:	404b      	eors	r3, r1
 8010362:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8010366:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801036a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801036e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8010372:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8010376:	e9d3 0100 	ldrd	r0, r1, [r3]
 801037a:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 801037e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010382:	ea80 0602 	eor.w	r6, r0, r2
 8010386:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 801038a:	404b      	eors	r3, r1
 801038c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8010390:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8010394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010398:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 801039c:	4051      	eors	r1, r2
 801039e:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 80103a2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80103a6:	404b      	eors	r3, r1
 80103a8:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 80103ac:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80103b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b4:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 80103b8:	4051      	eors	r1, r2
 80103ba:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 80103be:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80103c2:	404b      	eors	r3, r1
 80103c4:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 80103c8:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 80103d4:	4051      	eors	r1, r2
 80103d6:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 80103da:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 80103de:	404b      	eors	r3, r1
 80103e0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80103e4:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 80103e8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80103ec:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80103f0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80103f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103f8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80103fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010400:	ea80 0602 	eor.w	r6, r0, r2
 8010404:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 8010408:	404b      	eors	r3, r1
 801040a:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 801040e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8010412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010416:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 801041a:	4051      	eors	r1, r2
 801041c:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 8010420:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 8010424:	404b      	eors	r3, r1
 8010426:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 801042a:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 8010436:	4051      	eors	r1, r2
 8010438:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 801043c:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 8010440:	404b      	eors	r3, r1
 8010442:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8010446:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801044a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044e:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 8010452:	4051      	eors	r1, r2
 8010454:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8010458:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 801045c:	404b      	eors	r3, r1
 801045e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8010462:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8010466:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 801046a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 801046e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8010472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010476:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	ea80 0602 	eor.w	r6, r0, r2
 8010482:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 8010486:	404b      	eors	r3, r1
 8010488:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 801048c:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8010490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010494:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 8010498:	4051      	eors	r1, r2
 801049a:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 801049e:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 80104a2:	404b      	eors	r3, r1
 80104a4:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80104a8:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80104ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b0:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 80104b4:	4051      	eors	r1, r2
 80104b6:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 80104ba:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 80104be:	404b      	eors	r3, r1
 80104c0:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80104c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104cc:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 80104d0:	4051      	eors	r1, r2
 80104d2:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 80104d6:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 80104da:	404b      	eors	r3, r1
 80104dc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80104e0:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 80104e4:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80104e8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80104ec:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80104f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104f4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80104f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fc:	ea80 0602 	eor.w	r6, r0, r2
 8010500:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 8010504:	404b      	eors	r3, r1
 8010506:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 801050a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 8010516:	4051      	eors	r1, r2
 8010518:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 801051c:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 8010520:	404b      	eors	r3, r1
 8010522:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8010526:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 801052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052e:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 8010532:	4051      	eors	r1, r2
 8010534:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 8010538:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 801053c:	404b      	eors	r3, r1
 801053e:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8010542:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 801054e:	4051      	eors	r1, r2
 8010550:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8010554:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 8010558:	404b      	eors	r3, r1
 801055a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801055e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8010562:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010566:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 801056a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801056e:	0fda      	lsrs	r2, r3, #31
 8010570:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	4313      	orrs	r3, r2
 8010578:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 801057c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8010580:	0fda      	lsrs	r2, r3, #31
 8010582:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8010586:	005b      	lsls	r3, r3, #1
 8010588:	4313      	orrs	r3, r2
 801058a:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 801058e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010596:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 801059a:	4051      	eors	r1, r2
 801059c:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80105a0:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 80105a4:	404b      	eors	r3, r1
 80105a6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80105aa:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80105ae:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 80105b2:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 80105b6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80105ba:	0fda      	lsrs	r2, r3, #31
 80105bc:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80105c0:	005b      	lsls	r3, r3, #1
 80105c2:	4313      	orrs	r3, r2
 80105c4:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 80105c8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80105cc:	0fda      	lsrs	r2, r3, #31
 80105ce:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80105d2:	005b      	lsls	r3, r3, #1
 80105d4:	4313      	orrs	r3, r2
 80105d6:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 80105da:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e2:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 80105e6:	4051      	eors	r1, r2
 80105e8:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 80105ec:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 80105f0:	404b      	eors	r3, r1
 80105f2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80105f6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80105fa:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 80105fe:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8010602:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8010606:	0fda      	lsrs	r2, r3, #31
 8010608:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801060c:	005b      	lsls	r3, r3, #1
 801060e:	4313      	orrs	r3, r2
 8010610:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8010614:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8010618:	0fda      	lsrs	r2, r3, #31
 801061a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	4313      	orrs	r3, r2
 8010622:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8010626:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 8010632:	4051      	eors	r1, r2
 8010634:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8010638:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 801063c:	404b      	eors	r3, r1
 801063e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8010642:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8010646:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 801064a:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 801064e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8010652:	0fda      	lsrs	r2, r3, #31
 8010654:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010658:	005b      	lsls	r3, r3, #1
 801065a:	4313      	orrs	r3, r2
 801065c:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8010660:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010664:	0fda      	lsrs	r2, r3, #31
 8010666:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801066a:	005b      	lsls	r3, r3, #1
 801066c:	4313      	orrs	r3, r2
 801066e:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 8010672:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067a:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 801067e:	4051      	eors	r1, r2
 8010680:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8010684:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 8010688:	404b      	eors	r3, r1
 801068a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 801068e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8010692:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8010696:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 801069a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801069e:	0fda      	lsrs	r2, r3, #31
 80106a0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80106a4:	005b      	lsls	r3, r3, #1
 80106a6:	4313      	orrs	r3, r2
 80106a8:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 80106ac:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80106b0:	0fda      	lsrs	r2, r3, #31
 80106b2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80106b6:	005b      	lsls	r3, r3, #1
 80106b8:	4313      	orrs	r3, r2
 80106ba:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 80106be:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80106c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c6:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 80106ca:	4051      	eors	r1, r2
 80106cc:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 80106d0:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 80106d4:	404b      	eors	r3, r1
 80106d6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80106da:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80106de:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 80106e2:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 80106e6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80106ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80106ee:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	ea80 0602 	eor.w	r6, r0, r2
 80106fa:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 80106fe:	404b      	eors	r3, r1
 8010700:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8010704:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8010708:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 801070c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 8010710:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8010714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010718:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801071c:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 8010720:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8010724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010728:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 801072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010730:	ea80 0602 	eor.w	r6, r0, r2
 8010734:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 8010738:	404b      	eors	r3, r1
 801073a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801073e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8010742:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8010746:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 801074a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801074e:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8010752:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010756:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 801075a:	6803      	ldr	r3, [r0, #0]
 801075c:	031a      	lsls	r2, r3, #12
 801075e:	680b      	ldr	r3, [r1, #0]
 8010760:	0d1b      	lsrs	r3, r3, #20
 8010762:	4313      	orrs	r3, r2
 8010764:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8010768:	680b      	ldr	r3, [r1, #0]
 801076a:	031a      	lsls	r2, r3, #12
 801076c:	6803      	ldr	r3, [r0, #0]
 801076e:	0d1b      	lsrs	r3, r3, #20
 8010770:	4313      	orrs	r3, r2
 8010772:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8010776:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 801077a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801077e:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 8010782:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8010786:	e9d3 0100 	ldrd	r0, r1, [r3]
 801078a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	ea80 0602 	eor.w	r6, r0, r2
 8010796:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 801079a:	404b      	eors	r3, r1
 801079c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80107a0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80107a4:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80107a8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 80107ac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80107b0:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 80107b4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80107b8:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 80107bc:	6803      	ldr	r3, [r0, #0]
 80107be:	02da      	lsls	r2, r3, #11
 80107c0:	680b      	ldr	r3, [r1, #0]
 80107c2:	0d5b      	lsrs	r3, r3, #21
 80107c4:	4313      	orrs	r3, r2
 80107c6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80107ca:	680b      	ldr	r3, [r1, #0]
 80107cc:	02da      	lsls	r2, r3, #11
 80107ce:	6803      	ldr	r3, [r0, #0]
 80107d0:	0d5b      	lsrs	r3, r3, #21
 80107d2:	4313      	orrs	r3, r2
 80107d4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80107d8:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80107dc:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80107e0:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 80107e4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80107e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80107ec:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	ea80 0602 	eor.w	r6, r0, r2
 80107f8:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 80107fc:	404b      	eors	r3, r1
 80107fe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8010802:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8010806:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 801080a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 801080e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010812:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8010816:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801081a:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 801081e:	6803      	ldr	r3, [r0, #0]
 8010820:	0ada      	lsrs	r2, r3, #11
 8010822:	680b      	ldr	r3, [r1, #0]
 8010824:	055b      	lsls	r3, r3, #21
 8010826:	4313      	orrs	r3, r2
 8010828:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 801082c:	680b      	ldr	r3, [r1, #0]
 801082e:	0ada      	lsrs	r2, r3, #11
 8010830:	6803      	ldr	r3, [r0, #0]
 8010832:	055b      	lsls	r3, r3, #21
 8010834:	4313      	orrs	r3, r2
 8010836:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 801083a:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 801083e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010842:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8010846:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 801084a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801084e:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010856:	ea80 0602 	eor.w	r6, r0, r2
 801085a:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 801085e:	404b      	eors	r3, r1
 8010860:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8010864:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8010868:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 801086c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 8010870:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010874:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8010878:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801087c:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 8010880:	6803      	ldr	r3, [r0, #0]
 8010882:	0c9a      	lsrs	r2, r3, #18
 8010884:	680b      	ldr	r3, [r1, #0]
 8010886:	039b      	lsls	r3, r3, #14
 8010888:	4313      	orrs	r3, r2
 801088a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 801088e:	680b      	ldr	r3, [r1, #0]
 8010890:	0c9a      	lsrs	r2, r3, #18
 8010892:	6803      	ldr	r3, [r0, #0]
 8010894:	039b      	lsls	r3, r3, #14
 8010896:	4313      	orrs	r3, r2
 8010898:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 801089c:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80108a0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80108a4:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 80108a8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80108ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b0:	43d1      	mvns	r1, r2
 80108b2:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 80108b6:	43db      	mvns	r3, r3
 80108b8:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 80108bc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 80108c8:	4011      	ands	r1, r2
 80108ca:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 80108ce:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 80108d2:	400b      	ands	r3, r1
 80108d4:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 80108d8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80108dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e0:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 80108e4:	4051      	eors	r1, r2
 80108e6:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80108ea:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 80108ee:	404b      	eors	r3, r1
 80108f0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80108f4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 80108f8:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80108fc:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8010900:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8010904:	3301      	adds	r3, #1
 8010906:	4af4      	ldr	r2, [pc, #976]	; (8010cd8 <KeccakF1600_StatePermute+0x223c>)
 8010908:	00db      	lsls	r3, r3, #3
 801090a:	4413      	add	r3, r2
 801090c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010910:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8010914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010918:	ea82 0600 	eor.w	r6, r2, r0
 801091c:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 8010920:	404b      	eors	r3, r1
 8010922:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8010926:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 801092a:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 801092e:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8010932:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093a:	43d1      	mvns	r1, r2
 801093c:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 8010940:	43db      	mvns	r3, r3
 8010942:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8010946:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 8010952:	4011      	ands	r1, r2
 8010954:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 8010958:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 801095c:	400b      	ands	r3, r1
 801095e:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8010962:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096a:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 801096e:	4051      	eors	r1, r2
 8010970:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8010974:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 8010978:	404b      	eors	r3, r1
 801097a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801097e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8010982:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8010986:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 801098a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010992:	43d1      	mvns	r1, r2
 8010994:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 8010998:	43db      	mvns	r3, r3
 801099a:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 801099e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80109a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a6:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 80109aa:	4011      	ands	r1, r2
 80109ac:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 80109b0:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 80109b4:	400b      	ands	r3, r1
 80109b6:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 80109ba:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80109be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c2:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 80109c6:	4051      	eors	r1, r2
 80109c8:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 80109cc:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 80109d0:	404b      	eors	r3, r1
 80109d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80109d6:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80109da:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80109de:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 80109e2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ea:	43d1      	mvns	r1, r2
 80109ec:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 80109f0:	43db      	mvns	r3, r3
 80109f2:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 80109f6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80109fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fe:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 8010a02:	4011      	ands	r1, r2
 8010a04:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 8010a08:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 8010a0c:	400b      	ands	r3, r1
 8010a0e:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8010a12:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1a:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 8010a1e:	4051      	eors	r1, r2
 8010a20:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8010a24:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8010a28:	404b      	eors	r3, r1
 8010a2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8010a2e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8010a32:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8010a36:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8010a3a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a42:	43d1      	mvns	r1, r2
 8010a44:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8010a48:	43db      	mvns	r3, r3
 8010a4a:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8010a4e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 8010a5a:	4011      	ands	r1, r2
 8010a5c:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 8010a60:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 8010a64:	400b      	ands	r3, r1
 8010a66:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8010a6a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a72:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 8010a76:	4051      	eors	r1, r2
 8010a78:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8010a7c:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8010a80:	404b      	eors	r3, r1
 8010a82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8010a86:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8010a8a:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8010a8e:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8010a92:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8010a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a9a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	ea80 0602 	eor.w	r6, r0, r2
 8010aa6:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 8010aaa:	404b      	eors	r3, r1
 8010aac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8010ab0:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8010ab4:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8010ab8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8010abc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ac0:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8010ac4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ac8:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8010acc:	6803      	ldr	r3, [r0, #0]
 8010ace:	091a      	lsrs	r2, r3, #4
 8010ad0:	680b      	ldr	r3, [r1, #0]
 8010ad2:	071b      	lsls	r3, r3, #28
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8010ada:	680b      	ldr	r3, [r1, #0]
 8010adc:	091a      	lsrs	r2, r3, #4
 8010ade:	6803      	ldr	r3, [r0, #0]
 8010ae0:	071b      	lsls	r3, r3, #28
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8010ae8:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8010aec:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010af0:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8010af4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8010af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010afc:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b04:	ea80 0602 	eor.w	r6, r0, r2
 8010b08:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 8010b0c:	404b      	eors	r3, r1
 8010b0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8010b12:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8010b16:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8010b1a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8010b1e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b22:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8010b26:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b2a:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8010b2e:	6803      	ldr	r3, [r0, #0]
 8010b30:	0b1a      	lsrs	r2, r3, #12
 8010b32:	680b      	ldr	r3, [r1, #0]
 8010b34:	051b      	lsls	r3, r3, #20
 8010b36:	4313      	orrs	r3, r2
 8010b38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8010b3c:	680b      	ldr	r3, [r1, #0]
 8010b3e:	0b1a      	lsrs	r2, r3, #12
 8010b40:	6803      	ldr	r3, [r0, #0]
 8010b42:	051b      	lsls	r3, r3, #20
 8010b44:	4313      	orrs	r3, r2
 8010b46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8010b4a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8010b4e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010b52:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8010b56:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8010b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b5e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b66:	ea80 0602 	eor.w	r6, r0, r2
 8010b6a:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 8010b6e:	404b      	eors	r3, r1
 8010b70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010b74:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8010b78:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8010b7c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8010b80:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b84:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8010b88:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b8c:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8010b90:	6803      	ldr	r3, [r0, #0]
 8010b92:	0f5a      	lsrs	r2, r3, #29
 8010b94:	680b      	ldr	r3, [r1, #0]
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	4313      	orrs	r3, r2
 8010b9a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010b9e:	680b      	ldr	r3, [r1, #0]
 8010ba0:	0f5a      	lsrs	r2, r3, #29
 8010ba2:	6803      	ldr	r3, [r0, #0]
 8010ba4:	00db      	lsls	r3, r3, #3
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8010bac:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8010bb0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010bb4:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8010bb8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010bc0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	ea80 0602 	eor.w	r6, r0, r2
 8010bcc:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 8010bd0:	404b      	eors	r3, r1
 8010bd2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010bd6:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8010bda:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8010bde:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8010be2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010be6:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8010bea:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010bee:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8010bf2:	6803      	ldr	r3, [r0, #0]
 8010bf4:	035a      	lsls	r2, r3, #13
 8010bf6:	680b      	ldr	r3, [r1, #0]
 8010bf8:	0cdb      	lsrs	r3, r3, #19
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010c00:	680b      	ldr	r3, [r1, #0]
 8010c02:	035a      	lsls	r2, r3, #13
 8010c04:	6803      	ldr	r3, [r0, #0]
 8010c06:	0cdb      	lsrs	r3, r3, #19
 8010c08:	4313      	orrs	r3, r2
 8010c0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010c0e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8010c12:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010c16:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8010c1a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c22:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	ea80 0602 	eor.w	r6, r0, r2
 8010c2e:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 8010c32:	404b      	eors	r3, r1
 8010c34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010c38:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8010c3c:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8010c40:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8010c44:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010c48:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8010c4c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010c50:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8010c54:	6803      	ldr	r3, [r0, #0]
 8010c56:	075a      	lsls	r2, r3, #29
 8010c58:	680b      	ldr	r3, [r1, #0]
 8010c5a:	08db      	lsrs	r3, r3, #3
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8010c62:	680b      	ldr	r3, [r1, #0]
 8010c64:	075a      	lsls	r2, r3, #29
 8010c66:	6803      	ldr	r3, [r0, #0]
 8010c68:	08db      	lsrs	r3, r3, #3
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8010c70:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8010c74:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010c78:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8010c7c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	43d1      	mvns	r1, r2
 8010c86:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8010c8a:	43db      	mvns	r3, r3
 8010c8c:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8010c90:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c98:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 8010c9c:	4011      	ands	r1, r2
 8010c9e:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 8010ca2:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 8010ca6:	400b      	ands	r3, r1
 8010ca8:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8010cac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb4:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 8010cb8:	4051      	eors	r1, r2
 8010cba:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8010cbe:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 8010cc2:	404b      	eors	r3, r1
 8010cc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8010cc8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8010ccc:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8010cd0:	e9c1 2300 	strd	r2, r3, [r1]
 8010cd4:	e002      	b.n	8010cdc <KeccakF1600_StatePermute+0x2240>
 8010cd6:	bf00      	nop
 8010cd8:	080165f8 	.word	0x080165f8
            Age =   BCe ^((~BCi)&  BCo );
 8010cdc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	43d1      	mvns	r1, r2
 8010ce6:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8010cea:	43db      	mvns	r3, r3
 8010cec:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8010cf0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 8010cfc:	4011      	ands	r1, r2
 8010cfe:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 8010d02:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 8010d06:	400b      	ands	r3, r1
 8010d08:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8010d0c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d14:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 8010d18:	4051      	eors	r1, r2
 8010d1a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8010d1e:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 8010d22:	404b      	eors	r3, r1
 8010d24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010d28:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8010d2c:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8010d30:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8010d34:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3c:	43d1      	mvns	r1, r2
 8010d3e:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8010d42:	43db      	mvns	r3, r3
 8010d44:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8010d48:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d50:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8010d54:	4011      	ands	r1, r2
 8010d56:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 8010d5a:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8010d5e:	400b      	ands	r3, r1
 8010d60:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8010d64:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6c:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 8010d70:	4051      	eors	r1, r2
 8010d72:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8010d76:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 8010d7a:	404b      	eors	r3, r1
 8010d7c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010d80:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8010d84:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8010d88:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8010d8c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d94:	43d1      	mvns	r1, r2
 8010d96:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8010d9a:	43db      	mvns	r3, r3
 8010d9c:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8010da0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da8:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8010dac:	4011      	ands	r1, r2
 8010dae:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 8010db2:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 8010db6:	400b      	ands	r3, r1
 8010db8:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8010dbc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 8010dc8:	4051      	eors	r1, r2
 8010dca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8010dce:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 8010dd2:	404b      	eors	r3, r1
 8010dd4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010dd8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8010ddc:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8010de0:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8010de4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	43d1      	mvns	r1, r2
 8010dee:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8010df2:	43db      	mvns	r3, r3
 8010df4:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8010df8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e00:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 8010e04:	4011      	ands	r1, r2
 8010e06:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 8010e0a:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8010e0e:	400b      	ands	r3, r1
 8010e10:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8010e14:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 8010e20:	4051      	eors	r1, r2
 8010e22:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8010e26:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 8010e2a:	404b      	eors	r3, r1
 8010e2c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010e30:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8010e34:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8010e38:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8010e3c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8010e40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e44:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4c:	ea80 0602 	eor.w	r6, r0, r2
 8010e50:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8010e54:	404b      	eors	r3, r1
 8010e56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010e5a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8010e5e:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8010e62:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8010e66:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e6a:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8010e6e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e72:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8010e76:	6803      	ldr	r3, [r0, #0]
 8010e78:	0fda      	lsrs	r2, r3, #31
 8010e7a:	680b      	ldr	r3, [r1, #0]
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8010e84:	680b      	ldr	r3, [r1, #0]
 8010e86:	0fda      	lsrs	r2, r3, #31
 8010e88:	6803      	ldr	r3, [r0, #0]
 8010e8a:	005b      	lsls	r3, r3, #1
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8010e92:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8010e96:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010e9a:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8010e9e:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8010ea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ea6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eae:	ea80 0602 	eor.w	r6, r0, r2
 8010eb2:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8010eb6:	404b      	eors	r3, r1
 8010eb8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8010ebc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8010ec0:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8010ec4:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8010ec8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ecc:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8010ed0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ed4:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8010ed8:	6803      	ldr	r3, [r0, #0]
 8010eda:	0e9a      	lsrs	r2, r3, #26
 8010edc:	680b      	ldr	r3, [r1, #0]
 8010ede:	019b      	lsls	r3, r3, #6
 8010ee0:	4313      	orrs	r3, r2
 8010ee2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8010ee6:	680b      	ldr	r3, [r1, #0]
 8010ee8:	0e9a      	lsrs	r2, r3, #26
 8010eea:	6803      	ldr	r3, [r0, #0]
 8010eec:	019b      	lsls	r3, r3, #6
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8010ef4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8010ef8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010efc:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8010f00:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8010f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f08:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f10:	ea80 0602 	eor.w	r6, r0, r2
 8010f14:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8010f18:	404b      	eors	r3, r1
 8010f1a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8010f1e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8010f22:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8010f26:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8010f2a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f2e:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8010f32:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f36:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8010f3a:	6803      	ldr	r3, [r0, #0]
 8010f3c:	09da      	lsrs	r2, r3, #7
 8010f3e:	680b      	ldr	r3, [r1, #0]
 8010f40:	065b      	lsls	r3, r3, #25
 8010f42:	4313      	orrs	r3, r2
 8010f44:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8010f48:	680b      	ldr	r3, [r1, #0]
 8010f4a:	09da      	lsrs	r2, r3, #7
 8010f4c:	6803      	ldr	r3, [r0, #0]
 8010f4e:	065b      	lsls	r3, r3, #25
 8010f50:	4313      	orrs	r3, r2
 8010f52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8010f56:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8010f5a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010f5e:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8010f62:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8010f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f6a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	ea80 0602 	eor.w	r6, r0, r2
 8010f76:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8010f7a:	404b      	eors	r3, r1
 8010f7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8010f80:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8010f84:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8010f88:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8010f8c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f90:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8010f94:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f98:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 8010f9c:	6803      	ldr	r3, [r0, #0]
 8010f9e:	0e1a      	lsrs	r2, r3, #24
 8010fa0:	680b      	ldr	r3, [r1, #0]
 8010fa2:	021b      	lsls	r3, r3, #8
 8010fa4:	4313      	orrs	r3, r2
 8010fa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010faa:	680b      	ldr	r3, [r1, #0]
 8010fac:	0e1a      	lsrs	r2, r3, #24
 8010fae:	6803      	ldr	r3, [r0, #0]
 8010fb0:	021b      	lsls	r3, r3, #8
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8010fb8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8010fbc:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010fc0:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8010fc4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fcc:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd4:	ea80 0602 	eor.w	r6, r0, r2
 8010fd8:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8010fdc:	404b      	eors	r3, r1
 8010fde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010fe2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8010fe6:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8010fea:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8010fee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ff2:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8010ff6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ffa:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8010ffe:	6803      	ldr	r3, [r0, #0]
 8011000:	0b9a      	lsrs	r2, r3, #14
 8011002:	680b      	ldr	r3, [r1, #0]
 8011004:	049b      	lsls	r3, r3, #18
 8011006:	4313      	orrs	r3, r2
 8011008:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801100c:	680b      	ldr	r3, [r1, #0]
 801100e:	0b9a      	lsrs	r2, r3, #14
 8011010:	6803      	ldr	r3, [r0, #0]
 8011012:	049b      	lsls	r3, r3, #18
 8011014:	4313      	orrs	r3, r2
 8011016:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801101a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 801101e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8011022:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8011026:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102e:	43d1      	mvns	r1, r2
 8011030:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8011034:	43db      	mvns	r3, r3
 8011036:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 801103a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011042:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 8011046:	4011      	ands	r1, r2
 8011048:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 801104c:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 8011050:	400b      	ands	r3, r1
 8011052:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8011056:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105e:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 8011062:	4051      	eors	r1, r2
 8011064:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8011068:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 801106c:	404b      	eors	r3, r1
 801106e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011072:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8011076:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 801107a:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 801107e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	43d1      	mvns	r1, r2
 8011088:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 801108c:	43db      	mvns	r3, r3
 801108e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8011092:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109a:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 801109e:	4011      	ands	r1, r2
 80110a0:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 80110a4:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 80110a8:	400b      	ands	r3, r1
 80110aa:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 80110ae:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80110b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b6:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 80110ba:	4051      	eors	r1, r2
 80110bc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80110c0:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 80110c4:	404b      	eors	r3, r1
 80110c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80110ca:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80110ce:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80110d2:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 80110d6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80110da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110de:	43d1      	mvns	r1, r2
 80110e0:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 80110e4:	43db      	mvns	r3, r3
 80110e6:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 80110ea:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80110f6:	4011      	ands	r1, r2
 80110f8:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 80110fc:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 8011100:	400b      	ands	r3, r1
 8011102:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8011106:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 8011112:	4051      	eors	r1, r2
 8011114:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011118:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 801111c:	404b      	eors	r3, r1
 801111e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011122:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8011126:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 801112a:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 801112e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	43d1      	mvns	r1, r2
 8011138:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 801113c:	43db      	mvns	r3, r3
 801113e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8011142:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801114e:	4011      	ands	r1, r2
 8011150:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 8011154:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8011158:	400b      	ands	r3, r1
 801115a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 801115e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011166:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 801116a:	4051      	eors	r1, r2
 801116c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8011170:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 8011174:	404b      	eors	r3, r1
 8011176:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801117a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801117e:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8011182:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8011186:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118e:	43d1      	mvns	r1, r2
 8011190:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8011194:	43db      	mvns	r3, r3
 8011196:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 801119a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a2:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80111a6:	4011      	ands	r1, r2
 80111a8:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 80111ac:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80111b0:	400b      	ands	r3, r1
 80111b2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 80111b6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 80111c2:	4051      	eors	r1, r2
 80111c4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80111c8:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 80111cc:	404b      	eors	r3, r1
 80111ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80111d2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80111d6:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80111da:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 80111de:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80111e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111e6:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80111ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ee:	ea80 0602 	eor.w	r6, r0, r2
 80111f2:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 80111f6:	404b      	eors	r3, r1
 80111f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80111fc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8011200:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8011204:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8011208:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801120c:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8011210:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011214:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8011218:	6803      	ldr	r3, [r0, #0]
 801121a:	095a      	lsrs	r2, r3, #5
 801121c:	680b      	ldr	r3, [r1, #0]
 801121e:	06db      	lsls	r3, r3, #27
 8011220:	4313      	orrs	r3, r2
 8011222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011226:	680b      	ldr	r3, [r1, #0]
 8011228:	095a      	lsrs	r2, r3, #5
 801122a:	6803      	ldr	r3, [r0, #0]
 801122c:	06db      	lsls	r3, r3, #27
 801122e:	4313      	orrs	r3, r2
 8011230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011234:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8011238:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801123c:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8011240:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8011244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011248:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 801124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011250:	ea80 0602 	eor.w	r6, r0, r2
 8011254:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 8011258:	404b      	eors	r3, r1
 801125a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801125e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8011262:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8011266:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 801126a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801126e:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8011272:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011276:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 801127a:	6803      	ldr	r3, [r0, #0]
 801127c:	011a      	lsls	r2, r3, #4
 801127e:	680b      	ldr	r3, [r1, #0]
 8011280:	0f1b      	lsrs	r3, r3, #28
 8011282:	4313      	orrs	r3, r2
 8011284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011288:	680b      	ldr	r3, [r1, #0]
 801128a:	011a      	lsls	r2, r3, #4
 801128c:	6803      	ldr	r3, [r0, #0]
 801128e:	0f1b      	lsrs	r3, r3, #28
 8011290:	4313      	orrs	r3, r2
 8011292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011296:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801129a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801129e:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 80112a2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80112a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80112aa:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	ea80 0602 	eor.w	r6, r0, r2
 80112b6:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 80112ba:	404b      	eors	r3, r1
 80112bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80112c0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80112c4:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80112c8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 80112cc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112d0:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 80112d4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112d8:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 80112dc:	6803      	ldr	r3, [r0, #0]
 80112de:	0d9a      	lsrs	r2, r3, #22
 80112e0:	680b      	ldr	r3, [r1, #0]
 80112e2:	029b      	lsls	r3, r3, #10
 80112e4:	4313      	orrs	r3, r2
 80112e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80112ea:	680b      	ldr	r3, [r1, #0]
 80112ec:	0d9a      	lsrs	r2, r3, #22
 80112ee:	6803      	ldr	r3, [r0, #0]
 80112f0:	029b      	lsls	r3, r3, #10
 80112f2:	4313      	orrs	r3, r2
 80112f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80112f8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80112fc:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8011300:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 8011304:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8011308:	e9d3 0100 	ldrd	r0, r1, [r3]
 801130c:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8011310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011314:	ea80 0602 	eor.w	r6, r0, r2
 8011318:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 801131c:	404b      	eors	r3, r1
 801131e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011322:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011326:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 801132a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 801132e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011332:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 8011336:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801133a:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 801133e:	6803      	ldr	r3, [r0, #0]
 8011340:	0c5a      	lsrs	r2, r3, #17
 8011342:	680b      	ldr	r3, [r1, #0]
 8011344:	03db      	lsls	r3, r3, #15
 8011346:	4313      	orrs	r3, r2
 8011348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801134c:	680b      	ldr	r3, [r1, #0]
 801134e:	0c5a      	lsrs	r2, r3, #17
 8011350:	6803      	ldr	r3, [r0, #0]
 8011352:	03db      	lsls	r3, r3, #15
 8011354:	4313      	orrs	r3, r2
 8011356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801135a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801135e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8011362:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8011366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801136a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801136e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	ea80 0602 	eor.w	r6, r0, r2
 801137a:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 801137e:	404b      	eors	r3, r1
 8011380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011384:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011388:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 801138c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8011390:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011394:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8011398:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801139c:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 80113a0:	6803      	ldr	r3, [r0, #0]
 80113a2:	061a      	lsls	r2, r3, #24
 80113a4:	680b      	ldr	r3, [r1, #0]
 80113a6:	0a1b      	lsrs	r3, r3, #8
 80113a8:	4313      	orrs	r3, r2
 80113aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80113ae:	680b      	ldr	r3, [r1, #0]
 80113b0:	061a      	lsls	r2, r3, #24
 80113b2:	6803      	ldr	r3, [r0, #0]
 80113b4:	0a1b      	lsrs	r3, r3, #8
 80113b6:	4313      	orrs	r3, r2
 80113b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80113bc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80113c0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80113c4:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 80113c8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80113cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d0:	43d1      	mvns	r1, r2
 80113d2:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 80113d6:	43db      	mvns	r3, r3
 80113d8:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80113dc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80113e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e4:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 80113e8:	4011      	ands	r1, r2
 80113ea:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 80113ee:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 80113f2:	400b      	ands	r3, r1
 80113f4:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80113f8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80113fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011400:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011404:	4051      	eors	r1, r2
 8011406:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801140a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 801140e:	404b      	eors	r3, r1
 8011410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011414:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8011418:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 801141c:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 8011420:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011428:	43d1      	mvns	r1, r2
 801142a:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 801142e:	43db      	mvns	r3, r3
 8011430:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8011434:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8011440:	4011      	ands	r1, r2
 8011442:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 8011446:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801144a:	400b      	ands	r3, r1
 801144c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8011450:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011458:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801145c:	4051      	eors	r1, r2
 801145e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8011462:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8011466:	404b      	eors	r3, r1
 8011468:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801146c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011470:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8011474:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 8011478:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011480:	43d1      	mvns	r1, r2
 8011482:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8011486:	43db      	mvns	r3, r3
 8011488:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 801148c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011494:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8011498:	4011      	ands	r1, r2
 801149a:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 801149e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80114a2:	400b      	ands	r3, r1
 80114a4:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80114a8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80114ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b0:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80114b4:	4051      	eors	r1, r2
 80114b6:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80114ba:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80114be:	404b      	eors	r3, r1
 80114c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80114c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80114c8:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80114cc:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 80114d0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	43d1      	mvns	r1, r2
 80114da:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 80114de:	43db      	mvns	r3, r3
 80114e0:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80114e4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80114e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ec:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80114f0:	4011      	ands	r1, r2
 80114f2:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 80114f6:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 80114fa:	400b      	ands	r3, r1
 80114fc:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8011500:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011508:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 801150c:	4051      	eors	r1, r2
 801150e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011512:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8011516:	404b      	eors	r3, r1
 8011518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801151c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8011520:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8011524:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 8011528:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011530:	43d1      	mvns	r1, r2
 8011532:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8011536:	43db      	mvns	r3, r3
 8011538:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 801153c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011544:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8011548:	4011      	ands	r1, r2
 801154a:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 801154e:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8011552:	400b      	ands	r3, r1
 8011554:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8011558:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011560:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8011564:	4051      	eors	r1, r2
 8011566:	67b9      	str	r1, [r7, #120]	; 0x78
 8011568:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 801156c:	404b      	eors	r3, r1
 801156e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011570:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011574:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8011578:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 801157c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8011580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011584:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8011588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158c:	ea80 0602 	eor.w	r6, r0, r2
 8011590:	673e      	str	r6, [r7, #112]	; 0x70
 8011592:	404b      	eors	r3, r1
 8011594:	677b      	str	r3, [r7, #116]	; 0x74
 8011596:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801159a:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 801159e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80115a2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115a6:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80115aa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115ae:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 80115b2:	6803      	ldr	r3, [r0, #0]
 80115b4:	079a      	lsls	r2, r3, #30
 80115b6:	680b      	ldr	r3, [r1, #0]
 80115b8:	089b      	lsrs	r3, r3, #2
 80115ba:	4313      	orrs	r3, r2
 80115bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80115be:	680b      	ldr	r3, [r1, #0]
 80115c0:	079a      	lsls	r2, r3, #30
 80115c2:	6803      	ldr	r3, [r0, #0]
 80115c4:	089b      	lsrs	r3, r3, #2
 80115c6:	4313      	orrs	r3, r2
 80115c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80115ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80115ce:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80115d2:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80115d6:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80115da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115de:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80115e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e6:	ea80 0602 	eor.w	r6, r0, r2
 80115ea:	663e      	str	r6, [r7, #96]	; 0x60
 80115ec:	404b      	eors	r3, r1
 80115ee:	667b      	str	r3, [r7, #100]	; 0x64
 80115f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80115f4:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80115f8:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 80115fc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011600:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8011604:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011608:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 801160c:	6803      	ldr	r3, [r0, #0]
 801160e:	05da      	lsls	r2, r3, #23
 8011610:	680b      	ldr	r3, [r1, #0]
 8011612:	0a5b      	lsrs	r3, r3, #9
 8011614:	4313      	orrs	r3, r2
 8011616:	65bb      	str	r3, [r7, #88]	; 0x58
 8011618:	680b      	ldr	r3, [r1, #0]
 801161a:	05da      	lsls	r2, r3, #23
 801161c:	6803      	ldr	r3, [r0, #0]
 801161e:	0a5b      	lsrs	r3, r3, #9
 8011620:	4313      	orrs	r3, r2
 8011622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011624:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011628:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801162c:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8011630:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011638:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 801163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011640:	ea80 0602 	eor.w	r6, r0, r2
 8011644:	653e      	str	r6, [r7, #80]	; 0x50
 8011646:	404b      	eors	r3, r1
 8011648:	657b      	str	r3, [r7, #84]	; 0x54
 801164a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801164e:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8011652:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 8011656:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801165a:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 801165e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011662:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8011666:	6803      	ldr	r3, [r0, #0]
 8011668:	01da      	lsls	r2, r3, #7
 801166a:	680b      	ldr	r3, [r1, #0]
 801166c:	0e5b      	lsrs	r3, r3, #25
 801166e:	4313      	orrs	r3, r2
 8011670:	64bb      	str	r3, [r7, #72]	; 0x48
 8011672:	680b      	ldr	r3, [r1, #0]
 8011674:	01da      	lsls	r2, r3, #7
 8011676:	6803      	ldr	r3, [r0, #0]
 8011678:	0e5b      	lsrs	r3, r3, #25
 801167a:	4313      	orrs	r3, r2
 801167c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801167e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011682:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8011686:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 801168a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 801168e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011692:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8011696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169a:	ea80 0602 	eor.w	r6, r0, r2
 801169e:	643e      	str	r6, [r7, #64]	; 0x40
 80116a0:	404b      	eors	r3, r1
 80116a2:	647b      	str	r3, [r7, #68]	; 0x44
 80116a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80116a8:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 80116ac:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 80116b0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80116b4:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80116b8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80116bc:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80116c0:	6803      	ldr	r3, [r0, #0]
 80116c2:	025a      	lsls	r2, r3, #9
 80116c4:	680b      	ldr	r3, [r1, #0]
 80116c6:	0ddb      	lsrs	r3, r3, #23
 80116c8:	4313      	orrs	r3, r2
 80116ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80116cc:	680b      	ldr	r3, [r1, #0]
 80116ce:	025a      	lsls	r2, r3, #9
 80116d0:	6803      	ldr	r3, [r0, #0]
 80116d2:	0ddb      	lsrs	r3, r3, #23
 80116d4:	4313      	orrs	r3, r2
 80116d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80116d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80116dc:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80116e0:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 80116e4:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80116e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80116ec:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	ea80 0602 	eor.w	r6, r0, r2
 80116f8:	633e      	str	r6, [r7, #48]	; 0x30
 80116fa:	404b      	eors	r3, r1
 80116fc:	637b      	str	r3, [r7, #52]	; 0x34
 80116fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011702:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8011706:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 801170a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801170e:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8011712:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011716:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 801171a:	6803      	ldr	r3, [r0, #0]
 801171c:	0f9a      	lsrs	r2, r3, #30
 801171e:	680b      	ldr	r3, [r1, #0]
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	4313      	orrs	r3, r2
 8011724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011726:	680b      	ldr	r3, [r1, #0]
 8011728:	0f9a      	lsrs	r2, r3, #30
 801172a:	6803      	ldr	r3, [r0, #0]
 801172c:	009b      	lsls	r3, r3, #2
 801172e:	4313      	orrs	r3, r2
 8011730:	62bb      	str	r3, [r7, #40]	; 0x28
 8011732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011736:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 801173a:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 801173e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	43d1      	mvns	r1, r2
 8011748:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 801174c:	43db      	mvns	r3, r3
 801174e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8011752:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 801175e:	4011      	ands	r1, r2
 8011760:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 8011764:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8011768:	400b      	ands	r3, r1
 801176a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801176e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011776:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 801177a:	4051      	eors	r1, r2
 801177c:	6239      	str	r1, [r7, #32]
 801177e:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8011782:	404b      	eors	r3, r1
 8011784:	627b      	str	r3, [r7, #36]	; 0x24
 8011786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801178a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801178e:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 8011792:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179a:	43d1      	mvns	r1, r2
 801179c:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 80117a0:	43db      	mvns	r3, r3
 80117a2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 80117a6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80117aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ae:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 80117b2:	4011      	ands	r1, r2
 80117b4:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 80117b8:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 80117bc:	400b      	ands	r3, r1
 80117be:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80117c2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80117c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ca:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80117ce:	4051      	eors	r1, r2
 80117d0:	61b9      	str	r1, [r7, #24]
 80117d2:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80117d6:	404b      	eors	r3, r1
 80117d8:	61fb      	str	r3, [r7, #28]
 80117da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80117de:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 80117e2:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 80117e6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80117ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ee:	43d1      	mvns	r1, r2
 80117f0:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 80117f4:	43db      	mvns	r3, r3
 80117f6:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80117fa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80117fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011802:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8011806:	4011      	ands	r1, r2
 8011808:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 801180c:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8011810:	400b      	ands	r3, r1
 8011812:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8011816:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181e:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8011822:	4051      	eors	r1, r2
 8011824:	6139      	str	r1, [r7, #16]
 8011826:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 801182a:	404b      	eors	r3, r1
 801182c:	617b      	str	r3, [r7, #20]
 801182e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011832:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8011836:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 801183a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011842:	43d1      	mvns	r1, r2
 8011844:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8011848:	43db      	mvns	r3, r3
 801184a:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 801184e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011856:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 801185a:	ea01 0a02 	and.w	sl, r1, r2
 801185e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8011862:	ea01 0b03 	and.w	fp, r1, r3
 8011866:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186e:	ea82 010a 	eor.w	r1, r2, sl
 8011872:	60b9      	str	r1, [r7, #8]
 8011874:	ea83 030b 	eor.w	r3, r3, fp
 8011878:	60fb      	str	r3, [r7, #12]
 801187a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801187e:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8011882:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 8011886:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188e:	ea6f 0802 	mvn.w	r8, r2
 8011892:	ea6f 0903 	mvn.w	r9, r3
 8011896:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189e:	ea08 0402 	and.w	r4, r8, r2
 80118a2:	ea09 0503 	and.w	r5, r9, r3
 80118a6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80118aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ae:	ea82 0104 	eor.w	r1, r2, r4
 80118b2:	6039      	str	r1, [r7, #0]
 80118b4:	406b      	eors	r3, r5
 80118b6:	607b      	str	r3, [r7, #4]
 80118b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118bc:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80118c0:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 80118c4:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80118c8:	3302      	adds	r3, #2
 80118ca:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80118ce:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80118d2:	2b17      	cmp	r3, #23
 80118d4:	f77d aa04 	ble.w	800ece0 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80118d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118e0:	6819      	ldr	r1, [r3, #0]
 80118e2:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80118e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ea:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 80118ee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f103 0108 	add.w	r1, r3, #8
 80118fc:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8011908:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801190c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	f103 0110 	add.w	r1, r3, #16
 8011916:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 801191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 8011922:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011926:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f103 0118 	add.w	r1, r3, #24
 8011930:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8011934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011938:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 801193c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011940:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f103 0120 	add.w	r1, r3, #32
 801194a:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8011956:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801195a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8011964:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8011968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 8011970:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011974:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801197e:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8011982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011986:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 801198a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801198e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011998:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 80119a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80119b2:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80119b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ba:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 80119be:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80119cc:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80119d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d4:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 80119d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80119e6:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80119ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ee:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 80119f2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8011a00:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8011a0c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a10:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8011a1a:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8011a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a22:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8011a26:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8011a34:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8011a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3c:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8011a40:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8011a4e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8011a5a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8011a68:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8011a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a70:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8011a74:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a78:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8011a82:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8011a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8a:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8011a8e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a92:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8011a9c:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8011aa8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011aac:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8011ab6:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8011aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abe:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8011ac2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011ac6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8011ad0:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8011ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad8:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8011adc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011ae0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8011aea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af2:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8011af6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011afa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8011b04:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8011b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0c:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8011b10:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011b14:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8011b1e:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8011b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b26:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8011b2a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011b2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8011b38:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8011b44:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011b48:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8011b52:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8011b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011b5e:	bf00      	nop
 8011b60:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 8011b64:	46bd      	mov	sp, r7
 8011b66:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011b6a:	4770      	bx	lr

08011b6c <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b085      	sub	sp, #20
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8011b74:	2300      	movs	r3, #0
 8011b76:	60fb      	str	r3, [r7, #12]
 8011b78:	e00c      	b.n	8011b94 <keccak_init+0x28>
    state->s[i] = 0;
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	00db      	lsls	r3, r3, #3
 8011b80:	18d1      	adds	r1, r2, r3
 8011b82:	f04f 0200 	mov.w	r2, #0
 8011b86:	f04f 0300 	mov.w	r3, #0
 8011b8a:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	3301      	adds	r3, #1
 8011b92:	60fb      	str	r3, [r7, #12]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2b18      	cmp	r3, #24
 8011b98:	d9ef      	bls.n	8011b7a <keccak_init+0xe>
  state->pos = 0;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8011ba2:	bf00      	nop
 8011ba4:	3714      	adds	r7, #20
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr

08011bae <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8011bae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011bb2:	b08e      	sub	sp, #56	; 0x38
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6278      	str	r0, [r7, #36]	; 0x24
 8011bb8:	6239      	str	r1, [r7, #32]
 8011bba:	61fa      	str	r2, [r7, #28]
 8011bbc:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	f003 0307 	and.w	r3, r3, #7
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d03a      	beq.n	8011c46 <keccak_absorb+0x98>
    i = pos & 7;
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	f003 0307 	and.w	r3, r3, #7
 8011bd6:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 8011bd8:	e012      	b.n	8011c00 <keccak_absorb+0x52>
      t[i++] = *m++;
 8011bda:	69ba      	ldr	r2, [r7, #24]
 8011bdc:	1c53      	adds	r3, r2, #1
 8011bde:	61bb      	str	r3, [r7, #24]
 8011be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be2:	1c59      	adds	r1, r3, #1
 8011be4:	6379      	str	r1, [r7, #52]	; 0x34
 8011be6:	7812      	ldrb	r2, [r2, #0]
 8011be8:	3320      	adds	r3, #32
 8011bea:	f107 0118 	add.w	r1, r7, #24
 8011bee:	440b      	add	r3, r1
 8011bf0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 8011bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 8011c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c02:	2b07      	cmp	r3, #7
 8011c04:	d802      	bhi.n	8011c0c <keccak_absorb+0x5e>
 8011c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1e6      	bne.n	8011bda <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 8011c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7fc fed9 	bl	800e9c8 <load64>
 8011c16:	4604      	mov	r4, r0
 8011c18:	460d      	mov	r5, r1
 8011c1a:	69fa      	ldr	r2, [r7, #28]
 8011c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	f023 0307 	bic.w	r3, r3, #7
 8011c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c26:	4413      	add	r3, r2
 8011c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c2c:	69fa      	ldr	r2, [r7, #28]
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	f023 0207 	bic.w	r2, r3, #7
 8011c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c38:	4413      	add	r3, r2
 8011c3a:	ea84 0800 	eor.w	r8, r4, r0
 8011c3e:	ea85 0901 	eor.w	r9, r5, r1
 8011c42:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 8011c46:	69fb      	ldr	r3, [r7, #28]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d075      	beq.n	8011d38 <keccak_absorb+0x18a>
 8011c4c:	6a3a      	ldr	r2, [r7, #32]
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	1ad3      	subs	r3, r2, r3
 8011c52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d36f      	bcc.n	8011d38 <keccak_absorb+0x18a>
    for(i=0;i<(r-pos)/8;i++)
 8011c58:	2300      	movs	r3, #0
 8011c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8011c5c:	e023      	b.n	8011ca6 <keccak_absorb+0xf8>
      s[pos/8+i] ^= load64(m+8*i);
 8011c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c60:	00db      	lsls	r3, r3, #3
 8011c62:	69ba      	ldr	r2, [r7, #24]
 8011c64:	4413      	add	r3, r2
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fc feae 	bl	800e9c8 <load64>
 8011c6c:	4680      	mov	r8, r0
 8011c6e:	4689      	mov	r9, r1
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	08dc      	lsrs	r4, r3, #3
 8011c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c76:	4423      	add	r3, r4
 8011c78:	00db      	lsls	r3, r3, #3
 8011c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c7c:	4413      	add	r3, r2
 8011c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c84:	4423      	add	r3, r4
 8011c86:	00db      	lsls	r3, r3, #3
 8011c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c8a:	4413      	add	r3, r2
 8011c8c:	ea88 0200 	eor.w	r2, r8, r0
 8011c90:	613a      	str	r2, [r7, #16]
 8011c92:	ea89 0201 	eor.w	r2, r9, r1
 8011c96:	617a      	str	r2, [r7, #20]
 8011c98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011c9c:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 8011ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ca6:	6a3a      	ldr	r2, [r7, #32]
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	1ad3      	subs	r3, r2, r3
 8011cac:	08db      	lsrs	r3, r3, #3
 8011cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d3d4      	bcc.n	8011c5e <keccak_absorb+0xb0>
    m += r-pos;
 8011cb4:	6a3a      	ldr	r2, [r7, #32]
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	69ba      	ldr	r2, [r7, #24]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 8011cc0:	69fa      	ldr	r2, [r7, #28]
 8011cc2:	6a3b      	ldr	r3, [r7, #32]
 8011cc4:	1ad3      	subs	r3, r2, r3
 8011cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cc8:	4413      	add	r3, r2
 8011cca:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 8011cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cd2:	f7fc fee3 	bl	800ea9c <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 8011cd6:	e02f      	b.n	8011d38 <keccak_absorb+0x18a>
    for(i=0;i<r/8;i++)
 8011cd8:	2300      	movs	r3, #0
 8011cda:	637b      	str	r3, [r7, #52]	; 0x34
 8011cdc:	e01c      	b.n	8011d18 <keccak_absorb+0x16a>
      s[i] ^= load64(m+8*i);
 8011cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ce0:	00db      	lsls	r3, r3, #3
 8011ce2:	69ba      	ldr	r2, [r7, #24]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fc fe6e 	bl	800e9c8 <load64>
 8011cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cee:	00db      	lsls	r3, r3, #3
 8011cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cf2:	4413      	add	r3, r2
 8011cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf8:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8011cfa:	00e4      	lsls	r4, r4, #3
 8011cfc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011cfe:	442c      	add	r4, r5
 8011d00:	ea80 0502 	eor.w	r5, r0, r2
 8011d04:	60bd      	str	r5, [r7, #8]
 8011d06:	404b      	eors	r3, r1
 8011d08:	60fb      	str	r3, [r7, #12]
 8011d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011d0e:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 8011d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d14:	3301      	adds	r3, #1
 8011d16:	637b      	str	r3, [r7, #52]	; 0x34
 8011d18:	6a3b      	ldr	r3, [r7, #32]
 8011d1a:	08db      	lsrs	r3, r3, #3
 8011d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d3dd      	bcc.n	8011cde <keccak_absorb+0x130>
    m += r;
 8011d22:	69ba      	ldr	r2, [r7, #24]
 8011d24:	6a3b      	ldr	r3, [r7, #32]
 8011d26:	4413      	add	r3, r2
 8011d28:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 8011d2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 8011d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d34:	f7fc feb2 	bl	800ea9c <KeccakF1600_StatePermute>
  while(mlen >= r) {
 8011d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d3a:	6a3b      	ldr	r3, [r7, #32]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d2cb      	bcs.n	8011cd8 <keccak_absorb+0x12a>
  }

  for(i=0;i<mlen/8;i++)
 8011d40:	2300      	movs	r3, #0
 8011d42:	637b      	str	r3, [r7, #52]	; 0x34
 8011d44:	e020      	b.n	8011d88 <keccak_absorb+0x1da>
    s[pos/8+i] ^= load64(m+8*i);
 8011d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d48:	00db      	lsls	r3, r3, #3
 8011d4a:	69ba      	ldr	r2, [r7, #24]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fc fe3a 	bl	800e9c8 <load64>
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	08dc      	lsrs	r4, r3, #3
 8011d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d5a:	4423      	add	r3, r4
 8011d5c:	00db      	lsls	r3, r3, #3
 8011d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d60:	4413      	add	r3, r2
 8011d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d66:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8011d68:	442c      	add	r4, r5
 8011d6a:	00e4      	lsls	r4, r4, #3
 8011d6c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011d6e:	442c      	add	r4, r5
 8011d70:	ea80 0502 	eor.w	r5, r0, r2
 8011d74:	603d      	str	r5, [r7, #0]
 8011d76:	404b      	eors	r3, r1
 8011d78:	607b      	str	r3, [r7, #4]
 8011d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d7e:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 8011d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d84:	3301      	adds	r3, #1
 8011d86:	637b      	str	r3, [r7, #52]	; 0x34
 8011d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d8a:	08db      	lsrs	r3, r3, #3
 8011d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d3d9      	bcc.n	8011d46 <keccak_absorb+0x198>
  m += 8*i;
 8011d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d94:	00db      	lsls	r3, r3, #3
 8011d96:	69ba      	ldr	r2, [r7, #24]
 8011d98:	4413      	add	r3, r2
 8011d9a:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 8011d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d9e:	00db      	lsls	r3, r3, #3
 8011da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011da2:	1ad3      	subs	r3, r2, r3
 8011da4:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 8011da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011da8:	00db      	lsls	r3, r3, #3
 8011daa:	69fa      	ldr	r2, [r7, #28]
 8011dac:	4413      	add	r3, r2
 8011dae:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 8011db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d03d      	beq.n	8011e32 <keccak_absorb+0x284>
    for(i=0;i<8;i++)
 8011db6:	2300      	movs	r3, #0
 8011db8:	637b      	str	r3, [r7, #52]	; 0x34
 8011dba:	e008      	b.n	8011dce <keccak_absorb+0x220>
      t[i] = 0;
 8011dbc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dc2:	4413      	add	r3, r2
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 8011dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dca:	3301      	adds	r3, #1
 8011dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8011dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dd0:	2b07      	cmp	r3, #7
 8011dd2:	d9f3      	bls.n	8011dbc <keccak_absorb+0x20e>
    for(i=0;i<mlen;i++)
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8011dd8:	e00c      	b.n	8011df4 <keccak_absorb+0x246>
      t[i] = m[i];
 8011dda:	69ba      	ldr	r2, [r7, #24]
 8011ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dde:	4413      	add	r3, r2
 8011de0:	7819      	ldrb	r1, [r3, #0]
 8011de2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011de8:	4413      	add	r3, r2
 8011dea:	460a      	mov	r2, r1
 8011dec:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 8011dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df0:	3301      	adds	r3, #1
 8011df2:	637b      	str	r3, [r7, #52]	; 0x34
 8011df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d3ee      	bcc.n	8011dda <keccak_absorb+0x22c>
    s[pos/8] ^= load64(t);
 8011dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fc fde1 	bl	800e9c8 <load64>
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	f023 0307 	bic.w	r3, r3, #7
 8011e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e0e:	4413      	add	r3, r2
 8011e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e14:	69fc      	ldr	r4, [r7, #28]
 8011e16:	f024 0407 	bic.w	r4, r4, #7
 8011e1a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011e1c:	442c      	add	r4, r5
 8011e1e:	ea80 0a02 	eor.w	sl, r0, r2
 8011e22:	ea81 0b03 	eor.w	fp, r1, r3
 8011e26:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 8011e2a:	69fa      	ldr	r2, [r7, #28]
 8011e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e2e:	4413      	add	r3, r2
 8011e30:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 8011e32:	69fb      	ldr	r3, [r7, #28]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3738      	adds	r7, #56	; 0x38
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011e3e <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 8011e3e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011e42:	b088      	sub	sp, #32
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6178      	str	r0, [r7, #20]
 8011e48:	6139      	str	r1, [r7, #16]
 8011e4a:	60fa      	str	r2, [r7, #12]
 8011e4c:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	08db      	lsrs	r3, r3, #3
 8011e52:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f003 0307 	and.w	r3, r3, #7
 8011e5a:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	00db      	lsls	r3, r3, #3
 8011e60:	697a      	ldr	r2, [r7, #20]
 8011e62:	4413      	add	r3, r2
 8011e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011e68:	7afb      	ldrb	r3, [r7, #11]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	4698      	mov	r8, r3
 8011e6e:	4691      	mov	r9, r2
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	00db      	lsls	r3, r3, #3
 8011e74:	f1a3 0620 	sub.w	r6, r3, #32
 8011e78:	f1c3 0220 	rsb	r2, r3, #32
 8011e7c:	fa09 f503 	lsl.w	r5, r9, r3
 8011e80:	fa08 f606 	lsl.w	r6, r8, r6
 8011e84:	4335      	orrs	r5, r6
 8011e86:	fa28 f202 	lsr.w	r2, r8, r2
 8011e8a:	4315      	orrs	r5, r2
 8011e8c:	fa08 f403 	lsl.w	r4, r8, r3
 8011e90:	69fb      	ldr	r3, [r7, #28]
 8011e92:	00db      	lsls	r3, r3, #3
 8011e94:	697a      	ldr	r2, [r7, #20]
 8011e96:	4413      	add	r3, r2
 8011e98:	ea80 0a04 	eor.w	sl, r0, r4
 8011e9c:	ea81 0b05 	eor.w	fp, r1, r5
 8011ea0:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	f023 0307 	bic.w	r3, r3, #7
 8011eaa:	3b08      	subs	r3, #8
 8011eac:	697a      	ldr	r2, [r7, #20]
 8011eae:	4413      	add	r3, r2
 8011eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb4:	6939      	ldr	r1, [r7, #16]
 8011eb6:	f021 0107 	bic.w	r1, r1, #7
 8011eba:	3908      	subs	r1, #8
 8011ebc:	6978      	ldr	r0, [r7, #20]
 8011ebe:	4401      	add	r1, r0
 8011ec0:	603a      	str	r2, [r7, #0]
 8011ec2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011ec6:	607b      	str	r3, [r7, #4]
 8011ec8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011ecc:	e9c1 3400 	strd	r3, r4, [r1]
}
 8011ed0:	bf00      	nop
 8011ed2:	3720      	adds	r7, #32
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011eda:	4770      	bx	lr

08011edc <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	607a      	str	r2, [r7, #4]
 8011ee8:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 8011eea:	e021      	b.n	8011f30 <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7fc fdd5 	bl	800ea9c <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	617b      	str	r3, [r7, #20]
 8011ef6:	e00f      	b.n	8011f18 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	00db      	lsls	r3, r3, #3
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	18d1      	adds	r1, r2, r3
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	00db      	lsls	r3, r3, #3
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	4413      	add	r3, r2
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	4608      	mov	r0, r1
 8011f0e:	f7fc fd98 	bl	800ea42 <store64>
    for(i=0;i<r/8;i++)
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	3301      	adds	r3, #1
 8011f16:	617b      	str	r3, [r7, #20]
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	08db      	lsrs	r3, r3, #3
 8011f1c:	697a      	ldr	r2, [r7, #20]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d3ea      	bcc.n	8011ef8 <keccak_squeezeblocks+0x1c>
    out += r;
 8011f22:	68fa      	ldr	r2, [r7, #12]
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	4413      	add	r3, r2
 8011f28:	60fb      	str	r3, [r7, #12]
    nblocks--;
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1da      	bne.n	8011eec <keccak_squeezeblocks+0x10>
  }
}
 8011f36:	bf00      	nop
 8011f38:	bf00      	nop
 8011f3a:	3718      	adds	r7, #24
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int r,
                                   unsigned int pos)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b088      	sub	sp, #32
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
 8011f4c:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t t[8];

  if(pos & 7) {
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	f003 0307 	and.w	r3, r3, #7
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d027      	beq.n	8011fa8 <keccak_squeeze+0x68>
    store64(t,s[pos/8]);
 8011f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5a:	f023 0307 	bic.w	r3, r3, #7
 8011f5e:	687a      	ldr	r2, [r7, #4]
 8011f60:	4413      	add	r3, r2
 8011f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f66:	f107 0114 	add.w	r1, r7, #20
 8011f6a:	4608      	mov	r0, r1
 8011f6c:	f7fc fd69 	bl	800ea42 <store64>
    i = pos & 7;
 8011f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f72:	f003 0307 	and.w	r3, r3, #7
 8011f76:	61fb      	str	r3, [r7, #28]
    while(i < 8 && outlen > 0) {
 8011f78:	e010      	b.n	8011f9c <keccak_squeeze+0x5c>
      *out++ = t[i++];
 8011f7a:	69fa      	ldr	r2, [r7, #28]
 8011f7c:	1c53      	adds	r3, r2, #1
 8011f7e:	61fb      	str	r3, [r7, #28]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	1c59      	adds	r1, r3, #1
 8011f84:	60f9      	str	r1, [r7, #12]
 8011f86:	3220      	adds	r2, #32
 8011f88:	443a      	add	r2, r7
 8011f8a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8011f8e:	701a      	strb	r2, [r3, #0]
      outlen--;
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	3b01      	subs	r3, #1
 8011f94:	60bb      	str	r3, [r7, #8]
      pos++;
 8011f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f98:	3301      	adds	r3, #1
 8011f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    while(i < 8 && outlen > 0) {
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	2b07      	cmp	r3, #7
 8011fa0:	d802      	bhi.n	8011fa8 <keccak_squeeze+0x68>
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d1e8      	bne.n	8011f7a <keccak_squeeze+0x3a>
    }
  }

  if(pos && outlen >= r-pos) {
 8011fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d054      	beq.n	8012058 <keccak_squeeze+0x118>
 8011fae:	683a      	ldr	r2, [r7, #0]
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d34e      	bcc.n	8012058 <keccak_squeeze+0x118>
    for(i=0;i<(r-pos)/8;i++)
 8011fba:	2300      	movs	r3, #0
 8011fbc:	61fb      	str	r3, [r7, #28]
 8011fbe:	e012      	b.n	8011fe6 <keccak_squeeze+0xa6>
      store64(out+8*i,s[pos/8+i]);
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	68fa      	ldr	r2, [r7, #12]
 8011fc6:	18d1      	adds	r1, r2, r3
 8011fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fca:	08da      	lsrs	r2, r3, #3
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	4413      	add	r3, r2
 8011fd0:	00db      	lsls	r3, r3, #3
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fda:	4608      	mov	r0, r1
 8011fdc:	f7fc fd31 	bl	800ea42 <store64>
    for(i=0;i<(r-pos)/8;i++)
 8011fe0:	69fb      	ldr	r3, [r7, #28]
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	61fb      	str	r3, [r7, #28]
 8011fe6:	683a      	ldr	r2, [r7, #0]
 8011fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fea:	1ad3      	subs	r3, r2, r3
 8011fec:	08db      	lsrs	r3, r3, #3
 8011fee:	69fa      	ldr	r2, [r7, #28]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d3e5      	bcc.n	8011fc0 <keccak_squeeze+0x80>
    out += r-pos;
 8011ff4:	683a      	ldr	r2, [r7, #0]
 8011ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	4413      	add	r3, r2
 8011ffe:	60fb      	str	r3, [r7, #12]
    outlen -= r-pos;
 8012000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	68ba      	ldr	r2, [r7, #8]
 8012008:	4413      	add	r3, r2
 801200a:	60bb      	str	r3, [r7, #8]
    pos = 0;
 801200c:	2300      	movs	r3, #0
 801200e:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  while(outlen >= r) {
 8012010:	e022      	b.n	8012058 <keccak_squeeze+0x118>
    KeccakF1600_StatePermute(s);
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f7fc fd42 	bl	800ea9c <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8012018:	2300      	movs	r3, #0
 801201a:	61fb      	str	r3, [r7, #28]
 801201c:	e00f      	b.n	801203e <keccak_squeeze+0xfe>
      store64(out+8*i,s[i]);
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	00db      	lsls	r3, r3, #3
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	18d1      	adds	r1, r2, r3
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	00db      	lsls	r3, r3, #3
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	4413      	add	r3, r2
 801202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012032:	4608      	mov	r0, r1
 8012034:	f7fc fd05 	bl	800ea42 <store64>
    for(i=0;i<r/8;i++)
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	3301      	adds	r3, #1
 801203c:	61fb      	str	r3, [r7, #28]
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	08db      	lsrs	r3, r3, #3
 8012042:	69fa      	ldr	r2, [r7, #28]
 8012044:	429a      	cmp	r2, r3
 8012046:	d3ea      	bcc.n	801201e <keccak_squeeze+0xde>
    out += r;
 8012048:	68fa      	ldr	r2, [r7, #12]
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	4413      	add	r3, r2
 801204e:	60fb      	str	r3, [r7, #12]
    outlen -= r;
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	1ad3      	subs	r3, r2, r3
 8012056:	60bb      	str	r3, [r7, #8]
  while(outlen >= r) {
 8012058:	68ba      	ldr	r2, [r7, #8]
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	429a      	cmp	r2, r3
 801205e:	d2d8      	bcs.n	8012012 <keccak_squeeze+0xd2>
  }

  if(!outlen)
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <keccak_squeeze+0x12a>
    return pos;
 8012066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012068:	e053      	b.n	8012112 <keccak_squeeze+0x1d2>
  else if(!pos)
 801206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206c:	2b00      	cmp	r3, #0
 801206e:	d102      	bne.n	8012076 <keccak_squeeze+0x136>
    KeccakF1600_StatePermute(s);
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7fc fd13 	bl	800ea9c <KeccakF1600_StatePermute>

  for(i=0;i<outlen/8;i++)
 8012076:	2300      	movs	r3, #0
 8012078:	61fb      	str	r3, [r7, #28]
 801207a:	e012      	b.n	80120a2 <keccak_squeeze+0x162>
    store64(out+8*i,s[pos/8+i]);
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	00db      	lsls	r3, r3, #3
 8012080:	68fa      	ldr	r2, [r7, #12]
 8012082:	18d1      	adds	r1, r2, r3
 8012084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012086:	08da      	lsrs	r2, r3, #3
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	4413      	add	r3, r2
 801208c:	00db      	lsls	r3, r3, #3
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	4413      	add	r3, r2
 8012092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012096:	4608      	mov	r0, r1
 8012098:	f7fc fcd3 	bl	800ea42 <store64>
  for(i=0;i<outlen/8;i++)
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	3301      	adds	r3, #1
 80120a0:	61fb      	str	r3, [r7, #28]
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	08db      	lsrs	r3, r3, #3
 80120a6:	69fa      	ldr	r2, [r7, #28]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d3e7      	bcc.n	801207c <keccak_squeeze+0x13c>
  out += 8*i;
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	00db      	lsls	r3, r3, #3
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	4413      	add	r3, r2
 80120b4:	60fb      	str	r3, [r7, #12]
  outlen -= 8*i;
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	00db      	lsls	r3, r3, #3
 80120ba:	68ba      	ldr	r2, [r7, #8]
 80120bc:	1ad3      	subs	r3, r2, r3
 80120be:	60bb      	str	r3, [r7, #8]
  pos += 8*i;
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120c6:	4413      	add	r3, r2
 80120c8:	62bb      	str	r3, [r7, #40]	; 0x28

  store64(t,s[pos/8]);
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	f023 0307 	bic.w	r3, r3, #7
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	4413      	add	r3, r2
 80120d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d8:	f107 0114 	add.w	r1, r7, #20
 80120dc:	4608      	mov	r0, r1
 80120de:	f7fc fcb0 	bl	800ea42 <store64>
  for(i=0;i<outlen;i++)
 80120e2:	2300      	movs	r3, #0
 80120e4:	61fb      	str	r3, [r7, #28]
 80120e6:	e00b      	b.n	8012100 <keccak_squeeze+0x1c0>
    out[i] = t[i];
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	4413      	add	r3, r2
 80120ee:	f107 0114 	add.w	r1, r7, #20
 80120f2:	69fa      	ldr	r2, [r7, #28]
 80120f4:	440a      	add	r2, r1
 80120f6:	7812      	ldrb	r2, [r2, #0]
 80120f8:	701a      	strb	r2, [r3, #0]
  for(i=0;i<outlen;i++)
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	3301      	adds	r3, #1
 80120fe:	61fb      	str	r3, [r7, #28]
 8012100:	69fa      	ldr	r2, [r7, #28]
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	429a      	cmp	r2, r3
 8012106:	d3ef      	bcc.n	80120e8 <keccak_squeeze+0x1a8>
  pos += outlen;
 8012108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	4413      	add	r3, r2
 801210e:	62bb      	str	r3, [r7, #40]	; 0x28
  return pos;
 8012110:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8012112:	4618      	mov	r0, r3
 8012114:	3720      	adds	r7, #32
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b082      	sub	sp, #8
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f7ff fd22 	bl	8011b6c <keccak_init>
}
 8012128:	bf00      	nop
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b086      	sub	sp, #24
 8012134:	af02      	add	r7, sp, #8
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 801213c:	68f8      	ldr	r0, [r7, #12]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	2188      	movs	r1, #136	; 0x88
 801214c:	f7ff fd2f 	bl	8011bae <keccak_absorb>
 8012150:	4602      	mov	r2, r0
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012158:	bf00      	nop
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8012170:	231f      	movs	r3, #31
 8012172:	2188      	movs	r1, #136	; 0x88
 8012174:	f7ff fe63 	bl	8011e3e <keccak_finalize>
  state->pos = 0;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012180:	bf00      	nop
 8012182:	3708      	adds	r7, #8
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	2388      	movs	r3, #136	; 0x88
 8012198:	68b9      	ldr	r1, [r7, #8]
 801219a:	68f8      	ldr	r0, [r7, #12]
 801219c:	f7ff fe9e 	bl	8011edc <keccak_squeezeblocks>
}
 80121a0:	bf00      	nop
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <pqcrystals_fips202_ref_shake256_squeeze>:
*              - size_t outlen :  number of bytes to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b086      	sub	sp, #24
 80121ac:	af02      	add	r7, sp, #8
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	2388      	movs	r3, #136	; 0x88
 80121c0:	68b9      	ldr	r1, [r7, #8]
 80121c2:	68f8      	ldr	r0, [r7, #12]
 80121c4:	f7ff febc 	bl	8011f40 <keccak_squeeze>
 80121c8:	4602      	mov	r2, r0
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80121d0:	bf00      	nop
 80121d2:	3710      	adds	r7, #16
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <pqcrystals_fips202_ref_shake256>:
*              - size_t outlen:     requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen:      length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b0b8      	sub	sp, #224	; 0xe0
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	603b      	str	r3, [r7, #0]
  keccak_state state;

  shake256_init(&state);
 80121e6:	f107 0310 	add.w	r3, r7, #16
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7ff ff95 	bl	801211a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, in, inlen);
 80121f0:	f107 0310 	add.w	r3, r7, #16
 80121f4:	683a      	ldr	r2, [r7, #0]
 80121f6:	6879      	ldr	r1, [r7, #4]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7ff ff99 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80121fe:	f107 0310 	add.w	r3, r7, #16
 8012202:	4618      	mov	r0, r3
 8012204:	f7ff ffac 	bl	8012160 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(out, outlen, &state);
 8012208:	f107 0310 	add.w	r3, r7, #16
 801220c:	461a      	mov	r2, r3
 801220e:	68b9      	ldr	r1, [r7, #8]
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f7ff ffc9 	bl	80121a8 <pqcrystals_fips202_ref_shake256_squeeze>
}
 8012216:	bf00      	nop
 8012218:	37e0      	adds	r7, #224	; 0xe0
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
	...

08012220 <pqcrystals_dilithium2aes_r_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N_]) {
 8012220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012224:	b088      	sub	sp, #32
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int32_t zeta, t;

  k = 0;
 801222a:	2300      	movs	r3, #0
 801222c:	613b      	str	r3, [r7, #16]
  for(len = 128; len > 0; len >>= 1) {
 801222e:	2380      	movs	r3, #128	; 0x80
 8012230:	61fb      	str	r3, [r7, #28]
 8012232:	e056      	b.n	80122e2 <pqcrystals_dilithium2aes_r_ref_ntt+0xc2>
    for(start = 0; start < N_; start = j + len) {
 8012234:	2300      	movs	r3, #0
 8012236:	61bb      	str	r3, [r7, #24]
 8012238:	e04d      	b.n	80122d6 <pqcrystals_dilithium2aes_r_ref_ntt+0xb6>
      zeta = zetas[++k];
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	3301      	adds	r3, #1
 801223e:	613b      	str	r3, [r7, #16]
 8012240:	4a2c      	ldr	r2, [pc, #176]	; (80122f4 <pqcrystals_dilithium2aes_r_ref_ntt+0xd4>)
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012248:	60fb      	str	r3, [r7, #12]
      for(j = start; j < start + len; ++j) {
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	617b      	str	r3, [r7, #20]
 801224e:	e038      	b.n	80122c2 <pqcrystals_dilithium2aes_r_ref_ntt+0xa2>
        t = montgomery_reduce((int64_t)zeta * a[j + len]);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	17da      	asrs	r2, r3, #31
 8012254:	4698      	mov	r8, r3
 8012256:	4691      	mov	r9, r2
 8012258:	697a      	ldr	r2, [r7, #20]
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	4413      	add	r3, r2
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	4413      	add	r3, r2
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	17da      	asrs	r2, r3, #31
 8012268:	469a      	mov	sl, r3
 801226a:	4693      	mov	fp, r2
 801226c:	fb0a f209 	mul.w	r2, sl, r9
 8012270:	fb08 f30b 	mul.w	r3, r8, fp
 8012274:	4413      	add	r3, r2
 8012276:	fba8 450a 	umull	r4, r5, r8, sl
 801227a:	442b      	add	r3, r5
 801227c:	461d      	mov	r5, r3
 801227e:	4620      	mov	r0, r4
 8012280:	4629      	mov	r1, r5
 8012282:	f002 fe16 	bl	8014eb2 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012286:	60b8      	str	r0, [r7, #8]
        a[j + len] = a[j] - t;
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	4413      	add	r3, r2
 8012290:	6819      	ldr	r1, [r3, #0]
 8012292:	697a      	ldr	r2, [r7, #20]
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	4413      	add	r3, r2
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	4413      	add	r3, r2
 801229e:	68ba      	ldr	r2, [r7, #8]
 80122a0:	1a8a      	subs	r2, r1, r2
 80122a2:	601a      	str	r2, [r3, #0]
        a[j] = a[j] + t;
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	687a      	ldr	r2, [r7, #4]
 80122aa:	4413      	add	r3, r2
 80122ac:	6819      	ldr	r1, [r3, #0]
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	009b      	lsls	r3, r3, #2
 80122b2:	687a      	ldr	r2, [r7, #4]
 80122b4:	4413      	add	r3, r2
 80122b6:	68ba      	ldr	r2, [r7, #8]
 80122b8:	440a      	add	r2, r1
 80122ba:	601a      	str	r2, [r3, #0]
      for(j = start; j < start + len; ++j) {
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	3301      	adds	r3, #1
 80122c0:	617b      	str	r3, [r7, #20]
 80122c2:	69ba      	ldr	r2, [r7, #24]
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	4413      	add	r3, r2
 80122c8:	697a      	ldr	r2, [r7, #20]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d3c0      	bcc.n	8012250 <pqcrystals_dilithium2aes_r_ref_ntt+0x30>
    for(start = 0; start < N_; start = j + len) {
 80122ce:	697a      	ldr	r2, [r7, #20]
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	4413      	add	r3, r2
 80122d4:	61bb      	str	r3, [r7, #24]
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	2bff      	cmp	r3, #255	; 0xff
 80122da:	d9ae      	bls.n	801223a <pqcrystals_dilithium2aes_r_ref_ntt+0x1a>
  for(len = 128; len > 0; len >>= 1) {
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	085b      	lsrs	r3, r3, #1
 80122e0:	61fb      	str	r3, [r7, #28]
 80122e2:	69fb      	ldr	r3, [r7, #28]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d1a5      	bne.n	8012234 <pqcrystals_dilithium2aes_r_ref_ntt+0x14>
      }
    }
  }
}
 80122e8:	bf00      	nop
 80122ea:	bf00      	nop
 80122ec:	3720      	adds	r7, #32
 80122ee:	46bd      	mov	sp, r7
 80122f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122f4:	080166b8 	.word	0x080166b8

080122f8 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N_]) {
 80122f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122fc:	b091      	sub	sp, #68	; 0x44
 80122fe:	af00      	add	r7, sp, #0
 8012300:	61f8      	str	r0, [r7, #28]
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
 8012302:	f24a 33fa 	movw	r3, #41978	; 0xa3fa
 8012306:	62fb      	str	r3, [r7, #44]	; 0x2c

  k = 256;
 8012308:	f44f 7380 	mov.w	r3, #256	; 0x100
 801230c:	633b      	str	r3, [r7, #48]	; 0x30
  for(len = 1; len < N_; len <<= 1) {
 801230e:	2301      	movs	r3, #1
 8012310:	63bb      	str	r3, [r7, #56]	; 0x38
 8012312:	e072      	b.n	80123fa <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x102>
    for(start = 0; start < N_; start = j + len) {
 8012314:	2300      	movs	r3, #0
 8012316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012318:	e069      	b.n	80123ee <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xf6>
      zeta = -zetas[--k];
 801231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231c:	3b01      	subs	r3, #1
 801231e:	633b      	str	r3, [r7, #48]	; 0x30
 8012320:	4a51      	ldr	r2, [pc, #324]	; (8012468 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x170>)
 8012322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012328:	425b      	negs	r3, r3
 801232a:	62bb      	str	r3, [r7, #40]	; 0x28
      for(j = start; j < start + len; ++j) {
 801232c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801232e:	637b      	str	r3, [r7, #52]	; 0x34
 8012330:	e053      	b.n	80123da <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xe2>
        t = a[j];
 8012332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	69fa      	ldr	r2, [r7, #28]
 8012338:	4413      	add	r3, r2
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	627b      	str	r3, [r7, #36]	; 0x24
        a[j] = t + a[j + len];
 801233e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012342:	4413      	add	r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	69fa      	ldr	r2, [r7, #28]
 8012348:	4413      	add	r3, r2
 801234a:	6819      	ldr	r1, [r3, #0]
 801234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801234e:	009a      	lsls	r2, r3, #2
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	441a      	add	r2, r3
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	440b      	add	r3, r1
 8012358:	6013      	str	r3, [r2, #0]
        a[j + len] = t - a[j + len];
 801235a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235e:	4413      	add	r3, r2
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	69fa      	ldr	r2, [r7, #28]
 8012364:	4413      	add	r3, r2
 8012366:	6819      	ldr	r1, [r3, #0]
 8012368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236c:	4413      	add	r3, r2
 801236e:	009a      	lsls	r2, r3, #2
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	441a      	add	r2, r3
 8012374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012376:	1a5b      	subs	r3, r3, r1
 8012378:	6013      	str	r3, [r2, #0]
        a[j + len] = montgomery_reduce((int64_t)zeta * a[j + len]);
 801237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237c:	17da      	asrs	r2, r3, #31
 801237e:	613b      	str	r3, [r7, #16]
 8012380:	617a      	str	r2, [r7, #20]
 8012382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012386:	4413      	add	r3, r2
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	69fa      	ldr	r2, [r7, #28]
 801238c:	4413      	add	r3, r2
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	17da      	asrs	r2, r3, #31
 8012392:	60bb      	str	r3, [r7, #8]
 8012394:	60fa      	str	r2, [r7, #12]
 8012396:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801239a:	460b      	mov	r3, r1
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	fb02 f203 	mul.w	r2, r2, r3
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80123a8:	4601      	mov	r1, r0
 80123aa:	fb01 f303 	mul.w	r3, r1, r3
 80123ae:	4413      	add	r3, r2
 80123b0:	693a      	ldr	r2, [r7, #16]
 80123b2:	68b9      	ldr	r1, [r7, #8]
 80123b4:	fba2 ab01 	umull	sl, fp, r2, r1
 80123b8:	445b      	add	r3, fp
 80123ba:	469b      	mov	fp, r3
 80123bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c0:	4413      	add	r3, r2
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	69fa      	ldr	r2, [r7, #28]
 80123c6:	18d4      	adds	r4, r2, r3
 80123c8:	4650      	mov	r0, sl
 80123ca:	4659      	mov	r1, fp
 80123cc:	f002 fd71 	bl	8014eb2 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 80123d0:	4603      	mov	r3, r0
 80123d2:	6023      	str	r3, [r4, #0]
      for(j = start; j < start + len; ++j) {
 80123d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d6:	3301      	adds	r3, #1
 80123d8:	637b      	str	r3, [r7, #52]	; 0x34
 80123da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80123dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123de:	4413      	add	r3, r2
 80123e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d3a5      	bcc.n	8012332 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x3a>
    for(start = 0; start < N_; start = j + len) {
 80123e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ea:	4413      	add	r3, r2
 80123ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f0:	2bff      	cmp	r3, #255	; 0xff
 80123f2:	d992      	bls.n	801231a <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x22>
  for(len = 1; len < N_; len <<= 1) {
 80123f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80123fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fc:	2bff      	cmp	r3, #255	; 0xff
 80123fe:	d989      	bls.n	8012314 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x1c>
      }
    }
  }

  for(j = 0; j < N_; ++j) {
 8012400:	2300      	movs	r3, #0
 8012402:	637b      	str	r3, [r7, #52]	; 0x34
 8012404:	e026      	b.n	8012454 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x15c>
    a[j] = montgomery_reduce((int64_t)f * a[j]);
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	17da      	asrs	r2, r3, #31
 801240a:	461d      	mov	r5, r3
 801240c:	4616      	mov	r6, r2
 801240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012410:	009b      	lsls	r3, r3, #2
 8012412:	69fa      	ldr	r2, [r7, #28]
 8012414:	4413      	add	r3, r2
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	17da      	asrs	r2, r3, #31
 801241a:	603b      	str	r3, [r7, #0]
 801241c:	607a      	str	r2, [r7, #4]
 801241e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012422:	4603      	mov	r3, r0
 8012424:	fb03 f206 	mul.w	r2, r3, r6
 8012428:	460b      	mov	r3, r1
 801242a:	fb05 f303 	mul.w	r3, r5, r3
 801242e:	4413      	add	r3, r2
 8012430:	4602      	mov	r2, r0
 8012432:	fba5 8902 	umull	r8, r9, r5, r2
 8012436:	444b      	add	r3, r9
 8012438:	4699      	mov	r9, r3
 801243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801243c:	009b      	lsls	r3, r3, #2
 801243e:	69fa      	ldr	r2, [r7, #28]
 8012440:	18d4      	adds	r4, r2, r3
 8012442:	4640      	mov	r0, r8
 8012444:	4649      	mov	r1, r9
 8012446:	f002 fd34 	bl	8014eb2 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 801244a:	4603      	mov	r3, r0
 801244c:	6023      	str	r3, [r4, #0]
  for(j = 0; j < N_; ++j) {
 801244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012450:	3301      	adds	r3, #1
 8012452:	637b      	str	r3, [r7, #52]	; 0x34
 8012454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012456:	2bff      	cmp	r3, #255	; 0xff
 8012458:	d9d5      	bls.n	8012406 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x10e>
  }
}
 801245a:	bf00      	nop
 801245c:	bf00      	nop
 801245e:	3744      	adds	r7, #68	; 0x44
 8012460:	46bd      	mov	sp, r7
 8012462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012466:	bf00      	nop
 8012468:	080166b8 	.word	0x080166b8

0801246c <pqcrystals_dilithium2aes_r_ref_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b086      	sub	sp, #24
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012478:	2300      	movs	r3, #0
 801247a:	617b      	str	r3, [r7, #20]
 801247c:	e00a      	b.n	8012494 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x28>
    pk[i] = rho[i];
 801247e:	68ba      	ldr	r2, [r7, #8]
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	441a      	add	r2, r3
 8012484:	68f9      	ldr	r1, [r7, #12]
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	440b      	add	r3, r1
 801248a:	7812      	ldrb	r2, [r2, #0]
 801248c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	3301      	adds	r3, #1
 8012492:	617b      	str	r3, [r7, #20]
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	2b1f      	cmp	r3, #31
 8012498:	d9f1      	bls.n	801247e <pqcrystals_dilithium2aes_r_ref_pack_pk+0x12>
  pk += SEEDBYTES;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	3320      	adds	r3, #32
 801249e:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 80124a0:	2300      	movs	r3, #0
 80124a2:	617b      	str	r3, [r7, #20]
 80124a4:	e011      	b.n	80124ca <pqcrystals_dilithium2aes_r_ref_pack_pk+0x5e>
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 80124a6:	697a      	ldr	r2, [r7, #20]
 80124a8:	4613      	mov	r3, r2
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	4413      	add	r3, r2
 80124ae:	019b      	lsls	r3, r3, #6
 80124b0:	461a      	mov	r2, r3
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	1898      	adds	r0, r3, r2
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	029b      	lsls	r3, r3, #10
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	4413      	add	r3, r2
 80124be:	4619      	mov	r1, r3
 80124c0:	f000 ff1b 	bl	80132fa <pqcrystals_dilithium2aes_r_ref_polyt1_pack>
  for(i = 0; i < K; ++i)
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	3301      	adds	r3, #1
 80124c8:	617b      	str	r3, [r7, #20]
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	2b03      	cmp	r3, #3
 80124ce:	d9ea      	bls.n	80124a6 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x3a>
}
 80124d0:	bf00      	nop
 80124d2:	bf00      	nop
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <pqcrystals_dilithium2aes_r_ref_pack_sk_r>:
             const uint8_t rho[SEEDBYTES],
			 const uint8_t rhoprime[SEEDBYTES],
             const uint8_t tr[CRHBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0)
{
 80124da:	b580      	push	{r7, lr}
 80124dc:	b086      	sub	sp, #24
 80124de:	af00      	add	r7, sp, #0
 80124e0:	60f8      	str	r0, [r7, #12]
 80124e2:	60b9      	str	r1, [r7, #8]
 80124e4:	607a      	str	r2, [r7, #4]
 80124e6:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80124e8:	2300      	movs	r3, #0
 80124ea:	617b      	str	r3, [r7, #20]
 80124ec:	e00a      	b.n	8012504 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x2a>
    sk[i] = rho[i];
 80124ee:	68ba      	ldr	r2, [r7, #8]
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	441a      	add	r2, r3
 80124f4:	68f9      	ldr	r1, [r7, #12]
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	440b      	add	r3, r1
 80124fa:	7812      	ldrb	r2, [r2, #0]
 80124fc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	3301      	adds	r3, #1
 8012502:	617b      	str	r3, [r7, #20]
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	2b1f      	cmp	r3, #31
 8012508:	d9f1      	bls.n	80124ee <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x14>
  sk += SEEDBYTES;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	3320      	adds	r3, #32
 801250e:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 8012510:	2300      	movs	r3, #0
 8012512:	617b      	str	r3, [r7, #20]
 8012514:	e00a      	b.n	801252c <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x52>
    sk[i] = rhoprime[i];
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	441a      	add	r2, r3
 801251c:	68f9      	ldr	r1, [r7, #12]
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	440b      	add	r3, r1
 8012522:	7812      	ldrb	r2, [r2, #0]
 8012524:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	3301      	adds	r3, #1
 801252a:	617b      	str	r3, [r7, #20]
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	2b1f      	cmp	r3, #31
 8012530:	d9f1      	bls.n	8012516 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x3c>
  sk += SEEDBYTES;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	3320      	adds	r3, #32
 8012536:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 8012538:	2300      	movs	r3, #0
 801253a:	617b      	str	r3, [r7, #20]
 801253c:	e00a      	b.n	8012554 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x7a>
    sk[i] = key[i];
 801253e:	6a3a      	ldr	r2, [r7, #32]
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	441a      	add	r2, r3
 8012544:	68f9      	ldr	r1, [r7, #12]
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	440b      	add	r3, r1
 801254a:	7812      	ldrb	r2, [r2, #0]
 801254c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	3301      	adds	r3, #1
 8012552:	617b      	str	r3, [r7, #20]
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	2b1f      	cmp	r3, #31
 8012558:	d9f1      	bls.n	801253e <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x64>
  sk += SEEDBYTES;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	3320      	adds	r3, #32
 801255e:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < CRHBYTES; ++i)
 8012560:	2300      	movs	r3, #0
 8012562:	617b      	str	r3, [r7, #20]
 8012564:	e00a      	b.n	801257c <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xa2>
    sk[i] = tr[i];
 8012566:	683a      	ldr	r2, [r7, #0]
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	441a      	add	r2, r3
 801256c:	68f9      	ldr	r1, [r7, #12]
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	440b      	add	r3, r1
 8012572:	7812      	ldrb	r2, [r2, #0]
 8012574:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	3301      	adds	r3, #1
 801257a:	617b      	str	r3, [r7, #20]
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2b2f      	cmp	r3, #47	; 0x2f
 8012580:	d9f1      	bls.n	8012566 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x8c>
  sk += CRHBYTES;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	3330      	adds	r3, #48	; 0x30
 8012586:	60fb      	str	r3, [r7, #12]
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
  sk += K*POLYETA_PACKEDBYTES;
*/


  for(i = 0; i < K; ++i)
 8012588:	2300      	movs	r3, #0
 801258a:	617b      	str	r3, [r7, #20]
 801258c:	e010      	b.n	80125b0 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xd6>
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8012594:	fb02 f303 	mul.w	r3, r2, r3
 8012598:	68fa      	ldr	r2, [r7, #12]
 801259a:	18d0      	adds	r0, r2, r3
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	029b      	lsls	r3, r3, #10
 80125a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125a2:	4413      	add	r3, r2
 80125a4:	4619      	mov	r1, r3
 80125a6:	f000 ffb3 	bl	8013510 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>
  for(i = 0; i < K; ++i)
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	3301      	adds	r3, #1
 80125ae:	617b      	str	r3, [r7, #20]
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	2b03      	cmp	r3, #3
 80125b4:	d9eb      	bls.n	801258e <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xb4>
}
 80125b6:	bf00      	nop
 80125b8:	bf00      	nop
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r>:
			   uint8_t rhoprime[SEEDBYTES],
               uint8_t tr[CRHBYTES],
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b086      	sub	sp, #24
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
 80125cc:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80125ce:	2300      	movs	r3, #0
 80125d0:	617b      	str	r3, [r7, #20]
 80125d2:	e00a      	b.n	80125ea <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x2a>
    rho[i] = sk[i];
 80125d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	441a      	add	r2, r3
 80125da:	68f9      	ldr	r1, [r7, #12]
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	440b      	add	r3, r1
 80125e0:	7812      	ldrb	r2, [r2, #0]
 80125e2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	3301      	adds	r3, #1
 80125e8:	617b      	str	r3, [r7, #20]
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	2b1f      	cmp	r3, #31
 80125ee:	d9f1      	bls.n	80125d4 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x14>
  sk += SEEDBYTES;
 80125f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f2:	3320      	adds	r3, #32
 80125f4:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 80125f6:	2300      	movs	r3, #0
 80125f8:	617b      	str	r3, [r7, #20]
 80125fa:	e00a      	b.n	8012612 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x52>
    rhoprime[i] = sk[i];
 80125fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	441a      	add	r2, r3
 8012602:	68b9      	ldr	r1, [r7, #8]
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	440b      	add	r3, r1
 8012608:	7812      	ldrb	r2, [r2, #0]
 801260a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	3301      	adds	r3, #1
 8012610:	617b      	str	r3, [r7, #20]
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	2b1f      	cmp	r3, #31
 8012616:	d9f1      	bls.n	80125fc <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x3c>
  sk += SEEDBYTES;
 8012618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261a:	3320      	adds	r3, #32
 801261c:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 801261e:	2300      	movs	r3, #0
 8012620:	617b      	str	r3, [r7, #20]
 8012622:	e00a      	b.n	801263a <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x7a>
    key[i] = sk[i];
 8012624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	441a      	add	r2, r3
 801262a:	6839      	ldr	r1, [r7, #0]
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	440b      	add	r3, r1
 8012630:	7812      	ldrb	r2, [r2, #0]
 8012632:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	3301      	adds	r3, #1
 8012638:	617b      	str	r3, [r7, #20]
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	2b1f      	cmp	r3, #31
 801263e:	d9f1      	bls.n	8012624 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x64>
  sk += SEEDBYTES;
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	3320      	adds	r3, #32
 8012644:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < CRHBYTES; ++i)
 8012646:	2300      	movs	r3, #0
 8012648:	617b      	str	r3, [r7, #20]
 801264a:	e00a      	b.n	8012662 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xa2>
    tr[i] = sk[i];
 801264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	441a      	add	r2, r3
 8012652:	6879      	ldr	r1, [r7, #4]
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	440b      	add	r3, r1
 8012658:	7812      	ldrb	r2, [r2, #0]
 801265a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	3301      	adds	r3, #1
 8012660:	617b      	str	r3, [r7, #20]
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2b2f      	cmp	r3, #47	; 0x2f
 8012666:	d9f1      	bls.n	801264c <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x8c>
  sk += CRHBYTES;
 8012668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266a:	3330      	adds	r3, #48	; 0x30
 801266c:	627b      	str	r3, [r7, #36]	; 0x24

  for(i=0; i < K; ++i)
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
  sk += K*POLYETA_PACKEDBYTES;
*/
  for(i=0; i < K; ++i)
 801266e:	2300      	movs	r3, #0
 8012670:	617b      	str	r3, [r7, #20]
 8012672:	e010      	b.n	8012696 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xd6>
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	029b      	lsls	r3, r3, #10
 8012678:	6a3a      	ldr	r2, [r7, #32]
 801267a:	18d0      	adds	r0, r2, r3
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8012682:	fb02 f303 	mul.w	r3, r2, r3
 8012686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012688:	4413      	add	r3, r2
 801268a:	4619      	mov	r1, r3
 801268c:	f001 f901 	bl	8013892 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>
  for(i=0; i < K; ++i)
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	3301      	adds	r3, #1
 8012694:	617b      	str	r3, [r7, #20]
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	2b03      	cmp	r3, #3
 801269a:	d9eb      	bls.n	8012674 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xb4>
}
 801269c:	bf00      	nop
 801269e:	bf00      	nop
 80126a0:	3718      	adds	r7, #24
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <pqcrystals_dilithium2aes_r_ref_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b088      	sub	sp, #32
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	60f8      	str	r0, [r7, #12]
 80126ae:	60b9      	str	r1, [r7, #8]
 80126b0:	607a      	str	r2, [r7, #4]
 80126b2:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
 80126b4:	2300      	movs	r3, #0
 80126b6:	61fb      	str	r3, [r7, #28]
 80126b8:	e00a      	b.n	80126d0 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x2a>
    sig[i] = c[i];
 80126ba:	68ba      	ldr	r2, [r7, #8]
 80126bc:	69fb      	ldr	r3, [r7, #28]
 80126be:	441a      	add	r2, r3
 80126c0:	68f9      	ldr	r1, [r7, #12]
 80126c2:	69fb      	ldr	r3, [r7, #28]
 80126c4:	440b      	add	r3, r1
 80126c6:	7812      	ldrb	r2, [r2, #0]
 80126c8:	701a      	strb	r2, [r3, #0]
  for(i=0; i < SEEDBYTES; ++i)
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	3301      	adds	r3, #1
 80126ce:	61fb      	str	r3, [r7, #28]
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	2b1f      	cmp	r3, #31
 80126d4:	d9f1      	bls.n	80126ba <pqcrystals_dilithium2aes_r_ref_pack_sig+0x14>
  sig += SEEDBYTES;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	3320      	adds	r3, #32
 80126da:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 80126dc:	2300      	movs	r3, #0
 80126de:	61fb      	str	r3, [r7, #28]
 80126e0:	e011      	b.n	8012706 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x60>
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 80126e2:	69fa      	ldr	r2, [r7, #28]
 80126e4:	4613      	mov	r3, r2
 80126e6:	00db      	lsls	r3, r3, #3
 80126e8:	4413      	add	r3, r2
 80126ea:	019b      	lsls	r3, r3, #6
 80126ec:	461a      	mov	r2, r3
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	1898      	adds	r0, r3, r2
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	029b      	lsls	r3, r3, #10
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	4413      	add	r3, r2
 80126fa:	4619      	mov	r1, r3
 80126fc:	f001 fb71 	bl	8013de2 <pqcrystals_dilithium2aes_r_ref_polyz_pack>
  for(i = 0; i < L; ++i)
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	3301      	adds	r3, #1
 8012704:	61fb      	str	r3, [r7, #28]
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	2b03      	cmp	r3, #3
 801270a:	d9ea      	bls.n	80126e2 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012712:	60fb      	str	r3, [r7, #12]

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
 8012714:	2300      	movs	r3, #0
 8012716:	61fb      	str	r3, [r7, #28]
 8012718:	e007      	b.n	801272a <pqcrystals_dilithium2aes_r_ref_pack_sig+0x84>
    sig[i] = 0;
 801271a:	68fa      	ldr	r2, [r7, #12]
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	4413      	add	r3, r2
 8012720:	2200      	movs	r2, #0
 8012722:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < OMEGA + K; ++i)
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	3301      	adds	r3, #1
 8012728:	61fb      	str	r3, [r7, #28]
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	2b53      	cmp	r3, #83	; 0x53
 801272e:	d9f4      	bls.n	801271a <pqcrystals_dilithium2aes_r_ref_pack_sig+0x74>

  k = 0;
 8012730:	2300      	movs	r3, #0
 8012732:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 8012734:	2300      	movs	r3, #0
 8012736:	61fb      	str	r3, [r7, #28]
 8012738:	e023      	b.n	8012782 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xdc>
    for(j = 0; j < N_; ++j)
 801273a:	2300      	movs	r3, #0
 801273c:	61bb      	str	r3, [r7, #24]
 801273e:	e013      	b.n	8012768 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xc2>
      if(h->vec[i].coeffs[j] != 0)
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	69fa      	ldr	r2, [r7, #28]
 8012744:	0211      	lsls	r1, r2, #8
 8012746:	69ba      	ldr	r2, [r7, #24]
 8012748:	440a      	add	r2, r1
 801274a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d007      	beq.n	8012762 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xbc>
        sig[k++] = j;
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	1c5a      	adds	r2, r3, #1
 8012756:	617a      	str	r2, [r7, #20]
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	4413      	add	r3, r2
 801275c:	69ba      	ldr	r2, [r7, #24]
 801275e:	b2d2      	uxtb	r2, r2
 8012760:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < N_; ++j)
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	3301      	adds	r3, #1
 8012766:	61bb      	str	r3, [r7, #24]
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	2bff      	cmp	r3, #255	; 0xff
 801276c:	d9e8      	bls.n	8012740 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x9a>

    sig[OMEGA + i] = k;
 801276e:	69fb      	ldr	r3, [r7, #28]
 8012770:	3350      	adds	r3, #80	; 0x50
 8012772:	68fa      	ldr	r2, [r7, #12]
 8012774:	4413      	add	r3, r2
 8012776:	697a      	ldr	r2, [r7, #20]
 8012778:	b2d2      	uxtb	r2, r2
 801277a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < K; ++i) {
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	3301      	adds	r3, #1
 8012780:	61fb      	str	r3, [r7, #28]
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	2b03      	cmp	r3, #3
 8012786:	d9d8      	bls.n	801273a <pqcrystals_dilithium2aes_r_ref_pack_sig+0x94>
  }
}
 8012788:	bf00      	nop
 801278a:	bf00      	nop
 801278c:	3720      	adds	r7, #32
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}

08012792 <verify_sig_h_malform>:
*              return 0 if signature is ok
*              return 1 if an error found
*
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
static int verify_sig_h_malform(uint8_t h_buf[N_*K], const uint8_t sig[CRYPTO_BYTES]){
 8012792:	b480      	push	{r7}
 8012794:	b087      	sub	sp, #28
 8012796:	af00      	add	r7, sp, #0
 8012798:	6078      	str	r0, [r7, #4]
 801279a:	6039      	str	r1, [r7, #0]
    uint8_t* sig_ptr = sig + SEEDBYTES + L * POLYZ_PACKEDBYTES;
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80127a2:	60bb      	str	r3, [r7, #8]
    /* Decode h */
    unsigned int i, j, k = 0;
 80127a4:	2300      	movs	r3, #0
 80127a6:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < K; ++i) {
 80127a8:	2300      	movs	r3, #0
 80127aa:	617b      	str	r3, [r7, #20]
 80127ac:	e045      	b.n	801283a <verify_sig_h_malform+0xa8>

        //for(j = 0; j < N_; ++j)
        //  h_buf[i*N_+j] = 0;

        if (sig_ptr[OMEGA + i] < k || sig_ptr[OMEGA + i] > OMEGA)
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	3350      	adds	r3, #80	; 0x50
 80127b2:	68ba      	ldr	r2, [r7, #8]
 80127b4:	4413      	add	r3, r2
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	461a      	mov	r2, r3
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	4293      	cmp	r3, r2
 80127be:	d806      	bhi.n	80127ce <verify_sig_h_malform+0x3c>
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	3350      	adds	r3, #80	; 0x50
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	4413      	add	r3, r2
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	2b50      	cmp	r3, #80	; 0x50
 80127cc:	d901      	bls.n	80127d2 <verify_sig_h_malform+0x40>
            return 3;
 80127ce:	2303      	movs	r3, #3
 80127d0:	e048      	b.n	8012864 <verify_sig_h_malform+0xd2>

        for (j = k; j < sig_ptr[OMEGA + i]; ++j) {
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	613b      	str	r3, [r7, #16]
 80127d6:	e01e      	b.n	8012816 <verify_sig_h_malform+0x84>
            /* Coefficients are ordered for strong unforgeability */
            if (j > k && sig_ptr[j] <= sig_ptr[j - 1])
 80127d8:	693a      	ldr	r2, [r7, #16]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d90c      	bls.n	80127fa <verify_sig_h_malform+0x68>
 80127e0:	68ba      	ldr	r2, [r7, #8]
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	4413      	add	r3, r2
 80127e6:	781a      	ldrb	r2, [r3, #0]
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	3b01      	subs	r3, #1
 80127ec:	68b9      	ldr	r1, [r7, #8]
 80127ee:	440b      	add	r3, r1
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d801      	bhi.n	80127fa <verify_sig_h_malform+0x68>
                return 4;
 80127f6:	2304      	movs	r3, #4
 80127f8:	e034      	b.n	8012864 <verify_sig_h_malform+0xd2>
            h_buf[i * N_ + sig_ptr[j]] = 1;
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	021b      	lsls	r3, r3, #8
 80127fe:	68b9      	ldr	r1, [r7, #8]
 8012800:	693a      	ldr	r2, [r7, #16]
 8012802:	440a      	add	r2, r1
 8012804:	7812      	ldrb	r2, [r2, #0]
 8012806:	4413      	add	r3, r2
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	4413      	add	r3, r2
 801280c:	2201      	movs	r2, #1
 801280e:	701a      	strb	r2, [r3, #0]
        for (j = k; j < sig_ptr[OMEGA + i]; ++j) {
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	3301      	adds	r3, #1
 8012814:	613b      	str	r3, [r7, #16]
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	3350      	adds	r3, #80	; 0x50
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	4413      	add	r3, r2
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	461a      	mov	r2, r3
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	4293      	cmp	r3, r2
 8012826:	d3d7      	bcc.n	80127d8 <verify_sig_h_malform+0x46>
        }

        k = sig_ptr[OMEGA + i];
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	3350      	adds	r3, #80	; 0x50
 801282c:	68ba      	ldr	r2, [r7, #8]
 801282e:	4413      	add	r3, r2
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < K; ++i) {
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	3301      	adds	r3, #1
 8012838:	617b      	str	r3, [r7, #20]
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2b03      	cmp	r3, #3
 801283e:	d9b6      	bls.n	80127ae <verify_sig_h_malform+0x1c>
    }

    /* Extra indices are zero for strong unforgeability */
    for (j = k; j < OMEGA; ++j)
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	613b      	str	r3, [r7, #16]
 8012844:	e00a      	b.n	801285c <verify_sig_h_malform+0xca>
        if (sig_ptr[j])
 8012846:	68ba      	ldr	r2, [r7, #8]
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	4413      	add	r3, r2
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d001      	beq.n	8012856 <verify_sig_h_malform+0xc4>
            return 5;
 8012852:	2305      	movs	r3, #5
 8012854:	e006      	b.n	8012864 <verify_sig_h_malform+0xd2>
    for (j = k; j < OMEGA; ++j)
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	3301      	adds	r3, #1
 801285a:	613b      	str	r3, [r7, #16]
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	2b4f      	cmp	r3, #79	; 0x4f
 8012860:	d9f1      	bls.n	8012846 <verify_sig_h_malform+0xb4>

    return 0;
 8012862:	2300      	movs	r3, #0
}
 8012864:	4618      	mov	r0, r3
 8012866:	371c      	adds	r7, #28
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr

08012870 <verify_sig_z_h_malform>:
*              return 0 if signature is ok
*              return 1 if an error found
*
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
int verify_sig_z_h_malform(uint8_t h_buf[N_*K], const uint8_t sig[CRYPTO_BYTES]){
 8012870:	b580      	push	{r7, lr}
 8012872:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8012876:	af00      	add	r7, sp, #0
 8012878:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801287c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8012880:	6018      	str	r0, [r3, #0]
 8012882:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012886:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801288a:	6019      	str	r1, [r3, #0]
	uint8_t *sig_ptr = sig + SEEDBYTES;// + L*POLYZ_PACKEDBYTES;
 801288c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012890:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	3320      	adds	r3, #32
 8012898:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	unsigned int i = 0;
 801289c:	2300      	movs	r3, #0
 801289e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	poly z_i;
	for(i = 0; i < L; ++i){
 80128a2:	2300      	movs	r3, #0
 80128a4:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80128a8:	e01f      	b.n	80128ea <verify_sig_z_h_malform+0x7a>
	    polyz_unpack(&z_i, sig_ptr + i*POLYZ_PACKEDBYTES);
 80128aa:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 80128ae:	4613      	mov	r3, r2
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	4413      	add	r3, r2
 80128b4:	019b      	lsls	r3, r3, #6
 80128b6:	461a      	mov	r2, r3
 80128b8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80128bc:	441a      	add	r2, r3
 80128be:	f107 0308 	add.w	r3, r7, #8
 80128c2:	4611      	mov	r1, r2
 80128c4:	4618      	mov	r0, r3
 80128c6:	f001 fb6b 	bl	8013fa0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
		if(poly_chknorm(&z_i, GAMMA1 - BETA))
 80128ca:	f107 0308 	add.w	r3, r7, #8
 80128ce:	4912      	ldr	r1, [pc, #72]	; (8012918 <verify_sig_z_h_malform+0xa8>)
 80128d0:	4618      	mov	r0, r3
 80128d2:	f000 fa11 	bl	8012cf8 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d001      	beq.n	80128e0 <verify_sig_z_h_malform+0x70>
	      return 2;
 80128dc:	2302      	movs	r3, #2
 80128de:	e015      	b.n	801290c <verify_sig_z_h_malform+0x9c>
	for(i = 0; i < L; ++i){
 80128e0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80128e4:	3301      	adds	r3, #1
 80128e6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80128ea:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80128ee:	2b03      	cmp	r3, #3
 80128f0:	d9db      	bls.n	80128aa <verify_sig_z_h_malform+0x3a>
	}
	/* Decode h */
	return verify_sig_h_malform(h_buf, sig);
 80128f2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80128f6:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 80128fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80128fe:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8012902:	6811      	ldr	r1, [r2, #0]
 8012904:	6818      	ldr	r0, [r3, #0]
 8012906:	f7ff ff44 	bl	8012792 <verify_sig_h_malform>
 801290a:	4603      	mov	r3, r0
}
 801290c:	4618      	mov	r0, r3
 801290e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	0001ffb2 	.word	0x0001ffb2

0801291c <unpack_sig_c>:


void unpack_sig_c(uint8_t c[SEEDBYTES], const uint8_t sig[CRYPTO_BYTES]){
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
    unsigned int i;
	for(i = 0; i < SEEDBYTES; ++i)
 8012926:	2300      	movs	r3, #0
 8012928:	60fb      	str	r3, [r7, #12]
 801292a:	e00a      	b.n	8012942 <unpack_sig_c+0x26>
	  c[i] = sig[i];
 801292c:	683a      	ldr	r2, [r7, #0]
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	441a      	add	r2, r3
 8012932:	6879      	ldr	r1, [r7, #4]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	440b      	add	r3, r1
 8012938:	7812      	ldrb	r2, [r2, #0]
 801293a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SEEDBYTES; ++i)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	3301      	adds	r3, #1
 8012940:	60fb      	str	r3, [r7, #12]
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2b1f      	cmp	r3, #31
 8012946:	d9f1      	bls.n	801292c <unpack_sig_c+0x10>
}
 8012948:	bf00      	nop
 801294a:	bf00      	nop
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr

08012956 <unpack_sig_z>:

void unpack_sig_z(poly *z_i, uint32_t i, const uint8_t sig[CRYPTO_BYTES]){
 8012956:	b580      	push	{r7, lr}
 8012958:	b084      	sub	sp, #16
 801295a:	af00      	add	r7, sp, #0
 801295c:	60f8      	str	r0, [r7, #12]
 801295e:	60b9      	str	r1, [r7, #8]
 8012960:	607a      	str	r2, [r7, #4]
	polyz_unpack(z_i, sig + SEEDBYTES + i*POLYZ_PACKEDBYTES);
 8012962:	68ba      	ldr	r2, [r7, #8]
 8012964:	4613      	mov	r3, r2
 8012966:	00db      	lsls	r3, r3, #3
 8012968:	4413      	add	r3, r2
 801296a:	019b      	lsls	r3, r3, #6
 801296c:	3320      	adds	r3, #32
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	4413      	add	r3, r2
 8012972:	4619      	mov	r1, r3
 8012974:	68f8      	ldr	r0, [r7, #12]
 8012976:	f001 fb13 	bl	8013fa0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
}
 801297a:	bf00      	nop
 801297c:	3710      	adds	r7, #16
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}

08012982 <unpack_pk_rho>:

void unpack_pk_rho(uint8_t rho[SEEDBYTES],
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 8012982:	b480      	push	{r7}
 8012984:	b085      	sub	sp, #20
 8012986:	af00      	add	r7, sp, #0
 8012988:	6078      	str	r0, [r7, #4]
 801298a:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 801298c:	2300      	movs	r3, #0
 801298e:	60fb      	str	r3, [r7, #12]
 8012990:	e00a      	b.n	80129a8 <unpack_pk_rho+0x26>
    rho[i] = pk[i];
 8012992:	683a      	ldr	r2, [r7, #0]
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	441a      	add	r2, r3
 8012998:	6879      	ldr	r1, [r7, #4]
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	440b      	add	r3, r1
 801299e:	7812      	ldrb	r2, [r2, #0]
 80129a0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	3301      	adds	r3, #1
 80129a6:	60fb      	str	r3, [r7, #12]
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2b1f      	cmp	r3, #31
 80129ac:	d9f1      	bls.n	8012992 <unpack_pk_rho+0x10>
}
 80129ae:	bf00      	nop
 80129b0:	bf00      	nop
 80129b2:	3714      	adds	r7, #20
 80129b4:	46bd      	mov	sp, r7
 80129b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ba:	4770      	bx	lr

080129bc <unpack_pk_t1>:

void unpack_pk_t1(poly *t1_i, uint32_t i,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	60b9      	str	r1, [r7, #8]
 80129c6:	607a      	str	r2, [r7, #4]
   polyt1_unpack(t1_i, pk + SEEDBYTES + i*POLYT1_PACKEDBYTES);
 80129c8:	68ba      	ldr	r2, [r7, #8]
 80129ca:	4613      	mov	r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	4413      	add	r3, r2
 80129d0:	019b      	lsls	r3, r3, #6
 80129d2:	3320      	adds	r3, #32
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	4413      	add	r3, r2
 80129d8:	4619      	mov	r1, r3
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f000 fd0f 	bl	80133fe <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>
}
 80129e0:	bf00      	nop
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <pqcrystals_dilithium2aes_r_ref_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b084      	sub	sp, #16
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80129f0:	2300      	movs	r3, #0
 80129f2:	60fb      	str	r3, [r7, #12]
 80129f4:	e00e      	b.n	8012a14 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0x2c>
    a->coeffs[i] = reduce32(a->coeffs[i]);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f002 fa9d 	bl	8014f3e <pqcrystals_dilithium2aes_r_ref_reduce32>
 8012a04:	4601      	mov	r1, r0
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	3301      	adds	r3, #1
 8012a12:	60fb      	str	r3, [r7, #12]
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2bff      	cmp	r3, #255	; 0xff
 8012a18:	d9ed      	bls.n	80129f6 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0xe>

  DBENCH_STOP(*tred);
}
 8012a1a:	bf00      	nop
 8012a1c:	bf00      	nop
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <pqcrystals_dilithium2aes_r_ref_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	60fb      	str	r3, [r7, #12]
 8012a30:	e00e      	b.n	8012a50 <pqcrystals_dilithium2aes_r_ref_poly_caddq+0x2c>
    a->coeffs[i] = caddq(a->coeffs[i]);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f002 fa9a 	bl	8014f74 <pqcrystals_dilithium2aes_r_ref_caddq>
 8012a40:	4601      	mov	r1, r0
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	68fa      	ldr	r2, [r7, #12]
 8012a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	60fb      	str	r3, [r7, #12]
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2bff      	cmp	r3, #255	; 0xff
 8012a54:	d9ed      	bls.n	8012a32 <pqcrystals_dilithium2aes_r_ref_poly_caddq+0xe>

  DBENCH_STOP(*tred);
}
 8012a56:	bf00      	nop
 8012a58:	bf00      	nop
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <pqcrystals_dilithium2aes_r_ref_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
 8012a60:	b480      	push	{r7}
 8012a62:	b087      	sub	sp, #28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	617b      	str	r3, [r7, #20]
 8012a70:	e00f      	b.n	8012a92 <pqcrystals_dilithium2aes_r_ref_poly_add+0x32>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	697a      	ldr	r2, [r7, #20]
 8012a76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6979      	ldr	r1, [r7, #20]
 8012a7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a82:	18d1      	adds	r1, r2, r3
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	697a      	ldr	r2, [r7, #20]
 8012a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	617b      	str	r3, [r7, #20]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	2bff      	cmp	r3, #255	; 0xff
 8012a96:	d9ec      	bls.n	8012a72 <pqcrystals_dilithium2aes_r_ref_poly_add+0x12>

  DBENCH_STOP(*tadd);
}
 8012a98:	bf00      	nop
 8012a9a:	bf00      	nop
 8012a9c:	371c      	adds	r7, #28
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa4:	4770      	bx	lr

08012aa6 <pqcrystals_dilithium2aes_r_ref_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 8012aa6:	b480      	push	{r7}
 8012aa8:	b087      	sub	sp, #28
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	60f8      	str	r0, [r7, #12]
 8012aae:	60b9      	str	r1, [r7, #8]
 8012ab0:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	617b      	str	r3, [r7, #20]
 8012ab6:	e00f      	b.n	8012ad8 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x32>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6979      	ldr	r1, [r7, #20]
 8012ac4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ac8:	1ad1      	subs	r1, r2, r3
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	697a      	ldr	r2, [r7, #20]
 8012ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	617b      	str	r3, [r7, #20]
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	2bff      	cmp	r3, #255	; 0xff
 8012adc:	d9ec      	bls.n	8012ab8 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x12>

  DBENCH_STOP(*tadd);
}
 8012ade:	bf00      	nop
 8012ae0:	bf00      	nop
 8012ae2:	371c      	adds	r7, #28
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <pqcrystals_dilithium2aes_r_ref_poly_shiftl>:
* Description: Multiply polynomial by 2^D without modular reduction. Assumes
*              input coefficients to be less than 2^{31-D} in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_shiftl(poly *a) {
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012af4:	2300      	movs	r3, #0
 8012af6:	60fb      	str	r3, [r7, #12]
 8012af8:	e00b      	b.n	8012b12 <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0x26>
    a->coeffs[i] <<= D;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	68fa      	ldr	r2, [r7, #12]
 8012afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b02:	0359      	lsls	r1, r3, #13
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	60fb      	str	r3, [r7, #12]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2bff      	cmp	r3, #255	; 0xff
 8012b16:	d9f0      	bls.n	8012afa <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0xe>

  DBENCH_STOP(*tmul);
}
 8012b18:	bf00      	nop
 8012b1a:	bf00      	nop
 8012b1c:	3714      	adds	r7, #20
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr

08012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>:
* Description: Inplace forward NTT. Coefficients can grow by
*              8*Q in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_ntt(poly *a) {
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b082      	sub	sp, #8
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  ntt(a->coeffs);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7ff fb75 	bl	8012220 <pqcrystals_dilithium2aes_r_ref_ntt>

  DBENCH_STOP(*tmul);
}
 8012b36:	bf00      	nop
 8012b38:	3708      	adds	r7, #8
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}

08012b3e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>:
*              Input coefficients need to be less than Q in absolute
*              value and output coefficients are again bounded by Q.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_invntt_tomont(poly *a) {
 8012b3e:	b580      	push	{r7, lr}
 8012b40:	b082      	sub	sp, #8
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  invntt_tomont(a->coeffs);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7ff fbd5 	bl	80122f8 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>

  DBENCH_STOP(*tmul);
}
 8012b4e:	bf00      	nop
 8012b50:	3708      	adds	r7, #8
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 8012b56:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012b5a:	b086      	sub	sp, #24
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	60f8      	str	r0, [r7, #12]
 8012b60:	60b9      	str	r1, [r7, #8]
 8012b62:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012b64:	2300      	movs	r3, #0
 8012b66:	617b      	str	r3, [r7, #20]
 8012b68:	e022      	b.n	8012bb0 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x5a>
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	697a      	ldr	r2, [r7, #20]
 8012b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b72:	17da      	asrs	r2, r3, #31
 8012b74:	4698      	mov	r8, r3
 8012b76:	4691      	mov	r9, r2
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	697a      	ldr	r2, [r7, #20]
 8012b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b80:	17da      	asrs	r2, r3, #31
 8012b82:	469a      	mov	sl, r3
 8012b84:	4693      	mov	fp, r2
 8012b86:	fb0a f209 	mul.w	r2, sl, r9
 8012b8a:	fb08 f30b 	mul.w	r3, r8, fp
 8012b8e:	4413      	add	r3, r2
 8012b90:	fba8 450a 	umull	r4, r5, r8, sl
 8012b94:	442b      	add	r3, r5
 8012b96:	461d      	mov	r5, r3
 8012b98:	4620      	mov	r0, r4
 8012b9a:	4629      	mov	r1, r5
 8012b9c:	f002 f989 	bl	8014eb2 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012ba0:	4601      	mov	r1, r0
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	697a      	ldr	r2, [r7, #20]
 8012ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	3301      	adds	r3, #1
 8012bae:	617b      	str	r3, [r7, #20]
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	2bff      	cmp	r3, #255	; 0xff
 8012bb4:	d9d9      	bls.n	8012b6a <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x14>

  DBENCH_STOP(*tmul);
}
 8012bb6:	bf00      	nop
 8012bb8:	bf00      	nop
 8012bba:	3718      	adds	r7, #24
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012bc2 <pqcrystals_dilithium2aes_r_ref_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b086      	sub	sp, #24
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	60f8      	str	r0, [r7, #12]
 8012bca:	60b9      	str	r1, [r7, #8]
 8012bcc:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012bce:	2300      	movs	r3, #0
 8012bd0:	617b      	str	r3, [r7, #20]
 8012bd2:	e012      	b.n	8012bfa <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x38>
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	68ba      	ldr	r2, [r7, #8]
 8012bda:	18d0      	adds	r0, r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	697a      	ldr	r2, [r7, #20]
 8012be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012be4:	4619      	mov	r1, r3
 8012be6:	f002 f9d9 	bl	8014f9c <pqcrystals_dilithium2aes_r_ref_power2round>
 8012bea:	4601      	mov	r1, r0
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	697a      	ldr	r2, [r7, #20]
 8012bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	617b      	str	r3, [r7, #20]
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2bff      	cmp	r3, #255	; 0xff
 8012bfe:	d9e9      	bls.n	8012bd4 <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x12>

  DBENCH_STOP(*tround);
}
 8012c00:	bf00      	nop
 8012c02:	bf00      	nop
 8012c04:	3718      	adds	r7, #24
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <pqcrystals_dilithium2aes_r_ref_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b086      	sub	sp, #24
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	60f8      	str	r0, [r7, #12]
 8012c12:	60b9      	str	r1, [r7, #8]
 8012c14:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012c16:	2300      	movs	r3, #0
 8012c18:	617b      	str	r3, [r7, #20]
 8012c1a:	e012      	b.n	8012c42 <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x38>
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	009b      	lsls	r3, r3, #2
 8012c20:	68ba      	ldr	r2, [r7, #8]
 8012c22:	18d0      	adds	r0, r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	697a      	ldr	r2, [r7, #20]
 8012c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	f002 f9cd 	bl	8014fcc <pqcrystals_dilithium2aes_r_ref_decompose>
 8012c32:	4601      	mov	r1, r0
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	697a      	ldr	r2, [r7, #20]
 8012c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	617b      	str	r3, [r7, #20]
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2bff      	cmp	r3, #255	; 0xff
 8012c46:	d9e9      	bls.n	8012c1c <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x12>

  DBENCH_STOP(*tround);
}
 8012c48:	bf00      	nop
 8012c4a:	bf00      	nop
 8012c4c:	3718      	adds	r7, #24
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}

08012c52 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b086      	sub	sp, #24
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	60f8      	str	r0, [r7, #12]
 8012c5a:	60b9      	str	r1, [r7, #8]
 8012c5c:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	613b      	str	r3, [r7, #16]
  DBENCH_START();

  for(i = 0; i < N_; ++i) {
 8012c62:	2300      	movs	r3, #0
 8012c64:	617b      	str	r3, [r7, #20]
 8012c66:	e01b      	b.n	8012ca0 <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x4e>
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	697a      	ldr	r2, [r7, #20]
 8012c6c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	697a      	ldr	r2, [r7, #20]
 8012c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c78:	4619      	mov	r1, r3
 8012c7a:	f002 f9e3 	bl	8015044 <pqcrystals_dilithium2aes_r_ref_make_hint>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	4619      	mov	r1, r3
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	697a      	ldr	r2, [r7, #20]
 8012c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s += h->coeffs[i];
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	697a      	ldr	r2, [r7, #20]
 8012c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c92:	461a      	mov	r2, r3
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	4413      	add	r3, r2
 8012c98:	613b      	str	r3, [r7, #16]
  for(i = 0; i < N_; ++i) {
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	617b      	str	r3, [r7, #20]
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	2bff      	cmp	r3, #255	; 0xff
 8012ca4:	d9e0      	bls.n	8012c68 <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x16>
  }

  DBENCH_STOP(*tround);
  return s;
 8012ca6:	693b      	ldr	r3, [r7, #16]
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3718      	adds	r7, #24
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <poly_use_hint_r>:
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);

  DBENCH_STOP(*tround);
}

void poly_use_hint_r(poly *b, const poly *a, const uint8_t h[N_]) {
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	617b      	str	r3, [r7, #20]
 8012cc0:	e012      	b.n	8012ce8 <poly_use_hint_r+0x38>
    b->coeffs[i] = use_hint(a->coeffs[i], h[i]);
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	697a      	ldr	r2, [r7, #20]
 8012cc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cca:	687a      	ldr	r2, [r7, #4]
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	4413      	add	r3, r2
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	f002 f9d6 	bl	8015084 <pqcrystals_dilithium2aes_r_ref_use_hint>
 8012cd8:	4601      	mov	r1, r0
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	697a      	ldr	r2, [r7, #20]
 8012cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	617b      	str	r3, [r7, #20]
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	2bff      	cmp	r3, #255	; 0xff
 8012cec:	d9e9      	bls.n	8012cc2 <poly_use_hint_r+0x12>

  DBENCH_STOP(*tround);
}
 8012cee:	bf00      	nop
 8012cf0:	bf00      	nop
 8012cf2:	3718      	adds	r7, #24
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>:
* Arguments:   - const poly *a: pointer to polynomial
*              - int32_t B: norm bound
*
* Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
**************************************************/
int poly_chknorm(const poly *a, int32_t B) {
 8012cf8:	b480      	push	{r7}
 8012cfa:	b085      	sub	sp, #20
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	6039      	str	r1, [r7, #0]
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q_-1)/8)
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	4a16      	ldr	r2, [pc, #88]	; (8012d60 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x68>)
 8012d06:	4293      	cmp	r3, r2
 8012d08:	dd01      	ble.n	8012d0e <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x16>
    return 1;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e022      	b.n	8012d54 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N_; ++i) {
 8012d0e:	2300      	movs	r3, #0
 8012d10:	60fb      	str	r3, [r7, #12]
 8012d12:	e01b      	b.n	8012d4c <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x54>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	68fa      	ldr	r2, [r7, #12]
 8012d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d1c:	17db      	asrs	r3, r3, #31
 8012d1e:	60bb      	str	r3, [r7, #8]
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68fa      	ldr	r2, [r7, #12]
 8012d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	68f9      	ldr	r1, [r7, #12]
 8012d2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d30:	0059      	lsls	r1, r3, #1
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	400b      	ands	r3, r1
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	60bb      	str	r3, [r7, #8]

    if(t >= B) {
 8012d3a:	68ba      	ldr	r2, [r7, #8]
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	db01      	blt.n	8012d46 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x4e>
      DBENCH_STOP(*tsample);
      return 1;
 8012d42:	2301      	movs	r3, #1
 8012d44:	e006      	b.n	8012d54 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>
  for(i = 0; i < N_; ++i) {
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	60fb      	str	r3, [r7, #12]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2bff      	cmp	r3, #255	; 0xff
 8012d50:	d9e0      	bls.n	8012d14 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x1c>
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
 8012d52:	2300      	movs	r3, #0
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3714      	adds	r7, #20
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr
 8012d60:	000ffc00 	.word	0x000ffc00

08012d64 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b089      	sub	sp, #36	; 0x24
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	60b9      	str	r1, [r7, #8]
 8012d6e:	607a      	str	r2, [r7, #4]
 8012d70:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t;
  DBENCH_START();

  ctr = pos = 0;
 8012d72:	2300      	movs	r3, #0
 8012d74:	61bb      	str	r3, [r7, #24]
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 8012d7a:	e02a      	b.n	8012dd2 <rej_uniform+0x6e>
    t  = buf[pos++];
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	1c5a      	adds	r2, r3, #1
 8012d80:	61ba      	str	r2, [r7, #24]
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	4413      	add	r3, r2
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 8;
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	1c5a      	adds	r2, r3, #1
 8012d8e:	61ba      	str	r2, [r7, #24]
 8012d90:	687a      	ldr	r2, [r7, #4]
 8012d92:	4413      	add	r3, r2
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	021b      	lsls	r3, r3, #8
 8012d98:	697a      	ldr	r2, [r7, #20]
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 16;
 8012d9e:	69bb      	ldr	r3, [r7, #24]
 8012da0:	1c5a      	adds	r2, r3, #1
 8012da2:	61ba      	str	r2, [r7, #24]
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	4413      	add	r3, r2
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	041b      	lsls	r3, r3, #16
 8012dac:	697a      	ldr	r2, [r7, #20]
 8012dae:	4313      	orrs	r3, r2
 8012db0:	617b      	str	r3, [r7, #20]
    t &= 0x7FFFFF;
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012db8:	617b      	str	r3, [r7, #20]

    if(t < Q_)
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	4a0d      	ldr	r2, [pc, #52]	; (8012df4 <rej_uniform+0x90>)
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	d807      	bhi.n	8012dd2 <rej_uniform+0x6e>
      a[ctr++] = t;
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	1c5a      	adds	r2, r3, #1
 8012dc6:	61fa      	str	r2, [r7, #28]
 8012dc8:	009b      	lsls	r3, r3, #2
 8012dca:	68fa      	ldr	r2, [r7, #12]
 8012dcc:	4413      	add	r3, r2
 8012dce:	697a      	ldr	r2, [r7, #20]
 8012dd0:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 8012dd2:	69fa      	ldr	r2, [r7, #28]
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d204      	bcs.n	8012de4 <rej_uniform+0x80>
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	3303      	adds	r3, #3
 8012dde:	683a      	ldr	r2, [r7, #0]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d2cb      	bcs.n	8012d7c <rej_uniform+0x18>
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8012de4:	69fb      	ldr	r3, [r7, #28]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3724      	adds	r7, #36	; 0x24
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr
 8012df2:	bf00      	nop
 8012df4:	007fe000 	.word	0x007fe000

08012df8 <pqcrystals_dilithium2aes_r_ref_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	f5ad 6de5 	sub.w	sp, sp, #1832	; 0x728
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012e04:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012e08:	6018      	str	r0, [r3, #0]
 8012e0a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012e0e:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8012e12:	6019      	str	r1, [r3, #0]
 8012e14:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012e18:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 8012e1c:	801a      	strh	r2, [r3, #0]
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 8012e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012e22:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 8012e26:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012e2a:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 8012e2e:	881a      	ldrh	r2, [r3, #0]
 8012e30:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012e34:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8012e38:	f107 0010 	add.w	r0, r7, #16
 8012e3c:	6819      	ldr	r1, [r3, #0]
 8012e3e:	f002 fdaf 	bl	80159a0 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8012e42:	f107 0210 	add.w	r2, r7, #16
 8012e46:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8012e4a:	210c      	movs	r1, #12
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fb fd9e 	bl	800e98e <pqcrystals_aes256ctr_ref_squeezeblocks>

  ctr = rej_uniform(a->coeffs, N_, buf, buflen);
 8012e52:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012e56:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012e5a:	6818      	ldr	r0, [r3, #0]
 8012e5c:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012e60:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8012e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012e68:	f7ff ff7c 	bl	8012d64 <rej_uniform>
 8012e6c:	f8c7 0720 	str.w	r0, [r7, #1824]	; 0x720

  while(ctr < N_) {
 8012e70:	e059      	b.n	8012f26 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x12e>
    off = buflen % 3;
 8012e72:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8012e76:	4b31      	ldr	r3, [pc, #196]	; (8012f3c <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x144>)
 8012e78:	fba3 1302 	umull	r1, r3, r3, r2
 8012e7c:	0859      	lsrs	r1, r3, #1
 8012e7e:	460b      	mov	r3, r1
 8012e80:	005b      	lsls	r3, r3, #1
 8012e82:	440b      	add	r3, r1
 8012e84:	1ad3      	subs	r3, r2, r3
 8012e86:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
    for(i = 0; i < off; ++i)
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8012e90:	e01a      	b.n	8012ec8 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0xd0>
      buf[i] = buf[buflen - off + i];
 8012e92:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8012e96:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012e9a:	1ad2      	subs	r2, r2, r3
 8012e9c:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012ea0:	4413      	add	r3, r2
 8012ea2:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8012ea6:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8012eaa:	5cd1      	ldrb	r1, [r2, r3]
 8012eac:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012eb0:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8012eb4:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012eb8:	4413      	add	r3, r2
 8012eba:	460a      	mov	r2, r1
 8012ebc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < off; ++i)
 8012ebe:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8012ec8:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
 8012ecc:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d3de      	bcc.n	8012e92 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x9a>

    stream128_squeezeblocks(buf + off, 1, &state);
 8012ed4:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012ed8:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012edc:	4413      	add	r3, r2
 8012ede:	f107 0210 	add.w	r2, r7, #16
 8012ee2:	2101      	movs	r1, #1
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7fb fd52 	bl	800e98e <pqcrystals_aes256ctr_ref_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
 8012eea:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012eee:	3340      	adds	r3, #64	; 0x40
 8012ef0:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
    ctr += rej_uniform(a->coeffs + ctr, N_ - ctr, buf, buflen);
 8012ef4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012ef8:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012f02:	009b      	lsls	r3, r3, #2
 8012f04:	18d0      	adds	r0, r2, r3
 8012f06:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012f0a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8012f0e:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012f12:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8012f16:	f7ff ff25 	bl	8012d64 <rej_uniform>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012f20:	4413      	add	r3, r2
 8012f22:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
  while(ctr < N_) {
 8012f26:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012f2a:	2bff      	cmp	r3, #255	; 0xff
 8012f2c:	d9a1      	bls.n	8012e72 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x7a>
  }
}
 8012f2e:	bf00      	nop
 8012f30:	bf00      	nop
 8012f32:	f507 67e5 	add.w	r7, r7, #1832	; 0x728
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	aaaaaaab 	.word	0xaaaaaaab

08012f40 <rej_eta>:
**************************************************/
static unsigned int rej_eta(int32_t *a,
                            unsigned int len,
                            const uint8_t *buf,
                            unsigned int buflen)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b089      	sub	sp, #36	; 0x24
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	607a      	str	r2, [r7, #4]
 8012f4c:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t0, t1;
  DBENCH_START();

  ctr = pos = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	61bb      	str	r3, [r7, #24]
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos < buflen) {
 8012f56:	e045      	b.n	8012fe4 <rej_eta+0xa4>
    t0 = buf[pos] & 0x0F;
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	f003 030f 	and.w	r3, r3, #15
 8012f64:	617b      	str	r3, [r7, #20]
    t1 = buf[pos++] >> 4;
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	61ba      	str	r2, [r7, #24]
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	4413      	add	r3, r2
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	091b      	lsrs	r3, r3, #4
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	613b      	str	r3, [r7, #16]

#if ETA == 2
    if(t0 < 15) {
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	2b0e      	cmp	r3, #14
 8012f7c:	d815      	bhi.n	8012faa <rej_eta+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	22cd      	movs	r2, #205	; 0xcd
 8012f82:	fb02 f303 	mul.w	r3, r2, r3
 8012f86:	0a9a      	lsrs	r2, r3, #10
 8012f88:	4613      	mov	r3, r2
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	4413      	add	r3, r2
 8012f8e:	697a      	ldr	r2, [r7, #20]
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	617b      	str	r3, [r7, #20]
      a[ctr++] = 2 - t0;
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	f1c3 0102 	rsb	r1, r3, #2
 8012f9a:	69fb      	ldr	r3, [r7, #28]
 8012f9c:	1c5a      	adds	r2, r3, #1
 8012f9e:	61fa      	str	r2, [r7, #28]
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	68fa      	ldr	r2, [r7, #12]
 8012fa4:	4413      	add	r3, r2
 8012fa6:	460a      	mov	r2, r1
 8012fa8:	601a      	str	r2, [r3, #0]
    }
    if(t1 < 15 && ctr < len) {
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	2b0e      	cmp	r3, #14
 8012fae:	d819      	bhi.n	8012fe4 <rej_eta+0xa4>
 8012fb0:	69fa      	ldr	r2, [r7, #28]
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d215      	bcs.n	8012fe4 <rej_eta+0xa4>
      t1 = t1 - (205*t1 >> 10)*5;
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	22cd      	movs	r2, #205	; 0xcd
 8012fbc:	fb02 f303 	mul.w	r3, r2, r3
 8012fc0:	0a9a      	lsrs	r2, r3, #10
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	4413      	add	r3, r2
 8012fc8:	693a      	ldr	r2, [r7, #16]
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	613b      	str	r3, [r7, #16]
      a[ctr++] = 2 - t1;
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	f1c3 0102 	rsb	r1, r3, #2
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	1c5a      	adds	r2, r3, #1
 8012fd8:	61fa      	str	r2, [r7, #28]
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	68fa      	ldr	r2, [r7, #12]
 8012fde:	4413      	add	r3, r2
 8012fe0:	460a      	mov	r2, r1
 8012fe2:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos < buflen) {
 8012fe4:	69fa      	ldr	r2, [r7, #28]
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d203      	bcs.n	8012ff4 <rej_eta+0xb4>
 8012fec:	69ba      	ldr	r2, [r7, #24]
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d3b1      	bcc.n	8012f58 <rej_eta+0x18>
      a[ctr++] = 4 - t1;
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8012ff4:	69fb      	ldr	r3, [r7, #28]
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3724      	adds	r7, #36	; 0x24
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr

08013002 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[SEEDBYTES],
                      uint16_t nonce)
{
 8013002:	b580      	push	{r7, lr}
 8013004:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8013008:	af00      	add	r7, sp, #0
 801300a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801300e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013012:	6018      	str	r0, [r3, #0]
 8013014:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8013018:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801301c:	6019      	str	r1, [r3, #0]
 801301e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8013022:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 8013026:	801a      	strh	r2, [r3, #0]
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES;
 8013028:	23c0      	movs	r3, #192	; 0xc0
 801302a:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 801302e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8013032:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 8013036:	881a      	ldrh	r2, [r3, #0]
 8013038:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801303c:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8013040:	f107 0010 	add.w	r0, r7, #16
 8013044:	6819      	ldr	r1, [r3, #0]
 8013046:	f002 fcab 	bl	80159a0 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 801304a:	f107 0210 	add.w	r2, r7, #16
 801304e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8013052:	2103      	movs	r1, #3
 8013054:	4618      	mov	r0, r3
 8013056:	f7fb fc9a 	bl	800e98e <pqcrystals_aes256ctr_ref_squeezeblocks>

  ctr = rej_eta(a->coeffs, N_, buf, buflen);
 801305a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801305e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013062:	6818      	ldr	r0, [r3, #0]
 8013064:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8013068:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 801306c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013070:	f7ff ff66 	bl	8012f40 <rej_eta>
 8013074:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4

  while(ctr < N_) {
 8013078:	e01f      	b.n	80130ba <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0xb8>
    stream128_squeezeblocks(buf, 1, &state);
 801307a:	f107 0210 	add.w	r2, r7, #16
 801307e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8013082:	2101      	movs	r1, #1
 8013084:	4618      	mov	r0, r3
 8013086:	f7fb fc82 	bl	800e98e <pqcrystals_aes256ctr_ref_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N_ - ctr, buf, STREAM128_BLOCKBYTES);
 801308a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801308e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013092:	681a      	ldr	r2, [r3, #0]
 8013094:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	18d0      	adds	r0, r2, r3
 801309c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80130a0:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80130a4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80130a8:	2340      	movs	r3, #64	; 0x40
 80130aa:	f7ff ff49 	bl	8012f40 <rej_eta>
 80130ae:	4602      	mov	r2, r0
 80130b0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80130b4:	4413      	add	r3, r2
 80130b6:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  while(ctr < N_) {
 80130ba:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80130be:	2bff      	cmp	r3, #255	; 0xff
 80130c0:	d9db      	bls.n	801307a <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0x78>
  }
}
 80130c2:	bf00      	nop
 80130c4:	bf00      	nop
 80130c6:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 80130ce:	b580      	push	{r7, lr}
 80130d0:	f5ad 6dca 	sub.w	sp, sp, #1616	; 0x650
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80130da:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 80130de:	6018      	str	r0, [r3, #0]
 80130e0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80130e4:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 80130e8:	6019      	str	r1, [r3, #0]
 80130ea:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80130ee:	f2a3 634a 	subw	r3, r3, #1610	; 0x64a
 80130f2:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 80130f4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80130f8:	f2a3 634a 	subw	r3, r3, #1610	; 0x64a
 80130fc:	881a      	ldrh	r2, [r3, #0]
 80130fe:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8013102:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8013106:	f107 0010 	add.w	r0, r7, #16
 801310a:	6819      	ldr	r1, [r3, #0]
 801310c:	f002 fc48 	bl	80159a0 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8013110:	f107 0210 	add.w	r2, r7, #16
 8013114:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8013118:	2109      	movs	r1, #9
 801311a:	4618      	mov	r0, r3
 801311c:	f7fb fc37 	bl	800e98e <pqcrystals_aes256ctr_ref_squeezeblocks>
  polyz_unpack(a, buf);
 8013120:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8013124:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8013128:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801312c:	4611      	mov	r1, r2
 801312e:	6818      	ldr	r0, [r3, #0]
 8013130:	f000 ff36 	bl	8013fa0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
}
 8013134:	bf00      	nop
 8013136:	f507 67ca 	add.w	r7, r7, #1616	; 0x650
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}

0801313e <pqcrystals_dilithium2aes_r_ref_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 801313e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013142:	b0de      	sub	sp, #376	; 0x178
 8013144:	af00      	add	r7, sp, #0
 8013146:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801314a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801314e:	6018      	str	r0, [r3, #0]
 8013150:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013154:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8013158:	6019      	str	r1, [r3, #0]
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
 801315a:	f107 0308 	add.w	r3, r7, #8
 801315e:	4618      	mov	r0, r3
 8013160:	f7fe ffdb 	bl	801211a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
 8013164:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013168:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801316c:	f107 0008 	add.w	r0, r7, #8
 8013170:	2220      	movs	r2, #32
 8013172:	6819      	ldr	r1, [r3, #0]
 8013174:	f7fe ffdc 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8013178:	f107 0308 	add.w	r3, r7, #8
 801317c:	4618      	mov	r0, r3
 801317e:	f7fe ffef 	bl	8012160 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
 8013182:	f107 0208 	add.w	r2, r7, #8
 8013186:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801318a:	2101      	movs	r1, #1
 801318c:	4618      	mov	r0, r3
 801318e:	f7fe fffb 	bl	8012188 <pqcrystals_fips202_ref_shake256_squeezeblocks>

  signs = 0;
 8013192:	f04f 0200 	mov.w	r2, #0
 8013196:	f04f 0300 	mov.w	r3, #0
 801319a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 801319e:	2300      	movs	r3, #0
 80131a0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80131a4:	e027      	b.n	80131f6 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xb8>
    signs |= (uint64_t)buf[i] << 8*i;
 80131a6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80131aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80131ae:	4413      	add	r3, r2
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	2200      	movs	r2, #0
 80131b6:	4698      	mov	r8, r3
 80131b8:	4691      	mov	r9, r2
 80131ba:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80131be:	00db      	lsls	r3, r3, #3
 80131c0:	f1a3 0120 	sub.w	r1, r3, #32
 80131c4:	f1c3 0220 	rsb	r2, r3, #32
 80131c8:	fa09 f503 	lsl.w	r5, r9, r3
 80131cc:	fa08 f101 	lsl.w	r1, r8, r1
 80131d0:	430d      	orrs	r5, r1
 80131d2:	fa28 f202 	lsr.w	r2, r8, r2
 80131d6:	4315      	orrs	r5, r2
 80131d8:	fa08 f403 	lsl.w	r4, r8, r3
 80131dc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80131e0:	ea42 0a04 	orr.w	sl, r2, r4
 80131e4:	ea43 0b05 	orr.w	fp, r3, r5
 80131e8:	e9c7 ab5a 	strd	sl, fp, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 80131ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80131f0:	3301      	adds	r3, #1
 80131f2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80131f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80131fa:	2b07      	cmp	r3, #7
 80131fc:	d9d3      	bls.n	80131a6 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x68>
  pos = 8;
 80131fe:	2308      	movs	r3, #8
 8013200:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  for(i = 0; i < N_; ++i)
 8013204:	2300      	movs	r3, #0
 8013206:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801320a:	e00e      	b.n	801322a <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xec>
    c->coeffs[i] = 0;
 801320c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013210:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801321a:	2100      	movs	r1, #0
 801321c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8013220:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013224:	3301      	adds	r3, #1
 8013226:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801322a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801322e:	2bff      	cmp	r3, #255	; 0xff
 8013230:	d9ec      	bls.n	801320c <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xce>
  for(i = N_-TAU; i < N_; ++i) {
 8013232:	23d9      	movs	r3, #217	; 0xd9
 8013234:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013238:	e054      	b.n	80132e4 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x1a6>
    do {
      if(pos >= SHAKE256_RATE) {
 801323a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801323e:	2b87      	cmp	r3, #135	; 0x87
 8013240:	d90a      	bls.n	8013258 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x11a>
        shake256_squeezeblocks(buf, 1, &state);
 8013242:	f107 0208 	add.w	r2, r7, #8
 8013246:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801324a:	2101      	movs	r1, #1
 801324c:	4618      	mov	r0, r3
 801324e:	f7fe ff9b 	bl	8012188 <pqcrystals_fips202_ref_shake256_squeezeblocks>
        pos = 0;
 8013252:	2300      	movs	r3, #0
 8013254:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      }

      b = buf[pos++];
 8013258:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801325c:	1c5a      	adds	r2, r3, #1
 801325e:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8013262:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013266:	443b      	add	r3, r7
 8013268:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 801326c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    } while(b > i);
 8013270:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8013274:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013278:	429a      	cmp	r2, r3
 801327a:	d8de      	bhi.n	801323a <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>

    c->coeffs[i] = c->coeffs[b];
 801327c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013280:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801328a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801328e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013292:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 80132a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80132a4:	f003 0301 	and.w	r3, r3, #1
 80132a8:	005b      	lsls	r3, r3, #1
 80132aa:	f1c3 0301 	rsb	r3, r3, #1
 80132ae:	4619      	mov	r1, r3
 80132b0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80132b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80132be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    signs >>= 1;
 80132c2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80132c6:	f04f 0200 	mov.w	r2, #0
 80132ca:	f04f 0300 	mov.w	r3, #0
 80132ce:	0842      	lsrs	r2, r0, #1
 80132d0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80132d4:	084b      	lsrs	r3, r1, #1
 80132d6:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = N_-TAU; i < N_; ++i) {
 80132da:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80132de:	3301      	adds	r3, #1
 80132e0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80132e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80132e8:	2bff      	cmp	r3, #255	; 0xff
 80132ea:	d9a6      	bls.n	801323a <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>
  }
}
 80132ec:	bf00      	nop
 80132ee:	bf00      	nop
 80132f0:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 80132f4:	46bd      	mov	sp, r7
 80132f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080132fa <pqcrystals_dilithium2aes_r_ref_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 80132fa:	b480      	push	{r7}
 80132fc:	b085      	sub	sp, #20
 80132fe:	af00      	add	r7, sp, #0
 8013300:	6078      	str	r0, [r7, #4]
 8013302:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013304:	2300      	movs	r3, #0
 8013306:	60fb      	str	r3, [r7, #12]
 8013308:	e06f      	b.n	80133ea <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0xf0>
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	009a      	lsls	r2, r3, #2
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	4613      	mov	r3, r2
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	4413      	add	r3, r2
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	4413      	add	r3, r2
 8013320:	b2ca      	uxtb	r2, r1
 8013322:	701a      	strb	r2, [r3, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	009a      	lsls	r2, r3, #2
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801332e:	121b      	asrs	r3, r3, #8
 8013330:	b25a      	sxtb	r2, r3
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	009b      	lsls	r3, r3, #2
 8013336:	1c59      	adds	r1, r3, #1
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	b25b      	sxtb	r3, r3
 8013342:	4313      	orrs	r3, r2
 8013344:	b259      	sxtb	r1, r3
 8013346:	68fa      	ldr	r2, [r7, #12]
 8013348:	4613      	mov	r3, r2
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	4413      	add	r3, r2
 801334e:	3301      	adds	r3, #1
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	4413      	add	r3, r2
 8013354:	b2ca      	uxtb	r2, r1
 8013356:	701a      	strb	r2, [r3, #0]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	1c5a      	adds	r2, r3, #1
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013364:	119b      	asrs	r3, r3, #6
 8013366:	b25a      	sxtb	r2, r3
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	1c99      	adds	r1, r3, #2
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013374:	011b      	lsls	r3, r3, #4
 8013376:	b25b      	sxtb	r3, r3
 8013378:	4313      	orrs	r3, r2
 801337a:	b259      	sxtb	r1, r3
 801337c:	68fa      	ldr	r2, [r7, #12]
 801337e:	4613      	mov	r3, r2
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	4413      	add	r3, r2
 8013384:	3302      	adds	r3, #2
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	4413      	add	r3, r2
 801338a:	b2ca      	uxtb	r2, r1
 801338c:	701a      	strb	r2, [r3, #0]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	1c9a      	adds	r2, r3, #2
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801339a:	111b      	asrs	r3, r3, #4
 801339c:	b25a      	sxtb	r2, r3
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	1cd9      	adds	r1, r3, #3
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133aa:	019b      	lsls	r3, r3, #6
 80133ac:	b25b      	sxtb	r3, r3
 80133ae:	4313      	orrs	r3, r2
 80133b0:	b259      	sxtb	r1, r3
 80133b2:	68fa      	ldr	r2, [r7, #12]
 80133b4:	4613      	mov	r3, r2
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	4413      	add	r3, r2
 80133ba:	3303      	adds	r3, #3
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	4413      	add	r3, r2
 80133c0:	b2ca      	uxtb	r2, r1
 80133c2:	701a      	strb	r2, [r3, #0]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	1cda      	adds	r2, r3, #3
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133d0:	1099      	asrs	r1, r3, #2
 80133d2:	68fa      	ldr	r2, [r7, #12]
 80133d4:	4613      	mov	r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4413      	add	r3, r2
 80133da:	3304      	adds	r3, #4
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	4413      	add	r3, r2
 80133e0:	b2ca      	uxtb	r2, r1
 80133e2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	3301      	adds	r3, #1
 80133e8:	60fb      	str	r3, [r7, #12]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2b3f      	cmp	r3, #63	; 0x3f
 80133ee:	d98c      	bls.n	801330a <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 80133f0:	bf00      	nop
 80133f2:	bf00      	nop
 80133f4:	3714      	adds	r7, #20
 80133f6:	46bd      	mov	sp, r7
 80133f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fc:	4770      	bx	lr

080133fe <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>:
*              Output coefficients are standard representatives.
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
 80133fe:	b480      	push	{r7}
 8013400:	b085      	sub	sp, #20
 8013402:	af00      	add	r7, sp, #0
 8013404:	6078      	str	r0, [r7, #4]
 8013406:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013408:	2300      	movs	r3, #0
 801340a:	60fb      	str	r3, [r7, #12]
 801340c:	e076      	b.n	80134fc <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0xfe>
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 801340e:	68fa      	ldr	r2, [r7, #12]
 8013410:	4613      	mov	r3, r2
 8013412:	009b      	lsls	r3, r3, #2
 8013414:	4413      	add	r3, r2
 8013416:	683a      	ldr	r2, [r7, #0]
 8013418:	4413      	add	r3, r2
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	4619      	mov	r1, r3
 801341e:	68fa      	ldr	r2, [r7, #12]
 8013420:	4613      	mov	r3, r2
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	4413      	add	r3, r2
 8013426:	3301      	adds	r3, #1
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	4413      	add	r3, r2
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	021b      	lsls	r3, r3, #8
 8013430:	430b      	orrs	r3, r1
 8013432:	4619      	mov	r1, r3
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	009a      	lsls	r2, r3, #2
 8013438:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	4613      	mov	r3, r2
 8013446:	009b      	lsls	r3, r3, #2
 8013448:	4413      	add	r3, r2
 801344a:	3301      	adds	r3, #1
 801344c:	683a      	ldr	r2, [r7, #0]
 801344e:	4413      	add	r3, r2
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	089b      	lsrs	r3, r3, #2
 8013454:	b2db      	uxtb	r3, r3
 8013456:	4619      	mov	r1, r3
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	4613      	mov	r3, r2
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	4413      	add	r3, r2
 8013460:	3302      	adds	r3, #2
 8013462:	683a      	ldr	r2, [r7, #0]
 8013464:	4413      	add	r3, r2
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	019b      	lsls	r3, r3, #6
 801346a:	430b      	orrs	r3, r1
 801346c:	4619      	mov	r1, r3
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	1c5a      	adds	r2, r3, #1
 8013474:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	4613      	mov	r3, r2
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	4413      	add	r3, r2
 8013486:	3302      	adds	r3, #2
 8013488:	683a      	ldr	r2, [r7, #0]
 801348a:	4413      	add	r3, r2
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	091b      	lsrs	r3, r3, #4
 8013490:	b2db      	uxtb	r3, r3
 8013492:	4619      	mov	r1, r3
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	4613      	mov	r3, r2
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	4413      	add	r3, r2
 801349c:	3303      	adds	r3, #3
 801349e:	683a      	ldr	r2, [r7, #0]
 80134a0:	4413      	add	r3, r2
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	011b      	lsls	r3, r3, #4
 80134a6:	430b      	orrs	r3, r1
 80134a8:	4619      	mov	r1, r3
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	1c9a      	adds	r2, r3, #2
 80134b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 80134ba:	68fa      	ldr	r2, [r7, #12]
 80134bc:	4613      	mov	r3, r2
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	4413      	add	r3, r2
 80134c2:	3303      	adds	r3, #3
 80134c4:	683a      	ldr	r2, [r7, #0]
 80134c6:	4413      	add	r3, r2
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	099b      	lsrs	r3, r3, #6
 80134cc:	b2db      	uxtb	r3, r3
 80134ce:	4619      	mov	r1, r3
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	4613      	mov	r3, r2
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	4413      	add	r3, r2
 80134d8:	3304      	adds	r3, #4
 80134da:	683a      	ldr	r2, [r7, #0]
 80134dc:	4413      	add	r3, r2
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	009b      	lsls	r3, r3, #2
 80134e2:	430b      	orrs	r3, r1
 80134e4:	4619      	mov	r1, r3
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	1cda      	adds	r2, r3, #3
 80134ec:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	3301      	adds	r3, #1
 80134fa:	60fb      	str	r3, [r7, #12]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2b3f      	cmp	r3, #63	; 0x3f
 8013500:	d985      	bls.n	801340e <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013502:	bf00      	nop
 8013504:	bf00      	nop
 8013506:	3714      	adds	r7, #20
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr

08013510 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8013510:	b480      	push	{r7}
 8013512:	b08d      	sub	sp, #52	; 0x34
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 801351a:	2300      	movs	r3, #0
 801351c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801351e:	e1ad      	b.n	801387c <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x36c>
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8013520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013522:	00da      	lsls	r2, r3, #3
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801352a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801352e:	60fb      	str	r3, [r7, #12]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8013530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013532:	00db      	lsls	r3, r3, #3
 8013534:	1c5a      	adds	r2, r3, #1
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801353c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013540:	613b      	str	r3, [r7, #16]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8013542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013544:	00db      	lsls	r3, r3, #3
 8013546:	1c9a      	adds	r2, r3, #2
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801354e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013552:	617b      	str	r3, [r7, #20]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8013554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013556:	00db      	lsls	r3, r3, #3
 8013558:	1cda      	adds	r2, r3, #3
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013560:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013564:	61bb      	str	r3, [r7, #24]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8013566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013568:	00db      	lsls	r3, r3, #3
 801356a:	1d1a      	adds	r2, r3, #4
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013572:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013576:	61fb      	str	r3, [r7, #28]
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8013578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801357a:	00db      	lsls	r3, r3, #3
 801357c:	1d5a      	adds	r2, r3, #5
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013584:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013588:	623b      	str	r3, [r7, #32]
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 801358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	1d9a      	adds	r2, r3, #6
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013596:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801359a:	627b      	str	r3, [r7, #36]	; 0x24
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 801359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359e:	00db      	lsls	r3, r3, #3
 80135a0:	1dda      	adds	r2, r3, #7
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135a8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80135ac:	62bb      	str	r3, [r7, #40]	; 0x28

    r[13*i+ 0]  =  t[0];
 80135ae:	68f9      	ldr	r1, [r7, #12]
 80135b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135b2:	4613      	mov	r3, r2
 80135b4:	005b      	lsls	r3, r3, #1
 80135b6:	4413      	add	r3, r2
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	4413      	add	r3, r2
 80135bc:	687a      	ldr	r2, [r7, #4]
 80135be:	4413      	add	r3, r2
 80135c0:	b2ca      	uxtb	r2, r1
 80135c2:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1]  =  t[0] >>  8;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	0a19      	lsrs	r1, r3, #8
 80135c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ca:	4613      	mov	r3, r2
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	4413      	add	r3, r2
 80135d0:	009b      	lsls	r3, r3, #2
 80135d2:	4413      	add	r3, r2
 80135d4:	3301      	adds	r3, #1
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	4413      	add	r3, r2
 80135da:	b2ca      	uxtb	r2, r1
 80135dc:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 80135de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135e0:	4613      	mov	r3, r2
 80135e2:	005b      	lsls	r3, r3, #1
 80135e4:	4413      	add	r3, r2
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	4413      	add	r3, r2
 80135ea:	3301      	adds	r3, #1
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	4413      	add	r3, r2
 80135f0:	7818      	ldrb	r0, [r3, #0]
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	015b      	lsls	r3, r3, #5
 80135f8:	b2d9      	uxtb	r1, r3
 80135fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135fc:	4613      	mov	r3, r2
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	4413      	add	r3, r2
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	4413      	add	r3, r2
 8013606:	3301      	adds	r3, #1
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	4413      	add	r3, r2
 801360c:	ea40 0201 	orr.w	r2, r0, r1
 8013610:	b2d2      	uxtb	r2, r2
 8013612:	701a      	strb	r2, [r3, #0]
    r[13*i+ 2]  =  t[1] >>  3;
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	08d9      	lsrs	r1, r3, #3
 8013618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801361a:	4613      	mov	r3, r2
 801361c:	005b      	lsls	r3, r3, #1
 801361e:	4413      	add	r3, r2
 8013620:	009b      	lsls	r3, r3, #2
 8013622:	4413      	add	r3, r2
 8013624:	3302      	adds	r3, #2
 8013626:	687a      	ldr	r2, [r7, #4]
 8013628:	4413      	add	r3, r2
 801362a:	b2ca      	uxtb	r2, r1
 801362c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3]  =  t[1] >> 11;
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	0ad9      	lsrs	r1, r3, #11
 8013632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013634:	4613      	mov	r3, r2
 8013636:	005b      	lsls	r3, r3, #1
 8013638:	4413      	add	r3, r2
 801363a:	009b      	lsls	r3, r3, #2
 801363c:	4413      	add	r3, r2
 801363e:	3303      	adds	r3, #3
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	4413      	add	r3, r2
 8013644:	b2ca      	uxtb	r2, r1
 8013646:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3] |=  t[2] <<  2;
 8013648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801364a:	4613      	mov	r3, r2
 801364c:	005b      	lsls	r3, r3, #1
 801364e:	4413      	add	r3, r2
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	4413      	add	r3, r2
 8013654:	3303      	adds	r3, #3
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	4413      	add	r3, r2
 801365a:	7818      	ldrb	r0, [r3, #0]
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	b2db      	uxtb	r3, r3
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	b2d9      	uxtb	r1, r3
 8013664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013666:	4613      	mov	r3, r2
 8013668:	005b      	lsls	r3, r3, #1
 801366a:	4413      	add	r3, r2
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4413      	add	r3, r2
 8013670:	3303      	adds	r3, #3
 8013672:	687a      	ldr	r2, [r7, #4]
 8013674:	4413      	add	r3, r2
 8013676:	ea40 0201 	orr.w	r2, r0, r1
 801367a:	b2d2      	uxtb	r2, r2
 801367c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4]  =  t[2] >>  6;
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	0999      	lsrs	r1, r3, #6
 8013682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013684:	4613      	mov	r3, r2
 8013686:	005b      	lsls	r3, r3, #1
 8013688:	4413      	add	r3, r2
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	4413      	add	r3, r2
 801368e:	3304      	adds	r3, #4
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	4413      	add	r3, r2
 8013694:	b2ca      	uxtb	r2, r1
 8013696:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4] |=  t[3] <<  7;
 8013698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801369a:	4613      	mov	r3, r2
 801369c:	005b      	lsls	r3, r3, #1
 801369e:	4413      	add	r3, r2
 80136a0:	009b      	lsls	r3, r3, #2
 80136a2:	4413      	add	r3, r2
 80136a4:	3304      	adds	r3, #4
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	4413      	add	r3, r2
 80136aa:	7818      	ldrb	r0, [r3, #0]
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	01db      	lsls	r3, r3, #7
 80136b2:	b2d9      	uxtb	r1, r3
 80136b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136b6:	4613      	mov	r3, r2
 80136b8:	005b      	lsls	r3, r3, #1
 80136ba:	4413      	add	r3, r2
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	4413      	add	r3, r2
 80136c0:	3304      	adds	r3, #4
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	4413      	add	r3, r2
 80136c6:	ea40 0201 	orr.w	r2, r0, r1
 80136ca:	b2d2      	uxtb	r2, r2
 80136cc:	701a      	strb	r2, [r3, #0]
    r[13*i+ 5]  =  t[3] >>  1;
 80136ce:	69bb      	ldr	r3, [r7, #24]
 80136d0:	0859      	lsrs	r1, r3, #1
 80136d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136d4:	4613      	mov	r3, r2
 80136d6:	005b      	lsls	r3, r3, #1
 80136d8:	4413      	add	r3, r2
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	4413      	add	r3, r2
 80136de:	3305      	adds	r3, #5
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	4413      	add	r3, r2
 80136e4:	b2ca      	uxtb	r2, r1
 80136e6:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6]  =  t[3] >>  9;
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	0a59      	lsrs	r1, r3, #9
 80136ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ee:	4613      	mov	r3, r2
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	4413      	add	r3, r2
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4413      	add	r3, r2
 80136f8:	3306      	adds	r3, #6
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	4413      	add	r3, r2
 80136fe:	b2ca      	uxtb	r2, r1
 8013700:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6] |=  t[4] <<  4;
 8013702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013704:	4613      	mov	r3, r2
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	4413      	add	r3, r2
 801370a:	009b      	lsls	r3, r3, #2
 801370c:	4413      	add	r3, r2
 801370e:	3306      	adds	r3, #6
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	4413      	add	r3, r2
 8013714:	7818      	ldrb	r0, [r3, #0]
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	b2db      	uxtb	r3, r3
 801371a:	011b      	lsls	r3, r3, #4
 801371c:	b2d9      	uxtb	r1, r3
 801371e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013720:	4613      	mov	r3, r2
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	4413      	add	r3, r2
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	4413      	add	r3, r2
 801372a:	3306      	adds	r3, #6
 801372c:	687a      	ldr	r2, [r7, #4]
 801372e:	4413      	add	r3, r2
 8013730:	ea40 0201 	orr.w	r2, r0, r1
 8013734:	b2d2      	uxtb	r2, r2
 8013736:	701a      	strb	r2, [r3, #0]
    r[13*i+ 7]  =  t[4] >>  4;
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	0919      	lsrs	r1, r3, #4
 801373c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801373e:	4613      	mov	r3, r2
 8013740:	005b      	lsls	r3, r3, #1
 8013742:	4413      	add	r3, r2
 8013744:	009b      	lsls	r3, r3, #2
 8013746:	4413      	add	r3, r2
 8013748:	3307      	adds	r3, #7
 801374a:	687a      	ldr	r2, [r7, #4]
 801374c:	4413      	add	r3, r2
 801374e:	b2ca      	uxtb	r2, r1
 8013750:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8]  =  t[4] >> 12;
 8013752:	69fb      	ldr	r3, [r7, #28]
 8013754:	0b19      	lsrs	r1, r3, #12
 8013756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013758:	4613      	mov	r3, r2
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	4413      	add	r3, r2
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	4413      	add	r3, r2
 8013762:	3308      	adds	r3, #8
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	4413      	add	r3, r2
 8013768:	b2ca      	uxtb	r2, r1
 801376a:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8] |=  t[5] <<  1;
 801376c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801376e:	4613      	mov	r3, r2
 8013770:	005b      	lsls	r3, r3, #1
 8013772:	4413      	add	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4413      	add	r3, r2
 8013778:	3308      	adds	r3, #8
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	4413      	add	r3, r2
 801377e:	7818      	ldrb	r0, [r3, #0]
 8013780:	6a3b      	ldr	r3, [r7, #32]
 8013782:	b2db      	uxtb	r3, r3
 8013784:	005b      	lsls	r3, r3, #1
 8013786:	b2d9      	uxtb	r1, r3
 8013788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801378a:	4613      	mov	r3, r2
 801378c:	005b      	lsls	r3, r3, #1
 801378e:	4413      	add	r3, r2
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	4413      	add	r3, r2
 8013794:	3308      	adds	r3, #8
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	4413      	add	r3, r2
 801379a:	ea40 0201 	orr.w	r2, r0, r1
 801379e:	b2d2      	uxtb	r2, r2
 80137a0:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9]  =  t[5] >>  7;
 80137a2:	6a3b      	ldr	r3, [r7, #32]
 80137a4:	09d9      	lsrs	r1, r3, #7
 80137a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137a8:	4613      	mov	r3, r2
 80137aa:	005b      	lsls	r3, r3, #1
 80137ac:	4413      	add	r3, r2
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	4413      	add	r3, r2
 80137b2:	3309      	adds	r3, #9
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	4413      	add	r3, r2
 80137b8:	b2ca      	uxtb	r2, r1
 80137ba:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9] |=  t[6] <<  6;
 80137bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137be:	4613      	mov	r3, r2
 80137c0:	005b      	lsls	r3, r3, #1
 80137c2:	4413      	add	r3, r2
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	4413      	add	r3, r2
 80137c8:	3309      	adds	r3, #9
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	4413      	add	r3, r2
 80137ce:	7818      	ldrb	r0, [r3, #0]
 80137d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d2:	b2db      	uxtb	r3, r3
 80137d4:	019b      	lsls	r3, r3, #6
 80137d6:	b2d9      	uxtb	r1, r3
 80137d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137da:	4613      	mov	r3, r2
 80137dc:	005b      	lsls	r3, r3, #1
 80137de:	4413      	add	r3, r2
 80137e0:	009b      	lsls	r3, r3, #2
 80137e2:	4413      	add	r3, r2
 80137e4:	3309      	adds	r3, #9
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	4413      	add	r3, r2
 80137ea:	ea40 0201 	orr.w	r2, r0, r1
 80137ee:	b2d2      	uxtb	r2, r2
 80137f0:	701a      	strb	r2, [r3, #0]
    r[13*i+10]  =  t[6] >>  2;
 80137f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f4:	0899      	lsrs	r1, r3, #2
 80137f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137f8:	4613      	mov	r3, r2
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	4413      	add	r3, r2
 80137fe:	009b      	lsls	r3, r3, #2
 8013800:	4413      	add	r3, r2
 8013802:	330a      	adds	r3, #10
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	4413      	add	r3, r2
 8013808:	b2ca      	uxtb	r2, r1
 801380a:	701a      	strb	r2, [r3, #0]
    r[13*i+11]  =  t[6] >> 10;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	0a99      	lsrs	r1, r3, #10
 8013810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013812:	4613      	mov	r3, r2
 8013814:	005b      	lsls	r3, r3, #1
 8013816:	4413      	add	r3, r2
 8013818:	009b      	lsls	r3, r3, #2
 801381a:	4413      	add	r3, r2
 801381c:	330b      	adds	r3, #11
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	4413      	add	r3, r2
 8013822:	b2ca      	uxtb	r2, r1
 8013824:	701a      	strb	r2, [r3, #0]
    r[13*i+11] |=  t[7] <<  3;
 8013826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013828:	4613      	mov	r3, r2
 801382a:	005b      	lsls	r3, r3, #1
 801382c:	4413      	add	r3, r2
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	4413      	add	r3, r2
 8013832:	330b      	adds	r3, #11
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	4413      	add	r3, r2
 8013838:	7818      	ldrb	r0, [r3, #0]
 801383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383c:	b2db      	uxtb	r3, r3
 801383e:	00db      	lsls	r3, r3, #3
 8013840:	b2d9      	uxtb	r1, r3
 8013842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013844:	4613      	mov	r3, r2
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	4413      	add	r3, r2
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	4413      	add	r3, r2
 801384e:	330b      	adds	r3, #11
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	4413      	add	r3, r2
 8013854:	ea40 0201 	orr.w	r2, r0, r1
 8013858:	b2d2      	uxtb	r2, r2
 801385a:	701a      	strb	r2, [r3, #0]
    r[13*i+12]  =  t[7] >>  5;
 801385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385e:	0959      	lsrs	r1, r3, #5
 8013860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013862:	4613      	mov	r3, r2
 8013864:	005b      	lsls	r3, r3, #1
 8013866:	4413      	add	r3, r2
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	4413      	add	r3, r2
 801386c:	330c      	adds	r3, #12
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	4413      	add	r3, r2
 8013872:	b2ca      	uxtb	r2, r1
 8013874:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/8; ++i) {
 8013876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013878:	3301      	adds	r3, #1
 801387a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387e:	2b1f      	cmp	r3, #31
 8013880:	f67f ae4e 	bls.w	8013520 <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013884:	bf00      	nop
 8013886:	bf00      	nop
 8013888:	3734      	adds	r7, #52	; 0x34
 801388a:	46bd      	mov	sp, r7
 801388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013890:	4770      	bx	lr

08013892 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 8013892:	b480      	push	{r7}
 8013894:	b085      	sub	sp, #20
 8013896:	af00      	add	r7, sp, #0
 8013898:	6078      	str	r0, [r7, #4]
 801389a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 801389c:	2300      	movs	r3, #0
 801389e:	60fb      	str	r3, [r7, #12]
 80138a0:	e294      	b.n	8013dcc <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x53a>
    r->coeffs[8*i+0]  = a[13*i+0];
 80138a2:	68fa      	ldr	r2, [r7, #12]
 80138a4:	4613      	mov	r3, r2
 80138a6:	005b      	lsls	r3, r3, #1
 80138a8:	4413      	add	r3, r2
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	4413      	add	r3, r2
 80138ae:	683a      	ldr	r2, [r7, #0]
 80138b0:	4413      	add	r3, r2
 80138b2:	7819      	ldrb	r1, [r3, #0]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	00da      	lsls	r2, r3, #3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	00da      	lsls	r2, r3, #3
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138c8:	4619      	mov	r1, r3
 80138ca:	68fa      	ldr	r2, [r7, #12]
 80138cc:	4613      	mov	r3, r2
 80138ce:	005b      	lsls	r3, r3, #1
 80138d0:	4413      	add	r3, r2
 80138d2:	009b      	lsls	r3, r3, #2
 80138d4:	4413      	add	r3, r2
 80138d6:	3301      	adds	r3, #1
 80138d8:	683a      	ldr	r2, [r7, #0]
 80138da:	4413      	add	r3, r2
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	021b      	lsls	r3, r3, #8
 80138e0:	4319      	orrs	r1, r3
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	00da      	lsls	r2, r3, #3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] &= 0x1FFF;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	00da      	lsls	r2, r3, #3
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138f6:	68fa      	ldr	r2, [r7, #12]
 80138f8:	00d2      	lsls	r2, r2, #3
 80138fa:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8013904:	68fa      	ldr	r2, [r7, #12]
 8013906:	4613      	mov	r3, r2
 8013908:	005b      	lsls	r3, r3, #1
 801390a:	4413      	add	r3, r2
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	4413      	add	r3, r2
 8013910:	3301      	adds	r3, #1
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	4413      	add	r3, r2
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	095b      	lsrs	r3, r3, #5
 801391a:	b2d9      	uxtb	r1, r3
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	00db      	lsls	r3, r3, #3
 8013920:	1c5a      	adds	r2, r3, #1
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	00db      	lsls	r3, r3, #3
 801392c:	1c5a      	adds	r2, r3, #1
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013934:	4619      	mov	r1, r3
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	4613      	mov	r3, r2
 801393a:	005b      	lsls	r3, r3, #1
 801393c:	4413      	add	r3, r2
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	4413      	add	r3, r2
 8013942:	3302      	adds	r3, #2
 8013944:	683a      	ldr	r2, [r7, #0]
 8013946:	4413      	add	r3, r2
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	00db      	lsls	r3, r3, #3
 801394c:	4319      	orrs	r1, r3
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	00db      	lsls	r3, r3, #3
 8013952:	1c5a      	adds	r2, r3, #1
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	00db      	lsls	r3, r3, #3
 801395e:	1c5a      	adds	r2, r3, #1
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013966:	4619      	mov	r1, r3
 8013968:	68fa      	ldr	r2, [r7, #12]
 801396a:	4613      	mov	r3, r2
 801396c:	005b      	lsls	r3, r3, #1
 801396e:	4413      	add	r3, r2
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	4413      	add	r3, r2
 8013974:	3303      	adds	r3, #3
 8013976:	683a      	ldr	r2, [r7, #0]
 8013978:	4413      	add	r3, r2
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	02db      	lsls	r3, r3, #11
 801397e:	4319      	orrs	r1, r3
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	00db      	lsls	r3, r3, #3
 8013984:	1c5a      	adds	r2, r3, #1
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] &= 0x1FFF;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	1c5a      	adds	r2, r3, #1
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	00d2      	lsls	r2, r2, #3
 801399c:	3201      	adds	r2, #1
 801399e:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	4613      	mov	r3, r2
 80139ac:	005b      	lsls	r3, r3, #1
 80139ae:	4413      	add	r3, r2
 80139b0:	009b      	lsls	r3, r3, #2
 80139b2:	4413      	add	r3, r2
 80139b4:	3303      	adds	r3, #3
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	4413      	add	r3, r2
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	089b      	lsrs	r3, r3, #2
 80139be:	b2d9      	uxtb	r1, r3
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	00db      	lsls	r3, r3, #3
 80139c4:	1c9a      	adds	r2, r3, #2
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	00db      	lsls	r3, r3, #3
 80139d0:	1c9a      	adds	r2, r3, #2
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d8:	4619      	mov	r1, r3
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	4613      	mov	r3, r2
 80139de:	005b      	lsls	r3, r3, #1
 80139e0:	4413      	add	r3, r2
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	4413      	add	r3, r2
 80139e6:	3304      	adds	r3, #4
 80139e8:	683a      	ldr	r2, [r7, #0]
 80139ea:	4413      	add	r3, r2
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	019b      	lsls	r3, r3, #6
 80139f0:	4319      	orrs	r1, r3
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	00db      	lsls	r3, r3, #3
 80139f6:	1c9a      	adds	r2, r3, #2
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] &= 0x1FFF;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	00db      	lsls	r3, r3, #3
 8013a02:	1c9a      	adds	r2, r3, #2
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a0a:	68fa      	ldr	r2, [r7, #12]
 8013a0c:	00d2      	lsls	r2, r2, #3
 8013a0e:	3202      	adds	r2, #2
 8013a10:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8013a1a:	68fa      	ldr	r2, [r7, #12]
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	005b      	lsls	r3, r3, #1
 8013a20:	4413      	add	r3, r2
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	4413      	add	r3, r2
 8013a26:	3304      	adds	r3, #4
 8013a28:	683a      	ldr	r2, [r7, #0]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	09db      	lsrs	r3, r3, #7
 8013a30:	b2d9      	uxtb	r1, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	00db      	lsls	r3, r3, #3
 8013a36:	1cda      	adds	r2, r3, #3
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	00db      	lsls	r3, r3, #3
 8013a42:	1cda      	adds	r2, r3, #3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	4613      	mov	r3, r2
 8013a50:	005b      	lsls	r3, r3, #1
 8013a52:	4413      	add	r3, r2
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	4413      	add	r3, r2
 8013a58:	3305      	adds	r3, #5
 8013a5a:	683a      	ldr	r2, [r7, #0]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	005b      	lsls	r3, r3, #1
 8013a62:	4319      	orrs	r1, r3
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	00db      	lsls	r3, r3, #3
 8013a68:	1cda      	adds	r2, r3, #3
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	1cda      	adds	r2, r3, #3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	4613      	mov	r3, r2
 8013a82:	005b      	lsls	r3, r3, #1
 8013a84:	4413      	add	r3, r2
 8013a86:	009b      	lsls	r3, r3, #2
 8013a88:	4413      	add	r3, r2
 8013a8a:	3306      	adds	r3, #6
 8013a8c:	683a      	ldr	r2, [r7, #0]
 8013a8e:	4413      	add	r3, r2
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	025b      	lsls	r3, r3, #9
 8013a94:	4319      	orrs	r1, r3
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	00db      	lsls	r3, r3, #3
 8013a9a:	1cda      	adds	r2, r3, #3
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] &= 0x1FFF;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	00db      	lsls	r3, r3, #3
 8013aa6:	1cda      	adds	r2, r3, #3
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	00d2      	lsls	r2, r2, #3
 8013ab2:	3203      	adds	r2, #3
 8013ab4:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 8013abe:	68fa      	ldr	r2, [r7, #12]
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	005b      	lsls	r3, r3, #1
 8013ac4:	4413      	add	r3, r2
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	4413      	add	r3, r2
 8013aca:	3306      	adds	r3, #6
 8013acc:	683a      	ldr	r2, [r7, #0]
 8013ace:	4413      	add	r3, r2
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	091b      	lsrs	r3, r3, #4
 8013ad4:	b2d9      	uxtb	r1, r3
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	00db      	lsls	r3, r3, #3
 8013ada:	1d1a      	adds	r2, r3, #4
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	00db      	lsls	r3, r3, #3
 8013ae6:	1d1a      	adds	r2, r3, #4
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013aee:	4619      	mov	r1, r3
 8013af0:	68fa      	ldr	r2, [r7, #12]
 8013af2:	4613      	mov	r3, r2
 8013af4:	005b      	lsls	r3, r3, #1
 8013af6:	4413      	add	r3, r2
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	4413      	add	r3, r2
 8013afc:	3307      	adds	r3, #7
 8013afe:	683a      	ldr	r2, [r7, #0]
 8013b00:	4413      	add	r3, r2
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	011b      	lsls	r3, r3, #4
 8013b06:	4319      	orrs	r1, r3
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	00db      	lsls	r3, r3, #3
 8013b0c:	1d1a      	adds	r2, r3, #4
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	00db      	lsls	r3, r3, #3
 8013b18:	1d1a      	adds	r2, r3, #4
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b20:	4619      	mov	r1, r3
 8013b22:	68fa      	ldr	r2, [r7, #12]
 8013b24:	4613      	mov	r3, r2
 8013b26:	005b      	lsls	r3, r3, #1
 8013b28:	4413      	add	r3, r2
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	4413      	add	r3, r2
 8013b2e:	3308      	adds	r3, #8
 8013b30:	683a      	ldr	r2, [r7, #0]
 8013b32:	4413      	add	r3, r2
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	031b      	lsls	r3, r3, #12
 8013b38:	4319      	orrs	r1, r3
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	00db      	lsls	r3, r3, #3
 8013b3e:	1d1a      	adds	r2, r3, #4
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] &= 0x1FFF;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	00db      	lsls	r3, r3, #3
 8013b4a:	1d1a      	adds	r2, r3, #4
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	00d2      	lsls	r2, r2, #3
 8013b56:	3204      	adds	r2, #4
 8013b58:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	4613      	mov	r3, r2
 8013b66:	005b      	lsls	r3, r3, #1
 8013b68:	4413      	add	r3, r2
 8013b6a:	009b      	lsls	r3, r3, #2
 8013b6c:	4413      	add	r3, r2
 8013b6e:	3308      	adds	r3, #8
 8013b70:	683a      	ldr	r2, [r7, #0]
 8013b72:	4413      	add	r3, r2
 8013b74:	781b      	ldrb	r3, [r3, #0]
 8013b76:	085b      	lsrs	r3, r3, #1
 8013b78:	b2d9      	uxtb	r1, r3
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	00db      	lsls	r3, r3, #3
 8013b7e:	1d5a      	adds	r2, r3, #5
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	00db      	lsls	r3, r3, #3
 8013b8a:	1d5a      	adds	r2, r3, #5
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b92:	4619      	mov	r1, r3
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	4613      	mov	r3, r2
 8013b98:	005b      	lsls	r3, r3, #1
 8013b9a:	4413      	add	r3, r2
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	4413      	add	r3, r2
 8013ba0:	3309      	adds	r3, #9
 8013ba2:	683a      	ldr	r2, [r7, #0]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	01db      	lsls	r3, r3, #7
 8013baa:	4319      	orrs	r1, r3
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	00db      	lsls	r3, r3, #3
 8013bb0:	1d5a      	adds	r2, r3, #5
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] &= 0x1FFF;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	00db      	lsls	r3, r3, #3
 8013bbc:	1d5a      	adds	r2, r3, #5
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bc4:	68fa      	ldr	r2, [r7, #12]
 8013bc6:	00d2      	lsls	r2, r2, #3
 8013bc8:	3205      	adds	r2, #5
 8013bca:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8013bd4:	68fa      	ldr	r2, [r7, #12]
 8013bd6:	4613      	mov	r3, r2
 8013bd8:	005b      	lsls	r3, r3, #1
 8013bda:	4413      	add	r3, r2
 8013bdc:	009b      	lsls	r3, r3, #2
 8013bde:	4413      	add	r3, r2
 8013be0:	3309      	adds	r3, #9
 8013be2:	683a      	ldr	r2, [r7, #0]
 8013be4:	4413      	add	r3, r2
 8013be6:	781b      	ldrb	r3, [r3, #0]
 8013be8:	099b      	lsrs	r3, r3, #6
 8013bea:	b2d9      	uxtb	r1, r3
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	00db      	lsls	r3, r3, #3
 8013bf0:	1d9a      	adds	r2, r3, #6
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	00db      	lsls	r3, r3, #3
 8013bfc:	1d9a      	adds	r2, r3, #6
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c04:	4619      	mov	r1, r3
 8013c06:	68fa      	ldr	r2, [r7, #12]
 8013c08:	4613      	mov	r3, r2
 8013c0a:	005b      	lsls	r3, r3, #1
 8013c0c:	4413      	add	r3, r2
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	4413      	add	r3, r2
 8013c12:	330a      	adds	r3, #10
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	4413      	add	r3, r2
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4319      	orrs	r1, r3
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	00db      	lsls	r3, r3, #3
 8013c22:	1d9a      	adds	r2, r3, #6
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	00db      	lsls	r3, r3, #3
 8013c2e:	1d9a      	adds	r2, r3, #6
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c36:	4619      	mov	r1, r3
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	005b      	lsls	r3, r3, #1
 8013c3e:	4413      	add	r3, r2
 8013c40:	009b      	lsls	r3, r3, #2
 8013c42:	4413      	add	r3, r2
 8013c44:	330b      	adds	r3, #11
 8013c46:	683a      	ldr	r2, [r7, #0]
 8013c48:	4413      	add	r3, r2
 8013c4a:	781b      	ldrb	r3, [r3, #0]
 8013c4c:	029b      	lsls	r3, r3, #10
 8013c4e:	4319      	orrs	r1, r3
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	00db      	lsls	r3, r3, #3
 8013c54:	1d9a      	adds	r2, r3, #6
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] &= 0x1FFF;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	1d9a      	adds	r2, r3, #6
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	00d2      	lsls	r2, r2, #3
 8013c6c:	3206      	adds	r2, #6
 8013c6e:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 8013c78:	68fa      	ldr	r2, [r7, #12]
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	005b      	lsls	r3, r3, #1
 8013c7e:	4413      	add	r3, r2
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	330b      	adds	r3, #11
 8013c86:	683a      	ldr	r2, [r7, #0]
 8013c88:	4413      	add	r3, r2
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	08db      	lsrs	r3, r3, #3
 8013c8e:	b2d9      	uxtb	r1, r3
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	00db      	lsls	r3, r3, #3
 8013c94:	1dda      	adds	r2, r3, #7
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	00db      	lsls	r3, r3, #3
 8013ca0:	1dda      	adds	r2, r3, #7
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca8:	4619      	mov	r1, r3
 8013caa:	68fa      	ldr	r2, [r7, #12]
 8013cac:	4613      	mov	r3, r2
 8013cae:	005b      	lsls	r3, r3, #1
 8013cb0:	4413      	add	r3, r2
 8013cb2:	009b      	lsls	r3, r3, #2
 8013cb4:	4413      	add	r3, r2
 8013cb6:	330c      	adds	r3, #12
 8013cb8:	683a      	ldr	r2, [r7, #0]
 8013cba:	4413      	add	r3, r2
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	015b      	lsls	r3, r3, #5
 8013cc0:	4319      	orrs	r1, r3
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	00db      	lsls	r3, r3, #3
 8013cc6:	1dda      	adds	r2, r3, #7
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] &= 0x1FFF;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	00db      	lsls	r3, r3, #3
 8013cd2:	1dda      	adds	r2, r3, #7
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cda:	68fa      	ldr	r2, [r7, #12]
 8013cdc:	00d2      	lsls	r2, r2, #3
 8013cde:	3207      	adds	r2, #7
 8013ce0:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	00da      	lsls	r2, r3, #3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cf4:	68fa      	ldr	r2, [r7, #12]
 8013cf6:	00d2      	lsls	r2, r2, #3
 8013cf8:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	00db      	lsls	r3, r3, #3
 8013d06:	1c5a      	adds	r2, r3, #1
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d0e:	68fa      	ldr	r2, [r7, #12]
 8013d10:	00d2      	lsls	r2, r2, #3
 8013d12:	3201      	adds	r2, #1
 8013d14:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	00db      	lsls	r3, r3, #3
 8013d22:	1c9a      	adds	r2, r3, #2
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	00d2      	lsls	r2, r2, #3
 8013d2e:	3202      	adds	r2, #2
 8013d30:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	00db      	lsls	r3, r3, #3
 8013d3e:	1cda      	adds	r2, r3, #3
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	00d2      	lsls	r2, r2, #3
 8013d4a:	3203      	adds	r2, #3
 8013d4c:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	00db      	lsls	r3, r3, #3
 8013d5a:	1d1a      	adds	r2, r3, #4
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	00d2      	lsls	r2, r2, #3
 8013d66:	3204      	adds	r2, #4
 8013d68:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	00db      	lsls	r3, r3, #3
 8013d76:	1d5a      	adds	r2, r3, #5
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d7e:	68fa      	ldr	r2, [r7, #12]
 8013d80:	00d2      	lsls	r2, r2, #3
 8013d82:	3205      	adds	r2, #5
 8013d84:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	00db      	lsls	r3, r3, #3
 8013d92:	1d9a      	adds	r2, r3, #6
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d9a:	68fa      	ldr	r2, [r7, #12]
 8013d9c:	00d2      	lsls	r2, r2, #3
 8013d9e:	3206      	adds	r2, #6
 8013da0:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	00db      	lsls	r3, r3, #3
 8013dae:	1dda      	adds	r2, r3, #7
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013db6:	68fa      	ldr	r2, [r7, #12]
 8013db8:	00d2      	lsls	r2, r2, #3
 8013dba:	3207      	adds	r2, #7
 8013dbc:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/8; ++i) {
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	60fb      	str	r3, [r7, #12]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2b1f      	cmp	r3, #31
 8013dd0:	f67f ad67 	bls.w	80138a2 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013dd4:	bf00      	nop
 8013dd6:	bf00      	nop
 8013dd8:	3714      	adds	r7, #20
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr

08013de2 <pqcrystals_dilithium2aes_r_ref_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 8013de2:	b480      	push	{r7}
 8013de4:	b089      	sub	sp, #36	; 0x24
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
 8013dea:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8013dec:	2300      	movs	r3, #0
 8013dee:	61fb      	str	r3, [r7, #28]
 8013df0:	e0cb      	b.n	8013f8a <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x1a8>
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8013df2:	69fb      	ldr	r3, [r7, #28]
 8013df4:	009a      	lsls	r2, r3, #2
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dfc:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013e00:	60fb      	str	r3, [r7, #12]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	009b      	lsls	r3, r3, #2
 8013e06:	1c5a      	adds	r2, r3, #1
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e0e:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013e12:	613b      	str	r3, [r7, #16]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8013e14:	69fb      	ldr	r3, [r7, #28]
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	1c9a      	adds	r2, r3, #2
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e20:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013e24:	617b      	str	r3, [r7, #20]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	1cda      	adds	r2, r3, #3
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e32:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013e36:	61bb      	str	r3, [r7, #24]

    r[9*i+0]  = t[0];
 8013e38:	68f9      	ldr	r1, [r7, #12]
 8013e3a:	69fa      	ldr	r2, [r7, #28]
 8013e3c:	4613      	mov	r3, r2
 8013e3e:	00db      	lsls	r3, r3, #3
 8013e40:	4413      	add	r3, r2
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	4413      	add	r3, r2
 8013e46:	b2ca      	uxtb	r2, r1
 8013e48:	701a      	strb	r2, [r3, #0]
    r[9*i+1]  = t[0] >> 8;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	0a19      	lsrs	r1, r3, #8
 8013e4e:	69fa      	ldr	r2, [r7, #28]
 8013e50:	4613      	mov	r3, r2
 8013e52:	00db      	lsls	r3, r3, #3
 8013e54:	4413      	add	r3, r2
 8013e56:	3301      	adds	r3, #1
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	4413      	add	r3, r2
 8013e5c:	b2ca      	uxtb	r2, r1
 8013e5e:	701a      	strb	r2, [r3, #0]
    r[9*i+2]  = t[0] >> 16;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	0c19      	lsrs	r1, r3, #16
 8013e64:	69fa      	ldr	r2, [r7, #28]
 8013e66:	4613      	mov	r3, r2
 8013e68:	00db      	lsls	r3, r3, #3
 8013e6a:	4413      	add	r3, r2
 8013e6c:	3302      	adds	r3, #2
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	4413      	add	r3, r2
 8013e72:	b2ca      	uxtb	r2, r1
 8013e74:	701a      	strb	r2, [r3, #0]
    r[9*i+2] |= t[1] << 2;
 8013e76:	69fa      	ldr	r2, [r7, #28]
 8013e78:	4613      	mov	r3, r2
 8013e7a:	00db      	lsls	r3, r3, #3
 8013e7c:	4413      	add	r3, r2
 8013e7e:	3302      	adds	r3, #2
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	4413      	add	r3, r2
 8013e84:	7818      	ldrb	r0, [r3, #0]
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	b2db      	uxtb	r3, r3
 8013e8a:	009b      	lsls	r3, r3, #2
 8013e8c:	b2d9      	uxtb	r1, r3
 8013e8e:	69fa      	ldr	r2, [r7, #28]
 8013e90:	4613      	mov	r3, r2
 8013e92:	00db      	lsls	r3, r3, #3
 8013e94:	4413      	add	r3, r2
 8013e96:	3302      	adds	r3, #2
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	4413      	add	r3, r2
 8013e9c:	ea40 0201 	orr.w	r2, r0, r1
 8013ea0:	b2d2      	uxtb	r2, r2
 8013ea2:	701a      	strb	r2, [r3, #0]
    r[9*i+3]  = t[1] >> 6;
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	0999      	lsrs	r1, r3, #6
 8013ea8:	69fa      	ldr	r2, [r7, #28]
 8013eaa:	4613      	mov	r3, r2
 8013eac:	00db      	lsls	r3, r3, #3
 8013eae:	4413      	add	r3, r2
 8013eb0:	3303      	adds	r3, #3
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	4413      	add	r3, r2
 8013eb6:	b2ca      	uxtb	r2, r1
 8013eb8:	701a      	strb	r2, [r3, #0]
    r[9*i+4]  = t[1] >> 14;
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	0b99      	lsrs	r1, r3, #14
 8013ebe:	69fa      	ldr	r2, [r7, #28]
 8013ec0:	4613      	mov	r3, r2
 8013ec2:	00db      	lsls	r3, r3, #3
 8013ec4:	4413      	add	r3, r2
 8013ec6:	3304      	adds	r3, #4
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	4413      	add	r3, r2
 8013ecc:	b2ca      	uxtb	r2, r1
 8013ece:	701a      	strb	r2, [r3, #0]
    r[9*i+4] |= t[2] << 4;
 8013ed0:	69fa      	ldr	r2, [r7, #28]
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	00db      	lsls	r3, r3, #3
 8013ed6:	4413      	add	r3, r2
 8013ed8:	3304      	adds	r3, #4
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	4413      	add	r3, r2
 8013ede:	7818      	ldrb	r0, [r3, #0]
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	b2db      	uxtb	r3, r3
 8013ee4:	011b      	lsls	r3, r3, #4
 8013ee6:	b2d9      	uxtb	r1, r3
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	4613      	mov	r3, r2
 8013eec:	00db      	lsls	r3, r3, #3
 8013eee:	4413      	add	r3, r2
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	ea40 0201 	orr.w	r2, r0, r1
 8013efa:	b2d2      	uxtb	r2, r2
 8013efc:	701a      	strb	r2, [r3, #0]
    r[9*i+5]  = t[2] >> 4;
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	0919      	lsrs	r1, r3, #4
 8013f02:	69fa      	ldr	r2, [r7, #28]
 8013f04:	4613      	mov	r3, r2
 8013f06:	00db      	lsls	r3, r3, #3
 8013f08:	4413      	add	r3, r2
 8013f0a:	3305      	adds	r3, #5
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	4413      	add	r3, r2
 8013f10:	b2ca      	uxtb	r2, r1
 8013f12:	701a      	strb	r2, [r3, #0]
    r[9*i+6]  = t[2] >> 12;
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	0b19      	lsrs	r1, r3, #12
 8013f18:	69fa      	ldr	r2, [r7, #28]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	4413      	add	r3, r2
 8013f20:	3306      	adds	r3, #6
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	4413      	add	r3, r2
 8013f26:	b2ca      	uxtb	r2, r1
 8013f28:	701a      	strb	r2, [r3, #0]
    r[9*i+6] |= t[3] << 6;
 8013f2a:	69fa      	ldr	r2, [r7, #28]
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	00db      	lsls	r3, r3, #3
 8013f30:	4413      	add	r3, r2
 8013f32:	3306      	adds	r3, #6
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	4413      	add	r3, r2
 8013f38:	7818      	ldrb	r0, [r3, #0]
 8013f3a:	69bb      	ldr	r3, [r7, #24]
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	019b      	lsls	r3, r3, #6
 8013f40:	b2d9      	uxtb	r1, r3
 8013f42:	69fa      	ldr	r2, [r7, #28]
 8013f44:	4613      	mov	r3, r2
 8013f46:	00db      	lsls	r3, r3, #3
 8013f48:	4413      	add	r3, r2
 8013f4a:	3306      	adds	r3, #6
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	4413      	add	r3, r2
 8013f50:	ea40 0201 	orr.w	r2, r0, r1
 8013f54:	b2d2      	uxtb	r2, r2
 8013f56:	701a      	strb	r2, [r3, #0]
    r[9*i+7]  = t[3] >> 2;
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	0899      	lsrs	r1, r3, #2
 8013f5c:	69fa      	ldr	r2, [r7, #28]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	4413      	add	r3, r2
 8013f64:	3307      	adds	r3, #7
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	4413      	add	r3, r2
 8013f6a:	b2ca      	uxtb	r2, r1
 8013f6c:	701a      	strb	r2, [r3, #0]
    r[9*i+8]  = t[3] >> 10;
 8013f6e:	69bb      	ldr	r3, [r7, #24]
 8013f70:	0a99      	lsrs	r1, r3, #10
 8013f72:	69fa      	ldr	r2, [r7, #28]
 8013f74:	4613      	mov	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	4413      	add	r3, r2
 8013f7a:	3308      	adds	r3, #8
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	4413      	add	r3, r2
 8013f80:	b2ca      	uxtb	r2, r1
 8013f82:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8013f84:	69fb      	ldr	r3, [r7, #28]
 8013f86:	3301      	adds	r3, #1
 8013f88:	61fb      	str	r3, [r7, #28]
 8013f8a:	69fb      	ldr	r3, [r7, #28]
 8013f8c:	2b3f      	cmp	r3, #63	; 0x3f
 8013f8e:	f67f af30 	bls.w	8013df2 <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x10>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8013f92:	bf00      	nop
 8013f94:	bf00      	nop
 8013f96:	3724      	adds	r7, #36	; 0x24
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr

08013fa0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 8013fa0:	b480      	push	{r7}
 8013fa2:	b085      	sub	sp, #20
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8013faa:	2300      	movs	r3, #0
 8013fac:	60fb      	str	r3, [r7, #12]
 8013fae:	e15e      	b.n	801426e <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 8013fb0:	68fa      	ldr	r2, [r7, #12]
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	00db      	lsls	r3, r3, #3
 8013fb6:	4413      	add	r3, r2
 8013fb8:	683a      	ldr	r2, [r7, #0]
 8013fba:	4413      	add	r3, r2
 8013fbc:	7819      	ldrb	r1, [r3, #0]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	009a      	lsls	r2, r3, #2
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	009a      	lsls	r2, r3, #2
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	68fa      	ldr	r2, [r7, #12]
 8013fd6:	4613      	mov	r3, r2
 8013fd8:	00db      	lsls	r3, r3, #3
 8013fda:	4413      	add	r3, r2
 8013fdc:	3301      	adds	r3, #1
 8013fde:	683a      	ldr	r2, [r7, #0]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	021b      	lsls	r3, r3, #8
 8013fe6:	4319      	orrs	r1, r3
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	009a      	lsls	r2, r3, #2
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	009a      	lsls	r2, r3, #2
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	4613      	mov	r3, r2
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	4413      	add	r3, r2
 8014006:	3302      	adds	r3, #2
 8014008:	683a      	ldr	r2, [r7, #0]
 801400a:	4413      	add	r3, r2
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	041b      	lsls	r3, r3, #16
 8014010:	4319      	orrs	r1, r3
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	009a      	lsls	r2, r3, #2
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	009a      	lsls	r2, r3, #2
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	0092      	lsls	r2, r2, #2
 801402a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8014034:	68fa      	ldr	r2, [r7, #12]
 8014036:	4613      	mov	r3, r2
 8014038:	00db      	lsls	r3, r3, #3
 801403a:	4413      	add	r3, r2
 801403c:	3302      	adds	r3, #2
 801403e:	683a      	ldr	r2, [r7, #0]
 8014040:	4413      	add	r3, r2
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	089b      	lsrs	r3, r3, #2
 8014046:	b2d9      	uxtb	r1, r3
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	009b      	lsls	r3, r3, #2
 801404c:	1c5a      	adds	r2, r3, #1
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	1c5a      	adds	r2, r3, #1
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014060:	4619      	mov	r1, r3
 8014062:	68fa      	ldr	r2, [r7, #12]
 8014064:	4613      	mov	r3, r2
 8014066:	00db      	lsls	r3, r3, #3
 8014068:	4413      	add	r3, r2
 801406a:	3303      	adds	r3, #3
 801406c:	683a      	ldr	r2, [r7, #0]
 801406e:	4413      	add	r3, r2
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	019b      	lsls	r3, r3, #6
 8014074:	4319      	orrs	r1, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	009b      	lsls	r3, r3, #2
 801407a:	1c5a      	adds	r2, r3, #1
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	009b      	lsls	r3, r3, #2
 8014086:	1c5a      	adds	r2, r3, #1
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801408e:	4619      	mov	r1, r3
 8014090:	68fa      	ldr	r2, [r7, #12]
 8014092:	4613      	mov	r3, r2
 8014094:	00db      	lsls	r3, r3, #3
 8014096:	4413      	add	r3, r2
 8014098:	3304      	adds	r3, #4
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	4413      	add	r3, r2
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	039b      	lsls	r3, r3, #14
 80140a2:	4319      	orrs	r1, r3
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	1c5a      	adds	r2, r3, #1
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	009b      	lsls	r3, r3, #2
 80140b4:	1c5a      	adds	r2, r3, #1
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	0092      	lsls	r2, r2, #2
 80140c0:	3201      	adds	r2, #1
 80140c2:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 80140cc:	68fa      	ldr	r2, [r7, #12]
 80140ce:	4613      	mov	r3, r2
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	4413      	add	r3, r2
 80140d4:	3304      	adds	r3, #4
 80140d6:	683a      	ldr	r2, [r7, #0]
 80140d8:	4413      	add	r3, r2
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	091b      	lsrs	r3, r3, #4
 80140de:	b2d9      	uxtb	r1, r3
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	009b      	lsls	r3, r3, #2
 80140e4:	1c9a      	adds	r2, r3, #2
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	1c9a      	adds	r2, r3, #2
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140f8:	4619      	mov	r1, r3
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	4613      	mov	r3, r2
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	4413      	add	r3, r2
 8014102:	3305      	adds	r3, #5
 8014104:	683a      	ldr	r2, [r7, #0]
 8014106:	4413      	add	r3, r2
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	011b      	lsls	r3, r3, #4
 801410c:	4319      	orrs	r1, r3
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	1c9a      	adds	r2, r3, #2
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	1c9a      	adds	r2, r3, #2
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014126:	4619      	mov	r1, r3
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	4613      	mov	r3, r2
 801412c:	00db      	lsls	r3, r3, #3
 801412e:	4413      	add	r3, r2
 8014130:	3306      	adds	r3, #6
 8014132:	683a      	ldr	r2, [r7, #0]
 8014134:	4413      	add	r3, r2
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	031b      	lsls	r3, r3, #12
 801413a:	4319      	orrs	r1, r3
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	009b      	lsls	r3, r3, #2
 8014140:	1c9a      	adds	r2, r3, #2
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	009b      	lsls	r3, r3, #2
 801414c:	1c9a      	adds	r2, r3, #2
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014154:	68fa      	ldr	r2, [r7, #12]
 8014156:	0092      	lsls	r2, r2, #2
 8014158:	3202      	adds	r2, #2
 801415a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	4613      	mov	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	4413      	add	r3, r2
 801416c:	3306      	adds	r3, #6
 801416e:	683a      	ldr	r2, [r7, #0]
 8014170:	4413      	add	r3, r2
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	099b      	lsrs	r3, r3, #6
 8014176:	b2d9      	uxtb	r1, r3
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	1cda      	adds	r2, r3, #3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	1cda      	adds	r2, r3, #3
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014190:	4619      	mov	r1, r3
 8014192:	68fa      	ldr	r2, [r7, #12]
 8014194:	4613      	mov	r3, r2
 8014196:	00db      	lsls	r3, r3, #3
 8014198:	4413      	add	r3, r2
 801419a:	3307      	adds	r3, #7
 801419c:	683a      	ldr	r2, [r7, #0]
 801419e:	4413      	add	r3, r2
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	009b      	lsls	r3, r3, #2
 80141a4:	4319      	orrs	r1, r3
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	1cda      	adds	r2, r3, #3
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	1cda      	adds	r2, r3, #3
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141be:	4619      	mov	r1, r3
 80141c0:	68fa      	ldr	r2, [r7, #12]
 80141c2:	4613      	mov	r3, r2
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	4413      	add	r3, r2
 80141c8:	3308      	adds	r3, #8
 80141ca:	683a      	ldr	r2, [r7, #0]
 80141cc:	4413      	add	r3, r2
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	029b      	lsls	r3, r3, #10
 80141d2:	4319      	orrs	r1, r3
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	009b      	lsls	r3, r3, #2
 80141d8:	1cda      	adds	r2, r3, #3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	1cda      	adds	r2, r3, #3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	0092      	lsls	r2, r2, #2
 80141f0:	3203      	adds	r2, #3
 80141f2:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	009a      	lsls	r2, r3, #2
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	0092      	lsls	r2, r2, #2
 801420a:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	009b      	lsls	r3, r3, #2
 8014218:	1c5a      	adds	r2, r3, #1
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014220:	68fa      	ldr	r2, [r7, #12]
 8014222:	0092      	lsls	r2, r2, #2
 8014224:	3201      	adds	r2, #1
 8014226:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	009b      	lsls	r3, r3, #2
 8014234:	1c9a      	adds	r2, r3, #2
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801423c:	68fa      	ldr	r2, [r7, #12]
 801423e:	0092      	lsls	r2, r2, #2
 8014240:	3202      	adds	r2, #2
 8014242:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	1cda      	adds	r2, r3, #3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014258:	68fa      	ldr	r2, [r7, #12]
 801425a:	0092      	lsls	r2, r2, #2
 801425c:	3203      	adds	r2, #3
 801425e:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	3301      	adds	r3, #1
 801426c:	60fb      	str	r3, [r7, #12]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	2b3f      	cmp	r3, #63	; 0x3f
 8014272:	f67f ae9d 	bls.w	8013fb0 <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8014276:	bf00      	nop
 8014278:	bf00      	nop
 801427a:	3714      	adds	r7, #20
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr

08014284 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 8014284:	b480      	push	{r7}
 8014286:	b085      	sub	sp, #20
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q_-1)/88
  for(i = 0; i < N_/4; ++i) {
 801428e:	2300      	movs	r3, #0
 8014290:	60fb      	str	r3, [r7, #12]
 8014292:	e081      	b.n	8014398 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x114>
    r[3*i+0]  = a->coeffs[4*i+0];
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	009a      	lsls	r2, r3, #2
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801429e:	68fa      	ldr	r2, [r7, #12]
 80142a0:	4613      	mov	r3, r2
 80142a2:	005b      	lsls	r3, r3, #1
 80142a4:	4413      	add	r3, r2
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	4413      	add	r3, r2
 80142aa:	b2ca      	uxtb	r2, r1
 80142ac:	701a      	strb	r2, [r3, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	4613      	mov	r3, r2
 80142b2:	005b      	lsls	r3, r3, #1
 80142b4:	4413      	add	r3, r2
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	4413      	add	r3, r2
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	b25a      	sxtb	r2, r3
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	1c59      	adds	r1, r3, #1
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142ca:	019b      	lsls	r3, r3, #6
 80142cc:	b25b      	sxtb	r3, r3
 80142ce:	4313      	orrs	r3, r2
 80142d0:	b259      	sxtb	r1, r3
 80142d2:	68fa      	ldr	r2, [r7, #12]
 80142d4:	4613      	mov	r3, r2
 80142d6:	005b      	lsls	r3, r3, #1
 80142d8:	4413      	add	r3, r2
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	4413      	add	r3, r2
 80142de:	b2ca      	uxtb	r2, r1
 80142e0:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	1c5a      	adds	r2, r3, #1
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142ee:	1099      	asrs	r1, r3, #2
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	4613      	mov	r3, r2
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	4413      	add	r3, r2
 80142f8:	3301      	adds	r3, #1
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	4413      	add	r3, r2
 80142fe:	b2ca      	uxtb	r2, r1
 8014300:	701a      	strb	r2, [r3, #0]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	4613      	mov	r3, r2
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	4413      	add	r3, r2
 801430a:	3301      	adds	r3, #1
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	4413      	add	r3, r2
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	b25a      	sxtb	r2, r3
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	1c99      	adds	r1, r3, #2
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014320:	011b      	lsls	r3, r3, #4
 8014322:	b25b      	sxtb	r3, r3
 8014324:	4313      	orrs	r3, r2
 8014326:	b259      	sxtb	r1, r3
 8014328:	68fa      	ldr	r2, [r7, #12]
 801432a:	4613      	mov	r3, r2
 801432c:	005b      	lsls	r3, r3, #1
 801432e:	4413      	add	r3, r2
 8014330:	3301      	adds	r3, #1
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	4413      	add	r3, r2
 8014336:	b2ca      	uxtb	r2, r1
 8014338:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	1c9a      	adds	r2, r3, #2
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014346:	1119      	asrs	r1, r3, #4
 8014348:	68fa      	ldr	r2, [r7, #12]
 801434a:	4613      	mov	r3, r2
 801434c:	005b      	lsls	r3, r3, #1
 801434e:	4413      	add	r3, r2
 8014350:	3302      	adds	r3, #2
 8014352:	687a      	ldr	r2, [r7, #4]
 8014354:	4413      	add	r3, r2
 8014356:	b2ca      	uxtb	r2, r1
 8014358:	701a      	strb	r2, [r3, #0]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 801435a:	68fa      	ldr	r2, [r7, #12]
 801435c:	4613      	mov	r3, r2
 801435e:	005b      	lsls	r3, r3, #1
 8014360:	4413      	add	r3, r2
 8014362:	3302      	adds	r3, #2
 8014364:	687a      	ldr	r2, [r7, #4]
 8014366:	4413      	add	r3, r2
 8014368:	781b      	ldrb	r3, [r3, #0]
 801436a:	b25a      	sxtb	r2, r3
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	1cd9      	adds	r1, r3, #3
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	b25b      	sxtb	r3, r3
 801437c:	4313      	orrs	r3, r2
 801437e:	b259      	sxtb	r1, r3
 8014380:	68fa      	ldr	r2, [r7, #12]
 8014382:	4613      	mov	r3, r2
 8014384:	005b      	lsls	r3, r3, #1
 8014386:	4413      	add	r3, r2
 8014388:	3302      	adds	r3, #2
 801438a:	687a      	ldr	r2, [r7, #4]
 801438c:	4413      	add	r3, r2
 801438e:	b2ca      	uxtb	r2, r1
 8014390:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	3301      	adds	r3, #1
 8014396:	60fb      	str	r3, [r7, #12]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2b3f      	cmp	r3, #63	; 0x3f
 801439c:	f67f af7a 	bls.w	8014294 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x10>
  for(i = 0; i < N_/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 80143a0:	bf00      	nop
 80143a2:	bf00      	nop
 80143a4:	3714      	adds	r7, #20
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr

080143ae <polyvec_matrix_poly_smul_montgomery>:
*
* Arguments:   - polyveck t: output vector after multiplication of A*s1+s2
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors s1 and s2
**************************************************/
void polyvec_matrix_poly_smul_montgomery(polyveck* t, const uint8_t rho[], const uint8_t rhoprime[]) {
 80143ae:	b580      	push	{r7, lr}
 80143b0:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80143b4:	b086      	sub	sp, #24
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	f107 0318 	add.w	r3, r7, #24
 80143bc:	f843 0c0c 	str.w	r0, [r3, #-12]
 80143c0:	f107 0318 	add.w	r3, r7, #24
 80143c4:	f843 1c10 	str.w	r1, [r3, #-16]
 80143c8:	f107 0318 	add.w	r3, r7, #24
 80143cc:	f843 2c14 	str.w	r2, [r3, #-20]
	poly acc;
	poly a_ij;
	poly s1_j;
	poly s2_j;

	for (i = 0; i < K; ++i) {
 80143d0:	2300      	movs	r3, #0
 80143d2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80143d6:	f102 0214 	add.w	r2, r2, #20
 80143da:	6013      	str	r3, [r2, #0]
 80143dc:	e09d      	b.n	801451a <polyvec_matrix_poly_smul_montgomery+0x16c>
		memset(&acc, 0, sizeof(acc));
 80143de:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80143e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80143e6:	2100      	movs	r1, #0
 80143e8:	4618      	mov	r0, r3
 80143ea:	f001 fb47 	bl	8015a7c <memset>
		for (j = 0; j < L; ++j) {
 80143ee:	2300      	movs	r3, #0
 80143f0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80143f4:	f102 0210 	add.w	r2, r2, #16
 80143f8:	6013      	str	r3, [r2, #0]
 80143fa:	e04b      	b.n	8014494 <polyvec_matrix_poly_smul_montgomery+0xe6>
			poly_uniform(&a_ij, rho, (i << 8) + j); // generate A[i][j]
 80143fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014400:	f103 0314 	add.w	r3, r3, #20
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	b29b      	uxth	r3, r3
 8014408:	021b      	lsls	r3, r3, #8
 801440a:	b29a      	uxth	r2, r3
 801440c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014410:	f103 0310 	add.w	r3, r3, #16
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	b29b      	uxth	r3, r3
 8014418:	4413      	add	r3, r2
 801441a:	b29a      	uxth	r2, r3
 801441c:	f107 0318 	add.w	r3, r7, #24
 8014420:	4619      	mov	r1, r3
 8014422:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8014426:	f851 1c10 	ldr.w	r1, [r1, #-16]
 801442a:	4618      	mov	r0, r3
 801442c:	f7fe fce4 	bl	8012df8 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			poly_uniform_eta(&s1_j, rhoprime, j);		// generate s1[j]
 8014430:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014434:	f103 0310 	add.w	r3, r3, #16
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	b29a      	uxth	r2, r3
 801443c:	f107 0318 	add.w	r3, r7, #24
 8014440:	4619      	mov	r1, r3
 8014442:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8014446:	f851 1c14 	ldr.w	r1, [r1, #-20]
 801444a:	4618      	mov	r0, r3
 801444c:	f7fe fdd9 	bl	8013002 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
			poly_ntt(&s1_j);						// transform s1[j] to ntt
 8014450:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8014454:	4618      	mov	r0, r3
 8014456:	f7fe fb66 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &s1_j); // multiply A[i][j] on s1[j]
 801445a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801445e:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8014462:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8014466:	4618      	mov	r0, r3
 8014468:	f7fe fb75 	bl	8012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&acc, &acc, &a_ij);
 801446c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8014470:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 8014474:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8014478:	4618      	mov	r0, r3
 801447a:	f7fe faf1 	bl	8012a60 <pqcrystals_dilithium2aes_r_ref_poly_add>
		for (j = 0; j < L; ++j) {
 801447e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014482:	f103 0310 	add.w	r3, r3, #16
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	3301      	adds	r3, #1
 801448a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801448e:	f102 0210 	add.w	r2, r2, #16
 8014492:	6013      	str	r3, [r2, #0]
 8014494:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014498:	f103 0310 	add.w	r3, r3, #16
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2b03      	cmp	r3, #3
 80144a0:	d9ac      	bls.n	80143fc <polyvec_matrix_poly_smul_montgomery+0x4e>
		}
		poly_reduce(&acc);
 80144a2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7fe fa9e 	bl	80129e8 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&acc); // invert accumulated result from ntt
 80144ac:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fe fb44 	bl	8012b3e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
		poly_uniform_eta(&s2_j, rhoprime, L + i); // generate s2[j]
 80144b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80144ba:	f103 0314 	add.w	r3, r3, #20
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	3304      	adds	r3, #4
 80144c4:	b29a      	uxth	r2, r3
 80144c6:	f107 0318 	add.w	r3, r7, #24
 80144ca:	4619      	mov	r1, r3
 80144cc:	f107 0318 	add.w	r3, r7, #24
 80144d0:	3b08      	subs	r3, #8
 80144d2:	f851 1c14 	ldr.w	r1, [r1, #-20]
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7fe fd93 	bl	8013002 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		poly_add(&t->vec[i], &acc, &s2_j);	// add accumulator and s2[j]
 80144dc:	f107 0318 	add.w	r3, r7, #24
 80144e0:	461a      	mov	r2, r3
 80144e2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80144e6:	f103 0314 	add.w	r3, r3, #20
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	029b      	lsls	r3, r3, #10
 80144ee:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 80144f2:	18d0      	adds	r0, r2, r3
 80144f4:	f107 0318 	add.w	r3, r7, #24
 80144f8:	3b08      	subs	r3, #8
 80144fa:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 80144fe:	461a      	mov	r2, r3
 8014500:	f7fe faae 	bl	8012a60 <pqcrystals_dilithium2aes_r_ref_poly_add>
	for (i = 0; i < K; ++i) {
 8014504:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014508:	f103 0314 	add.w	r3, r3, #20
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	3301      	adds	r3, #1
 8014510:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8014514:	f102 0214 	add.w	r2, r2, #20
 8014518:	6013      	str	r3, [r2, #0]
 801451a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801451e:	f103 0314 	add.w	r3, r3, #20
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b03      	cmp	r3, #3
 8014526:	f67f af5a 	bls.w	80143de <polyvec_matrix_poly_smul_montgomery+0x30>
	}
}
 801452a:	bf00      	nop
 801452c:	bf00      	nop
 801452e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8014532:	3718      	adds	r7, #24
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <polyvec_matrix_poly_ymul_montgomery>:
*
* Arguments:   - polyveck w: output vector after multiplication of A*y
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors y
**************************************************/
void polyvec_matrix_poly_ymul_montgomery(polyveck* w, const uint8_t rho[], const uint8_t rhoprime[], uint16_t nonce) {
 8014538:	b590      	push	{r4, r7, lr}
 801453a:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 801453e:	af00      	add	r7, sp, #0
 8014540:	f607 0418 	addw	r4, r7, #2072	; 0x818
 8014544:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 8014548:	6020      	str	r0, [r4, #0]
 801454a:	f607 0018 	addw	r0, r7, #2072	; 0x818
 801454e:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 8014552:	6001      	str	r1, [r0, #0]
 8014554:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8014558:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 801455c:	600a      	str	r2, [r1, #0]
 801455e:	461a      	mov	r2, r3
 8014560:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014564:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 8014568:	801a      	strh	r2, [r3, #0]
	unsigned int i, j;
	poly a_ij;
	poly y_j;
	for (i = 0; i < K; ++i) {
 801456a:	2300      	movs	r3, #0
 801456c:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8014570:	e085      	b.n	801467e <polyvec_matrix_poly_ymul_montgomery+0x146>
		memset(&w->vec[i], 0, sizeof(uint32_t) * N_);
 8014572:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014576:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801457a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801457e:	029b      	lsls	r3, r3, #10
 8014580:	6812      	ldr	r2, [r2, #0]
 8014582:	4413      	add	r3, r2
 8014584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014588:	2100      	movs	r1, #0
 801458a:	4618      	mov	r0, r3
 801458c:	f001 fa76 	bl	8015a7c <memset>
		for (j = 0; j < L; ++j) {
 8014590:	2300      	movs	r3, #0
 8014592:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8014596:	e051      	b.n	801463c <polyvec_matrix_poly_ymul_montgomery+0x104>
			poly_uniform(&a_ij, rho, (i << 8) + j); 		// generate A[i][j]
 8014598:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801459c:	b29b      	uxth	r3, r3
 801459e:	021b      	lsls	r3, r3, #8
 80145a0:	b29a      	uxth	r2, r3
 80145a2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	4413      	add	r3, r2
 80145aa:	b29a      	uxth	r2, r3
 80145ac:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80145b0:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80145b4:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 80145b8:	6819      	ldr	r1, [r3, #0]
 80145ba:	f7fe fc1d 	bl	8012df8 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
		    for(int k = 0; k < N_; k++){
		    	USB_DEBUG_MSG("%d", a_ij.coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
			poly_uniform_gamma1(&y_j, rhoprime, L * nonce + j);	// generate y[j]
 80145be:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80145c2:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 80145c6:	881b      	ldrh	r3, [r3, #0]
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	b29a      	uxth	r2, r3
 80145cc:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	4413      	add	r3, r2
 80145d4:	b29a      	uxth	r2, r3
 80145d6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80145da:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80145de:	f107 0010 	add.w	r0, r7, #16
 80145e2:	6819      	ldr	r1, [r3, #0]
 80145e4:	f7fe fd73 	bl	80130ce <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
		    for(int k = 0; k < N_; k++){
		    	USB_DEBUG_MSG("%d", y_j.coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
			poly_ntt(&y_j);										// transform y[j] to ntt
 80145e8:	f107 0310 	add.w	r3, r7, #16
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7fe fa9a 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &y_j); // multiply A[i][j] on y[j]
 80145f2:	f107 0210 	add.w	r2, r7, #16
 80145f6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80145fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80145fe:	4618      	mov	r0, r3
 8014600:	f7fe faa9 	bl	8012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&w->vec[i], &w->vec[i], &a_ij);
 8014604:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014608:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801460c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014610:	029b      	lsls	r3, r3, #10
 8014612:	6812      	ldr	r2, [r2, #0]
 8014614:	18d0      	adds	r0, r2, r3
 8014616:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801461a:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801461e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014622:	029b      	lsls	r3, r3, #10
 8014624:	6812      	ldr	r2, [r2, #0]
 8014626:	4413      	add	r3, r2
 8014628:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801462c:	4619      	mov	r1, r3
 801462e:	f7fe fa17 	bl	8012a60 <pqcrystals_dilithium2aes_r_ref_poly_add>
		for (j = 0; j < L; ++j) {
 8014632:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8014636:	3301      	adds	r3, #1
 8014638:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 801463c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8014640:	2b03      	cmp	r3, #3
 8014642:	d9a9      	bls.n	8014598 <polyvec_matrix_poly_ymul_montgomery+0x60>
		}
		poly_reduce(&w->vec[i]);
 8014644:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014648:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801464c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014650:	029b      	lsls	r3, r3, #10
 8014652:	6812      	ldr	r2, [r2, #0]
 8014654:	4413      	add	r3, r2
 8014656:	4618      	mov	r0, r3
 8014658:	f7fe f9c6 	bl	80129e8 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&w->vec[i]); // invert accumulated result from ntt
 801465c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014660:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8014664:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014668:	029b      	lsls	r3, r3, #10
 801466a:	6812      	ldr	r2, [r2, #0]
 801466c:	4413      	add	r3, r2
 801466e:	4618      	mov	r0, r3
 8014670:	f7fe fa65 	bl	8012b3e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	for (i = 0; i < K; ++i) {
 8014674:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014678:	3301      	adds	r3, #1
 801467a:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 801467e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014682:	2b03      	cmp	r3, #3
 8014684:	f67f af75 	bls.w	8014572 <polyvec_matrix_poly_ymul_montgomery+0x3a>
		    	USB_DEBUG_MSG("%d", w->vec[i].coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
	}
}
 8014688:	bf00      	nop
 801468a:	bf00      	nop
 801468c:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8014690:	46bd      	mov	sp, r7
 8014692:	bd90      	pop	{r4, r7, pc}

08014694 <polyvec_compute_z_montgomery>:
* Arguments:   - polyvecl z: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s1
*              - const uint8_t y_rhoprime[]: byte array containing seed for vector y
**************************************************/
void polyvec_compute_z_montgomery(polyvecl* z, const poly* cp, const uint8_t s_rhoprime[], const uint8_t y_rhoprime[], uint16_t nonce) {
 8014694:	b590      	push	{r4, r7, lr}
 8014696:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 801469a:	af00      	add	r7, sp, #0
 801469c:	f607 0418 	addw	r4, r7, #2072	; 0x818
 80146a0:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 80146a4:	6020      	str	r0, [r4, #0]
 80146a6:	f607 0018 	addw	r0, r7, #2072	; 0x818
 80146aa:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 80146ae:	6001      	str	r1, [r0, #0]
 80146b0:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80146b4:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 80146b8:	600a      	str	r2, [r1, #0]
 80146ba:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80146be:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 80146c2:	6013      	str	r3, [r2, #0]
	unsigned int j;
	poly s1_j;
	poly y_j;

	for (j = 0; j < L; ++j) {
 80146c4:	2300      	movs	r3, #0
 80146c6:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80146ca:	e053      	b.n	8014774 <polyvec_compute_z_montgomery+0xe0>
		poly_uniform_eta(&s1_j, s_rhoprime, j);		// generate s1[j]
 80146cc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80146d0:	b29a      	uxth	r2, r3
 80146d2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80146d6:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80146da:	f207 4014 	addw	r0, r7, #1044	; 0x414
 80146de:	6819      	ldr	r1, [r3, #0]
 80146e0:	f7fe fc8f 	bl	8013002 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		for(int k = 0; k < N_; k++){
			USB_DEBUG_MSG("%d", s1_j.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_ntt(&s1_j);								// transform s1[j] to ntt
 80146e4:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7fe fa1c 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		poly_uniform_gamma1(&y_j, y_rhoprime, L * nonce + j);	// generate y[j]; nonce == j
 80146ee:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	4413      	add	r3, r2
 80146fe:	b29a      	uxth	r2, r3
 8014700:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014704:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8014708:	f107 0014 	add.w	r0, r7, #20
 801470c:	6819      	ldr	r1, [r3, #0]
 801470e:	f7fe fcde 	bl	80130ce <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
		for(int k = 0; k < N_; k++){
			USB_DEBUG_MSG("%d", y_j.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_pointwise_montgomery(&s1_j, cp, &s1_j); // multiply cp on s1[j]
 8014712:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8014716:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801471a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801471e:	f207 4014 	addw	r0, r7, #1044	; 0x414
 8014722:	6819      	ldr	r1, [r3, #0]
 8014724:	f7fe fa17 	bl	8012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		poly_invntt_tomont(&s1_j);					// invert multiplication result
 8014728:	f207 4314 	addw	r3, r7, #1044	; 0x414
 801472c:	4618      	mov	r0, r3
 801472e:	f7fe fa06 	bl	8012b3e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>

		poly_add(&z->vec[j], &y_j, &s1_j);			// z = y + cp*s1.
 8014732:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014736:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801473a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801473e:	029b      	lsls	r3, r3, #10
 8014740:	6812      	ldr	r2, [r2, #0]
 8014742:	4413      	add	r3, r2
 8014744:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8014748:	f107 0114 	add.w	r1, r7, #20
 801474c:	4618      	mov	r0, r3
 801474e:	f7fe f987 	bl	8012a60 <pqcrystals_dilithium2aes_r_ref_poly_add>
		poly_reduce(&z->vec[j]);
 8014752:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014756:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801475a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801475e:	029b      	lsls	r3, r3, #10
 8014760:	6812      	ldr	r2, [r2, #0]
 8014762:	4413      	add	r3, r2
 8014764:	4618      	mov	r0, r3
 8014766:	f7fe f93f 	bl	80129e8 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
	for (j = 0; j < L; ++j) {
 801476a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801476e:	3301      	adds	r3, #1
 8014770:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8014774:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014778:	2b03      	cmp	r3, #3
 801477a:	d9a7      	bls.n	80146cc <polyvec_compute_z_montgomery+0x38>
			USB_DEBUG_MSG("%d", z->vec[j].coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
	}
}
 801477c:	bf00      	nop
 801477e:	bf00      	nop
 8014780:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8014784:	46bd      	mov	sp, r7
 8014786:	bd90      	pop	{r4, r7, pc}

08014788 <polyvec_compute_h_montgomery>:
*
* Arguments:   - polyveck h: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s2
**************************************************/
void polyvec_compute_h_montgomery(polyveck* h, const poly* cp, const uint8_t s_rhoprime[]) {
 8014788:	b580      	push	{r7, lr}
 801478a:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 801478e:	af00      	add	r7, sp, #0
 8014790:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014794:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014798:	6018      	str	r0, [r3, #0]
 801479a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801479e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80147a2:	6019      	str	r1, [r3, #0]
 80147a4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147a8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80147ac:	601a      	str	r2, [r3, #0]
	unsigned int j;
	poly s2_j;

	for (j = 0; j < K; ++j) {
 80147ae:	2300      	movs	r3, #0
 80147b0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80147b4:	e035      	b.n	8014822 <polyvec_compute_h_montgomery+0x9a>
		poly_uniform_eta(&s2_j, s_rhoprime, L + j);		// generate s2[j]
 80147b6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80147ba:	b29b      	uxth	r3, r3
 80147bc:	3304      	adds	r3, #4
 80147be:	b29a      	uxth	r2, r3
 80147c0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147c4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80147c8:	f107 0014 	add.w	r0, r7, #20
 80147cc:	6819      	ldr	r1, [r3, #0]
 80147ce:	f7fe fc18 	bl	8013002 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		for(int k = 0; k < N_; k++){
			USB_DEBUG_MSG("%d", s2_j.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_ntt(&s2_j);								// transform s2[j] to ntt
 80147d2:	f107 0314 	add.w	r3, r7, #20
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7fe f9a5 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		poly_pointwise_montgomery(&h->vec[j], cp, &s2_j); // h_j = cp*s2_j
 80147dc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147e0:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 80147e4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80147e8:	029b      	lsls	r3, r3, #10
 80147ea:	6812      	ldr	r2, [r2, #0]
 80147ec:	18d0      	adds	r0, r2, r3
 80147ee:	f107 0214 	add.w	r2, r7, #20
 80147f2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147f6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80147fa:	6819      	ldr	r1, [r3, #0]
 80147fc:	f7fe f9ab 	bl	8012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		poly_invntt_tomont(&h->vec[j]);					// invert multiplication result
 8014800:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014804:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8014808:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801480c:	029b      	lsls	r3, r3, #10
 801480e:	6812      	ldr	r2, [r2, #0]
 8014810:	4413      	add	r3, r2
 8014812:	4618      	mov	r0, r3
 8014814:	f7fe f993 	bl	8012b3e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	for (j = 0; j < K; ++j) {
 8014818:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801481c:	3301      	adds	r3, #1
 801481e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8014822:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014826:	2b03      	cmp	r3, #3
 8014828:	d9c5      	bls.n	80147b6 <polyvec_compute_h_montgomery+0x2e>
			USB_DEBUG_MSG("%d", h->vec[j].coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
	}
}
 801482a:	bf00      	nop
 801482c:	bf00      	nop
 801482e:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}

08014836 <polyvec_reconstruct_w1_montgomery>:
* Arguments:   - polyveck *w: output vector
* 			   - const uint8_t sig[CRYPTO_BYTES]: signature
* 			   - const uint8_t pk[CRYPTO_PUBLICKEYBYTES]: public key
*
**************************************************/
void polyvec_reconstruct_w1_montgomery(polyveck* w, const uint8_t sig[CRYPTO_BYTES], const uint8_t pk[CRYPTO_PUBLICKEYBYTES]) {
 8014836:	b580      	push	{r7, lr}
 8014838:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 801483c:	b086      	sub	sp, #24
 801483e:	af00      	add	r7, sp, #0
 8014840:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014844:	f843 0c4c 	str.w	r0, [r3, #-76]
 8014848:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801484c:	f843 1c50 	str.w	r1, [r3, #-80]
 8014850:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014854:	f843 2c54 	str.w	r2, [r3, #-84]
	poly cp;
	poly a_ij;
	poly z_j;
	poly t1_i;

	unpack_pk_rho(rho, pk);
 8014858:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801485c:	461a      	mov	r2, r3
 801485e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8014862:	f103 0310 	add.w	r3, r3, #16
 8014866:	f852 1c54 	ldr.w	r1, [r2, #-84]
 801486a:	4618      	mov	r0, r3
 801486c:	f7fe f889 	bl	8012982 <unpack_pk_rho>
	unpack_sig_c(c, sig);
 8014870:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014874:	461a      	mov	r2, r3
 8014876:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801487a:	f103 0310 	add.w	r3, r3, #16
 801487e:	f852 1c50 	ldr.w	r1, [r2, #-80]
 8014882:	4618      	mov	r0, r3
 8014884:	f7fe f84a 	bl	801291c <unpack_sig_c>
	poly_challenge(&cp, c);
 8014888:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801488c:	f102 0210 	add.w	r2, r2, #16
 8014890:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8014894:	4611      	mov	r1, r2
 8014896:	4618      	mov	r0, r3
 8014898:	f7fe fc51 	bl	801313e <pqcrystals_dilithium2aes_r_ref_poly_challenge>
	poly_ntt(&cp);
 801489c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7fe f940 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
        USB_DEBUG_MSG("%d",rho[k]);
    }
    USB_DEBUG_MSG("\r\n");
#endif

	for (i = 0; i < K; ++i) {
 80148a6:	2300      	movs	r3, #0
 80148a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80148ac:	f102 0214 	add.w	r2, r2, #20
 80148b0:	6013      	str	r3, [r2, #0]
 80148b2:	e0eb      	b.n	8014a8c <polyvec_reconstruct_w1_montgomery+0x256>
		memset(&w->vec[i], 0, sizeof(uint32_t) * N_);
 80148b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148b8:	461a      	mov	r2, r3
 80148ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80148be:	f103 0314 	add.w	r3, r3, #20
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	029b      	lsls	r3, r3, #10
 80148c6:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80148ca:	4413      	add	r3, r2
 80148cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80148d0:	2100      	movs	r1, #0
 80148d2:	4618      	mov	r0, r3
 80148d4:	f001 f8d2 	bl	8015a7c <memset>
		for (j = 0; j < L; ++j) {
 80148d8:	2300      	movs	r3, #0
 80148da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80148de:	f102 0210 	add.w	r2, r2, #16
 80148e2:	6013      	str	r3, [r2, #0]
 80148e4:	e05d      	b.n	80149a2 <polyvec_reconstruct_w1_montgomery+0x16c>
			poly_uniform(&a_ij, rho, (i << 8) + j); 		// generate A[i][j]
 80148e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80148ea:	f103 0314 	add.w	r3, r3, #20
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	021b      	lsls	r3, r3, #8
 80148f4:	b29a      	uxth	r2, r3
 80148f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80148fa:	f103 0310 	add.w	r3, r3, #16
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	b29b      	uxth	r3, r3
 8014902:	4413      	add	r3, r2
 8014904:	b29a      	uxth	r2, r3
 8014906:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 801490a:	f101 0110 	add.w	r1, r1, #16
 801490e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8014912:	4618      	mov	r0, r3
 8014914:	f7fe fa70 	bl	8012df8 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			unpack_sig_z(&z_j, j, sig);						// extract z_j from signature
 8014918:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801491c:	461a      	mov	r2, r3
 801491e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8014922:	f852 2c50 	ldr.w	r2, [r2, #-80]
 8014926:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 801492a:	f101 0110 	add.w	r1, r1, #16
 801492e:	6809      	ldr	r1, [r1, #0]
 8014930:	4618      	mov	r0, r3
 8014932:	f7fe f810 	bl	8012956 <unpack_sig_z>
			poly_ntt(&z_j);									// transform z[j] to ntt
 8014936:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801493a:	4618      	mov	r0, r3
 801493c:	f7fe f8f3 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			for (int k = 0; k < N_; k++) {
				USB_DEBUG_MSG("%d", z_j.coeffs[k]);
			}
			USB_DEBUG_MSG("\r\n");
#endif
			poly_pointwise_montgomery(&a_ij, &a_ij, &z_j);  // multiply A[i][j] on z[j]
 8014940:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8014944:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8014948:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801494c:	4618      	mov	r0, r3
 801494e:	f7fe f902 	bl	8012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&w->vec[i], &w->vec[i], &a_ij);		// accumulate result
 8014952:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014956:	461a      	mov	r2, r3
 8014958:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801495c:	f103 0314 	add.w	r3, r3, #20
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	029b      	lsls	r3, r3, #10
 8014964:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014968:	18d0      	adds	r0, r2, r3
 801496a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801496e:	461a      	mov	r2, r3
 8014970:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014974:	f103 0314 	add.w	r3, r3, #20
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	029b      	lsls	r3, r3, #10
 801497c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014980:	4413      	add	r3, r2
 8014982:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8014986:	4619      	mov	r1, r3
 8014988:	f7fe f86a 	bl	8012a60 <pqcrystals_dilithium2aes_r_ref_poly_add>
		for (j = 0; j < L; ++j) {
 801498c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014990:	f103 0310 	add.w	r3, r3, #16
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	3301      	adds	r3, #1
 8014998:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 801499c:	f102 0210 	add.w	r2, r2, #16
 80149a0:	6013      	str	r3, [r2, #0]
 80149a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80149a6:	f103 0310 	add.w	r3, r3, #16
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b03      	cmp	r3, #3
 80149ae:	d99a      	bls.n	80148e6 <polyvec_reconstruct_w1_montgomery+0xb0>
		}
		// compute c*2^d*t1
		unpack_pk_t1(&t1_i, i, pk);
 80149b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80149b4:	461a      	mov	r2, r3
 80149b6:	f107 0318 	add.w	r3, r7, #24
 80149ba:	3b08      	subs	r3, #8
 80149bc:	f852 2c54 	ldr.w	r2, [r2, #-84]
 80149c0:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80149c4:	f101 0114 	add.w	r1, r1, #20
 80149c8:	6809      	ldr	r1, [r1, #0]
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7fd fff6 	bl	80129bc <unpack_pk_t1>
		for (int k = 0; k < N_; k++) {
			USB_DEBUG_MSG("%d", t1_i.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_shiftl(&t1_i);
 80149d0:	f107 0318 	add.w	r3, r7, #24
 80149d4:	3b08      	subs	r3, #8
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7fe f888 	bl	8012aec <pqcrystals_dilithium2aes_r_ref_poly_shiftl>
		poly_ntt(&t1_i);
 80149dc:	f107 0318 	add.w	r3, r7, #24
 80149e0:	3b08      	subs	r3, #8
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7fe f89f 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		poly_pointwise_montgomery(&t1_i, &cp, &t1_i);
 80149e8:	f107 0218 	add.w	r2, r7, #24
 80149ec:	3a08      	subs	r2, #8
 80149ee:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 80149f2:	f107 0318 	add.w	r3, r7, #24
 80149f6:	3b08      	subs	r3, #8
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fe f8ac 	bl	8012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>

		poly_sub(&w->vec[i], &w->vec[i], &t1_i);
 80149fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014a02:	461a      	mov	r2, r3
 8014a04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014a08:	f103 0314 	add.w	r3, r3, #20
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	029b      	lsls	r3, r3, #10
 8014a10:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014a14:	18d0      	adds	r0, r2, r3
 8014a16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014a20:	f103 0314 	add.w	r3, r3, #20
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	029b      	lsls	r3, r3, #10
 8014a28:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014a2c:	18d1      	adds	r1, r2, r3
 8014a2e:	f107 0318 	add.w	r3, r7, #24
 8014a32:	3b08      	subs	r3, #8
 8014a34:	461a      	mov	r2, r3
 8014a36:	f7fe f836 	bl	8012aa6 <pqcrystals_dilithium2aes_r_ref_poly_sub>
		poly_reduce(&w->vec[i]);
 8014a3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014a3e:	461a      	mov	r2, r3
 8014a40:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014a44:	f103 0314 	add.w	r3, r3, #20
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	029b      	lsls	r3, r3, #10
 8014a4c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014a50:	4413      	add	r3, r2
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fd ffc8 	bl	80129e8 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&w->vec[i]); // invert accumulated result from ntt
 8014a58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014a62:	f103 0314 	add.w	r3, r3, #20
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	029b      	lsls	r3, r3, #10
 8014a6a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8014a6e:	4413      	add	r3, r2
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fe f864 	bl	8012b3e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	for (i = 0; i < K; ++i) {
 8014a76:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014a7a:	f103 0314 	add.w	r3, r3, #20
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	3301      	adds	r3, #1
 8014a82:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8014a86:	f102 0214 	add.w	r2, r2, #20
 8014a8a:	6013      	str	r3, [r2, #0]
 8014a8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8014a90:	f103 0314 	add.w	r3, r3, #20
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2b03      	cmp	r3, #3
 8014a98:	f67f af0c 	bls.w	80148b4 <polyvec_reconstruct_w1_montgomery+0x7e>
			USB_DEBUG_MSG("%d", w->vec[i].coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
	}
}
 8014a9c:	bf00      	nop
 8014a9e:	bf00      	nop
 8014aa0:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8014aa4:	3718      	adds	r7, #24
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b084      	sub	sp, #16
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	60fb      	str	r3, [r7, #12]
 8014ab8:	e00f      	b.n	8014ada <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	029b      	lsls	r3, r3, #10
 8014abe:	687a      	ldr	r2, [r7, #4]
 8014ac0:	4413      	add	r3, r2
 8014ac2:	6839      	ldr	r1, [r7, #0]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7fe f917 	bl	8012cf8 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 8014aca:	4603      	mov	r3, r0
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d001      	beq.n	8014ad4 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x2a>
      return 1;
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	e006      	b.n	8014ae2 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x38>
  for(i = 0; i < L; ++i)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	60fb      	str	r3, [r7, #12]
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2b03      	cmp	r3, #3
 8014ade:	d9ec      	bls.n	8014aba <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x10>

  return 0;
 8014ae0:	2300      	movs	r3, #0
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3710      	adds	r7, #16
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}

08014aea <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 8014aea:	b580      	push	{r7, lr}
 8014aec:	b084      	sub	sp, #16
 8014aee:	af00      	add	r7, sp, #0
 8014af0:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014af2:	2300      	movs	r3, #0
 8014af4:	60fb      	str	r3, [r7, #12]
 8014af6:	e009      	b.n	8014b0c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0x22>
    poly_reduce(&v->vec[i]);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	029b      	lsls	r3, r3, #10
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	4413      	add	r3, r2
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7fd ff71 	bl	80129e8 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
  for(i = 0; i < K; ++i)
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	3301      	adds	r3, #1
 8014b0a:	60fb      	str	r3, [r7, #12]
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2b03      	cmp	r3, #3
 8014b10:	d9f2      	bls.n	8014af8 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0xe>
}
 8014b12:	bf00      	nop
 8014b14:	bf00      	nop
 8014b16:	3710      	adds	r7, #16
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}

08014b1c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b084      	sub	sp, #16
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014b24:	2300      	movs	r3, #0
 8014b26:	60fb      	str	r3, [r7, #12]
 8014b28:	e009      	b.n	8014b3e <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0x22>
    poly_caddq(&v->vec[i]);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	029b      	lsls	r3, r3, #10
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	4413      	add	r3, r2
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fd ff76 	bl	8012a24 <pqcrystals_dilithium2aes_r_ref_poly_caddq>
  for(i = 0; i < K; ++i)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	60fb      	str	r3, [r7, #12]
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	2b03      	cmp	r3, #3
 8014b42:	d9f2      	bls.n	8014b2a <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0xe>
}
 8014b44:	bf00      	nop
 8014b46:	bf00      	nop
 8014b48:	3710      	adds	r7, #16
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}

08014b4e <pqcrystals_dilithium2aes_r_ref_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8014b4e:	b580      	push	{r7, lr}
 8014b50:	b086      	sub	sp, #24
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	60f8      	str	r0, [r7, #12]
 8014b56:	60b9      	str	r1, [r7, #8]
 8014b58:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	617b      	str	r3, [r7, #20]
 8014b5e:	e011      	b.n	8014b84 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	029b      	lsls	r3, r3, #10
 8014b64:	68fa      	ldr	r2, [r7, #12]
 8014b66:	18d0      	adds	r0, r2, r3
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	029b      	lsls	r3, r3, #10
 8014b6c:	68ba      	ldr	r2, [r7, #8]
 8014b6e:	18d1      	adds	r1, r2, r3
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	029b      	lsls	r3, r3, #10
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	4413      	add	r3, r2
 8014b78:	461a      	mov	r2, r3
 8014b7a:	f7fd ff71 	bl	8012a60 <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 0; i < K; ++i)
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	3301      	adds	r3, #1
 8014b82:	617b      	str	r3, [r7, #20]
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	2b03      	cmp	r3, #3
 8014b88:	d9ea      	bls.n	8014b60 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x12>
}
 8014b8a:	bf00      	nop
 8014b8c:	bf00      	nop
 8014b8e:	3718      	adds	r7, #24
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}

08014b94 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b086      	sub	sp, #24
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	60f8      	str	r0, [r7, #12]
 8014b9c:	60b9      	str	r1, [r7, #8]
 8014b9e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	617b      	str	r3, [r7, #20]
 8014ba4:	e011      	b.n	8014bca <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x36>
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	029b      	lsls	r3, r3, #10
 8014baa:	68fa      	ldr	r2, [r7, #12]
 8014bac:	18d0      	adds	r0, r2, r3
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	029b      	lsls	r3, r3, #10
 8014bb2:	68ba      	ldr	r2, [r7, #8]
 8014bb4:	18d1      	adds	r1, r2, r3
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	029b      	lsls	r3, r3, #10
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	f7fd ff71 	bl	8012aa6 <pqcrystals_dilithium2aes_r_ref_poly_sub>
  for(i = 0; i < K; ++i)
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	617b      	str	r3, [r7, #20]
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	2b03      	cmp	r3, #3
 8014bce:	d9ea      	bls.n	8014ba6 <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x12>
}
 8014bd0:	bf00      	nop
 8014bd2:	bf00      	nop
 8014bd4:	3718      	adds	r7, #24
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b084      	sub	sp, #16
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014be2:	2300      	movs	r3, #0
 8014be4:	60fb      	str	r3, [r7, #12]
 8014be6:	e009      	b.n	8014bfc <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0x22>
    poly_ntt(&v->vec[i]);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	029b      	lsls	r3, r3, #10
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	4413      	add	r3, r2
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7fd ff98 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  for(i = 0; i < K; ++i)
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	60fb      	str	r3, [r7, #12]
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	2b03      	cmp	r3, #3
 8014c00:	d9f2      	bls.n	8014be8 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0xe>
}
 8014c02:	bf00      	nop
 8014c04:	bf00      	nop
 8014c06:	3710      	adds	r7, #16
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014c14:	2300      	movs	r3, #0
 8014c16:	60fb      	str	r3, [r7, #12]
 8014c18:	e009      	b.n	8014c2e <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	029b      	lsls	r3, r3, #10
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	4413      	add	r3, r2
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fd ff8b 	bl	8012b3e <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
  for(i = 0; i < K; ++i)
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	60fb      	str	r3, [r7, #12]
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2b03      	cmp	r3, #3
 8014c32:	d9f2      	bls.n	8014c1a <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0xe>
}
 8014c34:	bf00      	nop
 8014c36:	bf00      	nop
 8014c38:	3710      	adds	r7, #16
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}

08014c3e <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>:

void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	b086      	sub	sp, #24
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	60f8      	str	r0, [r7, #12]
 8014c46:	60b9      	str	r1, [r7, #8]
 8014c48:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	617b      	str	r3, [r7, #20]
 8014c4e:	e00e      	b.n	8014c6e <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	029b      	lsls	r3, r3, #10
 8014c54:	68fa      	ldr	r2, [r7, #12]
 8014c56:	18d0      	adds	r0, r2, r3
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	029b      	lsls	r3, r3, #10
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	4413      	add	r3, r2
 8014c60:	461a      	mov	r2, r3
 8014c62:	68b9      	ldr	r1, [r7, #8]
 8014c64:	f7fd ff77 	bl	8012b56 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 0; i < K; ++i)
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	617b      	str	r3, [r7, #20]
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	2b03      	cmp	r3, #3
 8014c72:	d9ed      	bls.n	8014c50 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x12>
}
 8014c74:	bf00      	nop
 8014c76:	bf00      	nop
 8014c78:	3718      	adds	r7, #24
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b084      	sub	sp, #16
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
 8014c86:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014c88:	2300      	movs	r3, #0
 8014c8a:	60fb      	str	r3, [r7, #12]
 8014c8c:	e00f      	b.n	8014cae <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	029b      	lsls	r3, r3, #10
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	4413      	add	r3, r2
 8014c96:	6839      	ldr	r1, [r7, #0]
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f7fe f82d 	bl	8012cf8 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d001      	beq.n	8014ca8 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x2a>
      return 1;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e006      	b.n	8014cb6 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x38>
  for(i = 0; i < K; ++i)
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	3301      	adds	r3, #1
 8014cac:	60fb      	str	r3, [r7, #12]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2b03      	cmp	r3, #3
 8014cb2:	d9ec      	bls.n	8014c8e <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x10>

  return 0;
 8014cb4:	2300      	movs	r3, #0
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3710      	adds	r7, #16
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}

08014cbe <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8014cbe:	b580      	push	{r7, lr}
 8014cc0:	b086      	sub	sp, #24
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	60f8      	str	r0, [r7, #12]
 8014cc6:	60b9      	str	r1, [r7, #8]
 8014cc8:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014cca:	2300      	movs	r3, #0
 8014ccc:	617b      	str	r3, [r7, #20]
 8014cce:	e011      	b.n	8014cf4 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x36>
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	029b      	lsls	r3, r3, #10
 8014cd4:	68fa      	ldr	r2, [r7, #12]
 8014cd6:	18d0      	adds	r0, r2, r3
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	029b      	lsls	r3, r3, #10
 8014cdc:	68ba      	ldr	r2, [r7, #8]
 8014cde:	18d1      	adds	r1, r2, r3
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	029b      	lsls	r3, r3, #10
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	4413      	add	r3, r2
 8014ce8:	461a      	mov	r2, r3
 8014cea:	f7fd ff6a 	bl	8012bc2 <pqcrystals_dilithium2aes_r_ref_poly_power2round>
  for(i = 0; i < K; ++i)
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	617b      	str	r3, [r7, #20]
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	2b03      	cmp	r3, #3
 8014cf8:	d9ea      	bls.n	8014cd0 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x12>
}
 8014cfa:	bf00      	nop
 8014cfc:	bf00      	nop
 8014cfe:	3718      	adds	r7, #24
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014d10:	2300      	movs	r3, #0
 8014d12:	617b      	str	r3, [r7, #20]
 8014d14:	e011      	b.n	8014d3a <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x36>
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	029b      	lsls	r3, r3, #10
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	18d0      	adds	r0, r2, r3
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	029b      	lsls	r3, r3, #10
 8014d22:	68ba      	ldr	r2, [r7, #8]
 8014d24:	18d1      	adds	r1, r2, r3
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	029b      	lsls	r3, r3, #10
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	461a      	mov	r2, r3
 8014d30:	f7fd ff6b 	bl	8012c0a <pqcrystals_dilithium2aes_r_ref_poly_decompose>
  for(i = 0; i < K; ++i)
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	3301      	adds	r3, #1
 8014d38:	617b      	str	r3, [r7, #20]
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	2b03      	cmp	r3, #3
 8014d3e:	d9ea      	bls.n	8014d16 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x12>
}
 8014d40:	bf00      	nop
 8014d42:	bf00      	nop
 8014d44:	3718      	adds	r7, #24
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}

08014d4a <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
 8014d4a:	b580      	push	{r7, lr}
 8014d4c:	b086      	sub	sp, #24
 8014d4e:	af00      	add	r7, sp, #0
 8014d50:	60f8      	str	r0, [r7, #12]
 8014d52:	60b9      	str	r1, [r7, #8]
 8014d54:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8014d56:	2300      	movs	r3, #0
 8014d58:	613b      	str	r3, [r7, #16]

  for(i = 0; i < K; ++i)
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	617b      	str	r3, [r7, #20]
 8014d5e:	e015      	b.n	8014d8c <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x42>
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	029b      	lsls	r3, r3, #10
 8014d64:	68fa      	ldr	r2, [r7, #12]
 8014d66:	18d0      	adds	r0, r2, r3
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	029b      	lsls	r3, r3, #10
 8014d6c:	68ba      	ldr	r2, [r7, #8]
 8014d6e:	18d1      	adds	r1, r2, r3
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	029b      	lsls	r3, r3, #10
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	4413      	add	r3, r2
 8014d78:	461a      	mov	r2, r3
 8014d7a:	f7fd ff6a 	bl	8012c52 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>
 8014d7e:	4602      	mov	r2, r0
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	4413      	add	r3, r2
 8014d84:	613b      	str	r3, [r7, #16]
  for(i = 0; i < K; ++i)
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	617b      	str	r3, [r7, #20]
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	2b03      	cmp	r3, #3
 8014d90:	d9e6      	bls.n	8014d60 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x16>

  return s;
 8014d92:	693b      	ldr	r3, [r7, #16]
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3718      	adds	r7, #24
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <polyveck_use_hint_r>:

  for(i = 0; i < K; ++i)
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
}

void polyveck_use_hint_r(polyveck *w, const polyveck *u, const uint8_t h[N_*K]) {
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	60b9      	str	r1, [r7, #8]
 8014da6:	607a      	str	r2, [r7, #4]
  unsigned int i;

	for (i = 0; i < K; ++i)
 8014da8:	2300      	movs	r3, #0
 8014daa:	617b      	str	r3, [r7, #20]
 8014dac:	e011      	b.n	8014dd2 <polyveck_use_hint_r+0x36>
		poly_use_hint_r(&w->vec[i], &u->vec[i], &h[i*N_]);
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	029b      	lsls	r3, r3, #10
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	18d0      	adds	r0, r2, r3
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	029b      	lsls	r3, r3, #10
 8014dba:	68ba      	ldr	r2, [r7, #8]
 8014dbc:	18d1      	adds	r1, r2, r3
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	021b      	lsls	r3, r3, #8
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	4413      	add	r3, r2
 8014dc6:	461a      	mov	r2, r3
 8014dc8:	f7fd ff72 	bl	8012cb0 <poly_use_hint_r>
	for (i = 0; i < K; ++i)
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	3301      	adds	r3, #1
 8014dd0:	617b      	str	r3, [r7, #20]
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	2b03      	cmp	r3, #3
 8014dd6:	d9ea      	bls.n	8014dae <polyveck_use_hint_r+0x12>
}
 8014dd8:	bf00      	nop
 8014dda:	bf00      	nop
 8014ddc:	3718      	adds	r7, #24
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 8014de2:	b580      	push	{r7, lr}
 8014de4:	b084      	sub	sp, #16
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
 8014dea:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014dec:	2300      	movs	r3, #0
 8014dee:	60fb      	str	r3, [r7, #12]
 8014df0:	e011      	b.n	8014e16 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x34>
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 8014df2:	68fa      	ldr	r2, [r7, #12]
 8014df4:	4613      	mov	r3, r2
 8014df6:	005b      	lsls	r3, r3, #1
 8014df8:	4413      	add	r3, r2
 8014dfa:	019b      	lsls	r3, r3, #6
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	1898      	adds	r0, r3, r2
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	029b      	lsls	r3, r3, #10
 8014e06:	683a      	ldr	r2, [r7, #0]
 8014e08:	4413      	add	r3, r2
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	f7ff fa3a 	bl	8014284 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>
  for(i = 0; i < K; ++i)
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	3301      	adds	r3, #1
 8014e14:	60fb      	str	r3, [r7, #12]
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	2b03      	cmp	r3, #3
 8014e1a:	d9ea      	bls.n	8014df2 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x10>
}
 8014e1c:	bf00      	nop
 8014e1e:	bf00      	nop
 8014e20:	3710      	adds	r7, #16
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}

08014e26 <randombytes>:
#include <stdint.h>
#include <stdlib.h>
#include "randombytes.h"


void randombytes(RNG_HandleTypeDef *hrng, uint8_t *out, size_t outlen) {
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b08a      	sub	sp, #40	; 0x28
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	60f8      	str	r0, [r7, #12]
 8014e2e:	60b9      	str	r1, [r7, #8]
 8014e30:	607a      	str	r2, [r7, #4]
	uint32_t rand_int = 0;
 8014e32:	2300      	movs	r3, #0
 8014e34:	613b      	str	r3, [r7, #16]
	uint8_t *rand_int_byte = (uint8_t*)&rand_int;
 8014e36:	f107 0310 	add.w	r3, r7, #16
 8014e3a:	61fb      	str	r3, [r7, #28]
	uint32_t *int_out = (uint32_t*)out;
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	61bb      	str	r3, [r7, #24]
	int i = 0;
 8014e40:	2300      	movs	r3, #0
 8014e42:	627b      	str	r3, [r7, #36]	; 0x24
	int j = 0;
 8014e44:	2300      	movs	r3, #0
 8014e46:	623b      	str	r3, [r7, #32]

	for(; i < outlen/4; i++){
 8014e48:	e00a      	b.n	8014e60 <randombytes+0x3a>
		HAL_RNG_GenerateRandomNumber(hrng, &int_out[i]);
 8014e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	69ba      	ldr	r2, [r7, #24]
 8014e50:	4413      	add	r3, r2
 8014e52:	4619      	mov	r1, r3
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f7f0 fbba 	bl	80055ce <HAL_RNG_GenerateRandomNumber>
	for(; i < outlen/4; i++){
 8014e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	089a      	lsrs	r2, r3, #2
 8014e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d8ef      	bhi.n	8014e4a <randombytes+0x24>
	}

	int rem = outlen % 4;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f003 0303 	and.w	r3, r3, #3
 8014e70:	617b      	str	r3, [r7, #20]
	if (rem) {
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d018      	beq.n	8014eaa <randombytes+0x84>
		HAL_RNG_GenerateRandomNumber(hrng, &rand_int);
 8014e78:	f107 0310 	add.w	r3, r7, #16
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	68f8      	ldr	r0, [r7, #12]
 8014e80:	f7f0 fba5 	bl	80055ce <HAL_RNG_GenerateRandomNumber>
		for(; j < rem; j++){
 8014e84:	e00d      	b.n	8014ea2 <randombytes+0x7c>
			out[i+j] = rand_int_byte[j];
 8014e86:	6a3b      	ldr	r3, [r7, #32]
 8014e88:	69fa      	ldr	r2, [r7, #28]
 8014e8a:	441a      	add	r2, r3
 8014e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e8e:	6a3b      	ldr	r3, [r7, #32]
 8014e90:	440b      	add	r3, r1
 8014e92:	4619      	mov	r1, r3
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	440b      	add	r3, r1
 8014e98:	7812      	ldrb	r2, [r2, #0]
 8014e9a:	701a      	strb	r2, [r3, #0]
		for(; j < rem; j++){
 8014e9c:	6a3b      	ldr	r3, [r7, #32]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	623b      	str	r3, [r7, #32]
 8014ea2:	6a3a      	ldr	r2, [r7, #32]
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	dbed      	blt.n	8014e86 <randombytes+0x60>
		}
	}
}
 8014eaa:	bf00      	nop
 8014eac:	3728      	adds	r7, #40	; 0x28
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}

08014eb2 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>:
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
 8014eb2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014eb6:	b086      	sub	sp, #24
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int32_t t;

  t = (int32_t)a*QINV;
 8014ebe:	68b8      	ldr	r0, [r7, #8]
 8014ec0:	4601      	mov	r1, r0
 8014ec2:	00c9      	lsls	r1, r1, #3
 8014ec4:	1a09      	subs	r1, r1, r0
 8014ec6:	0289      	lsls	r1, r1, #10
 8014ec8:	4401      	add	r1, r0
 8014eca:	0349      	lsls	r1, r1, #13
 8014ecc:	4401      	add	r1, r0
 8014ece:	6179      	str	r1, [r7, #20]
  t = (a - (int64_t)t*Q_) >> 32;
 8014ed0:	6979      	ldr	r1, [r7, #20]
 8014ed2:	17c8      	asrs	r0, r1, #31
 8014ed4:	460c      	mov	r4, r1
 8014ed6:	4605      	mov	r5, r0
 8014ed8:	e9c7 4500 	strd	r4, r5, [r7]
 8014edc:	f04f 0000 	mov.w	r0, #0
 8014ee0:	f04f 0100 	mov.w	r1, #0
 8014ee4:	02a9      	lsls	r1, r5, #10
 8014ee6:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8014eea:	02a0      	lsls	r0, r4, #10
 8014eec:	683e      	ldr	r6, [r7, #0]
 8014eee:	1a32      	subs	r2, r6, r0
 8014ef0:	687e      	ldr	r6, [r7, #4]
 8014ef2:	eb66 0301 	sbc.w	r3, r6, r1
 8014ef6:	f04f 0000 	mov.w	r0, #0
 8014efa:	f04f 0100 	mov.w	r1, #0
 8014efe:	0359      	lsls	r1, r3, #13
 8014f00:	ea41 41d2 	orr.w	r1, r1, r2, lsr #19
 8014f04:	0350      	lsls	r0, r2, #13
 8014f06:	4602      	mov	r2, r0
 8014f08:	460b      	mov	r3, r1
 8014f0a:	ebb2 0a04 	subs.w	sl, r2, r4
 8014f0e:	eb63 0b05 	sbc.w	fp, r3, r5
 8014f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014f16:	eb1a 0802 	adds.w	r8, sl, r2
 8014f1a:	eb4b 0903 	adc.w	r9, fp, r3
 8014f1e:	f04f 0200 	mov.w	r2, #0
 8014f22:	f04f 0300 	mov.w	r3, #0
 8014f26:	464a      	mov	r2, r9
 8014f28:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	617b      	str	r3, [r7, #20]
  return t;
 8014f30:	697b      	ldr	r3, [r7, #20]
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3718      	adds	r7, #24
 8014f36:	46bd      	mov	sp, r7
 8014f38:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014f3c:	4770      	bx	lr

08014f3e <pqcrystals_dilithium2aes_r_ref_reduce32>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
 8014f3e:	b480      	push	{r7}
 8014f40:	b085      	sub	sp, #20
 8014f42:	af00      	add	r7, sp, #0
 8014f44:	6078      	str	r0, [r7, #4]
  int32_t t;

  t = (a + (1 << 22)) >> 23;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8014f4c:	15db      	asrs	r3, r3, #23
 8014f4e:	60fb      	str	r3, [r7, #12]
  t = a - t*Q_;
 8014f50:	68fa      	ldr	r2, [r7, #12]
 8014f52:	4613      	mov	r3, r2
 8014f54:	025b      	lsls	r3, r3, #9
 8014f56:	1a9b      	subs	r3, r3, r2
 8014f58:	029b      	lsls	r3, r3, #10
 8014f5a:	4413      	add	r3, r2
 8014f5c:	035b      	lsls	r3, r3, #13
 8014f5e:	1a9b      	subs	r3, r3, r2
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	4413      	add	r3, r2
 8014f64:	60fb      	str	r3, [r7, #12]
  return t;
 8014f66:	68fb      	ldr	r3, [r7, #12]
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	3714      	adds	r7, #20
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <pqcrystals_dilithium2aes_r_ref_caddq>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
  a += (a >> 31) & Q_;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	17da      	asrs	r2, r3, #31
 8014f80:	4b05      	ldr	r3, [pc, #20]	; (8014f98 <pqcrystals_dilithium2aes_r_ref_caddq+0x24>)
 8014f82:	4013      	ands	r3, r2
 8014f84:	687a      	ldr	r2, [r7, #4]
 8014f86:	4413      	add	r3, r2
 8014f88:	607b      	str	r3, [r7, #4]
  return a;
 8014f8a:	687b      	ldr	r3, [r7, #4]
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr
 8014f98:	007fe001 	.word	0x007fe001

08014f9c <pqcrystals_dilithium2aes_r_ref_power2round>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
 8014f9c:	b480      	push	{r7}
 8014f9e:	b085      	sub	sp, #20
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8014fac:	135b      	asrs	r3, r3, #13
 8014fae:	60fb      	str	r3, [r7, #12]
  *a0 = a - (a1 << D);
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	035b      	lsls	r3, r3, #13
 8014fb4:	683a      	ldr	r2, [r7, #0]
 8014fb6:	1ad2      	subs	r2, r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	601a      	str	r2, [r3, #0]
  return a1;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3714      	adds	r7, #20
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc8:	4770      	bx	lr
	...

08014fcc <pqcrystals_dilithium2aes_r_ref_decompose>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
 8014fcc:	b480      	push	{r7}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1  = (a + 127) >> 7;
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	337f      	adds	r3, #127	; 0x7f
 8014fda:	11db      	asrs	r3, r3, #7
 8014fdc:	60fb      	str	r3, [r7, #12]
#if GAMMA2 == (Q_-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q_-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f642 420b 	movw	r2, #11275	; 0x2c0b
 8014fe4:	fb02 f303 	mul.w	r3, r2, r3
 8014fe8:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8014fec:	161b      	asrs	r3, r3, #24
 8014fee:	60fb      	str	r3, [r7, #12]
  a1 ^= ((43 - a1) >> 31) & a1;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8014ff6:	17db      	asrs	r3, r3, #31
 8014ff8:	43db      	mvns	r3, r3
 8014ffa:	68fa      	ldr	r2, [r7, #12]
 8014ffc:	4013      	ands	r3, r2
 8014ffe:	60fb      	str	r3, [r7, #12]
#endif

  *a0  = a - a1*2*GAMMA2;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	4a0e      	ldr	r2, [pc, #56]	; (801503c <pqcrystals_dilithium2aes_r_ref_decompose+0x70>)
 8015004:	fb03 f202 	mul.w	r2, r3, r2
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	441a      	add	r2, r3
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	601a      	str	r2, [r3, #0]
  *a0 -= (((Q_-1)/2 - *a0) >> 31) & Q_;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	f5c3 137f 	rsb	r3, r3, #4177920	; 0x3fc000
 801501c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015020:	17d9      	asrs	r1, r3, #31
 8015022:	4b07      	ldr	r3, [pc, #28]	; (8015040 <pqcrystals_dilithium2aes_r_ref_decompose+0x74>)
 8015024:	400b      	ands	r3, r1
 8015026:	1ad2      	subs	r2, r2, r3
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	601a      	str	r2, [r3, #0]
  return a1;
 801502c:	68fb      	ldr	r3, [r7, #12]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3714      	adds	r7, #20
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr
 801503a:	bf00      	nop
 801503c:	fffd1800 	.word	0xfffd1800
 8015040:	007fe001 	.word	0x007fe001

08015044 <pqcrystals_dilithium2aes_r_ref_make_hint>:
* Arguments:   - int32_t a0: low bits of input element
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
  if(a0 <= GAMMA2 || a0 > Q_ - GAMMA2 || (a0 == Q_ - GAMMA2 && a1 == 0))
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f5b3 3fba 	cmp.w	r3, #95232	; 0x17400
 8015054:	dd0a      	ble.n	801506c <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	4a09      	ldr	r2, [pc, #36]	; (8015080 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 801505a:	4293      	cmp	r3, r2
 801505c:	dc06      	bgt.n	801506c <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4a07      	ldr	r2, [pc, #28]	; (8015080 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 8015062:	4293      	cmp	r3, r2
 8015064:	d104      	bne.n	8015070 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d101      	bne.n	8015070 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
    return 0;
 801506c:	2300      	movs	r3, #0
 801506e:	e000      	b.n	8015072 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2e>

  return 1;
 8015070:	2301      	movs	r3, #1
}
 8015072:	4618      	mov	r0, r3
 8015074:	370c      	adds	r7, #12
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	007e6c01 	.word	0x007e6c01

08015084 <pqcrystals_dilithium2aes_r_ref_use_hint>:
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	6039      	str	r1, [r7, #0]
  int32_t a0, a1;

  a1 = decompose(&a0, a);
 801508e:	f107 0308 	add.w	r3, r7, #8
 8015092:	6879      	ldr	r1, [r7, #4]
 8015094:	4618      	mov	r0, r3
 8015096:	f7ff ff99 	bl	8014fcc <pqcrystals_dilithium2aes_r_ref_decompose>
 801509a:	60f8      	str	r0, [r7, #12]
  if(hint == 0)
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d101      	bne.n	80150a6 <pqcrystals_dilithium2aes_r_ref_use_hint+0x22>
    return a1;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	e011      	b.n	80150ca <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  if(a0 > 0)
    return (a1 + 1) & 15;
  else
    return (a1 - 1) & 15;
#elif GAMMA2 == (Q_-1)/88
  if(a0 > 0)
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	dd07      	ble.n	80150bc <pqcrystals_dilithium2aes_r_ref_use_hint+0x38>
    return (a1 == 43) ?  0 : a1 + 1;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	2b2b      	cmp	r3, #43	; 0x2b
 80150b0:	d002      	beq.n	80150b8 <pqcrystals_dilithium2aes_r_ref_use_hint+0x34>
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	3301      	adds	r3, #1
 80150b6:	e008      	b.n	80150ca <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 80150b8:	2300      	movs	r3, #0
 80150ba:	e006      	b.n	80150ca <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  else
    return (a1 ==  0) ? 43 : a1 - 1;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d002      	beq.n	80150c8 <pqcrystals_dilithium2aes_r_ref_use_hint+0x44>
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	3b01      	subs	r3, #1
 80150c6:	e000      	b.n	80150ca <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 80150c8:	232b      	movs	r3, #43	; 0x2b
#endif
}
 80150ca:	4618      	mov	r0, r3
 80150cc:	3710      	adds	r7, #16
 80150ce:	46bd      	mov	sp, r7
 80150d0:	bd80      	pop	{r7, pc}

080150d2 <pqcrystals_dilithium2aes_r_ref_keypair>:
#else
int crypto_sign_keypair(uint8_t * pk, uint8_t * sk)
#endif

#ifdef CONSTRAINED_DEVICE
{
 80150d2:	b580      	push	{r7, lr}
 80150d4:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80150d8:	b08e      	sub	sp, #56	; 0x38
 80150da:	af02      	add	r7, sp, #8
 80150dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80150e0:	f843 0ca4 	str.w	r0, [r3, #-164]
 80150e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80150e8:	f843 1ca8 	str.w	r1, [r3, #-168]
 80150ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80150f0:	f843 2cac 	str.w	r2, [r3, #-172]

    /* Get randomness for rho, rhoprime and key */
#if defined(CONST_RAND_SEED)
    randombytes2(seedbuf, SEEDBYTES);
#elif defined(STM32WB55xx)
    randombytes(hrng, seedbuf, SEEDBYTES);
 80150f4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80150f8:	f103 0304 	add.w	r3, r3, #4
 80150fc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015100:	4610      	mov	r0, r2
 8015102:	2220      	movs	r2, #32
 8015104:	4619      	mov	r1, r3
 8015106:	f850 0ca4 	ldr.w	r0, [r0, #-164]
 801510a:	f7ff fe8c 	bl	8014e26 <randombytes>
#else
    randombytes(seedbuf, SEEDBYTES);
#endif

    shake256(seedbuf, 3 * SEEDBYTES, seedbuf, SEEDBYTES);
 801510e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8015112:	f102 0204 	add.w	r2, r2, #4
 8015116:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 801511a:	f100 0004 	add.w	r0, r0, #4
 801511e:	2320      	movs	r3, #32
 8015120:	2160      	movs	r1, #96	; 0x60
 8015122:	f7fd f859 	bl	80121d8 <pqcrystals_fips202_ref_shake256>
    rho = seedbuf;
 8015126:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 801512a:	f103 0304 	add.w	r3, r3, #4
 801512e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8015132:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8015136:	6013      	str	r3, [r2, #0]
    rhoprime = seedbuf + SEEDBYTES;
 8015138:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 801513c:	f103 0304 	add.w	r3, r3, #4
 8015140:	3320      	adds	r3, #32
 8015142:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8015146:	f102 0228 	add.w	r2, r2, #40	; 0x28
 801514a:	6013      	str	r3, [r2, #0]
    key = seedbuf + 2 * SEEDBYTES;
 801514c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8015150:	f103 0304 	add.w	r3, r3, #4
 8015154:	3340      	adds	r3, #64	; 0x40
 8015156:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 801515a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 801515e:	6013      	str	r3, [r2, #0]

    polyvec_matrix_poly_smul_montgomery(&t1, rho, rhoprime);
 8015160:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8015164:	f103 0310 	add.w	r3, r3, #16
 8015168:	3b1c      	subs	r3, #28
 801516a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 801516e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8015172:	6812      	ldr	r2, [r2, #0]
 8015174:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8015178:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 801517c:	6809      	ldr	r1, [r1, #0]
 801517e:	4618      	mov	r0, r3
 8015180:	f7ff f915 	bl	80143ae <polyvec_matrix_poly_smul_montgomery>

    /* Extract t1 and write public key */
    polyveck_caddq(&t1);
 8015184:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8015188:	f103 0310 	add.w	r3, r3, #16
 801518c:	3b1c      	subs	r3, #28
 801518e:	4618      	mov	r0, r3
 8015190:	f7ff fcc4 	bl	8014b1c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
    polyveck_power2round(&t1, &t0, &t1);
 8015194:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8015198:	f102 0210 	add.w	r2, r2, #16
 801519c:	3a1c      	subs	r2, #28
 801519e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80151a2:	391c      	subs	r1, #28
 80151a4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80151a8:	f103 0310 	add.w	r3, r3, #16
 80151ac:	3b1c      	subs	r3, #28
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7ff fd85 	bl	8014cbe <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>
    pack_pk(pk, rho, &t1);
 80151b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80151b8:	f103 0310 	add.w	r3, r3, #16
 80151bc:	3b1c      	subs	r3, #28
 80151be:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80151c2:	4610      	mov	r0, r2
 80151c4:	461a      	mov	r2, r3
 80151c6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80151ca:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80151ce:	6819      	ldr	r1, [r3, #0]
 80151d0:	f850 0ca8 	ldr.w	r0, [r0, #-168]
 80151d4:	f7fd f94a 	bl	801246c <pqcrystals_dilithium2aes_r_ref_pack_pk>

    /* Compute CRH(rho, t1) and write secret key */
    crh(tr, pk, CRYPTO_PUBLICKEYBYTES);
 80151d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80151dc:	461a      	mov	r2, r3
 80151de:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 80151e2:	f100 0014 	add.w	r0, r0, #20
 80151e6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80151ea:	f852 2ca8 	ldr.w	r2, [r2, #-168]
 80151ee:	2130      	movs	r1, #48	; 0x30
 80151f0:	f7fc fff2 	bl	80121d8 <pqcrystals_fips202_ref_shake256>
    pack_sk_r(sk, rho, rhoprime, tr, key, &t0);
 80151f4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80151f8:	f102 0214 	add.w	r2, r2, #20
 80151fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015200:	4618      	mov	r0, r3
 8015202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015206:	3b1c      	subs	r3, #28
 8015208:	9301      	str	r3, [sp, #4]
 801520a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 801520e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	9300      	str	r3, [sp, #0]
 8015216:	4613      	mov	r3, r2
 8015218:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 801521c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8015220:	6812      	ldr	r2, [r2, #0]
 8015222:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8015226:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 801522a:	6809      	ldr	r1, [r1, #0]
 801522c:	f850 0cac 	ldr.w	r0, [r0, #-172]
 8015230:	f7fd f953 	bl	80124da <pqcrystals_dilithium2aes_r_ref_pack_sk_r>
    return 0;
 8015234:	2300      	movs	r3, #0
}
 8015236:	4618      	mov	r0, r3
 8015238:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 801523c:	3730      	adds	r7, #48	; 0x30
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
	...

08015244 <pqcrystals_dilithium2aes_r_ref_signature>:
                          size_t mlen,
                          const uint8_t *sk)
#endif

#ifdef CONSTRAINED_DEVICE
{
 8015244:	b590      	push	{r4, r7, lr}
 8015246:	f5ad 4dac 	sub.w	sp, sp, #22016	; 0x5600
 801524a:	b083      	sub	sp, #12
 801524c:	af02      	add	r7, sp, #8
 801524e:	f507 64c0 	add.w	r4, r7, #1536	; 0x600
 8015252:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
 8015256:	6020      	str	r0, [r4, #0]
 8015258:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 801525c:	f5a0 60bf 	sub.w	r0, r0, #1528	; 0x5f8
 8015260:	6001      	str	r1, [r0, #0]
 8015262:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8015266:	f2a1 51fc 	subw	r1, r1, #1532	; 0x5fc
 801526a:	600a      	str	r2, [r1, #0]
 801526c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8015270:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
 8015274:	6013      	str	r3, [r2, #0]

    unsigned int n;
    uint8_t seedbuf[2 * SEEDBYTES + 3 * CRHBYTES];
    uint8_t* rho, * s_rhoprime, * tr, * key, * mu;
    uint16_t nonce = 0;
 8015276:	2300      	movs	r3, #0
 8015278:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801527c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8015280:	8013      	strh	r3, [r2, #0]
    polyveck t0, w1, w0, h;
    poly cp;
    keccak_state state;
    uint8_t y_rhoprime[CRHBYTES];

    rho = seedbuf;
 8015282:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8015286:	f103 0314 	add.w	r3, r3, #20
 801528a:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801528e:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8015292:	6013      	str	r3, [r2, #0]
    tr = rho + SEEDBYTES;
 8015294:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015298:	f103 0378 	add.w	r3, r3, #120	; 0x78
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	3320      	adds	r3, #32
 80152a0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80152a4:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80152a8:	6013      	str	r3, [r2, #0]
    key = tr + CRHBYTES;
 80152aa:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80152ae:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	3330      	adds	r3, #48	; 0x30
 80152b6:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80152ba:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80152be:	6013      	str	r3, [r2, #0]
    mu = key + SEEDBYTES;
 80152c0:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80152c4:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	3320      	adds	r3, #32
 80152cc:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80152d0:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80152d4:	6013      	str	r3, [r2, #0]
    s_rhoprime = mu + CRHBYTES;
 80152d6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80152da:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	3330      	adds	r3, #48	; 0x30
 80152e2:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80152e6:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80152ea:	6013      	str	r3, [r2, #0]

    unpack_sk_r(rho, s_rhoprime, tr, key, &t0, sk);
 80152ec:	f507 43ac 	add.w	r3, r7, #22016	; 0x5600
 80152f0:	f103 0314 	add.w	r3, r3, #20
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	9301      	str	r3, [sp, #4]
 80152f8:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 80152fc:	3b2c      	subs	r3, #44	; 0x2c
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015304:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801530e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8015312:	6812      	ldr	r2, [r2, #0]
 8015314:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015318:	f101 0168 	add.w	r1, r1, #104	; 0x68
 801531c:	6809      	ldr	r1, [r1, #0]
 801531e:	f507 40ab 	add.w	r0, r7, #21888	; 0x5580
 8015322:	f100 0078 	add.w	r0, r0, #120	; 0x78
 8015326:	6800      	ldr	r0, [r0, #0]
 8015328:	f7fd f94a 	bl	80125c0 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r>


    /* Compute CRH(tr, msg) */
    shake256_init(&state);
 801532c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015330:	3b40      	subs	r3, #64	; 0x40
 8015332:	4618      	mov	r0, r3
 8015334:	f7fc fef1 	bl	801211a <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, tr, CRHBYTES);
 8015338:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801533c:	3b40      	subs	r3, #64	; 0x40
 801533e:	2230      	movs	r2, #48	; 0x30
 8015340:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015344:	f101 0174 	add.w	r1, r1, #116	; 0x74
 8015348:	6809      	ldr	r1, [r1, #0]
 801534a:	4618      	mov	r0, r3
 801534c:	f7fc fef0 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, m, mlen);
 8015350:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8015354:	f5a3 61c0 	sub.w	r1, r3, #1536	; 0x600
 8015358:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801535c:	3b40      	subs	r3, #64	; 0x40
 801535e:	f507 42ac 	add.w	r2, r7, #22016	; 0x5600
 8015362:	f102 0210 	add.w	r2, r2, #16
 8015366:	6812      	ldr	r2, [r2, #0]
 8015368:	6809      	ldr	r1, [r1, #0]
 801536a:	4618      	mov	r0, r3
 801536c:	f7fc fee0 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 8015370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015374:	3b40      	subs	r3, #64	; 0x40
 8015376:	4618      	mov	r0, r3
 8015378:	f7fc fef2 	bl	8012160 <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(mu, CRHBYTES, &state);
 801537c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015380:	3b40      	subs	r3, #64	; 0x40
 8015382:	461a      	mov	r2, r3
 8015384:	2130      	movs	r1, #48	; 0x30
 8015386:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 801538a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801538e:	6818      	ldr	r0, [r3, #0]
 8015390:	f7fc ff0a 	bl	80121a8 <pqcrystals_fips202_ref_shake256_squeeze>
    randombytes(hrng, y_rhoprime, CRHBYTES);
#else
    randombytes(y_rhoprime, CRHBYTES);
#endif
#else
    crh(y_rhoprime, key, SEEDBYTES + CRHBYTES);
 8015394:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8015398:	3870      	subs	r0, #112	; 0x70
 801539a:	2350      	movs	r3, #80	; 0x50
 801539c:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80153a0:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80153a4:	6812      	ldr	r2, [r2, #0]
 80153a6:	2130      	movs	r1, #48	; 0x30
 80153a8:	f7fc ff16 	bl	80121d8 <pqcrystals_fips202_ref_shake256>
    	USB_DEBUG_MSG("%d", y_rhoprime[i]);
    }
    USB_DEBUG_MSG("\r\n");
#endif

    polyveck_ntt(&t0);
 80153ac:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 80153b0:	3b2c      	subs	r3, #44	; 0x2c
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7ff fc11 	bl	8014bda <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>

    rej:
#ifdef DEBUG_LOG
	USB_DEBUG_MSG("nonce = %d\r\n", nonce);
#endif
    polyvec_matrix_poly_ymul_montgomery(&w1, rho, y_rhoprime, nonce);
 80153b8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80153bc:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80153c0:	881b      	ldrh	r3, [r3, #0]
 80153c2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80153c6:	3a70      	subs	r2, #112	; 0x70
 80153c8:	f507 5015 	add.w	r0, r7, #9536	; 0x2540
 80153cc:	382c      	subs	r0, #44	; 0x2c
 80153ce:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 80153d2:	f101 0178 	add.w	r1, r1, #120	; 0x78
 80153d6:	6809      	ldr	r1, [r1, #0]
 80153d8:	f7ff f8ae 	bl	8014538 <polyvec_matrix_poly_ymul_montgomery>
    // IS OK

    /* Decompose w and call the random oracle */
    polyveck_caddq(&w1);
 80153dc:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 80153e0:	3b2c      	subs	r3, #44	; 0x2c
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7ff fb9a 	bl	8014b1c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
    polyveck_decompose(&w1, &w0, &w1);
 80153e8:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 80153ec:	3a2c      	subs	r2, #44	; 0x2c
 80153ee:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 80153f2:	396c      	subs	r1, #108	; 0x6c
 80153f4:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 80153f8:	3b2c      	subs	r3, #44	; 0x2c
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7ff fc82 	bl	8014d04 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>
    polyveck_pack_w1(sig, &w1);
 8015400:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8015404:	3b2c      	subs	r3, #44	; 0x2c
 8015406:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801540a:	f5a2 62bf 	sub.w	r2, r2, #1528	; 0x5f8
 801540e:	4619      	mov	r1, r3
 8015410:	6810      	ldr	r0, [r2, #0]
 8015412:	f7ff fce6 	bl	8014de2 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>

    shake256_init(&state);
 8015416:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801541a:	3b40      	subs	r3, #64	; 0x40
 801541c:	4618      	mov	r0, r3
 801541e:	f7fc fe7c 	bl	801211a <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, mu, CRHBYTES);
 8015422:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015426:	3b40      	subs	r3, #64	; 0x40
 8015428:	2230      	movs	r2, #48	; 0x30
 801542a:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 801542e:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8015432:	6809      	ldr	r1, [r1, #0]
 8015434:	4618      	mov	r0, r3
 8015436:	f7fc fe7b 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, sig, K * POLYW1_PACKEDBYTES);
 801543a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801543e:	f5a3 61bf 	sub.w	r1, r3, #1528	; 0x5f8
 8015442:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015446:	3b40      	subs	r3, #64	; 0x40
 8015448:	f44f 7240 	mov.w	r2, #768	; 0x300
 801544c:	6809      	ldr	r1, [r1, #0]
 801544e:	4618      	mov	r0, r3
 8015450:	f7fc fe6e 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 8015454:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015458:	3b40      	subs	r3, #64	; 0x40
 801545a:	4618      	mov	r0, r3
 801545c:	f7fc fe80 	bl	8012160 <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(sig, SEEDBYTES, &state);
 8015460:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015464:	3b40      	subs	r3, #64	; 0x40
 8015466:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801546a:	f5a2 60bf 	sub.w	r0, r2, #1528	; 0x5f8
 801546e:	461a      	mov	r2, r3
 8015470:	2120      	movs	r1, #32
 8015472:	6800      	ldr	r0, [r0, #0]
 8015474:	f7fc fe98 	bl	80121a8 <pqcrystals_fips202_ref_shake256_squeeze>
    poly_challenge(&cp, sig);
 8015478:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801547c:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 8015480:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8015484:	3b6c      	subs	r3, #108	; 0x6c
 8015486:	6811      	ldr	r1, [r2, #0]
 8015488:	4618      	mov	r0, r3
 801548a:	f7fd fe58 	bl	801313e <pqcrystals_dilithium2aes_r_ref_poly_challenge>
    poly_ntt(&cp);
 801548e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8015492:	3b6c      	subs	r3, #108	; 0x6c
 8015494:	4618      	mov	r0, r3
 8015496:	f7fd fb46 	bl	8012b26 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
	}
	USB_DEBUG_MSG("\r\n");
#endif

    /* Compute z, reject if it reveals secret */
    polyvec_compute_z_montgomery(&z, &cp, s_rhoprime, y_rhoprime, nonce++);
 801549a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 801549e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80154a2:	881a      	ldrh	r2, [r3, #0]
 80154a4:	1c53      	adds	r3, r2, #1
 80154a6:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 80154aa:	f101 017e 	add.w	r1, r1, #126	; 0x7e
 80154ae:	800b      	strh	r3, [r1, #0]
 80154b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80154b4:	3b70      	subs	r3, #112	; 0x70
 80154b6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80154ba:	396c      	subs	r1, #108	; 0x6c
 80154bc:	f507 408a 	add.w	r0, r7, #17664	; 0x4500
 80154c0:	f100 0020 	add.w	r0, r0, #32
 80154c4:	380c      	subs	r0, #12
 80154c6:	9200      	str	r2, [sp, #0]
 80154c8:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80154cc:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80154d0:	6812      	ldr	r2, [r2, #0]
 80154d2:	f7ff f8df 	bl	8014694 <polyvec_compute_z_montgomery>

    if (polyvecl_chknorm(&z, GAMMA1 - BETA))
 80154d6:	f507 438a 	add.w	r3, r7, #17664	; 0x4500
 80154da:	f103 0320 	add.w	r3, r3, #32
 80154de:	3b0c      	subs	r3, #12
 80154e0:	4952      	ldr	r1, [pc, #328]	; (801562c <pqcrystals_dilithium2aes_r_ref_signature+0x3e8>)
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7ff fae1 	bl	8014aaa <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>
 80154e8:	4603      	mov	r3, r0
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d000      	beq.n	80154f0 <pqcrystals_dilithium2aes_r_ref_signature+0x2ac>
        goto rej;
 80154ee:	e763      	b.n	80153b8 <pqcrystals_dilithium2aes_r_ref_signature+0x174>

    /* Check that subtracting cs2 does not change high bits of w and low bits
    * do not reveal secret information */
    polyvec_compute_h_montgomery(&h, &cp, s_rhoprime);
 80154f0:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80154f4:	396c      	subs	r1, #108	; 0x6c
 80154f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80154fa:	3b6c      	subs	r3, #108	; 0x6c
 80154fc:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015500:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8015504:	6812      	ldr	r2, [r2, #0]
 8015506:	4618      	mov	r0, r3
 8015508:	f7ff f93e 	bl	8014788 <polyvec_compute_h_montgomery>

    polyveck_sub(&w0, &w0, &h);
 801550c:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015510:	3a6c      	subs	r2, #108	; 0x6c
 8015512:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 8015516:	396c      	subs	r1, #108	; 0x6c
 8015518:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 801551c:	3b6c      	subs	r3, #108	; 0x6c
 801551e:	4618      	mov	r0, r3
 8015520:	f7ff fb38 	bl	8014b94 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>
    polyveck_reduce(&w0);
 8015524:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8015528:	3b6c      	subs	r3, #108	; 0x6c
 801552a:	4618      	mov	r0, r3
 801552c:	f7ff fadd 	bl	8014aea <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
    if (polyveck_chknorm(&w0, GAMMA2 - BETA))
 8015530:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8015534:	3b6c      	subs	r3, #108	; 0x6c
 8015536:	493e      	ldr	r1, [pc, #248]	; (8015630 <pqcrystals_dilithium2aes_r_ref_signature+0x3ec>)
 8015538:	4618      	mov	r0, r3
 801553a:	f7ff fba0 	bl	8014c7e <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d000      	beq.n	8015546 <pqcrystals_dilithium2aes_r_ref_signature+0x302>
        goto rej;
 8015544:	e738      	b.n	80153b8 <pqcrystals_dilithium2aes_r_ref_signature+0x174>

    /* Compute hints for w1 */
    polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 8015546:	f507 5255 	add.w	r2, r7, #13632	; 0x3540
 801554a:	3a2c      	subs	r2, #44	; 0x2c
 801554c:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8015550:	396c      	subs	r1, #108	; 0x6c
 8015552:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015556:	3b6c      	subs	r3, #108	; 0x6c
 8015558:	4618      	mov	r0, r3
 801555a:	f7ff fb70 	bl	8014c3e <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>
    polyveck_invntt_tomont(&h);
 801555e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8015562:	3b6c      	subs	r3, #108	; 0x6c
 8015564:	4618      	mov	r0, r3
 8015566:	f7ff fb51 	bl	8014c0c <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>
    polyveck_reduce(&h);
 801556a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801556e:	3b6c      	subs	r3, #108	; 0x6c
 8015570:	4618      	mov	r0, r3
 8015572:	f7ff faba 	bl	8014aea <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
		}
	}
	USB_DEBUG_MSG("\r\n");
#endif

    if (polyveck_chknorm(&h, GAMMA2))
 8015576:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801557a:	3b6c      	subs	r3, #108	; 0x6c
 801557c:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 8015580:	4618      	mov	r0, r3
 8015582:	f7ff fb7c 	bl	8014c7e <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	d000      	beq.n	801558e <pqcrystals_dilithium2aes_r_ref_signature+0x34a>
        goto rej;
 801558c:	e714      	b.n	80153b8 <pqcrystals_dilithium2aes_r_ref_signature+0x174>

    polyveck_add(&w0, &w0, &h);
 801558e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8015592:	3a6c      	subs	r2, #108	; 0x6c
 8015594:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 8015598:	396c      	subs	r1, #108	; 0x6c
 801559a:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 801559e:	3b6c      	subs	r3, #108	; 0x6c
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff fad4 	bl	8014b4e <pqcrystals_dilithium2aes_r_ref_polyveck_add>
    polyveck_caddq(&w0);
 80155a6:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80155aa:	3b6c      	subs	r3, #108	; 0x6c
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7ff fab5 	bl	8014b1c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
		}
	}
	USB_DEBUG_MSG("\r\n");
#endif

    n = polyveck_make_hint(&h, &w0, &w1);
 80155b2:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 80155b6:	3a2c      	subs	r2, #44	; 0x2c
 80155b8:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 80155bc:	396c      	subs	r1, #108	; 0x6c
 80155be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155c2:	3b6c      	subs	r3, #108	; 0x6c
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7ff fbc0 	bl	8014d4a <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>
 80155ca:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80155ce:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80155d2:	6018      	str	r0, [r3, #0]

#ifdef DEBUG_LOG
    USB_DEBUG_MSG("n = %d\r\n", n);
#endif

    if (n > OMEGA)
 80155d4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80155d8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	2b50      	cmp	r3, #80	; 0x50
 80155e0:	d900      	bls.n	80155e4 <pqcrystals_dilithium2aes_r_ref_signature+0x3a0>
        goto rej;
 80155e2:	e6e9      	b.n	80153b8 <pqcrystals_dilithium2aes_r_ref_signature+0x174>

    /* Write signature */
    pack_sig(sig, sig, &z, &h);
 80155e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80155e8:	3b6c      	subs	r3, #108	; 0x6c
 80155ea:	f507 428a 	add.w	r2, r7, #17664	; 0x4500
 80155ee:	f102 0220 	add.w	r2, r2, #32
 80155f2:	3a0c      	subs	r2, #12
 80155f4:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80155f8:	f5a1 61bf 	sub.w	r1, r1, #1528	; 0x5f8
 80155fc:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8015600:	f5a0 60bf 	sub.w	r0, r0, #1528	; 0x5f8
 8015604:	6809      	ldr	r1, [r1, #0]
 8015606:	6800      	ldr	r0, [r0, #0]
 8015608:	f7fd f84d 	bl	80126a6 <pqcrystals_dilithium2aes_r_ref_pack_sig>
    *siglen = CRYPTO_BYTES;
 801560c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8015610:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f640 1274 	movw	r2, #2420	; 0x974
 801561a:	601a      	str	r2, [r3, #0]
		USB_DEBUG_MSG("%d", sig[k]);
	}
	USB_DEBUG_MSG("\r\n");
#endif

    return 0;
 801561c:	2300      	movs	r3, #0
}
 801561e:	4618      	mov	r0, r3
 8015620:	f507 47ac 	add.w	r7, r7, #22016	; 0x5600
 8015624:	3704      	adds	r7, #4
 8015626:	46bd      	mov	sp, r7
 8015628:	bd90      	pop	{r4, r7, pc}
 801562a:	bf00      	nop
 801562c:	0001ffb2 	.word	0x0001ffb2
 8015630:	000173b2 	.word	0x000173b2

08015634 <pqcrystals_dilithium2aes_r_ref>:
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
#endif
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b088      	sub	sp, #32
 8015638:	af02      	add	r7, sp, #8
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	60b9      	str	r1, [r7, #8]
 801563e:	607a      	str	r2, [r7, #4]
 8015640:	603b      	str	r3, [r7, #0]
  size_t i;

  for(i = 0; i < mlen; ++i)
 8015642:	2300      	movs	r3, #0
 8015644:	617b      	str	r3, [r7, #20]
 8015646:	e011      	b.n	801566c <pqcrystals_dilithium2aes_r_ref+0x38>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8015648:	6a3a      	ldr	r2, [r7, #32]
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	3b01      	subs	r3, #1
 8015650:	683a      	ldr	r2, [r7, #0]
 8015652:	441a      	add	r2, r3
 8015654:	6a39      	ldr	r1, [r7, #32]
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	1acb      	subs	r3, r1, r3
 801565a:	f603 1373 	addw	r3, r3, #2419	; 0x973
 801565e:	68b9      	ldr	r1, [r7, #8]
 8015660:	440b      	add	r3, r1
 8015662:	7812      	ldrb	r2, [r2, #0]
 8015664:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < mlen; ++i)
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	3301      	adds	r3, #1
 801566a:	617b      	str	r3, [r7, #20]
 801566c:	697a      	ldr	r2, [r7, #20]
 801566e:	6a3b      	ldr	r3, [r7, #32]
 8015670:	429a      	cmp	r2, r3
 8015672:	d3e9      	bcc.n	8015648 <pqcrystals_dilithium2aes_r_ref+0x14>
#ifdef STM32WB55xx
  crypto_sign_signature(hrng, sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	f603 1274 	addw	r2, r3, #2420	; 0x974
 801567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567c:	9301      	str	r3, [sp, #4]
 801567e:	6a3b      	ldr	r3, [r7, #32]
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	4613      	mov	r3, r2
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	68b9      	ldr	r1, [r7, #8]
 8015688:	68f8      	ldr	r0, [r7, #12]
 801568a:	f7ff fddb 	bl	8015244 <pqcrystals_dilithium2aes_r_ref_signature>
#else
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
#endif
  *smlen += mlen;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681a      	ldr	r2, [r3, #0]
 8015692:	6a3b      	ldr	r3, [r7, #32]
 8015694:	441a      	add	r2, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	601a      	str	r2, [r3, #0]
  return 0;
 801569a:	2300      	movs	r3, #0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3718      	adds	r7, #24
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <pqcrystals_dilithium2aes_r_ref_verify>:
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)

#ifdef CONSTRAINED_DEVICE
{
 80156a4:	b590      	push	{r4, r7, lr}
 80156a6:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 80156aa:	b087      	sub	sp, #28
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	f607 0458 	addw	r4, r7, #2136	; 0x858
 80156b2:	f6a4 044c 	subw	r4, r4, #2124	; 0x84c
 80156b6:	6020      	str	r0, [r4, #0]
 80156b8:	f607 0058 	addw	r0, r7, #2136	; 0x858
 80156bc:	f5a0 6005 	sub.w	r0, r0, #2128	; 0x850
 80156c0:	6001      	str	r1, [r0, #0]
 80156c2:	f607 0158 	addw	r1, r7, #2136	; 0x858
 80156c6:	f6a1 0154 	subw	r1, r1, #2132	; 0x854
 80156ca:	600a      	str	r2, [r1, #0]
 80156cc:	f607 0258 	addw	r2, r7, #2136	; 0x858
 80156d0:	f6a2 0258 	subw	r2, r2, #2136	; 0x858
 80156d4:	6013      	str	r3, [r2, #0]
    uint8_t buf[K * POLYW1_PACKEDBYTES];
    uint8_t mu[CRHBYTES];
    uint8_t c2[SEEDBYTES];
    uint8_t c[SEEDBYTES];
    polyveck w1;
    uint8_t h[N_ * K] = { 0 };
 80156d6:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80156da:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 80156de:	2200      	movs	r2, #0
 80156e0:	601a      	str	r2, [r3, #0]
 80156e2:	3304      	adds	r3, #4
 80156e4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80156e8:	2100      	movs	r1, #0
 80156ea:	4618      	mov	r0, r3
 80156ec:	f000 f9c6 	bl	8015a7c <memset>
    keccak_state state;

    if (siglen != CRYPTO_BYTES)
 80156f0:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80156f4:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f640 1274 	movw	r2, #2420	; 0x974
 80156fe:	4293      	cmp	r3, r2
 8015700:	d001      	beq.n	8015706 <pqcrystals_dilithium2aes_r_ref_verify+0x62>
        return 1;
 8015702:	2301      	movs	r3, #1
 8015704:	e0ef      	b.n	80158e6 <pqcrystals_dilithium2aes_r_ref_verify+0x242>

    //if signature OK - the h part will be unpacked - else - error
    int err_code = verify_sig_z_h_malform(h, sig);
 8015706:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801570a:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 801570e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8015712:	3b18      	subs	r3, #24
 8015714:	6811      	ldr	r1, [r2, #0]
 8015716:	4618      	mov	r0, r3
 8015718:	f7fd f8aa 	bl	8012870 <verify_sig_z_h_malform>
 801571c:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8015720:	f103 0310 	add.w	r3, r3, #16
 8015724:	6018      	str	r0, [r3, #0]
    if (err_code)
 8015726:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 801572a:	f103 0310 	add.w	r3, r3, #16
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d005      	beq.n	8015740 <pqcrystals_dilithium2aes_r_ref_verify+0x9c>
        return err_code;
 8015734:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8015738:	f103 0310 	add.w	r3, r3, #16
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	e0d2      	b.n	80158e6 <pqcrystals_dilithium2aes_r_ref_verify+0x242>
			USB_DEBUG_MSG("%d", h[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif

    unpack_sig_c(c, sig);
 8015740:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8015744:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8015748:	f507 52a7 	add.w	r2, r7, #5344	; 0x14e0
 801574c:	6819      	ldr	r1, [r3, #0]
 801574e:	4610      	mov	r0, r2
 8015750:	f7fd f8e4 	bl	801291c <unpack_sig_c>
    }
    USB_DEBUG_MSG("\r\n");
#endif

    /* Compute CRH(CRH(rho, t1), msg) */
    crh(mu, pk, CRYPTO_PUBLICKEYBYTES);
 8015754:	f507 50a9 	add.w	r0, r7, #5408	; 0x1520
 8015758:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 801575c:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8015760:	f102 0208 	add.w	r2, r2, #8
 8015764:	6812      	ldr	r2, [r2, #0]
 8015766:	2130      	movs	r1, #48	; 0x30
 8015768:	f7fc fd36 	bl	80121d8 <pqcrystals_fips202_ref_shake256>
    shake256_init(&state);
 801576c:	f107 0318 	add.w	r3, r7, #24
 8015770:	3b08      	subs	r3, #8
 8015772:	4618      	mov	r0, r3
 8015774:	f7fc fcd1 	bl	801211a <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, mu, CRHBYTES);
 8015778:	f507 51a9 	add.w	r1, r7, #5408	; 0x1520
 801577c:	f107 0318 	add.w	r3, r7, #24
 8015780:	3b08      	subs	r3, #8
 8015782:	2230      	movs	r2, #48	; 0x30
 8015784:	4618      	mov	r0, r3
 8015786:	f7fc fcd3 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, m, mlen);
 801578a:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801578e:	f6a3 0258 	subw	r2, r3, #2136	; 0x858
 8015792:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8015796:	f6a3 0154 	subw	r1, r3, #2132	; 0x854
 801579a:	f107 0318 	add.w	r3, r7, #24
 801579e:	3b08      	subs	r3, #8
 80157a0:	6812      	ldr	r2, [r2, #0]
 80157a2:	6809      	ldr	r1, [r1, #0]
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7fc fcc3 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 80157aa:	f107 0318 	add.w	r3, r7, #24
 80157ae:	3b08      	subs	r3, #8
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fc fcd5 	bl	8012160 <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(mu, CRHBYTES, &state);
 80157b6:	f107 0318 	add.w	r3, r7, #24
 80157ba:	3b08      	subs	r3, #8
 80157bc:	f507 50a9 	add.w	r0, r7, #5408	; 0x1520
 80157c0:	461a      	mov	r2, r3
 80157c2:	2130      	movs	r1, #48	; 0x30
 80157c4:	f7fc fcf0 	bl	80121a8 <pqcrystals_fips202_ref_shake256_squeeze>
    USB_DEBUG_MSG("\r\n");
#endif


    /* Matrix-vector multiplication; compute Az - c2^dt1 */
    polyvec_reconstruct_w1_montgomery(&w1, sig, pk);
 80157c8:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80157cc:	f6a3 014c 	subw	r1, r3, #2124	; 0x84c
 80157d0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80157d4:	3b18      	subs	r3, #24
 80157d6:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80157da:	f102 0208 	add.w	r2, r2, #8
 80157de:	6812      	ldr	r2, [r2, #0]
 80157e0:	6809      	ldr	r1, [r1, #0]
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7ff f827 	bl	8014836 <polyvec_reconstruct_w1_montgomery>

    /* Reconstruct w1 */
    polyveck_caddq(&w1);
 80157e8:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80157ec:	3b18      	subs	r3, #24
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7ff f994 	bl	8014b1c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
    polyveck_use_hint_r(&w1, &w1, h);
 80157f4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80157f8:	3a18      	subs	r2, #24
 80157fa:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 80157fe:	3918      	subs	r1, #24
 8015800:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8015804:	3b18      	subs	r3, #24
 8015806:	4618      	mov	r0, r3
 8015808:	f7ff fac8 	bl	8014d9c <polyveck_use_hint_r>
    polyveck_pack_w1(buf, &w1);
 801580c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8015810:	3b18      	subs	r3, #24
 8015812:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8015816:	f102 0210 	add.w	r2, r2, #16
 801581a:	4619      	mov	r1, r3
 801581c:	4610      	mov	r0, r2
 801581e:	f7ff fae0 	bl	8014de2 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>
    }
    USB_DEBUG_MSG("\r\n");
#endif

    /* Call random oracle and verify challenge */
    shake256_init(&state);
 8015822:	f107 0318 	add.w	r3, r7, #24
 8015826:	3b08      	subs	r3, #8
 8015828:	4618      	mov	r0, r3
 801582a:	f7fc fc76 	bl	801211a <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, mu, CRHBYTES);
 801582e:	f507 51a9 	add.w	r1, r7, #5408	; 0x1520
 8015832:	f107 0318 	add.w	r3, r7, #24
 8015836:	3b08      	subs	r3, #8
 8015838:	2230      	movs	r2, #48	; 0x30
 801583a:	4618      	mov	r0, r3
 801583c:	f7fc fc78 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, buf, K * POLYW1_PACKEDBYTES);
 8015840:	f507 51aa 	add.w	r1, r7, #5440	; 0x1540
 8015844:	f101 0110 	add.w	r1, r1, #16
 8015848:	f107 0318 	add.w	r3, r7, #24
 801584c:	3b08      	subs	r3, #8
 801584e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8015852:	4618      	mov	r0, r3
 8015854:	f7fc fc6c 	bl	8012130 <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 8015858:	f107 0318 	add.w	r3, r7, #24
 801585c:	3b08      	subs	r3, #8
 801585e:	4618      	mov	r0, r3
 8015860:	f7fc fc7e 	bl	8012160 <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(c2, SEEDBYTES, &state);
 8015864:	f107 0318 	add.w	r3, r7, #24
 8015868:	3b08      	subs	r3, #8
 801586a:	f507 50a8 	add.w	r0, r7, #5376	; 0x1500
 801586e:	461a      	mov	r2, r3
 8015870:	2120      	movs	r1, #32
 8015872:	f7fc fc99 	bl	80121a8 <pqcrystals_fips202_ref_shake256_squeeze>
        USB_DEBUG_MSG("%d", c2[k]);
    }
    USB_DEBUG_MSG("\r\n");
#endif

    for (i = 0; i < SEEDBYTES; ++i) {
 8015876:	2300      	movs	r3, #0
 8015878:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 801587c:	f102 0214 	add.w	r2, r2, #20
 8015880:	6013      	str	r3, [r2, #0]
 8015882:	e028      	b.n	80158d6 <pqcrystals_dilithium2aes_r_ref_verify+0x232>
        if (c[i] != c2[i])
 8015884:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8015888:	f103 0318 	add.w	r3, r3, #24
 801588c:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8015890:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8015894:	f103 0314 	add.w	r3, r3, #20
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	4413      	add	r3, r2
 801589c:	781a      	ldrb	r2, [r3, #0]
 801589e:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80158a2:	f103 0318 	add.w	r3, r3, #24
 80158a6:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 80158aa:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80158ae:	f103 0314 	add.w	r3, r3, #20
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	440b      	add	r3, r1
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d001      	beq.n	80158c0 <pqcrystals_dilithium2aes_r_ref_verify+0x21c>
            return 6;
 80158bc:	2306      	movs	r3, #6
 80158be:	e012      	b.n	80158e6 <pqcrystals_dilithium2aes_r_ref_verify+0x242>
    for (i = 0; i < SEEDBYTES; ++i) {
 80158c0:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80158c4:	f103 0314 	add.w	r3, r3, #20
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	3301      	adds	r3, #1
 80158cc:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80158d0:	f102 0214 	add.w	r2, r2, #20
 80158d4:	6013      	str	r3, [r2, #0]
 80158d6:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80158da:	f103 0314 	add.w	r3, r3, #20
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	2b1f      	cmp	r3, #31
 80158e2:	d9cf      	bls.n	8015884 <pqcrystals_dilithium2aes_r_ref_verify+0x1e0>
    }

    return 0;
 80158e4:	2300      	movs	r3, #0
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	f507 57c2 	add.w	r7, r7, #6208	; 0x1840
 80158ec:	371c      	adds	r7, #28
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd90      	pop	{r4, r7, pc}

080158f2 <pqcrystals_dilithium2aes_r_ref_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
 80158f2:	b580      	push	{r7, lr}
 80158f4:	b088      	sub	sp, #32
 80158f6:	af02      	add	r7, sp, #8
 80158f8:	60f8      	str	r0, [r7, #12]
 80158fa:	60b9      	str	r1, [r7, #8]
 80158fc:	607a      	str	r2, [r7, #4]
 80158fe:	603b      	str	r3, [r7, #0]
  size_t i;
  int err_code = -1;
 8015900:	f04f 33ff 	mov.w	r3, #4294967295
 8015904:	613b      	str	r3, [r7, #16]

  if(smlen < CRYPTO_BYTES)
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	f640 1273 	movw	r2, #2419	; 0x973
 801590c:	4293      	cmp	r3, r2
 801590e:	d92c      	bls.n	801596a <pqcrystals_dilithium2aes_r_ref_open+0x78>
    goto badsig;

  *mlen = smlen - CRYPTO_BYTES;
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	f6a3 1274 	subw	r2, r3, #2420	; 0x974
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	601a      	str	r2, [r3, #0]
  err_code = crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	6819      	ldr	r1, [r3, #0]
 8015924:	6a3b      	ldr	r3, [r7, #32]
 8015926:	9300      	str	r3, [sp, #0]
 8015928:	460b      	mov	r3, r1
 801592a:	f640 1174 	movw	r1, #2420	; 0x974
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f7ff feb8 	bl	80156a4 <pqcrystals_dilithium2aes_r_ref_verify>
 8015934:	6138      	str	r0, [r7, #16]
  if(err_code)
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d118      	bne.n	801596e <pqcrystals_dilithium2aes_r_ref_open+0x7c>
    goto badsig;
  else {
    /* All good, copy msg, return 0 */
    for(i = 0; i < *mlen; ++i)
 801593c:	2300      	movs	r3, #0
 801593e:	617b      	str	r3, [r7, #20]
 8015940:	e00c      	b.n	801595c <pqcrystals_dilithium2aes_r_ref_open+0x6a>
      m[i] = sm[CRYPTO_BYTES + i];
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	f603 1374 	addw	r3, r3, #2420	; 0x974
 8015948:	687a      	ldr	r2, [r7, #4]
 801594a:	441a      	add	r2, r3
 801594c:	68f9      	ldr	r1, [r7, #12]
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	440b      	add	r3, r1
 8015952:	7812      	ldrb	r2, [r2, #0]
 8015954:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < *mlen; ++i)
 8015956:	697b      	ldr	r3, [r7, #20]
 8015958:	3301      	adds	r3, #1
 801595a:	617b      	str	r3, [r7, #20]
 801595c:	68bb      	ldr	r3, [r7, #8]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	697a      	ldr	r2, [r7, #20]
 8015962:	429a      	cmp	r2, r3
 8015964:	d3ed      	bcc.n	8015942 <pqcrystals_dilithium2aes_r_ref_open+0x50>
    return 0;
 8015966:	2300      	movs	r3, #0
 8015968:	e016      	b.n	8015998 <pqcrystals_dilithium2aes_r_ref_open+0xa6>
    goto badsig;
 801596a:	bf00      	nop
 801596c:	e000      	b.n	8015970 <pqcrystals_dilithium2aes_r_ref_open+0x7e>
    goto badsig;
 801596e:	bf00      	nop
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	f04f 32ff 	mov.w	r2, #4294967295
 8015976:	601a      	str	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 8015978:	2300      	movs	r3, #0
 801597a:	617b      	str	r3, [r7, #20]
 801597c:	e007      	b.n	801598e <pqcrystals_dilithium2aes_r_ref_open+0x9c>
    m[i] = 0;
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	4413      	add	r3, r2
 8015984:	2200      	movs	r2, #0
 8015986:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	3301      	adds	r3, #1
 801598c:	617b      	str	r3, [r7, #20]
 801598e:	697a      	ldr	r2, [r7, #20]
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	429a      	cmp	r2, r3
 8015994:	d3f3      	bcc.n	801597e <pqcrystals_dilithium2aes_r_ref_open+0x8c>

  return err_code;
 8015996:	693b      	ldr	r3, [r7, #16]
}
 8015998:	4618      	mov	r0, r3
 801599a:	3718      	adds	r7, #24
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>:
#include "aes256ctr.h"

void dilithium_aes256ctr_init(aes256ctr_ctx *state,
                              const uint8_t key[32],
                              uint16_t nonce)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b088      	sub	sp, #32
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	4613      	mov	r3, r2
 80159ac:	80fb      	strh	r3, [r7, #6]
  uint8_t expnonce[12] = {0};
 80159ae:	2300      	movs	r3, #0
 80159b0:	617b      	str	r3, [r7, #20]
 80159b2:	f107 0318 	add.w	r3, r7, #24
 80159b6:	2200      	movs	r2, #0
 80159b8:	601a      	str	r2, [r3, #0]
 80159ba:	605a      	str	r2, [r3, #4]
  expnonce[0] = nonce;
 80159bc:	88fb      	ldrh	r3, [r7, #6]
 80159be:	b2db      	uxtb	r3, r3
 80159c0:	753b      	strb	r3, [r7, #20]
  expnonce[1] = nonce >> 8;
 80159c2:	88fb      	ldrh	r3, [r7, #6]
 80159c4:	0a1b      	lsrs	r3, r3, #8
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	757b      	strb	r3, [r7, #21]
  aes256ctr_init(state, key, expnonce);
 80159cc:	f107 0314 	add.w	r3, r7, #20
 80159d0:	461a      	mov	r2, r3
 80159d2:	68b9      	ldr	r1, [r7, #8]
 80159d4:	68f8      	ldr	r0, [r7, #12]
 80159d6:	f7f8 ff83 	bl	800e8e0 <pqcrystals_aes256ctr_ref_init>
}
 80159da:	bf00      	nop
 80159dc:	3720      	adds	r7, #32
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}

080159e2 <Delay_100ns>:
Delay approx. 100 ns (93.75) at 64 MHz
Error is -6.25%
Test for 20 ms, takes 18.7 ms at 64 MHz
*/
void Delay_100ns(uint32_t lulDelay)
{
 80159e2:	b480      	push	{r7}
 80159e4:	b083      	sub	sp, #12
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	6078      	str	r0, [r7, #4]
	while(lulDelay) // 2 cycles
 80159ea:	e005      	b.n	80159f8 <Delay_100ns+0x16>
	{
		--lulDelay; // 1 cycle
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	3b01      	subs	r3, #1
 80159f0:	607b      	str	r3, [r7, #4]
		asm("NOP"); // 1 cycles
 80159f2:	bf00      	nop
		asm("NOP"); // 1 cycle
 80159f4:	bf00      	nop
		asm("NOP"); // 1 cycle
 80159f6:	bf00      	nop
	while(lulDelay) // 2 cycles
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d1f6      	bne.n	80159ec <Delay_100ns+0xa>
	}
}
 80159fe:	bf00      	nop
 8015a00:	bf00      	nop
 8015a02:	370c      	adds	r7, #12
 8015a04:	46bd      	mov	sp, r7
 8015a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0a:	4770      	bx	lr

08015a0c <__errno>:
 8015a0c:	4b01      	ldr	r3, [pc, #4]	; (8015a14 <__errno+0x8>)
 8015a0e:	6818      	ldr	r0, [r3, #0]
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	20000108 	.word	0x20000108

08015a18 <__libc_init_array>:
 8015a18:	b570      	push	{r4, r5, r6, lr}
 8015a1a:	4d0d      	ldr	r5, [pc, #52]	; (8015a50 <__libc_init_array+0x38>)
 8015a1c:	4c0d      	ldr	r4, [pc, #52]	; (8015a54 <__libc_init_array+0x3c>)
 8015a1e:	1b64      	subs	r4, r4, r5
 8015a20:	10a4      	asrs	r4, r4, #2
 8015a22:	2600      	movs	r6, #0
 8015a24:	42a6      	cmp	r6, r4
 8015a26:	d109      	bne.n	8015a3c <__libc_init_array+0x24>
 8015a28:	4d0b      	ldr	r5, [pc, #44]	; (8015a58 <__libc_init_array+0x40>)
 8015a2a:	4c0c      	ldr	r4, [pc, #48]	; (8015a5c <__libc_init_array+0x44>)
 8015a2c:	f000 fc8e 	bl	801634c <_init>
 8015a30:	1b64      	subs	r4, r4, r5
 8015a32:	10a4      	asrs	r4, r4, #2
 8015a34:	2600      	movs	r6, #0
 8015a36:	42a6      	cmp	r6, r4
 8015a38:	d105      	bne.n	8015a46 <__libc_init_array+0x2e>
 8015a3a:	bd70      	pop	{r4, r5, r6, pc}
 8015a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a40:	4798      	blx	r3
 8015a42:	3601      	adds	r6, #1
 8015a44:	e7ee      	b.n	8015a24 <__libc_init_array+0xc>
 8015a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a4a:	4798      	blx	r3
 8015a4c:	3601      	adds	r6, #1
 8015a4e:	e7f2      	b.n	8015a36 <__libc_init_array+0x1e>
 8015a50:	08016af4 	.word	0x08016af4
 8015a54:	08016af4 	.word	0x08016af4
 8015a58:	08016af4 	.word	0x08016af4
 8015a5c:	08016af8 	.word	0x08016af8

08015a60 <memcpy>:
 8015a60:	440a      	add	r2, r1
 8015a62:	4291      	cmp	r1, r2
 8015a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a68:	d100      	bne.n	8015a6c <memcpy+0xc>
 8015a6a:	4770      	bx	lr
 8015a6c:	b510      	push	{r4, lr}
 8015a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a76:	4291      	cmp	r1, r2
 8015a78:	d1f9      	bne.n	8015a6e <memcpy+0xe>
 8015a7a:	bd10      	pop	{r4, pc}

08015a7c <memset>:
 8015a7c:	4402      	add	r2, r0
 8015a7e:	4603      	mov	r3, r0
 8015a80:	4293      	cmp	r3, r2
 8015a82:	d100      	bne.n	8015a86 <memset+0xa>
 8015a84:	4770      	bx	lr
 8015a86:	f803 1b01 	strb.w	r1, [r3], #1
 8015a8a:	e7f9      	b.n	8015a80 <memset+0x4>

08015a8c <siprintf>:
 8015a8c:	b40e      	push	{r1, r2, r3}
 8015a8e:	b500      	push	{lr}
 8015a90:	b09c      	sub	sp, #112	; 0x70
 8015a92:	ab1d      	add	r3, sp, #116	; 0x74
 8015a94:	9002      	str	r0, [sp, #8]
 8015a96:	9006      	str	r0, [sp, #24]
 8015a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a9c:	4809      	ldr	r0, [pc, #36]	; (8015ac4 <siprintf+0x38>)
 8015a9e:	9107      	str	r1, [sp, #28]
 8015aa0:	9104      	str	r1, [sp, #16]
 8015aa2:	4909      	ldr	r1, [pc, #36]	; (8015ac8 <siprintf+0x3c>)
 8015aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015aa8:	9105      	str	r1, [sp, #20]
 8015aaa:	6800      	ldr	r0, [r0, #0]
 8015aac:	9301      	str	r3, [sp, #4]
 8015aae:	a902      	add	r1, sp, #8
 8015ab0:	f000 f868 	bl	8015b84 <_svfiprintf_r>
 8015ab4:	9b02      	ldr	r3, [sp, #8]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	701a      	strb	r2, [r3, #0]
 8015aba:	b01c      	add	sp, #112	; 0x70
 8015abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ac0:	b003      	add	sp, #12
 8015ac2:	4770      	bx	lr
 8015ac4:	20000108 	.word	0x20000108
 8015ac8:	ffff0208 	.word	0xffff0208

08015acc <__ssputs_r>:
 8015acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ad0:	688e      	ldr	r6, [r1, #8]
 8015ad2:	429e      	cmp	r6, r3
 8015ad4:	4682      	mov	sl, r0
 8015ad6:	460c      	mov	r4, r1
 8015ad8:	4690      	mov	r8, r2
 8015ada:	461f      	mov	r7, r3
 8015adc:	d838      	bhi.n	8015b50 <__ssputs_r+0x84>
 8015ade:	898a      	ldrh	r2, [r1, #12]
 8015ae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015ae4:	d032      	beq.n	8015b4c <__ssputs_r+0x80>
 8015ae6:	6825      	ldr	r5, [r4, #0]
 8015ae8:	6909      	ldr	r1, [r1, #16]
 8015aea:	eba5 0901 	sub.w	r9, r5, r1
 8015aee:	6965      	ldr	r5, [r4, #20]
 8015af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015af8:	3301      	adds	r3, #1
 8015afa:	444b      	add	r3, r9
 8015afc:	106d      	asrs	r5, r5, #1
 8015afe:	429d      	cmp	r5, r3
 8015b00:	bf38      	it	cc
 8015b02:	461d      	movcc	r5, r3
 8015b04:	0553      	lsls	r3, r2, #21
 8015b06:	d531      	bpl.n	8015b6c <__ssputs_r+0xa0>
 8015b08:	4629      	mov	r1, r5
 8015b0a:	f000 fb55 	bl	80161b8 <_malloc_r>
 8015b0e:	4606      	mov	r6, r0
 8015b10:	b950      	cbnz	r0, 8015b28 <__ssputs_r+0x5c>
 8015b12:	230c      	movs	r3, #12
 8015b14:	f8ca 3000 	str.w	r3, [sl]
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b1e:	81a3      	strh	r3, [r4, #12]
 8015b20:	f04f 30ff 	mov.w	r0, #4294967295
 8015b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b28:	6921      	ldr	r1, [r4, #16]
 8015b2a:	464a      	mov	r2, r9
 8015b2c:	f7ff ff98 	bl	8015a60 <memcpy>
 8015b30:	89a3      	ldrh	r3, [r4, #12]
 8015b32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b3a:	81a3      	strh	r3, [r4, #12]
 8015b3c:	6126      	str	r6, [r4, #16]
 8015b3e:	6165      	str	r5, [r4, #20]
 8015b40:	444e      	add	r6, r9
 8015b42:	eba5 0509 	sub.w	r5, r5, r9
 8015b46:	6026      	str	r6, [r4, #0]
 8015b48:	60a5      	str	r5, [r4, #8]
 8015b4a:	463e      	mov	r6, r7
 8015b4c:	42be      	cmp	r6, r7
 8015b4e:	d900      	bls.n	8015b52 <__ssputs_r+0x86>
 8015b50:	463e      	mov	r6, r7
 8015b52:	6820      	ldr	r0, [r4, #0]
 8015b54:	4632      	mov	r2, r6
 8015b56:	4641      	mov	r1, r8
 8015b58:	f000 faa8 	bl	80160ac <memmove>
 8015b5c:	68a3      	ldr	r3, [r4, #8]
 8015b5e:	1b9b      	subs	r3, r3, r6
 8015b60:	60a3      	str	r3, [r4, #8]
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	4433      	add	r3, r6
 8015b66:	6023      	str	r3, [r4, #0]
 8015b68:	2000      	movs	r0, #0
 8015b6a:	e7db      	b.n	8015b24 <__ssputs_r+0x58>
 8015b6c:	462a      	mov	r2, r5
 8015b6e:	f000 fb97 	bl	80162a0 <_realloc_r>
 8015b72:	4606      	mov	r6, r0
 8015b74:	2800      	cmp	r0, #0
 8015b76:	d1e1      	bne.n	8015b3c <__ssputs_r+0x70>
 8015b78:	6921      	ldr	r1, [r4, #16]
 8015b7a:	4650      	mov	r0, sl
 8015b7c:	f000 fab0 	bl	80160e0 <_free_r>
 8015b80:	e7c7      	b.n	8015b12 <__ssputs_r+0x46>
	...

08015b84 <_svfiprintf_r>:
 8015b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b88:	4698      	mov	r8, r3
 8015b8a:	898b      	ldrh	r3, [r1, #12]
 8015b8c:	061b      	lsls	r3, r3, #24
 8015b8e:	b09d      	sub	sp, #116	; 0x74
 8015b90:	4607      	mov	r7, r0
 8015b92:	460d      	mov	r5, r1
 8015b94:	4614      	mov	r4, r2
 8015b96:	d50e      	bpl.n	8015bb6 <_svfiprintf_r+0x32>
 8015b98:	690b      	ldr	r3, [r1, #16]
 8015b9a:	b963      	cbnz	r3, 8015bb6 <_svfiprintf_r+0x32>
 8015b9c:	2140      	movs	r1, #64	; 0x40
 8015b9e:	f000 fb0b 	bl	80161b8 <_malloc_r>
 8015ba2:	6028      	str	r0, [r5, #0]
 8015ba4:	6128      	str	r0, [r5, #16]
 8015ba6:	b920      	cbnz	r0, 8015bb2 <_svfiprintf_r+0x2e>
 8015ba8:	230c      	movs	r3, #12
 8015baa:	603b      	str	r3, [r7, #0]
 8015bac:	f04f 30ff 	mov.w	r0, #4294967295
 8015bb0:	e0d1      	b.n	8015d56 <_svfiprintf_r+0x1d2>
 8015bb2:	2340      	movs	r3, #64	; 0x40
 8015bb4:	616b      	str	r3, [r5, #20]
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8015bba:	2320      	movs	r3, #32
 8015bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bc4:	2330      	movs	r3, #48	; 0x30
 8015bc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015d70 <_svfiprintf_r+0x1ec>
 8015bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bce:	f04f 0901 	mov.w	r9, #1
 8015bd2:	4623      	mov	r3, r4
 8015bd4:	469a      	mov	sl, r3
 8015bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bda:	b10a      	cbz	r2, 8015be0 <_svfiprintf_r+0x5c>
 8015bdc:	2a25      	cmp	r2, #37	; 0x25
 8015bde:	d1f9      	bne.n	8015bd4 <_svfiprintf_r+0x50>
 8015be0:	ebba 0b04 	subs.w	fp, sl, r4
 8015be4:	d00b      	beq.n	8015bfe <_svfiprintf_r+0x7a>
 8015be6:	465b      	mov	r3, fp
 8015be8:	4622      	mov	r2, r4
 8015bea:	4629      	mov	r1, r5
 8015bec:	4638      	mov	r0, r7
 8015bee:	f7ff ff6d 	bl	8015acc <__ssputs_r>
 8015bf2:	3001      	adds	r0, #1
 8015bf4:	f000 80aa 	beq.w	8015d4c <_svfiprintf_r+0x1c8>
 8015bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bfa:	445a      	add	r2, fp
 8015bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8015bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	f000 80a2 	beq.w	8015d4c <_svfiprintf_r+0x1c8>
 8015c08:	2300      	movs	r3, #0
 8015c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8015c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c12:	f10a 0a01 	add.w	sl, sl, #1
 8015c16:	9304      	str	r3, [sp, #16]
 8015c18:	9307      	str	r3, [sp, #28]
 8015c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8015c20:	4654      	mov	r4, sl
 8015c22:	2205      	movs	r2, #5
 8015c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c28:	4851      	ldr	r0, [pc, #324]	; (8015d70 <_svfiprintf_r+0x1ec>)
 8015c2a:	f7ea fab1 	bl	8000190 <memchr>
 8015c2e:	9a04      	ldr	r2, [sp, #16]
 8015c30:	b9d8      	cbnz	r0, 8015c6a <_svfiprintf_r+0xe6>
 8015c32:	06d0      	lsls	r0, r2, #27
 8015c34:	bf44      	itt	mi
 8015c36:	2320      	movmi	r3, #32
 8015c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c3c:	0711      	lsls	r1, r2, #28
 8015c3e:	bf44      	itt	mi
 8015c40:	232b      	movmi	r3, #43	; 0x2b
 8015c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c46:	f89a 3000 	ldrb.w	r3, [sl]
 8015c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8015c4c:	d015      	beq.n	8015c7a <_svfiprintf_r+0xf6>
 8015c4e:	9a07      	ldr	r2, [sp, #28]
 8015c50:	4654      	mov	r4, sl
 8015c52:	2000      	movs	r0, #0
 8015c54:	f04f 0c0a 	mov.w	ip, #10
 8015c58:	4621      	mov	r1, r4
 8015c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c5e:	3b30      	subs	r3, #48	; 0x30
 8015c60:	2b09      	cmp	r3, #9
 8015c62:	d94e      	bls.n	8015d02 <_svfiprintf_r+0x17e>
 8015c64:	b1b0      	cbz	r0, 8015c94 <_svfiprintf_r+0x110>
 8015c66:	9207      	str	r2, [sp, #28]
 8015c68:	e014      	b.n	8015c94 <_svfiprintf_r+0x110>
 8015c6a:	eba0 0308 	sub.w	r3, r0, r8
 8015c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8015c72:	4313      	orrs	r3, r2
 8015c74:	9304      	str	r3, [sp, #16]
 8015c76:	46a2      	mov	sl, r4
 8015c78:	e7d2      	b.n	8015c20 <_svfiprintf_r+0x9c>
 8015c7a:	9b03      	ldr	r3, [sp, #12]
 8015c7c:	1d19      	adds	r1, r3, #4
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	9103      	str	r1, [sp, #12]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	bfbb      	ittet	lt
 8015c86:	425b      	neglt	r3, r3
 8015c88:	f042 0202 	orrlt.w	r2, r2, #2
 8015c8c:	9307      	strge	r3, [sp, #28]
 8015c8e:	9307      	strlt	r3, [sp, #28]
 8015c90:	bfb8      	it	lt
 8015c92:	9204      	strlt	r2, [sp, #16]
 8015c94:	7823      	ldrb	r3, [r4, #0]
 8015c96:	2b2e      	cmp	r3, #46	; 0x2e
 8015c98:	d10c      	bne.n	8015cb4 <_svfiprintf_r+0x130>
 8015c9a:	7863      	ldrb	r3, [r4, #1]
 8015c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8015c9e:	d135      	bne.n	8015d0c <_svfiprintf_r+0x188>
 8015ca0:	9b03      	ldr	r3, [sp, #12]
 8015ca2:	1d1a      	adds	r2, r3, #4
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	9203      	str	r2, [sp, #12]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	bfb8      	it	lt
 8015cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8015cb0:	3402      	adds	r4, #2
 8015cb2:	9305      	str	r3, [sp, #20]
 8015cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015d80 <_svfiprintf_r+0x1fc>
 8015cb8:	7821      	ldrb	r1, [r4, #0]
 8015cba:	2203      	movs	r2, #3
 8015cbc:	4650      	mov	r0, sl
 8015cbe:	f7ea fa67 	bl	8000190 <memchr>
 8015cc2:	b140      	cbz	r0, 8015cd6 <_svfiprintf_r+0x152>
 8015cc4:	2340      	movs	r3, #64	; 0x40
 8015cc6:	eba0 000a 	sub.w	r0, r0, sl
 8015cca:	fa03 f000 	lsl.w	r0, r3, r0
 8015cce:	9b04      	ldr	r3, [sp, #16]
 8015cd0:	4303      	orrs	r3, r0
 8015cd2:	3401      	adds	r4, #1
 8015cd4:	9304      	str	r3, [sp, #16]
 8015cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cda:	4826      	ldr	r0, [pc, #152]	; (8015d74 <_svfiprintf_r+0x1f0>)
 8015cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ce0:	2206      	movs	r2, #6
 8015ce2:	f7ea fa55 	bl	8000190 <memchr>
 8015ce6:	2800      	cmp	r0, #0
 8015ce8:	d038      	beq.n	8015d5c <_svfiprintf_r+0x1d8>
 8015cea:	4b23      	ldr	r3, [pc, #140]	; (8015d78 <_svfiprintf_r+0x1f4>)
 8015cec:	bb1b      	cbnz	r3, 8015d36 <_svfiprintf_r+0x1b2>
 8015cee:	9b03      	ldr	r3, [sp, #12]
 8015cf0:	3307      	adds	r3, #7
 8015cf2:	f023 0307 	bic.w	r3, r3, #7
 8015cf6:	3308      	adds	r3, #8
 8015cf8:	9303      	str	r3, [sp, #12]
 8015cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cfc:	4433      	add	r3, r6
 8015cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8015d00:	e767      	b.n	8015bd2 <_svfiprintf_r+0x4e>
 8015d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d06:	460c      	mov	r4, r1
 8015d08:	2001      	movs	r0, #1
 8015d0a:	e7a5      	b.n	8015c58 <_svfiprintf_r+0xd4>
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	3401      	adds	r4, #1
 8015d10:	9305      	str	r3, [sp, #20]
 8015d12:	4619      	mov	r1, r3
 8015d14:	f04f 0c0a 	mov.w	ip, #10
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d1e:	3a30      	subs	r2, #48	; 0x30
 8015d20:	2a09      	cmp	r2, #9
 8015d22:	d903      	bls.n	8015d2c <_svfiprintf_r+0x1a8>
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d0c5      	beq.n	8015cb4 <_svfiprintf_r+0x130>
 8015d28:	9105      	str	r1, [sp, #20]
 8015d2a:	e7c3      	b.n	8015cb4 <_svfiprintf_r+0x130>
 8015d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d30:	4604      	mov	r4, r0
 8015d32:	2301      	movs	r3, #1
 8015d34:	e7f0      	b.n	8015d18 <_svfiprintf_r+0x194>
 8015d36:	ab03      	add	r3, sp, #12
 8015d38:	9300      	str	r3, [sp, #0]
 8015d3a:	462a      	mov	r2, r5
 8015d3c:	4b0f      	ldr	r3, [pc, #60]	; (8015d7c <_svfiprintf_r+0x1f8>)
 8015d3e:	a904      	add	r1, sp, #16
 8015d40:	4638      	mov	r0, r7
 8015d42:	f3af 8000 	nop.w
 8015d46:	1c42      	adds	r2, r0, #1
 8015d48:	4606      	mov	r6, r0
 8015d4a:	d1d6      	bne.n	8015cfa <_svfiprintf_r+0x176>
 8015d4c:	89ab      	ldrh	r3, [r5, #12]
 8015d4e:	065b      	lsls	r3, r3, #25
 8015d50:	f53f af2c 	bmi.w	8015bac <_svfiprintf_r+0x28>
 8015d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d56:	b01d      	add	sp, #116	; 0x74
 8015d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5c:	ab03      	add	r3, sp, #12
 8015d5e:	9300      	str	r3, [sp, #0]
 8015d60:	462a      	mov	r2, r5
 8015d62:	4b06      	ldr	r3, [pc, #24]	; (8015d7c <_svfiprintf_r+0x1f8>)
 8015d64:	a904      	add	r1, sp, #16
 8015d66:	4638      	mov	r0, r7
 8015d68:	f000 f87a 	bl	8015e60 <_printf_i>
 8015d6c:	e7eb      	b.n	8015d46 <_svfiprintf_r+0x1c2>
 8015d6e:	bf00      	nop
 8015d70:	08016ab8 	.word	0x08016ab8
 8015d74:	08016ac2 	.word	0x08016ac2
 8015d78:	00000000 	.word	0x00000000
 8015d7c:	08015acd 	.word	0x08015acd
 8015d80:	08016abe 	.word	0x08016abe

08015d84 <_printf_common>:
 8015d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d88:	4616      	mov	r6, r2
 8015d8a:	4699      	mov	r9, r3
 8015d8c:	688a      	ldr	r2, [r1, #8]
 8015d8e:	690b      	ldr	r3, [r1, #16]
 8015d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015d94:	4293      	cmp	r3, r2
 8015d96:	bfb8      	it	lt
 8015d98:	4613      	movlt	r3, r2
 8015d9a:	6033      	str	r3, [r6, #0]
 8015d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015da0:	4607      	mov	r7, r0
 8015da2:	460c      	mov	r4, r1
 8015da4:	b10a      	cbz	r2, 8015daa <_printf_common+0x26>
 8015da6:	3301      	adds	r3, #1
 8015da8:	6033      	str	r3, [r6, #0]
 8015daa:	6823      	ldr	r3, [r4, #0]
 8015dac:	0699      	lsls	r1, r3, #26
 8015dae:	bf42      	ittt	mi
 8015db0:	6833      	ldrmi	r3, [r6, #0]
 8015db2:	3302      	addmi	r3, #2
 8015db4:	6033      	strmi	r3, [r6, #0]
 8015db6:	6825      	ldr	r5, [r4, #0]
 8015db8:	f015 0506 	ands.w	r5, r5, #6
 8015dbc:	d106      	bne.n	8015dcc <_printf_common+0x48>
 8015dbe:	f104 0a19 	add.w	sl, r4, #25
 8015dc2:	68e3      	ldr	r3, [r4, #12]
 8015dc4:	6832      	ldr	r2, [r6, #0]
 8015dc6:	1a9b      	subs	r3, r3, r2
 8015dc8:	42ab      	cmp	r3, r5
 8015dca:	dc26      	bgt.n	8015e1a <_printf_common+0x96>
 8015dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015dd0:	1e13      	subs	r3, r2, #0
 8015dd2:	6822      	ldr	r2, [r4, #0]
 8015dd4:	bf18      	it	ne
 8015dd6:	2301      	movne	r3, #1
 8015dd8:	0692      	lsls	r2, r2, #26
 8015dda:	d42b      	bmi.n	8015e34 <_printf_common+0xb0>
 8015ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015de0:	4649      	mov	r1, r9
 8015de2:	4638      	mov	r0, r7
 8015de4:	47c0      	blx	r8
 8015de6:	3001      	adds	r0, #1
 8015de8:	d01e      	beq.n	8015e28 <_printf_common+0xa4>
 8015dea:	6823      	ldr	r3, [r4, #0]
 8015dec:	68e5      	ldr	r5, [r4, #12]
 8015dee:	6832      	ldr	r2, [r6, #0]
 8015df0:	f003 0306 	and.w	r3, r3, #6
 8015df4:	2b04      	cmp	r3, #4
 8015df6:	bf08      	it	eq
 8015df8:	1aad      	subeq	r5, r5, r2
 8015dfa:	68a3      	ldr	r3, [r4, #8]
 8015dfc:	6922      	ldr	r2, [r4, #16]
 8015dfe:	bf0c      	ite	eq
 8015e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e04:	2500      	movne	r5, #0
 8015e06:	4293      	cmp	r3, r2
 8015e08:	bfc4      	itt	gt
 8015e0a:	1a9b      	subgt	r3, r3, r2
 8015e0c:	18ed      	addgt	r5, r5, r3
 8015e0e:	2600      	movs	r6, #0
 8015e10:	341a      	adds	r4, #26
 8015e12:	42b5      	cmp	r5, r6
 8015e14:	d11a      	bne.n	8015e4c <_printf_common+0xc8>
 8015e16:	2000      	movs	r0, #0
 8015e18:	e008      	b.n	8015e2c <_printf_common+0xa8>
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	4652      	mov	r2, sl
 8015e1e:	4649      	mov	r1, r9
 8015e20:	4638      	mov	r0, r7
 8015e22:	47c0      	blx	r8
 8015e24:	3001      	adds	r0, #1
 8015e26:	d103      	bne.n	8015e30 <_printf_common+0xac>
 8015e28:	f04f 30ff 	mov.w	r0, #4294967295
 8015e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e30:	3501      	adds	r5, #1
 8015e32:	e7c6      	b.n	8015dc2 <_printf_common+0x3e>
 8015e34:	18e1      	adds	r1, r4, r3
 8015e36:	1c5a      	adds	r2, r3, #1
 8015e38:	2030      	movs	r0, #48	; 0x30
 8015e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e3e:	4422      	add	r2, r4
 8015e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e48:	3302      	adds	r3, #2
 8015e4a:	e7c7      	b.n	8015ddc <_printf_common+0x58>
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	4622      	mov	r2, r4
 8015e50:	4649      	mov	r1, r9
 8015e52:	4638      	mov	r0, r7
 8015e54:	47c0      	blx	r8
 8015e56:	3001      	adds	r0, #1
 8015e58:	d0e6      	beq.n	8015e28 <_printf_common+0xa4>
 8015e5a:	3601      	adds	r6, #1
 8015e5c:	e7d9      	b.n	8015e12 <_printf_common+0x8e>
	...

08015e60 <_printf_i>:
 8015e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e64:	7e0f      	ldrb	r7, [r1, #24]
 8015e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e68:	2f78      	cmp	r7, #120	; 0x78
 8015e6a:	4691      	mov	r9, r2
 8015e6c:	4680      	mov	r8, r0
 8015e6e:	460c      	mov	r4, r1
 8015e70:	469a      	mov	sl, r3
 8015e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015e76:	d807      	bhi.n	8015e88 <_printf_i+0x28>
 8015e78:	2f62      	cmp	r7, #98	; 0x62
 8015e7a:	d80a      	bhi.n	8015e92 <_printf_i+0x32>
 8015e7c:	2f00      	cmp	r7, #0
 8015e7e:	f000 80d8 	beq.w	8016032 <_printf_i+0x1d2>
 8015e82:	2f58      	cmp	r7, #88	; 0x58
 8015e84:	f000 80a3 	beq.w	8015fce <_printf_i+0x16e>
 8015e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015e90:	e03a      	b.n	8015f08 <_printf_i+0xa8>
 8015e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015e96:	2b15      	cmp	r3, #21
 8015e98:	d8f6      	bhi.n	8015e88 <_printf_i+0x28>
 8015e9a:	a101      	add	r1, pc, #4	; (adr r1, 8015ea0 <_printf_i+0x40>)
 8015e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ea0:	08015ef9 	.word	0x08015ef9
 8015ea4:	08015f0d 	.word	0x08015f0d
 8015ea8:	08015e89 	.word	0x08015e89
 8015eac:	08015e89 	.word	0x08015e89
 8015eb0:	08015e89 	.word	0x08015e89
 8015eb4:	08015e89 	.word	0x08015e89
 8015eb8:	08015f0d 	.word	0x08015f0d
 8015ebc:	08015e89 	.word	0x08015e89
 8015ec0:	08015e89 	.word	0x08015e89
 8015ec4:	08015e89 	.word	0x08015e89
 8015ec8:	08015e89 	.word	0x08015e89
 8015ecc:	08016019 	.word	0x08016019
 8015ed0:	08015f3d 	.word	0x08015f3d
 8015ed4:	08015ffb 	.word	0x08015ffb
 8015ed8:	08015e89 	.word	0x08015e89
 8015edc:	08015e89 	.word	0x08015e89
 8015ee0:	0801603b 	.word	0x0801603b
 8015ee4:	08015e89 	.word	0x08015e89
 8015ee8:	08015f3d 	.word	0x08015f3d
 8015eec:	08015e89 	.word	0x08015e89
 8015ef0:	08015e89 	.word	0x08015e89
 8015ef4:	08016003 	.word	0x08016003
 8015ef8:	682b      	ldr	r3, [r5, #0]
 8015efa:	1d1a      	adds	r2, r3, #4
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	602a      	str	r2, [r5, #0]
 8015f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f08:	2301      	movs	r3, #1
 8015f0a:	e0a3      	b.n	8016054 <_printf_i+0x1f4>
 8015f0c:	6820      	ldr	r0, [r4, #0]
 8015f0e:	6829      	ldr	r1, [r5, #0]
 8015f10:	0606      	lsls	r6, r0, #24
 8015f12:	f101 0304 	add.w	r3, r1, #4
 8015f16:	d50a      	bpl.n	8015f2e <_printf_i+0xce>
 8015f18:	680e      	ldr	r6, [r1, #0]
 8015f1a:	602b      	str	r3, [r5, #0]
 8015f1c:	2e00      	cmp	r6, #0
 8015f1e:	da03      	bge.n	8015f28 <_printf_i+0xc8>
 8015f20:	232d      	movs	r3, #45	; 0x2d
 8015f22:	4276      	negs	r6, r6
 8015f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f28:	485e      	ldr	r0, [pc, #376]	; (80160a4 <_printf_i+0x244>)
 8015f2a:	230a      	movs	r3, #10
 8015f2c:	e019      	b.n	8015f62 <_printf_i+0x102>
 8015f2e:	680e      	ldr	r6, [r1, #0]
 8015f30:	602b      	str	r3, [r5, #0]
 8015f32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f36:	bf18      	it	ne
 8015f38:	b236      	sxthne	r6, r6
 8015f3a:	e7ef      	b.n	8015f1c <_printf_i+0xbc>
 8015f3c:	682b      	ldr	r3, [r5, #0]
 8015f3e:	6820      	ldr	r0, [r4, #0]
 8015f40:	1d19      	adds	r1, r3, #4
 8015f42:	6029      	str	r1, [r5, #0]
 8015f44:	0601      	lsls	r1, r0, #24
 8015f46:	d501      	bpl.n	8015f4c <_printf_i+0xec>
 8015f48:	681e      	ldr	r6, [r3, #0]
 8015f4a:	e002      	b.n	8015f52 <_printf_i+0xf2>
 8015f4c:	0646      	lsls	r6, r0, #25
 8015f4e:	d5fb      	bpl.n	8015f48 <_printf_i+0xe8>
 8015f50:	881e      	ldrh	r6, [r3, #0]
 8015f52:	4854      	ldr	r0, [pc, #336]	; (80160a4 <_printf_i+0x244>)
 8015f54:	2f6f      	cmp	r7, #111	; 0x6f
 8015f56:	bf0c      	ite	eq
 8015f58:	2308      	moveq	r3, #8
 8015f5a:	230a      	movne	r3, #10
 8015f5c:	2100      	movs	r1, #0
 8015f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f62:	6865      	ldr	r5, [r4, #4]
 8015f64:	60a5      	str	r5, [r4, #8]
 8015f66:	2d00      	cmp	r5, #0
 8015f68:	bfa2      	ittt	ge
 8015f6a:	6821      	ldrge	r1, [r4, #0]
 8015f6c:	f021 0104 	bicge.w	r1, r1, #4
 8015f70:	6021      	strge	r1, [r4, #0]
 8015f72:	b90e      	cbnz	r6, 8015f78 <_printf_i+0x118>
 8015f74:	2d00      	cmp	r5, #0
 8015f76:	d04d      	beq.n	8016014 <_printf_i+0x1b4>
 8015f78:	4615      	mov	r5, r2
 8015f7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8015f7e:	fb03 6711 	mls	r7, r3, r1, r6
 8015f82:	5dc7      	ldrb	r7, [r0, r7]
 8015f84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015f88:	4637      	mov	r7, r6
 8015f8a:	42bb      	cmp	r3, r7
 8015f8c:	460e      	mov	r6, r1
 8015f8e:	d9f4      	bls.n	8015f7a <_printf_i+0x11a>
 8015f90:	2b08      	cmp	r3, #8
 8015f92:	d10b      	bne.n	8015fac <_printf_i+0x14c>
 8015f94:	6823      	ldr	r3, [r4, #0]
 8015f96:	07de      	lsls	r6, r3, #31
 8015f98:	d508      	bpl.n	8015fac <_printf_i+0x14c>
 8015f9a:	6923      	ldr	r3, [r4, #16]
 8015f9c:	6861      	ldr	r1, [r4, #4]
 8015f9e:	4299      	cmp	r1, r3
 8015fa0:	bfde      	ittt	le
 8015fa2:	2330      	movle	r3, #48	; 0x30
 8015fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015fa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015fac:	1b52      	subs	r2, r2, r5
 8015fae:	6122      	str	r2, [r4, #16]
 8015fb0:	f8cd a000 	str.w	sl, [sp]
 8015fb4:	464b      	mov	r3, r9
 8015fb6:	aa03      	add	r2, sp, #12
 8015fb8:	4621      	mov	r1, r4
 8015fba:	4640      	mov	r0, r8
 8015fbc:	f7ff fee2 	bl	8015d84 <_printf_common>
 8015fc0:	3001      	adds	r0, #1
 8015fc2:	d14c      	bne.n	801605e <_printf_i+0x1fe>
 8015fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8015fc8:	b004      	add	sp, #16
 8015fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fce:	4835      	ldr	r0, [pc, #212]	; (80160a4 <_printf_i+0x244>)
 8015fd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015fd4:	6829      	ldr	r1, [r5, #0]
 8015fd6:	6823      	ldr	r3, [r4, #0]
 8015fd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8015fdc:	6029      	str	r1, [r5, #0]
 8015fde:	061d      	lsls	r5, r3, #24
 8015fe0:	d514      	bpl.n	801600c <_printf_i+0x1ac>
 8015fe2:	07df      	lsls	r7, r3, #31
 8015fe4:	bf44      	itt	mi
 8015fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8015fea:	6023      	strmi	r3, [r4, #0]
 8015fec:	b91e      	cbnz	r6, 8015ff6 <_printf_i+0x196>
 8015fee:	6823      	ldr	r3, [r4, #0]
 8015ff0:	f023 0320 	bic.w	r3, r3, #32
 8015ff4:	6023      	str	r3, [r4, #0]
 8015ff6:	2310      	movs	r3, #16
 8015ff8:	e7b0      	b.n	8015f5c <_printf_i+0xfc>
 8015ffa:	6823      	ldr	r3, [r4, #0]
 8015ffc:	f043 0320 	orr.w	r3, r3, #32
 8016000:	6023      	str	r3, [r4, #0]
 8016002:	2378      	movs	r3, #120	; 0x78
 8016004:	4828      	ldr	r0, [pc, #160]	; (80160a8 <_printf_i+0x248>)
 8016006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801600a:	e7e3      	b.n	8015fd4 <_printf_i+0x174>
 801600c:	0659      	lsls	r1, r3, #25
 801600e:	bf48      	it	mi
 8016010:	b2b6      	uxthmi	r6, r6
 8016012:	e7e6      	b.n	8015fe2 <_printf_i+0x182>
 8016014:	4615      	mov	r5, r2
 8016016:	e7bb      	b.n	8015f90 <_printf_i+0x130>
 8016018:	682b      	ldr	r3, [r5, #0]
 801601a:	6826      	ldr	r6, [r4, #0]
 801601c:	6961      	ldr	r1, [r4, #20]
 801601e:	1d18      	adds	r0, r3, #4
 8016020:	6028      	str	r0, [r5, #0]
 8016022:	0635      	lsls	r5, r6, #24
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	d501      	bpl.n	801602c <_printf_i+0x1cc>
 8016028:	6019      	str	r1, [r3, #0]
 801602a:	e002      	b.n	8016032 <_printf_i+0x1d2>
 801602c:	0670      	lsls	r0, r6, #25
 801602e:	d5fb      	bpl.n	8016028 <_printf_i+0x1c8>
 8016030:	8019      	strh	r1, [r3, #0]
 8016032:	2300      	movs	r3, #0
 8016034:	6123      	str	r3, [r4, #16]
 8016036:	4615      	mov	r5, r2
 8016038:	e7ba      	b.n	8015fb0 <_printf_i+0x150>
 801603a:	682b      	ldr	r3, [r5, #0]
 801603c:	1d1a      	adds	r2, r3, #4
 801603e:	602a      	str	r2, [r5, #0]
 8016040:	681d      	ldr	r5, [r3, #0]
 8016042:	6862      	ldr	r2, [r4, #4]
 8016044:	2100      	movs	r1, #0
 8016046:	4628      	mov	r0, r5
 8016048:	f7ea f8a2 	bl	8000190 <memchr>
 801604c:	b108      	cbz	r0, 8016052 <_printf_i+0x1f2>
 801604e:	1b40      	subs	r0, r0, r5
 8016050:	6060      	str	r0, [r4, #4]
 8016052:	6863      	ldr	r3, [r4, #4]
 8016054:	6123      	str	r3, [r4, #16]
 8016056:	2300      	movs	r3, #0
 8016058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801605c:	e7a8      	b.n	8015fb0 <_printf_i+0x150>
 801605e:	6923      	ldr	r3, [r4, #16]
 8016060:	462a      	mov	r2, r5
 8016062:	4649      	mov	r1, r9
 8016064:	4640      	mov	r0, r8
 8016066:	47d0      	blx	sl
 8016068:	3001      	adds	r0, #1
 801606a:	d0ab      	beq.n	8015fc4 <_printf_i+0x164>
 801606c:	6823      	ldr	r3, [r4, #0]
 801606e:	079b      	lsls	r3, r3, #30
 8016070:	d413      	bmi.n	801609a <_printf_i+0x23a>
 8016072:	68e0      	ldr	r0, [r4, #12]
 8016074:	9b03      	ldr	r3, [sp, #12]
 8016076:	4298      	cmp	r0, r3
 8016078:	bfb8      	it	lt
 801607a:	4618      	movlt	r0, r3
 801607c:	e7a4      	b.n	8015fc8 <_printf_i+0x168>
 801607e:	2301      	movs	r3, #1
 8016080:	4632      	mov	r2, r6
 8016082:	4649      	mov	r1, r9
 8016084:	4640      	mov	r0, r8
 8016086:	47d0      	blx	sl
 8016088:	3001      	adds	r0, #1
 801608a:	d09b      	beq.n	8015fc4 <_printf_i+0x164>
 801608c:	3501      	adds	r5, #1
 801608e:	68e3      	ldr	r3, [r4, #12]
 8016090:	9903      	ldr	r1, [sp, #12]
 8016092:	1a5b      	subs	r3, r3, r1
 8016094:	42ab      	cmp	r3, r5
 8016096:	dcf2      	bgt.n	801607e <_printf_i+0x21e>
 8016098:	e7eb      	b.n	8016072 <_printf_i+0x212>
 801609a:	2500      	movs	r5, #0
 801609c:	f104 0619 	add.w	r6, r4, #25
 80160a0:	e7f5      	b.n	801608e <_printf_i+0x22e>
 80160a2:	bf00      	nop
 80160a4:	08016ac9 	.word	0x08016ac9
 80160a8:	08016ada 	.word	0x08016ada

080160ac <memmove>:
 80160ac:	4288      	cmp	r0, r1
 80160ae:	b510      	push	{r4, lr}
 80160b0:	eb01 0402 	add.w	r4, r1, r2
 80160b4:	d902      	bls.n	80160bc <memmove+0x10>
 80160b6:	4284      	cmp	r4, r0
 80160b8:	4623      	mov	r3, r4
 80160ba:	d807      	bhi.n	80160cc <memmove+0x20>
 80160bc:	1e43      	subs	r3, r0, #1
 80160be:	42a1      	cmp	r1, r4
 80160c0:	d008      	beq.n	80160d4 <memmove+0x28>
 80160c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80160c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80160ca:	e7f8      	b.n	80160be <memmove+0x12>
 80160cc:	4402      	add	r2, r0
 80160ce:	4601      	mov	r1, r0
 80160d0:	428a      	cmp	r2, r1
 80160d2:	d100      	bne.n	80160d6 <memmove+0x2a>
 80160d4:	bd10      	pop	{r4, pc}
 80160d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80160da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80160de:	e7f7      	b.n	80160d0 <memmove+0x24>

080160e0 <_free_r>:
 80160e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160e2:	2900      	cmp	r1, #0
 80160e4:	d044      	beq.n	8016170 <_free_r+0x90>
 80160e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160ea:	9001      	str	r0, [sp, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	f1a1 0404 	sub.w	r4, r1, #4
 80160f2:	bfb8      	it	lt
 80160f4:	18e4      	addlt	r4, r4, r3
 80160f6:	f000 f913 	bl	8016320 <__malloc_lock>
 80160fa:	4a1e      	ldr	r2, [pc, #120]	; (8016174 <_free_r+0x94>)
 80160fc:	9801      	ldr	r0, [sp, #4]
 80160fe:	6813      	ldr	r3, [r2, #0]
 8016100:	b933      	cbnz	r3, 8016110 <_free_r+0x30>
 8016102:	6063      	str	r3, [r4, #4]
 8016104:	6014      	str	r4, [r2, #0]
 8016106:	b003      	add	sp, #12
 8016108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801610c:	f000 b90e 	b.w	801632c <__malloc_unlock>
 8016110:	42a3      	cmp	r3, r4
 8016112:	d908      	bls.n	8016126 <_free_r+0x46>
 8016114:	6825      	ldr	r5, [r4, #0]
 8016116:	1961      	adds	r1, r4, r5
 8016118:	428b      	cmp	r3, r1
 801611a:	bf01      	itttt	eq
 801611c:	6819      	ldreq	r1, [r3, #0]
 801611e:	685b      	ldreq	r3, [r3, #4]
 8016120:	1949      	addeq	r1, r1, r5
 8016122:	6021      	streq	r1, [r4, #0]
 8016124:	e7ed      	b.n	8016102 <_free_r+0x22>
 8016126:	461a      	mov	r2, r3
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	b10b      	cbz	r3, 8016130 <_free_r+0x50>
 801612c:	42a3      	cmp	r3, r4
 801612e:	d9fa      	bls.n	8016126 <_free_r+0x46>
 8016130:	6811      	ldr	r1, [r2, #0]
 8016132:	1855      	adds	r5, r2, r1
 8016134:	42a5      	cmp	r5, r4
 8016136:	d10b      	bne.n	8016150 <_free_r+0x70>
 8016138:	6824      	ldr	r4, [r4, #0]
 801613a:	4421      	add	r1, r4
 801613c:	1854      	adds	r4, r2, r1
 801613e:	42a3      	cmp	r3, r4
 8016140:	6011      	str	r1, [r2, #0]
 8016142:	d1e0      	bne.n	8016106 <_free_r+0x26>
 8016144:	681c      	ldr	r4, [r3, #0]
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	6053      	str	r3, [r2, #4]
 801614a:	4421      	add	r1, r4
 801614c:	6011      	str	r1, [r2, #0]
 801614e:	e7da      	b.n	8016106 <_free_r+0x26>
 8016150:	d902      	bls.n	8016158 <_free_r+0x78>
 8016152:	230c      	movs	r3, #12
 8016154:	6003      	str	r3, [r0, #0]
 8016156:	e7d6      	b.n	8016106 <_free_r+0x26>
 8016158:	6825      	ldr	r5, [r4, #0]
 801615a:	1961      	adds	r1, r4, r5
 801615c:	428b      	cmp	r3, r1
 801615e:	bf04      	itt	eq
 8016160:	6819      	ldreq	r1, [r3, #0]
 8016162:	685b      	ldreq	r3, [r3, #4]
 8016164:	6063      	str	r3, [r4, #4]
 8016166:	bf04      	itt	eq
 8016168:	1949      	addeq	r1, r1, r5
 801616a:	6021      	streq	r1, [r4, #0]
 801616c:	6054      	str	r4, [r2, #4]
 801616e:	e7ca      	b.n	8016106 <_free_r+0x26>
 8016170:	b003      	add	sp, #12
 8016172:	bd30      	pop	{r4, r5, pc}
 8016174:	20001d3c 	.word	0x20001d3c

08016178 <sbrk_aligned>:
 8016178:	b570      	push	{r4, r5, r6, lr}
 801617a:	4e0e      	ldr	r6, [pc, #56]	; (80161b4 <sbrk_aligned+0x3c>)
 801617c:	460c      	mov	r4, r1
 801617e:	6831      	ldr	r1, [r6, #0]
 8016180:	4605      	mov	r5, r0
 8016182:	b911      	cbnz	r1, 801618a <sbrk_aligned+0x12>
 8016184:	f000 f8bc 	bl	8016300 <_sbrk_r>
 8016188:	6030      	str	r0, [r6, #0]
 801618a:	4621      	mov	r1, r4
 801618c:	4628      	mov	r0, r5
 801618e:	f000 f8b7 	bl	8016300 <_sbrk_r>
 8016192:	1c43      	adds	r3, r0, #1
 8016194:	d00a      	beq.n	80161ac <sbrk_aligned+0x34>
 8016196:	1cc4      	adds	r4, r0, #3
 8016198:	f024 0403 	bic.w	r4, r4, #3
 801619c:	42a0      	cmp	r0, r4
 801619e:	d007      	beq.n	80161b0 <sbrk_aligned+0x38>
 80161a0:	1a21      	subs	r1, r4, r0
 80161a2:	4628      	mov	r0, r5
 80161a4:	f000 f8ac 	bl	8016300 <_sbrk_r>
 80161a8:	3001      	adds	r0, #1
 80161aa:	d101      	bne.n	80161b0 <sbrk_aligned+0x38>
 80161ac:	f04f 34ff 	mov.w	r4, #4294967295
 80161b0:	4620      	mov	r0, r4
 80161b2:	bd70      	pop	{r4, r5, r6, pc}
 80161b4:	20001d40 	.word	0x20001d40

080161b8 <_malloc_r>:
 80161b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161bc:	1ccd      	adds	r5, r1, #3
 80161be:	f025 0503 	bic.w	r5, r5, #3
 80161c2:	3508      	adds	r5, #8
 80161c4:	2d0c      	cmp	r5, #12
 80161c6:	bf38      	it	cc
 80161c8:	250c      	movcc	r5, #12
 80161ca:	2d00      	cmp	r5, #0
 80161cc:	4607      	mov	r7, r0
 80161ce:	db01      	blt.n	80161d4 <_malloc_r+0x1c>
 80161d0:	42a9      	cmp	r1, r5
 80161d2:	d905      	bls.n	80161e0 <_malloc_r+0x28>
 80161d4:	230c      	movs	r3, #12
 80161d6:	603b      	str	r3, [r7, #0]
 80161d8:	2600      	movs	r6, #0
 80161da:	4630      	mov	r0, r6
 80161dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161e0:	4e2e      	ldr	r6, [pc, #184]	; (801629c <_malloc_r+0xe4>)
 80161e2:	f000 f89d 	bl	8016320 <__malloc_lock>
 80161e6:	6833      	ldr	r3, [r6, #0]
 80161e8:	461c      	mov	r4, r3
 80161ea:	bb34      	cbnz	r4, 801623a <_malloc_r+0x82>
 80161ec:	4629      	mov	r1, r5
 80161ee:	4638      	mov	r0, r7
 80161f0:	f7ff ffc2 	bl	8016178 <sbrk_aligned>
 80161f4:	1c43      	adds	r3, r0, #1
 80161f6:	4604      	mov	r4, r0
 80161f8:	d14d      	bne.n	8016296 <_malloc_r+0xde>
 80161fa:	6834      	ldr	r4, [r6, #0]
 80161fc:	4626      	mov	r6, r4
 80161fe:	2e00      	cmp	r6, #0
 8016200:	d140      	bne.n	8016284 <_malloc_r+0xcc>
 8016202:	6823      	ldr	r3, [r4, #0]
 8016204:	4631      	mov	r1, r6
 8016206:	4638      	mov	r0, r7
 8016208:	eb04 0803 	add.w	r8, r4, r3
 801620c:	f000 f878 	bl	8016300 <_sbrk_r>
 8016210:	4580      	cmp	r8, r0
 8016212:	d13a      	bne.n	801628a <_malloc_r+0xd2>
 8016214:	6821      	ldr	r1, [r4, #0]
 8016216:	3503      	adds	r5, #3
 8016218:	1a6d      	subs	r5, r5, r1
 801621a:	f025 0503 	bic.w	r5, r5, #3
 801621e:	3508      	adds	r5, #8
 8016220:	2d0c      	cmp	r5, #12
 8016222:	bf38      	it	cc
 8016224:	250c      	movcc	r5, #12
 8016226:	4629      	mov	r1, r5
 8016228:	4638      	mov	r0, r7
 801622a:	f7ff ffa5 	bl	8016178 <sbrk_aligned>
 801622e:	3001      	adds	r0, #1
 8016230:	d02b      	beq.n	801628a <_malloc_r+0xd2>
 8016232:	6823      	ldr	r3, [r4, #0]
 8016234:	442b      	add	r3, r5
 8016236:	6023      	str	r3, [r4, #0]
 8016238:	e00e      	b.n	8016258 <_malloc_r+0xa0>
 801623a:	6822      	ldr	r2, [r4, #0]
 801623c:	1b52      	subs	r2, r2, r5
 801623e:	d41e      	bmi.n	801627e <_malloc_r+0xc6>
 8016240:	2a0b      	cmp	r2, #11
 8016242:	d916      	bls.n	8016272 <_malloc_r+0xba>
 8016244:	1961      	adds	r1, r4, r5
 8016246:	42a3      	cmp	r3, r4
 8016248:	6025      	str	r5, [r4, #0]
 801624a:	bf18      	it	ne
 801624c:	6059      	strne	r1, [r3, #4]
 801624e:	6863      	ldr	r3, [r4, #4]
 8016250:	bf08      	it	eq
 8016252:	6031      	streq	r1, [r6, #0]
 8016254:	5162      	str	r2, [r4, r5]
 8016256:	604b      	str	r3, [r1, #4]
 8016258:	4638      	mov	r0, r7
 801625a:	f104 060b 	add.w	r6, r4, #11
 801625e:	f000 f865 	bl	801632c <__malloc_unlock>
 8016262:	f026 0607 	bic.w	r6, r6, #7
 8016266:	1d23      	adds	r3, r4, #4
 8016268:	1af2      	subs	r2, r6, r3
 801626a:	d0b6      	beq.n	80161da <_malloc_r+0x22>
 801626c:	1b9b      	subs	r3, r3, r6
 801626e:	50a3      	str	r3, [r4, r2]
 8016270:	e7b3      	b.n	80161da <_malloc_r+0x22>
 8016272:	6862      	ldr	r2, [r4, #4]
 8016274:	42a3      	cmp	r3, r4
 8016276:	bf0c      	ite	eq
 8016278:	6032      	streq	r2, [r6, #0]
 801627a:	605a      	strne	r2, [r3, #4]
 801627c:	e7ec      	b.n	8016258 <_malloc_r+0xa0>
 801627e:	4623      	mov	r3, r4
 8016280:	6864      	ldr	r4, [r4, #4]
 8016282:	e7b2      	b.n	80161ea <_malloc_r+0x32>
 8016284:	4634      	mov	r4, r6
 8016286:	6876      	ldr	r6, [r6, #4]
 8016288:	e7b9      	b.n	80161fe <_malloc_r+0x46>
 801628a:	230c      	movs	r3, #12
 801628c:	603b      	str	r3, [r7, #0]
 801628e:	4638      	mov	r0, r7
 8016290:	f000 f84c 	bl	801632c <__malloc_unlock>
 8016294:	e7a1      	b.n	80161da <_malloc_r+0x22>
 8016296:	6025      	str	r5, [r4, #0]
 8016298:	e7de      	b.n	8016258 <_malloc_r+0xa0>
 801629a:	bf00      	nop
 801629c:	20001d3c 	.word	0x20001d3c

080162a0 <_realloc_r>:
 80162a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a4:	4680      	mov	r8, r0
 80162a6:	4614      	mov	r4, r2
 80162a8:	460e      	mov	r6, r1
 80162aa:	b921      	cbnz	r1, 80162b6 <_realloc_r+0x16>
 80162ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162b0:	4611      	mov	r1, r2
 80162b2:	f7ff bf81 	b.w	80161b8 <_malloc_r>
 80162b6:	b92a      	cbnz	r2, 80162c4 <_realloc_r+0x24>
 80162b8:	f7ff ff12 	bl	80160e0 <_free_r>
 80162bc:	4625      	mov	r5, r4
 80162be:	4628      	mov	r0, r5
 80162c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c4:	f000 f838 	bl	8016338 <_malloc_usable_size_r>
 80162c8:	4284      	cmp	r4, r0
 80162ca:	4607      	mov	r7, r0
 80162cc:	d802      	bhi.n	80162d4 <_realloc_r+0x34>
 80162ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162d2:	d812      	bhi.n	80162fa <_realloc_r+0x5a>
 80162d4:	4621      	mov	r1, r4
 80162d6:	4640      	mov	r0, r8
 80162d8:	f7ff ff6e 	bl	80161b8 <_malloc_r>
 80162dc:	4605      	mov	r5, r0
 80162de:	2800      	cmp	r0, #0
 80162e0:	d0ed      	beq.n	80162be <_realloc_r+0x1e>
 80162e2:	42bc      	cmp	r4, r7
 80162e4:	4622      	mov	r2, r4
 80162e6:	4631      	mov	r1, r6
 80162e8:	bf28      	it	cs
 80162ea:	463a      	movcs	r2, r7
 80162ec:	f7ff fbb8 	bl	8015a60 <memcpy>
 80162f0:	4631      	mov	r1, r6
 80162f2:	4640      	mov	r0, r8
 80162f4:	f7ff fef4 	bl	80160e0 <_free_r>
 80162f8:	e7e1      	b.n	80162be <_realloc_r+0x1e>
 80162fa:	4635      	mov	r5, r6
 80162fc:	e7df      	b.n	80162be <_realloc_r+0x1e>
	...

08016300 <_sbrk_r>:
 8016300:	b538      	push	{r3, r4, r5, lr}
 8016302:	4d06      	ldr	r5, [pc, #24]	; (801631c <_sbrk_r+0x1c>)
 8016304:	2300      	movs	r3, #0
 8016306:	4604      	mov	r4, r0
 8016308:	4608      	mov	r0, r1
 801630a:	602b      	str	r3, [r5, #0]
 801630c:	f7ea feec 	bl	80010e8 <_sbrk>
 8016310:	1c43      	adds	r3, r0, #1
 8016312:	d102      	bne.n	801631a <_sbrk_r+0x1a>
 8016314:	682b      	ldr	r3, [r5, #0]
 8016316:	b103      	cbz	r3, 801631a <_sbrk_r+0x1a>
 8016318:	6023      	str	r3, [r4, #0]
 801631a:	bd38      	pop	{r3, r4, r5, pc}
 801631c:	20001d44 	.word	0x20001d44

08016320 <__malloc_lock>:
 8016320:	4801      	ldr	r0, [pc, #4]	; (8016328 <__malloc_lock+0x8>)
 8016322:	f000 b811 	b.w	8016348 <__retarget_lock_acquire_recursive>
 8016326:	bf00      	nop
 8016328:	20001d48 	.word	0x20001d48

0801632c <__malloc_unlock>:
 801632c:	4801      	ldr	r0, [pc, #4]	; (8016334 <__malloc_unlock+0x8>)
 801632e:	f000 b80c 	b.w	801634a <__retarget_lock_release_recursive>
 8016332:	bf00      	nop
 8016334:	20001d48 	.word	0x20001d48

08016338 <_malloc_usable_size_r>:
 8016338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801633c:	1f18      	subs	r0, r3, #4
 801633e:	2b00      	cmp	r3, #0
 8016340:	bfbc      	itt	lt
 8016342:	580b      	ldrlt	r3, [r1, r0]
 8016344:	18c0      	addlt	r0, r0, r3
 8016346:	4770      	bx	lr

08016348 <__retarget_lock_acquire_recursive>:
 8016348:	4770      	bx	lr

0801634a <__retarget_lock_release_recursive>:
 801634a:	4770      	bx	lr

0801634c <_init>:
 801634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801634e:	bf00      	nop
 8016350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016352:	bc08      	pop	{r3}
 8016354:	469e      	mov	lr, r3
 8016356:	4770      	bx	lr

08016358 <_fini>:
 8016358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801635a:	bf00      	nop
 801635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801635e:	bc08      	pop	{r3}
 8016360:	469e      	mov	lr, r3
 8016362:	4770      	bx	lr
