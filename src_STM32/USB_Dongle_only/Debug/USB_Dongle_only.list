
USB_Dongle_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016128  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08016268  08016268  00026268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080169b4  080169b4  000269b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080169bc  080169bc  000269bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080169c0  080169c0  000269c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  20000008  080169c4  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b90  2000016c  08016b28  0003016c  2**2
                  ALLOC
  8 ._user_heap_stack 00020204  20001cfc  08016b28  00031cfc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024f46  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000576d  00000000  00000000  000550e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002240  00000000  00000000  0005a850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001fc8  00000000  00000000  0005ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027cdd  00000000  00000000  0005ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028dc7  00000000  00000000  00086735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e6e1d  00000000  00000000  000af4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00196319  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009210  00000000  00000000  0019636c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	08016250 	.word	0x08016250

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	08016250 	.word	0x08016250

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4013      	ands	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	f5ad 5d0c 	sub.w	sp, sp, #8960	; 0x2300
 800058e:	b088      	sub	sp, #32
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fdf1 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f9b5 	bl	8000904 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059a:	f000 fa0d 	bl	80009b8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800059e:	f000 fa2b 	bl	80009f8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 faeb 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 fad7 	bl	8000b58 <MX_DMA_Init>
  MX_RF_Init();
 80005aa:	f000 fa39 	bl	8000a20 <MX_RF_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 fa87 	bl	8000ac0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005b2:	f000 fa53 	bl	8000a5c <MX_RTC_Init>
  MX_USB_Device_Init();
 80005b6:	f00a f9b5 	bl	800a924 <MX_USB_Device_Init>
  MX_RNG_Init();
 80005ba:	f000 fa39 	bl	8000a30 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // YELLOW LED
 80005be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c2:	48c5      	ldr	r0, [pc, #788]	; (80008d8 <main+0x350>)
 80005c4:	f001 fad6 	bl	8001b74 <HAL_GPIO_TogglePin>
  char msg_buf[80] = "Dilithium Signature Start\r\n";
 80005c8:	4bc4      	ldr	r3, [pc, #784]	; (80008dc <main+0x354>)
 80005ca:	f507 540a 	add.w	r4, r7, #8832	; 0x2280
 80005ce:	f104 0438 	add.w	r4, r4, #56	; 0x38
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005e0:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80005e4:	f103 0314 	add.w	r3, r3, #20
 80005e8:	2234      	movs	r2, #52	; 0x34
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f015 f9c7 	bl	8015980 <memset>
  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80005f2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80005f6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4618      	mov	r0, r3
 80005fe:	f00a fa4f 	bl	800aaa0 <CDC_Transmit_FS>

  unsigned int i, j;
  int ret;
  size_t mlen, smlen;
  uint8_t m[MLEN] = { 0 };
 8000602:	2300      	movs	r3, #0
 8000604:	f507 5209 	add.w	r2, r7, #8768	; 0x2240
 8000608:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 8000612:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000616:	2237      	movs	r2, #55	; 0x37
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f015 f9b0 	bl	8015980 <memset>
  uint8_t sm[MLEN + CRYPTO_BYTES];
  uint8_t m2[MLEN + CRYPTO_BYTES];
  uint8_t pk[CRYPTO_PUBLICKEYBYTES];
  uint8_t sk[CRYPTO_SECRETKEYBYTES];

  uint8_t test_ok = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000626:	f102 020f 	add.w	r2, r2, #15
 800062a:	7013      	strb	r3, [r2, #0]

  for (i = 0; i < NTESTS; ++i) {
 800062c:	2300      	movs	r3, #0
 800062e:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000632:	f102 0214 	add.w	r2, r2, #20
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	e0ea      	b.n	8000810 <main+0x288>
	  randombytes(&hrng, m, MLEN);
 800063a:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 800063e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000642:	223b      	movs	r2, #59	; 0x3b
 8000644:	4619      	mov	r1, r3
 8000646:	48a6      	ldr	r0, [pc, #664]	; (80008e0 <main+0x358>)
 8000648:	f014 fad0 	bl	8014bec <randombytes>

	  crypto_sign_keypair(&hrng, pk, sk);
 800064c:	f107 0218 	add.w	r2, r7, #24
 8000650:	3a14      	subs	r2, #20
 8000652:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8000656:	3b04      	subs	r3, #4
 8000658:	4619      	mov	r1, r3
 800065a:	48a1      	ldr	r0, [pc, #644]	; (80008e0 <main+0x358>)
 800065c:	f014 fc1d 	bl	8014e9a <pqcrystals_dilithium2aes_r_ref_keypair>
	  crypto_sign(&hrng, sm, &smlen, m, MLEN, sk);
 8000660:	f507 5009 	add.w	r0, r7, #8768	; 0x2240
 8000664:	f100 0034 	add.w	r0, r0, #52	; 0x34
 8000668:	f507 520a 	add.w	r2, r7, #8832	; 0x2280
 800066c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000670:	f507 51c6 	add.w	r1, r7, #6336	; 0x18c0
 8000674:	f101 0104 	add.w	r1, r1, #4
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	3b14      	subs	r3, #20
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	233b      	movs	r3, #59	; 0x3b
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4603      	mov	r3, r0
 8000686:	4896      	ldr	r0, [pc, #600]	; (80008e0 <main+0x358>)
 8000688:	f014 fee4 	bl	8015454 <pqcrystals_dilithium2aes_r_ref>
	  ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
 800068c:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000690:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000694:	681c      	ldr	r4, [r3, #0]
 8000696:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 800069a:	f102 0204 	add.w	r2, r2, #4
 800069e:	f507 510a 	add.w	r1, r7, #8832	; 0x2280
 80006a2:	f101 0134 	add.w	r1, r1, #52	; 0x34
 80006a6:	f607 7018 	addw	r0, r7, #3864	; 0xf18
 80006aa:	3804      	subs	r0, #4
 80006ac:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80006b0:	3b04      	subs	r3, #4
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4623      	mov	r3, r4
 80006b6:	f015 f8b5 	bl	8015824 <pqcrystals_dilithium2aes_r_ref_open>
 80006ba:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80006be:	f103 0308 	add.w	r3, r3, #8
 80006c2:	6018      	str	r0, [r3, #0]

	  if (ret) {
 80006c4:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80006c8:	f103 0308 	add.w	r3, r3, #8
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01b      	beq.n	800070a <main+0x182>
		  sprintf(msg_buf, "Verification failed\r\n");
 80006d2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80006d6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006da:	4982      	ldr	r1, [pc, #520]	; (80008e4 <main+0x35c>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f015 f957 	bl	8015990 <siprintf>
		  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80006e2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80006e6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006ea:	2150      	movs	r1, #80	; 0x50
 80006ec:	4618      	mov	r0, r3
 80006ee:	f00a f9d7 	bl	800aaa0 <CDC_Transmit_FS>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f8:	4877      	ldr	r0, [pc, #476]	; (80008d8 <main+0x350>)
 80006fa:	f001 fa23 	bl	8001b44 <HAL_GPIO_WritePin>
		  test_ok = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000704:	f102 020f 	add.w	r2, r2, #15
 8000708:	7013      	strb	r3, [r2, #0]
		  //return -1;
	  }

	  if (mlen != MLEN) {
 800070a:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 800070e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b3b      	cmp	r3, #59	; 0x3b
 8000716:	d01b      	beq.n	8000750 <main+0x1c8>
		  sprintf(msg_buf, "Message lengths don't match\r\n");
 8000718:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 800071c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000720:	4971      	ldr	r1, [pc, #452]	; (80008e8 <main+0x360>)
 8000722:	4618      	mov	r0, r3
 8000724:	f015 f934 	bl	8015990 <siprintf>
		  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 8000728:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 800072c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000730:	2150      	movs	r1, #80	; 0x50
 8000732:	4618      	mov	r0, r3
 8000734:	f00a f9b4 	bl	800aaa0 <CDC_Transmit_FS>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4866      	ldr	r0, [pc, #408]	; (80008d8 <main+0x350>)
 8000740:	f001 fa00 	bl	8001b44 <HAL_GPIO_WritePin>
		  test_ok = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 800074a:	f102 020f 	add.w	r2, r2, #15
 800074e:	7013      	strb	r3, [r2, #0]
		  //return -1;
	  }

	  for (j = 0; j < mlen; ++j) {
 8000750:	2300      	movs	r3, #0
 8000752:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 8000756:	f102 0210 	add.w	r2, r2, #16
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	e041      	b.n	80007e2 <main+0x25a>
		  if (m[j] != m2[j]) {
 800075e:	f507 5209 	add.w	r2, r7, #8768	; 0x2240
 8000762:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000766:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 800076a:	f103 0310 	add.w	r3, r3, #16
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4413      	add	r3, r2
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8000778:	f103 0318 	add.w	r3, r3, #24
 800077c:	f2a3 4104 	subw	r1, r3, #1028	; 0x404
 8000780:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 8000784:	f103 0310 	add.w	r3, r3, #16
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	440b      	add	r3, r1
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d01c      	beq.n	80007cc <main+0x244>
			  sprintf(msg_buf, "Messages don't match\r\n");
 8000792:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000796:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800079a:	4954      	ldr	r1, [pc, #336]	; (80008ec <main+0x364>)
 800079c:	4618      	mov	r0, r3
 800079e:	f015 f8f7 	bl	8015990 <siprintf>
			  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80007a2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80007a6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80007aa:	2150      	movs	r1, #80	; 0x50
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00a f977 	bl	800aaa0 <CDC_Transmit_FS>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4847      	ldr	r0, [pc, #284]	; (80008d8 <main+0x350>)
 80007ba:	f001 f9c3 	bl	8001b44 <HAL_GPIO_WritePin>
			  test_ok = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80007c4:	f102 020f 	add.w	r2, r2, #15
 80007c8:	7013      	strb	r3, [r2, #0]
			  break;
 80007ca:	e016      	b.n	80007fa <main+0x272>
	  for (j = 0; j < mlen; ++j) {
 80007cc:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80007d0:	f103 0310 	add.w	r3, r3, #16
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80007dc:	f102 0210 	add.w	r2, r2, #16
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80007e6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 80007f0:	f102 0210 	add.w	r2, r2, #16
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3b1      	bcc.n	800075e <main+0x1d6>
  for (i = 0; i < NTESTS; ++i) {
 80007fa:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 80007fe:	f103 0314 	add.w	r3, r3, #20
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	f507 520c 	add.w	r2, r7, #8960	; 0x2300
 800080a:	f102 0214 	add.w	r2, r2, #20
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 8000814:	f103 0314 	add.w	r3, r3, #20
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	f43f af0d 	beq.w	800063a <main+0xb2>
		  //return -1;
	  }
*/
  }

  memset(msg_buf, 0, sizeof(msg_buf));
 8000820:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000824:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000828:	2250      	movs	r2, #80	; 0x50
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f015 f8a7 	bl	8015980 <memset>
  sprintf(msg_buf, "Program Compilation Date: %s %s\r\n", __DATE__, __TIME__);
 8000832:	f507 500a 	add.w	r0, r7, #8832	; 0x2280
 8000836:	f100 0038 	add.w	r0, r0, #56	; 0x38
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <main+0x368>)
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <main+0x36c>)
 800083e:	492e      	ldr	r1, [pc, #184]	; (80008f8 <main+0x370>)
 8000840:	f015 f8a6 	bl	8015990 <siprintf>
  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 8000844:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000848:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800084c:	2150      	movs	r1, #80	; 0x50
 800084e:	4618      	mov	r0, r3
 8000850:	f00a f926 	bl	800aaa0 <CDC_Transmit_FS>
  if (test_ok){
 8000854:	f507 530c 	add.w	r3, r7, #8960	; 0x2300
 8000858:	f103 030f 	add.w	r3, r3, #15
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d016      	beq.n	8000890 <main+0x308>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // GREEN LED
 8000862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000866:	481c      	ldr	r0, [pc, #112]	; (80008d8 <main+0x350>)
 8000868:	f001 f984 	bl	8001b74 <HAL_GPIO_TogglePin>
	  memset(msg_buf, 0, sizeof(msg_buf));
 800086c:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000870:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000874:	2250      	movs	r2, #80	; 0x50
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f015 f881 	bl	8015980 <memset>
	  sprintf(msg_buf, "New Dilithium - OK\r\n");
 800087e:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000882:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000886:	491d      	ldr	r1, [pc, #116]	; (80008fc <main+0x374>)
 8000888:	4618      	mov	r0, r3
 800088a:	f015 f881 	bl	8015990 <siprintf>
 800088e:	e010      	b.n	80008b2 <main+0x32a>
  }
  else {
	  memset(msg_buf, 0, sizeof(msg_buf));
 8000890:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000894:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000898:	2250      	movs	r2, #80	; 0x50
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f015 f86f 	bl	8015980 <memset>
	  sprintf(msg_buf, "New Dilithium - ERROR\r\n");
 80008a2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80008a6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80008aa:	4915      	ldr	r1, [pc, #84]	; (8000900 <main+0x378>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f015 f86f 	bl	8015990 <siprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(1000);
 80008b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b6:	f000 fce5 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // YELLOW LED
 80008ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <main+0x350>)
 80008c0:	f001 f958 	bl	8001b74 <HAL_GPIO_TogglePin>
	  CDC_Transmit_FS((uint8_t*)msg_buf, 80);
 80008c4:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80008c8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80008cc:	2150      	movs	r1, #80	; 0x50
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00a f8e6 	bl	800aaa0 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80008d4:	e7ed      	b.n	80008b2 <main+0x32a>
 80008d6:	bf00      	nop
 80008d8:	48000800 	.word	0x48000800
 80008dc:	08016324 	.word	0x08016324
 80008e0:	200001c4 	.word	0x200001c4
 80008e4:	08016268 	.word	0x08016268
 80008e8:	08016280 	.word	0x08016280
 80008ec:	080162a0 	.word	0x080162a0
 80008f0:	080162b8 	.word	0x080162b8
 80008f4:	080162c4 	.word	0x080162c4
 80008f8:	080162d0 	.word	0x080162d0
 80008fc:	080162f4 	.word	0x080162f4
 8000900:	0801630c 	.word	0x0801630c

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09a      	sub	sp, #104	; 0x68
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2248      	movs	r2, #72	; 0x48
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f015 f834 	bl	8015980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <SystemClock_Config+0xb0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000932:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <SystemClock_Config+0xb0>)
 8000934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <SystemClock_Config+0xb0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000946:	234b      	movs	r3, #75	; 0x4b
 8000948:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI1|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000956:	2301      	movs	r3, #1
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800095e:	2305      	movs	r3, #5
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000962:	2300      	movs	r3, #0
 8000964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fb48 	bl	8004000 <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000976:	f000 f953 	bl	8000c20 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800097a:	236f      	movs	r3, #111	; 0x6f
 800097c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800097e:	2302      	movs	r3, #2
 8000980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2101      	movs	r1, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fea4 	bl	80046e8 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009a6:	f000 f93b 	bl	8000c20 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3768      	adds	r7, #104	; 0x68
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	58000400 	.word	0x58000400

080009b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2250      	movs	r2, #80	; 0x50
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f014 ffdb 	bl	8015980 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80009ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009ce:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80009d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80009d6:	2300      	movs	r3, #0
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80009da:	2310      	movs	r3, #16
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 fabe 	bl	8004f62 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80009ec:	f000 f918 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80009f0:	bf00      	nop
 80009f2:	3750      	adds	r7, #80	; 0x50
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_IPCC_Init+0x20>)
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <MX_IPCC_Init+0x24>)
 8000a00:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_IPCC_Init+0x20>)
 8000a04:	f001 f8f4 	bl	8001bf0 <HAL_IPCC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000a0e:	f000 f907 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000188 	.word	0x20000188
 8000a1c:	58000c00 	.word	0x58000c00

08000a20 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_RNG_Init+0x24>)
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <MX_RNG_Init+0x28>)
 8000a38:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_RNG_Init+0x24>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_RNG_Init+0x24>)
 8000a42:	f004 fd15 	bl	8005470 <HAL_RNG_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000a4c:	f000 f8e8 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001c4 	.word	0x200001c4
 8000a58:	58001000 	.word	0x58001000

08000a5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <MX_RTC_Init+0x60>)
 8000a64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a6e:	227f      	movs	r2, #127	; 0x7f
 8000a70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000a92:	f004 fd79 	bl	8005588 <HAL_RTC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a9c:	f000 f8c0 	bl	8000c20 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_RTC_Init+0x5c>)
 8000aa6:	f004 fe6f 	bl	8005788 <HAL_RTCEx_SetWakeUpTimer>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 f8b6 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200001d8 	.word	0x200001d8
 8000abc:	40002800 	.word	0x40002800

08000ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <MX_USART1_UART_Init+0x94>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000b0a:	f004 fef8 	bl	80058fe <HAL_UART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 f884 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000b1c:	f005 fb59 	bl	80061d2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 f87b 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000b2e:	f005 fb8e 	bl	800624e <HAL_UARTEx_SetRxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f872 	bl	8000c20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_USART1_UART_Init+0x90>)
 8000b3e:	f005 fb0f 	bl	8006160 <HAL_UARTEx_DisableFifoMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 f86a 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200001fc 	.word	0x200001fc
 8000b54:	40013800 	.word	0x40013800

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f7ff fce1 	bl	8000524 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff fcde 	bl	8000524 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	200b      	movs	r0, #11
 8000b6e:	f000 fc88 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b72:	200b      	movs	r0, #11
 8000b74:	f000 fc9f 	bl	80014b6 <HAL_NVIC_EnableIRQ>

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	2004      	movs	r0, #4
 8000b92:	f7ff fce0 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fcdd 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9c:	2008      	movs	r0, #8
 8000b9e:	f7ff fcda 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff fcd7 	bl	8000556 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000bae:	481a      	ldr	r0, [pc, #104]	; (8000c18 <MX_GPIO_Init+0x9c>)
 8000bb0:	f000 ffc8 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <MX_GPIO_Init+0xa0>)
 8000bba:	f000 ffc3 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTI10_Pin */
  GPIO_InitStruct.Pin = EXTI10_Pin;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXTI10_GPIO_Port, &GPIO_InitStruct);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f000 fe45 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000bda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <MX_GPIO_Init+0x9c>)
 8000bf2:	f000 fe37 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_GPIO_Init+0xa0>)
 8000c0c:	f000 fe2a 	bl	8001864 <HAL_GPIO_Init>

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	48000c00 	.word	0x48000c00

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <Error_Handler+0x38>)
 8000c2e:	f000 ffa1 	bl	8001b74 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <Error_Handler+0x38>)
 8000c38:	f000 ff9c 	bl	8001b74 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <Error_Handler+0x38>)
 8000c42:	f000 ff97 	bl	8001b74 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000c46:	2101      	movs	r1, #1
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <Error_Handler+0x3c>)
 8000c4a:	f000 ff93 	bl	8001b74 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c52:	f000 fb17 	bl	8001284 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c56:	e7e7      	b.n	8000c28 <Error_Handler+0x8>
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	48000c00 	.word	0x48000c00

08000c60 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_AHB2_GRP1_EnableClock>:
{
 8000c82:	b480      	push	{r7}
 8000c84:	b085      	sub	sp, #20
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d52:	f7ff ffaf 	bl	8000cb4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	202e      	movs	r0, #46	; 0x2e
 8000d5c:	f000 fb91 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000d60:	202e      	movs	r0, #46	; 0x2e
 8000d62:	f000 fba8 	bl	80014b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <HAL_IPCC_MspInit+0x44>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d113      	bne.n	8000da6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000d7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d82:	f7ff ff97 	bl	8000cb4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	202c      	movs	r0, #44	; 0x2c
 8000d8c:	f000 fb79 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000d90:	202c      	movs	r0, #44	; 0x2c
 8000d92:	f000 fb90 	bl	80014b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	202d      	movs	r0, #45	; 0x2d
 8000d9c:	f000 fb71 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000da0:	202d      	movs	r0, #45	; 0x2d
 8000da2:	f000 fb88 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	58000c00 	.word	0x58000c00

08000db4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b096      	sub	sp, #88	; 0x58
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	2250      	movs	r2, #80	; 0x50
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f014 fddb 	bl	8015980 <memset>
  if(hrng->Instance==RNG)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_RNG_MspInit+0x50>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d113      	bne.n	8000dfc <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f8bc 	bl	8004f62 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000df0:	f7ff ff16 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000df4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000df8:	f7ff ff5c 	bl	8000cb4 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3758      	adds	r7, #88	; 0x58
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58001000 	.word	0x58001000

08000e08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b096      	sub	sp, #88	; 0x58
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2250      	movs	r2, #80	; 0x50
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f014 fdb1 	bl	8015980 <memset>
  if(hrtc->Instance==RTC)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_RTC_MspInit+0x54>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d115      	bne.n	8000e54 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e2c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 f892 	bl	8004f62 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e44:	f7ff feec 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e48:	f7ff ff0a 	bl	8000c60 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e50:	f7ff ff49 	bl	8000ce6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3758      	adds	r7, #88	; 0x58
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40002800 	.word	0x40002800

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09c      	sub	sp, #112	; 0x70
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2250      	movs	r2, #80	; 0x50
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f014 fd7d 	bl	8015980 <memset>
  if(huart->Instance==USART1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a2a      	ldr	r2, [pc, #168]	; (8000f34 <HAL_UART_MspInit+0xd4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d14d      	bne.n	8000f2c <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 f860 	bl	8004f62 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea8:	f7ff feba 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eb0:	f7ff ff32 	bl	8000d18 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff fee4 	bl	8000c82 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eba:	23c0      	movs	r3, #192	; 0xc0
 8000ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4818      	ldr	r0, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0xd8>)
 8000ed6:	f000 fcc5 	bl	8001864 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_UART_MspInit+0xe0>)
 8000ede:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000ee8:	2210      	movs	r2, #16
 8000eea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000f12:	f000 faeb 	bl	80014ec <HAL_DMA_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000f1c:	f7ff fe80 	bl	8000c20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000f24:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0xdc>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3770      	adds	r7, #112	; 0x70
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40013800 	.word	0x40013800
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	20000290 	.word	0x20000290
 8000f40:	40020008 	.word	0x40020008

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f94c 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Channel1_IRQHandler+0x10>)
 8000f9e:	f000 fb4d 	bl	800163c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000290 	.word	0x20000290

08000fac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <USB_LP_IRQHandler+0x10>)
 8000fb2:	f001 f838 	bl	8002026 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200017d8 	.word	0x200017d8

08000fc0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <IPCC_C1_RX_IRQHandler+0x10>)
 8000fc6:	f000 fe93 	bl	8001cf0 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000188 	.word	0x20000188

08000fd4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <IPCC_C1_TX_IRQHandler+0x10>)
 8000fda:	f000 fe3b 	bl	8001c54 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000188 	.word	0x20000188

08000fe8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000fec:	f000 fddc 	bl	8001ba8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f014 fc74 	bl	8015910 <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20030000 	.word	0x20030000
 8001054:	00020000 	.word	0x00020000
 8001058:	200002f0 	.word	0x200002f0
 800105c:	20001d00 	.word	0x20001d00

08001060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <SystemInit+0x98>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <SystemInit+0x98>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001088:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800108c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800108e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <SystemInit+0x9c>)
 800109a:	4013      	ands	r3, r2
 800109c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800109e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010aa:	f023 0305 	bic.w	r3, r3, #5
 80010ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80010b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010be:	f023 0301 	bic.w	r3, r3, #1
 80010c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <SystemInit+0xa0>)
 80010cc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <SystemInit+0xa0>)
 80010d4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	faf6fefb 	.word	0xfaf6fefb
 8001100:	22041000 	.word	0x22041000

08001104 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001104:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001106:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001108:	3304      	adds	r3, #4

0800110a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800110e:	d3f9      	bcc.n	8001104 <CopyDataInit>
  bx lr
 8001110:	4770      	bx	lr

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001112:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001114:	3004      	adds	r0, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001116:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>
  bx lr
 800111a:	4770      	bx	lr

0800111c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001120:	f7ff ff9e 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <LoopForever+0x6>)
 8001126:	490c      	ldr	r1, [pc, #48]	; (8001158 <LoopForever+0xa>)
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <LoopForever+0xe>)
 800112a:	2300      	movs	r3, #0
 800112c:	f7ff ffed 	bl	800110a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <LoopForever+0x12>)
 8001132:	490c      	ldr	r1, [pc, #48]	; (8001164 <LoopForever+0x16>)
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <LoopForever+0x1a>)
 8001136:	2300      	movs	r3, #0
 8001138:	f7ff ffe7 	bl	800110a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <LoopForever+0x1e>)
 800113e:	490c      	ldr	r1, [pc, #48]	; (8001170 <LoopForever+0x22>)
 8001140:	2300      	movs	r3, #0
 8001142:	f7ff ffe8 	bl	8001116 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001146:	f014 fbe9 	bl	801591c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800114a:	f7ff fa1d 	bl	8000588 <main>

0800114e <LoopForever>:

LoopForever:
  b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   r0, =_estack
 8001150:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001154:	20000008 	.word	0x20000008
 8001158:	2000016c 	.word	0x2000016c
 800115c:	080169c4 	.word	0x080169c4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001160:	20030000 	.word	0x20030000
 8001164:	20030000 	.word	0x20030000
 8001168:	08016b28 	.word	0x08016b28
  INIT_BSS _sbss, _ebss
 800116c:	2000016c 	.word	0x2000016c
 8001170:	20001cfc 	.word	0x20001cfc

08001174 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_Init+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_Init+0x3c>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118e:	2003      	movs	r0, #3
 8001190:	f000 f96c 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001194:	200f      	movs	r0, #15
 8001196:	f000 f80f 	bl	80011b8 <HAL_InitTick>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	e001      	b.n	80011aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a6:	f7ff fdd0 	bl	8000d4a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58004000 	.word	0x58004000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_InitTick+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d024      	beq.n	8001216 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011cc:	f003 fc38 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x6c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f974 	bl	80014d2 <HAL_SYSTICK_Config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10f      	bne.n	8001210 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d809      	bhi.n	800120a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	2200      	movs	r2, #0
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	f000 f940 	bl	8001482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_InitTick+0x70>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e007      	b.n	800121a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e004      	b.n	800121a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e001      	b.n	800121a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000010 	.word	0x20000010
 8001228:	2000000c 	.word	0x2000000c

0800122c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000010 	.word	0x20000010
 8001250:	200002f4 	.word	0x200002f4

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200002f4 	.word	0x200002f4

0800126c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTickPrio+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2000000c 	.word	0x2000000c

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffe2 	bl	8001254 <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffd2 	bl	8001254 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000010 	.word	0x20000010

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff40 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff90 	bl	80013c0 <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5f 	bl	800136c <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff33 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffa4 	bl	8001428 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e08e      	b.n	800161c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_DMA_Init+0x138>)
 8001506:	429a      	cmp	r2, r3
 8001508:	d80f      	bhi.n	800152a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <HAL_DMA_Init+0x13c>)
 8001512:	4413      	add	r3, r2
 8001514:	4a45      	ldr	r2, [pc, #276]	; (800162c <HAL_DMA_Init+0x140>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	009a      	lsls	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a42      	ldr	r2, [pc, #264]	; (8001630 <HAL_DMA_Init+0x144>)
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
 8001528:	e00e      	b.n	8001548 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b40      	ldr	r3, [pc, #256]	; (8001634 <HAL_DMA_Init+0x148>)
 8001532:	4413      	add	r3, r2
 8001534:	4a3d      	ldr	r2, [pc, #244]	; (800162c <HAL_DMA_Init+0x140>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	009a      	lsls	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a3c      	ldr	r2, [pc, #240]	; (8001638 <HAL_DMA_Init+0x14c>)
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800155e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800156c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f8fe 	bl	800179c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a8:	d102      	bne.n	80015b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d010      	beq.n	80015f2 <HAL_DMA_Init+0x106>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d80c      	bhi.n	80015f2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f91d 	bl	8001818 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	e008      	b.n	8001604 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40020407 	.word	0x40020407
 8001628:	bffdfff8 	.word	0xbffdfff8
 800162c:	cccccccd 	.word	0xcccccccd
 8001630:	40020000 	.word	0x40020000
 8001634:	bffdfbf8 	.word	0xbffdfbf8
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f003 031c 	and.w	r3, r3, #28
 800165c:	2204      	movs	r2, #4
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d026      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x7a>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d021      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f003 021c 	and.w	r2, r3, #28
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2104      	movs	r1, #4
 800169e:	fa01 f202 	lsl.w	r2, r1, r2
 80016a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d071      	beq.n	8001790 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016b4:	e06c      	b.n	8001790 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f003 031c 	and.w	r3, r3, #28
 80016be:	2202      	movs	r2, #2
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d02e      	beq.n	8001728 <HAL_DMA_IRQHandler+0xec>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d029      	beq.n	8001728 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10b      	bne.n	80016fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 020a 	bic.w	r2, r2, #10
 80016f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f003 021c 	and.w	r2, r3, #28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2102      	movs	r1, #2
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d038      	beq.n	8001790 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001726:	e033      	b.n	8001790 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f003 031c 	and.w	r3, r3, #28
 8001730:	2208      	movs	r2, #8
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02a      	beq.n	8001792 <HAL_DMA_IRQHandler+0x156>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d025      	beq.n	8001792 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 020e 	bic.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 021c 	and.w	r2, r3, #28
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001790:	bf00      	nop
 8001792:	bf00      	nop
}
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d80a      	bhi.n	80017c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017bc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6493      	str	r3, [r2, #72]	; 0x48
 80017c4:	e007      	b.n	80017d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	009a      	lsls	r2, r3, #2
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017d0:	4413      	add	r3, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3b08      	subs	r3, #8
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2201      	movs	r2, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40020407 	.word	0x40020407
 800180c:	4002081c 	.word	0x4002081c
 8001810:	cccccccd 	.word	0xcccccccd
 8001814:	40020880 	.word	0x40020880

08001818 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001828:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800183c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3b01      	subs	r3, #1
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2201      	movs	r2, #1
 8001848:	409a      	lsls	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	1000823f 	.word	0x1000823f
 8001860:	40020940 	.word	0x40020940

08001864 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e14c      	b.n	8001b0e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 813e 	beq.w	8001b08 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d005      	beq.n	80018a4 <HAL_GPIO_Init+0x40>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d130      	bne.n	8001906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018da:	2201      	movs	r2, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 0201 	and.w	r2, r3, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b03      	cmp	r3, #3
 8001910:	d017      	beq.n	8001942 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d123      	bne.n	8001996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	6939      	ldr	r1, [r7, #16]
 8001992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0203 	and.w	r2, r3, #3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8098 	beq.w	8001b08 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80019d8:	4a54      	ldr	r2, [pc, #336]	; (8001b2c <HAL_GPIO_Init+0x2c8>)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a02:	d019      	beq.n	8001a38 <HAL_GPIO_Init+0x1d4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4a      	ldr	r2, [pc, #296]	; (8001b30 <HAL_GPIO_Init+0x2cc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <HAL_GPIO_Init+0x1d0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00d      	beq.n	8001a30 <HAL_GPIO_Init+0x1cc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2d4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0x1c8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_GPIO_Init+0x2d8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_Init+0x1c4>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e008      	b.n	8001a3a <HAL_GPIO_Init+0x1d6>
 8001a28:	2307      	movs	r3, #7
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x1d6>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1d6>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1d6>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1d6>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4a:	4938      	ldr	r1, [pc, #224]	; (8001b2c <HAL_GPIO_Init+0x2c8>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a58:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aa6:	4a26      	ldr	r2, [pc, #152]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b00:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f aeab 	bne.w	8001874 <HAL_GPIO_Init+0x10>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	58000800 	.word	0x58000800

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43d9      	mvns	r1, r3
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	400b      	ands	r3, r1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_HSEM_IRQHandler+0x30>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_HSEM_IRQHandler+0x30>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4906      	ldr	r1, [pc, #24]	; (8001bd8 <HAL_HSEM_IRQHandler+0x30>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <HAL_HSEM_IRQHandler+0x30>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f807 	bl	8001bdc <HAL_HSEM_FreeCallback>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58001500 	.word	0x58001500

08001bdc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01e      	beq.n	8001c40 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_IPCC_Init+0x60>)
 8001c04:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff f8aa 	bl	8000d6c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001c18:	68b8      	ldr	r0, [r7, #8]
 8001c1a:	f000 f8f5 	bl	8001e08 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8c6 	bl	8001dbc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001c3e:	e001      	b.n	8001c44 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	58000c00 	.word	0x58000c00

08001c54 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_IPCC_TX_IRQHandler+0x98>)
 8001c62:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001c6e:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	43db      	mvns	r3, r3
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001c7e:	e02c      	b.n	8001cda <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3310      	adds	r3, #16
 8001c88:	2201      	movs	r2, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01c      	beq.n	8001cd4 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	3306      	adds	r3, #6
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	3306      	adds	r3, #6
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1cf      	bne.n	8001c80 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	58000c00 	.word	0x58000c00

08001cf0 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_IPCC_RX_IRQHandler+0x90>)
 8001cfe:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_IPCC_RX_IRQHandler+0x94>)
 8001d02:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d0e:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001d1a:	e029      	b.n	8001d70 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	2201      	movs	r2, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01a      	beq.n	8001d6a <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1d2      	bne.n	8001d1c <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	58000c00 	.word	0x58000c00
 8001d84:	58000c10 	.word	0x58000c10

08001d88 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	4613      	mov	r3, r2
 8001dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e00f      	b.n	8001dea <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <IPCC_SetDefaultCallbacks+0x44>)
 8001dd4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3306      	adds	r3, #6
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <IPCC_SetDefaultCallbacks+0x48>)
 8001de2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d9ec      	bls.n	8001dca <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	08001d89 	.word	0x08001d89
 8001e04:	08001da3 	.word	0x08001da3

08001e08 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001e1c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	223f      	movs	r2, #63	; 0x3f
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af06      	add	r7, sp, #24
 8001e36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0cb      	b.n	8001fda <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f008 ff9c 	bl	800ad94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fa94 	bl	8006396 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	e040      	b.n	8001ef6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3301      	adds	r3, #1
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	3303      	adds	r3, #3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3338      	adds	r3, #56	; 0x38
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	333c      	adds	r3, #60	; 0x3c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3340      	adds	r3, #64	; 0x40
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d3b9      	bcc.n	8001e74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e044      	b.n	8001f90 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3b5      	bcc.n	8001f06 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	687e      	ldr	r6, [r7, #4]
 8001fa2:	466d      	mov	r5, sp
 8001fa4:	f106 0410 	add.w	r4, r6, #16
 8001fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	1d33      	adds	r3, r6, #4
 8001fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f004 fa09 	bl	80063cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f001 fc45 	bl	8003862 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fe2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_PCD_Start+0x16>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e012      	b.n	800201e <HAL_PCD_Start+0x3c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f004 f9af 	bl	8006368 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f006 fc73 	bl	80088fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f006 fc78 	bl	8008928 <USB_ReadInterrupts>
 8002038:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fb05 	bl	8002654 <PCD_EP_ISR_Handler>

    return;
 800204a:	e110      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d013      	beq.n	800207e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	b292      	uxth	r2, r2
 800206a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f008 ff33 	bl	800aeda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002074:	2100      	movs	r1, #0
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8fc 	bl	8002274 <HAL_PCD_SetAddress>

    return;
 800207c:	e0f7      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002090:	b29a      	uxth	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800209a:	b292      	uxth	r2, r2
 800209c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020a0:	e0e5      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020be:	b292      	uxth	r2, r2
 80020c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020c4:	e0d3      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d034      	beq.n	800213a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0204 	bic.w	r2, r2, #4
 80020e2:	b292      	uxth	r2, r2
 80020e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0208 	bic.w	r2, r2, #8
 80020fa:	b292      	uxth	r2, r2
 80020fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f009 f8d7 	bl	800b2c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f008 ff16 	bl	800af4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002132:	b292      	uxth	r2, r2
 8002134:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002138:	e099      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002140:	2b00      	cmp	r3, #0
 8002142:	d027      	beq.n	8002194 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0208 	orr.w	r2, r2, #8
 8002156:	b292      	uxth	r2, r2
 8002158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216e:	b292      	uxth	r2, r2
 8002170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0204 	orr.w	r2, r2, #4
 8002186:	b292      	uxth	r2, r2
 8002188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f008 fec3 	bl	800af18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002192:	e06c      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d040      	beq.n	8002220 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b0:	b292      	uxth	r2, r2
 80021b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d12b      	bne.n	8002218 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0204 	orr.w	r2, r2, #4
 80021d2:	b292      	uxth	r2, r2
 80021d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0208 	orr.w	r2, r2, #8
 80021ea:	b292      	uxth	r2, r2
 80021ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002200:	b29b      	uxth	r3, r3
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800220e:	2101      	movs	r1, #1
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f009 f859 	bl	800b2c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002216:	e02a      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f008 fe7d 	bl	800af18 <HAL_PCD_SuspendCallback>
    return;
 800221e:	e026      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800223c:	b292      	uxth	r2, r2
 800223e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f008 fe3b 	bl	800aebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002248:	e011      	b.n	800226e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800225c:	b29a      	uxth	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002266:	b292      	uxth	r2, r2
 8002268:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800226c:	bf00      	nop
  }
}
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_PCD_SetAddress+0x1a>
 800228a:	2302      	movs	r3, #2
 800228c:	e013      	b.n	80022b6 <HAL_PCD_SetAddress+0x42>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f006 fb13 	bl	80088d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	4608      	mov	r0, r1
 80022c8:	4611      	mov	r1, r2
 80022ca:	461a      	mov	r2, r3
 80022cc:	4603      	mov	r3, r0
 80022ce:	70fb      	strb	r3, [r7, #3]
 80022d0:	460b      	mov	r3, r1
 80022d2:	803b      	strh	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	da0e      	bge.n	8002302 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	705a      	strb	r2, [r3, #1]
 8002300:	e00e      	b.n	8002320 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 0207 	and.w	r2, r3, #7
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800232c:	883a      	ldrh	r2, [r7, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	78ba      	ldrb	r2, [r7, #2]
 8002336:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002338:	78bb      	ldrb	r3, [r7, #2]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d102      	bne.n	8002344 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_PCD_EP_Open+0x94>
 800234e:	2302      	movs	r3, #2
 8002350:	e00e      	b.n	8002370 <HAL_PCD_EP_Open+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	4618      	mov	r0, r3
 8002362:	f004 f855 	bl	8006410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800236e:	7afb      	ldrb	r3, [r7, #11]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0e      	bge.n	80023aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
 80023a8:	e00e      	b.n	80023c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0207 	and.w	r2, r3, #7
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_PCD_EP_Close+0x6a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e00e      	b.n	8002400 <HAL_PCD_EP_Close+0x88>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 fbd1 	bl	8006b98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	460b      	mov	r3, r1
 8002416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	f003 0207 	and.w	r2, r3, #7
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	b2da      	uxtb	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6979      	ldr	r1, [r7, #20]
 800245a:	4618      	mov	r0, r3
 800245c:	f004 fd89 	bl	8006f72 <USB_EPStartXfer>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0207 	and.w	r2, r3, #7
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800248c:	681b      	ldr	r3, [r3, #0]
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	460b      	mov	r3, r1
 80024a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2201      	movs	r2, #1
 80024e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e6:	7afb      	ldrb	r3, [r7, #11]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6979      	ldr	r1, [r7, #20]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 fd3a 	bl	8006f72 <USB_EPStartXfer>

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 0207 	and.w	r2, r3, #7
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	d901      	bls.n	8002526 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e03e      	b.n	80025a4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da0e      	bge.n	800254c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	705a      	strb	r2, [r3, #1]
 800254a:	e00c      	b.n	8002566 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_PCD_EP_SetStall+0x7e>
 8002582:	2302      	movs	r3, #2
 8002584:	e00e      	b.n	80025a4 <HAL_PCD_EP_SetStall+0x9c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	4618      	mov	r0, r3
 8002596:	f006 f89d 	bl	80086d4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 020f 	and.w	r2, r3, #15
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d901      	bls.n	80025ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e040      	b.n	800264c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da0e      	bge.n	80025f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	705a      	strb	r2, [r3, #1]
 80025ee:	e00e      	b.n	800260e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 0207 	and.w	r2, r3, #7
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	b2da      	uxtb	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_PCD_EP_ClrStall+0x82>
 800262a:	2302      	movs	r3, #2
 800262c:	e00e      	b.n	800264c <HAL_PCD_EP_ClrStall+0xa0>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	4618      	mov	r0, r3
 800263e:	f006 f89a 	bl	8008776 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b096      	sub	sp, #88	; 0x58
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800265c:	e3b1      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002666:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800266a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002678:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 8173 	bne.w	8002968 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002682:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d150      	bne.n	8002730 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	81fb      	strh	r3, [r7, #14]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	89fb      	ldrh	r3, [r7, #14]
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3328      	adds	r3, #40	; 0x28
 80026b6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	441a      	add	r2, r3
 80026ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026ee:	2100      	movs	r1, #0
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f008 fbca 	bl	800ae8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 835f 	beq.w	8002dc2 <PCD_EP_ISR_Handler+0x76e>
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 835a 	bne.w	8002dc2 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b292      	uxth	r2, r2
 8002722:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800272e:	e348      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002736:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002742:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	2b00      	cmp	r3, #0
 800274c:	d032      	beq.n	80027b4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	4413      	add	r3, r2
 8002768:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002788:	b29b      	uxth	r3, r3
 800278a:	f006 f91f 	bl	80089cc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	f640 738f 	movw	r3, #3983	; 0xf8f
 800279a:	4013      	ands	r3, r2
 800279c:	823b      	strh	r3, [r7, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	8a3a      	ldrh	r2, [r7, #16]
 80027a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a8:	b292      	uxth	r2, r2
 80027aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f008 fb3f 	bl	800ae30 <HAL_PCD_SetupStageCallback>
 80027b2:	e306      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027b4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f280 8302 	bge.w	8002dc2 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027ca:	4013      	ands	r3, r2
 80027cc:	83fb      	strh	r3, [r7, #30]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	8bfa      	ldrh	r2, [r7, #30]
 80027d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d8:	b292      	uxth	r2, r2
 80027da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002802:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d019      	beq.n	8002840 <PCD_EP_ISR_Handler+0x1ec>
 800280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d015      	beq.n	8002840 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281a:	6959      	ldr	r1, [r3, #20]
 800281c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002824:	b29b      	uxth	r3, r3
 8002826:	f006 f8d1 	bl	80089cc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	441a      	add	r2, r3
 8002834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002836:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002838:	2100      	movs	r1, #0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f008 fb0a 	bl	800ae54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800284a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800284e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 82b5 	bne.w	8002dc2 <PCD_EP_ISR_Handler+0x76e>
 8002858:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800285c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002864:	f000 82ad 	beq.w	8002dc2 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002892:	b29a      	uxth	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b3e      	cmp	r3, #62	; 0x3e
 800289e:	d91d      	bls.n	80028dc <PCD_EP_ISR_Handler+0x288>
 80028a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
 80028a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <PCD_EP_ISR_Handler+0x266>
 80028b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b6:	3b01      	subs	r3, #1
 80028b8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	e026      	b.n	800292a <PCD_EP_ISR_Handler+0x2d6>
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <PCD_EP_ISR_Handler+0x2a6>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	e017      	b.n	800292a <PCD_EP_ISR_Handler+0x2d6>
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <PCD_EP_ISR_Handler+0x2c0>
 800290e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002910:	3301      	adds	r3, #1
 8002912:	647b      	str	r3, [r7, #68]	; 0x44
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29a      	uxth	r2, r3
 800291a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291c:	b29b      	uxth	r3, r3
 800291e:	029b      	lsls	r3, r3, #10
 8002920:	b29b      	uxth	r3, r3
 8002922:	4313      	orrs	r3, r2
 8002924:	b29a      	uxth	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	827b      	strh	r3, [r7, #18]
 800293c:	8a7b      	ldrh	r3, [r7, #18]
 800293e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002942:	827b      	strh	r3, [r7, #18]
 8002944:	8a7b      	ldrh	r3, [r7, #18]
 8002946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800294a:	827b      	strh	r3, [r7, #18]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	8a7b      	ldrh	r3, [r7, #18]
 8002952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800295a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002962:	b29b      	uxth	r3, r3
 8002964:	8013      	strh	r3, [r2, #0]
 8002966:	e22c      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800297c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002980:	2b00      	cmp	r3, #0
 8002982:	f280 80f6 	bge.w	8002b72 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29a      	uxth	r2, r3
 8002998:	f640 738f 	movw	r3, #3983	; 0xf8f
 800299c:	4013      	ands	r3, r2
 800299e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80029b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b8:	b292      	uxth	r2, r2
 80029ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029bc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80029d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d4:	7b1b      	ldrb	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d123      	bne.n	8002a22 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002a02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 808e 	beq.w	8002b28 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a12:	6959      	ldr	r1, [r3, #20]
 8002a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a16:	88da      	ldrh	r2, [r3, #6]
 8002a18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a1c:	f005 ffd6 	bl	80089cc <USB_ReadPMA>
 8002a20:	e082      	b.n	8002b28 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	78db      	ldrb	r3, [r3, #3]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d10a      	bne.n	8002a40 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9d3 	bl	8002dde <HAL_PCD_EP_DB_Receive>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a3e:	e073      	b.n	8002b28 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	441a      	add	r2, r3
 8002a6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d022      	beq.n	8002ae4 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002ac6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d02c      	beq.n	8002b28 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad4:	6959      	ldr	r1, [r3, #20]
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad8:	891a      	ldrh	r2, [r3, #8]
 8002ada:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ade:	f005 ff75 	bl	80089cc <USB_ReadPMA>
 8002ae2:	e021      	b.n	8002b28 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b08:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	6959      	ldr	r1, [r3, #20]
 8002b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1e:	895a      	ldrh	r2, [r3, #10]
 8002b20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b24:	f005 ff52 	bl	80089cc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b30:	441a      	add	r2, r3
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b3e:	441a      	add	r2, r3
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <PCD_EP_ISR_Handler+0x504>
 8002b4c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d206      	bcs.n	8002b66 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f008 f978 	bl	800ae54 <HAL_PCD_DataOutStageCallback>
 8002b64:	e005      	b.n	8002b72 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 fa00 	bl	8006f72 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8121 	beq.w	8002dc2 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	441a      	add	r2, r3
 8002bc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd2:	78db      	ldrb	r3, [r3, #3]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	f040 80a2 	bne.w	8002d1e <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be2:	7b1b      	ldrb	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8093 	beq.w	8002d10 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d046      	beq.n	8002c84 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d126      	bne.n	8002c4c <PCD_EP_ISR_Handler+0x5f8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	4413      	add	r3, r2
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
 8002c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	00da      	lsls	r2, r3, #3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e061      	b.n	8002d10 <PCD_EP_ISR_Handler+0x6bc>
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d15d      	bne.n	8002d10 <PCD_EP_ISR_Handler+0x6bc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	4413      	add	r3, r2
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	00da      	lsls	r2, r3, #3
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	4413      	add	r3, r2
 8002c76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	e045      	b.n	8002d10 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d126      	bne.n	8002ce0 <PCD_EP_ISR_Handler+0x68c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	4413      	add	r3, r2
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8002caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	e017      	b.n	8002d10 <PCD_EP_ISR_Handler+0x6bc>
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d113      	bne.n	8002d10 <PCD_EP_ISR_Handler+0x6bc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf6:	4413      	add	r3, r2
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	00da      	lsls	r2, r3, #3
 8002d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d02:	4413      	add	r3, r2
 8002d04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f008 f8b7 	bl	800ae8a <HAL_PCD_DataInStageCallback>
 8002d1c:	e051      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d144      	bne.n	8002db4 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d907      	bls.n	8002d6e <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d66:	1ad2      	subs	r2, r2, r3
 8002d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6a:	619a      	str	r2, [r3, #24]
 8002d6c:	e002      	b.n	8002d74 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f008 f881 	bl	800ae8a <HAL_PCD_DataInStageCallback>
 8002d88:	e01b      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d92:	441a      	add	r2, r3
 8002d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d96:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002da0:	441a      	add	r2, r3
 8002da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f8e0 	bl	8006f72 <USB_EPStartXfer>
 8002db2:	e006      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002db4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002db8:	461a      	mov	r2, r3
 8002dba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f917 	bl	8002ff0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f6ff ac45 	blt.w	800265e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3758      	adds	r7, #88	; 0x58
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d07c      	beq.n	8002ef0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	8b7b      	ldrh	r3, [r7, #26]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d306      	bcc.n	8002e34 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	8b7b      	ldrh	r3, [r7, #26]
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	619a      	str	r2, [r3, #24]
 8002e32:	e002      	b.n	8002e3a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d123      	bne.n	8002e8a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	833b      	strh	r3, [r7, #24]
 8002e5e:	8b3b      	ldrh	r3, [r7, #24]
 8002e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e64:	833b      	strh	r3, [r7, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	441a      	add	r2, r3
 8002e74:	8b3b      	ldrh	r3, [r7, #24]
 8002e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01f      	beq.n	8002ed4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	82fb      	strh	r3, [r7, #22]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ed4:	8b7b      	ldrh	r3, [r7, #26]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8085 	beq.w	8002fe6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6959      	ldr	r1, [r3, #20]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	891a      	ldrh	r2, [r3, #8]
 8002ee8:	8b7b      	ldrh	r3, [r7, #26]
 8002eea:	f005 fd6f 	bl	80089cc <USB_ReadPMA>
 8002eee:	e07a      	b.n	8002fe6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f14:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	8b7b      	ldrh	r3, [r7, #26]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d306      	bcc.n	8002f2e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	8b7b      	ldrh	r3, [r7, #26]
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	619a      	str	r2, [r3, #24]
 8002f2c:	e002      	b.n	8002f34 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d123      	bne.n	8002f84 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	83fb      	strh	r3, [r7, #30]
 8002f58:	8bfb      	ldrh	r3, [r7, #30]
 8002f5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f5e:	83fb      	strh	r3, [r7, #30]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	8bfb      	ldrh	r3, [r7, #30]
 8002f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11f      	bne.n	8002fce <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa8:	83bb      	strh	r3, [r7, #28]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	8bbb      	ldrh	r3, [r7, #28]
 8002fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fce:	8b7b      	ldrh	r3, [r7, #26]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6959      	ldr	r1, [r3, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	895a      	ldrh	r2, [r3, #10]
 8002fe0:	8b7b      	ldrh	r3, [r7, #26]
 8002fe2:	f005 fcf3 	bl	80089cc <USB_ReadPMA>
    }
  }

  return count;
 8002fe6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0a4      	sub	sp, #144	; 0x90
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 81db 	beq.w	80033c0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	4413      	add	r3, r2
 8003024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800302e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800303a:	429a      	cmp	r2, r3
 800303c:	d907      	bls.n	800304e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003046:	1ad2      	subs	r2, r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	e002      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 80b9 	bne.w	80031d0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d126      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003074:	b29b      	uxth	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	4413      	add	r3, r2
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	00da      	lsls	r2, r3, #3
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	4413      	add	r3, r2
 8003088:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003098:	b29a      	uxth	r2, r3
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	e01a      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0xfa>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d116      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0xfa>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	4413      	add	r3, r2
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00da      	lsls	r2, r3, #3
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030dc:	4413      	add	r3, r2
 80030de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	2200      	movs	r2, #0
 80030e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d126      	bne.n	8003146 <HAL_PCD_EP_DB_Transmit+0x156>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	00da      	lsls	r2, r3, #3
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312a:	b29a      	uxth	r2, r3
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	801a      	strh	r2, [r3, #0]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800313a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800313e:	b29a      	uxth	r2, r3
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	801a      	strh	r2, [r3, #0]
 8003144:	e017      	b.n	8003176 <HAL_PCD_EP_DB_Transmit+0x186>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d113      	bne.n	8003176 <HAL_PCD_EP_DB_Transmit+0x186>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	4413      	add	r3, r2
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	00da      	lsls	r2, r3, #3
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	4413      	add	r3, r2
 800316a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	2200      	movs	r2, #0
 8003174:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f007 fe84 	bl	800ae8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 82fa 	beq.w	8003782 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a8:	82fb      	strh	r3, [r7, #22]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	8afb      	ldrh	r3, [r7, #22]
 80031ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]
 80031ce:	e2d8      	b.n	8003782 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d021      	beq.n	800321e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800320a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	b29b      	uxth	r3, r3
 800321c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 82ac 	bne.w	8003782 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003232:	441a      	add	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003240:	441a      	add	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d30b      	bcc.n	800326a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	621a      	str	r2, [r3, #32]
 8003268:	e017      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003282:	e00a      	b.n	800329a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d165      	bne.n	800336e <HAL_PCD_EP_DB_Transmit+0x37e>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	4413      	add	r3, r2
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	00da      	lsls	r2, r3, #3
 80032c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c2:	4413      	add	r3, r2
 80032c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	801a      	strh	r2, [r3, #0]
 80032da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032de:	2b3e      	cmp	r3, #62	; 0x3e
 80032e0:	d91d      	bls.n	800331e <HAL_PCD_EP_DB_Transmit+0x32e>
 80032e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0x30c>
 80032f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f8:	3b01      	subs	r3, #1
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29a      	uxth	r2, r3
 8003302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003304:	b29b      	uxth	r3, r3
 8003306:	029b      	lsls	r3, r3, #10
 8003308:	b29b      	uxth	r3, r3
 800330a:	4313      	orrs	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003316:	b29a      	uxth	r2, r3
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	801a      	strh	r2, [r3, #0]
 800331c:	e044      	b.n	80033a8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800331e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_PCD_EP_DB_Transmit+0x34c>
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003334:	b29a      	uxth	r2, r3
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e035      	b.n	80033a8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800333c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	64bb      	str	r3, [r7, #72]	; 0x48
 8003344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_PCD_EP_DB_Transmit+0x366>
 8003350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003352:	3301      	adds	r3, #1
 8003354:	64bb      	str	r3, [r7, #72]	; 0x48
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29a      	uxth	r2, r3
 800335c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335e:	b29b      	uxth	r3, r3
 8003360:	029b      	lsls	r3, r3, #10
 8003362:	b29b      	uxth	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b29a      	uxth	r2, r3
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	e01c      	b.n	80033a8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d118      	bne.n	80033a8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003384:	b29b      	uxth	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338a:	4413      	add	r3, r2
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	00da      	lsls	r2, r3, #3
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	4413      	add	r3, r2
 8003398:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
 800339e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6959      	ldr	r1, [r3, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	891a      	ldrh	r2, [r3, #8]
 80033b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f005 fac5 	bl	8008948 <USB_WritePMA>
 80033be:	e1e0      	b.n	8003782 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d307      	bcc.n	8003404 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033fc:	1ad2      	subs	r2, r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	619a      	str	r2, [r3, #24]
 8003402:	e002      	b.n	800340a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2200      	movs	r2, #0
 8003408:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 80c0 	bne.w	8003594 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d126      	bne.n	800346a <HAL_PCD_EP_DB_Transmit+0x47a>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003430:	4413      	add	r3, r2
 8003432:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	00da      	lsls	r2, r3, #3
 800343a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800343c:	4413      	add	r3, r2
 800343e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003442:	67bb      	str	r3, [r7, #120]	; 0x78
 8003444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344e:	b29a      	uxth	r2, r3
 8003450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800345e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003462:	b29a      	uxth	r2, r3
 8003464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003466:	801a      	strh	r2, [r3, #0]
 8003468:	e01a      	b.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d116      	bne.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	667b      	str	r3, [r7, #100]	; 0x64
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003480:	b29b      	uxth	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003486:	4413      	add	r3, r2
 8003488:	667b      	str	r3, [r7, #100]	; 0x64
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	00da      	lsls	r2, r3, #3
 8003490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003492:	4413      	add	r3, r2
 8003494:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003498:	663b      	str	r3, [r7, #96]	; 0x60
 800349a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800349c:	2200      	movs	r2, #0
 800349e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	677b      	str	r3, [r7, #116]	; 0x74
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d12b      	bne.n	8003506 <HAL_PCD_EP_DB_Transmit+0x516>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	4413      	add	r3, r2
 80034c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00da      	lsls	r2, r3, #3
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	4413      	add	r3, r2
 80034d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003502:	801a      	strh	r2, [r3, #0]
 8003504:	e017      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x546>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d113      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x546>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351c:	4413      	add	r3, r2
 800351e:	677b      	str	r3, [r7, #116]	; 0x74
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	00da      	lsls	r2, r3, #3
 8003526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003528:	4413      	add	r3, r2
 800352a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800352e:	673b      	str	r3, [r7, #112]	; 0x70
 8003530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003532:	2200      	movs	r2, #0
 8003534:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	4619      	mov	r1, r3
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f007 fca4 	bl	800ae8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	f040 811a 	bne.w	8003782 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800357e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	b29b      	uxth	r3, r3
 8003590:	8013      	strh	r3, [r2, #0]
 8003592:	e0f6      	b.n	8003782 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d121      	bne.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035de:	b29b      	uxth	r3, r3
 80035e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	f040 80ca 	bne.w	8003782 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80035f6:	441a      	add	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003604:	441a      	add	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	429a      	cmp	r2, r3
 8003614:	d30b      	bcc.n	800362e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	621a      	str	r2, [r3, #32]
 800362c:	e017      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003636:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800363a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003646:	e00a      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	657b      	str	r3, [r7, #84]	; 0x54
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d165      	bne.n	8003738 <HAL_PCD_EP_DB_Transmit+0x748>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003680:	4413      	add	r3, r2
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	00da      	lsls	r2, r3, #3
 800368a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368c:	4413      	add	r3, r2
 800368e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003692:	65bb      	str	r3, [r7, #88]	; 0x58
 8003694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800369e:	b29a      	uxth	r2, r3
 80036a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a2:	801a      	strh	r2, [r3, #0]
 80036a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a8:	2b3e      	cmp	r3, #62	; 0x3e
 80036aa:	d91d      	bls.n	80036e8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80036ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80036c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c2:	3b01      	subs	r3, #1
 80036c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	029b      	lsls	r3, r3, #10
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4313      	orrs	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	e041      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x77c>
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <HAL_PCD_EP_DB_Transmit+0x716>
 80036f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fe:	b29a      	uxth	r2, r3
 8003700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	e032      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	66bb      	str	r3, [r7, #104]	; 0x68
 800370e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_PCD_EP_DB_Transmit+0x730>
 800371a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371c:	3301      	adds	r3, #1
 800371e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29a      	uxth	r2, r3
 8003726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003728:	b29b      	uxth	r3, r3
 800372a:	029b      	lsls	r3, r3, #10
 800372c:	b29b      	uxth	r3, r3
 800372e:	4313      	orrs	r3, r2
 8003730:	b29a      	uxth	r2, r3
 8003732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e019      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d115      	bne.n	800376c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374e:	4413      	add	r3, r2
 8003750:	657b      	str	r3, [r7, #84]	; 0x54
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	00da      	lsls	r2, r3, #3
 8003758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375a:	4413      	add	r3, r2
 800375c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003760:	653b      	str	r3, [r7, #80]	; 0x50
 8003762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003766:	b29a      	uxth	r2, r3
 8003768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6959      	ldr	r1, [r3, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	895a      	ldrh	r2, [r3, #10]
 8003778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377c:	b29b      	uxth	r3, r3
 800377e:	f005 f8e3 	bl	8008948 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379c:	82bb      	strh	r3, [r7, #20]
 800379e:	8abb      	ldrh	r3, [r7, #20]
 80037a0:	f083 0310 	eor.w	r3, r3, #16
 80037a4:	82bb      	strh	r3, [r7, #20]
 80037a6:	8abb      	ldrh	r3, [r7, #20]
 80037a8:	f083 0320 	eor.w	r3, r3, #32
 80037ac:	82bb      	strh	r3, [r7, #20]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	8abb      	ldrh	r3, [r7, #20]
 80037be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3790      	adds	r7, #144	; 0x90
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	817b      	strh	r3, [r7, #10]
 80037ea:	4613      	mov	r3, r2
 80037ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	897b      	ldrh	r3, [r7, #10]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4413      	add	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e009      	b.n	8003826 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003812:	897a      	ldrh	r2, [r7, #10]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003826:	893b      	ldrh	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	b29a      	uxth	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	80da      	strh	r2, [r3, #6]
 800383a:	e00b      	b.n	8003854 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2201      	movs	r2, #1
 8003840:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	b29a      	uxth	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	b29a      	uxth	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003886:	b29b      	uxth	r3, r3
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800389a:	b29b      	uxth	r3, r3
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	58000400 	.word	0x58000400

080038d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	58000400 	.word	0x58000400

080038f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003902:	6053      	str	r3, [r2, #4]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	58000400 	.word	0x58000400

08003914 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003926:	d101      	bne.n	800392c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <LL_RCC_HSE_Enable>:
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800393c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_RCC_HSE_Disable>:
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800395a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_RCC_HSE_IsReady>:
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003986:	d101      	bne.n	800398c <LL_RCC_HSE_IsReady+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_RCC_HSE_IsReady+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_RCC_HSI_Enable>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_HSI_Disable>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_RCC_HSI_IsReady>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e6:	d101      	bne.n	80039ec <LL_RCC_HSI_IsReady+0x18>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <LL_RCC_HSI_IsReady+0x1a>
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a12:	4313      	orrs	r3, r2
 8003a14:	604b      	str	r3, [r1, #4]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_RCC_HSI48_Enable>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_RCC_HSI48_Disable>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <LL_RCC_HSI48_IsReady>:
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d101      	bne.n	8003a7e <LL_RCC_HSI48_IsReady+0x18>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <LL_RCC_HSI48_IsReady+0x1a>
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_RCC_LSE_Enable>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_LSE_Disable>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_RCC_LSE_EnableBypass>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ae6:	bf00      	nop
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_RCC_LSE_DisableBypass>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_RCC_LSE_IsReady>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d101      	bne.n	8003b2a <LL_RCC_LSE_IsReady+0x18>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <LL_RCC_LSE_IsReady+0x1a>
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_LSI1_Enable>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_RCC_LSI1_Disable>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_LSI1_IsReady>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d101      	bne.n	8003b92 <LL_RCC_LSI1_IsReady+0x18>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <LL_RCC_LSI1_IsReady+0x1a>
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_LSI2_Enable>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_RCC_LSI2_Disable>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_LSI2_IsReady>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d101      	bne.n	8003bfa <LL_RCC_LSI2_IsReady+0x18>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <LL_RCC_LSI2_IsReady+0x1a>
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_RCC_LSI2_SetTrimming>:
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_MSI_Enable>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_RCC_MSI_Disable>:
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6013      	str	r3, [r2, #0]
}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_MSI_IsReady>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <LL_RCC_MSI_IsReady+0x16>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_RCC_MSI_IsReady+0x18>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_MSI_SetRange>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_MSI_GetRange>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2bb0      	cmp	r3, #176	; 0xb0
 8003cd0:	d901      	bls.n	8003cd6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003cd2:	23b0      	movs	r3, #176	; 0xb0
 8003cd4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003cd6:	687b      	ldr	r3, [r7, #4]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_SetSysClkSource>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 0203 	bic.w	r2, r3, #3
 8003d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_RCC_GetSysClkSource>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_RCC_SetAHBPrescaler>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_SetAHB4Prescaler>:
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_RCC_SetAPB1Prescaler>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_RCC_SetAPB2Prescaler>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_RCC_GetAHBPrescaler>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_RCC_GetAHB4Prescaler>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_RCC_GetAPB1Prescaler>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_RCC_GetAPB2Prescaler>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	6013      	str	r3, [r2, #0]
}
 8003eb6:	bf00      	nop
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ed2:	d101      	bne.n	8003ed8 <LL_RCC_PLL_IsReady+0x18>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <LL_RCC_PLL_IsReady+0x1a>
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003f16:	b480      	push	{r7}
 8003f18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0303 	and.w	r3, r3, #3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d101      	bne.n	8003f5e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f7e:	d101      	bne.n	8003f84 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d101      	bne.n	8003faa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc8:	d101      	bne.n	8003fce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fec:	d101      	bne.n	8003ff2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b08d      	sub	sp, #52	; 0x34
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e363      	b.n	80046da <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 808d 	beq.w	800413a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004020:	f7ff fe89 	bl	8003d36 <LL_RCC_GetSysClkSource>
 8004024:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004026:	f7ff ff82 	bl	8003f2e <LL_RCC_PLL_GetMainSource>
 800402a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x3e>
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d147      	bne.n	80040c8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	2b01      	cmp	r3, #1
 800403c:	d144      	bne.n	80040c8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e347      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800404e:	f7ff fe34 	bl	8003cba <LL_RCC_MSI_GetRange>
 8004052:	4603      	mov	r3, r0
 8004054:	429c      	cmp	r4, r3
 8004056:	d914      	bls.n	8004082 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fd2f 	bl	8004ac0 <RCC_SetFlashLatencyFromMSIRange>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e336      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fe0e 	bl	8003c92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fe32 	bl	8003ce4 <LL_RCC_MSI_SetCalibTrimming>
 8004080:	e013      	b.n	80040aa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fe03 	bl	8003c92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fe27 	bl	8003ce4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fd10 	bl	8004ac0 <RCC_SetFlashLatencyFromMSIRange>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e317      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040aa:	f000 fcc9 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4aa4      	ldr	r2, [pc, #656]	; (8004344 <HAL_RCC_OscConfig+0x344>)
 80040b2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040b4:	4ba4      	ldr	r3, [pc, #656]	; (8004348 <HAL_RCC_OscConfig+0x348>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd f87d 	bl	80011b8 <HAL_InitTick>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d039      	beq.n	8004138 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e308      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01e      	beq.n	800410e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040d0:	f7ff fdb0 	bl	8003c34 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040d4:	f7fd f8be 	bl	8001254 <HAL_GetTick>
 80040d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040dc:	f7fd f8ba 	bl	8001254 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e2f5      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80040ee:	f7ff fdbf 	bl	8003c70 <LL_RCC_MSI_IsReady>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f1      	beq.n	80040dc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fdc8 	bl	8003c92 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fdec 	bl	8003ce4 <LL_RCC_MSI_SetCalibTrimming>
 800410c:	e015      	b.n	800413a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800410e:	f7ff fda0 	bl	8003c52 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004112:	f7fd f89f 	bl	8001254 <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800411a:	f7fd f89b 	bl	8001254 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e2d6      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800412c:	f7ff fda0 	bl	8003c70 <LL_RCC_MSI_IsReady>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f1      	bne.n	800411a <HAL_RCC_OscConfig+0x11a>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004138:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d047      	beq.n	80041d6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004146:	f7ff fdf6 	bl	8003d36 <LL_RCC_GetSysClkSource>
 800414a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	f7ff feef 	bl	8003f2e <LL_RCC_PLL_GetMainSource>
 8004150:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d005      	beq.n	8004164 <HAL_RCC_OscConfig+0x164>
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d108      	bne.n	8004170 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d134      	bne.n	80041d6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e2b4      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d102      	bne.n	8004180 <HAL_RCC_OscConfig+0x180>
 800417a:	f7ff fbdd 	bl	8003938 <LL_RCC_HSE_Enable>
 800417e:	e001      	b.n	8004184 <HAL_RCC_OscConfig+0x184>
 8004180:	f7ff fbe9 	bl	8003956 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d012      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd f862 	bl	8001254 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fd f85e 	bl	8001254 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e299      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80041a6:	f7ff fbe5 	bl	8003974 <LL_RCC_HSE_IsReady>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f1      	beq.n	8004194 <HAL_RCC_OscConfig+0x194>
 80041b0:	e011      	b.n	80041d6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b2:	f7fd f84f 	bl	8001254 <HAL_GetTick>
 80041b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ba:	f7fd f84b 	bl	8001254 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e286      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80041cc:	f7ff fbd2 	bl	8003974 <LL_RCC_HSE_IsReady>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f1      	bne.n	80041ba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04c      	beq.n	800427c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e2:	f7ff fda8 	bl	8003d36 <LL_RCC_GetSysClkSource>
 80041e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e8:	f7ff fea1 	bl	8003f2e <LL_RCC_PLL_GetMainSource>
 80041ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d005      	beq.n	8004200 <HAL_RCC_OscConfig+0x200>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d10e      	bne.n	8004218 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d10b      	bne.n	8004218 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e266      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fbf1 	bl	80039f8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004216:	e031      	b.n	800427c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d019      	beq.n	8004254 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004220:	f7ff fbba 	bl	8003998 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd f816 	bl	8001254 <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422c:	f7fd f812 	bl	8001254 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e24d      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800423e:	f7ff fbc9 	bl	80039d4 <LL_RCC_HSI_IsReady>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f1      	beq.n	800422c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fbd3 	bl	80039f8 <LL_RCC_HSI_SetCalibTrimming>
 8004252:	e013      	b.n	800427c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004254:	f7ff fbaf 	bl	80039b6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fc fffc 	bl	8001254 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004260:	f7fc fff8 	bl	8001254 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e233      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004272:	f7ff fbaf 	bl	80039d4 <LL_RCC_HSI_IsReady>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f1      	bne.n	8004260 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80a3 	beq.w	80043dc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d076      	beq.n	800438c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d046      	beq.n	8004338 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80042aa:	f7ff fc66 	bl	8003b7a <LL_RCC_LSI1_IsReady>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d113      	bne.n	80042dc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80042b4:	f7ff fc3f 	bl	8003b36 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042b8:	f7fc ffcc 	bl	8001254 <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042c0:	f7fc ffc8 	bl	8001254 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e203      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80042d2:	f7ff fc52 	bl	8003b7a <LL_RCC_LSI1_IsReady>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f1      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80042dc:	f7ff fc5f 	bl	8003b9e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fc ffb8 	bl	8001254 <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80042e8:	f7fc ffb4 	bl	8001254 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1ef      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80042fa:	f7ff fc72 	bl	8003be2 <LL_RCC_LSI2_IsReady>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f1      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fc7c 	bl	8003c06 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800430e:	f7ff fc23 	bl	8003b58 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fc ff9f 	bl	8001254 <HAL_GetTick>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800431a:	f7fc ff9b 	bl	8001254 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1d6      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800432c:	f7ff fc25 	bl	8003b7a <LL_RCC_LSI1_IsReady>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f1      	bne.n	800431a <HAL_RCC_OscConfig+0x31a>
 8004336:	e051      	b.n	80043dc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004338:	f7ff fbfd 	bl	8003b36 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fc ff8a 	bl	8001254 <HAL_GetTick>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004342:	e00c      	b.n	800435e <HAL_RCC_OscConfig+0x35e>
 8004344:	20000008 	.word	0x20000008
 8004348:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800434c:	f7fc ff82 	bl	8001254 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1bd      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800435e:	f7ff fc0c 	bl	8003b7a <LL_RCC_LSI1_IsReady>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f1      	beq.n	800434c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004368:	f7ff fc2a 	bl	8003bc0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800436e:	f7fc ff71 	bl	8001254 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b03      	cmp	r3, #3
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1ac      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004380:	f7ff fc2f 	bl	8003be2 <LL_RCC_LSI2_IsReady>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f1      	bne.n	800436e <HAL_RCC_OscConfig+0x36e>
 800438a:	e027      	b.n	80043dc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800438c:	f7ff fc18 	bl	8003bc0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fc ff60 	bl	8001254 <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004398:	f7fc ff5c 	bl	8001254 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e197      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80043aa:	f7ff fc1a 	bl	8003be2 <LL_RCC_LSI2_IsReady>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f1      	bne.n	8004398 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80043b4:	f7ff fbd0 	bl	8003b58 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fc ff4c 	bl	8001254 <HAL_GetTick>
 80043bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043c0:	f7fc ff48 	bl	8001254 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e183      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80043d2:	f7ff fbd2 	bl	8003b7a <LL_RCC_LSI1_IsReady>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f1      	bne.n	80043c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d05b      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e8:	4ba7      	ldr	r3, [pc, #668]	; (8004688 <HAL_RCC_OscConfig+0x688>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d114      	bne.n	800441e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80043f4:	f7ff fa60 	bl	80038b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f8:	f7fc ff2c 	bl	8001254 <HAL_GetTick>
 80043fc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fc ff28 	bl	8001254 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e163      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004412:	4b9d      	ldr	r3, [pc, #628]	; (8004688 <HAL_RCC_OscConfig+0x688>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d102      	bne.n	800442c <HAL_RCC_OscConfig+0x42c>
 8004426:	f7ff fb30 	bl	8003a8a <LL_RCC_LSE_Enable>
 800442a:	e00c      	b.n	8004446 <HAL_RCC_OscConfig+0x446>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d104      	bne.n	800443e <HAL_RCC_OscConfig+0x43e>
 8004434:	f7ff fb4b 	bl	8003ace <LL_RCC_LSE_EnableBypass>
 8004438:	f7ff fb27 	bl	8003a8a <LL_RCC_LSE_Enable>
 800443c:	e003      	b.n	8004446 <HAL_RCC_OscConfig+0x446>
 800443e:	f7ff fb35 	bl	8003aac <LL_RCC_LSE_Disable>
 8004442:	f7ff fb55 	bl	8003af0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d014      	beq.n	8004478 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fc ff01 	bl	8001254 <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fc fefd 	bl	8001254 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e136      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800446c:	f7ff fb51 	bl	8003b12 <LL_RCC_LSE_IsReady>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ef      	beq.n	8004456 <HAL_RCC_OscConfig+0x456>
 8004476:	e013      	b.n	80044a0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fc feec 	bl	8001254 <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fc fee8 	bl	8001254 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e121      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004496:	f7ff fb3c 	bl	8003b12 <LL_RCC_LSE_IsReady>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1ef      	bne.n	8004480 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02c      	beq.n	8004506 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d014      	beq.n	80044de <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044b4:	f7ff fab5 	bl	8003a22 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fc fecc 	bl	8001254 <HAL_GetTick>
 80044bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044c0:	f7fc fec8 	bl	8001254 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e103      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80044d2:	f7ff fac8 	bl	8003a66 <LL_RCC_HSI48_IsReady>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f1      	beq.n	80044c0 <HAL_RCC_OscConfig+0x4c0>
 80044dc:	e013      	b.n	8004506 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044de:	f7ff fab1 	bl	8003a44 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fc feb7 	bl	8001254 <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ea:	f7fc feb3 	bl	8001254 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e0ee      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80044fc:	f7ff fab3 	bl	8003a66 <LL_RCC_HSI48_IsReady>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f1      	bne.n	80044ea <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80e4 	beq.w	80046d8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004510:	f7ff fc11 	bl	8003d36 <LL_RCC_GetSysClkSource>
 8004514:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	2b02      	cmp	r3, #2
 8004524:	f040 80b4 	bne.w	8004690 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0203 	and.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	429a      	cmp	r2, r3
 8004534:	d123      	bne.n	800457e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d11c      	bne.n	800457e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d114      	bne.n	800457e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d10d      	bne.n	800457e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d05d      	beq.n	800463a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d058      	beq.n	8004636 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0a1      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004596:	f7ff fc84 	bl	8003ea2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800459a:	f7fc fe5b 	bl	8001254 <HAL_GetTick>
 800459e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fc fe57 	bl	8001254 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e092      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1ef      	bne.n	80045a2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	4b30      	ldr	r3, [pc, #192]	; (800468c <HAL_RCC_OscConfig+0x68c>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045d4:	4311      	orrs	r1, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045da:	0212      	lsls	r2, r2, #8
 80045dc:	4311      	orrs	r1, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045e2:	4311      	orrs	r1, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045e8:	4311      	orrs	r1, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045ee:	430a      	orrs	r2, r1
 80045f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045f8:	f7ff fc44 	bl	8003e84 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800460c:	f7fc fe22 	bl	8001254 <HAL_GetTick>
 8004610:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fc fe1e 	bl	8001254 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e059      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ef      	beq.n	8004614 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004634:	e050      	b.n	80046d8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e04f      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d147      	bne.n	80046d8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004648:	f7ff fc1c 	bl	8003e84 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800465c:	f7fc fdfa 	bl	8001254 <HAL_GetTick>
 8004660:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fc fdf6 	bl	8001254 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e031      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ef      	beq.n	8004664 <HAL_RCC_OscConfig+0x664>
 8004684:	e028      	b.n	80046d8 <HAL_RCC_OscConfig+0x6d8>
 8004686:	bf00      	nop
 8004688:	58000400 	.word	0x58000400
 800468c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d01e      	beq.n	80046d4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	f7ff fc04 	bl	8003ea2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fc fddb 	bl	8001254 <HAL_GetTick>
 800469e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fc fdd7 	bl	8001254 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e012      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ef      	bne.n	80046a2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_OscConfig+0x6e4>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60cb      	str	r3, [r1, #12]
 80046d2:	e001      	b.n	80046d8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3734      	adds	r7, #52	; 0x34
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	eefefffc 	.word	0xeefefffc

080046e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e12d      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046fc:	4b98      	ldr	r3, [pc, #608]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d91b      	bls.n	8004742 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b95      	ldr	r3, [pc, #596]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 0207 	bic.w	r2, r3, #7
 8004712:	4993      	ldr	r1, [pc, #588]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471a:	f7fc fd9b 	bl	8001254 <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004720:	e008      	b.n	8004734 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004722:	f7fc fd97 	bl	8001254 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e111      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004734:	4b8a      	ldr	r3, [pc, #552]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d1ef      	bne.n	8004722 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fafb 	bl	8003d4e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004758:	f7fc fd7c 	bl	8001254 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004760:	f7fc fd78 	bl	8001254 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0f2      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004772:	f7ff fbe8 	bl	8003f46 <LL_RCC_IsActiveFlag_HPRE>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f1      	beq.n	8004760 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d016      	beq.n	80047b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff faf2 	bl	8003d76 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004792:	f7fc fd5f 	bl	8001254 <HAL_GetTick>
 8004796:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800479a:	f7fc fd5b 	bl	8001254 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0d5      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80047ac:	f7ff fbdd 	bl	8003f6a <LL_RCC_IsActiveFlag_C2HPRE>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f1      	beq.n	800479a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff faeb 	bl	8003da2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80047cc:	f7fc fd42 	bl	8001254 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80047d4:	f7fc fd3e 	bl	8001254 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e0b8      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80047e6:	f7ff fbd3 	bl	8003f90 <LL_RCC_IsActiveFlag_SHDHPRE>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f1      	beq.n	80047d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d016      	beq.n	800482a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fae5 	bl	8003dd0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004806:	f7fc fd25 	bl	8001254 <HAL_GetTick>
 800480a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800480e:	f7fc fd21 	bl	8001254 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e09b      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004820:	f7ff fbc9 	bl	8003fb6 <LL_RCC_IsActiveFlag_PPRE1>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f1      	beq.n	800480e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d017      	beq.n	8004866 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fadb 	bl	8003df8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004842:	f7fc fd07 	bl	8001254 <HAL_GetTick>
 8004846:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004848:	e008      	b.n	800485c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800484a:	f7fc fd03 	bl	8001254 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e07d      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800485c:	f7ff fbbd 	bl	8003fda <LL_RCC_IsActiveFlag_PPRE2>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f1      	beq.n	800484a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d043      	beq.n	80048fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d106      	bne.n	8004888 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800487a:	f7ff f87b 	bl	8003974 <LL_RCC_HSE_IsReady>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d11e      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e067      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d106      	bne.n	800489e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004890:	f7ff fb16 	bl	8003ec0 <LL_RCC_PLL_IsReady>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d113      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e05c      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80048a6:	f7ff f9e3 	bl	8003c70 <LL_RCC_MSI_IsReady>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d108      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e051      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80048b4:	f7ff f88e 	bl	80039d4 <LL_RCC_HSI_IsReady>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e04a      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fa21 	bl	8003d0e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048cc:	f7fc fcc2 	bl	8001254 <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d4:	f7fc fcbe 	bl	8001254 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e036      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	f7ff fa24 	bl	8003d36 <LL_RCC_GetSysClkSource>
 80048ee:	4602      	mov	r2, r0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d1ec      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048fa:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d21b      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 0207 	bic.w	r2, r3, #7
 8004910:	4913      	ldr	r1, [pc, #76]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fc fc9c 	bl	8001254 <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	e008      	b.n	8004932 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004920:	f7fc fc98 	bl	8001254 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e012      	b.n	8004958 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_ClockConfig+0x278>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d1ef      	bne.n	8004920 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004940:	f000 f87e 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004944:	4603      	mov	r3, r0
 8004946:	4a07      	ldr	r2, [pc, #28]	; (8004964 <HAL_RCC_ClockConfig+0x27c>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800494a:	f7fc fc8f 	bl	800126c <HAL_GetTickPrio>
 800494e:	4603      	mov	r3, r0
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc fc31 	bl	80011b8 <HAL_InitTick>
 8004956:	4603      	mov	r3, r0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	58004000 	.word	0x58004000
 8004964:	20000008 	.word	0x20000008

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496e:	f7ff f9e2 	bl	8003d36 <LL_RCC_GetSysClkSource>
 8004972:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800497a:	f7ff f99e 	bl	8003cba <LL_RCC_MSI_GetRange>
 800497e:	4603      	mov	r3, r0
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	4a2b      	ldr	r2, [pc, #172]	; (8004a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e04b      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b04      	cmp	r3, #4
 8004994:	d102      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004996:	4b28      	ldr	r3, [pc, #160]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e045      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d10a      	bne.n	80049b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80049a2:	f7fe ffb7 	bl	8003914 <LL_RCC_HSE_IsEnabledDiv2>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d102      	bne.n	80049b2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80049ac:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e03a      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b22      	ldr	r3, [pc, #136]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xd4>)
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e037      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80049b8:	f7ff fab9 	bl	8003f2e <LL_RCC_PLL_GetMainSource>
 80049bc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d003      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x64>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d003      	beq.n	80049d2 <HAL_RCC_GetSysClockFreq+0x6a>
 80049ca:	e00d      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049ce:	60bb      	str	r3, [r7, #8]
        break;
 80049d0:	e015      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80049d2:	f7fe ff9f 	bl	8003914 <LL_RCC_HSE_IsEnabledDiv2>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d102      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80049dc:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xd0>)
 80049de:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80049e0:	e00d      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80049e2:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xd4>)
 80049e4:	60bb      	str	r3, [r7, #8]
        break;
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80049e8:	f7ff f967 	bl	8003cba <LL_RCC_MSI_GetRange>
 80049ec:	4603      	mov	r3, r0
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	4a0f      	ldr	r2, [pc, #60]	; (8004a34 <HAL_RCC_GetSysClockFreq+0xcc>)
 80049f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fa:	60bb      	str	r3, [r7, #8]
        break;
 80049fc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80049fe:	f7ff fa71 	bl	8003ee4 <LL_RCC_PLL_GetN>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	fb03 f402 	mul.w	r4, r3, r2
 8004a0a:	f7ff fa84 	bl	8003f16 <LL_RCC_PLL_GetDivider>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	3301      	adds	r3, #1
 8004a14:	fbb4 f4f3 	udiv	r4, r4, r3
 8004a18:	f7ff fa71 	bl	8003efe <LL_RCC_PLL_GetR>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	0f5b      	lsrs	r3, r3, #29
 8004a20:	3301      	adds	r3, #1
 8004a22:	fbb4 f3f3 	udiv	r3, r4, r3
 8004a26:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004a28:	68fb      	ldr	r3, [r7, #12]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd90      	pop	{r4, r7, pc}
 8004a32:	bf00      	nop
 8004a34:	08016448 	.word	0x08016448
 8004a38:	00f42400 	.word	0x00f42400
 8004a3c:	01e84800 	.word	0x01e84800

08004a40 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a40:	b598      	push	{r3, r4, r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004a44:	f7ff ff90 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	f7ff f9e9 	bl	8003e20 <LL_RCC_GetAHBPrescaler>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a03      	ldr	r2, [pc, #12]	; (8004a64 <HAL_RCC_GetHCLKFreq+0x24>)
 8004a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd98      	pop	{r3, r4, r7, pc}
 8004a64:	080163e8 	.word	0x080163e8

08004a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a68:	b598      	push	{r3, r4, r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a6c:	f7ff ffe8 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004a70:	4604      	mov	r4, r0
 8004a72:	f7ff f9ef 	bl	8003e54 <LL_RCC_GetAPB1Prescaler>
 8004a76:	4603      	mov	r3, r0
 8004a78:	0a1b      	lsrs	r3, r3, #8
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd98      	pop	{r3, r4, r7, pc}
 8004a90:	08016428 	.word	0x08016428

08004a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a94:	b598      	push	{r3, r4, r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004a98:	f7ff ffd2 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	f7ff f9e5 	bl	8003e6c <LL_RCC_GetAPB2Prescaler>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	0adb      	lsrs	r3, r3, #11
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd98      	pop	{r3, r4, r7, pc}
 8004abc:	08016428 	.word	0x08016428

08004ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2bb0      	cmp	r3, #176	; 0xb0
 8004acc:	d903      	bls.n	8004ad6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e007      	b.n	8004ae6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004ae6:	f7ff f9a7 	bl	8003e38 <LL_RCC_GetAHB4Prescaler>
 8004aea:	4603      	mov	r3, r0
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	0c9c      	lsrs	r4, r3, #18
 8004b0a:	f7fe fee5 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4619      	mov	r1, r3
 8004b12:	4620      	mov	r0, r4
 8004b14:	f000 f80c 	bl	8004b30 <RCC_SetFlashLatency>
 8004b18:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd90      	pop	{r4, r7, pc}
 8004b22:	bf00      	nop
 8004b24:	08016448 	.word	0x08016448
 8004b28:	080163e8 	.word	0x080163e8
 8004b2c:	431bde83 	.word	0x431bde83

08004b30 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b093      	sub	sp, #76	; 0x4c
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004b3a:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <RCC_SetFlashLatency+0xe8>)
 8004b3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004b46:	4a35      	ldr	r2, [pc, #212]	; (8004c1c <RCC_SetFlashLatency+0xec>)
 8004b48:	f107 031c 	add.w	r3, r7, #28
 8004b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004b52:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <RCC_SetFlashLatency+0xf0>)
 8004b54:	f107 040c 	add.w	r4, r7, #12
 8004b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004b5e:	2300      	movs	r3, #0
 8004b60:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b68:	d11a      	bne.n	8004ba0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b6e:	e013      	b.n	8004b98 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	3348      	adds	r3, #72	; 0x48
 8004b76:	443b      	add	r3, r7
 8004b78:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d807      	bhi.n	8004b92 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3348      	adds	r3, #72	; 0x48
 8004b88:	443b      	add	r3, r7
 8004b8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004b90:	e020      	b.n	8004bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b94:	3301      	adds	r3, #1
 8004b96:	643b      	str	r3, [r7, #64]	; 0x40
 8004b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d9e8      	bls.n	8004b70 <RCC_SetFlashLatency+0x40>
 8004b9e:	e019      	b.n	8004bd4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba4:	e013      	b.n	8004bce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	3348      	adds	r3, #72	; 0x48
 8004bac:	443b      	add	r3, r7
 8004bae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d807      	bhi.n	8004bc8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	3348      	adds	r3, #72	; 0x48
 8004bbe:	443b      	add	r3, r7
 8004bc0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004bc6:	e005      	b.n	8004bd4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bca:	3301      	adds	r3, #1
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d9e8      	bls.n	8004ba6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004bd4:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <RCC_SetFlashLatency+0xf4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f023 0207 	bic.w	r2, r3, #7
 8004bdc:	4911      	ldr	r1, [pc, #68]	; (8004c24 <RCC_SetFlashLatency+0xf4>)
 8004bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004be4:	f7fc fb36 	bl	8001254 <HAL_GetTick>
 8004be8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004bea:	e008      	b.n	8004bfe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004bec:	f7fc fb32 	bl	8001254 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e007      	b.n	8004c0e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <RCC_SetFlashLatency+0xf4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d1ef      	bne.n	8004bec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	374c      	adds	r7, #76	; 0x4c
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	08016374 	.word	0x08016374
 8004c1c:	08016384 	.word	0x08016384
 8004c20:	08016390 	.word	0x08016390
 8004c24:	58004000 	.word	0x58004000

08004c28 <LL_RCC_LSE_IsEnabled>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <LL_RCC_LSE_IsEnabled+0x18>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <LL_RCC_LSE_IsEnabled+0x1a>
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_RCC_LSE_IsReady>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d101      	bne.n	8004c64 <LL_RCC_LSE_IsReady+0x18>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <LL_RCC_LSE_IsReady+0x1a>
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_RCC_SetRFWKPClockSource>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_RCC_SetSMPSClockSource>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f023 0203 	bic.w	r2, r3, #3
 8004cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_RCC_SetSMPSPrescaler>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_SetUSARTClockSource>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f023 0203 	bic.w	r2, r3, #3
 8004d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <LL_RCC_SetLPUARTClockSource>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_SetI2CClockSource>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004d68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <LL_RCC_SetLPTIMClockSource>:
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	43db      	mvns	r3, r3
 8004d96:	401a      	ands	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <LL_RCC_SetSAIClockSource>:
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_SetRNGClockSource>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_RCC_SetCLK48ClockSource>:
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_SetUSBClockSource>:
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff ffe3 	bl	8004e0a <LL_RCC_SetCLK48ClockSource>
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <LL_RCC_SetADCClockSource>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_SetRTCClockSource>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <LL_RCC_GetRTCClockSource>:
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_RCC_ForceBackupDomainReset>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ed6:	bf00      	nop
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <LL_RCC_PLLSAI1_Enable>:
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f14:	6013      	str	r3, [r2, #0]
}
 8004f16:	bf00      	nop
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_PLLSAI1_Disable>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <LL_RCC_PLLSAI1_IsReady>:
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f50:	d101      	bne.n	8004f56 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b088      	sub	sp, #32
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f6e:	2300      	movs	r3, #0
 8004f70:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d034      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f86:	d021      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004f88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f8c:	d81b      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f92:	d01d      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f98:	d815      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa2:	d110      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fb4:	e00d      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f947 	bl	800524e <RCCEx_PLLSAI1_ConfigNP>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fc4:	e005      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	77fb      	strb	r3, [r7, #31]
        break;
 8004fca:	e002      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004fcc:	bf00      	nop
 8004fce:	e000      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fee8 	bl	8004db2 <LL_RCC_SetSAIClockSource>
 8004fe2:	e001      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	7ffb      	ldrb	r3, [r7, #31]
 8004fe6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d046      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004ff4:	f7ff ff56 	bl	8004ea4 <LL_RCC_GetRTCClockSource>
 8004ff8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	d03c      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005004:	f7fe fc58 	bl	80038b8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff ff30 	bl	8004e78 <LL_RCC_SetRTCClockSource>
 8005018:	e02e      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800501a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005024:	f7ff ff4b 	bl	8004ebe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005028:	f7ff ff5a 	bl	8004ee0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800503a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005044:	f7ff fdf0 	bl	8004c28 <LL_RCC_LSE_IsEnabled>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d114      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800504e:	f7fc f901 	bl	8001254 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005054:	e00b      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fc f8fd 	bl	8001254 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d902      	bls.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	77fb      	strb	r3, [r7, #31]
              break;
 800506c:	e004      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800506e:	f7ff fded 	bl	8004c4c <LL_RCC_LSE_IsReady>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d1ee      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005078:	7ffb      	ldrb	r3, [r7, #31]
 800507a:	77bb      	strb	r3, [r7, #30]
 800507c:	e001      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	7ffb      	ldrb	r3, [r7, #31]
 8005080:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fe2a 	bl	8004cec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fe35 	bl	8004d18 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fe5d 	bl	8004d7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fe52 	bl	8004d7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fe2a 	bl	8004d44 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fe1f 	bl	8004d44 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d022      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fe8d 	bl	8004e36 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005124:	d107      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005134:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800513e:	d10b      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f8dd 	bl	8005304 <RCCEx_PLLSAI1_ConfigNQ>
 800514a:	4603      	mov	r3, r0
 800514c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800514e:	7ffb      	ldrb	r3, [r7, #31]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005154:	7ffb      	ldrb	r3, [r7, #31]
 8005156:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005160:	2b00      	cmp	r3, #0
 8005162:	d02b      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d008      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005176:	d003      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fe2a 	bl	8004dde <LL_RCC_SetRNGClockSource>
 800518a:	e00a      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	2000      	movs	r0, #0
 8005198:	f7ff fe21 	bl	8004dde <LL_RCC_SetRNGClockSource>
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff fe34 	bl	8004e0a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80051aa:	d107      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80051ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d022      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fe3d 	bl	8004e4c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051da:	d107      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ea:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051f4:	d10b      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f8dd 	bl	80053ba <RCCEx_PLLSAI1_ConfigNR>
 8005200:	4603      	mov	r3, r0
 8005202:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005204:	7ffb      	ldrb	r3, [r7, #31]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800520a:	7ffb      	ldrb	r3, [r7, #31]
 800520c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fd26 	bl	8004c70 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fd45 	bl	8004cc4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fd2c 	bl	8004c9c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005244:	7fbb      	ldrb	r3, [r7, #30]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800525a:	f7ff fe61 	bl	8004f20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800525e:	f7fb fff9 	bl	8001254 <HAL_GetTick>
 8005262:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005264:	e009      	b.n	800527a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005266:	f7fb fff5 	bl	8001254 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d902      	bls.n	800527a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	e004      	b.n	8005284 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800527a:	f7ff fe60 	bl	8004f3e <LL_RCC_PLLSAI1_IsReady>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1f0      	bne.n	8005266 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d137      	bne.n	80052fa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800529e:	4313      	orrs	r3, r2
 80052a0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052b4:	4313      	orrs	r3, r2
 80052b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80052b8:	f7ff fe23 	bl	8004f02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052bc:	f7fb ffca 	bl	8001254 <HAL_GetTick>
 80052c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052c2:	e009      	b.n	80052d8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052c4:	f7fb ffc6 	bl	8001254 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d902      	bls.n	80052d8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	73fb      	strb	r3, [r7, #15]
        break;
 80052d6:	e004      	b.n	80052e2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052d8:	f7ff fe31 	bl	8004f3e <LL_RCC_PLLSAI1_IsReady>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d1f0      	bne.n	80052c4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d108      	bne.n	80052fa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f6:	4313      	orrs	r3, r2
 80052f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005310:	f7ff fe06 	bl	8004f20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005314:	f7fb ff9e 	bl	8001254 <HAL_GetTick>
 8005318:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800531a:	e009      	b.n	8005330 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800531c:	f7fb ff9a 	bl	8001254 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d902      	bls.n	8005330 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	73fb      	strb	r3, [r7, #15]
      break;
 800532e:	e004      	b.n	800533a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005330:	f7ff fe05 	bl	8004f3e <LL_RCC_PLLSAI1_IsReady>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d137      	bne.n	80053b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005354:	4313      	orrs	r3, r2
 8005356:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800536a:	4313      	orrs	r3, r2
 800536c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800536e:	f7ff fdc8 	bl	8004f02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fb ff6f 	bl	8001254 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005378:	e009      	b.n	800538e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800537a:	f7fb ff6b 	bl	8001254 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d902      	bls.n	800538e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	73fb      	strb	r3, [r7, #15]
        break;
 800538c:	e004      	b.n	8005398 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800538e:	f7ff fdd6 	bl	8004f3e <LL_RCC_PLLSAI1_IsReady>
 8005392:	4603      	mov	r3, r0
 8005394:	2b01      	cmp	r3, #1
 8005396:	d1f0      	bne.n	800537a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d108      	bne.n	80053b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800539e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ac:	4313      	orrs	r3, r2
 80053ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053c6:	f7ff fdab 	bl	8004f20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ca:	f7fb ff43 	bl	8001254 <HAL_GetTick>
 80053ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053d0:	e009      	b.n	80053e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d2:	f7fb ff3f 	bl	8001254 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d902      	bls.n	80053e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	73fb      	strb	r3, [r7, #15]
      break;
 80053e4:	e004      	b.n	80053f0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053e6:	f7ff fdaa 	bl	8004f3e <LL_RCC_PLLSAI1_IsReady>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d137      	bne.n	8005466 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800540a:	4313      	orrs	r3, r2
 800540c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800540e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005424:	f7ff fd6d 	bl	8004f02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005428:	f7fb ff14 	bl	8001254 <HAL_GetTick>
 800542c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800542e:	e009      	b.n	8005444 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005430:	f7fb ff10 	bl	8001254 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d902      	bls.n	8005444 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	73fb      	strb	r3, [r7, #15]
        break;
 8005442:	e004      	b.n	800544e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005444:	f7ff fd7b 	bl	8004f3e <LL_RCC_PLLSAI1_IsReady>
 8005448:	4603      	mov	r3, r0
 800544a:	2b01      	cmp	r3, #1
 800544c:	d1f0      	bne.n	8005430 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d108      	bne.n	8005466 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005462:	4313      	orrs	r3, r2
 8005464:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e027      	b.n	80054d2 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	7a5b      	ldrb	r3, [r3, #9]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fb fc8e 	bl	8000db4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 0120 	bic.w	r1, r3, #32
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0204 	orr.w	r2, r2, #4
 80054c2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	7a1b      	ldrb	r3, [r3, #8]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_RNG_GenerateRandomNumber+0x1a>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e044      	b.n	800557e <HAL_RNG_GenerateRandomNumber+0xa4>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7a5b      	ldrb	r3, [r3, #9]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d133      	bne.n	800556c <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800550a:	f7fb fea3 	bl	8001254 <HAL_GetTick>
 800550e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005510:	e018      	b.n	8005544 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005512:	f7fb fe9f 	bl	8001254 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d911      	bls.n	8005544 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d00a      	beq.n	8005544 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e01c      	b.n	800557e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	d1df      	bne.n	8005512 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	725a      	strb	r2, [r3, #9]
 800556a:	e004      	b.n	8005576 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2204      	movs	r2, #4
 8005570:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	721a      	strb	r2, [r3, #8]

  return status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e09f      	b.n	80056da <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb fc2a 	bl	8000e08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055bc:	4b49      	ldr	r3, [pc, #292]	; (80056e4 <HAL_RTC_Init+0x15c>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d07e      	beq.n	80056c6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	22ca      	movs	r2, #202	; 0xca
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2253      	movs	r2, #83	; 0x53
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f8ab 	bl	8005734 <RTC_EnterInitMode>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	22ff      	movs	r2, #255	; 0xff
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2204      	movs	r2, #4
 80055f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e067      	b.n	80056ca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68d2      	ldr	r2, [r2, #12]
 8005634:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6919      	ldr	r1, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	041a      	lsls	r2, r3, #16
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005658:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0203 	bic.w	r2, r2, #3
 8005668:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d113      	bne.n	80056b8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f829 	bl	80056e8 <HAL_RTC_WaitForSynchro>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2204      	movs	r2, #4
 80056a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e010      	b.n	80056da <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	22ff      	movs	r2, #255	; 0xff
 80056be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	73fb      	strb	r3, [r7, #15]
 80056c4:	e001      	b.n	80056ca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40002800 	.word	0x40002800

080056e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005700:	f7fb fda8 	bl	8001254 <HAL_GetTick>
 8005704:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005706:	e009      	b.n	800571c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005708:	f7fb fda4 	bl	8001254 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005716:	d901      	bls.n	800571c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e007      	b.n	800572c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0ee      	beq.n	8005708 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d119      	bne.n	800577e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005754:	f7fb fd7e 	bl	8001254 <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800575a:	e009      	b.n	8005770 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800575c:	f7fb fd7a 	bl	8001254 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576a:	d901      	bls.n	8005770 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e007      	b.n	8005780 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ee      	beq.n	800575c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800579e:	2302      	movs	r3, #2
 80057a0:	e089      	b.n	80058b6 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	22ca      	movs	r2, #202	; 0xca
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2253      	movs	r2, #83	; 0x53
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80057d0:	f7fb fd40 	bl	8001254 <HAL_GetTick>
 80057d4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057d6:	e015      	b.n	8005804 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057d8:	f7fb fd3c 	bl	8001254 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057e6:	d90d      	bls.n	8005804 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2203      	movs	r2, #3
 80057f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e058      	b.n	80058b6 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e2      	bne.n	80057d8 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005820:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005822:	f7fb fd17 	bl	8001254 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005828:	e015      	b.n	8005856 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800582a:	f7fb fd13 	bl	8001254 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005838:	d90d      	bls.n	8005856 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	22ff      	movs	r2, #255	; 0xff
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2203      	movs	r2, #3
 8005846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e02f      	b.n	80058b6 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0e2      	beq.n	800582a <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0207 	bic.w	r2, r2, #7
 8005872:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6899      	ldr	r1, [r3, #8]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800589a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <LL_RCC_GetUSARTClockSource>:
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4013      	ands	r3, r2
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <LL_RCC_GetLPUARTClockSource>:
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80058e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4013      	ands	r3, r2
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e042      	b.n	8005996 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fb fa9c 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f82d 	bl	80059a0 <UART_SetConfig>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e022      	b.n	8005996 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fa49 	bl	8005df0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800596c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800597c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fad0 	bl	8005f34 <UART_CheckIdleState>
 8005994:	4603      	mov	r3, r0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a4:	b08c      	sub	sp, #48	; 0x30
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	431a      	orrs	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	4baf      	ldr	r3, [pc, #700]	; (8005c8c <UART_SetConfig+0x2ec>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d8:	430b      	orrs	r3, r1
 80059da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4aa4      	ldr	r2, [pc, #656]	; (8005c90 <UART_SetConfig+0x2f0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f023 010f 	bic.w	r1, r3, #15
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a95      	ldr	r2, [pc, #596]	; (8005c94 <UART_SetConfig+0x2f4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d125      	bne.n	8005a90 <UART_SetConfig+0xf0>
 8005a44:	2003      	movs	r0, #3
 8005a46:	f7ff ff3a 	bl	80058be <LL_RCC_GetUSARTClockSource>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d81b      	bhi.n	8005a88 <UART_SetConfig+0xe8>
 8005a50:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <UART_SetConfig+0xb8>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a79 	.word	0x08005a79
 8005a60:	08005a71 	.word	0x08005a71
 8005a64:	08005a81 	.word	0x08005a81
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e042      	b.n	8005af6 <UART_SetConfig+0x156>
 8005a70:	2302      	movs	r3, #2
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a76:	e03e      	b.n	8005af6 <UART_SetConfig+0x156>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7e:	e03a      	b.n	8005af6 <UART_SetConfig+0x156>
 8005a80:	2308      	movs	r3, #8
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e036      	b.n	8005af6 <UART_SetConfig+0x156>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e032      	b.n	8005af6 <UART_SetConfig+0x156>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a7e      	ldr	r2, [pc, #504]	; (8005c90 <UART_SetConfig+0x2f0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d12a      	bne.n	8005af0 <UART_SetConfig+0x150>
 8005a9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005a9e:	f7ff ff1e 	bl	80058de <LL_RCC_GetLPUARTClockSource>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aa8:	d01a      	beq.n	8005ae0 <UART_SetConfig+0x140>
 8005aaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aae:	d81b      	bhi.n	8005ae8 <UART_SetConfig+0x148>
 8005ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab4:	d00c      	beq.n	8005ad0 <UART_SetConfig+0x130>
 8005ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aba:	d815      	bhi.n	8005ae8 <UART_SetConfig+0x148>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <UART_SetConfig+0x128>
 8005ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac4:	d008      	beq.n	8005ad8 <UART_SetConfig+0x138>
 8005ac6:	e00f      	b.n	8005ae8 <UART_SetConfig+0x148>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ace:	e012      	b.n	8005af6 <UART_SetConfig+0x156>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad6:	e00e      	b.n	8005af6 <UART_SetConfig+0x156>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ade:	e00a      	b.n	8005af6 <UART_SetConfig+0x156>
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ae6:	e006      	b.n	8005af6 <UART_SetConfig+0x156>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aee:	e002      	b.n	8005af6 <UART_SetConfig+0x156>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a65      	ldr	r2, [pc, #404]	; (8005c90 <UART_SetConfig+0x2f0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	f040 8097 	bne.w	8005c30 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d823      	bhi.n	8005b52 <UART_SetConfig+0x1b2>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x170>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b53 	.word	0x08005b53
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b53 	.word	0x08005b53
 8005b20:	08005b43 	.word	0x08005b43
 8005b24:	08005b53 	.word	0x08005b53
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	08005b53 	.word	0x08005b53
 8005b30:	08005b4b 	.word	0x08005b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b34:	f7fe ff98 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 8005b38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b3a:	e010      	b.n	8005b5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3c:	4b56      	ldr	r3, [pc, #344]	; (8005c98 <UART_SetConfig+0x2f8>)
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b40:	e00d      	b.n	8005b5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fe ff11 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b48:	e009      	b.n	8005b5e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b50:	e005      	b.n	8005b5e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 812b 	beq.w	8005dbc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	4a4c      	ldr	r2, [pc, #304]	; (8005c9c <UART_SetConfig+0x2fc>)
 8005b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d305      	bcc.n	8005b96 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d903      	bls.n	8005b9e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b9c:	e10e      	b.n	8005dbc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	60fa      	str	r2, [r7, #12]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	4a3c      	ldr	r2, [pc, #240]	; (8005c9c <UART_SetConfig+0x2fc>)
 8005bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bc0:	f7fa fb2e 	bl	8000220 <__aeabi_uldivmod>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	020b      	lsls	r3, r1, #8
 8005bd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bda:	0202      	lsls	r2, r0, #8
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	6849      	ldr	r1, [r1, #4]
 8005be0:	0849      	lsrs	r1, r1, #1
 8005be2:	2000      	movs	r0, #0
 8005be4:	460c      	mov	r4, r1
 8005be6:	4605      	mov	r5, r0
 8005be8:	eb12 0804 	adds.w	r8, r2, r4
 8005bec:	eb43 0905 	adc.w	r9, r3, r5
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	469a      	mov	sl, r3
 8005bf8:	4693      	mov	fp, r2
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	465b      	mov	r3, fp
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4649      	mov	r1, r9
 8005c02:	f7fa fb0d 	bl	8000220 <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c14:	d308      	bcc.n	8005c28 <UART_SetConfig+0x288>
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c1c:	d204      	bcs.n	8005c28 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a3a      	ldr	r2, [r7, #32]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	e0c9      	b.n	8005dbc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c2e:	e0c5      	b.n	8005dbc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c38:	d16d      	bne.n	8005d16 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	d82d      	bhi.n	8005ca0 <UART_SetConfig+0x300>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x2ac>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c6d 	.word	0x08005c6d
 8005c50:	08005c75 	.word	0x08005c75
 8005c54:	08005ca1 	.word	0x08005ca1
 8005c58:	08005c7b 	.word	0x08005c7b
 8005c5c:	08005ca1 	.word	0x08005ca1
 8005c60:	08005ca1 	.word	0x08005ca1
 8005c64:	08005ca1 	.word	0x08005ca1
 8005c68:	08005c83 	.word	0x08005c83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fe ff12 	bl	8004a94 <HAL_RCC_GetPCLK2Freq>
 8005c70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c72:	e01b      	b.n	8005cac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <UART_SetConfig+0x2f8>)
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c78:	e018      	b.n	8005cac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7fe fe75 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8005c7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c80:	e014      	b.n	8005cac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c88:	e010      	b.n	8005cac <UART_SetConfig+0x30c>
 8005c8a:	bf00      	nop
 8005c8c:	cfff69f3 	.word	0xcfff69f3
 8005c90:	40008000 	.word	0x40008000
 8005c94:	40013800 	.word	0x40013800
 8005c98:	00f42400 	.word	0x00f42400
 8005c9c:	08016488 	.word	0x08016488
      default:
        pclk = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005caa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8084 	beq.w	8005dbc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	4a4b      	ldr	r2, [pc, #300]	; (8005de8 <UART_SetConfig+0x448>)
 8005cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc6:	005a      	lsls	r2, r3, #1
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	441a      	add	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	2b0f      	cmp	r3, #15
 8005cde:	d916      	bls.n	8005d0e <UART_SetConfig+0x36e>
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce6:	d212      	bcs.n	8005d0e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f023 030f 	bic.w	r3, r3, #15
 8005cf0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	8bfb      	ldrh	r3, [r7, #30]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	8bfa      	ldrh	r2, [r7, #30]
 8005d0a:	60da      	str	r2, [r3, #12]
 8005d0c:	e056      	b.n	8005dbc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d14:	e052      	b.n	8005dbc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	2b07      	cmp	r3, #7
 8005d1e:	d822      	bhi.n	8005d66 <UART_SetConfig+0x3c6>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <UART_SetConfig+0x388>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d49 	.word	0x08005d49
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d67 	.word	0x08005d67
 8005d34:	08005d57 	.word	0x08005d57
 8005d38:	08005d67 	.word	0x08005d67
 8005d3c:	08005d67 	.word	0x08005d67
 8005d40:	08005d67 	.word	0x08005d67
 8005d44:	08005d5f 	.word	0x08005d5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe fea4 	bl	8004a94 <HAL_RCC_GetPCLK2Freq>
 8005d4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d4e:	e010      	b.n	8005d72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d50:	4b26      	ldr	r3, [pc, #152]	; (8005dec <UART_SetConfig+0x44c>)
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d54:	e00d      	b.n	8005d72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d56:	f7fe fe07 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8005d5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d5c:	e009      	b.n	8005d72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d64:	e005      	b.n	8005d72 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d70:	bf00      	nop
    }

    if (pclk != 0U)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d021      	beq.n	8005dbc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <UART_SetConfig+0x448>)
 8005d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d82:	461a      	mov	r2, r3
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	441a      	add	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b0f      	cmp	r3, #15
 8005da0:	d909      	bls.n	8005db6 <UART_SetConfig+0x416>
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d205      	bcs.n	8005db6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60da      	str	r2, [r3, #12]
 8005db4:	e002      	b.n	8005dbc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dd8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3730      	adds	r7, #48	; 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de6:	bf00      	nop
 8005de8:	08016488 	.word	0x08016488
 8005dec:	00f42400 	.word	0x00f42400

08005df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01a      	beq.n	8005f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eee:	d10a      	bne.n	8005f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	605a      	str	r2, [r3, #4]
  }
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f44:	f7fb f986 	bl	8001254 <HAL_GetTick>
 8005f48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d10e      	bne.n	8005f76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f832 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e028      	b.n	8005fc8 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d10e      	bne.n	8005fa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f81c 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e012      	b.n	8005fc8 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b09c      	sub	sp, #112	; 0x70
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe0:	e0a9      	b.n	8006136 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	f000 80a5 	beq.w	8006136 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fec:	f7fb f932 	bl	8001254 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d140      	bne.n	8006084 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006012:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006016:	667b      	str	r3, [r7, #100]	; 0x64
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006022:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006026:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800602e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	663b      	str	r3, [r7, #96]	; 0x60
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006054:	64ba      	str	r2, [r7, #72]	; 0x48
 8006056:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800605a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e5      	bne.n	8006034 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e069      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d051      	beq.n	8006136 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800609c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a0:	d149      	bne.n	8006136 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
 80060cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e6      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	613b      	str	r3, [r7, #16]
   return(result);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060fe:	623a      	str	r2, [r7, #32]
 8006100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	69f9      	ldr	r1, [r7, #28]
 8006104:	6a3a      	ldr	r2, [r7, #32]
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	61bb      	str	r3, [r7, #24]
   return(result);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e5      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e010      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4013      	ands	r3, r2
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	429a      	cmp	r2, r3
 8006144:	bf0c      	ite	eq
 8006146:	2301      	moveq	r3, #1
 8006148:	2300      	movne	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	429a      	cmp	r2, r3
 8006152:	f43f af46 	beq.w	8005fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3770      	adds	r7, #112	; 0x70
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_UARTEx_DisableFifoMode+0x16>
 8006172:	2302      	movs	r3, #2
 8006174:	e027      	b.n	80061c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2224      	movs	r2, #36	; 0x24
 8006182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e02d      	b.n	8006246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2224      	movs	r2, #36	; 0x24
 80061f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f850 	bl	80062cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006262:	2302      	movs	r3, #2
 8006264:	e02d      	b.n	80062c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2224      	movs	r2, #36	; 0x24
 8006272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f812 	bl	80062cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062ec:	e031      	b.n	8006352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ee:	2308      	movs	r3, #8
 80062f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062f2:	2308      	movs	r3, #8
 80062f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	0e5b      	lsrs	r3, r3, #25
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	0f5b      	lsrs	r3, r3, #29
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	7b3a      	ldrb	r2, [r7, #12]
 800631a:	4911      	ldr	r1, [pc, #68]	; (8006360 <UARTEx_SetNbDataToProcess+0x94>)
 800631c:	5c8a      	ldrb	r2, [r1, r2]
 800631e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006322:	7b3a      	ldrb	r2, [r7, #12]
 8006324:	490f      	ldr	r1, [pc, #60]	; (8006364 <UARTEx_SetNbDataToProcess+0x98>)
 8006326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006328:	fb93 f3f2 	sdiv	r3, r3, r2
 800632c:	b29a      	uxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	7b7a      	ldrb	r2, [r7, #13]
 8006338:	4909      	ldr	r1, [pc, #36]	; (8006360 <UARTEx_SetNbDataToProcess+0x94>)
 800633a:	5c8a      	ldrb	r2, [r1, r2]
 800633c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006340:	7b7a      	ldrb	r2, [r7, #13]
 8006342:	4908      	ldr	r1, [pc, #32]	; (8006364 <UARTEx_SetNbDataToProcess+0x98>)
 8006344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006346:	fb93 f3f2 	sdiv	r3, r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	080164a0 	.word	0x080164a0
 8006364:	080164a8 	.word	0x080164a8

08006368 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006378:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800637c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800639e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80063a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4013      	ands	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063cc:	b084      	sub	sp, #16
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	f107 0014 	add.w	r0, r7, #20
 80063da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	b004      	add	sp, #16
 800640c:	4770      	bx	lr
	...

08006410 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006410:	b480      	push	{r7}
 8006412:	b09d      	sub	sp, #116	; 0x74
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	78db      	ldrb	r3, [r3, #3]
 800643e:	2b03      	cmp	r3, #3
 8006440:	d81f      	bhi.n	8006482 <USB_ActivateEndpoint+0x72>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <USB_ActivateEndpoint+0x38>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006459 	.word	0x08006459
 800644c:	08006475 	.word	0x08006475
 8006450:	0800648b 	.word	0x0800648b
 8006454:	08006467 	.word	0x08006467
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006458:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800645c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006460:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006464:	e012      	b.n	800648c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006466:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800646a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800646e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006472:	e00b      	b.n	800648c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006474:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800647c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006480:	e004      	b.n	800648c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006488:	e000      	b.n	800648c <USB_ActivateEndpoint+0x7c>
      break;
 800648a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	441a      	add	r2, r3
 8006496:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800649a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	b21b      	sxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	b21a      	sxth	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b21b      	sxth	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	b21b      	sxth	r3, r3
 80064d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	441a      	add	r2, r3
 80064e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80064e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	7b1b      	ldrb	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 8178 	bne.w	80067f2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8084 	beq.w	8006614 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006516:	b29b      	uxth	r3, r3
 8006518:	461a      	mov	r2, r3
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	4413      	add	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	00da      	lsls	r2, r3, #3
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	88db      	ldrh	r3, [r3, #6]
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	b29b      	uxth	r3, r3
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	827b      	strh	r3, [r7, #18]
 800654e:	8a7b      	ldrh	r3, [r7, #18]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01b      	beq.n	8006590 <USB_ActivateEndpoint+0x180>
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	823b      	strh	r3, [r7, #16]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	8a3b      	ldrh	r3, [r7, #16]
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d020      	beq.n	80065da <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ae:	81bb      	strh	r3, [r7, #12]
 80065b0:	89bb      	ldrh	r3, [r7, #12]
 80065b2:	f083 0320 	eor.w	r3, r3, #32
 80065b6:	81bb      	strh	r3, [r7, #12]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	89bb      	ldrh	r3, [r7, #12]
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
 80065d8:	e2d5      	b.n	8006b86 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f0:	81fb      	strh	r3, [r7, #14]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	89fb      	ldrh	r3, [r7, #14]
 80065fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660e:	b29b      	uxth	r3, r3
 8006610:	8013      	strh	r3, [r2, #0]
 8006612:	e2b8      	b.n	8006b86 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	633b      	str	r3, [r7, #48]	; 0x30
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	4413      	add	r3, r2
 8006626:	633b      	str	r3, [r7, #48]	; 0x30
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	00da      	lsls	r2, r3, #3
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	4413      	add	r3, r2
 8006632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	88db      	ldrh	r3, [r3, #6]
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006652:	b29b      	uxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	4413      	add	r3, r2
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	00da      	lsls	r2, r3, #3
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	4413      	add	r3, r2
 8006666:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006676:	b29a      	uxth	r2, r3
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b3e      	cmp	r3, #62	; 0x3e
 8006682:	d91d      	bls.n	80066c0 <USB_ActivateEndpoint+0x2b0>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	66bb      	str	r3, [r7, #104]	; 0x68
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <USB_ActivateEndpoint+0x28e>
 8006698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800669a:	3b01      	subs	r3, #1
 800669c:	66bb      	str	r3, [r7, #104]	; 0x68
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	e026      	b.n	800670e <USB_ActivateEndpoint+0x2fe>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <USB_ActivateEndpoint+0x2ce>
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	801a      	strh	r2, [r3, #0]
 80066dc:	e017      	b.n	800670e <USB_ActivateEndpoint+0x2fe>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <USB_ActivateEndpoint+0x2e8>
 80066f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066f4:	3301      	adds	r3, #1
 80066f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006700:	b29b      	uxth	r3, r3
 8006702:	029b      	lsls	r3, r3, #10
 8006704:	b29b      	uxth	r3, r3
 8006706:	4313      	orrs	r3, r2
 8006708:	b29a      	uxth	r2, r3
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	847b      	strh	r3, [r7, #34]	; 0x22
 800671c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800671e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01b      	beq.n	800675e <USB_ActivateEndpoint+0x34e>
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	843b      	strh	r3, [r7, #32]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	8c3b      	ldrh	r3, [r7, #32]
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d124      	bne.n	80067b0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677c:	83bb      	strh	r3, [r7, #28]
 800677e:	8bbb      	ldrh	r3, [r7, #28]
 8006780:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006784:	83bb      	strh	r3, [r7, #28]
 8006786:	8bbb      	ldrh	r3, [r7, #28]
 8006788:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800678c:	83bb      	strh	r3, [r7, #28]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	8bbb      	ldrh	r3, [r7, #28]
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
 80067ae:	e1ea      	b.n	8006b86 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c6:	83fb      	strh	r3, [r7, #30]
 80067c8:	8bfb      	ldrh	r3, [r7, #30]
 80067ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067ce:	83fb      	strh	r3, [r7, #30]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	8bfb      	ldrh	r3, [r7, #30]
 80067dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8013      	strh	r3, [r2, #0]
 80067f0:	e1c9      	b.n	8006b86 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	78db      	ldrb	r3, [r3, #3]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d11e      	bne.n	8006838 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006810:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	441a      	add	r2, r3
 800681e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800682e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]
 8006836:	e01d      	b.n	8006874 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006884:	4413      	add	r3, r2
 8006886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	00da      	lsls	r2, r3, #3
 800688e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006890:	4413      	add	r3, r2
 8006892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006896:	65bb      	str	r3, [r7, #88]	; 0x58
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	891b      	ldrh	r3, [r3, #8]
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	b29b      	uxth	r3, r3
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	657b      	str	r3, [r7, #84]	; 0x54
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b8:	4413      	add	r3, r2
 80068ba:	657b      	str	r3, [r7, #84]	; 0x54
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	00da      	lsls	r2, r3, #3
 80068c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c4:	4413      	add	r3, r2
 80068c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	895b      	ldrh	r3, [r3, #10]
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 8093 	bne.w	8006a0c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80068f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01b      	beq.n	800693a <USB_ActivateEndpoint+0x52a>
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29b      	uxth	r3, r3
 8006910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006918:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	441a      	add	r2, r3
 8006924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006936:	b29b      	uxth	r3, r3
 8006938:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006948:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01b      	beq.n	800698a <USB_ActivateEndpoint+0x57a>
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	877b      	strh	r3, [r7, #58]	; 0x3a
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80069a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80069aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80069f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	8013      	strh	r3, [r2, #0]
 8006a0a:	e0bc      	b.n	8006b86 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006a1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01d      	beq.n	8006a64 <USB_ActivateEndpoint+0x654>
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01d      	beq.n	8006abc <USB_ActivateEndpoint+0x6ac>
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	78db      	ldrb	r3, [r3, #3]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d024      	beq.n	8006b0e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ada:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ade:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ae2:	f083 0320 	eor.w	r3, r3, #32
 8006ae6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	8013      	strh	r3, [r2, #0]
 8006b0c:	e01d      	b.n	8006b4a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006b86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3774      	adds	r7, #116	; 0x74
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop

08006b98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b08d      	sub	sp, #52	; 0x34
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	7b1b      	ldrb	r3, [r3, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f040 808e 	bne.w	8006cc8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d044      	beq.n	8006c3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	81bb      	strh	r3, [r7, #12]
 8006bc2:	89bb      	ldrh	r3, [r7, #12]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01b      	beq.n	8006c04 <USB_DeactivateEndpoint+0x6c>
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	817b      	strh	r3, [r7, #10]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	897b      	ldrh	r3, [r7, #10]
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c1a:	813b      	strh	r3, [r7, #8]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	893b      	ldrh	r3, [r7, #8]
 8006c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	8013      	strh	r3, [r2, #0]
 8006c3c:	e192      	b.n	8006f64 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	827b      	strh	r3, [r7, #18]
 8006c4c:	8a7b      	ldrh	r3, [r7, #18]
 8006c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01b      	beq.n	8006c8e <USB_DeactivateEndpoint+0xf6>
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6c:	823b      	strh	r3, [r7, #16]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	441a      	add	r2, r3
 8006c78:	8a3b      	ldrh	r3, [r7, #16]
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	81fb      	strh	r3, [r7, #14]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	441a      	add	r2, r3
 8006cb0:	89fb      	ldrh	r3, [r7, #14]
 8006cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	8013      	strh	r3, [r2, #0]
 8006cc6:	e14d      	b.n	8006f64 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 80a5 	bne.w	8006e1c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	843b      	strh	r3, [r7, #32]
 8006ce0:	8c3b      	ldrh	r3, [r7, #32]
 8006ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01b      	beq.n	8006d22 <USB_DeactivateEndpoint+0x18a>
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	83fb      	strh	r3, [r7, #30]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	441a      	add	r2, r3
 8006d0c:	8bfb      	ldrh	r3, [r7, #30]
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	83bb      	strh	r3, [r7, #28]
 8006d30:	8bbb      	ldrh	r3, [r7, #28]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01b      	beq.n	8006d72 <USB_DeactivateEndpoint+0x1da>
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	837b      	strh	r3, [r7, #26]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	8b7b      	ldrh	r3, [r7, #26]
 8006d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	833b      	strh	r3, [r7, #24]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	8b3b      	ldrh	r3, [r7, #24]
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc0:	82fb      	strh	r3, [r7, #22]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8afb      	ldrh	r3, [r7, #22]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df8:	82bb      	strh	r3, [r7, #20]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	8abb      	ldrh	r3, [r7, #20]
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]
 8006e1a:	e0a3      	b.n	8006f64 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01b      	beq.n	8006e6c <USB_DeactivateEndpoint+0x2d4>
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	441a      	add	r2, r3
 8006e56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01b      	beq.n	8006ebc <USB_DeactivateEndpoint+0x324>
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	441a      	add	r2, r3
 8006ea6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	441a      	add	r2, r3
 8006f4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3734      	adds	r7, #52	; 0x34
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b0c2      	sub	sp, #264	; 0x108
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f80:	6018      	str	r0, [r3, #0]
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	f040 86b7 	bne.w	8007d0c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d908      	bls.n	8006fcc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fca:	e007      	b.n	8006fdc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	7b1b      	ldrb	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d13a      	bne.n	8007062 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6959      	ldr	r1, [r3, #20]
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	88da      	ldrh	r2, [r3, #6]
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	b29b      	uxth	r3, r3
 800700a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800700e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	f001 fc98 	bl	8008948 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4413      	add	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	00da      	lsls	r2, r3, #3
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	4413      	add	r3, r2
 800704e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	f000 be1f 	b.w	8007ca0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	78db      	ldrb	r3, [r3, #3]
 800706e:	2b02      	cmp	r3, #2
 8007070:	f040 8462 	bne.w	8007938 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	f240 83df 	bls.w	8007850 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80070bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	441a      	add	r2, r3
 80070d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80070da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6a1a      	ldr	r2, [r3, #32]
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800710c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 81c7 	beq.w	80074c2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	633b      	str	r3, [r7, #48]	; 0x30
 8007140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d177      	bne.n	8007240 <USB_EPStartXfer+0x2ce>
 8007150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	4413      	add	r3, r2
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	00da      	lsls	r2, r3, #3
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	4413      	add	r3, r2
 8007186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007196:	b29a      	uxth	r2, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a0:	2b3e      	cmp	r3, #62	; 0x3e
 80071a2:	d921      	bls.n	80071e8 <USB_EPStartXfer+0x276>
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <USB_EPStartXfer+0x252>
 80071ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071be:	3b01      	subs	r3, #1
 80071c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	029b      	lsls	r3, r3, #10
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4313      	orrs	r3, r2
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	e050      	b.n	800728a <USB_EPStartXfer+0x318>
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <USB_EPStartXfer+0x294>
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e041      	b.n	800728a <USB_EPStartXfer+0x318>
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720a:	085b      	lsrs	r3, r3, #1
 800720c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <USB_EPStartXfer+0x2b4>
 800721c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007220:	3301      	adds	r3, #1
 8007222:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007230:	b29b      	uxth	r3, r3
 8007232:	029b      	lsls	r3, r3, #10
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	e024      	b.n	800728a <USB_EPStartXfer+0x318>
 8007240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d11c      	bne.n	800728a <USB_EPStartXfer+0x318>
 8007250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	4413      	add	r3, r2
 8007266:	633b      	str	r3, [r7, #48]	; 0x30
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00da      	lsls	r2, r3, #3
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	4413      	add	r3, r2
 800727a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007284:	b29a      	uxth	r2, r3
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800728a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	895b      	ldrh	r3, [r3, #10]
 8007296:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800729a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6959      	ldr	r1, [r3, #20]
 80072a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072b8:	6800      	ldr	r0, [r0, #0]
 80072ba:	f001 fb45 	bl	8008948 <USB_WritePMA>
            ep->xfer_buff += len;
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ce:	441a      	add	r2, r3
 80072d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d90f      	bls.n	8007318 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80072f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007308:	1ad2      	subs	r2, r2, r3
 800730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	621a      	str	r2, [r3, #32]
 8007316:	e00e      	b.n	8007336 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2200      	movs	r2, #0
 8007334:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	785b      	ldrb	r3, [r3, #1]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d177      	bne.n	8007436 <USB_EPStartXfer+0x4c4>
 8007346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007360:	b29b      	uxth	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	4413      	add	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	00da      	lsls	r2, r3, #3
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	4413      	add	r3, r2
 800737c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	b29b      	uxth	r3, r3
 8007388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800738c:	b29a      	uxth	r2, r3
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007396:	2b3e      	cmp	r3, #62	; 0x3e
 8007398:	d921      	bls.n	80073de <USB_EPStartXfer+0x46c>
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <USB_EPStartXfer+0x448>
 80073b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073b4:	3b01      	subs	r3, #1
 80073b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	029b      	lsls	r3, r3, #10
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4313      	orrs	r3, r2
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	e056      	b.n	800748c <USB_EPStartXfer+0x51a>
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <USB_EPStartXfer+0x48a>
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	e047      	b.n	800748c <USB_EPStartXfer+0x51a>
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <USB_EPStartXfer+0x4aa>
 8007412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007416:	3301      	adds	r3, #1
 8007418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007426:	b29b      	uxth	r3, r3
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	b29b      	uxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e02a      	b.n	800748c <USB_EPStartXfer+0x51a>
 8007436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d122      	bne.n	800748c <USB_EPStartXfer+0x51a>
 8007446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007460:	b29b      	uxth	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	4413      	add	r3, r2
 8007468:	623b      	str	r3, [r7, #32]
 800746a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	00da      	lsls	r2, r3, #3
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	4413      	add	r3, r2
 800747c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007486:	b29a      	uxth	r2, r3
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800748c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	891b      	ldrh	r3, [r3, #8]
 8007498:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800749c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6959      	ldr	r1, [r3, #20]
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	f001 fa44 	bl	8008948 <USB_WritePMA>
 80074c0:	e3ee      	b.n	8007ca0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d177      	bne.n	80075c2 <USB_EPStartXfer+0x650>
 80074d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80074de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f2:	4413      	add	r3, r2
 80074f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	00da      	lsls	r2, r3, #3
 8007504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007506:	4413      	add	r3, r2
 8007508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800750c:	647b      	str	r3, [r7, #68]	; 0x44
 800750e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007518:	b29a      	uxth	r2, r3
 800751a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751c:	801a      	strh	r2, [r3, #0]
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007522:	2b3e      	cmp	r3, #62	; 0x3e
 8007524:	d921      	bls.n	800756a <USB_EPStartXfer+0x5f8>
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <USB_EPStartXfer+0x5d4>
 800753c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007540:	3b01      	subs	r3, #1
 8007542:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29a      	uxth	r2, r3
 800754c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007550:	b29b      	uxth	r3, r3
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	b29b      	uxth	r3, r3
 8007556:	4313      	orrs	r3, r2
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007562:	b29a      	uxth	r2, r3
 8007564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	e056      	b.n	8007618 <USB_EPStartXfer+0x6a6>
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <USB_EPStartXfer+0x616>
 8007572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007580:	b29a      	uxth	r2, r3
 8007582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e047      	b.n	8007618 <USB_EPStartXfer+0x6a6>
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758c:	085b      	lsrs	r3, r3, #1
 800758e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <USB_EPStartXfer+0x636>
 800759e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	029b      	lsls	r3, r3, #10
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	4313      	orrs	r3, r2
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	e02a      	b.n	8007618 <USB_EPStartXfer+0x6a6>
 80075c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d122      	bne.n	8007618 <USB_EPStartXfer+0x6a6>
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	653b      	str	r3, [r7, #80]	; 0x50
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	461a      	mov	r2, r3
 80075f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f2:	4413      	add	r3, r2
 80075f4:	653b      	str	r3, [r7, #80]	; 0x50
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	00da      	lsls	r2, r3, #3
 8007604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007606:	4413      	add	r3, r2
 8007608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800760c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007612:	b29a      	uxth	r2, r3
 8007614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007616:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	891b      	ldrh	r3, [r3, #8]
 8007624:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6959      	ldr	r1, [r3, #20]
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007638:	b29b      	uxth	r3, r3
 800763a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800763e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007642:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007646:	6800      	ldr	r0, [r0, #0]
 8007648:	f001 f97e 	bl	8008948 <USB_WritePMA>
            ep->xfer_buff += len;
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695a      	ldr	r2, [r3, #20]
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	441a      	add	r2, r3
 800765e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800766a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6a1a      	ldr	r2, [r3, #32]
 8007676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	429a      	cmp	r2, r3
 8007684:	d90f      	bls.n	80076a6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a1a      	ldr	r2, [r3, #32]
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	621a      	str	r2, [r3, #32]
 80076a4:	e00e      	b.n	80076c4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2200      	movs	r2, #0
 80076c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	643b      	str	r3, [r7, #64]	; 0x40
 80076d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d177      	bne.n	80077d0 <USB_EPStartXfer+0x85e>
 80076e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	4413      	add	r3, r2
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	00da      	lsls	r2, r3, #3
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	4413      	add	r3, r2
 8007716:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007726:	b29a      	uxth	r2, r3
 8007728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007730:	2b3e      	cmp	r3, #62	; 0x3e
 8007732:	d921      	bls.n	8007778 <USB_EPStartXfer+0x806>
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <USB_EPStartXfer+0x7e2>
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774e:	3b01      	subs	r3, #1
 8007750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29a      	uxth	r2, r3
 800775a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775e:	b29b      	uxth	r3, r3
 8007760:	029b      	lsls	r3, r3, #10
 8007762:	b29b      	uxth	r3, r3
 8007764:	4313      	orrs	r3, r2
 8007766:	b29b      	uxth	r3, r3
 8007768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007770:	b29a      	uxth	r2, r3
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	e050      	b.n	800781a <USB_EPStartXfer+0x8a8>
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <USB_EPStartXfer+0x824>
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778e:	b29a      	uxth	r2, r3
 8007790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	e041      	b.n	800781a <USB_EPStartXfer+0x8a8>
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <USB_EPStartXfer+0x844>
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b0:	3301      	adds	r3, #1
 80077b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	029b      	lsls	r3, r3, #10
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	4313      	orrs	r3, r2
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e024      	b.n	800781a <USB_EPStartXfer+0x8a8>
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d11c      	bne.n	800781a <USB_EPStartXfer+0x8a8>
 80077e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f4:	4413      	add	r3, r2
 80077f6:	643b      	str	r3, [r7, #64]	; 0x40
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	00da      	lsls	r2, r3, #3
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	4413      	add	r3, r2
 800780a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007814:	b29a      	uxth	r2, r3
 8007816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007818:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	895b      	ldrh	r3, [r3, #10]
 8007826:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	b29b      	uxth	r3, r3
 800783c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007840:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007844:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007848:	6800      	ldr	r0, [r0, #0]
 800784a:	f001 f87d 	bl	8008948 <USB_WritePMA>
 800784e:	e227      	b.n	8007ca0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800788a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	441a      	add	r2, r3
 80078a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078dc:	4413      	add	r3, r2
 80078de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	00da      	lsls	r2, r3, #3
 80078ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007900:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	891b      	ldrh	r3, [r3, #8]
 800790e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6959      	ldr	r1, [r3, #20]
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007922:	b29b      	uxth	r3, r3
 8007924:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007928:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800792c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007930:	6800      	ldr	r0, [r0, #0]
 8007932:	f001 f809 	bl	8008948 <USB_WritePMA>
 8007936:	e1b3      	b.n	8007ca0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6a1a      	ldr	r2, [r3, #32]
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007948:	1ad2      	subs	r2, r2, r3
 800794a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80c6 	beq.w	8007b0a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800797e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	673b      	str	r3, [r7, #112]	; 0x70
 800798a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d177      	bne.n	8007a8a <USB_EPStartXfer+0xb18>
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80079a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079ba:	4413      	add	r3, r2
 80079bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	00da      	lsls	r2, r3, #3
 80079cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079ce:	4413      	add	r3, r2
 80079d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079d4:	667b      	str	r3, [r7, #100]	; 0x64
 80079d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	2b3e      	cmp	r3, #62	; 0x3e
 80079ec:	d921      	bls.n	8007a32 <USB_EPStartXfer+0xac0>
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <USB_EPStartXfer+0xa9c>
 8007a04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	029b      	lsls	r3, r3, #10
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	e050      	b.n	8007ad4 <USB_EPStartXfer+0xb62>
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <USB_EPStartXfer+0xade>
 8007a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	e041      	b.n	8007ad4 <USB_EPStartXfer+0xb62>
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d004      	beq.n	8007a70 <USB_EPStartXfer+0xafe>
 8007a66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	4313      	orrs	r3, r2
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a86:	801a      	strh	r2, [r3, #0]
 8007a88:	e024      	b.n	8007ad4 <USB_EPStartXfer+0xb62>
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d11c      	bne.n	8007ad4 <USB_EPStartXfer+0xb62>
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aae:	4413      	add	r3, r2
 8007ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	00da      	lsls	r2, r3, #3
 8007ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	895b      	ldrh	r3, [r3, #10]
 8007ae0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6959      	ldr	r1, [r3, #20]
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007afa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007afe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b02:	6800      	ldr	r0, [r0, #0]
 8007b04:	f000 ff20 	bl	8008948 <USB_WritePMA>
 8007b08:	e0ca      	b.n	8007ca0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d177      	bne.n	8007c0a <USB_EPStartXfer+0xc98>
 8007b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b3a:	4413      	add	r3, r2
 8007b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	00da      	lsls	r2, r3, #3
 8007b4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b4e:	4413      	add	r3, r2
 8007b50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b6c:	d921      	bls.n	8007bb2 <USB_EPStartXfer+0xc40>
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <USB_EPStartXfer+0xc1c>
 8007b84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	029b      	lsls	r3, r3, #10
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e05c      	b.n	8007c6c <USB_EPStartXfer+0xcfa>
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <USB_EPStartXfer+0xc5e>
 8007bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bcc:	801a      	strh	r2, [r3, #0]
 8007bce:	e04d      	b.n	8007c6c <USB_EPStartXfer+0xcfa>
 8007bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <USB_EPStartXfer+0xc7e>
 8007be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bea:	3301      	adds	r3, #1
 8007bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	029b      	lsls	r3, r3, #10
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	4313      	orrs	r3, r2
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c06:	801a      	strh	r2, [r3, #0]
 8007c08:	e030      	b.n	8007c6c <USB_EPStartXfer+0xcfa>
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d128      	bne.n	8007c6c <USB_EPStartXfer+0xcfa>
 8007c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c3e:	4413      	add	r3, r2
 8007c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	00da      	lsls	r2, r3, #3
 8007c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c56:	4413      	add	r3, r2
 8007c58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	891b      	ldrh	r3, [r3, #8]
 8007c78:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6959      	ldr	r1, [r3, #20]
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c92:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c96:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	f000 fe54 	bl	8008948 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc6:	817b      	strh	r3, [r7, #10]
 8007cc8:	897b      	ldrh	r3, [r7, #10]
 8007cca:	f083 0310 	eor.w	r3, r3, #16
 8007cce:	817b      	strh	r3, [r7, #10]
 8007cd0:	897b      	ldrh	r3, [r7, #10]
 8007cd2:	f083 0320 	eor.w	r3, r3, #32
 8007cd6:	817b      	strh	r3, [r7, #10]
 8007cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	441a      	add	r2, r3
 8007cf2:	897b      	ldrh	r3, [r7, #10]
 8007cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	8013      	strh	r3, [r2, #0]
 8007d08:	f000 bcde 	b.w	80086c8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	7b1b      	ldrb	r3, [r3, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 80bb 	bne.w	8007e94 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d917      	bls.n	8007d6a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	619a      	str	r2, [r3, #24]
 8007d68:	e00e      	b.n	8007d88 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2200      	movs	r2, #0
 8007d86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dac:	4413      	add	r3, r2
 8007dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	00da      	lsls	r2, r3, #3
 8007dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de6:	2b3e      	cmp	r3, #62	; 0x3e
 8007de8:	d924      	bls.n	8007e34 <USB_EPStartXfer+0xec2>
 8007dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <USB_EPStartXfer+0xe98>
 8007e00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e04:	3b01      	subs	r3, #1
 8007e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	029b      	lsls	r3, r3, #10
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e2e:	801a      	strh	r2, [r3, #0]
 8007e30:	f000 bc10 	b.w	8008654 <USB_EPStartXfer+0x16e2>
 8007e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10c      	bne.n	8007e56 <USB_EPStartXfer+0xee4>
 8007e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	e3fe      	b.n	8008654 <USB_EPStartXfer+0x16e2>
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <USB_EPStartXfer+0xf04>
 8007e6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e70:	3301      	adds	r3, #1
 8007e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	029b      	lsls	r3, r3, #10
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e90:	801a      	strh	r2, [r3, #0]
 8007e92:	e3df      	b.n	8008654 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	78db      	ldrb	r3, [r3, #3]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	f040 8218 	bne.w	80082d6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f040 809d 	bne.w	8007ff2 <USB_EPStartXfer+0x1080>
 8007eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007edc:	4413      	add	r3, r2
 8007ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	00da      	lsls	r2, r3, #3
 8007ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007f20:	d92b      	bls.n	8007f7a <USB_EPStartXfer+0x1008>
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <USB_EPStartXfer+0xfe0>
 8007f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	029b      	lsls	r3, r3, #10
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	4313      	orrs	r3, r2
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	e070      	b.n	800805c <USB_EPStartXfer+0x10ea>
 8007f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10c      	bne.n	8007fa4 <USB_EPStartXfer+0x1032>
 8007f8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	e05b      	b.n	800805c <USB_EPStartXfer+0x10ea>
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <USB_EPStartXfer+0x1062>
 8007fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fce:	3301      	adds	r3, #1
 8007fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	029b      	lsls	r3, r3, #10
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fee:	801a      	strh	r2, [r3, #0]
 8007ff0:	e034      	b.n	800805c <USB_EPStartXfer+0x10ea>
 8007ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d12c      	bne.n	800805c <USB_EPStartXfer+0x10ea>
 8008002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800801e:	b29b      	uxth	r3, r3
 8008020:	461a      	mov	r2, r3
 8008022:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008026:	4413      	add	r3, r2
 8008028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800802c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	00da      	lsls	r2, r3, #3
 800803a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800803e:	4413      	add	r3, r2
 8008040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f040 809d 	bne.w	80081b6 <USB_EPStartXfer+0x1244>
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800808a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008098:	b29b      	uxth	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080a0:	4413      	add	r3, r2
 80080a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	00da      	lsls	r2, r3, #3
 80080b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b8:	4413      	add	r3, r2
 80080ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080d4:	801a      	strh	r2, [r3, #0]
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b3e      	cmp	r3, #62	; 0x3e
 80080e4:	d92b      	bls.n	800813e <USB_EPStartXfer+0x11cc>
 80080e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f003 031f 	and.w	r3, r3, #31
 8008108:	2b00      	cmp	r3, #0
 800810a:	d104      	bne.n	8008116 <USB_EPStartXfer+0x11a4>
 800810c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008110:	3b01      	subs	r3, #1
 8008112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008116:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29a      	uxth	r2, r3
 800811e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008122:	b29b      	uxth	r3, r3
 8008124:	029b      	lsls	r3, r3, #10
 8008126:	b29b      	uxth	r3, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	b29b      	uxth	r3, r3
 800812c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008134:	b29a      	uxth	r2, r3
 8008136:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	e069      	b.n	8008212 <USB_EPStartXfer+0x12a0>
 800813e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10c      	bne.n	8008168 <USB_EPStartXfer+0x11f6>
 800814e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29b      	uxth	r3, r3
 8008156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815e:	b29a      	uxth	r2, r3
 8008160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	e054      	b.n	8008212 <USB_EPStartXfer+0x12a0>
 8008168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800817a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <USB_EPStartXfer+0x1226>
 800818e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008192:	3301      	adds	r3, #1
 8008194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	029b      	lsls	r3, r3, #10
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	e02d      	b.n	8008212 <USB_EPStartXfer+0x12a0>
 80081b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d125      	bne.n	8008212 <USB_EPStartXfer+0x12a0>
 80081c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081dc:	4413      	add	r3, r2
 80081de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80081e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	00da      	lsls	r2, r3, #3
 80081f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081f4:	4413      	add	r3, r2
 80081f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	b29a      	uxth	r2, r3
 800820c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008210:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 8218 	beq.w	8008654 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008244:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <USB_EPStartXfer+0x12ea>
 8008250:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10d      	bne.n	8008278 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800825c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 81f5 	bne.w	8008654 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800826a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 81ee 	bne.w	8008654 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	441a      	add	r2, r3
 80082bc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80082c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	8013      	strh	r3, [r2, #0]
 80082d4:	e1be      	b.n	8008654 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	78db      	ldrb	r3, [r3, #3]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	f040 81b4 	bne.w	8008650 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	429a      	cmp	r2, r3
 8008302:	d917      	bls.n	8008334 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	619a      	str	r2, [r3, #24]
 8008332:	e00e      	b.n	8008352 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	785b      	ldrb	r3, [r3, #1]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f040 8085 	bne.w	800846e <USB_EPStartXfer+0x14fc>
 8008364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008380:	b29b      	uxth	r3, r3
 8008382:	461a      	mov	r2, r3
 8008384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008388:	4413      	add	r3, r2
 800838a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800838e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	00da      	lsls	r2, r3, #3
 800839c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083a0:	4413      	add	r3, r2
 80083a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083bc:	801a      	strh	r2, [r3, #0]
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c2:	2b3e      	cmp	r3, #62	; 0x3e
 80083c4:	d923      	bls.n	800840e <USB_EPStartXfer+0x149c>
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d4:	f003 031f 	and.w	r3, r3, #31
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <USB_EPStartXfer+0x1474>
 80083dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e0:	3b01      	subs	r3, #1
 80083e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	4313      	orrs	r3, r2
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008404:	b29a      	uxth	r2, r3
 8008406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	e060      	b.n	80084d0 <USB_EPStartXfer+0x155e>
 800840e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10c      	bne.n	8008430 <USB_EPStartXfer+0x14be>
 8008416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008426:	b29a      	uxth	r2, r3
 8008428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800842c:	801a      	strh	r2, [r3, #0]
 800842e:	e04f      	b.n	80084d0 <USB_EPStartXfer+0x155e>
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008434:	085b      	lsrs	r3, r3, #1
 8008436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USB_EPStartXfer+0x14de>
 8008446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800844a:	3301      	adds	r3, #1
 800844c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29a      	uxth	r2, r3
 8008458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800845c:	b29b      	uxth	r3, r3
 800845e:	029b      	lsls	r3, r3, #10
 8008460:	b29b      	uxth	r3, r3
 8008462:	4313      	orrs	r3, r2
 8008464:	b29a      	uxth	r2, r3
 8008466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	e030      	b.n	80084d0 <USB_EPStartXfer+0x155e>
 800846e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d128      	bne.n	80084d0 <USB_EPStartXfer+0x155e>
 800847e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800848c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849a:	b29b      	uxth	r3, r3
 800849c:	461a      	mov	r2, r3
 800849e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084a2:	4413      	add	r3, r2
 80084a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	00da      	lsls	r2, r3, #3
 80084b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084ba:	4413      	add	r3, r2
 80084bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084ce:	801a      	strh	r2, [r3, #0]
 80084d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	785b      	ldrb	r3, [r3, #1]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 8085 	bne.w	80085fa <USB_EPStartXfer+0x1688>
 80084f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850c:	b29b      	uxth	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008514:	4413      	add	r3, r2
 8008516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800851a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	00da      	lsls	r2, r3, #3
 8008528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800852c:	4413      	add	r3, r2
 800852e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008542:	b29a      	uxth	r2, r3
 8008544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854e:	2b3e      	cmp	r3, #62	; 0x3e
 8008550:	d923      	bls.n	800859a <USB_EPStartXfer+0x1628>
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008556:	095b      	lsrs	r3, r3, #5
 8008558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800855c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <USB_EPStartXfer+0x1600>
 8008568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800856c:	3b01      	subs	r3, #1
 800856e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29a      	uxth	r2, r3
 800857a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800857e:	b29b      	uxth	r3, r3
 8008580:	029b      	lsls	r3, r3, #10
 8008582:	b29b      	uxth	r3, r3
 8008584:	4313      	orrs	r3, r2
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e05c      	b.n	8008654 <USB_EPStartXfer+0x16e2>
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10c      	bne.n	80085bc <USB_EPStartXfer+0x164a>
 80085a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085b8:	801a      	strh	r2, [r3, #0]
 80085ba:	e04b      	b.n	8008654 <USB_EPStartXfer+0x16e2>
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d004      	beq.n	80085dc <USB_EPStartXfer+0x166a>
 80085d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085d6:	3301      	adds	r3, #1
 80085d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	e02c      	b.n	8008654 <USB_EPStartXfer+0x16e2>
 80085fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d124      	bne.n	8008654 <USB_EPStartXfer+0x16e2>
 800860a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008618:	b29b      	uxth	r3, r3
 800861a:	461a      	mov	r2, r3
 800861c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008620:	4413      	add	r3, r2
 8008622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	00da      	lsls	r2, r3, #3
 8008634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008638:	4413      	add	r3, r2
 800863a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800863e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008646:	b29a      	uxth	r2, r3
 8008648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800864c:	801a      	strh	r2, [r3, #0]
 800864e:	e001      	b.n	8008654 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e03a      	b.n	80086ca <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29b      	uxth	r3, r3
 8008672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800867e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008682:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008686:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800868a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800868e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008692:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	441a      	add	r2, r3
 80086b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80086b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d020      	beq.n	8008728 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086fc:	81bb      	strh	r3, [r7, #12]
 80086fe:	89bb      	ldrh	r3, [r7, #12]
 8008700:	f083 0310 	eor.w	r3, r3, #16
 8008704:	81bb      	strh	r3, [r7, #12]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	441a      	add	r2, r3
 8008710:	89bb      	ldrh	r3, [r7, #12]
 8008712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800871a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800871e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008722:	b29b      	uxth	r3, r3
 8008724:	8013      	strh	r3, [r2, #0]
 8008726:	e01f      	b.n	8008768 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29b      	uxth	r3, r3
 8008736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	81fb      	strh	r3, [r7, #14]
 8008740:	89fb      	ldrh	r3, [r7, #14]
 8008742:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008746:	81fb      	strh	r3, [r7, #14]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	441a      	add	r2, r3
 8008752:	89fb      	ldrh	r3, [r7, #14]
 8008754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800875c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008764:	b29b      	uxth	r3, r3
 8008766:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	7b1b      	ldrb	r3, [r3, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 809d 	bne.w	80088c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d04c      	beq.n	800882c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	823b      	strh	r3, [r7, #16]
 80087a0:	8a3b      	ldrh	r3, [r7, #16]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d01b      	beq.n	80087e2 <USB_EPClearStall+0x6c>
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c0:	81fb      	strh	r3, [r7, #14]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	441a      	add	r2, r3
 80087cc:	89fb      	ldrh	r3, [r7, #14]
 80087ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087de:	b29b      	uxth	r3, r3
 80087e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	78db      	ldrb	r3, [r3, #3]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d06c      	beq.n	80088c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008800:	81bb      	strh	r3, [r7, #12]
 8008802:	89bb      	ldrh	r3, [r7, #12]
 8008804:	f083 0320 	eor.w	r3, r3, #32
 8008808:	81bb      	strh	r3, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	441a      	add	r2, r3
 8008814:	89bb      	ldrh	r3, [r7, #12]
 8008816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800881a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008826:	b29b      	uxth	r3, r3
 8008828:	8013      	strh	r3, [r2, #0]
 800882a:	e04b      	b.n	80088c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	82fb      	strh	r3, [r7, #22]
 800883a:	8afb      	ldrh	r3, [r7, #22]
 800883c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01b      	beq.n	800887c <USB_EPClearStall+0x106>
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	82bb      	strh	r3, [r7, #20]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	441a      	add	r2, r3
 8008866:	8abb      	ldrh	r3, [r7, #20]
 8008868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800886c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008878:	b29b      	uxth	r3, r3
 800887a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800888e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008892:	827b      	strh	r3, [r7, #18]
 8008894:	8a7b      	ldrh	r3, [r7, #18]
 8008896:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800889a:	827b      	strh	r3, [r7, #18]
 800889c:	8a7b      	ldrh	r3, [r7, #18]
 800889e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088a2:	827b      	strh	r3, [r7, #18]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	8a7b      	ldrh	r3, [r7, #18]
 80088b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2280      	movs	r2, #128	; 0x80
 80088e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008908:	b29b      	uxth	r3, r3
 800890a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008936:	b29b      	uxth	r3, r3
 8008938:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008948:	b480      	push	{r7}
 800894a:	b08b      	sub	sp, #44	; 0x2c
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4611      	mov	r1, r2
 8008954:	461a      	mov	r2, r3
 8008956:	460b      	mov	r3, r1
 8008958:	80fb      	strh	r3, [r7, #6]
 800895a:	4613      	mov	r3, r2
 800895c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800895e:	88bb      	ldrh	r3, [r7, #4]
 8008960:	3301      	adds	r3, #1
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008978:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
 800897e:	e01b      	b.n	80089b8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3301      	adds	r3, #1
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	b21a      	sxth	r2, r3
 8008990:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008994:	4313      	orrs	r3, r2
 8008996:	b21b      	sxth	r3, r3
 8008998:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	8a7a      	ldrh	r2, [r7, #18]
 800899e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	3302      	adds	r3, #2
 80089a4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	3301      	adds	r3, #1
 80089aa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	3301      	adds	r3, #1
 80089b0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	3b01      	subs	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e0      	bne.n	8008980 <USB_WritePMA+0x38>
  }
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	372c      	adds	r7, #44	; 0x2c
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b08b      	sub	sp, #44	; 0x2c
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4611      	mov	r1, r2
 80089d8:	461a      	mov	r2, r3
 80089da:	460b      	mov	r3, r1
 80089dc:	80fb      	strh	r3, [r7, #6]
 80089de:	4613      	mov	r3, r2
 80089e0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80089e2:	88bb      	ldrh	r3, [r7, #4]
 80089e4:	085b      	lsrs	r3, r3, #1
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
 8008a02:	e018      	b.n	8008a36 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	3302      	adds	r3, #2
 8008a10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	3b01      	subs	r3, #1
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e3      	bne.n	8008a04 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008a3c:	88bb      	ldrh	r3, [r7, #4]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	701a      	strb	r2, [r3, #0]
  }
}
 8008a58:	bf00      	nop
 8008a5a:	372c      	adds	r7, #44	; 0x2c
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a74:	f002 fc5e 	bl	800b334 <USBD_static_malloc>
 8008a78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	32b0      	adds	r2, #176	; 0xb0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a90:	2302      	movs	r3, #2
 8008a92:	e0d4      	b.n	8008c3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008a94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008a98:	2100      	movs	r1, #0
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f00c ff70 	bl	8015980 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32b0      	adds	r2, #176	; 0xb0
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	32b0      	adds	r2, #176	; 0xb0
 8008aba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7c1b      	ldrb	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d138      	bne.n	8008b3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008acc:	4b5e      	ldr	r3, [pc, #376]	; (8008c48 <USBD_CDC_Init+0x1e4>)
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f002 fad1 	bl	800b07e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008adc:	4b5a      	ldr	r3, [pc, #360]	; (8008c48 <USBD_CDC_Init+0x1e4>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	f003 020f 	and.w	r2, r3, #15
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	3324      	adds	r3, #36	; 0x24
 8008af2:	2201      	movs	r2, #1
 8008af4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008af6:	4b55      	ldr	r3, [pc, #340]	; (8008c4c <USBD_CDC_Init+0x1e8>)
 8008af8:	7819      	ldrb	r1, [r3, #0]
 8008afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008afe:	2202      	movs	r2, #2
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f002 fabc 	bl	800b07e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b06:	4b51      	ldr	r3, [pc, #324]	; (8008c4c <USBD_CDC_Init+0x1e8>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f003 020f 	and.w	r2, r3, #15
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b1e:	2201      	movs	r2, #1
 8008b20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b22:	4b4b      	ldr	r3, [pc, #300]	; (8008c50 <USBD_CDC_Init+0x1ec>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f003 020f 	and.w	r2, r3, #15
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	3326      	adds	r3, #38	; 0x26
 8008b38:	2210      	movs	r2, #16
 8008b3a:	801a      	strh	r2, [r3, #0]
 8008b3c:	e035      	b.n	8008baa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b3e:	4b42      	ldr	r3, [pc, #264]	; (8008c48 <USBD_CDC_Init+0x1e4>)
 8008b40:	7819      	ldrb	r1, [r3, #0]
 8008b42:	2340      	movs	r3, #64	; 0x40
 8008b44:	2202      	movs	r2, #2
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f002 fa99 	bl	800b07e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b4c:	4b3e      	ldr	r3, [pc, #248]	; (8008c48 <USBD_CDC_Init+0x1e4>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	f003 020f 	and.w	r2, r3, #15
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	440b      	add	r3, r1
 8008b60:	3324      	adds	r3, #36	; 0x24
 8008b62:	2201      	movs	r2, #1
 8008b64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b66:	4b39      	ldr	r3, [pc, #228]	; (8008c4c <USBD_CDC_Init+0x1e8>)
 8008b68:	7819      	ldrb	r1, [r3, #0]
 8008b6a:	2340      	movs	r3, #64	; 0x40
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f002 fa85 	bl	800b07e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b74:	4b35      	ldr	r3, [pc, #212]	; (8008c4c <USBD_CDC_Init+0x1e8>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f003 020f 	and.w	r2, r3, #15
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b90:	4b2f      	ldr	r3, [pc, #188]	; (8008c50 <USBD_CDC_Init+0x1ec>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 020f 	and.w	r2, r3, #15
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	3326      	adds	r3, #38	; 0x26
 8008ba6:	2210      	movs	r2, #16
 8008ba8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008baa:	4b29      	ldr	r3, [pc, #164]	; (8008c50 <USBD_CDC_Init+0x1ec>)
 8008bac:	7819      	ldrb	r1, [r3, #0]
 8008bae:	2308      	movs	r3, #8
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f002 fa63 	bl	800b07e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008bb8:	4b25      	ldr	r3, [pc, #148]	; (8008c50 <USBD_CDC_Init+0x1ec>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	f003 020f 	and.w	r2, r3, #15
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	440b      	add	r3, r1
 8008bcc:	3324      	adds	r3, #36	; 0x24
 8008bce:	2201      	movs	r2, #1
 8008bd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	33b0      	adds	r3, #176	; 0xb0
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e018      	b.n	8008c3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7c1b      	ldrb	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <USBD_CDC_Init+0x1e8>)
 8008c16:	7819      	ldrb	r1, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f002 fb1b 	bl	800b25e <USBD_LL_PrepareReceive>
 8008c28:	e008      	b.n	8008c3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c2a:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <USBD_CDC_Init+0x1e8>)
 8008c2c:	7819      	ldrb	r1, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f002 fb11 	bl	800b25e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	2000009b 	.word	0x2000009b
 8008c4c:	2000009c 	.word	0x2000009c
 8008c50:	2000009d 	.word	0x2000009d

08008c54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008c60:	4b3a      	ldr	r3, [pc, #232]	; (8008d4c <USBD_CDC_DeInit+0xf8>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f002 fa2f 	bl	800b0ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008c6c:	4b37      	ldr	r3, [pc, #220]	; (8008d4c <USBD_CDC_DeInit+0xf8>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	f003 020f 	and.w	r2, r3, #15
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3324      	adds	r3, #36	; 0x24
 8008c82:	2200      	movs	r2, #0
 8008c84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008c86:	4b32      	ldr	r3, [pc, #200]	; (8008d50 <USBD_CDC_DeInit+0xfc>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f002 fa1c 	bl	800b0ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008c92:	4b2f      	ldr	r3, [pc, #188]	; (8008d50 <USBD_CDC_DeInit+0xfc>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	f003 020f 	and.w	r2, r3, #15
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008caa:	2200      	movs	r2, #0
 8008cac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <USBD_CDC_DeInit+0x100>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f002 fa08 	bl	800b0ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008cba:	4b26      	ldr	r3, [pc, #152]	; (8008d54 <USBD_CDC_DeInit+0x100>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	f003 020f 	and.w	r2, r3, #15
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	3324      	adds	r3, #36	; 0x24
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008cd4:	4b1f      	ldr	r3, [pc, #124]	; (8008d54 <USBD_CDC_DeInit+0x100>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 020f 	and.w	r2, r3, #15
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	3326      	adds	r3, #38	; 0x26
 8008cea:	2200      	movs	r2, #0
 8008cec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	32b0      	adds	r2, #176	; 0xb0
 8008cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01f      	beq.n	8008d40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	33b0      	adds	r3, #176	; 0xb0
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	32b0      	adds	r2, #176	; 0xb0
 8008d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f002 fb14 	bl	800b350 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	32b0      	adds	r2, #176	; 0xb0
 8008d32:	2100      	movs	r1, #0
 8008d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	2000009b 	.word	0x2000009b
 8008d50:	2000009c 	.word	0x2000009c
 8008d54:	2000009d 	.word	0x2000009d

08008d58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	32b0      	adds	r2, #176	; 0xb0
 8008d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e0bf      	b.n	8008f08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d050      	beq.n	8008e36 <USBD_CDC_Setup+0xde>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	f040 80af 	bne.w	8008ef8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	88db      	ldrh	r3, [r3, #6]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d03a      	beq.n	8008e18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	da1b      	bge.n	8008de4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	33b0      	adds	r3, #176	; 0xb0
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008dc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	88d2      	ldrh	r2, [r2, #6]
 8008dc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	88db      	ldrh	r3, [r3, #6]
 8008dce:	2b07      	cmp	r3, #7
 8008dd0:	bf28      	it	cs
 8008dd2:	2307      	movcs	r3, #7
 8008dd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	89fa      	ldrh	r2, [r7, #14]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fd21 	bl	800a824 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008de2:	e090      	b.n	8008f06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	785a      	ldrb	r2, [r3, #1]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	2b3f      	cmp	r3, #63	; 0x3f
 8008df4:	d803      	bhi.n	8008dfe <USBD_CDC_Setup+0xa6>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	88db      	ldrh	r3, [r3, #6]
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	e000      	b.n	8008e00 <USBD_CDC_Setup+0xa8>
 8008dfe:	2240      	movs	r2, #64	; 0x40
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008e06:	6939      	ldr	r1, [r7, #16]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fd33 	bl	800a87c <USBD_CtlPrepareRx>
      break;
 8008e16:	e076      	b.n	8008f06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	33b0      	adds	r3, #176	; 0xb0
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	7850      	ldrb	r0, [r2, #1]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	4798      	blx	r3
      break;
 8008e34:	e067      	b.n	8008f06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	2b0b      	cmp	r3, #11
 8008e3c:	d851      	bhi.n	8008ee2 <USBD_CDC_Setup+0x18a>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <USBD_CDC_Setup+0xec>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e75 	.word	0x08008e75
 8008e48:	08008ef1 	.word	0x08008ef1
 8008e4c:	08008ee3 	.word	0x08008ee3
 8008e50:	08008ee3 	.word	0x08008ee3
 8008e54:	08008ee3 	.word	0x08008ee3
 8008e58:	08008ee3 	.word	0x08008ee3
 8008e5c:	08008ee3 	.word	0x08008ee3
 8008e60:	08008ee3 	.word	0x08008ee3
 8008e64:	08008ee3 	.word	0x08008ee3
 8008e68:	08008ee3 	.word	0x08008ee3
 8008e6c:	08008e9f 	.word	0x08008e9f
 8008e70:	08008ec9 	.word	0x08008ec9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d107      	bne.n	8008e90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e80:	f107 030a 	add.w	r3, r7, #10
 8008e84:	2202      	movs	r2, #2
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 fccb 	bl	800a824 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e8e:	e032      	b.n	8008ef6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 fc55 	bl	800a742 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e9c:	e02b      	b.n	8008ef6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d107      	bne.n	8008eba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008eaa:	f107 030d 	add.w	r3, r7, #13
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fcb6 	bl	800a824 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eb8:	e01d      	b.n	8008ef6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fc40 	bl	800a742 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec6:	e016      	b.n	8008ef6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d00f      	beq.n	8008ef4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fc33 	bl	800a742 <USBD_CtlError>
            ret = USBD_FAIL;
 8008edc:	2303      	movs	r3, #3
 8008ede:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ee0:	e008      	b.n	8008ef4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 fc2c 	bl	800a742 <USBD_CtlError>
          ret = USBD_FAIL;
 8008eea:	2303      	movs	r3, #3
 8008eec:	75fb      	strb	r3, [r7, #23]
          break;
 8008eee:	e002      	b.n	8008ef6 <USBD_CDC_Setup+0x19e>
          break;
 8008ef0:	bf00      	nop
 8008ef2:	e008      	b.n	8008f06 <USBD_CDC_Setup+0x1ae>
          break;
 8008ef4:	bf00      	nop
      }
      break;
 8008ef6:	e006      	b.n	8008f06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fc21 	bl	800a742 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	75fb      	strb	r3, [r7, #23]
      break;
 8008f04:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32b0      	adds	r2, #176	; 0xb0
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e065      	b.n	8009006 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	32b0      	adds	r2, #176	; 0xb0
 8008f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	f003 020f 	and.w	r2, r3, #15
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	3318      	adds	r3, #24
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d02f      	beq.n	8008fc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	f003 020f 	and.w	r2, r3, #15
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	3318      	adds	r3, #24
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	f003 010f 	and.w	r1, r3, #15
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	460b      	mov	r3, r1
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	440b      	add	r3, r1
 8008f88:	00db      	lsls	r3, r3, #3
 8008f8a:	4403      	add	r3, r0
 8008f8c:	3338      	adds	r3, #56	; 0x38
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d112      	bne.n	8008fc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008f9e:	78fb      	ldrb	r3, [r7, #3]
 8008fa0:	f003 020f 	and.w	r2, r3, #15
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	440b      	add	r3, r1
 8008fb0:	3318      	adds	r3, #24
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fb6:	78f9      	ldrb	r1, [r7, #3]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f002 f92d 	bl	800b21c <USBD_LL_Transmit>
 8008fc2:	e01f      	b.n	8009004 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	33b0      	adds	r3, #176	; 0xb0
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d010      	beq.n	8009004 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	33b0      	adds	r3, #176	; 0xb0
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	32b0      	adds	r2, #176	; 0xb0
 8009024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009028:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	32b0      	adds	r2, #176	; 0xb0
 8009034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	e01a      	b.n	8009076 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f002 f92b 	bl	800b2a0 <USBD_LL_GetRxDataSize>
 800904a:	4602      	mov	r2, r0
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	33b0      	adds	r3, #176	; 0xb0
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009070:	4611      	mov	r1, r2
 8009072:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	32b0      	adds	r2, #176	; 0xb0
 8009090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009094:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	e025      	b.n	80090ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	33b0      	adds	r3, #176	; 0xb0
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d01a      	beq.n	80090ea <USBD_CDC_EP0_RxReady+0x6c>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80090ba:	2bff      	cmp	r3, #255	; 0xff
 80090bc:	d015      	beq.n	80090ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	33b0      	adds	r3, #176	; 0xb0
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80090d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090de:	b292      	uxth	r2, r2
 80090e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	22ff      	movs	r2, #255	; 0xff
 80090e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090fc:	2182      	movs	r1, #130	; 0x82
 80090fe:	4818      	ldr	r0, [pc, #96]	; (8009160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009100:	f000 fcbd 	bl	8009a7e <USBD_GetEpDesc>
 8009104:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009106:	2101      	movs	r1, #1
 8009108:	4815      	ldr	r0, [pc, #84]	; (8009160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800910a:	f000 fcb8 	bl	8009a7e <USBD_GetEpDesc>
 800910e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009110:	2181      	movs	r1, #129	; 0x81
 8009112:	4813      	ldr	r0, [pc, #76]	; (8009160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009114:	f000 fcb3 	bl	8009a7e <USBD_GetEpDesc>
 8009118:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2210      	movs	r2, #16
 8009124:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	2200      	movs	r2, #0
 8009130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009134:	711a      	strb	r2, [r3, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d006      	beq.n	800914e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009148:	711a      	strb	r2, [r3, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2243      	movs	r2, #67	; 0x43
 8009152:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000058 	.word	0x20000058

08009164 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800916c:	2182      	movs	r1, #130	; 0x82
 800916e:	4818      	ldr	r0, [pc, #96]	; (80091d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009170:	f000 fc85 	bl	8009a7e <USBD_GetEpDesc>
 8009174:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009176:	2101      	movs	r1, #1
 8009178:	4815      	ldr	r0, [pc, #84]	; (80091d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800917a:	f000 fc80 	bl	8009a7e <USBD_GetEpDesc>
 800917e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009180:	2181      	movs	r1, #129	; 0x81
 8009182:	4813      	ldr	r0, [pc, #76]	; (80091d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009184:	f000 fc7b 	bl	8009a7e <USBD_GetEpDesc>
 8009188:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2210      	movs	r2, #16
 8009194:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d006      	beq.n	80091aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2200      	movs	r2, #0
 80091a0:	711a      	strb	r2, [r3, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f042 0202 	orr.w	r2, r2, #2
 80091a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d006      	beq.n	80091be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	711a      	strb	r2, [r3, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f042 0202 	orr.w	r2, r2, #2
 80091bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2243      	movs	r2, #67	; 0x43
 80091c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20000058 	.word	0x20000058

080091d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091dc:	2182      	movs	r1, #130	; 0x82
 80091de:	4818      	ldr	r0, [pc, #96]	; (8009240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091e0:	f000 fc4d 	bl	8009a7e <USBD_GetEpDesc>
 80091e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091e6:	2101      	movs	r1, #1
 80091e8:	4815      	ldr	r0, [pc, #84]	; (8009240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091ea:	f000 fc48 	bl	8009a7e <USBD_GetEpDesc>
 80091ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091f0:	2181      	movs	r1, #129	; 0x81
 80091f2:	4813      	ldr	r0, [pc, #76]	; (8009240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091f4:	f000 fc43 	bl	8009a7e <USBD_GetEpDesc>
 80091f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2210      	movs	r2, #16
 8009204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d006      	beq.n	800921a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	2200      	movs	r2, #0
 8009210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009214:	711a      	strb	r2, [r3, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d006      	beq.n	800922e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009228:	711a      	strb	r2, [r3, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2243      	movs	r2, #67	; 0x43
 8009232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009234:	4b02      	ldr	r3, [pc, #8]	; (8009240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20000058 	.word	0x20000058

08009244 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	220a      	movs	r2, #10
 8009250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009252:	4b03      	ldr	r3, [pc, #12]	; (8009260 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000014 	.word	0x20000014

08009264 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009274:	2303      	movs	r3, #3
 8009276:	e009      	b.n	800928c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	33b0      	adds	r3, #176	; 0xb0
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	32b0      	adds	r2, #176	; 0xb0
 80092ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e008      	b.n	80092d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	32b0      	adds	r2, #176	; 0xb0
 80092f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e004      	b.n	800930a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
	...

08009318 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	32b0      	adds	r2, #176	; 0xb0
 800932a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009330:	2301      	movs	r3, #1
 8009332:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800933a:	2303      	movs	r3, #3
 800933c:	e025      	b.n	800938a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009344:	2b00      	cmp	r3, #0
 8009346:	d11f      	bne.n	8009388 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2201      	movs	r2, #1
 800934c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009350:	4b10      	ldr	r3, [pc, #64]	; (8009394 <USBD_CDC_TransmitPacket+0x7c>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 020f 	and.w	r2, r3, #15
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4403      	add	r3, r0
 800936a:	3318      	adds	r3, #24
 800936c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800936e:	4b09      	ldr	r3, [pc, #36]	; (8009394 <USBD_CDC_TransmitPacket+0x7c>)
 8009370:	7819      	ldrb	r1, [r3, #0]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 ff4c 	bl	800b21c <USBD_LL_Transmit>

    ret = USBD_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	2000009b 	.word	0x2000009b

08009398 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	32b0      	adds	r2, #176	; 0xb0
 80093aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	32b0      	adds	r2, #176	; 0xb0
 80093ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e018      	b.n	80093f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7c1b      	ldrb	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093ce:	4b0c      	ldr	r3, [pc, #48]	; (8009400 <USBD_CDC_ReceivePacket+0x68>)
 80093d0:	7819      	ldrb	r1, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 ff3e 	bl	800b25e <USBD_LL_PrepareReceive>
 80093e2:	e008      	b.n	80093f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093e4:	4b06      	ldr	r3, [pc, #24]	; (8009400 <USBD_CDC_ReceivePacket+0x68>)
 80093e6:	7819      	ldrb	r1, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093ee:	2340      	movs	r3, #64	; 0x40
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 ff34 	bl	800b25e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	2000009c 	.word	0x2000009c

08009404 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009418:	2303      	movs	r3, #3
 800941a:	e01f      	b.n	800945c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	79fa      	ldrb	r2, [r7, #7]
 800944e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f001 fd97 	bl	800af84 <USBD_LL_Init>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]

  return ret;
 800945a:	7dfb      	ldrb	r3, [r7, #23]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009478:	2303      	movs	r3, #3
 800947a:	e025      	b.n	80094c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	32ae      	adds	r2, #174	; 0xae
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00f      	beq.n	80094b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32ae      	adds	r2, #174	; 0xae
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	f107 020e 	add.w	r2, r7, #14
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	4602      	mov	r2, r0
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 fdb5 	bl	800b048 <USBD_LL_Start>
 80094de:	4603      	mov	r3, r0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	4611      	mov	r1, r2
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	4798      	blx	r3
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800952c:	7bfb      	ldrb	r3, [r7, #15]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	4611      	mov	r1, r2
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	4798      	blx	r3
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800955c:	2303      	movs	r3, #3
 800955e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	4618      	mov	r0, r3
 800957e:	f001 f8a6 	bl	800a6ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009590:	461a      	mov	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800959e:	f003 031f 	and.w	r3, r3, #31
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d01a      	beq.n	80095dc <USBD_LL_SetupStage+0x72>
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d822      	bhi.n	80095f0 <USBD_LL_SetupStage+0x86>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <USBD_LL_SetupStage+0x4a>
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d00a      	beq.n	80095c8 <USBD_LL_SetupStage+0x5e>
 80095b2:	e01d      	b.n	80095f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fad3 	bl	8009b68 <USBD_StdDevReq>
 80095c2:	4603      	mov	r3, r0
 80095c4:	73fb      	strb	r3, [r7, #15]
      break;
 80095c6:	e020      	b.n	800960a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095ce:	4619      	mov	r1, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fb3b 	bl	8009c4c <USBD_StdItfReq>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
      break;
 80095da:	e016      	b.n	800960a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fb9d 	bl	8009d24 <USBD_StdEPReq>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73fb      	strb	r3, [r7, #15]
      break;
 80095ee:	e00c      	b.n	800960a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80095f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fd82 	bl	800b108 <USBD_LL_StallEP>
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]
      break;
 8009608:	bf00      	nop
  }

  return ret;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	460b      	mov	r3, r1
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d16e      	bne.n	800970a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009632:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800963a:	2b03      	cmp	r3, #3
 800963c:	f040 8098 	bne.w	8009770 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	429a      	cmp	r2, r3
 800964a:	d913      	bls.n	8009674 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	1ad2      	subs	r2, r2, r3
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	68da      	ldr	r2, [r3, #12]
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	4293      	cmp	r3, r2
 8009664:	bf28      	it	cs
 8009666:	4613      	movcs	r3, r2
 8009668:	461a      	mov	r2, r3
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f001 f922 	bl	800a8b6 <USBD_CtlContinueRx>
 8009672:	e07d      	b.n	8009770 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800967a:	f003 031f 	and.w	r3, r3, #31
 800967e:	2b02      	cmp	r3, #2
 8009680:	d014      	beq.n	80096ac <USBD_LL_DataOutStage+0x98>
 8009682:	2b02      	cmp	r3, #2
 8009684:	d81d      	bhi.n	80096c2 <USBD_LL_DataOutStage+0xae>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <USBD_LL_DataOutStage+0x7c>
 800968a:	2b01      	cmp	r3, #1
 800968c:	d003      	beq.n	8009696 <USBD_LL_DataOutStage+0x82>
 800968e:	e018      	b.n	80096c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	75bb      	strb	r3, [r7, #22]
            break;
 8009694:	e018      	b.n	80096c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800969c:	b2db      	uxtb	r3, r3
 800969e:	4619      	mov	r1, r3
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f9d2 	bl	8009a4a <USBD_CoreFindIF>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75bb      	strb	r3, [r7, #22]
            break;
 80096aa:	e00d      	b.n	80096c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	4619      	mov	r1, r3
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f9d4 	bl	8009a64 <USBD_CoreFindEP>
 80096bc:	4603      	mov	r3, r0
 80096be:	75bb      	strb	r3, [r7, #22]
            break;
 80096c0:	e002      	b.n	80096c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75bb      	strb	r3, [r7, #22]
            break;
 80096c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80096c8:	7dbb      	ldrb	r3, [r7, #22]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d119      	bne.n	8009702 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d113      	bne.n	8009702 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80096da:	7dba      	ldrb	r2, [r7, #22]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	32ae      	adds	r2, #174	; 0xae
 80096e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80096ea:	7dba      	ldrb	r2, [r7, #22]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80096f2:	7dba      	ldrb	r2, [r7, #22]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	32ae      	adds	r2, #174	; 0xae
 80096f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f001 f8e8 	bl	800a8d8 <USBD_CtlSendStatus>
 8009708:	e032      	b.n	8009770 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800970a:	7afb      	ldrb	r3, [r7, #11]
 800970c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009710:	b2db      	uxtb	r3, r3
 8009712:	4619      	mov	r1, r3
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 f9a5 	bl	8009a64 <USBD_CoreFindEP>
 800971a:	4603      	mov	r3, r0
 800971c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800971e:	7dbb      	ldrb	r3, [r7, #22]
 8009720:	2bff      	cmp	r3, #255	; 0xff
 8009722:	d025      	beq.n	8009770 <USBD_LL_DataOutStage+0x15c>
 8009724:	7dbb      	ldrb	r3, [r7, #22]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d122      	bne.n	8009770 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b03      	cmp	r3, #3
 8009734:	d117      	bne.n	8009766 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009736:	7dba      	ldrb	r2, [r7, #22]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	32ae      	adds	r2, #174	; 0xae
 800973c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00f      	beq.n	8009766 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009746:	7dba      	ldrb	r2, [r7, #22]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800974e:	7dba      	ldrb	r2, [r7, #22]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	32ae      	adds	r2, #174	; 0xae
 8009754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	7afa      	ldrb	r2, [r7, #11]
 800975c:	4611      	mov	r1, r2
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	4798      	blx	r3
 8009762:	4603      	mov	r3, r0
 8009764:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	e000      	b.n	8009772 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b086      	sub	sp, #24
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	460b      	mov	r3, r1
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009788:	7afb      	ldrb	r3, [r7, #11]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d16f      	bne.n	800986e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3314      	adds	r3, #20
 8009792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800979a:	2b02      	cmp	r3, #2
 800979c:	d15a      	bne.n	8009854 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	689a      	ldr	r2, [r3, #8]
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d914      	bls.n	80097d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	1ad2      	subs	r2, r2, r3
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	461a      	mov	r2, r3
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f001 f84a 	bl	800a85a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097c6:	2300      	movs	r3, #0
 80097c8:	2200      	movs	r2, #0
 80097ca:	2100      	movs	r1, #0
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f001 fd46 	bl	800b25e <USBD_LL_PrepareReceive>
 80097d2:	e03f      	b.n	8009854 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d11c      	bne.n	800981a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d316      	bcc.n	800981a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d20f      	bcs.n	800981a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f001 f82b 	bl	800a85a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800980c:	2300      	movs	r3, #0
 800980e:	2200      	movs	r2, #0
 8009810:	2100      	movs	r1, #0
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f001 fd23 	bl	800b25e <USBD_LL_PrepareReceive>
 8009818:	e01c      	b.n	8009854 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b03      	cmp	r3, #3
 8009824:	d10f      	bne.n	8009846 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009846:	2180      	movs	r1, #128	; 0x80
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f001 fc5d 	bl	800b108 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f001 f855 	bl	800a8fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d03a      	beq.n	80098d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff fe42 	bl	80094e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800986c:	e032      	b.n	80098d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009874:	b2db      	uxtb	r3, r3
 8009876:	4619      	mov	r1, r3
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f8f3 	bl	8009a64 <USBD_CoreFindEP>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2bff      	cmp	r3, #255	; 0xff
 8009886:	d025      	beq.n	80098d4 <USBD_LL_DataInStage+0x15a>
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d122      	bne.n	80098d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b03      	cmp	r3, #3
 8009898:	d11c      	bne.n	80098d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800989a:	7dfa      	ldrb	r2, [r7, #23]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	32ae      	adds	r2, #174	; 0xae
 80098a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d014      	beq.n	80098d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80098aa:	7dfa      	ldrb	r2, [r7, #23]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80098b2:	7dfa      	ldrb	r2, [r7, #23]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	32ae      	adds	r2, #174	; 0xae
 80098b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	7afa      	ldrb	r2, [r7, #11]
 80098c0:	4611      	mov	r1, r2
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	4798      	blx	r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80098ca:	7dbb      	ldrb	r3, [r7, #22]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80098d0:	7dbb      	ldrb	r3, [r7, #22]
 80098d2:	e000      	b.n	80098d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009916:	2b00      	cmp	r3, #0
 8009918:	d014      	beq.n	8009944 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00e      	beq.n	8009944 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6852      	ldr	r2, [r2, #4]
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	4611      	mov	r1, r2
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009940:	2303      	movs	r3, #3
 8009942:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009944:	2340      	movs	r3, #64	; 0x40
 8009946:	2200      	movs	r2, #0
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f001 fb97 	bl	800b07e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2240      	movs	r2, #64	; 0x40
 800995c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009960:	2340      	movs	r3, #64	; 0x40
 8009962:	2200      	movs	r2, #0
 8009964:	2180      	movs	r1, #128	; 0x80
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 fb89 	bl	800b07e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2240      	movs	r2, #64	; 0x40
 8009976:	621a      	str	r2, [r3, #32]

  return ret;
 8009978:	7bfb      	ldrb	r3, [r7, #15]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	460b      	mov	r3, r1
 800998c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	78fa      	ldrb	r2, [r7, #3]
 8009992:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d006      	beq.n	80099c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2204      	movs	r2, #4
 80099c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	d106      	bne.n	80099fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d110      	bne.n	8009a40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d005      	beq.n	8009a40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b086      	sub	sp, #24
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a92:	2300      	movs	r3, #0
 8009a94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	885b      	ldrh	r3, [r3, #2]
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d920      	bls.n	8009ae8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009aae:	e013      	b.n	8009ad8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ab0:	f107 030a 	add.w	r3, r7, #10
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6978      	ldr	r0, [r7, #20]
 8009ab8:	f000 f81b 	bl	8009af2 <USBD_GetNextDesc>
 8009abc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	d108      	bne.n	8009ad8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	789b      	ldrb	r3, [r3, #2]
 8009ace:	78fa      	ldrb	r2, [r7, #3]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d008      	beq.n	8009ae6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	885b      	ldrh	r3, [r3, #2]
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	897b      	ldrh	r3, [r7, #10]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d8e5      	bhi.n	8009ab0 <USBD_GetEpDesc+0x32>
 8009ae4:	e000      	b.n	8009ae8 <USBD_GetEpDesc+0x6a>
          break;
 8009ae6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009ae8:	693b      	ldr	r3, [r7, #16]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b085      	sub	sp, #20
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	881a      	ldrh	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	4413      	add	r3, r2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	3301      	adds	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b4a:	8a3b      	ldrh	r3, [r7, #16]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	b21a      	sxth	r2, r3
 8009b50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	b21b      	sxth	r3, r3
 8009b58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b7e:	2b40      	cmp	r3, #64	; 0x40
 8009b80:	d005      	beq.n	8009b8e <USBD_StdDevReq+0x26>
 8009b82:	2b40      	cmp	r3, #64	; 0x40
 8009b84:	d857      	bhi.n	8009c36 <USBD_StdDevReq+0xce>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00f      	beq.n	8009baa <USBD_StdDevReq+0x42>
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d153      	bne.n	8009c36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	32ae      	adds	r2, #174	; 0xae
 8009b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	4798      	blx	r3
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba8:	e04a      	b.n	8009c40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	2b09      	cmp	r3, #9
 8009bb0:	d83b      	bhi.n	8009c2a <USBD_StdDevReq+0xc2>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <USBD_StdDevReq+0x50>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009c0d 	.word	0x08009c0d
 8009bbc:	08009c21 	.word	0x08009c21
 8009bc0:	08009c2b 	.word	0x08009c2b
 8009bc4:	08009c17 	.word	0x08009c17
 8009bc8:	08009c2b 	.word	0x08009c2b
 8009bcc:	08009beb 	.word	0x08009beb
 8009bd0:	08009be1 	.word	0x08009be1
 8009bd4:	08009c2b 	.word	0x08009c2b
 8009bd8:	08009c03 	.word	0x08009c03
 8009bdc:	08009bf5 	.word	0x08009bf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fa3c 	bl	800a060 <USBD_GetDescriptor>
          break;
 8009be8:	e024      	b.n	8009c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fbcb 	bl	800a388 <USBD_SetAddress>
          break;
 8009bf2:	e01f      	b.n	8009c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fc0a 	bl	800a410 <USBD_SetConfig>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
          break;
 8009c00:	e018      	b.n	8009c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fcad 	bl	800a564 <USBD_GetConfig>
          break;
 8009c0a:	e013      	b.n	8009c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fcde 	bl	800a5d0 <USBD_GetStatus>
          break;
 8009c14:	e00e      	b.n	8009c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fd0d 	bl	800a638 <USBD_SetFeature>
          break;
 8009c1e:	e009      	b.n	8009c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fd31 	bl	800a68a <USBD_ClrFeature>
          break;
 8009c28:	e004      	b.n	8009c34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fd88 	bl	800a742 <USBD_CtlError>
          break;
 8009c32:	bf00      	nop
      }
      break;
 8009c34:	e004      	b.n	8009c40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fd82 	bl	800a742 <USBD_CtlError>
      break;
 8009c3e:	bf00      	nop
  }

  return ret;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop

08009c4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c62:	2b40      	cmp	r3, #64	; 0x40
 8009c64:	d005      	beq.n	8009c72 <USBD_StdItfReq+0x26>
 8009c66:	2b40      	cmp	r3, #64	; 0x40
 8009c68:	d852      	bhi.n	8009d10 <USBD_StdItfReq+0xc4>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <USBD_StdItfReq+0x26>
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d14e      	bne.n	8009d10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d840      	bhi.n	8009d02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	889b      	ldrh	r3, [r3, #4]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d836      	bhi.n	8009cf8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	889b      	ldrh	r3, [r3, #4]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff fed9 	bl	8009a4a <USBD_CoreFindIF>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	2bff      	cmp	r3, #255	; 0xff
 8009ca0:	d01d      	beq.n	8009cde <USBD_StdItfReq+0x92>
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11a      	bne.n	8009cde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ca8:	7bba      	ldrb	r2, [r7, #14]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	32ae      	adds	r2, #174	; 0xae
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00f      	beq.n	8009cd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009cb8:	7bba      	ldrb	r2, [r7, #14]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009cc0:	7bba      	ldrb	r2, [r7, #14]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	32ae      	adds	r2, #174	; 0xae
 8009cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4798      	blx	r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cd6:	e004      	b.n	8009ce2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cdc:	e001      	b.n	8009ce2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	88db      	ldrh	r3, [r3, #6]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d110      	bne.n	8009d0c <USBD_StdItfReq+0xc0>
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10d      	bne.n	8009d0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fdf1 	bl	800a8d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cf6:	e009      	b.n	8009d0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fd21 	bl	800a742 <USBD_CtlError>
          break;
 8009d00:	e004      	b.n	8009d0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fd1c 	bl	800a742 <USBD_CtlError>
          break;
 8009d0a:	e000      	b.n	8009d0e <USBD_StdItfReq+0xc2>
          break;
 8009d0c:	bf00      	nop
      }
      break;
 8009d0e:	e004      	b.n	8009d1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fd15 	bl	800a742 <USBD_CtlError>
      break;
 8009d18:	bf00      	nop
  }

  return ret;
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	889b      	ldrh	r3, [r3, #4]
 8009d36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d40:	2b40      	cmp	r3, #64	; 0x40
 8009d42:	d007      	beq.n	8009d54 <USBD_StdEPReq+0x30>
 8009d44:	2b40      	cmp	r3, #64	; 0x40
 8009d46:	f200 817f 	bhi.w	800a048 <USBD_StdEPReq+0x324>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d02a      	beq.n	8009da4 <USBD_StdEPReq+0x80>
 8009d4e:	2b20      	cmp	r3, #32
 8009d50:	f040 817a 	bne.w	800a048 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff fe83 	bl	8009a64 <USBD_CoreFindEP>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d62:	7b7b      	ldrb	r3, [r7, #13]
 8009d64:	2bff      	cmp	r3, #255	; 0xff
 8009d66:	f000 8174 	beq.w	800a052 <USBD_StdEPReq+0x32e>
 8009d6a:	7b7b      	ldrb	r3, [r7, #13]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 8170 	bne.w	800a052 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d72:	7b7a      	ldrb	r2, [r7, #13]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d7a:	7b7a      	ldrb	r2, [r7, #13]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	32ae      	adds	r2, #174	; 0xae
 8009d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 8163 	beq.w	800a052 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d8c:	7b7a      	ldrb	r2, [r7, #13]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32ae      	adds	r2, #174	; 0xae
 8009d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	4798      	blx	r3
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009da2:	e156      	b.n	800a052 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b03      	cmp	r3, #3
 8009daa:	d008      	beq.n	8009dbe <USBD_StdEPReq+0x9a>
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	f300 8145 	bgt.w	800a03c <USBD_StdEPReq+0x318>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 809b 	beq.w	8009eee <USBD_StdEPReq+0x1ca>
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d03c      	beq.n	8009e36 <USBD_StdEPReq+0x112>
 8009dbc:	e13e      	b.n	800a03c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d002      	beq.n	8009dd0 <USBD_StdEPReq+0xac>
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d016      	beq.n	8009dfc <USBD_StdEPReq+0xd8>
 8009dce:	e02c      	b.n	8009e2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00d      	beq.n	8009df2 <USBD_StdEPReq+0xce>
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d00a      	beq.n	8009df2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f991 	bl	800b108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009de6:	2180      	movs	r1, #128	; 0x80
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 f98d 	bl	800b108 <USBD_LL_StallEP>
 8009dee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009df0:	e020      	b.n	8009e34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fca4 	bl	800a742 <USBD_CtlError>
              break;
 8009dfa:	e01b      	b.n	8009e34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	885b      	ldrh	r3, [r3, #2]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10e      	bne.n	8009e22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00b      	beq.n	8009e22 <USBD_StdEPReq+0xfe>
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	2b80      	cmp	r3, #128	; 0x80
 8009e0e:	d008      	beq.n	8009e22 <USBD_StdEPReq+0xfe>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	88db      	ldrh	r3, [r3, #6]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d104      	bne.n	8009e22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f001 f973 	bl	800b108 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fd58 	bl	800a8d8 <USBD_CtlSendStatus>

              break;
 8009e28:	e004      	b.n	8009e34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fc88 	bl	800a742 <USBD_CtlError>
              break;
 8009e32:	bf00      	nop
          }
          break;
 8009e34:	e107      	b.n	800a046 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d002      	beq.n	8009e48 <USBD_StdEPReq+0x124>
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d016      	beq.n	8009e74 <USBD_StdEPReq+0x150>
 8009e46:	e04b      	b.n	8009ee0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00d      	beq.n	8009e6a <USBD_StdEPReq+0x146>
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b80      	cmp	r3, #128	; 0x80
 8009e52:	d00a      	beq.n	8009e6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 f955 	bl	800b108 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e5e:	2180      	movs	r1, #128	; 0x80
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 f951 	bl	800b108 <USBD_LL_StallEP>
 8009e66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e68:	e040      	b.n	8009eec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fc68 	bl	800a742 <USBD_CtlError>
              break;
 8009e72:	e03b      	b.n	8009eec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	885b      	ldrh	r3, [r3, #2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d136      	bne.n	8009eea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 f95b 	bl	800b146 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fd21 	bl	800a8d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff fde2 	bl	8009a64 <USBD_CoreFindEP>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ea4:	7b7b      	ldrb	r3, [r7, #13]
 8009ea6:	2bff      	cmp	r3, #255	; 0xff
 8009ea8:	d01f      	beq.n	8009eea <USBD_StdEPReq+0x1c6>
 8009eaa:	7b7b      	ldrb	r3, [r7, #13]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11c      	bne.n	8009eea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009eb0:	7b7a      	ldrb	r2, [r7, #13]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009eb8:	7b7a      	ldrb	r2, [r7, #13]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	32ae      	adds	r2, #174	; 0xae
 8009ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d010      	beq.n	8009eea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ec8:	7b7a      	ldrb	r2, [r7, #13]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	32ae      	adds	r2, #174	; 0xae
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	4798      	blx	r3
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ede:	e004      	b.n	8009eea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fc2d 	bl	800a742 <USBD_CtlError>
              break;
 8009ee8:	e000      	b.n	8009eec <USBD_StdEPReq+0x1c8>
              break;
 8009eea:	bf00      	nop
          }
          break;
 8009eec:	e0ab      	b.n	800a046 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d002      	beq.n	8009f00 <USBD_StdEPReq+0x1dc>
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d032      	beq.n	8009f64 <USBD_StdEPReq+0x240>
 8009efe:	e097      	b.n	800a030 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d007      	beq.n	8009f16 <USBD_StdEPReq+0x1f2>
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b80      	cmp	r3, #128	; 0x80
 8009f0a:	d004      	beq.n	8009f16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fc17 	bl	800a742 <USBD_CtlError>
                break;
 8009f14:	e091      	b.n	800a03a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	da0b      	bge.n	8009f36 <USBD_StdEPReq+0x212>
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	3310      	adds	r3, #16
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	3304      	adds	r3, #4
 8009f34:	e00b      	b.n	8009f4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fc61 	bl	800a824 <USBD_CtlSendData>
              break;
 8009f62:	e06a      	b.n	800a03a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	da11      	bge.n	8009f90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	f003 020f 	and.w	r2, r3, #15
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	3324      	adds	r3, #36	; 0x24
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d117      	bne.n	8009fb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fbda 	bl	800a742 <USBD_CtlError>
                  break;
 8009f8e:	e054      	b.n	800a03a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	f003 020f 	and.w	r2, r3, #15
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fbc7 	bl	800a742 <USBD_CtlError>
                  break;
 8009fb4:	e041      	b.n	800a03a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	da0b      	bge.n	8009fd6 <USBD_StdEPReq+0x2b2>
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	3310      	adds	r3, #16
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	e00b      	b.n	8009fee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fdc:	4613      	mov	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	4413      	add	r3, r2
 8009fec:	3304      	adds	r3, #4
 8009fee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <USBD_StdEPReq+0x2d8>
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b80      	cmp	r3, #128	; 0x80
 8009ffa:	d103      	bne.n	800a004 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	e00e      	b.n	800a022 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a004:	7bbb      	ldrb	r3, [r7, #14]
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 f8bb 	bl	800b184 <USBD_LL_IsStallEP>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2201      	movs	r2, #1
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	e002      	b.n	800a022 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2202      	movs	r2, #2
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fbfb 	bl	800a824 <USBD_CtlSendData>
              break;
 800a02e:	e004      	b.n	800a03a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fb85 	bl	800a742 <USBD_CtlError>
              break;
 800a038:	bf00      	nop
          }
          break;
 800a03a:	e004      	b.n	800a046 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fb7f 	bl	800a742 <USBD_CtlError>
          break;
 800a044:	bf00      	nop
      }
      break;
 800a046:	e005      	b.n	800a054 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fb79 	bl	800a742 <USBD_CtlError>
      break;
 800a050:	e000      	b.n	800a054 <USBD_StdEPReq+0x330>
      break;
 800a052:	bf00      	nop
  }

  return ret;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	885b      	ldrh	r3, [r3, #2]
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	3b01      	subs	r3, #1
 800a080:	2b0e      	cmp	r3, #14
 800a082:	f200 8152 	bhi.w	800a32a <USBD_GetDescriptor+0x2ca>
 800a086:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <USBD_GetDescriptor+0x2c>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a0fd 	.word	0x0800a0fd
 800a090:	0800a115 	.word	0x0800a115
 800a094:	0800a155 	.word	0x0800a155
 800a098:	0800a32b 	.word	0x0800a32b
 800a09c:	0800a32b 	.word	0x0800a32b
 800a0a0:	0800a2cb 	.word	0x0800a2cb
 800a0a4:	0800a2f7 	.word	0x0800a2f7
 800a0a8:	0800a32b 	.word	0x0800a32b
 800a0ac:	0800a32b 	.word	0x0800a32b
 800a0b0:	0800a32b 	.word	0x0800a32b
 800a0b4:	0800a32b 	.word	0x0800a32b
 800a0b8:	0800a32b 	.word	0x0800a32b
 800a0bc:	0800a32b 	.word	0x0800a32b
 800a0c0:	0800a32b 	.word	0x0800a32b
 800a0c4:	0800a0c9 	.word	0x0800a0c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	7c12      	ldrb	r2, [r2, #16]
 800a0e0:	f107 0108 	add.w	r1, r7, #8
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
 800a0e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0ea:	e126      	b.n	800a33a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fb27 	bl	800a742 <USBD_CtlError>
        err++;
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	72fb      	strb	r3, [r7, #11]
      break;
 800a0fa:	e11e      	b.n	800a33a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	7c12      	ldrb	r2, [r2, #16]
 800a108:	f107 0108 	add.w	r1, r7, #8
 800a10c:	4610      	mov	r0, r2
 800a10e:	4798      	blx	r3
 800a110:	60f8      	str	r0, [r7, #12]
      break;
 800a112:	e112      	b.n	800a33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	7c1b      	ldrb	r3, [r3, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10d      	bne.n	800a138 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a124:	f107 0208 	add.w	r2, r7, #8
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3301      	adds	r3, #1
 800a132:	2202      	movs	r2, #2
 800a134:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a136:	e100      	b.n	800a33a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a140:	f107 0208 	add.w	r2, r7, #8
 800a144:	4610      	mov	r0, r2
 800a146:	4798      	blx	r3
 800a148:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	2202      	movs	r2, #2
 800a150:	701a      	strb	r2, [r3, #0]
      break;
 800a152:	e0f2      	b.n	800a33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	885b      	ldrh	r3, [r3, #2]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	f200 80ac 	bhi.w	800a2b8 <USBD_GetDescriptor+0x258>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <USBD_GetDescriptor+0x108>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a181 	.word	0x0800a181
 800a16c:	0800a1b5 	.word	0x0800a1b5
 800a170:	0800a1e9 	.word	0x0800a1e9
 800a174:	0800a21d 	.word	0x0800a21d
 800a178:	0800a251 	.word	0x0800a251
 800a17c:	0800a285 	.word	0x0800a285
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	7c12      	ldrb	r2, [r2, #16]
 800a198:	f107 0108 	add.w	r1, r7, #8
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
 800a1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a2:	e091      	b.n	800a2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 facb 	bl	800a742 <USBD_CtlError>
            err++;
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b2:	e089      	b.n	800a2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00b      	beq.n	800a1d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	7c12      	ldrb	r2, [r2, #16]
 800a1cc:	f107 0108 	add.w	r1, r7, #8
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	4798      	blx	r3
 800a1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1d6:	e077      	b.n	800a2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 fab1 	bl	800a742 <USBD_CtlError>
            err++;
 800a1e0:	7afb      	ldrb	r3, [r7, #11]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1e6:	e06f      	b.n	800a2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	7c12      	ldrb	r2, [r2, #16]
 800a200:	f107 0108 	add.w	r1, r7, #8
 800a204:	4610      	mov	r0, r2
 800a206:	4798      	blx	r3
 800a208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20a:	e05d      	b.n	800a2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa97 	bl	800a742 <USBD_CtlError>
            err++;
 800a214:	7afb      	ldrb	r3, [r7, #11]
 800a216:	3301      	adds	r3, #1
 800a218:	72fb      	strb	r3, [r7, #11]
          break;
 800a21a:	e055      	b.n	800a2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	7c12      	ldrb	r2, [r2, #16]
 800a234:	f107 0108 	add.w	r1, r7, #8
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a23e:	e043      	b.n	800a2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa7d 	bl	800a742 <USBD_CtlError>
            err++;
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	3301      	adds	r3, #1
 800a24c:	72fb      	strb	r3, [r7, #11]
          break;
 800a24e:	e03b      	b.n	800a2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7c12      	ldrb	r2, [r2, #16]
 800a268:	f107 0108 	add.w	r1, r7, #8
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
 800a270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a272:	e029      	b.n	800a2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa63 	bl	800a742 <USBD_CtlError>
            err++;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	3301      	adds	r3, #1
 800a280:	72fb      	strb	r3, [r7, #11]
          break;
 800a282:	e021      	b.n	800a2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7c12      	ldrb	r2, [r2, #16]
 800a29c:	f107 0108 	add.w	r1, r7, #8
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
 800a2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2a6:	e00f      	b.n	800a2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa49 	bl	800a742 <USBD_CtlError>
            err++;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2b6:	e007      	b.n	800a2c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa41 	bl	800a742 <USBD_CtlError>
          err++;
 800a2c0:	7afb      	ldrb	r3, [r7, #11]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a2c6:	bf00      	nop
      }
      break;
 800a2c8:	e037      	b.n	800a33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	7c1b      	ldrb	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d109      	bne.n	800a2e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2da:	f107 0208 	add.w	r2, r7, #8
 800a2de:	4610      	mov	r0, r2
 800a2e0:	4798      	blx	r3
 800a2e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2e4:	e029      	b.n	800a33a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fa2a 	bl	800a742 <USBD_CtlError>
        err++;
 800a2ee:	7afb      	ldrb	r3, [r7, #11]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2f4:	e021      	b.n	800a33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7c1b      	ldrb	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10d      	bne.n	800a31a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	f107 0208 	add.w	r2, r7, #8
 800a30a:	4610      	mov	r0, r2
 800a30c:	4798      	blx	r3
 800a30e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	3301      	adds	r3, #1
 800a314:	2207      	movs	r2, #7
 800a316:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a318:	e00f      	b.n	800a33a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fa10 	bl	800a742 <USBD_CtlError>
        err++;
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	3301      	adds	r3, #1
 800a326:	72fb      	strb	r3, [r7, #11]
      break;
 800a328:	e007      	b.n	800a33a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa08 	bl	800a742 <USBD_CtlError>
      err++;
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	3301      	adds	r3, #1
 800a336:	72fb      	strb	r3, [r7, #11]
      break;
 800a338:	bf00      	nop
  }

  if (err != 0U)
 800a33a:	7afb      	ldrb	r3, [r7, #11]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d11e      	bne.n	800a37e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	88db      	ldrh	r3, [r3, #6]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d016      	beq.n	800a376 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a348:	893b      	ldrh	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00e      	beq.n	800a36c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	88da      	ldrh	r2, [r3, #6]
 800a352:	893b      	ldrh	r3, [r7, #8]
 800a354:	4293      	cmp	r3, r2
 800a356:	bf28      	it	cs
 800a358:	4613      	movcs	r3, r2
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a35e:	893b      	ldrh	r3, [r7, #8]
 800a360:	461a      	mov	r2, r3
 800a362:	68f9      	ldr	r1, [r7, #12]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fa5d 	bl	800a824 <USBD_CtlSendData>
 800a36a:	e009      	b.n	800a380 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9e7 	bl	800a742 <USBD_CtlError>
 800a374:	e004      	b.n	800a380 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 faae 	bl	800a8d8 <USBD_CtlSendStatus>
 800a37c:	e000      	b.n	800a380 <USBD_GetDescriptor+0x320>
    return;
 800a37e:	bf00      	nop
  }
}
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop

0800a388 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	889b      	ldrh	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d131      	bne.n	800a3fe <USBD_SetAddress+0x76>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	88db      	ldrh	r3, [r3, #6]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d12d      	bne.n	800a3fe <USBD_SetAddress+0x76>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	885b      	ldrh	r3, [r3, #2]
 800a3a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a3a8:	d829      	bhi.n	800a3fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d104      	bne.n	800a3cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f9bc 	bl	800a742 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ca:	e01d      	b.n	800a408 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	7bfa      	ldrb	r2, [r7, #15]
 800a3d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 ff00 	bl	800b1de <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fa7a 	bl	800a8d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d004      	beq.n	800a3f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f2:	e009      	b.n	800a408 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fc:	e004      	b.n	800a408 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f99e 	bl	800a742 <USBD_CtlError>
  }
}
 800a406:	bf00      	nop
 800a408:	bf00      	nop
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	b2da      	uxtb	r2, r3
 800a424:	4b4e      	ldr	r3, [pc, #312]	; (800a560 <USBD_SetConfig+0x150>)
 800a426:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a428:	4b4d      	ldr	r3, [pc, #308]	; (800a560 <USBD_SetConfig+0x150>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d905      	bls.n	800a43c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f985 	bl	800a742 <USBD_CtlError>
    return USBD_FAIL;
 800a438:	2303      	movs	r3, #3
 800a43a:	e08c      	b.n	800a556 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	d002      	beq.n	800a44e <USBD_SetConfig+0x3e>
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d029      	beq.n	800a4a0 <USBD_SetConfig+0x90>
 800a44c:	e075      	b.n	800a53a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a44e:	4b44      	ldr	r3, [pc, #272]	; (800a560 <USBD_SetConfig+0x150>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d020      	beq.n	800a498 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a456:	4b42      	ldr	r3, [pc, #264]	; (800a560 <USBD_SetConfig+0x150>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a460:	4b3f      	ldr	r3, [pc, #252]	; (800a560 <USBD_SetConfig+0x150>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff f849 	bl	80094fe <USBD_SetClassConfig>
 800a46c:	4603      	mov	r3, r0
 800a46e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f962 	bl	800a742 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2202      	movs	r2, #2
 800a482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a486:	e065      	b.n	800a554 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fa25 	bl	800a8d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2203      	movs	r2, #3
 800a492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a496:	e05d      	b.n	800a554 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fa1d 	bl	800a8d8 <USBD_CtlSendStatus>
      break;
 800a49e:	e059      	b.n	800a554 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4a0:	4b2f      	ldr	r3, [pc, #188]	; (800a560 <USBD_SetConfig+0x150>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d112      	bne.n	800a4ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a4b0:	4b2b      	ldr	r3, [pc, #172]	; (800a560 <USBD_SetConfig+0x150>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4ba:	4b29      	ldr	r3, [pc, #164]	; (800a560 <USBD_SetConfig+0x150>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff f838 	bl	8009536 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fa06 	bl	800a8d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4cc:	e042      	b.n	800a554 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a4ce:	4b24      	ldr	r3, [pc, #144]	; (800a560 <USBD_SetConfig+0x150>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d02a      	beq.n	800a532 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff f826 	bl	8009536 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4ea:	4b1d      	ldr	r3, [pc, #116]	; (800a560 <USBD_SetConfig+0x150>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4f4:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <USBD_SetConfig+0x150>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7fe ffff 	bl	80094fe <USBD_SetClassConfig>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00f      	beq.n	800a52a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f918 	bl	800a742 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff f80b 	bl	8009536 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a528:	e014      	b.n	800a554 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f9d4 	bl	800a8d8 <USBD_CtlSendStatus>
      break;
 800a530:	e010      	b.n	800a554 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f9d0 	bl	800a8d8 <USBD_CtlSendStatus>
      break;
 800a538:	e00c      	b.n	800a554 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f900 	bl	800a742 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a542:	4b07      	ldr	r3, [pc, #28]	; (800a560 <USBD_SetConfig+0x150>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fe fff4 	bl	8009536 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a54e:	2303      	movs	r3, #3
 800a550:	73fb      	strb	r3, [r7, #15]
      break;
 800a552:	bf00      	nop
  }

  return ret;
 800a554:	7bfb      	ldrb	r3, [r7, #15]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200002f8 	.word	0x200002f8

0800a564 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	88db      	ldrh	r3, [r3, #6]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d004      	beq.n	800a580 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f8e2 	bl	800a742 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a57e:	e023      	b.n	800a5c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	dc02      	bgt.n	800a592 <USBD_GetConfig+0x2e>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dc03      	bgt.n	800a598 <USBD_GetConfig+0x34>
 800a590:	e015      	b.n	800a5be <USBD_GetConfig+0x5a>
 800a592:	2b03      	cmp	r3, #3
 800a594:	d00b      	beq.n	800a5ae <USBD_GetConfig+0x4a>
 800a596:	e012      	b.n	800a5be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f93c 	bl	800a824 <USBD_CtlSendData>
        break;
 800a5ac:	e00c      	b.n	800a5c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f934 	bl	800a824 <USBD_CtlSendData>
        break;
 800a5bc:	e004      	b.n	800a5c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f8be 	bl	800a742 <USBD_CtlError>
        break;
 800a5c6:	bf00      	nop
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d81e      	bhi.n	800a626 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	88db      	ldrh	r3, [r3, #6]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d004      	beq.n	800a5fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f8a5 	bl	800a742 <USBD_CtlError>
        break;
 800a5f8:	e01a      	b.n	800a630 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a606:	2b00      	cmp	r3, #0
 800a608:	d005      	beq.n	800a616 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	f043 0202 	orr.w	r2, r3, #2
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	330c      	adds	r3, #12
 800a61a:	2202      	movs	r2, #2
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f900 	bl	800a824 <USBD_CtlSendData>
      break;
 800a624:	e004      	b.n	800a630 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f88a 	bl	800a742 <USBD_CtlError>
      break;
 800a62e:	bf00      	nop
  }
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	885b      	ldrh	r3, [r3, #2]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d107      	bne.n	800a65a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f940 	bl	800a8d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a658:	e013      	b.n	800a682 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	885b      	ldrh	r3, [r3, #2]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d10b      	bne.n	800a67a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	889b      	ldrh	r3, [r3, #4]
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b29b      	uxth	r3, r3
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f930 	bl	800a8d8 <USBD_CtlSendStatus>
}
 800a678:	e003      	b.n	800a682 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f860 	bl	800a742 <USBD_CtlError>
}
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b082      	sub	sp, #8
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	3b01      	subs	r3, #1
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d80b      	bhi.n	800a6ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	885b      	ldrh	r3, [r3, #2]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d10c      	bne.n	800a6c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f910 	bl	800a8d8 <USBD_CtlSendStatus>
      }
      break;
 800a6b8:	e004      	b.n	800a6c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f840 	bl	800a742 <USBD_CtlError>
      break;
 800a6c2:	e000      	b.n	800a6c6 <USBD_ClrFeature+0x3c>
      break;
 800a6c4:	bf00      	nop
  }
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	781a      	ldrb	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fa17 	bl	8009b2c <SWAPBYTE>
 800a6fe:	4603      	mov	r3, r0
 800a700:	461a      	mov	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3301      	adds	r3, #1
 800a70a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3301      	adds	r3, #1
 800a710:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff fa0a 	bl	8009b2c <SWAPBYTE>
 800a718:	4603      	mov	r3, r0
 800a71a:	461a      	mov	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3301      	adds	r3, #1
 800a724:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff f9fd 	bl	8009b2c <SWAPBYTE>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	80da      	strh	r2, [r3, #6]
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a74c:	2180      	movs	r1, #128	; 0x80
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fcda 	bl	800b108 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a754:	2100      	movs	r1, #0
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fcd6 	bl	800b108 <USBD_LL_StallEP>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a770:	2300      	movs	r3, #0
 800a772:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d036      	beq.n	800a7e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a77e:	6938      	ldr	r0, [r7, #16]
 800a780:	f000 f836 	bl	800a7f0 <USBD_GetLen>
 800a784:	4603      	mov	r3, r0
 800a786:	3301      	adds	r3, #1
 800a788:	b29b      	uxth	r3, r3
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4413      	add	r3, r2
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a79e:	7dfb      	ldrb	r3, [r7, #23]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	2203      	movs	r2, #3
 800a7ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7b4:	e013      	b.n	800a7de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	7812      	ldrb	r2, [r2, #0]
 800a7c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	613b      	str	r3, [r7, #16]
    idx++;
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1e7      	bne.n	800a7b6 <USBD_GetString+0x52>
 800a7e6:	e000      	b.n	800a7ea <USBD_GetString+0x86>
    return;
 800a7e8:	bf00      	nop
  }
}
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a800:	e005      	b.n	800a80e <USBD_GetLen+0x1e>
  {
    len++;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	3301      	adds	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	3301      	adds	r3, #1
 800a80c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1f5      	bne.n	800a802 <USBD_GetLen+0x12>
  }

  return len;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2202      	movs	r2, #2
 800a834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	2100      	movs	r1, #0
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f000 fce6 	bl	800b21c <USBD_LL_Transmit>

  return USBD_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	2100      	movs	r1, #0
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f000 fcd5 	bl	800b21c <USBD_LL_Transmit>

  return USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2203      	movs	r2, #3
 800a88c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 fcd9 	bl	800b25e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 fcc8 	bl	800b25e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fc94 	bl	800b21c <USBD_LL_Transmit>

  return USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2205      	movs	r2, #5
 800a90a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a90e:	2300      	movs	r3, #0
 800a910:	2200      	movs	r2, #0
 800a912:	2100      	movs	r1, #0
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fca2 	bl	800b25e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a928:	2200      	movs	r2, #0
 800a92a:	4912      	ldr	r1, [pc, #72]	; (800a974 <MX_USB_Device_Init+0x50>)
 800a92c:	4812      	ldr	r0, [pc, #72]	; (800a978 <MX_USB_Device_Init+0x54>)
 800a92e:	f7fe fd69 	bl	8009404 <USBD_Init>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a938:	f7f6 f972 	bl	8000c20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a93c:	490f      	ldr	r1, [pc, #60]	; (800a97c <MX_USB_Device_Init+0x58>)
 800a93e:	480e      	ldr	r0, [pc, #56]	; (800a978 <MX_USB_Device_Init+0x54>)
 800a940:	f7fe fd90 	bl	8009464 <USBD_RegisterClass>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a94a:	f7f6 f969 	bl	8000c20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a94e:	490c      	ldr	r1, [pc, #48]	; (800a980 <MX_USB_Device_Init+0x5c>)
 800a950:	4809      	ldr	r0, [pc, #36]	; (800a978 <MX_USB_Device_Init+0x54>)
 800a952:	f7fe fc87 	bl	8009264 <USBD_CDC_RegisterInterface>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a95c:	f7f6 f960 	bl	8000c20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a960:	4805      	ldr	r0, [pc, #20]	; (800a978 <MX_USB_Device_Init+0x54>)
 800a962:	f7fe fdb5 	bl	80094d0 <USBD_Start>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a96c:	f7f6 f958 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a970:	bf00      	nop
 800a972:	bd80      	pop	{r7, pc}
 800a974:	200000b4 	.word	0x200000b4
 800a978:	200002fc 	.word	0x200002fc
 800a97c:	20000020 	.word	0x20000020
 800a980:	200000a0 	.word	0x200000a0

0800a984 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a988:	2200      	movs	r2, #0
 800a98a:	4905      	ldr	r1, [pc, #20]	; (800a9a0 <CDC_Init_FS+0x1c>)
 800a98c:	4805      	ldr	r0, [pc, #20]	; (800a9a4 <CDC_Init_FS+0x20>)
 800a98e:	f7fe fc83 	bl	8009298 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a992:	4905      	ldr	r1, [pc, #20]	; (800a9a8 <CDC_Init_FS+0x24>)
 800a994:	4803      	ldr	r0, [pc, #12]	; (800a9a4 <CDC_Init_FS+0x20>)
 800a996:	f7fe fca1 	bl	80092dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a99a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20000dd8 	.word	0x20000dd8
 800a9a4:	200002fc 	.word	0x200002fc
 800a9a8:	200005d8 	.word	0x200005d8

0800a9ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	6039      	str	r1, [r7, #0]
 800a9c6:	71fb      	strb	r3, [r7, #7]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	2b23      	cmp	r3, #35	; 0x23
 800a9d0:	d84a      	bhi.n	800aa68 <CDC_Control_FS+0xac>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <CDC_Control_FS+0x1c>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aa69 	.word	0x0800aa69
 800a9dc:	0800aa69 	.word	0x0800aa69
 800a9e0:	0800aa69 	.word	0x0800aa69
 800a9e4:	0800aa69 	.word	0x0800aa69
 800a9e8:	0800aa69 	.word	0x0800aa69
 800a9ec:	0800aa69 	.word	0x0800aa69
 800a9f0:	0800aa69 	.word	0x0800aa69
 800a9f4:	0800aa69 	.word	0x0800aa69
 800a9f8:	0800aa69 	.word	0x0800aa69
 800a9fc:	0800aa69 	.word	0x0800aa69
 800aa00:	0800aa69 	.word	0x0800aa69
 800aa04:	0800aa69 	.word	0x0800aa69
 800aa08:	0800aa69 	.word	0x0800aa69
 800aa0c:	0800aa69 	.word	0x0800aa69
 800aa10:	0800aa69 	.word	0x0800aa69
 800aa14:	0800aa69 	.word	0x0800aa69
 800aa18:	0800aa69 	.word	0x0800aa69
 800aa1c:	0800aa69 	.word	0x0800aa69
 800aa20:	0800aa69 	.word	0x0800aa69
 800aa24:	0800aa69 	.word	0x0800aa69
 800aa28:	0800aa69 	.word	0x0800aa69
 800aa2c:	0800aa69 	.word	0x0800aa69
 800aa30:	0800aa69 	.word	0x0800aa69
 800aa34:	0800aa69 	.word	0x0800aa69
 800aa38:	0800aa69 	.word	0x0800aa69
 800aa3c:	0800aa69 	.word	0x0800aa69
 800aa40:	0800aa69 	.word	0x0800aa69
 800aa44:	0800aa69 	.word	0x0800aa69
 800aa48:	0800aa69 	.word	0x0800aa69
 800aa4c:	0800aa69 	.word	0x0800aa69
 800aa50:	0800aa69 	.word	0x0800aa69
 800aa54:	0800aa69 	.word	0x0800aa69
 800aa58:	0800aa69 	.word	0x0800aa69
 800aa5c:	0800aa69 	.word	0x0800aa69
 800aa60:	0800aa69 	.word	0x0800aa69
 800aa64:	0800aa69 	.word	0x0800aa69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa68:	bf00      	nop
  }

  return (USBD_OK);
 800aa6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4805      	ldr	r0, [pc, #20]	; (800aa9c <CDC_Receive_FS+0x24>)
 800aa86:	f7fe fc29 	bl	80092dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa8a:	4804      	ldr	r0, [pc, #16]	; (800aa9c <CDC_Receive_FS+0x24>)
 800aa8c:	f7fe fc84 	bl	8009398 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aa90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200002fc 	.word	0x200002fc

0800aaa0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <CDC_Transmit_FS+0x48>)
 800aab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aab6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e00b      	b.n	800aade <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aac6:	887b      	ldrh	r3, [r7, #2]
 800aac8:	461a      	mov	r2, r3
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	4806      	ldr	r0, [pc, #24]	; (800aae8 <CDC_Transmit_FS+0x48>)
 800aace:	f7fe fbe3 	bl	8009298 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aad2:	4805      	ldr	r0, [pc, #20]	; (800aae8 <CDC_Transmit_FS+0x48>)
 800aad4:	f7fe fc20 	bl	8009318 <USBD_CDC_TransmitPacket>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	200002fc 	.word	0x200002fc

0800aaec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	371c      	adds	r7, #28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
	...

0800ab10 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	6039      	str	r1, [r7, #0]
 800ab1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2212      	movs	r2, #18
 800ab20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ab22:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	200000d4 	.word	0x200000d4

0800ab34 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	6039      	str	r1, [r7, #0]
 800ab3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2204      	movs	r2, #4
 800ab44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab46:	4b03      	ldr	r3, [pc, #12]	; (800ab54 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	200000e8 	.word	0x200000e8

0800ab58 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	6039      	str	r1, [r7, #0]
 800ab62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab64:	79fb      	ldrb	r3, [r7, #7]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d105      	bne.n	800ab76 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	4907      	ldr	r1, [pc, #28]	; (800ab8c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab6e:	4808      	ldr	r0, [pc, #32]	; (800ab90 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ab70:	f7ff fdf8 	bl	800a764 <USBD_GetString>
 800ab74:	e004      	b.n	800ab80 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	4904      	ldr	r1, [pc, #16]	; (800ab8c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ab7a:	4805      	ldr	r0, [pc, #20]	; (800ab90 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ab7c:	f7ff fdf2 	bl	800a764 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab80:	4b02      	ldr	r3, [pc, #8]	; (800ab8c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	200015d8 	.word	0x200015d8
 800ab90:	080163a0 	.word	0x080163a0

0800ab94 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	6039      	str	r1, [r7, #0]
 800ab9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	4904      	ldr	r1, [pc, #16]	; (800abb4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800aba4:	4804      	ldr	r0, [pc, #16]	; (800abb8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800aba6:	f7ff fddd 	bl	800a764 <USBD_GetString>
  return USBD_StrDesc;
 800abaa:	4b02      	ldr	r3, [pc, #8]	; (800abb4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	200015d8 	.word	0x200015d8
 800abb8:	080163b8 	.word	0x080163b8

0800abbc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	6039      	str	r1, [r7, #0]
 800abc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	221a      	movs	r2, #26
 800abcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800abce:	f000 f843 	bl	800ac58 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800abd2:	4b02      	ldr	r3, [pc, #8]	; (800abdc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200000ec 	.word	0x200000ec

0800abe0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d105      	bne.n	800abfe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	4907      	ldr	r1, [pc, #28]	; (800ac14 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800abf6:	4808      	ldr	r0, [pc, #32]	; (800ac18 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800abf8:	f7ff fdb4 	bl	800a764 <USBD_GetString>
 800abfc:	e004      	b.n	800ac08 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	4904      	ldr	r1, [pc, #16]	; (800ac14 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ac02:	4805      	ldr	r0, [pc, #20]	; (800ac18 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ac04:	f7ff fdae 	bl	800a764 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac08:	4b02      	ldr	r3, [pc, #8]	; (800ac14 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	200015d8 	.word	0x200015d8
 800ac18:	080163cc 	.word	0x080163cc

0800ac1c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	6039      	str	r1, [r7, #0]
 800ac26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac28:	79fb      	ldrb	r3, [r7, #7]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d105      	bne.n	800ac3a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	4907      	ldr	r1, [pc, #28]	; (800ac50 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac32:	4808      	ldr	r0, [pc, #32]	; (800ac54 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac34:	f7ff fd96 	bl	800a764 <USBD_GetString>
 800ac38:	e004      	b.n	800ac44 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	4904      	ldr	r1, [pc, #16]	; (800ac50 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ac3e:	4805      	ldr	r0, [pc, #20]	; (800ac54 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ac40:	f7ff fd90 	bl	800a764 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	200015d8 	.word	0x200015d8
 800ac54:	080163d8 	.word	0x080163d8

0800ac58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <Get_SerialNum+0x44>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac64:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <Get_SerialNum+0x48>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac6a:	4b0e      	ldr	r3, [pc, #56]	; (800aca4 <Get_SerialNum+0x4c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4413      	add	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d009      	beq.n	800ac92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac7e:	2208      	movs	r2, #8
 800ac80:	4909      	ldr	r1, [pc, #36]	; (800aca8 <Get_SerialNum+0x50>)
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 f814 	bl	800acb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac88:	2204      	movs	r2, #4
 800ac8a:	4908      	ldr	r1, [pc, #32]	; (800acac <Get_SerialNum+0x54>)
 800ac8c:	68b8      	ldr	r0, [r7, #8]
 800ac8e:	f000 f80f 	bl	800acb0 <IntToUnicode>
  }
}
 800ac92:	bf00      	nop
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	1fff7590 	.word	0x1fff7590
 800aca0:	1fff7594 	.word	0x1fff7594
 800aca4:	1fff7598 	.word	0x1fff7598
 800aca8:	200000ee 	.word	0x200000ee
 800acac:	200000fe 	.word	0x200000fe

0800acb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b087      	sub	sp, #28
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	4613      	mov	r3, r2
 800acbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acc2:	2300      	movs	r3, #0
 800acc4:	75fb      	strb	r3, [r7, #23]
 800acc6:	e027      	b.n	800ad18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	0f1b      	lsrs	r3, r3, #28
 800accc:	2b09      	cmp	r3, #9
 800acce:	d80b      	bhi.n	800ace8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	0f1b      	lsrs	r3, r3, #28
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	4619      	mov	r1, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	440b      	add	r3, r1
 800ace0:	3230      	adds	r2, #48	; 0x30
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	e00a      	b.n	800acfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	0f1b      	lsrs	r3, r3, #28
 800acec:	b2da      	uxtb	r2, r3
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	4619      	mov	r1, r3
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	440b      	add	r3, r1
 800acf8:	3237      	adds	r2, #55	; 0x37
 800acfa:	b2d2      	uxtb	r2, r2
 800acfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	011b      	lsls	r3, r3, #4
 800ad02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad04:	7dfb      	ldrb	r3, [r7, #23]
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	3301      	adds	r3, #1
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	2200      	movs	r2, #0
 800ad10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	3301      	adds	r3, #1
 800ad16:	75fb      	strb	r3, [r7, #23]
 800ad18:	7dfa      	ldrb	r2, [r7, #23]
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d3d3      	bcc.n	800acc8 <IntToUnicode+0x18>
  }
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <LL_AHB2_GRP1_EnableClock>:
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ad36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ad46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ad52:	68fb      	ldr	r3, [r7, #12]
}
 800ad54:	bf00      	nop
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <LL_APB1_GRP1_EnableClock>:
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ad68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ad78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4013      	ands	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ad84:	68fb      	ldr	r3, [r7, #12]
}
 800ad86:	bf00      	nop
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
	...

0800ad94 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b09c      	sub	sp, #112	; 0x70
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	605a      	str	r2, [r3, #4]
 800ada6:	609a      	str	r2, [r3, #8]
 800ada8:	60da      	str	r2, [r3, #12]
 800adaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800adac:	f107 030c 	add.w	r3, r7, #12
 800adb0:	2250      	movs	r2, #80	; 0x50
 800adb2:	2100      	movs	r1, #0
 800adb4:	4618      	mov	r0, r3
 800adb6:	f00a fde3 	bl	8015980 <memset>
  if(pcdHandle->Instance==USB)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a1b      	ldr	r2, [pc, #108]	; (800ae2c <HAL_PCD_MspInit+0x98>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d12f      	bne.n	800ae24 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800adc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adc8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800adca:	2300      	movs	r3, #0
 800adcc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	4618      	mov	r0, r3
 800add4:	f7fa f8c5 	bl	8004f62 <HAL_RCCEx_PeriphCLKConfig>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800adde:	f7f5 ff1f 	bl	8000c20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ade2:	2001      	movs	r0, #1
 800ade4:	f7ff ffa3 	bl	800ad2e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ade8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800adec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adee:	2302      	movs	r3, #2
 800adf0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adf6:	2300      	movs	r3, #0
 800adf8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800adfa:	230a      	movs	r3, #10
 800adfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ae02:	4619      	mov	r1, r3
 800ae04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae08:	f7f6 fd2c 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae0c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ae10:	f7ff ffa6 	bl	800ad60 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ae14:	2200      	movs	r2, #0
 800ae16:	2100      	movs	r1, #0
 800ae18:	2014      	movs	r0, #20
 800ae1a:	f7f6 fb32 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae1e:	2014      	movs	r0, #20
 800ae20:	f7f6 fb49 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae24:	bf00      	nop
 800ae26:	3770      	adds	r7, #112	; 0x70
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	40006800 	.word	0x40006800

0800ae30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae44:	4619      	mov	r1, r3
 800ae46:	4610      	mov	r0, r2
 800ae48:	f7fe fb8f 	bl	800956a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	440b      	add	r3, r1
 800ae74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	78fb      	ldrb	r3, [r7, #3]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7fe fbc9 	bl	8009614 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ae9c:	78fa      	ldrb	r2, [r7, #3]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	440b      	add	r3, r1
 800aeaa:	333c      	adds	r3, #60	; 0x3c
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f7fe fc62 	bl	800977a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fd9c 	bl	8009a0a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aee2:	2301      	movs	r3, #1
 800aee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d001      	beq.n	800aef2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aeee:	f7f5 fe97 	bl	8000c20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aef8:	7bfa      	ldrb	r2, [r7, #15]
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fd40 	bl	8009982 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe fce8 	bl	80098de <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af0e:	bf00      	nop
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fd3b 	bl	80099a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <HAL_PCD_SuspendCallback+0x30>)
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	4a03      	ldr	r2, [pc, #12]	; (800af48 <HAL_PCD_SuspendCallback+0x30>)
 800af3a:	f043 0306 	orr.w	r3, r3, #6
 800af3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	e000ed00 	.word	0xe000ed00

0800af4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d007      	beq.n	800af6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af5c:	4b08      	ldr	r3, [pc, #32]	; (800af80 <HAL_PCD_ResumeCallback+0x34>)
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	4a07      	ldr	r2, [pc, #28]	; (800af80 <HAL_PCD_ResumeCallback+0x34>)
 800af62:	f023 0306 	bic.w	r3, r3, #6
 800af66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800af68:	f000 f9fc 	bl	800b364 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800af72:	4618      	mov	r0, r3
 800af74:	f7fe fd31 	bl	80099da <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800af78:	bf00      	nop
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	e000ed00 	.word	0xe000ed00

0800af84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800af8c:	4a2c      	ldr	r2, [pc, #176]	; (800b040 <USBD_LL_Init+0xbc>)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a2a      	ldr	r2, [pc, #168]	; (800b040 <USBD_LL_Init+0xbc>)
 800af98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800af9c:	f7f8 fcaa 	bl	80038f4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800afa0:	4b27      	ldr	r3, [pc, #156]	; (800b040 <USBD_LL_Init+0xbc>)
 800afa2:	4a28      	ldr	r2, [pc, #160]	; (800b044 <USBD_LL_Init+0xc0>)
 800afa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afa6:	4b26      	ldr	r3, [pc, #152]	; (800b040 <USBD_LL_Init+0xbc>)
 800afa8:	2208      	movs	r2, #8
 800afaa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afac:	4b24      	ldr	r3, [pc, #144]	; (800b040 <USBD_LL_Init+0xbc>)
 800afae:	2202      	movs	r2, #2
 800afb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800afb2:	4b23      	ldr	r3, [pc, #140]	; (800b040 <USBD_LL_Init+0xbc>)
 800afb4:	2202      	movs	r2, #2
 800afb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800afb8:	4b21      	ldr	r3, [pc, #132]	; (800b040 <USBD_LL_Init+0xbc>)
 800afba:	2200      	movs	r2, #0
 800afbc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afbe:	4b20      	ldr	r3, [pc, #128]	; (800b040 <USBD_LL_Init+0xbc>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800afc4:	4b1e      	ldr	r3, [pc, #120]	; (800b040 <USBD_LL_Init+0xbc>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800afca:	4b1d      	ldr	r3, [pc, #116]	; (800b040 <USBD_LL_Init+0xbc>)
 800afcc:	2200      	movs	r2, #0
 800afce:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800afd0:	481b      	ldr	r0, [pc, #108]	; (800b040 <USBD_LL_Init+0xbc>)
 800afd2:	f7f6 ff2d 	bl	8001e30 <HAL_PCD_Init>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800afdc:	f7f5 fe20 	bl	8000c20 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800afe6:	2318      	movs	r3, #24
 800afe8:	2200      	movs	r2, #0
 800afea:	2100      	movs	r1, #0
 800afec:	f7f8 fbf6 	bl	80037dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aff6:	2358      	movs	r3, #88	; 0x58
 800aff8:	2200      	movs	r2, #0
 800affa:	2180      	movs	r1, #128	; 0x80
 800affc:	f7f8 fbee 	bl	80037dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b006:	23c0      	movs	r3, #192	; 0xc0
 800b008:	2200      	movs	r2, #0
 800b00a:	2181      	movs	r1, #129	; 0x81
 800b00c:	f7f8 fbe6 	bl	80037dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b016:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b01a:	2200      	movs	r2, #0
 800b01c:	2101      	movs	r1, #1
 800b01e:	f7f8 fbdd 	bl	80037dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b02c:	2200      	movs	r2, #0
 800b02e:	2182      	movs	r1, #130	; 0x82
 800b030:	f7f8 fbd4 	bl	80037dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	200017d8 	.word	0x200017d8
 800b044:	40006800 	.word	0x40006800

0800b048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b05e:	4618      	mov	r0, r3
 800b060:	f7f6 ffbf 	bl	8001fe2 <HAL_PCD_Start>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 f980 	bl	800b370 <USBD_Get_USB_Status>
 800b070:	4603      	mov	r3, r0
 800b072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b074:	7bbb      	ldrb	r3, [r7, #14]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	4608      	mov	r0, r1
 800b088:	4611      	mov	r1, r2
 800b08a:	461a      	mov	r2, r3
 800b08c:	4603      	mov	r3, r0
 800b08e:	70fb      	strb	r3, [r7, #3]
 800b090:	460b      	mov	r3, r1
 800b092:	70bb      	strb	r3, [r7, #2]
 800b094:	4613      	mov	r3, r2
 800b096:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0a6:	78bb      	ldrb	r3, [r7, #2]
 800b0a8:	883a      	ldrh	r2, [r7, #0]
 800b0aa:	78f9      	ldrb	r1, [r7, #3]
 800b0ac:	f7f7 f907 	bl	80022be <HAL_PCD_EP_Open>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f95a 	bl	800b370 <USBD_Get_USB_Status>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0e4:	78fa      	ldrb	r2, [r7, #3]
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7f7 f945 	bl	8002378 <HAL_PCD_EP_Close>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 f93b 	bl	800b370 <USBD_Get_USB_Status>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b122:	78fa      	ldrb	r2, [r7, #3]
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7f7 f9ee 	bl	8002508 <HAL_PCD_EP_SetStall>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	4618      	mov	r0, r3
 800b134:	f000 f91c 	bl	800b370 <USBD_Get_USB_Status>
 800b138:	4603      	mov	r3, r0
 800b13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	460b      	mov	r3, r1
 800b150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	4611      	mov	r1, r2
 800b164:	4618      	mov	r0, r3
 800b166:	f7f7 fa21 	bl	80025ac <HAL_PCD_EP_ClrStall>
 800b16a:	4603      	mov	r3, r0
 800b16c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	4618      	mov	r0, r3
 800b172:	f000 f8fd 	bl	800b370 <USBD_Get_USB_Status>
 800b176:	4603      	mov	r3, r0
 800b178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b196:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da0c      	bge.n	800b1ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a6:	68f9      	ldr	r1, [r7, #12]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	440b      	add	r3, r1
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	e00b      	b.n	800b1d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1c0:	68f9      	ldr	r1, [r7, #12]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	440b      	add	r3, r1
 800b1cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b1d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1f8:	78fa      	ldrb	r2, [r7, #3]
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7f7 f839 	bl	8002274 <HAL_PCD_SetAddress>
 800b202:	4603      	mov	r3, r0
 800b204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 f8b1 	bl	800b370 <USBD_Get_USB_Status>
 800b20e:	4603      	mov	r3, r0
 800b210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b212:	7bbb      	ldrb	r3, [r7, #14]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	607a      	str	r2, [r7, #4]
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	460b      	mov	r3, r1
 800b22a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b23a:	7af9      	ldrb	r1, [r7, #11]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	f7f7 f92b 	bl	800249a <HAL_PCD_EP_Transmit>
 800b244:	4603      	mov	r3, r0
 800b246:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 f890 	bl	800b370 <USBD_Get_USB_Status>
 800b250:	4603      	mov	r3, r0
 800b252:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b254:	7dbb      	ldrb	r3, [r7, #22]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b086      	sub	sp, #24
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
 800b26a:	460b      	mov	r3, r1
 800b26c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b27c:	7af9      	ldrb	r1, [r7, #11]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	f7f7 f8c1 	bl	8002408 <HAL_PCD_EP_Receive>
 800b286:	4603      	mov	r3, r0
 800b288:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 f86f 	bl	800b370 <USBD_Get_USB_Status>
 800b292:	4603      	mov	r3, r0
 800b294:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b296:	7dbb      	ldrb	r3, [r7, #22]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2b2:	78fa      	ldrb	r2, [r7, #3]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7f7 f8d7 	bl	800246a <HAL_PCD_EP_GetRxCount>
 800b2bc:	4603      	mov	r3, r0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <HAL_PCDEx_LPM_Callback+0x18>
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d013      	beq.n	800b306 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b2de:	e023      	b.n	800b328 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d007      	beq.n	800b2f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b2e8:	f000 f83c 	bl	800b364 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2ec:	4b10      	ldr	r3, [pc, #64]	; (800b330 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	4a0f      	ldr	r2, [pc, #60]	; (800b330 <HAL_PCDEx_LPM_Callback+0x68>)
 800b2f2:	f023 0306 	bic.w	r3, r3, #6
 800b2f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fb6b 	bl	80099da <USBD_LL_Resume>
    break;
 800b304:	e010      	b.n	800b328 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fb48 	bl	80099a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b31a:	4b05      	ldr	r3, [pc, #20]	; (800b330 <HAL_PCDEx_LPM_Callback+0x68>)
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	4a04      	ldr	r2, [pc, #16]	; (800b330 <HAL_PCDEx_LPM_Callback+0x68>)
 800b320:	f043 0306 	orr.w	r3, r3, #6
 800b324:	6113      	str	r3, [r2, #16]
    break;
 800b326:	bf00      	nop
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	e000ed00 	.word	0xe000ed00

0800b334 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b33c:	4b03      	ldr	r3, [pc, #12]	; (800b34c <USBD_static_malloc+0x18>)
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	20001acc 	.word	0x20001acc

0800b350 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b368:	f7f5 facc 	bl	8000904 <SystemClock_Config>
}
 800b36c:	bf00      	nop
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d817      	bhi.n	800b3b4 <USBD_Get_USB_Status+0x44>
 800b384:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <USBD_Get_USB_Status+0x1c>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b39d 	.word	0x0800b39d
 800b390:	0800b3a3 	.word	0x0800b3a3
 800b394:	0800b3a9 	.word	0x0800b3a9
 800b398:	0800b3af 	.word	0x0800b3af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a0:	e00b      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a6:	e008      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	e005      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b2:	e002      	b.n	800b3ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b8:	bf00      	nop
  }
  return usb_status;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <br_dec32le>:
#include <stdint.h>
#include <string.h>
#include "aes256ctr.h"

static inline uint32_t br_dec32le(const uint8_t *src)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	return (uint32_t)src[0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	461a      	mov	r2, r3
		| ((uint32_t)src[1] << 8)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	021b      	lsls	r3, r3, #8
 800b3de:	431a      	orrs	r2, r3
		| ((uint32_t)src[2] << 16)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3302      	adds	r3, #2
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	431a      	orrs	r2, r3
		| ((uint32_t)src[3] << 24);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3303      	adds	r3, #3
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	061b      	lsls	r3, r3, #24
 800b3f2:	4313      	orrs	r3, r2
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <br_range_dec32le>:

static void br_range_dec32le(uint32_t *v, size_t num, const uint8_t *src)
{
 800b400:	b590      	push	{r4, r7, lr}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b40c:	e00a      	b.n	800b424 <br_range_dec32le+0x24>
		*v ++ = br_dec32le(src);
 800b40e:	68fc      	ldr	r4, [r7, #12]
 800b410:	1d23      	adds	r3, r4, #4
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ffd7 	bl	800b3c8 <br_dec32le>
 800b41a:	4603      	mov	r3, r0
 800b41c:	6023      	str	r3, [r4, #0]
		src += 4;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3304      	adds	r3, #4
 800b422:	607b      	str	r3, [r7, #4]
	while (num-- > 0) {
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	1e5a      	subs	r2, r3, #1
 800b428:	60ba      	str	r2, [r7, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1ef      	bne.n	800b40e <br_range_dec32le+0xe>
	}
}
 800b42e:	bf00      	nop
 800b430:	bf00      	nop
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	bd90      	pop	{r4, r7, pc}

0800b438 <br_swap32>:

static inline uint32_t br_swap32(uint32_t x)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
		| ((x >> 8) & (uint32_t)0x00FF00FF);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	0a1b      	lsrs	r3, r3, #8
 800b44c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b450:	4313      	orrs	r3, r2
 800b452:	607b      	str	r3, [r7, #4]
	return (x << 16) | (x >> 16);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	ea4f 4333 	mov.w	r3, r3, ror #16
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <br_enc32le>:

static inline void br_enc32le(uint8_t *dst, uint32_t x)
{
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
	dst[0] = (uint8_t)x;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	b2da      	uxtb	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	701a      	strb	r2, [r3, #0]
	dst[1] = (uint8_t)(x >> 8);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	0a1a      	lsrs	r2, r3, #8
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3301      	adds	r3, #1
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	701a      	strb	r2, [r3, #0]
	dst[2] = (uint8_t)(x >> 16);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	0c1a      	lsrs	r2, r3, #16
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3302      	adds	r3, #2
 800b48c:	b2d2      	uxtb	r2, r2
 800b48e:	701a      	strb	r2, [r3, #0]
	dst[3] = (uint8_t)(x >> 24);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	0e1a      	lsrs	r2, r3, #24
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	3303      	adds	r3, #3
 800b498:	b2d2      	uxtb	r2, r2
 800b49a:	701a      	strb	r2, [r3, #0]
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <br_range_enc32le>:

static void br_range_enc32le(uint8_t *dst, const uint32_t *v, size_t num)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b4b4:	e00a      	b.n	800b4cc <br_range_enc32le+0x24>
		br_enc32le(dst, *v ++);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	1d1a      	adds	r2, r3, #4
 800b4ba:	60ba      	str	r2, [r7, #8]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7ff ffd0 	bl	800b466 <br_enc32le>
		dst += 4;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	60fb      	str	r3, [r7, #12]
	while (num-- > 0) {
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	1e5a      	subs	r2, r3, #1
 800b4d0:	607a      	str	r2, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1ef      	bne.n	800b4b6 <br_range_enc32le+0xe>
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	bf00      	nop
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <br_aes_ct64_bitslice_Sbox>:

static void br_aes_ct64_bitslice_Sbox(uint64_t *q)
{
 800b4e0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b4e4:	f2ad 7d84 	subw	sp, sp, #1924	; 0x784
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b4ee:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b4f2:	6018      	str	r0, [r3, #0]
	uint64_t t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	uint64_t t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	uint64_t t60, t61, t62, t63, t64, t65, t66, t67;
	uint64_t s0, s1, s2, s3, s4, s5, s6, s7;

	x0 = q[7];
 800b4f4:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b4f8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b502:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 800b506:	e9c1 2300 	strd	r2, r3, [r1]
	x1 = q[6];
 800b50a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b50e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b518:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 800b51c:	e9c1 2300 	strd	r2, r3, [r1]
	x2 = q[5];
 800b520:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b524:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800b52e:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800b532:	e9c1 2300 	strd	r2, r3, [r1]
	x3 = q[4];
 800b536:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b53a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b544:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800b548:	e9c1 2300 	strd	r2, r3, [r1]
	x4 = q[3];
 800b54c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b550:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b55a:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800b55e:	e9c1 2300 	strd	r2, r3, [r1]
	x5 = q[2];
 800b562:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b566:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b570:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800b574:	e9c1 2300 	strd	r2, r3, [r1]
	x6 = q[1];
 800b578:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b57c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b586:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800b58a:	e9c1 2300 	strd	r2, r3, [r1]
	x7 = q[0];
 800b58e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b592:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800b5a0:	e9c1 2300 	strd	r2, r3, [r1]

	/*
	 * Top linear transformation.
	 */
	y14 = x3 ^ x5;
 800b5a4:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b5a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5ac:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	ea80 0402 	eor.w	r4, r0, r2
 800b5b8:	ea81 0503 	eor.w	r5, r1, r3
 800b5bc:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b5c0:	e9c3 4500 	strd	r4, r5, [r3]
	y13 = x0 ^ x6;
 800b5c4:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b5c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5cc:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	ea80 0802 	eor.w	r8, r0, r2
 800b5d8:	ea81 0903 	eor.w	r9, r1, r3
 800b5dc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b5e0:	e9c3 8900 	strd	r8, r9, [r3]
	y9 = x0 ^ x3;
 800b5e4:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b5e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5ec:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	ea80 0a02 	eor.w	sl, r0, r2
 800b5f8:	ea81 0b03 	eor.w	fp, r1, r3
 800b5fc:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800b600:	e9c3 ab00 	strd	sl, fp, [r3]
	y8 = x0 ^ x5;
 800b604:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b60c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	ea80 0402 	eor.w	r4, r0, r2
 800b618:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 800b61c:	404b      	eors	r3, r1
 800b61e:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800b622:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 800b626:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800b62a:	e9c2 3400 	strd	r3, r4, [r2]
	t0 = x1 ^ x2;
 800b62e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800b632:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b636:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	ea80 0402 	eor.w	r4, r0, r2
 800b642:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800b646:	404b      	eors	r3, r1
 800b648:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800b64c:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 800b650:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800b654:	e9c2 3400 	strd	r3, r4, [r2]
	y1 = t0 ^ x7;
 800b658:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b65c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b660:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	ea80 0402 	eor.w	r4, r0, r2
 800b66c:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 800b670:	404b      	eors	r3, r1
 800b672:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800b676:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 800b67a:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 800b67e:	e9c2 3400 	strd	r3, r4, [r2]
	y4 = y1 ^ x3;
 800b682:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b68a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	ea80 0402 	eor.w	r4, r0, r2
 800b696:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800b69a:	404b      	eors	r3, r1
 800b69c:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b6a0:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 800b6a4:	f507 62e1 	add.w	r2, r7, #1800	; 0x708
 800b6a8:	e9c2 3400 	strd	r3, r4, [r2]
	y12 = y13 ^ y14;
 800b6ac:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b6b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6b4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	ea80 0402 	eor.w	r4, r0, r2
 800b6c0:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 800b6c4:	404b      	eors	r3, r1
 800b6c6:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800b6ca:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 800b6ce:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 800b6d2:	e9c2 3400 	strd	r3, r4, [r2]
	y2 = y1 ^ x0;
 800b6d6:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b6da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6de:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	ea80 0402 	eor.w	r4, r0, r2
 800b6ea:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800b6ee:	404b      	eors	r3, r1
 800b6f0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b6f4:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800b6f8:	f507 62df 	add.w	r2, r7, #1784	; 0x6f8
 800b6fc:	e9c2 3400 	strd	r3, r4, [r2]
	y5 = y1 ^ x6;
 800b700:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b704:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b708:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	ea80 0402 	eor.w	r4, r0, r2
 800b714:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800b718:	404b      	eors	r3, r1
 800b71a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800b71e:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800b722:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800b726:	e9c2 3400 	strd	r3, r4, [r2]
	y3 = y5 ^ y8;
 800b72a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b72e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b732:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	ea80 0402 	eor.w	r4, r0, r2
 800b73e:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 800b742:	404b      	eors	r3, r1
 800b744:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800b748:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 800b74c:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800b750:	e9c2 3400 	strd	r3, r4, [r2]
	t1 = x4 ^ y12;
 800b754:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800b758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b75c:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	ea80 0402 	eor.w	r4, r0, r2
 800b768:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800b76c:	404b      	eors	r3, r1
 800b76e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b772:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 800b776:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 800b77a:	e9c2 3400 	strd	r3, r4, [r2]
	y15 = t1 ^ x5;
 800b77e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b782:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b786:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	ea80 0402 	eor.w	r4, r0, r2
 800b792:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 800b796:	404b      	eors	r3, r1
 800b798:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800b79c:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800b7a0:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800b7a4:	e9c2 3400 	strd	r3, r4, [r2]
	y20 = t1 ^ x1;
 800b7a8:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b7ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7b0:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	ea80 0402 	eor.w	r4, r0, r2
 800b7bc:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 800b7c0:	404b      	eors	r3, r1
 800b7c2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800b7c6:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800b7ca:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 800b7ce:	e9c2 3400 	strd	r3, r4, [r2]
	y6 = y15 ^ x7;
 800b7d2:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b7d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7da:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	ea80 0402 	eor.w	r4, r0, r2
 800b7e6:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 800b7ea:	404b      	eors	r3, r1
 800b7ec:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800b7f0:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 800b7f4:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 800b7f8:	e9c2 3400 	strd	r3, r4, [r2]
	y10 = y15 ^ t0;
 800b7fc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b800:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b804:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	ea80 0402 	eor.w	r4, r0, r2
 800b810:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 800b814:	404b      	eors	r3, r1
 800b816:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800b81a:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800b81e:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800b822:	e9c2 3400 	strd	r3, r4, [r2]
	y11 = y20 ^ y9;
 800b826:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b82a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b82e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	ea80 0402 	eor.w	r4, r0, r2
 800b83a:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 800b83e:	404b      	eors	r3, r1
 800b840:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800b844:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800b848:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800b84c:	e9c2 3400 	strd	r3, r4, [r2]
	y7 = x7 ^ y11;
 800b850:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b854:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b858:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	ea80 0402 	eor.w	r4, r0, r2
 800b864:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 800b868:	404b      	eors	r3, r1
 800b86a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800b86e:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 800b872:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 800b876:	e9c2 3400 	strd	r3, r4, [r2]
	y17 = y10 ^ y11;
 800b87a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800b87e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b882:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	ea80 0402 	eor.w	r4, r0, r2
 800b88e:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 800b892:	404b      	eors	r3, r1
 800b894:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800b898:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800b89c:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
 800b8a0:	e9c2 3400 	strd	r3, r4, [r2]
	y19 = y10 ^ y8;
 800b8a4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800b8a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8ac:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	ea80 0402 	eor.w	r4, r0, r2
 800b8b8:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 800b8bc:	404b      	eors	r3, r1
 800b8be:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800b8c2:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800b8c6:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800b8ca:	e9c2 3400 	strd	r3, r4, [r2]
	y16 = t0 ^ y11;
 800b8ce:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b8d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8d6:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	ea80 0402 	eor.w	r4, r0, r2
 800b8e2:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 800b8e6:	404b      	eors	r3, r1
 800b8e8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800b8ec:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 800b8f0:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800b8f4:	e9c2 3400 	strd	r3, r4, [r2]
	y21 = y13 ^ y16;
 800b8f8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b8fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b900:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	ea80 0402 	eor.w	r4, r0, r2
 800b90c:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 800b910:	404b      	eors	r3, r1
 800b912:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800b916:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 800b91a:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 800b91e:	e9c2 3400 	strd	r3, r4, [r2]
	y18 = x0 ^ y16;
 800b922:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b92a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	ea80 0402 	eor.w	r4, r0, r2
 800b936:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 800b93a:	404b      	eors	r3, r1
 800b93c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800b940:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 800b944:	f507 62d1 	add.w	r2, r7, #1672	; 0x688
 800b948:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Non-linear section.
	 */
	t2 = y12 & y15;
 800b94c:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b950:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b954:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	ea00 0402 	and.w	r4, r0, r2
 800b960:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 800b964:	400b      	ands	r3, r1
 800b966:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800b96a:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 800b96e:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 800b972:	e9c2 3400 	strd	r3, r4, [r2]
	t3 = y3 & y6;
 800b976:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800b97a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b97e:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	ea00 0402 	and.w	r4, r0, r2
 800b98a:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 800b98e:	400b      	ands	r3, r1
 800b990:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800b994:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800b998:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 800b99c:	e9c2 3400 	strd	r3, r4, [r2]
	t4 = t3 ^ t2;
 800b9a0:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800b9a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9a8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	ea80 0402 	eor.w	r4, r0, r2
 800b9b4:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 800b9b8:	404b      	eors	r3, r1
 800b9ba:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800b9be:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800b9c2:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800b9c6:	e9c2 3400 	strd	r3, r4, [r2]
	t5 = y4 & x7;
 800b9ca:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800b9ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9d2:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	ea00 0402 	and.w	r4, r0, r2
 800b9de:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 800b9e2:	400b      	ands	r3, r1
 800b9e4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800b9e8:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 800b9ec:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 800b9f0:	e9c2 3400 	strd	r3, r4, [r2]
	t6 = t5 ^ t2;
 800b9f4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800b9f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9fc:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	ea80 0402 	eor.w	r4, r0, r2
 800ba08:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 800ba0c:	404b      	eors	r3, r1
 800ba0e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800ba12:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800ba16:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800ba1a:	e9c2 3400 	strd	r3, r4, [r2]
	t7 = y13 & y16;
 800ba1e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ba22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba26:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	ea00 0402 	and.w	r4, r0, r2
 800ba32:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 800ba36:	400b      	ands	r3, r1
 800ba38:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800ba3c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800ba40:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800ba44:	e9c2 3400 	strd	r3, r4, [r2]
	t8 = y5 & y1;
 800ba48:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800ba4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba50:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	ea00 0402 	and.w	r4, r0, r2
 800ba5c:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 800ba60:	400b      	ands	r3, r1
 800ba62:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800ba66:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 800ba6a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800ba6e:	e9c2 3400 	strd	r3, r4, [r2]
	t9 = t8 ^ t7;
 800ba72:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800ba76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba7a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	ea80 0402 	eor.w	r4, r0, r2
 800ba86:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 800ba8a:	404b      	eors	r3, r1
 800ba8c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800ba90:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800ba94:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
 800ba98:	e9c2 3400 	strd	r3, r4, [r2]
	t10 = y2 & y7;
 800ba9c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800baa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baa4:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	ea00 0402 	and.w	r4, r0, r2
 800bab0:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 800bab4:	400b      	ands	r3, r1
 800bab6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800baba:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800babe:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800bac2:	e9c2 3400 	strd	r3, r4, [r2]
	t11 = t10 ^ t7;
 800bac6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800baca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bace:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	ea80 0402 	eor.w	r4, r0, r2
 800bada:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 800bade:	404b      	eors	r3, r1
 800bae0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800bae4:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 800bae8:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 800baec:	e9c2 3400 	strd	r3, r4, [r2]
	t12 = y9 & y11;
 800baf0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800baf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baf8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	ea00 0402 	and.w	r4, r0, r2
 800bb04:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 800bb08:	400b      	ands	r3, r1
 800bb0a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800bb0e:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800bb12:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800bb16:	e9c2 3400 	strd	r3, r4, [r2]
	t13 = y14 & y17;
 800bb1a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800bb1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb22:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	ea00 0402 	and.w	r4, r0, r2
 800bb2e:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 800bb32:	400b      	ands	r3, r1
 800bb34:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800bb38:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800bb3c:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 800bb40:	e9c2 3400 	strd	r3, r4, [r2]
	t14 = t13 ^ t12;
 800bb44:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800bb48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	ea80 0402 	eor.w	r4, r0, r2
 800bb58:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 800bb5c:	404b      	eors	r3, r1
 800bb5e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800bb62:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 800bb66:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 800bb6a:	e9c2 3400 	strd	r3, r4, [r2]
	t15 = y8 & y10;
 800bb6e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800bb72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb76:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	ea00 0402 	and.w	r4, r0, r2
 800bb82:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 800bb86:	400b      	ands	r3, r1
 800bb88:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800bb8c:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800bb90:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800bb94:	e9c2 3400 	strd	r3, r4, [r2]
	t16 = t15 ^ t12;
 800bb98:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800bb9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bba0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	ea80 0402 	eor.w	r4, r0, r2
 800bbac:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 800bbb0:	404b      	eors	r3, r1
 800bbb2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800bbb6:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800bbba:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 800bbbe:	e9c2 3400 	strd	r3, r4, [r2]
	t17 = t4 ^ t14;
 800bbc2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800bbc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbca:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	ea80 0402 	eor.w	r4, r0, r2
 800bbd6:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 800bbda:	404b      	eors	r3, r1
 800bbdc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800bbe0:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 800bbe4:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 800bbe8:	e9c2 3400 	strd	r3, r4, [r2]
	t18 = t6 ^ t16;
 800bbec:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bbf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbf4:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	ea80 0402 	eor.w	r4, r0, r2
 800bc00:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 800bc04:	404b      	eors	r3, r1
 800bc06:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800bc0a:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800bc0e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800bc12:	e9c2 3400 	strd	r3, r4, [r2]
	t19 = t9 ^ t14;
 800bc16:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800bc1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc1e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	ea80 0402 	eor.w	r4, r0, r2
 800bc2a:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 800bc2e:	404b      	eors	r3, r1
 800bc30:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800bc34:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800bc38:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800bc3c:	e9c2 3400 	strd	r3, r4, [r2]
	t20 = t11 ^ t16;
 800bc40:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800bc44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc48:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	ea80 0402 	eor.w	r4, r0, r2
 800bc54:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 800bc58:	404b      	eors	r3, r1
 800bc5a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800bc5e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800bc62:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 800bc66:	e9c2 3400 	strd	r3, r4, [r2]
	t21 = t17 ^ y20;
 800bc6a:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800bc6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc72:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	ea80 0402 	eor.w	r4, r0, r2
 800bc7e:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 800bc82:	404b      	eors	r3, r1
 800bc84:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800bc88:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800bc8c:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800bc90:	e9c2 3400 	strd	r3, r4, [r2]
	t22 = t18 ^ y19;
 800bc94:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800bc98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc9c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	ea80 0402 	eor.w	r4, r0, r2
 800bca8:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 800bcac:	404b      	eors	r3, r1
 800bcae:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800bcb2:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800bcb6:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800bcba:	e9c2 3400 	strd	r3, r4, [r2]
	t23 = t19 ^ y21;
 800bcbe:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800bcc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcc6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	ea80 0402 	eor.w	r4, r0, r2
 800bcd2:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 800bcd6:	404b      	eors	r3, r1
 800bcd8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800bcdc:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800bce0:	f507 62bb 	add.w	r2, r7, #1496	; 0x5d8
 800bce4:	e9c2 3400 	strd	r3, r4, [r2]
	t24 = t20 ^ y18;
 800bce8:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800bcec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcf0:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	ea80 0402 	eor.w	r4, r0, r2
 800bcfc:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 800bd00:	404b      	eors	r3, r1
 800bd02:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800bd06:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800bd0a:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 800bd0e:	e9c2 3400 	strd	r3, r4, [r2]

	t25 = t21 ^ t22;
 800bd12:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800bd16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd1a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	ea80 0402 	eor.w	r4, r0, r2
 800bd26:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 800bd2a:	404b      	eors	r3, r1
 800bd2c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bd30:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800bd34:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800bd38:	e9c2 3400 	strd	r3, r4, [r2]
	t26 = t21 & t23;
 800bd3c:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800bd40:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd44:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	ea00 0402 	and.w	r4, r0, r2
 800bd50:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 800bd54:	400b      	ands	r3, r1
 800bd56:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800bd5a:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 800bd5e:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800bd62:	e9c2 3400 	strd	r3, r4, [r2]
	t27 = t24 ^ t26;
 800bd66:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bd6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd6e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	ea80 0402 	eor.w	r4, r0, r2
 800bd7a:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800bd7e:	404b      	eors	r3, r1
 800bd80:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800bd84:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800bd88:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 800bd8c:	e9c2 3400 	strd	r3, r4, [r2]
	t28 = t25 & t27;
 800bd90:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800bd94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd98:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	ea00 0402 	and.w	r4, r0, r2
 800bda4:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 800bda8:	400b      	ands	r3, r1
 800bdaa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800bdae:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800bdb2:	f507 62b6 	add.w	r2, r7, #1456	; 0x5b0
 800bdb6:	e9c2 3400 	strd	r3, r4, [r2]
	t29 = t28 ^ t22;
 800bdba:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800bdbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdc2:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	ea80 0402 	eor.w	r4, r0, r2
 800bdce:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800bdd2:	404b      	eors	r3, r1
 800bdd4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800bdd8:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800bddc:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800bde0:	e9c2 3400 	strd	r3, r4, [r2]
	t30 = t23 ^ t24;
 800bde4:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800bde8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdec:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	ea80 0402 	eor.w	r4, r0, r2
 800bdf8:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 800bdfc:	404b      	eors	r3, r1
 800bdfe:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800be02:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800be06:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 800be0a:	e9c2 3400 	strd	r3, r4, [r2]
	t31 = t22 ^ t26;
 800be0e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800be12:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be16:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1e:	ea80 0402 	eor.w	r4, r0, r2
 800be22:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800be26:	404b      	eors	r3, r1
 800be28:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800be2c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800be30:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800be34:	e9c2 3400 	strd	r3, r4, [r2]
	t32 = t31 & t30;
 800be38:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800be3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be40:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	ea00 0402 	and.w	r4, r0, r2
 800be4c:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800be50:	400b      	ands	r3, r1
 800be52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800be56:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800be5a:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800be5e:	e9c2 3400 	strd	r3, r4, [r2]
	t33 = t32 ^ t24;
 800be62:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800be66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be6a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	ea80 0402 	eor.w	r4, r0, r2
 800be76:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800be7a:	404b      	eors	r3, r1
 800be7c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800be80:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800be84:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 800be88:	e9c2 3400 	strd	r3, r4, [r2]
	t34 = t23 ^ t33;
 800be8c:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800be90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be94:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	ea80 0402 	eor.w	r4, r0, r2
 800bea0:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800bea4:	404b      	eors	r3, r1
 800bea6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800beaa:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800beae:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800beb2:	e9c2 3400 	strd	r3, r4, [r2]
	t35 = t27 ^ t33;
 800beb6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800beba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bebe:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec6:	ea80 0402 	eor.w	r4, r0, r2
 800beca:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800bece:	404b      	eors	r3, r1
 800bed0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800bed4:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800bed8:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 800bedc:	e9c2 3400 	strd	r3, r4, [r2]
	t36 = t24 & t35;
 800bee0:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800bee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bee8:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	ea00 0402 	and.w	r4, r0, r2
 800bef4:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800bef8:	400b      	ands	r3, r1
 800befa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800befe:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800bf02:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 800bf06:	e9c2 3400 	strd	r3, r4, [r2]
	t37 = t36 ^ t34;
 800bf0a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800bf0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf12:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	ea80 0402 	eor.w	r4, r0, r2
 800bf1e:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 800bf22:	404b      	eors	r3, r1
 800bf24:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800bf28:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800bf2c:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800bf30:	e9c2 3400 	strd	r3, r4, [r2]
	t38 = t27 ^ t36;
 800bf34:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800bf38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf3c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	ea80 0402 	eor.w	r4, r0, r2
 800bf48:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800bf4c:	404b      	eors	r3, r1
 800bf4e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800bf52:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800bf56:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800bf5a:	e9c2 3400 	strd	r3, r4, [r2]
	t39 = t29 & t38;
 800bf5e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800bf62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf66:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	ea00 0402 	and.w	r4, r0, r2
 800bf72:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800bf76:	400b      	ands	r3, r1
 800bf78:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800bf7c:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 800bf80:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800bf84:	e9c2 3400 	strd	r3, r4, [r2]
	t40 = t25 ^ t39;
 800bf88:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800bf8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf90:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	ea80 0402 	eor.w	r4, r0, r2
 800bf9c:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800bfa0:	404b      	eors	r3, r1
 800bfa2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800bfa6:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800bfaa:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800bfae:	e9c2 3400 	strd	r3, r4, [r2]

	t41 = t40 ^ t37;
 800bfb2:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800bfb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfba:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	ea80 0402 	eor.w	r4, r0, r2
 800bfc6:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800bfca:	404b      	eors	r3, r1
 800bfcc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800bfd0:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800bfd4:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800bfd8:	e9c2 3400 	strd	r3, r4, [r2]
	t42 = t29 ^ t33;
 800bfdc:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800bfe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfe4:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	ea80 0402 	eor.w	r4, r0, r2
 800bff0:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800bff4:	404b      	eors	r3, r1
 800bff6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800bffa:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800bffe:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800c002:	e9c2 3400 	strd	r3, r4, [r2]
	t43 = t29 ^ t40;
 800c006:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c00a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c00e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	ea80 0402 	eor.w	r4, r0, r2
 800c01a:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 800c01e:	404b      	eors	r3, r1
 800c020:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800c024:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800c028:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800c02c:	e9c2 3400 	strd	r3, r4, [r2]
	t44 = t33 ^ t37;
 800c030:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c034:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c038:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	ea80 0402 	eor.w	r4, r0, r2
 800c044:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800c048:	404b      	eors	r3, r1
 800c04a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800c04e:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800c052:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 800c056:	e9c2 3400 	strd	r3, r4, [r2]
	t45 = t42 ^ t41;
 800c05a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c05e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c062:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	ea80 0402 	eor.w	r4, r0, r2
 800c06e:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800c072:	404b      	eors	r3, r1
 800c074:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800c078:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800c07c:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 800c080:	e9c2 3400 	strd	r3, r4, [r2]
	z0 = t44 & y15;
 800c084:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c08c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	ea00 0402 	and.w	r4, r0, r2
 800c098:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800c09c:	400b      	ands	r3, r1
 800c09e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c0a2:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800c0a6:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800c0aa:	e9c2 3400 	strd	r3, r4, [r2]
	z1 = t37 & y6;
 800c0ae:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c0b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0b6:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	ea00 0402 	and.w	r4, r0, r2
 800c0c2:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 800c0c6:	400b      	ands	r3, r1
 800c0c8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800c0cc:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800c0d0:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800c0d4:	e9c2 3400 	strd	r3, r4, [r2]
	z2 = t33 & x7;
 800c0d8:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c0dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0e0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	ea00 0402 	and.w	r4, r0, r2
 800c0ec:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800c0f0:	400b      	ands	r3, r1
 800c0f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800c0f6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800c0fa:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 800c0fe:	e9c2 3400 	strd	r3, r4, [r2]
	z3 = t43 & y16;
 800c102:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c10a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	ea00 0402 	and.w	r4, r0, r2
 800c116:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800c11a:	400b      	ands	r3, r1
 800c11c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800c120:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800c124:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800c128:	e9c2 3400 	strd	r3, r4, [r2]
	z4 = t40 & y1;
 800c12c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c130:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c134:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	ea00 0402 	and.w	r4, r0, r2
 800c140:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 800c144:	400b      	ands	r3, r1
 800c146:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800c14a:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800c14e:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800c152:	e9c2 3400 	strd	r3, r4, [r2]
	z5 = t29 & y7;
 800c156:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c15a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c15e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	ea00 0402 	and.w	r4, r0, r2
 800c16a:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800c16e:	400b      	ands	r3, r1
 800c170:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c174:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800c178:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800c17c:	e9c2 3400 	strd	r3, r4, [r2]
	z6 = t42 & y11;
 800c180:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c184:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c188:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	ea00 0402 	and.w	r4, r0, r2
 800c194:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800c198:	400b      	ands	r3, r1
 800c19a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c19e:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800c1a2:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800c1a6:	e9c2 3400 	strd	r3, r4, [r2]
	z7 = t45 & y17;
 800c1aa:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c1ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1b2:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	ea00 0402 	and.w	r4, r0, r2
 800c1be:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800c1c2:	400b      	ands	r3, r1
 800c1c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800c1c8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800c1cc:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800c1d0:	e9c2 3400 	strd	r3, r4, [r2]
	z8 = t41 & y10;
 800c1d4:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c1d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1dc:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	ea00 0402 	and.w	r4, r0, r2
 800c1e8:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800c1ec:	400b      	ands	r3, r1
 800c1ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800c1f2:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800c1f6:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800c1fa:	e9c2 3400 	strd	r3, r4, [r2]
	z9 = t44 & y12;
 800c1fe:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c202:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c206:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	ea00 0402 	and.w	r4, r0, r2
 800c212:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800c216:	400b      	ands	r3, r1
 800c218:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800c21c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800c220:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800c224:	e9c2 3400 	strd	r3, r4, [r2]
	z10 = t37 & y3;
 800c228:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c22c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c230:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	ea00 0402 	and.w	r4, r0, r2
 800c23c:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800c240:	400b      	ands	r3, r1
 800c242:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c246:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800c24a:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800c24e:	e9c2 3400 	strd	r3, r4, [r2]
	z11 = t33 & y4;
 800c252:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c25a:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	ea00 0402 	and.w	r4, r0, r2
 800c266:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800c26a:	400b      	ands	r3, r1
 800c26c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c270:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800c274:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800c278:	e9c2 3400 	strd	r3, r4, [r2]
	z12 = t43 & y13;
 800c27c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c280:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c284:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	ea00 0402 	and.w	r4, r0, r2
 800c290:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800c294:	400b      	ands	r3, r1
 800c296:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c29a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800c29e:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800c2a2:	e9c2 3400 	strd	r3, r4, [r2]
	z13 = t40 & y5;
 800c2a6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c2aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2ae:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	ea00 0402 	and.w	r4, r0, r2
 800c2ba:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800c2be:	400b      	ands	r3, r1
 800c2c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c2c4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800c2c8:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800c2cc:	e9c2 3400 	strd	r3, r4, [r2]
	z14 = t29 & y2;
 800c2d0:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c2d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2d8:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	ea00 0402 	and.w	r4, r0, r2
 800c2e4:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800c2e8:	400b      	ands	r3, r1
 800c2ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c2ee:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800c2f2:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800c2f6:	e9c2 3400 	strd	r3, r4, [r2]
	z15 = t42 & y9;
 800c2fa:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c2fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c302:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	ea00 0402 	and.w	r4, r0, r2
 800c30e:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 800c312:	400b      	ands	r3, r1
 800c314:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c318:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800c31c:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800c320:	e9c2 3400 	strd	r3, r4, [r2]
	z16 = t45 & y14;
 800c324:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c32c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	ea00 0402 	and.w	r4, r0, r2
 800c338:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800c33c:	400b      	ands	r3, r1
 800c33e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c342:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800c346:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800c34a:	e9c2 3400 	strd	r3, r4, [r2]
	z17 = t41 & y8;
 800c34e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c352:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c356:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	ea00 0402 	and.w	r4, r0, r2
 800c362:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800c366:	400b      	ands	r3, r1
 800c368:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c36c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800c370:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800c374:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Bottom linear transformation.
	 */
	t46 = z15 ^ z16;
 800c378:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800c37c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c380:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	ea80 0402 	eor.w	r4, r0, r2
 800c38c:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800c390:	404b      	eors	r3, r1
 800c392:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c396:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c39a:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800c39e:	e9c2 3400 	strd	r3, r4, [r2]
	t47 = z10 ^ z11;
 800c3a2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c3a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3aa:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	ea80 0402 	eor.w	r4, r0, r2
 800c3b6:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800c3ba:	404b      	eors	r3, r1
 800c3bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c3c0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c3c4:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800c3c8:	e9c2 3400 	strd	r3, r4, [r2]
	t48 = z5 ^ z13;
 800c3cc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c3d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3d4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	ea80 0402 	eor.w	r4, r0, r2
 800c3e0:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800c3e4:	404b      	eors	r3, r1
 800c3e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3ea:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c3ee:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800c3f2:	e9c2 3400 	strd	r3, r4, [r2]
	t49 = z9 ^ z10;
 800c3f6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800c3fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3fe:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	ea80 0402 	eor.w	r4, r0, r2
 800c40a:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800c40e:	404b      	eors	r3, r1
 800c410:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c414:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c418:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800c41c:	e9c2 3400 	strd	r3, r4, [r2]
	t50 = z2 ^ z12;
 800c420:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c424:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c428:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	ea80 0402 	eor.w	r4, r0, r2
 800c434:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c438:	404b      	eors	r3, r1
 800c43a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c43e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800c442:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800c446:	e9c2 3400 	strd	r3, r4, [r2]
	t51 = z2 ^ z5;
 800c44a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c44e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c452:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	ea80 0402 	eor.w	r4, r0, r2
 800c45e:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800c462:	404b      	eors	r3, r1
 800c464:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c468:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800c46c:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800c470:	e9c2 3400 	strd	r3, r4, [r2]
	t52 = z7 ^ z8;
 800c474:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c47c:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	ea80 0402 	eor.w	r4, r0, r2
 800c488:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800c48c:	404b      	eors	r3, r1
 800c48e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c492:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800c496:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800c49a:	e9c2 3400 	strd	r3, r4, [r2]
	t53 = z0 ^ z3;
 800c49e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800c4a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4a6:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	ea80 0402 	eor.w	r4, r0, r2
 800c4b2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800c4b6:	404b      	eors	r3, r1
 800c4b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4bc:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800c4c0:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800c4c4:	e9c2 3400 	strd	r3, r4, [r2]
	t54 = z6 ^ z7;
 800c4c8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800c4cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4d0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	ea80 0402 	eor.w	r4, r0, r2
 800c4dc:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c4e0:	404b      	eors	r3, r1
 800c4e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c4e6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800c4ea:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800c4ee:	e9c2 3400 	strd	r3, r4, [r2]
	t55 = z16 ^ z17;
 800c4f2:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c4f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4fa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	ea80 0402 	eor.w	r4, r0, r2
 800c506:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c50a:	404b      	eors	r3, r1
 800c50c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c510:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800c514:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800c518:	e9c2 3400 	strd	r3, r4, [r2]
	t56 = z12 ^ t48;
 800c51c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c520:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c524:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	ea80 0402 	eor.w	r4, r0, r2
 800c530:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800c534:	404b      	eors	r3, r1
 800c536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c53a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800c53e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800c542:	e9c2 3400 	strd	r3, r4, [r2]
	t57 = t50 ^ t53;
 800c546:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800c54a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c54e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	ea80 0402 	eor.w	r4, r0, r2
 800c55a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c55e:	404b      	eors	r3, r1
 800c560:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c564:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c568:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800c56c:	e9c2 3400 	strd	r3, r4, [r2]
	t58 = z4 ^ t46;
 800c570:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c574:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c578:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	ea80 0402 	eor.w	r4, r0, r2
 800c584:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800c588:	404b      	eors	r3, r1
 800c58a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c58e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800c592:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800c596:	e9c2 3400 	strd	r3, r4, [r2]
	t59 = z3 ^ t54;
 800c59a:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c59e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5a2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5aa:	ea80 0402 	eor.w	r4, r0, r2
 800c5ae:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800c5b2:	404b      	eors	r3, r1
 800c5b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5b8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c5bc:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800c5c0:	e9c2 3400 	strd	r3, r4, [r2]
	t60 = t46 ^ t57;
 800c5c4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c5c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5cc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	ea80 0402 	eor.w	r4, r0, r2
 800c5d8:	67bc      	str	r4, [r7, #120]	; 0x78
 800c5da:	404b      	eors	r3, r1
 800c5dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5de:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c5e2:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800c5e6:	e9c2 3400 	strd	r3, r4, [r2]
	t61 = z14 ^ t57;
 800c5ea:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800c5ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5f2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	ea80 0402 	eor.w	r4, r0, r2
 800c5fe:	673c      	str	r4, [r7, #112]	; 0x70
 800c600:	404b      	eors	r3, r1
 800c602:	677b      	str	r3, [r7, #116]	; 0x74
 800c604:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c608:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800c60c:	e9c2 3400 	strd	r3, r4, [r2]
	t62 = t52 ^ t58;
 800c610:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800c614:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c618:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	ea80 0402 	eor.w	r4, r0, r2
 800c624:	66bc      	str	r4, [r7, #104]	; 0x68
 800c626:	404b      	eors	r3, r1
 800c628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c62a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800c62e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800c632:	e9c2 3400 	strd	r3, r4, [r2]
	t63 = t49 ^ t58;
 800c636:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800c63a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c63e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	ea80 0402 	eor.w	r4, r0, r2
 800c64a:	663c      	str	r4, [r7, #96]	; 0x60
 800c64c:	404b      	eors	r3, r1
 800c64e:	667b      	str	r3, [r7, #100]	; 0x64
 800c650:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c654:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800c658:	e9c2 3400 	strd	r3, r4, [r2]
	t64 = z4 ^ t59;
 800c65c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c660:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c664:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	ea80 0402 	eor.w	r4, r0, r2
 800c670:	65bc      	str	r4, [r7, #88]	; 0x58
 800c672:	404b      	eors	r3, r1
 800c674:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c676:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c67a:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800c67e:	e9c2 3400 	strd	r3, r4, [r2]
	t65 = t61 ^ t62;
 800c682:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800c686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c68a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	ea80 0402 	eor.w	r4, r0, r2
 800c696:	653c      	str	r4, [r7, #80]	; 0x50
 800c698:	404b      	eors	r3, r1
 800c69a:	657b      	str	r3, [r7, #84]	; 0x54
 800c69c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c6a0:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	; 0x3f8
	t66 = z1 ^ t63;
 800c6a4:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800c6a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6ac:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b4:	ea80 0402 	eor.w	r4, r0, r2
 800c6b8:	64bc      	str	r4, [r7, #72]	; 0x48
 800c6ba:	404b      	eors	r3, r1
 800c6bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6be:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c6c2:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
	s0 = t59 ^ t63;
 800c6c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c6ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6ce:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	ea80 0402 	eor.w	r4, r0, r2
 800c6da:	643c      	str	r4, [r7, #64]	; 0x40
 800c6dc:	404b      	eors	r3, r1
 800c6de:	647b      	str	r3, [r7, #68]	; 0x44
 800c6e0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c6e4:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	; 0x3e8
	s6 = t56 ^ ~t62;
 800c6e8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800c6ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6f0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	ea80 0402 	eor.w	r4, r0, r2
 800c6fc:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 800c700:	404b      	eors	r3, r1
 800c702:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800c706:	e9d7 12e6 	ldrd	r1, r2, [r7, #920]	; 0x398
 800c70a:	460b      	mov	r3, r1
 800c70c:	43db      	mvns	r3, r3
 800c70e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c710:	4613      	mov	r3, r2
 800c712:	43db      	mvns	r3, r3
 800c714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c716:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c71a:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
	s7 = t48 ^ ~t60;
 800c71e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800c722:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c726:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	ea80 0402 	eor.w	r4, r0, r2
 800c732:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 800c736:	404b      	eors	r3, r1
 800c738:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800c73c:	e9d7 12e4 	ldrd	r1, r2, [r7, #912]	; 0x390
 800c740:	460b      	mov	r3, r1
 800c742:	43db      	mvns	r3, r3
 800c744:	633b      	str	r3, [r7, #48]	; 0x30
 800c746:	4613      	mov	r3, r2
 800c748:	43db      	mvns	r3, r3
 800c74a:	637b      	str	r3, [r7, #52]	; 0x34
 800c74c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c750:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
	t67 = t64 ^ t65;
 800c754:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800c758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c75c:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800c760:	ea80 0402 	eor.w	r4, r0, r2
 800c764:	62bc      	str	r4, [r7, #40]	; 0x28
 800c766:	404b      	eors	r3, r1
 800c768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c76a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c76e:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
	s3 = t53 ^ t66;
 800c772:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800c776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c77a:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800c77e:	ea80 0402 	eor.w	r4, r0, r2
 800c782:	623c      	str	r4, [r7, #32]
 800c784:	404b      	eors	r3, r1
 800c786:	627b      	str	r3, [r7, #36]	; 0x24
 800c788:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c78c:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
	s4 = t51 ^ t66;
 800c790:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800c794:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c798:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800c79c:	ea80 0402 	eor.w	r4, r0, r2
 800c7a0:	61bc      	str	r4, [r7, #24]
 800c7a2:	404b      	eors	r3, r1
 800c7a4:	61fb      	str	r3, [r7, #28]
 800c7a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c7aa:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
	s5 = t47 ^ t65;
 800c7ae:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800c7b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7b6:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800c7ba:	ea80 0402 	eor.w	r4, r0, r2
 800c7be:	613c      	str	r4, [r7, #16]
 800c7c0:	404b      	eors	r3, r1
 800c7c2:	617b      	str	r3, [r7, #20]
 800c7c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c7c8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
	s1 = t64 ^ ~s3;
 800c7cc:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800c7d0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	ea80 0402 	eor.w	r4, r0, r2
 800c7dc:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800c7e0:	404b      	eors	r3, r1
 800c7e2:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800c7e6:	e9d7 12e2 	ldrd	r1, r2, [r7, #904]	; 0x388
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	43db      	mvns	r3, r3
 800c7ee:	60bb      	str	r3, [r7, #8]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	43db      	mvns	r3, r3
 800c7f4:	60fb      	str	r3, [r7, #12]
 800c7f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c7fa:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
	s2 = t55 ^ ~t67;
 800c7fe:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 800c802:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80a:	ea80 0402 	eor.w	r4, r0, r2
 800c80e:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 800c812:	404b      	eors	r3, r1
 800c814:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800c818:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	; 0x380
 800c81c:	460b      	mov	r3, r1
 800c81e:	43db      	mvns	r3, r3
 800c820:	603b      	str	r3, [r7, #0]
 800c822:	4613      	mov	r3, r2
 800c824:	43db      	mvns	r3, r3
 800c826:	607b      	str	r3, [r7, #4]
 800c828:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c82c:	e9c7 34ea 	strd	r3, r4, [r7, #936]	; 0x3a8

	q[7] = s0;
 800c830:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c834:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c83e:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800c842:	e9c1 2300 	strd	r2, r3, [r1]
	q[6] = s1;
 800c846:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c84a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c854:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800c858:	e9c1 2300 	strd	r2, r3, [r1]
	q[5] = s2;
 800c85c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c860:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c86a:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800c86e:	e9c1 2300 	strd	r2, r3, [r1]
	q[4] = s3;
 800c872:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c876:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f103 0120 	add.w	r1, r3, #32
 800c880:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800c884:	e9c1 2300 	strd	r2, r3, [r1]
	q[3] = s4;
 800c888:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c88c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f103 0118 	add.w	r1, r3, #24
 800c896:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800c89a:	e9c1 2300 	strd	r2, r3, [r1]
	q[2] = s5;
 800c89e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c8a2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f103 0110 	add.w	r1, r3, #16
 800c8ac:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800c8b0:	e9c1 2300 	strd	r2, r3, [r1]
	q[1] = s6;
 800c8b4:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c8b8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f103 0108 	add.w	r1, r3, #8
 800c8c2:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800c8c6:	e9c1 2300 	strd	r2, r3, [r1]
	q[0] = s7;
 800c8ca:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c8ce:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800c8d2:	6819      	ldr	r1, [r3, #0]
 800c8d4:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800c8d8:	e9c1 2300 	strd	r2, r3, [r1]
}
 800c8dc:	bf00      	nop
 800c8de:	f207 7784 	addw	r7, r7, #1924	; 0x784
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c8e8:	4770      	bx	lr

0800c8ea <br_aes_ct64_ortho>:

static void br_aes_ct64_ortho(uint64_t *q)
{
 800c8ea:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c8ee:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c

#define SWAP2(x, y)    SWAPN(0x5555555555555555, 0xAAAAAAAAAAAAAAAA,  1, x, y)
#define SWAP4(x, y)    SWAPN(0x3333333333333333, 0xCCCCCCCCCCCCCCCC,  2, x, y)
#define SWAP8(x, y)    SWAPN(0x0F0F0F0F0F0F0F0F, 0xF0F0F0F0F0F0F0F0,  4, x, y)

	SWAP2(q[0], q[1]);
 800c8f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c900:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
 800c904:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c908:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c90c:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
 800c910:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800c914:	f002 3855 	and.w	r8, r2, #1431655765	; 0x55555555
 800c918:	f003 3955 	and.w	r9, r3, #1431655765	; 0x55555555
 800c91c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800c920:	1891      	adds	r1, r2, r2
 800c922:	61b9      	str	r1, [r7, #24]
 800c924:	415b      	adcs	r3, r3
 800c926:	61fb      	str	r3, [r7, #28]
 800c928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c92c:	f002 34aa 	and.w	r4, r2, #2863311530	; 0xaaaaaaaa
 800c930:	f003 35aa 	and.w	r5, r3, #2863311530	; 0xaaaaaaaa
 800c934:	ea48 0304 	orr.w	r3, r8, r4
 800c938:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800c93c:	ea49 0305 	orr.w	r3, r9, r5
 800c940:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800c944:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c948:	e9d7 1290 	ldrd	r1, r2, [r7, #576]	; 0x240
 800c94c:	e9c3 1200 	strd	r1, r2, [r3]
 800c950:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800c954:	f04f 0000 	mov.w	r0, #0
 800c958:	f04f 0100 	mov.w	r1, #0
 800c95c:	0850      	lsrs	r0, r2, #1
 800c95e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800c962:	0859      	lsrs	r1, r3, #1
 800c964:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800c968:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800c96c:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800c970:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800c974:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800c978:	f002 3aaa 	and.w	sl, r2, #2863311530	; 0xaaaaaaaa
 800c97c:	f003 3baa 	and.w	fp, r3, #2863311530	; 0xaaaaaaaa
 800c980:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c984:	3308      	adds	r3, #8
 800c986:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 800c98a:	4602      	mov	r2, r0
 800c98c:	ea42 020a 	orr.w	r2, r2, sl
 800c990:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 800c994:	460a      	mov	r2, r1
 800c996:	ea42 020b 	orr.w	r2, r2, fp
 800c99a:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 800c99e:	e9d7 128c 	ldrd	r1, r2, [r7, #560]	; 0x230
 800c9a2:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[2], q[3]);
 800c9a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c9ae:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
 800c9b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c9ba:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
 800c9be:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800c9c2:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800c9c6:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 800c9ca:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800c9ce:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800c9d2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800c9d6:	1891      	adds	r1, r2, r2
 800c9d8:	6139      	str	r1, [r7, #16]
 800c9da:	415b      	adcs	r3, r3
 800c9dc:	617b      	str	r3, [r7, #20]
 800c9de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c9e2:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800c9e6:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800c9ea:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800c9ee:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c9f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c9f6:	3310      	adds	r3, #16
 800c9f8:	e9d7 898a 	ldrd	r8, r9, [r7, #552]	; 0x228
 800c9fc:	4642      	mov	r2, r8
 800c9fe:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 800ca02:	4621      	mov	r1, r4
 800ca04:	430a      	orrs	r2, r1
 800ca06:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 800ca0a:	464a      	mov	r2, r9
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	430a      	orrs	r2, r1
 800ca10:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800ca14:	e9d7 1286 	ldrd	r1, r2, [r7, #536]	; 0x218
 800ca18:	e9c3 1200 	strd	r1, r2, [r3]
 800ca1c:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800ca20:	f04f 0000 	mov.w	r0, #0
 800ca24:	f04f 0100 	mov.w	r1, #0
 800ca28:	0850      	lsrs	r0, r2, #1
 800ca2a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800ca2e:	0859      	lsrs	r1, r3, #1
 800ca30:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800ca34:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800ca38:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800ca3c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800ca40:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800ca44:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800ca48:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800ca4c:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ca50:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800ca54:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca58:	3318      	adds	r3, #24
 800ca5a:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 800ca5e:	4642      	mov	r2, r8
 800ca60:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 800ca64:	4621      	mov	r1, r4
 800ca66:	430a      	orrs	r2, r1
 800ca68:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 800ca6c:	464a      	mov	r2, r9
 800ca6e:	4629      	mov	r1, r5
 800ca70:	430a      	orrs	r2, r1
 800ca72:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 800ca76:	e9d7 1280 	ldrd	r1, r2, [r7, #512]	; 0x200
 800ca7a:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[4], q[5]);
 800ca7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca86:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
 800ca8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ca8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ca92:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
 800ca96:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800ca9a:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800ca9e:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 800caa2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800caa6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800caaa:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800caae:	1891      	adds	r1, r2, r2
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	415b      	adcs	r3, r3
 800cab4:	60fb      	str	r3, [r7, #12]
 800cab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800caba:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cabe:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800cac2:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cac6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800caca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cace:	3320      	adds	r3, #32
 800cad0:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 800cad4:	4642      	mov	r2, r8
 800cad6:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800cada:	4621      	mov	r1, r4
 800cadc:	430a      	orrs	r2, r1
 800cade:	f8c7 21e8 	str.w	r2, [r7, #488]	; 0x1e8
 800cae2:	464a      	mov	r2, r9
 800cae4:	4629      	mov	r1, r5
 800cae6:	430a      	orrs	r2, r1
 800cae8:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800caec:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 800caf0:	e9c3 1200 	strd	r1, r2, [r3]
 800caf4:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800caf8:	f04f 0000 	mov.w	r0, #0
 800cafc:	f04f 0100 	mov.w	r1, #0
 800cb00:	0850      	lsrs	r0, r2, #1
 800cb02:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cb06:	0859      	lsrs	r1, r3, #1
 800cb08:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cb0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800cb10:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cb14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800cb18:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800cb1c:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cb20:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 800cb24:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cb28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800cb2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb30:	3328      	adds	r3, #40	; 0x28
 800cb32:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 800cb36:	4642      	mov	r2, r8
 800cb38:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
 800cb44:	464a      	mov	r2, r9
 800cb46:	4629      	mov	r1, r5
 800cb48:	430a      	orrs	r2, r1
 800cb4a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 800cb4e:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 800cb52:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[6], q[7]);
 800cb56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb5a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800cb5e:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
 800cb62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cb66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cb6a:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800cb6e:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800cb72:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800cb76:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800cb7a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800cb7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800cb82:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cb86:	1891      	adds	r1, r2, r2
 800cb88:	6039      	str	r1, [r7, #0]
 800cb8a:	415b      	adcs	r3, r3
 800cb8c:	607b      	str	r3, [r7, #4]
 800cb8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb92:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cb96:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 800cb9a:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cb9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800cba2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cba6:	3330      	adds	r3, #48	; 0x30
 800cba8:	e9d7 8972 	ldrd	r8, r9, [r7, #456]	; 0x1c8
 800cbac:	4642      	mov	r2, r8
 800cbae:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800cbba:	464a      	mov	r2, r9
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800cbc4:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	; 0x1b8
 800cbc8:	e9c3 1200 	strd	r1, r2, [r3]
 800cbcc:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800cbd0:	f04f 0000 	mov.w	r0, #0
 800cbd4:	f04f 0100 	mov.w	r1, #0
 800cbd8:	0850      	lsrs	r0, r2, #1
 800cbda:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cbde:	0859      	lsrs	r1, r3, #1
 800cbe0:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cbe4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800cbe8:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cbec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800cbf0:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cbf4:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cbf8:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 800cbfc:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cc00:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800cc04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc08:	3338      	adds	r3, #56	; 0x38
 800cc0a:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 800cc0e:	4642      	mov	r2, r8
 800cc10:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800cc14:	4621      	mov	r1, r4
 800cc16:	430a      	orrs	r2, r1
 800cc18:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
 800cc1c:	464a      	mov	r2, r9
 800cc1e:	4629      	mov	r1, r5
 800cc20:	430a      	orrs	r2, r1
 800cc22:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800cc26:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	; 0x1a0
 800cc2a:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP4(q[0], q[2]);
 800cc2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
 800cc3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cc42:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
 800cc46:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800cc4a:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cc4e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800cc52:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cc56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800cc5a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800cc5e:	f04f 0000 	mov.w	r0, #0
 800cc62:	f04f 0100 	mov.w	r1, #0
 800cc66:	0099      	lsls	r1, r3, #2
 800cc68:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cc6c:	0090      	lsls	r0, r2, #2
 800cc6e:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cc72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800cc76:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cc7a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800cc7e:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800cc82:	4623      	mov	r3, r4
 800cc84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800cc88:	4602      	mov	r2, r0
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800cc90:	462b      	mov	r3, r5
 800cc92:	460a      	mov	r2, r1
 800cc94:	4313      	orrs	r3, r2
 800cc96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800cc9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc9e:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 800cca2:	e9c3 1200 	strd	r1, r2, [r3]
 800cca6:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800ccaa:	f04f 0000 	mov.w	r0, #0
 800ccae:	f04f 0100 	mov.w	r1, #0
 800ccb2:	0890      	lsrs	r0, r2, #2
 800ccb4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ccb8:	0899      	lsrs	r1, r3, #2
 800ccba:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800ccbe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800ccc2:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800ccc6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800ccca:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800ccce:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800ccd2:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800ccd6:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800ccda:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800ccde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cce2:	3310      	adds	r3, #16
 800cce4:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 800cce8:	4642      	mov	r2, r8
 800ccea:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800ccee:	4621      	mov	r1, r4
 800ccf0:	430a      	orrs	r2, r1
 800ccf2:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800ccf6:	464a      	mov	r2, r9
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	430a      	orrs	r2, r1
 800ccfc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800cd00:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	; 0x170
 800cd04:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[1], q[3]);
 800cd08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cd10:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
 800cd14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd18:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800cd1c:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 800cd20:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800cd24:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cd28:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800cd2c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cd30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800cd34:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800cd38:	f04f 0000 	mov.w	r0, #0
 800cd3c:	f04f 0100 	mov.w	r1, #0
 800cd40:	0099      	lsls	r1, r3, #2
 800cd42:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cd46:	0090      	lsls	r0, r2, #2
 800cd48:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cd4c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800cd50:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cd54:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800cd58:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 800cd62:	4642      	mov	r2, r8
 800cd64:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800cd68:	4621      	mov	r1, r4
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 800cd70:	464a      	mov	r2, r9
 800cd72:	4629      	mov	r1, r5
 800cd74:	430a      	orrs	r2, r1
 800cd76:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800cd7a:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800cd7e:	e9c3 1200 	strd	r1, r2, [r3]
 800cd82:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800cd86:	f04f 0000 	mov.w	r0, #0
 800cd8a:	f04f 0100 	mov.w	r1, #0
 800cd8e:	0890      	lsrs	r0, r2, #2
 800cd90:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cd94:	0899      	lsrs	r1, r3, #2
 800cd96:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cd9a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800cd9e:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cda2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800cda6:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800cdaa:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800cdae:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800cdb2:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800cdb6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800cdba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cdbe:	3318      	adds	r3, #24
 800cdc0:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 800cdc4:	4642      	mov	r2, r8
 800cdc6:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800cdca:	4621      	mov	r1, r4
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800cdd2:	464a      	mov	r2, r9
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800cddc:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800cde0:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[4], q[6]);
 800cde4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cde8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdec:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 800cdf0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cdf4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800cdf8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 800cdfc:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800ce00:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800ce04:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800ce08:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800ce0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800ce10:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800ce14:	f04f 0000 	mov.w	r0, #0
 800ce18:	f04f 0100 	mov.w	r1, #0
 800ce1c:	0099      	lsls	r1, r3, #2
 800ce1e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ce22:	0090      	lsls	r0, r2, #2
 800ce24:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800ce28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ce2c:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800ce30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ce34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce38:	3320      	adds	r3, #32
 800ce3a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800ce3e:	4642      	mov	r2, r8
 800ce40:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800ce44:	4621      	mov	r1, r4
 800ce46:	430a      	orrs	r2, r1
 800ce48:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800ce4c:	464a      	mov	r2, r9
 800ce4e:	4629      	mov	r1, r5
 800ce50:	430a      	orrs	r2, r1
 800ce52:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800ce56:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800ce5a:	e9c3 1200 	strd	r1, r2, [r3]
 800ce5e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800ce62:	f04f 0000 	mov.w	r0, #0
 800ce66:	f04f 0100 	mov.w	r1, #0
 800ce6a:	0890      	lsrs	r0, r2, #2
 800ce6c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ce70:	0899      	lsrs	r1, r3, #2
 800ce72:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800ce76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ce7a:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800ce7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ce82:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800ce86:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800ce8a:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800ce8e:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800ce92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ce96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce9a:	3330      	adds	r3, #48	; 0x30
 800ce9c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800cea0:	4642      	mov	r2, r8
 800cea2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800cea6:	4621      	mov	r1, r4
 800cea8:	430a      	orrs	r2, r1
 800ceaa:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800ceae:	464a      	mov	r2, r9
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800ceb8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800cebc:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[5], q[7]);
 800cec0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cec4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800cec8:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
 800cecc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ced0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ced4:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
 800ced8:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800cedc:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cee0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800cee4:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cee8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ceec:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800cef0:	f04f 0000 	mov.w	r0, #0
 800cef4:	f04f 0100 	mov.w	r1, #0
 800cef8:	0099      	lsls	r1, r3, #2
 800cefa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cefe:	0090      	lsls	r0, r2, #2
 800cf00:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cf04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf08:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cf0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cf10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf14:	3328      	adds	r3, #40	; 0x28
 800cf16:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 800cf1a:	4642      	mov	r2, r8
 800cf1c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800cf20:	4621      	mov	r1, r4
 800cf22:	430a      	orrs	r2, r1
 800cf24:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800cf28:	464a      	mov	r2, r9
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800cf32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cf36:	e9c3 1200 	strd	r1, r2, [r3]
 800cf3a:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800cf3e:	f04f 0000 	mov.w	r0, #0
 800cf42:	f04f 0100 	mov.w	r1, #0
 800cf46:	0890      	lsrs	r0, r2, #2
 800cf48:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cf4c:	0899      	lsrs	r1, r3, #2
 800cf4e:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cf52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cf56:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cf5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cf5e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800cf62:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800cf66:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800cf6a:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800cf6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cf72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf76:	3338      	adds	r3, #56	; 0x38
 800cf78:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800cf7c:	4642      	mov	r2, r8
 800cf7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cf82:	4621      	mov	r1, r4
 800cf84:	430a      	orrs	r2, r1
 800cf86:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800cf8a:	464a      	mov	r2, r9
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800cf94:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cf98:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP8(q[0], q[4]);
 800cf9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	e9c7 23a2 	strd	r2, r3, [r7, #648]	; 0x288
 800cfa8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cfac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfb0:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
 800cfb4:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800cfb8:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800cfbc:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800cfc0:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800cfc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cfc8:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800cfcc:	f04f 0000 	mov.w	r0, #0
 800cfd0:	f04f 0100 	mov.w	r1, #0
 800cfd4:	0119      	lsls	r1, r3, #4
 800cfd6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800cfda:	0110      	lsls	r0, r2, #4
 800cfdc:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800cfe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cfe4:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800cfe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cfec:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800cff0:	4623      	mov	r3, r4
 800cff2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cff6:	4602      	mov	r2, r0
 800cff8:	4313      	orrs	r3, r2
 800cffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cffe:	462b      	mov	r3, r5
 800d000:	460a      	mov	r2, r1
 800d002:	4313      	orrs	r3, r2
 800d004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d008:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d00c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d010:	e9c3 1200 	strd	r1, r2, [r3]
 800d014:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800d018:	f04f 0000 	mov.w	r0, #0
 800d01c:	f04f 0100 	mov.w	r1, #0
 800d020:	0910      	lsrs	r0, r2, #4
 800d022:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d026:	0919      	lsrs	r1, r3, #4
 800d028:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d02c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d030:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d034:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d038:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800d03c:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d040:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800d044:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d04c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d050:	3320      	adds	r3, #32
 800d052:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800d056:	4642      	mov	r2, r8
 800d058:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d05c:	4621      	mov	r1, r4
 800d05e:	430a      	orrs	r2, r1
 800d060:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d064:	464a      	mov	r2, r9
 800d066:	4629      	mov	r1, r5
 800d068:	430a      	orrs	r2, r1
 800d06a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d06e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d072:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[1], q[5]);
 800d076:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d07a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d07e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 800d082:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d086:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d08a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
 800d08e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d092:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d096:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800d09a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d09e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d0a2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d0a6:	f04f 0000 	mov.w	r0, #0
 800d0aa:	f04f 0100 	mov.w	r1, #0
 800d0ae:	0119      	lsls	r1, r3, #4
 800d0b0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d0b4:	0110      	lsls	r0, r2, #4
 800d0b6:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d0ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d0be:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d0c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d0c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800d0d0:	4642      	mov	r2, r8
 800d0d2:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	430a      	orrs	r2, r1
 800d0da:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800d0de:	464a      	mov	r2, r9
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d0e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d0ec:	e9c3 1200 	strd	r1, r2, [r3]
 800d0f0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d0f4:	f04f 0000 	mov.w	r0, #0
 800d0f8:	f04f 0100 	mov.w	r1, #0
 800d0fc:	0910      	lsrs	r0, r2, #4
 800d0fe:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d102:	0919      	lsrs	r1, r3, #4
 800d104:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d108:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d10c:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d114:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d118:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d11c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d120:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d128:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d12c:	3328      	adds	r3, #40	; 0x28
 800d12e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800d132:	4642      	mov	r2, r8
 800d134:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d138:	4621      	mov	r1, r4
 800d13a:	430a      	orrs	r2, r1
 800d13c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d140:	464a      	mov	r2, r9
 800d142:	4629      	mov	r1, r5
 800d144:	430a      	orrs	r2, r1
 800d146:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d14a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d14e:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[2], q[6]);
 800d152:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d156:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d15a:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
 800d15e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d162:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800d166:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
 800d16a:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d16e:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d172:	67b9      	str	r1, [r7, #120]	; 0x78
 800d174:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d178:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d17a:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d17e:	f04f 0000 	mov.w	r0, #0
 800d182:	f04f 0100 	mov.w	r1, #0
 800d186:	0119      	lsls	r1, r3, #4
 800d188:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d18c:	0110      	lsls	r0, r2, #4
 800d18e:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d192:	673b      	str	r3, [r7, #112]	; 0x70
 800d194:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d198:	677b      	str	r3, [r7, #116]	; 0x74
 800d19a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d19e:	3310      	adds	r3, #16
 800d1a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d1a4:	4642      	mov	r2, r8
 800d1a6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	430a      	orrs	r2, r1
 800d1ae:	66ba      	str	r2, [r7, #104]	; 0x68
 800d1b0:	464a      	mov	r2, r9
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d1b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d1bc:	e9c3 1200 	strd	r1, r2, [r3]
 800d1c0:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d1c4:	f04f 0000 	mov.w	r0, #0
 800d1c8:	f04f 0100 	mov.w	r1, #0
 800d1cc:	0910      	lsrs	r0, r2, #4
 800d1ce:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d1d2:	0919      	lsrs	r1, r3, #4
 800d1d4:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d1d8:	663b      	str	r3, [r7, #96]	; 0x60
 800d1da:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d1de:	667b      	str	r3, [r7, #100]	; 0x64
 800d1e0:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d1e4:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d1e8:	65b9      	str	r1, [r7, #88]	; 0x58
 800d1ea:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d1ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d1f4:	3330      	adds	r3, #48	; 0x30
 800d1f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d1fa:	4642      	mov	r2, r8
 800d1fc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d200:	4621      	mov	r1, r4
 800d202:	430a      	orrs	r2, r1
 800d204:	653a      	str	r2, [r7, #80]	; 0x50
 800d206:	464a      	mov	r2, r9
 800d208:	4629      	mov	r1, r5
 800d20a:	430a      	orrs	r2, r1
 800d20c:	657a      	str	r2, [r7, #84]	; 0x54
 800d20e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d212:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[3], q[7]);
 800d216:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d21a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d21e:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800d222:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d226:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d22a:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 800d22e:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800d232:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d236:	64b9      	str	r1, [r7, #72]	; 0x48
 800d238:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d23c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d23e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d242:	f04f 0000 	mov.w	r0, #0
 800d246:	f04f 0100 	mov.w	r1, #0
 800d24a:	0119      	lsls	r1, r3, #4
 800d24c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d250:	0110      	lsls	r0, r2, #4
 800d252:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d256:	643b      	str	r3, [r7, #64]	; 0x40
 800d258:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d25c:	647b      	str	r3, [r7, #68]	; 0x44
 800d25e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d262:	3318      	adds	r3, #24
 800d264:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800d268:	4642      	mov	r2, r8
 800d26a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d26e:	4621      	mov	r1, r4
 800d270:	430a      	orrs	r2, r1
 800d272:	63ba      	str	r2, [r7, #56]	; 0x38
 800d274:	464a      	mov	r2, r9
 800d276:	4629      	mov	r1, r5
 800d278:	430a      	orrs	r2, r1
 800d27a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d27c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d280:	e9c3 1200 	strd	r1, r2, [r3]
 800d284:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800d288:	f04f 0200 	mov.w	r2, #0
 800d28c:	f04f 0300 	mov.w	r3, #0
 800d290:	0902      	lsrs	r2, r0, #4
 800d292:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d296:	090b      	lsrs	r3, r1, #4
 800d298:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d29c:	6339      	str	r1, [r7, #48]	; 0x30
 800d29e:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d2a2:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d2a8:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d2ac:	62b9      	str	r1, [r7, #40]	; 0x28
 800d2ae:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d2b8:	3338      	adds	r3, #56	; 0x38
 800d2ba:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d2be:	4642      	mov	r2, r8
 800d2c0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	623a      	str	r2, [r7, #32]
 800d2ca:	464a      	mov	r2, r9
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	430a      	orrs	r2, r1
 800d2d0:	627a      	str	r2, [r7, #36]	; 0x24
 800d2d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d2d6:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d2da:	bf00      	nop
 800d2dc:	f507 7745 	add.w	r7, r7, #788	; 0x314
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d2e6:	4770      	bx	lr

0800d2e8 <br_aes_ct64_interleave_in>:

static void br_aes_ct64_interleave_in(uint64_t *q0, uint64_t *q1, const uint32_t *w)
{
 800d2e8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d2ec:	b0bb      	sub	sp, #236	; 0xec
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d2f4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d2f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
	uint64_t x0, x1, x2, x3;

	x0 = w[0];
 800d2fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2200      	movs	r2, #0
 800d304:	469a      	mov	sl, r3
 800d306:	4693      	mov	fp, r2
 800d308:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
	x1 = w[1];
 800d30c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d310:	3304      	adds	r3, #4
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2200      	movs	r2, #0
 800d316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d31a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d31e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d322:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	x2 = w[2];
 800d326:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d32a:	3308      	adds	r3, #8
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2200      	movs	r2, #0
 800d330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d334:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d338:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d33c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	x3 = w[3];
 800d340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d344:	330c      	adds	r3, #12
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2200      	movs	r2, #0
 800d34a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d34e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d352:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d356:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	x0 |= (x0 << 16);
 800d35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d35e:	0c1d      	lsrs	r5, r3, #16
 800d360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d364:	041c      	lsls	r4, r3, #16
 800d366:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d36a:	ea42 0104 	orr.w	r1, r2, r4
 800d36e:	67b9      	str	r1, [r7, #120]	; 0x78
 800d370:	432b      	orrs	r3, r5
 800d372:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d374:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d378:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 16);
 800d37c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800d384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d388:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800d38c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d390:	ea42 0108 	orr.w	r1, r2, r8
 800d394:	6739      	str	r1, [r7, #112]	; 0x70
 800d396:	ea43 0309 	orr.w	r3, r3, r9
 800d39a:	677b      	str	r3, [r7, #116]	; 0x74
 800d39c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d3a0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 16);
 800d3a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d3a8:	0c1b      	lsrs	r3, r3, #16
 800d3aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d3ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d3b2:	041b      	lsls	r3, r3, #16
 800d3b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d3b8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d3bc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d3c0:	4621      	mov	r1, r4
 800d3c2:	4311      	orrs	r1, r2
 800d3c4:	66b9      	str	r1, [r7, #104]	; 0x68
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4319      	orrs	r1, r3
 800d3ca:	66f9      	str	r1, [r7, #108]	; 0x6c
 800d3cc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d3d0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 16);
 800d3d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d3d8:	0c1b      	lsrs	r3, r3, #16
 800d3da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d3e2:	041b      	lsls	r3, r3, #16
 800d3e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d3e8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d3ec:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4311      	orrs	r1, r2
 800d3f4:	6639      	str	r1, [r7, #96]	; 0x60
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4319      	orrs	r1, r3
 800d3fa:	6679      	str	r1, [r7, #100]	; 0x64
 800d3fc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d400:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800d404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d40c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d410:	ea00 0402 	and.w	r4, r0, r2
 800d414:	65bc      	str	r4, [r7, #88]	; 0x58
 800d416:	400b      	ands	r3, r1
 800d418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d41a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d41e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800d422:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d42a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d42e:	ea00 0402 	and.w	r4, r0, r2
 800d432:	653c      	str	r4, [r7, #80]	; 0x50
 800d434:	400b      	ands	r3, r1
 800d436:	657b      	str	r3, [r7, #84]	; 0x54
 800d438:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d43c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800d440:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d44c:	ea00 0402 	and.w	r4, r0, r2
 800d450:	64bc      	str	r4, [r7, #72]	; 0x48
 800d452:	400b      	ands	r3, r1
 800d454:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d456:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d45a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800d45e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d46a:	ea00 0402 	and.w	r4, r0, r2
 800d46e:	643c      	str	r4, [r7, #64]	; 0x40
 800d470:	400b      	ands	r3, r1
 800d472:	647b      	str	r3, [r7, #68]	; 0x44
 800d474:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d478:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 |= (x0 << 8);
 800d47c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d480:	f04f 0000 	mov.w	r0, #0
 800d484:	f04f 0100 	mov.w	r1, #0
 800d488:	0219      	lsls	r1, r3, #8
 800d48a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d48e:	0210      	lsls	r0, r2, #8
 800d490:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d494:	ea42 0400 	orr.w	r4, r2, r0
 800d498:	63bc      	str	r4, [r7, #56]	; 0x38
 800d49a:	430b      	orrs	r3, r1
 800d49c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d49e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d4a2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 8);
 800d4a6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d4aa:	f04f 0000 	mov.w	r0, #0
 800d4ae:	f04f 0100 	mov.w	r1, #0
 800d4b2:	0219      	lsls	r1, r3, #8
 800d4b4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d4b8:	0210      	lsls	r0, r2, #8
 800d4ba:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d4be:	ea42 0400 	orr.w	r4, r2, r0
 800d4c2:	633c      	str	r4, [r7, #48]	; 0x30
 800d4c4:	430b      	orrs	r3, r1
 800d4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d4cc:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 8);
 800d4d0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d4d4:	f04f 0000 	mov.w	r0, #0
 800d4d8:	f04f 0100 	mov.w	r1, #0
 800d4dc:	0219      	lsls	r1, r3, #8
 800d4de:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d4e2:	0210      	lsls	r0, r2, #8
 800d4e4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d4e8:	ea42 0400 	orr.w	r4, r2, r0
 800d4ec:	62bc      	str	r4, [r7, #40]	; 0x28
 800d4ee:	430b      	orrs	r3, r1
 800d4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d4f6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 8);
 800d4fa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d4fe:	f04f 0000 	mov.w	r0, #0
 800d502:	f04f 0100 	mov.w	r1, #0
 800d506:	0219      	lsls	r1, r3, #8
 800d508:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d50c:	0210      	lsls	r0, r2, #8
 800d50e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d512:	ea42 0400 	orr.w	r4, r2, r0
 800d516:	623c      	str	r4, [r7, #32]
 800d518:	430b      	orrs	r3, r1
 800d51a:	627b      	str	r3, [r7, #36]	; 0x24
 800d51c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d520:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x00FF00FF00FF00FF;
 800d524:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d528:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d52c:	61b9      	str	r1, [r7, #24]
 800d52e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d532:	61fb      	str	r3, [r7, #28]
 800d534:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d538:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x00FF00FF00FF00FF;
 800d53c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d540:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d544:	6139      	str	r1, [r7, #16]
 800d546:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d550:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x00FF00FF00FF00FF;
 800d554:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d558:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d568:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x00FF00FF00FF00FF;
 800d56c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d570:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d574:	6039      	str	r1, [r7, #0]
 800d576:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d57a:	607b      	str	r3, [r7, #4]
 800d57c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d580:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	*q0 = x0 | (x2 << 8);
 800d584:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d588:	f04f 0200 	mov.w	r2, #0
 800d58c:	f04f 0300 	mov.w	r3, #0
 800d590:	020b      	lsls	r3, r1, #8
 800d592:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d596:	0202      	lsls	r2, r0, #8
 800d598:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d59c:	ea42 0400 	orr.w	r4, r2, r0
 800d5a0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800d5a4:	430b      	orrs	r3, r1
 800d5a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d5aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d5ae:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d5b2:	e9c3 1200 	strd	r1, r2, [r3]
	*q1 = x1 | (x3 << 8);
 800d5b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d5ba:	f04f 0200 	mov.w	r2, #0
 800d5be:	f04f 0300 	mov.w	r3, #0
 800d5c2:	020b      	lsls	r3, r1, #8
 800d5c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d5c8:	0202      	lsls	r2, r0, #8
 800d5ca:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d5ce:	ea42 0400 	orr.w	r4, r2, r0
 800d5d2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800d5d6:	430b      	orrs	r3, r1
 800d5d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d5e0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d5e4:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d5e8:	bf00      	nop
 800d5ea:	37ec      	adds	r7, #236	; 0xec
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d5f2:	4770      	bx	lr

0800d5f4 <br_aes_ct64_interleave_out>:

static void br_aes_ct64_interleave_out(uint32_t *w, uint64_t q0, uint64_t q1)
{
 800d5f4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d5f8:	b09f      	sub	sp, #124	; 0x7c
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6578      	str	r0, [r7, #84]	; 0x54
 800d5fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint64_t x0, x1, x2, x3;

	x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 800d602:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d606:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 800d60a:	f003 15ff 	and.w	r5, r3, #16711935	; 0xff00ff
 800d60e:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
	x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 800d612:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d616:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 800d61a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 800d61e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d622:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d626:	f04f 0000 	mov.w	r0, #0
 800d62a:	f04f 0100 	mov.w	r1, #0
 800d62e:	0a10      	lsrs	r0, r2, #8
 800d630:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d634:	0a19      	lsrs	r1, r3, #8
 800d636:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 800d63a:	f001 1bff 	and.w	fp, r1, #16711935	; 0xff00ff
 800d63e:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d642:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d646:	f04f 0000 	mov.w	r0, #0
 800d64a:	f04f 0100 	mov.w	r1, #0
 800d64e:	0a10      	lsrs	r0, r2, #8
 800d650:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d654:	0a19      	lsrs	r1, r3, #8
 800d656:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 800d65a:	643b      	str	r3, [r7, #64]	; 0x40
 800d65c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800d660:	647b      	str	r3, [r7, #68]	; 0x44
 800d662:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d666:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 |= (x0 >> 8);
 800d66a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d66e:	f04f 0000 	mov.w	r0, #0
 800d672:	f04f 0100 	mov.w	r1, #0
 800d676:	0a10      	lsrs	r0, r2, #8
 800d678:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d67c:	0a19      	lsrs	r1, r3, #8
 800d67e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d682:	ea42 0400 	orr.w	r4, r2, r0
 800d686:	63bc      	str	r4, [r7, #56]	; 0x38
 800d688:	430b      	orrs	r3, r1
 800d68a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d68c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d690:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 |= (x1 >> 8);
 800d694:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d698:	f04f 0000 	mov.w	r0, #0
 800d69c:	f04f 0100 	mov.w	r1, #0
 800d6a0:	0a10      	lsrs	r0, r2, #8
 800d6a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d6a6:	0a19      	lsrs	r1, r3, #8
 800d6a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d6ac:	ea42 0400 	orr.w	r4, r2, r0
 800d6b0:	633c      	str	r4, [r7, #48]	; 0x30
 800d6b2:	430b      	orrs	r3, r1
 800d6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d6b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d6ba:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 |= (x2 >> 8);
 800d6be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d6c2:	f04f 0000 	mov.w	r0, #0
 800d6c6:	f04f 0100 	mov.w	r1, #0
 800d6ca:	0a10      	lsrs	r0, r2, #8
 800d6cc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d6d0:	0a19      	lsrs	r1, r3, #8
 800d6d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d6d6:	ea42 0400 	orr.w	r4, r2, r0
 800d6da:	62bc      	str	r4, [r7, #40]	; 0x28
 800d6dc:	430b      	orrs	r3, r1
 800d6de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d6e4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 |= (x3 >> 8);
 800d6e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d6ec:	f04f 0000 	mov.w	r0, #0
 800d6f0:	f04f 0100 	mov.w	r1, #0
 800d6f4:	0a10      	lsrs	r0, r2, #8
 800d6f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d6fa:	0a19      	lsrs	r1, r3, #8
 800d6fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d700:	ea42 0400 	orr.w	r4, r2, r0
 800d704:	623c      	str	r4, [r7, #32]
 800d706:	430b      	orrs	r3, r1
 800d708:	627b      	str	r3, [r7, #36]	; 0x24
 800d70a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d70e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800d712:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d716:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d71a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d71e:	ea02 0400 	and.w	r4, r2, r0
 800d722:	61bc      	str	r4, [r7, #24]
 800d724:	400b      	ands	r3, r1
 800d726:	61fb      	str	r3, [r7, #28]
 800d728:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d72c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800d730:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d734:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d738:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d73c:	ea02 0400 	and.w	r4, r2, r0
 800d740:	613c      	str	r4, [r7, #16]
 800d742:	400b      	ands	r3, r1
 800d744:	617b      	str	r3, [r7, #20]
 800d746:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d74a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800d74e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d752:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d756:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d75a:	ea02 0400 	and.w	r4, r2, r0
 800d75e:	60bc      	str	r4, [r7, #8]
 800d760:	400b      	ands	r3, r1
 800d762:	60fb      	str	r3, [r7, #12]
 800d764:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d768:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800d76c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d770:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d774:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d778:	ea02 0400 	and.w	r4, r2, r0
 800d77c:	603c      	str	r4, [r7, #0]
 800d77e:	400b      	ands	r3, r1
 800d780:	607b      	str	r3, [r7, #4]
 800d782:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d786:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 800d78a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800d78c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800d790:	f04f 0200 	mov.w	r2, #0
 800d794:	f04f 0300 	mov.w	r3, #0
 800d798:	0c02      	lsrs	r2, r0, #16
 800d79a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d79e:	0c0b      	lsrs	r3, r1, #16
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	ea44 0203 	orr.w	r2, r4, r3
 800d7a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7a8:	601a      	str	r2, [r3, #0]
	w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 800d7aa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800d7ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d7b0:	f04f 0200 	mov.w	r2, #0
 800d7b4:	f04f 0300 	mov.w	r3, #0
 800d7b8:	0c02      	lsrs	r2, r0, #16
 800d7ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d7be:	0c0b      	lsrs	r3, r1, #16
 800d7c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	4322      	orrs	r2, r4
 800d7c6:	601a      	str	r2, [r3, #0]
	w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 800d7c8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800d7ca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d7ce:	f04f 0200 	mov.w	r2, #0
 800d7d2:	f04f 0300 	mov.w	r3, #0
 800d7d6:	0c02      	lsrs	r2, r0, #16
 800d7d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d7dc:	0c0b      	lsrs	r3, r1, #16
 800d7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	4322      	orrs	r2, r4
 800d7e4:	601a      	str	r2, [r3, #0]
	w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 800d7e6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800d7e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d7ec:	f04f 0200 	mov.w	r2, #0
 800d7f0:	f04f 0300 	mov.w	r3, #0
 800d7f4:	0c02      	lsrs	r2, r0, #16
 800d7f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d7fa:	0c0b      	lsrs	r3, r1, #16
 800d7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7fe:	330c      	adds	r3, #12
 800d800:	4322      	orrs	r2, r4
 800d802:	601a      	str	r2, [r3, #0]
}
 800d804:	bf00      	nop
 800d806:	377c      	adds	r7, #124	; 0x7c
 800d808:	46bd      	mov	sp, r7
 800d80a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d80e:	4770      	bx	lr

0800d810 <sub_word>:
static const uint8_t Rcon[] = {
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

static uint32_t sub_word(uint32_t x)
{
 800d810:	b5b0      	push	{r4, r5, r7, lr}
 800d812:	b092      	sub	sp, #72	; 0x48
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
	uint64_t q[8];

	memset(q, 0, sizeof q);
 800d818:	f107 0308 	add.w	r3, r7, #8
 800d81c:	2240      	movs	r2, #64	; 0x40
 800d81e:	2100      	movs	r1, #0
 800d820:	4618      	mov	r0, r3
 800d822:	f008 f8ad 	bl	8015980 <memset>
	q[0] = x;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	461c      	mov	r4, r3
 800d82c:	4615      	mov	r5, r2
 800d82e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	br_aes_ct64_ortho(q);
 800d832:	f107 0308 	add.w	r3, r7, #8
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff f857 	bl	800c8ea <br_aes_ct64_ortho>
	br_aes_ct64_bitslice_Sbox(q);
 800d83c:	f107 0308 	add.w	r3, r7, #8
 800d840:	4618      	mov	r0, r3
 800d842:	f7fd fe4d 	bl	800b4e0 <br_aes_ct64_bitslice_Sbox>
	br_aes_ct64_ortho(q);
 800d846:	f107 0308 	add.w	r3, r7, #8
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff f84d 	bl	800c8ea <br_aes_ct64_ortho>
	return (uint32_t)q[0];
 800d850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d854:	4613      	mov	r3, r2
}
 800d856:	4618      	mov	r0, r3
 800d858:	3748      	adds	r7, #72	; 0x48
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d860 <br_aes_ct64_keysched>:

static void br_aes_ct64_keysched(uint64_t *comp_skey, const uint8_t *key)
{
 800d860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d864:	b0ec      	sub	sp, #432	; 0x1b0
 800d866:	af00      	add	r7, sp, #0
 800d868:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d86c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d870:	6018      	str	r0, [r3, #0]
 800d872:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d876:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d87a:	6019      	str	r1, [r3, #0]
	int i, j, k, nk, nkf;
	uint32_t tmp;
	uint32_t skey[60];

	int key_len = 32;
 800d87c:	2320      	movs	r3, #32
 800d87e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	nk = (int)(key_len >> 2);
 800d882:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d886:	109b      	asrs	r3, r3, #2
 800d888:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	nkf = (int)((14 + 1) << 2);
 800d88c:	233c      	movs	r3, #60	; 0x3c
 800d88e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	br_range_dec32le(skey, (key_len >> 2), key);
 800d892:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d896:	109b      	asrs	r3, r3, #2
 800d898:	4619      	mov	r1, r3
 800d89a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d89e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d8a2:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	f7fd fdaa 	bl	800b400 <br_range_dec32le>
	tmp = skey[(key_len >> 2) - 1];
 800d8ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800d8b0:	109b      	asrs	r3, r3, #2
 800d8b2:	1e5a      	subs	r2, r3, #1
 800d8b4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d8b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800d8c4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d8c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800d8d8:	e057      	b.n	800d98a <br_aes_ct64_keysched+0x12a>
		if (j == 0) {
 800d8da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d113      	bne.n	800d90a <br_aes_ct64_keysched+0xaa>
			tmp = (tmp << 24) | (tmp >> 8);
 800d8e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d8e6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d8ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			tmp = sub_word(tmp) ^ Rcon[k];
 800d8ee:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800d8f2:	f7ff ff8d 	bl	800d810 <sub_word>
 800d8f6:	4601      	mov	r1, r0
 800d8f8:	4aba      	ldr	r2, [pc, #744]	; (800dbe4 <br_aes_ct64_keysched+0x384>)
 800d8fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d8fe:	4413      	add	r3, r2
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	404b      	eors	r3, r1
 800d904:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800d908:	e00d      	b.n	800d926 <br_aes_ct64_keysched+0xc6>
		} else if (nk > 6 && j == 4) {
 800d90a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d90e:	2b06      	cmp	r3, #6
 800d910:	dd09      	ble.n	800d926 <br_aes_ct64_keysched+0xc6>
 800d912:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d916:	2b04      	cmp	r3, #4
 800d918:	d105      	bne.n	800d926 <br_aes_ct64_keysched+0xc6>
			tmp = sub_word(tmp);
 800d91a:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800d91e:	f7ff ff77 	bl	800d810 <sub_word>
 800d922:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		}
		tmp ^= skey[i - nk];
 800d926:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d92a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d92e:	1ad2      	subs	r2, r2, r3
 800d930:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d934:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d938:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d93c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d940:	4053      	eors	r3, r2
 800d942:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		skey[i] = tmp;
 800d946:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d94a:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 800d94e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d952:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d956:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		if (++ j == nk) {
 800d95a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800d95e:	3301      	adds	r3, #1
 800d960:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800d964:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800d968:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d107      	bne.n	800d980 <br_aes_ct64_keysched+0x120>
			j = 0;
 800d970:	2300      	movs	r3, #0
 800d972:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			k ++;
 800d976:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d97a:	3301      	adds	r3, #1
 800d97c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800d980:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d984:	3301      	adds	r3, #1
 800d986:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d98a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800d98e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d992:	429a      	cmp	r2, r3
 800d994:	dba1      	blt.n	800d8da <br_aes_ct64_keysched+0x7a>
		}
	}

	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800d996:	2300      	movs	r3, #0
 800d998:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d99c:	2300      	movs	r3, #0
 800d99e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800d9a2:	e110      	b.n	800dbc6 <br_aes_ct64_keysched+0x366>
		uint64_t q[8];

		br_aes_ct64_interleave_in(&q[0], &q[4], skey + i);
 800d9a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800d9a8:	009a      	lsls	r2, r3, #2
 800d9aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d9ae:	441a      	add	r2, r3
 800d9b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d9b4:	f103 0120 	add.w	r1, r3, #32
 800d9b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff fc93 	bl	800d2e8 <br_aes_ct64_interleave_in>
		q[1] = q[0];
 800d9c2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9c6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d9ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9ce:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d9d6:	e9c3 0102 	strd	r0, r1, [r3, #8]
		q[2] = q[0];
 800d9da:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9de:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d9e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9ea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d9ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
		q[3] = q[0];
 800d9f2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9f6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d9fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da02:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da06:	e9c3 0106 	strd	r0, r1, [r3, #24]
		q[5] = q[4];
 800da0a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da0e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da12:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800da16:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da1a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da1e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
		q[6] = q[4];
 800da22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da26:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da2a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800da2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da32:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da36:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
		q[7] = q[4];
 800da3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da42:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800da46:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da4e:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
		br_aes_ct64_ortho(q);
 800da52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe ff47 	bl	800c8ea <br_aes_ct64_ortho>
		comp_skey[j + 0] =
			  (q[0] & (uint64_t)0x1111111111111111)
 800da5c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800da6c:	6539      	str	r1, [r7, #80]	; 0x50
 800da6e:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800da72:	657b      	str	r3, [r7, #84]	; 0x54
			| (q[1] & (uint64_t)0x2222222222222222)
 800da74:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800da7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800da80:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800da84:	62b9      	str	r1, [r7, #40]	; 0x28
 800da86:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800da8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800da92:	4602      	mov	r2, r0
 800da94:	4313      	orrs	r3, r2
 800da96:	64bb      	str	r3, [r7, #72]	; 0x48
 800da98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da9a:	460a      	mov	r2, r1
 800da9c:	4313      	orrs	r3, r2
 800da9e:	64fb      	str	r3, [r7, #76]	; 0x4c
			| (q[2] & (uint64_t)0x4444444444444444)
 800daa0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daa4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800daa8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800daac:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800dab0:	6239      	str	r1, [r7, #32]
 800dab2:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800dab6:	627b      	str	r3, [r7, #36]	; 0x24
 800dab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dabe:	4602      	mov	r2, r0
 800dac0:	4313      	orrs	r3, r2
 800dac2:	643b      	str	r3, [r7, #64]	; 0x40
 800dac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac6:	460a      	mov	r2, r1
 800dac8:	4313      	orrs	r3, r2
 800daca:	647b      	str	r3, [r7, #68]	; 0x44
			| (q[3] & (uint64_t)0x8888888888888888);
 800dacc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dad0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dad4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800dad8:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800dadc:	63b9      	str	r1, [r7, #56]	; 0x38
 800dade:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800dae2:	63fb      	str	r3, [r7, #60]	; 0x3c
		comp_skey[j + 0] =
 800dae4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dae8:	00da      	lsls	r2, r3, #3
 800daea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4413      	add	r3, r2
			| (q[3] & (uint64_t)0x8888888888888888);
 800daf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800daf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dafa:	430a      	orrs	r2, r1
 800dafc:	61ba      	str	r2, [r7, #24]
 800dafe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db02:	430a      	orrs	r2, r1
 800db04:	61fa      	str	r2, [r7, #28]
		comp_skey[j + 0] =
 800db06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800db0a:	e9c3 1200 	strd	r1, r2, [r3]
		comp_skey[j + 1] =
			  (q[4] & (uint64_t)0x1111111111111111)
 800db0e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db12:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db1a:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800db1e:	6339      	str	r1, [r7, #48]	; 0x30
 800db20:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800db24:	637b      	str	r3, [r7, #52]	; 0x34
			| (q[5] & (uint64_t)0x2222222222222222)
 800db26:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db2a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db2e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800db32:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800db36:	6139      	str	r1, [r7, #16]
 800db38:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800db3c:	617b      	str	r3, [r7, #20]
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800db44:	4602      	mov	r2, r0
 800db46:	4313      	orrs	r3, r2
 800db48:	60bb      	str	r3, [r7, #8]
 800db4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4c:	460a      	mov	r2, r1
 800db4e:	4313      	orrs	r3, r2
 800db50:	60fb      	str	r3, [r7, #12]
			| (q[6] & (uint64_t)0x4444444444444444)
 800db52:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db56:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db5a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800db5e:	f002 3a44 	and.w	sl, r2, #1145324612	; 0x44444444
 800db62:	f003 3b44 	and.w	fp, r3, #1145324612	; 0x44444444
 800db66:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800db6a:	460b      	mov	r3, r1
 800db6c:	ea43 080a 	orr.w	r8, r3, sl
 800db70:	4613      	mov	r3, r2
 800db72:	ea43 090b 	orr.w	r9, r3, fp
			| (q[7] & (uint64_t)0x8888888888888888);
 800db76:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db7a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800db7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800db82:	f002 3488 	and.w	r4, r2, #2290649224	; 0x88888888
 800db86:	f003 3588 	and.w	r5, r3, #2290649224	; 0x88888888
		comp_skey[j + 1] =
 800db8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800db8e:	3301      	adds	r3, #1
 800db90:	00da      	lsls	r2, r3, #3
 800db92:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4413      	add	r3, r2
			| (q[7] & (uint64_t)0x8888888888888888);
 800db9e:	ea48 0204 	orr.w	r2, r8, r4
 800dba2:	603a      	str	r2, [r7, #0]
 800dba4:	ea49 0205 	orr.w	r2, r9, r5
 800dba8:	607a      	str	r2, [r7, #4]
		comp_skey[j + 1] =
 800dbaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dbae:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800dbb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800dbbc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dbc0:	3302      	adds	r3, #2
 800dbc2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800dbc6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dbca:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	f6ff aee8 	blt.w	800d9a4 <br_aes_ct64_keysched+0x144>
	}
}
 800dbd4:	bf00      	nop
 800dbd6:	bf00      	nop
 800dbd8:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbe2:	bf00      	nop
 800dbe4:	080164b0 	.word	0x080164b0

0800dbe8 <br_aes_ct64_skey_expand>:

static void br_aes_ct64_skey_expand(uint64_t *skey, const uint64_t *comp_skey)
{
 800dbe8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dbec:	b098      	sub	sp, #96	; 0x60
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dbf2:	62b9      	str	r1, [r7, #40]	; 0x28
	unsigned u, v, n;

	n = (14 + 1) << 1;
 800dbf4:	231e      	movs	r3, #30
 800dbf6:	657b      	str	r3, [r7, #84]	; 0x54
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc00:	e0cb      	b.n	800dd9a <br_aes_ct64_skey_expand+0x1b2>
		uint64_t x0, x1, x2, x3;

		x0 = x1 = x2 = x3 = comp_skey[u];
 800dc02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc04:	00da      	lsls	r2, r3, #3
 800dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc08:	4413      	add	r3, r2
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800dc12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc16:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800dc1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800dc22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dc26:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		x0 &= (uint64_t)0x1111111111111111;
 800dc2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dc2e:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800dc32:	61b9      	str	r1, [r7, #24]
 800dc34:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800dc38:	61fb      	str	r3, [r7, #28]
 800dc3a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dc3e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		x1 &= (uint64_t)0x2222222222222222;
 800dc42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dc46:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800dc4a:	6139      	str	r1, [r7, #16]
 800dc4c:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dc56:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		x2 &= (uint64_t)0x4444444444444444;
 800dc5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc5e:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800dc68:	60fb      	str	r3, [r7, #12]
 800dc6a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dc6e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		x3 &= (uint64_t)0x8888888888888888;
 800dc72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc76:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800dc7a:	6039      	str	r1, [r7, #0]
 800dc7c:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800dc80:	607b      	str	r3, [r7, #4]
 800dc82:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dc86:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		x1 >>= 1;
 800dc8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dc8e:	f04f 0000 	mov.w	r0, #0
 800dc92:	f04f 0100 	mov.w	r1, #0
 800dc96:	0850      	lsrs	r0, r2, #1
 800dc98:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800dc9c:	0859      	lsrs	r1, r3, #1
 800dc9e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
		x2 >>= 2;
 800dca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dca6:	f04f 0000 	mov.w	r0, #0
 800dcaa:	f04f 0100 	mov.w	r1, #0
 800dcae:	0890      	lsrs	r0, r2, #2
 800dcb0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800dcb4:	0899      	lsrs	r1, r3, #2
 800dcb6:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
		x3 >>= 3;
 800dcba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dcbe:	f04f 0000 	mov.w	r0, #0
 800dcc2:	f04f 0100 	mov.w	r1, #0
 800dcc6:	08d0      	lsrs	r0, r2, #3
 800dcc8:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800dccc:	08d9      	lsrs	r1, r3, #3
 800dcce:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		skey[v + 0] = (x0 << 4) - x0;
 800dcd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dcd6:	f04f 0000 	mov.w	r0, #0
 800dcda:	f04f 0100 	mov.w	r1, #0
 800dcde:	0119      	lsls	r1, r3, #4
 800dce0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dce4:	0110      	lsls	r0, r2, #4
 800dce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dce8:	00da      	lsls	r2, r3, #3
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	eb03 0c02 	add.w	ip, r3, r2
 800dcf0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dcf4:	1a84      	subs	r4, r0, r2
 800dcf6:	623c      	str	r4, [r7, #32]
 800dcf8:	eb61 0303 	sbc.w	r3, r1, r3
 800dcfc:	627b      	str	r3, [r7, #36]	; 0x24
 800dcfe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dd02:	e9cc 3400 	strd	r3, r4, [ip]
		skey[v + 1] = (x1 << 4) - x1;
 800dd06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd0a:	f04f 0000 	mov.w	r0, #0
 800dd0e:	f04f 0100 	mov.w	r1, #0
 800dd12:	0119      	lsls	r1, r3, #4
 800dd14:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dd18:	0110      	lsls	r0, r2, #4
 800dd1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	00da      	lsls	r2, r3, #3
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	189c      	adds	r4, r3, r2
 800dd24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd28:	1a85      	subs	r5, r0, r2
 800dd2a:	eb61 0603 	sbc.w	r6, r1, r3
 800dd2e:	e9c4 5600 	strd	r5, r6, [r4]
		skey[v + 2] = (x2 << 4) - x2;
 800dd32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd36:	f04f 0000 	mov.w	r0, #0
 800dd3a:	f04f 0100 	mov.w	r1, #0
 800dd3e:	0119      	lsls	r1, r3, #4
 800dd40:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dd44:	0110      	lsls	r0, r2, #4
 800dd46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd48:	3302      	adds	r3, #2
 800dd4a:	00da      	lsls	r2, r3, #3
 800dd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4e:	189c      	adds	r4, r3, r2
 800dd50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd54:	ebb0 0a02 	subs.w	sl, r0, r2
 800dd58:	eb61 0b03 	sbc.w	fp, r1, r3
 800dd5c:	e9c4 ab00 	strd	sl, fp, [r4]
		skey[v + 3] = (x3 << 4) - x3;
 800dd60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd64:	f04f 0000 	mov.w	r0, #0
 800dd68:	f04f 0100 	mov.w	r1, #0
 800dd6c:	0119      	lsls	r1, r3, #4
 800dd6e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800dd72:	0110      	lsls	r0, r2, #4
 800dd74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd76:	3303      	adds	r3, #3
 800dd78:	00da      	lsls	r2, r3, #3
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7c:	189c      	adds	r4, r3, r2
 800dd7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd82:	ebb0 0802 	subs.w	r8, r0, r2
 800dd86:	eb61 0903 	sbc.w	r9, r1, r3
 800dd8a:	e9c4 8900 	strd	r8, r9, [r4]
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800dd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd90:	3301      	adds	r3, #1
 800dd92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd96:	3304      	adds	r3, #4
 800dd98:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	f4ff af2f 	bcc.w	800dc02 <br_aes_ct64_skey_expand+0x1a>
	}
}
 800dda4:	bf00      	nop
 800dda6:	bf00      	nop
 800dda8:	3760      	adds	r7, #96	; 0x60
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ddb0:	4770      	bx	lr

0800ddb2 <add_round_key>:

static inline void add_round_key(uint64_t *q, const uint64_t *sk)
{
 800ddb2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ddb6:	b08d      	sub	sp, #52	; 0x34
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ddbc:	62b9      	str	r1, [r7, #40]	; 0x28
	q[0] ^= sk[0];
 800ddbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddca:	ea80 0402 	eor.w	r4, r0, r2
 800ddce:	ea81 0503 	eor.w	r5, r1, r3
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	e9c3 4500 	strd	r4, r5, [r3]
	q[1] ^= sk[1];
 800ddd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddda:	3308      	adds	r3, #8
 800dddc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde2:	3308      	adds	r3, #8
 800dde4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddea:	3308      	adds	r3, #8
 800ddec:	ea84 0800 	eor.w	r8, r4, r0
 800ddf0:	ea85 0901 	eor.w	r9, r5, r1
 800ddf4:	e9c3 8900 	strd	r8, r9, [r3]
	q[2] ^= sk[2];
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfa:	3310      	adds	r3, #16
 800ddfc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	3310      	adds	r3, #16
 800de04:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0a:	3310      	adds	r3, #16
 800de0c:	ea84 0a00 	eor.w	sl, r4, r0
 800de10:	ea85 0b01 	eor.w	fp, r5, r1
 800de14:	e9c3 ab00 	strd	sl, fp, [r3]
	q[3] ^= sk[3];
 800de18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1a:	3318      	adds	r3, #24
 800de1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	3318      	adds	r3, #24
 800de24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2a:	3318      	adds	r3, #24
 800de2c:	ea84 0200 	eor.w	r2, r4, r0
 800de30:	623a      	str	r2, [r7, #32]
 800de32:	ea85 0201 	eor.w	r2, r5, r1
 800de36:	627a      	str	r2, [r7, #36]	; 0x24
 800de38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de3c:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] ^= sk[4];
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	3320      	adds	r3, #32
 800de44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	3320      	adds	r3, #32
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800de52:	3420      	adds	r4, #32
 800de54:	ea80 0502 	eor.w	r5, r0, r2
 800de58:	61bd      	str	r5, [r7, #24]
 800de5a:	404b      	eors	r3, r1
 800de5c:	61fb      	str	r3, [r7, #28]
 800de5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de62:	e9c4 2300 	strd	r2, r3, [r4]
	q[5] ^= sk[5];
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	3328      	adds	r3, #40	; 0x28
 800de6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de70:	3328      	adds	r3, #40	; 0x28
 800de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de76:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800de78:	3428      	adds	r4, #40	; 0x28
 800de7a:	ea80 0502 	eor.w	r5, r0, r2
 800de7e:	613d      	str	r5, [r7, #16]
 800de80:	404b      	eors	r3, r1
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800de88:	e9c4 2300 	strd	r2, r3, [r4]
	q[6] ^= sk[6];
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	3330      	adds	r3, #48	; 0x30
 800de90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	3330      	adds	r3, #48	; 0x30
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800de9e:	3430      	adds	r4, #48	; 0x30
 800dea0:	ea80 0502 	eor.w	r5, r0, r2
 800dea4:	60bd      	str	r5, [r7, #8]
 800dea6:	404b      	eors	r3, r1
 800dea8:	60fb      	str	r3, [r7, #12]
 800deaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800deae:	e9c4 2300 	strd	r2, r3, [r4]
	q[7] ^= sk[7];
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	3338      	adds	r3, #56	; 0x38
 800deb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debc:	3338      	adds	r3, #56	; 0x38
 800debe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800dec4:	3438      	adds	r4, #56	; 0x38
 800dec6:	ea80 0502 	eor.w	r5, r0, r2
 800deca:	603d      	str	r5, [r7, #0]
 800decc:	404b      	eors	r3, r1
 800dece:	607b      	str	r3, [r7, #4]
 800ded0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ded4:	e9c4 2300 	strd	r2, r3, [r4]
}
 800ded8:	bf00      	nop
 800deda:	3734      	adds	r7, #52	; 0x34
 800dedc:	46bd      	mov	sp, r7
 800dede:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dee2:	4770      	bx	lr

0800dee4 <shift_rows>:

static inline void shift_rows(uint64_t *q)
{
 800dee4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800dee8:	b09b      	sub	sp, #108	; 0x6c
 800deea:	af00      	add	r7, sp, #0
 800deec:	6578      	str	r0, [r7, #84]	; 0x54
	int i;

	for (i = 0; i < 8; i ++) {
 800deee:	2300      	movs	r3, #0
 800def0:	667b      	str	r3, [r7, #100]	; 0x64
 800def2:	e0ab      	b.n	800e04c <shift_rows+0x168>
		uint64_t x;

		x = q[i];
 800def4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800def6:	00da      	lsls	r2, r3, #3
 800def8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800defa:	4413      	add	r3, r2
 800defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df00:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800df04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df08:	b293      	uxth	r3, r2
 800df0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800df0c:	2300      	movs	r3, #0
 800df0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800df10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df14:	f04f 0000 	mov.w	r0, #0
 800df18:	f04f 0100 	mov.w	r1, #0
 800df1c:	0910      	lsrs	r0, r2, #4
 800df1e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800df22:	0919      	lsrs	r1, r3, #4
 800df24:	f020 4870 	bic.w	r8, r0, #4026531840	; 0xf0000000
 800df28:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800df2c:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800df30:	f04f 0900 	mov.w	r9, #0
 800df34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800df38:	460b      	mov	r3, r1
 800df3a:	ea43 0308 	orr.w	r3, r3, r8
 800df3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800df40:	4613      	mov	r3, r2
 800df42:	ea43 0309 	orr.w	r3, r3, r9
 800df46:	64fb      	str	r3, [r7, #76]	; 0x4c
			| ((x & (uint64_t)0x00000000000F0000) << 12)
 800df48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df4c:	f04f 0000 	mov.w	r0, #0
 800df50:	f04f 0100 	mov.w	r1, #0
 800df54:	0319      	lsls	r1, r3, #12
 800df56:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800df5a:	0310      	lsls	r0, r2, #12
 800df5c:	f000 4370 	and.w	r3, r0, #4026531840	; 0xf0000000
 800df60:	623b      	str	r3, [r7, #32]
 800df62:	2300      	movs	r3, #0
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
 800df66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800df6c:	4602      	mov	r2, r0
 800df6e:	4313      	orrs	r3, r2
 800df70:	643b      	str	r3, [r7, #64]	; 0x40
 800df72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df74:	460a      	mov	r2, r1
 800df76:	4313      	orrs	r3, r2
 800df78:	647b      	str	r3, [r7, #68]	; 0x44
			| ((x & (uint64_t)0x0000FF0000000000) >> 8)
 800df7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df7e:	f04f 0000 	mov.w	r0, #0
 800df82:	f04f 0100 	mov.w	r1, #0
 800df86:	0a10      	lsrs	r0, r2, #8
 800df88:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800df8c:	0a19      	lsrs	r1, r3, #8
 800df8e:	2300      	movs	r3, #0
 800df90:	61bb      	str	r3, [r7, #24]
 800df92:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800df96:	61fb      	str	r3, [r7, #28]
 800df98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800df9e:	4602      	mov	r2, r0
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa6:	460a      	mov	r2, r1
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
			| ((x & (uint64_t)0x000000FF00000000) << 8)
 800dfac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dfb0:	f04f 0000 	mov.w	r0, #0
 800dfb4:	f04f 0100 	mov.w	r1, #0
 800dfb8:	0219      	lsls	r1, r3, #8
 800dfba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800dfbe:	0210      	lsls	r0, r2, #8
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	613b      	str	r3, [r7, #16]
 800dfc4:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfcc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	633b      	str	r3, [r7, #48]	; 0x30
 800dfd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd8:	460a      	mov	r2, r1
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	637b      	str	r3, [r7, #52]	; 0x34
			| ((x & (uint64_t)0xF000000000000000) >> 12)
 800dfde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dfe2:	f04f 0000 	mov.w	r0, #0
 800dfe6:	f04f 0100 	mov.w	r1, #0
 800dfea:	0b10      	lsrs	r0, r2, #12
 800dfec:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800dff0:	0b19      	lsrs	r1, r3, #12
 800dff2:	2300      	movs	r3, #0
 800dff4:	60bb      	str	r3, [r7, #8]
 800dff6:	f401 2370 	and.w	r3, r1, #983040	; 0xf0000
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e002:	4602      	mov	r2, r0
 800e004:	ea43 0a02 	orr.w	sl, r3, r2
 800e008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00a:	460a      	mov	r2, r1
 800e00c:	ea43 0b02 	orr.w	fp, r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e010:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e014:	f04f 0000 	mov.w	r0, #0
 800e018:	f04f 0100 	mov.w	r1, #0
 800e01c:	0119      	lsls	r1, r3, #4
 800e01e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e022:	0110      	lsls	r0, r2, #4
 800e024:	2400      	movs	r4, #0
 800e026:	0d0d      	lsrs	r5, r1, #20
 800e028:	052d      	lsls	r5, r5, #20
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e02a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e02c:	00da      	lsls	r2, r3, #3
 800e02e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e030:	4413      	add	r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e032:	ea4a 0204 	orr.w	r2, sl, r4
 800e036:	603a      	str	r2, [r7, #0]
 800e038:	ea4b 0205 	orr.w	r2, fp, r5
 800e03c:	607a      	str	r2, [r7, #4]
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e03e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e042:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0; i < 8; i ++) {
 800e046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e048:	3301      	adds	r3, #1
 800e04a:	667b      	str	r3, [r7, #100]	; 0x64
 800e04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e04e:	2b07      	cmp	r3, #7
 800e050:	f77f af50 	ble.w	800def4 <shift_rows+0x10>
	}
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop
 800e058:	376c      	adds	r7, #108	; 0x6c
 800e05a:	46bd      	mov	sp, r7
 800e05c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e060:	4770      	bx	lr

0800e062 <rotr32>:

static inline uint64_t rotr32(uint64_t x)
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	e9c7 0100 	strd	r0, r1, [r7]
	return (x << 32) | (x >> 32);
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	683b      	ldr	r3, [r7, #0]
}
 800e070:	4610      	mov	r0, r2
 800e072:	4619      	mov	r1, r3
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr

0800e07e <mix_columns>:

static inline void mix_columns(uint64_t *q)
{
 800e07e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e082:	b0f8      	sub	sp, #480	; 0x1e0
 800e084:	af00      	add	r7, sp, #0
 800e086:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	uint64_t q0, q1, q2, q3, q4, q5, q6, q7;
	uint64_t r0, r1, r2, r3, r4, r5, r6, r7;

	q0 = q[0];
 800e08a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	q1 = q[1];
 800e096:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e09a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e09e:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	q2 = q[2];
 800e0a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e0aa:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
	q3 = q[3];
 800e0ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e0b6:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	q4 = q[4];
 800e0ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0c2:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
	q5 = q[5];
 800e0c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e0ce:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
	q6 = q[6];
 800e0d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800e0da:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
	q7 = q[7];
 800e0de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e0e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e0e6:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	r0 = (q0 >> 16) | (q0 << 48);
 800e0ea:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e0ee:	041a      	lsls	r2, r3, #16
 800e0f0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e0f4:	0c1b      	lsrs	r3, r3, #16
 800e0f6:	ea42 0403 	orr.w	r4, r2, r3
 800e0fa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e0fe:	041a      	lsls	r2, r3, #16
 800e100:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e104:	0c1b      	lsrs	r3, r3, #16
 800e106:	ea42 0503 	orr.w	r5, r2, r3
 800e10a:	e9c7 4566 	strd	r4, r5, [r7, #408]	; 0x198
	r1 = (q1 >> 16) | (q1 << 48);
 800e10e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e112:	041a      	lsls	r2, r3, #16
 800e114:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e118:	0c1b      	lsrs	r3, r3, #16
 800e11a:	ea42 0803 	orr.w	r8, r2, r3
 800e11e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e122:	041a      	lsls	r2, r3, #16
 800e124:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e128:	0c1b      	lsrs	r3, r3, #16
 800e12a:	ea42 0903 	orr.w	r9, r2, r3
 800e12e:	e9c7 8964 	strd	r8, r9, [r7, #400]	; 0x190
	r2 = (q2 >> 16) | (q2 << 48);
 800e132:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e136:	041a      	lsls	r2, r3, #16
 800e138:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e13c:	0c1b      	lsrs	r3, r3, #16
 800e13e:	4313      	orrs	r3, r2
 800e140:	62bb      	str	r3, [r7, #40]	; 0x28
 800e142:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e146:	041a      	lsls	r2, r3, #16
 800e148:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e14c:	0c1b      	lsrs	r3, r3, #16
 800e14e:	4313      	orrs	r3, r2
 800e150:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e152:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e156:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	r3 = (q3 >> 16) | (q3 << 48);
 800e15a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e15e:	041a      	lsls	r2, r3, #16
 800e160:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e164:	0c1b      	lsrs	r3, r3, #16
 800e166:	4313      	orrs	r3, r2
 800e168:	623b      	str	r3, [r7, #32]
 800e16a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e16e:	041a      	lsls	r2, r3, #16
 800e170:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e174:	0c1b      	lsrs	r3, r3, #16
 800e176:	4313      	orrs	r3, r2
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
 800e17a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e17e:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	r4 = (q4 >> 16) | (q4 << 48);
 800e182:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e186:	041a      	lsls	r2, r3, #16
 800e188:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e18c:	0c1b      	lsrs	r3, r3, #16
 800e18e:	4313      	orrs	r3, r2
 800e190:	61bb      	str	r3, [r7, #24]
 800e192:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e196:	041a      	lsls	r2, r3, #16
 800e198:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e19c:	0c1b      	lsrs	r3, r3, #16
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	61fb      	str	r3, [r7, #28]
 800e1a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e1a6:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
	r5 = (q5 >> 16) | (q5 << 48);
 800e1aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e1ae:	041a      	lsls	r2, r3, #16
 800e1b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e1b4:	0c1b      	lsrs	r3, r3, #16
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	613b      	str	r3, [r7, #16]
 800e1ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e1be:	041a      	lsls	r2, r3, #16
 800e1c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e1c4:	0c1b      	lsrs	r3, r3, #16
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	617b      	str	r3, [r7, #20]
 800e1ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e1ce:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
	r6 = (q6 >> 16) | (q6 << 48);
 800e1d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e1d6:	041a      	lsls	r2, r3, #16
 800e1d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e1dc:	0c1b      	lsrs	r3, r3, #16
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	60bb      	str	r3, [r7, #8]
 800e1e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e1e6:	041a      	lsls	r2, r3, #16
 800e1e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e1ec:	0c1b      	lsrs	r3, r3, #16
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	60fb      	str	r3, [r7, #12]
 800e1f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e1f6:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
	r7 = (q7 >> 16) | (q7 << 48);
 800e1fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e1fe:	041a      	lsls	r2, r3, #16
 800e200:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e204:	0c1b      	lsrs	r3, r3, #16
 800e206:	4313      	orrs	r3, r2
 800e208:	603b      	str	r3, [r7, #0]
 800e20a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e20e:	041a      	lsls	r2, r3, #16
 800e210:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e214:	0c1b      	lsrs	r3, r3, #16
 800e216:	4313      	orrs	r3, r2
 800e218:	607b      	str	r3, [r7, #4]
 800e21a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e21e:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160

	q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800e222:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e226:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e22a:	ea80 0a02 	eor.w	sl, r0, r2
 800e22e:	ea81 0b03 	eor.w	fp, r1, r3
 800e232:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e236:	ea8a 0102 	eor.w	r1, sl, r2
 800e23a:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800e23e:	ea8b 0303 	eor.w	r3, fp, r3
 800e242:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e246:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e24a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e24e:	ea80 0402 	eor.w	r4, r0, r2
 800e252:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800e256:	404b      	eors	r3, r1
 800e258:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800e25c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e260:	f7ff feff 	bl	800e062 <rotr32>
 800e264:	4602      	mov	r2, r0
 800e266:	460b      	mov	r3, r1
 800e268:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800e26c:	4621      	mov	r1, r4
 800e26e:	4051      	eors	r1, r2
 800e270:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800e274:	4629      	mov	r1, r5
 800e276:	4059      	eors	r1, r3
 800e278:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800e27c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e280:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800e284:	e9c3 1200 	strd	r1, r2, [r3]
	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 800e288:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e28c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e290:	ea80 0402 	eor.w	r4, r0, r2
 800e294:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800e298:	404b      	eors	r3, r1
 800e29a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800e29e:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e2a2:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800e2a6:	4621      	mov	r1, r4
 800e2a8:	4051      	eors	r1, r2
 800e2aa:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	4059      	eors	r1, r3
 800e2b2:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800e2b6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e2ba:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800e2be:	4621      	mov	r1, r4
 800e2c0:	4051      	eors	r1, r2
 800e2c2:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	4059      	eors	r1, r3
 800e2ca:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800e2ce:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e2d2:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	4051      	eors	r1, r2
 800e2da:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800e2de:	4629      	mov	r1, r5
 800e2e0:	4059      	eors	r1, r3
 800e2e2:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800e2e6:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e2ea:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e2ee:	ea80 0402 	eor.w	r4, r0, r2
 800e2f2:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800e2f6:	404b      	eors	r3, r1
 800e2f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e2fc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e300:	f7ff feaf 	bl	800e062 <rotr32>
 800e304:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e308:	3308      	adds	r3, #8
 800e30a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800e30e:	4622      	mov	r2, r4
 800e310:	4042      	eors	r2, r0
 800e312:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800e316:	462a      	mov	r2, r5
 800e318:	404a      	eors	r2, r1
 800e31a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800e31e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800e322:	e9c3 1200 	strd	r1, r2, [r3]
	q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 800e326:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e32a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e32e:	ea80 0402 	eor.w	r4, r0, r2
 800e332:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800e336:	404b      	eors	r3, r1
 800e338:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e33c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e340:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800e344:	4621      	mov	r1, r4
 800e346:	4051      	eors	r1, r2
 800e348:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800e34c:	4629      	mov	r1, r5
 800e34e:	4059      	eors	r1, r3
 800e350:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800e354:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e358:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e35c:	ea80 0402 	eor.w	r4, r0, r2
 800e360:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800e364:	404b      	eors	r3, r1
 800e366:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e36a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800e36e:	f7ff fe78 	bl	800e062 <rotr32>
 800e372:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e376:	3310      	adds	r3, #16
 800e378:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800e37c:	4622      	mov	r2, r4
 800e37e:	4042      	eors	r2, r0
 800e380:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800e384:	462a      	mov	r2, r5
 800e386:	404a      	eors	r2, r1
 800e388:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800e38c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e390:	e9c3 1200 	strd	r1, r2, [r3]
	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 800e394:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e398:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e39c:	ea80 0402 	eor.w	r4, r0, r2
 800e3a0:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800e3a4:	404b      	eors	r3, r1
 800e3a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e3aa:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e3ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	4051      	eors	r1, r2
 800e3b6:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800e3ba:	4629      	mov	r1, r5
 800e3bc:	4059      	eors	r1, r3
 800e3be:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800e3c2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e3c6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	4051      	eors	r1, r2
 800e3ce:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4059      	eors	r1, r3
 800e3d6:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800e3da:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e3de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4051      	eors	r1, r2
 800e3e6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	4059      	eors	r1, r3
 800e3ee:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800e3f2:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e3f6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e3fa:	ea80 0402 	eor.w	r4, r0, r2
 800e3fe:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e402:	404b      	eors	r3, r1
 800e404:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e408:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e40c:	f7ff fe29 	bl	800e062 <rotr32>
 800e410:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e414:	3318      	adds	r3, #24
 800e416:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800e41a:	4622      	mov	r2, r4
 800e41c:	4042      	eors	r2, r0
 800e41e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800e422:	462a      	mov	r2, r5
 800e424:	404a      	eors	r2, r1
 800e426:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e42a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e42e:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 800e432:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e436:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e43a:	ea80 0402 	eor.w	r4, r0, r2
 800e43e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800e442:	404b      	eors	r3, r1
 800e444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e448:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e44c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800e450:	4621      	mov	r1, r4
 800e452:	4051      	eors	r1, r2
 800e454:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800e458:	4629      	mov	r1, r5
 800e45a:	4059      	eors	r1, r3
 800e45c:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800e460:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e464:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800e468:	4621      	mov	r1, r4
 800e46a:	4051      	eors	r1, r2
 800e46c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800e470:	4629      	mov	r1, r5
 800e472:	4059      	eors	r1, r3
 800e474:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800e478:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e47c:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e480:	4621      	mov	r1, r4
 800e482:	4051      	eors	r1, r2
 800e484:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800e488:	4629      	mov	r1, r5
 800e48a:	4059      	eors	r1, r3
 800e48c:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800e490:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e494:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e498:	ea80 0402 	eor.w	r4, r0, r2
 800e49c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800e4a0:	404b      	eors	r3, r1
 800e4a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e4a6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e4aa:	f7ff fdda 	bl	800e062 <rotr32>
 800e4ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e4b2:	3320      	adds	r3, #32
 800e4b4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800e4b8:	4622      	mov	r2, r4
 800e4ba:	4042      	eors	r2, r0
 800e4bc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	404a      	eors	r2, r1
 800e4c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e4c8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e4cc:	e9c3 1200 	strd	r1, r2, [r3]
	q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 800e4d0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e4d4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e4d8:	ea80 0402 	eor.w	r4, r0, r2
 800e4dc:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800e4e0:	404b      	eors	r3, r1
 800e4e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e4e6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e4ea:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4051      	eors	r1, r2
 800e4f2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	4059      	eors	r1, r3
 800e4fa:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800e4fe:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e502:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e506:	ea80 0402 	eor.w	r4, r0, r2
 800e50a:	67bc      	str	r4, [r7, #120]	; 0x78
 800e50c:	404b      	eors	r3, r1
 800e50e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e510:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800e514:	f7ff fda5 	bl	800e062 <rotr32>
 800e518:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e51c:	3328      	adds	r3, #40	; 0x28
 800e51e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e522:	4622      	mov	r2, r4
 800e524:	4042      	eors	r2, r0
 800e526:	673a      	str	r2, [r7, #112]	; 0x70
 800e528:	462a      	mov	r2, r5
 800e52a:	404a      	eors	r2, r1
 800e52c:	677a      	str	r2, [r7, #116]	; 0x74
 800e52e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e532:	e9c3 1200 	strd	r1, r2, [r3]
	q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 800e536:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e53a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e53e:	ea80 0402 	eor.w	r4, r0, r2
 800e542:	66bc      	str	r4, [r7, #104]	; 0x68
 800e544:	404b      	eors	r3, r1
 800e546:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e548:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e54c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800e550:	4621      	mov	r1, r4
 800e552:	4051      	eors	r1, r2
 800e554:	6639      	str	r1, [r7, #96]	; 0x60
 800e556:	4629      	mov	r1, r5
 800e558:	4059      	eors	r1, r3
 800e55a:	6679      	str	r1, [r7, #100]	; 0x64
 800e55c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e560:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e564:	ea80 0402 	eor.w	r4, r0, r2
 800e568:	65bc      	str	r4, [r7, #88]	; 0x58
 800e56a:	404b      	eors	r3, r1
 800e56c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e56e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e572:	f7ff fd76 	bl	800e062 <rotr32>
 800e576:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e57a:	3330      	adds	r3, #48	; 0x30
 800e57c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e580:	4622      	mov	r2, r4
 800e582:	4042      	eors	r2, r0
 800e584:	653a      	str	r2, [r7, #80]	; 0x50
 800e586:	462a      	mov	r2, r5
 800e588:	404a      	eors	r2, r1
 800e58a:	657a      	str	r2, [r7, #84]	; 0x54
 800e58c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e590:	e9c3 1200 	strd	r1, r2, [r3]
	q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
 800e594:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e598:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e59c:	ea80 0402 	eor.w	r4, r0, r2
 800e5a0:	64bc      	str	r4, [r7, #72]	; 0x48
 800e5a2:	404b      	eors	r3, r1
 800e5a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5a6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e5aa:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	4051      	eors	r1, r2
 800e5b2:	6439      	str	r1, [r7, #64]	; 0x40
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4059      	eors	r1, r3
 800e5b8:	6479      	str	r1, [r7, #68]	; 0x44
 800e5ba:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e5be:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e5c2:	ea80 0402 	eor.w	r4, r0, r2
 800e5c6:	63bc      	str	r4, [r7, #56]	; 0x38
 800e5c8:	404b      	eors	r3, r1
 800e5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e5d0:	f7ff fd47 	bl	800e062 <rotr32>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800e5dc:	3138      	adds	r1, #56	; 0x38
 800e5de:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4050      	eors	r0, r2
 800e5e6:	6338      	str	r0, [r7, #48]	; 0x30
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	4058      	eors	r0, r3
 800e5ec:	6378      	str	r0, [r7, #52]	; 0x34
 800e5ee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e5f2:	e9c1 3400 	strd	r3, r4, [r1]
}
 800e5f6:	bf00      	nop
 800e5f8:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e602 <inc4_be>:

static void inc4_be(uint32_t *x)
{
 800e602:	b580      	push	{r7, lr}
 800e604:	b082      	sub	sp, #8
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  *x = br_swap32(*x)+4;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fc ff12 	bl	800b438 <br_swap32>
 800e614:	4603      	mov	r3, r0
 800e616:	1d1a      	adds	r2, r3, #4
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	601a      	str	r2, [r3, #0]
  *x = br_swap32(*x);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4618      	mov	r0, r3
 800e622:	f7fc ff09 	bl	800b438 <br_swap32>
 800e626:	4602      	mov	r2, r0
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	601a      	str	r2, [r3, #0]
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <aes_ctr4x>:

static void aes_ctr4x(uint8_t out[64], uint32_t ivw[16], uint64_t sk_exp[64])
{
 800e634:	b590      	push	{r4, r7, lr}
 800e636:	b0a9      	sub	sp, #164	; 0xa4
 800e638:	af02      	add	r7, sp, #8
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
  uint32_t w[16];
  uint64_t q[8];
  int i;

  memcpy(w, ivw, sizeof(w));
 800e640:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e644:	2240      	movs	r2, #64	; 0x40
 800e646:	68b9      	ldr	r1, [r7, #8]
 800e648:	4618      	mov	r0, r3
 800e64a:	f007 f98b 	bl	8015964 <memcpy>
  for (i = 0; i < 4; i++) {
 800e64e:	2300      	movs	r3, #0
 800e650:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e654:	e01b      	b.n	800e68e <aes_ctr4x+0x5a>
    br_aes_ct64_interleave_in(&q[i], &q[i + 4], w + (i << 2));
 800e656:	f107 0210 	add.w	r2, r7, #16
 800e65a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e65e:	00db      	lsls	r3, r3, #3
 800e660:	18d0      	adds	r0, r2, r3
 800e662:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e666:	3304      	adds	r3, #4
 800e668:	f107 0210 	add.w	r2, r7, #16
 800e66c:	00db      	lsls	r3, r3, #3
 800e66e:	18d1      	adds	r1, r2, r3
 800e670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e67c:	4413      	add	r3, r2
 800e67e:	461a      	mov	r2, r3
 800e680:	f7fe fe32 	bl	800d2e8 <br_aes_ct64_interleave_in>
  for (i = 0; i < 4; i++) {
 800e684:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e688:	3301      	adds	r3, #1
 800e68a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e68e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e692:	2b03      	cmp	r3, #3
 800e694:	dddf      	ble.n	800e656 <aes_ctr4x+0x22>
  }
  br_aes_ct64_ortho(q);
 800e696:	f107 0310 	add.w	r3, r7, #16
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe f925 	bl	800c8ea <br_aes_ct64_ortho>

  add_round_key(q, sk_exp);
 800e6a0:	f107 0310 	add.w	r3, r7, #16
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7ff fb83 	bl	800ddb2 <add_round_key>
  for (i = 1; i < 14; i++) {
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6b2:	e01f      	b.n	800e6f4 <aes_ctr4x+0xc0>
    br_aes_ct64_bitslice_Sbox(q);
 800e6b4:	f107 0310 	add.w	r3, r7, #16
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fc ff11 	bl	800b4e0 <br_aes_ct64_bitslice_Sbox>
    shift_rows(q);
 800e6be:	f107 0310 	add.w	r3, r7, #16
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7ff fc0e 	bl	800dee4 <shift_rows>
    mix_columns(q);
 800e6c8:	f107 0310 	add.w	r3, r7, #16
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff fcd6 	bl	800e07e <mix_columns>
    add_round_key(q, sk_exp + (i << 3));
 800e6d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6d6:	00db      	lsls	r3, r3, #3
 800e6d8:	00db      	lsls	r3, r3, #3
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	441a      	add	r2, r3
 800e6de:	f107 0310 	add.w	r3, r7, #16
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff fb64 	bl	800ddb2 <add_round_key>
  for (i = 1; i < 14; i++) {
 800e6ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6f8:	2b0d      	cmp	r3, #13
 800e6fa:	dddb      	ble.n	800e6b4 <aes_ctr4x+0x80>
  }
  br_aes_ct64_bitslice_Sbox(q);
 800e6fc:	f107 0310 	add.w	r3, r7, #16
 800e700:	4618      	mov	r0, r3
 800e702:	f7fc feed 	bl	800b4e0 <br_aes_ct64_bitslice_Sbox>
  shift_rows(q);
 800e706:	f107 0310 	add.w	r3, r7, #16
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7ff fbea 	bl	800dee4 <shift_rows>
  add_round_key(q, sk_exp + 112);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f503 7260 	add.w	r2, r3, #896	; 0x380
 800e716:	f107 0310 	add.w	r3, r7, #16
 800e71a:	4611      	mov	r1, r2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff fb48 	bl	800ddb2 <add_round_key>

  br_aes_ct64_ortho(q);
 800e722:	f107 0310 	add.w	r3, r7, #16
 800e726:	4618      	mov	r0, r3
 800e728:	f7fe f8df 	bl	800c8ea <br_aes_ct64_ortho>
  for (i = 0; i < 4; i ++) {
 800e72c:	2300      	movs	r3, #0
 800e72e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e732:	e023      	b.n	800e77c <aes_ctr4x+0x148>
    br_aes_ct64_interleave_out(w + (i << 2), q[i], q[i + 4]);
 800e734:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e740:	18d4      	adds	r4, r2, r3
 800e742:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	3398      	adds	r3, #152	; 0x98
 800e74a:	443b      	add	r3, r7
 800e74c:	3b88      	subs	r3, #136	; 0x88
 800e74e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e756:	3304      	adds	r3, #4
 800e758:	00db      	lsls	r3, r3, #3
 800e75a:	3398      	adds	r3, #152	; 0x98
 800e75c:	443b      	add	r3, r7
 800e75e:	3b88      	subs	r3, #136	; 0x88
 800e760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e764:	e9cd 2300 	strd	r2, r3, [sp]
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4620      	mov	r0, r4
 800e76e:	f7fe ff41 	bl	800d5f4 <br_aes_ct64_interleave_out>
  for (i = 0; i < 4; i ++) {
 800e772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e776:	3301      	adds	r3, #1
 800e778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e77c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e780:	2b03      	cmp	r3, #3
 800e782:	ddd7      	ble.n	800e734 <aes_ctr4x+0x100>
  }
  br_range_enc32le(out, w, 16);
 800e784:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e788:	2210      	movs	r2, #16
 800e78a:	4619      	mov	r1, r3
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	f7fc fe8b 	bl	800b4a8 <br_range_enc32le>

  /* Increase counter for next 4 blocks */
  inc4_be(ivw+3);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	330c      	adds	r3, #12
 800e796:	4618      	mov	r0, r3
 800e798:	f7ff ff33 	bl	800e602 <inc4_be>
  inc4_be(ivw+7);
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	331c      	adds	r3, #28
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7ff ff2e 	bl	800e602 <inc4_be>
  inc4_be(ivw+11);
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	332c      	adds	r3, #44	; 0x2c
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7ff ff29 	bl	800e602 <inc4_be>
  inc4_be(ivw+15);
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	333c      	adds	r3, #60	; 0x3c
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7ff ff24 	bl	800e602 <inc4_be>
}
 800e7ba:	bf00      	nop
 800e7bc:	379c      	adds	r7, #156	; 0x9c
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd90      	pop	{r4, r7, pc}

0800e7c2 <br_aes_ct64_ctr_init>:

static void br_aes_ct64_ctr_init(uint64_t sk_exp[120], const uint8_t *key)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b0be      	sub	sp, #248	; 0xf8
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	6039      	str	r1, [r7, #0]
	uint64_t skey[30];

	br_aes_ct64_keysched(skey, key);
 800e7cc:	f107 0308 	add.w	r3, r7, #8
 800e7d0:	6839      	ldr	r1, [r7, #0]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff f844 	bl	800d860 <br_aes_ct64_keysched>
	br_aes_ct64_skey_expand(sk_exp, skey);
 800e7d8:	f107 0308 	add.w	r3, r7, #8
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7ff fa02 	bl	800dbe8 <br_aes_ct64_skey_expand>
}
 800e7e4:	bf00      	nop
 800e7e6:	37f8      	adds	r7, #248	; 0xf8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <pqcrystals_aes256ctr_ref_init>:
  br_aes_ct64_ctr_init(sk_exp, key);
  br_aes_ct64_ctr_run(sk_exp, nonce, 0, out, outlen);
}

void aes256ctr_init(aes256ctr_ctx *s, const uint8_t *key, const uint8_t *nonce)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
  br_aes_ct64_ctr_init(s->sk_exp, key);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	68b9      	ldr	r1, [r7, #8]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7ff ffe0 	bl	800e7c2 <br_aes_ct64_ctr_init>

  br_range_dec32le(s->ivw, 3, nonce);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	2103      	movs	r1, #3
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fc fdf7 	bl	800b400 <br_range_dec32le>
  memcpy(s->ivw +  4, s->ivw, 3 * sizeof(uint32_t));
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e818:	f103 0010 	add.w	r0, r3, #16
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e822:	220c      	movs	r2, #12
 800e824:	4619      	mov	r1, r3
 800e826:	f007 f89d 	bl	8015964 <memcpy>
  memcpy(s->ivw +  8, s->ivw, 3 * sizeof(uint32_t));
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e830:	f103 0020 	add.w	r0, r3, #32
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e83a:	220c      	movs	r2, #12
 800e83c:	4619      	mov	r1, r3
 800e83e:	f007 f891 	bl	8015964 <memcpy>
  memcpy(s->ivw + 12, s->ivw, 3 * sizeof(uint32_t));
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e848:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e852:	220c      	movs	r2, #12
 800e854:	4619      	mov	r1, r3
 800e856:	f007 f885 	bl	8015964 <memcpy>
  s->ivw[ 3] = br_swap32(0);
 800e85a:	2000      	movs	r0, #0
 800e85c:	f7fc fdec 	bl	800b438 <br_swap32>
 800e860:	4602      	mov	r2, r0
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  s->ivw[ 7] = br_swap32(1);
 800e868:	2001      	movs	r0, #1
 800e86a:	f7fc fde5 	bl	800b438 <br_swap32>
 800e86e:	4602      	mov	r2, r0
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
  s->ivw[11] = br_swap32(2);
 800e876:	2002      	movs	r0, #2
 800e878:	f7fc fdde 	bl	800b438 <br_swap32>
 800e87c:	4602      	mov	r2, r0
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
  s->ivw[15] = br_swap32(3);
 800e884:	2003      	movs	r0, #3
 800e886:	f7fc fdd7 	bl	800b438 <br_swap32>
 800e88a:	4602      	mov	r2, r0
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
}
 800e892:	bf00      	nop
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <pqcrystals_aes256ctr_ref_squeezeblocks>:

void aes256ctr_squeezeblocks(uint8_t *out, size_t nblocks, aes256ctr_ctx *s)
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b084      	sub	sp, #16
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	60f8      	str	r0, [r7, #12]
 800e8a2:	60b9      	str	r1, [r7, #8]
 800e8a4:	607a      	str	r2, [r7, #4]
  while (nblocks > 0) {
 800e8a6:	e00d      	b.n	800e8c4 <pqcrystals_aes256ctr_ref_squeezeblocks+0x2a>
    aes_ctr4x(out, s->ivw, s->sk_exp);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	f7ff febe 	bl	800e634 <aes_ctr4x>
    out += 64;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	3340      	adds	r3, #64	; 0x40
 800e8bc:	60fb      	str	r3, [r7, #12]
    nblocks--;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	60bb      	str	r3, [r7, #8]
  while (nblocks > 0) {
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1ee      	bne.n	800e8a8 <pqcrystals_aes256ctr_ref_squeezeblocks+0xe>
  }
}
 800e8ca:	bf00      	nop
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 800e8d4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800e8d8:	b086      	sub	sp, #24
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800e8de:	f04f 0000 	mov.w	r0, #0
 800e8e2:	f04f 0100 	mov.w	r1, #0
 800e8e6:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	6179      	str	r1, [r7, #20]
 800e8ee:	e022      	b.n	800e936 <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	6979      	ldr	r1, [r7, #20]
 800e8f4:	4401      	add	r1, r0
 800e8f6:	7809      	ldrb	r1, [r1, #0]
 800e8f8:	b2c9      	uxtb	r1, r1
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	4605      	mov	r5, r0
 800e900:	6979      	ldr	r1, [r7, #20]
 800e902:	00c9      	lsls	r1, r1, #3
 800e904:	f1a1 0620 	sub.w	r6, r1, #32
 800e908:	f1c1 0020 	rsb	r0, r1, #32
 800e90c:	fa05 f301 	lsl.w	r3, r5, r1
 800e910:	fa04 f606 	lsl.w	r6, r4, r6
 800e914:	4333      	orrs	r3, r6
 800e916:	fa24 f000 	lsr.w	r0, r4, r0
 800e91a:	4303      	orrs	r3, r0
 800e91c:	fa04 f201 	lsl.w	r2, r4, r1
 800e920:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e924:	ea40 0802 	orr.w	r8, r0, r2
 800e928:	ea41 0903 	orr.w	r9, r1, r3
 800e92c:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 800e930:	6979      	ldr	r1, [r7, #20]
 800e932:	3101      	adds	r1, #1
 800e934:	6179      	str	r1, [r7, #20]
 800e936:	6979      	ldr	r1, [r7, #20]
 800e938:	2907      	cmp	r1, #7
 800e93a:	d9d9      	bls.n	800e8f0 <load64+0x1c>

  return r;
 800e93c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800e940:	4610      	mov	r0, r2
 800e942:	4619      	mov	r1, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e94c:	4770      	bx	lr

0800e94e <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800e94e:	b4f0      	push	{r4, r5, r6, r7}
 800e950:	b086      	sub	sp, #24
 800e952:	af00      	add	r7, sp, #0
 800e954:	60f8      	str	r0, [r7, #12]
 800e956:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 800e95a:	2300      	movs	r3, #0
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	e019      	b.n	800e994 <store64+0x46>
    x[i] = u >> 8*i;
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	00d9      	lsls	r1, r3, #3
 800e964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e968:	f1c1 0620 	rsb	r6, r1, #32
 800e96c:	f1a1 0020 	sub.w	r0, r1, #32
 800e970:	fa22 f401 	lsr.w	r4, r2, r1
 800e974:	fa03 f606 	lsl.w	r6, r3, r6
 800e978:	4334      	orrs	r4, r6
 800e97a:	fa23 f000 	lsr.w	r0, r3, r0
 800e97e:	4304      	orrs	r4, r0
 800e980:	fa23 f501 	lsr.w	r5, r3, r1
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	4413      	add	r3, r2
 800e98a:	b2e2      	uxtb	r2, r4
 800e98c:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	3301      	adds	r3, #1
 800e992:	617b      	str	r3, [r7, #20]
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	2b07      	cmp	r3, #7
 800e998:	d9e2      	bls.n	800e960 <store64+0x12>
}
 800e99a:	bf00      	nop
 800e99c:	bf00      	nop
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bcf0      	pop	{r4, r5, r6, r7}
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 800e9a8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e9ac:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e9ba:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800e9bc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9c0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ca:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800e9ce:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 800e9d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e9e0:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800e9e4:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 800e9e8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9f6:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800e9fa:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 800e9fe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ea0c:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800ea10:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 800ea14:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea18:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea22:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800ea26:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 800ea2a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ea38:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800ea3c:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 800ea40:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800ea4e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800ea52:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800ea56:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ea64:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800ea68:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800ea6c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea70:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ea7a:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800ea7e:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800ea82:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ea90:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800ea94:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 800ea98:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea9c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800eaa6:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800eaaa:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800eaae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eab2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800eabc:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800eac0:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 800eac4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eac8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800ead2:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800ead6:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 800eada:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eade:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800eae8:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800eaec:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 800eaf0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eaf4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800eafe:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800eb02:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 800eb06:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800eb14:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800eb18:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 800eb1c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb20:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800eb2a:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800eb2e:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 800eb32:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800eb40:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800eb44:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 800eb48:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb4c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800eb56:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800eb5a:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 800eb5e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800eb6c:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800eb70:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 800eb74:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb78:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800eb82:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800eb86:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 800eb8a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800eb98:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800eb9c:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 800eba0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eba4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800ebae:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800ebb2:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 800ebb6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800ebc4:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800ebc8:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 800ebcc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ebd0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800ebda:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800ebde:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800ebe8:	f002 bdf7 	b.w	80117da <KeccakF1600_StatePermute+0x2e32>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 800ebec:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800ebf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebf4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	ea80 0602 	eor.w	r6, r0, r2
 800ec00:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 800ec04:	404b      	eors	r3, r1
 800ec06:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 800ec0a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 800ec16:	4051      	eors	r1, r2
 800ec18:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 800ec1c:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 800ec20:	404b      	eors	r3, r1
 800ec22:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 800ec26:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 800ec32:	4051      	eors	r1, r2
 800ec34:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 800ec38:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 800ec3c:	404b      	eors	r3, r1
 800ec3e:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 800ec42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 800ec4e:	4051      	eors	r1, r2
 800ec50:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800ec54:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 800ec58:	404b      	eors	r3, r1
 800ec5a:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800ec5e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800ec6a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 800ec6e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800ec72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec76:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	ea80 0602 	eor.w	r6, r0, r2
 800ec82:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 800ec86:	404b      	eors	r3, r1
 800ec88:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 800ec8c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 800ec98:	4051      	eors	r1, r2
 800ec9a:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 800ec9e:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 800eca2:	404b      	eors	r3, r1
 800eca4:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 800eca8:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb0:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 800ecb4:	4051      	eors	r1, r2
 800ecb6:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 800ecba:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 800ecbe:	404b      	eors	r3, r1
 800ecc0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800ecc4:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 800ecd0:	4051      	eors	r1, r2
 800ecd2:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 800ecd6:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 800ecda:	404b      	eors	r3, r1
 800ecdc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800ece0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ecec:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 800ecf0:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800ecf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecf8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	ea80 0602 	eor.w	r6, r0, r2
 800ed04:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 800ed08:	404b      	eors	r3, r1
 800ed0a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800ed0e:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800ed12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed16:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 800ed1a:	4051      	eors	r1, r2
 800ed1c:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 800ed20:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 800ed24:	404b      	eors	r3, r1
 800ed26:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 800ed2a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 800ed36:	4051      	eors	r1, r2
 800ed38:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 800ed3c:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 800ed40:	404b      	eors	r3, r1
 800ed42:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800ed46:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800ed4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4e:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 800ed52:	4051      	eors	r1, r2
 800ed54:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 800ed58:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 800ed5c:	404b      	eors	r3, r1
 800ed5e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800ed62:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ed6e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 800ed72:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800ed76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed7a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	ea80 0602 	eor.w	r6, r0, r2
 800ed86:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 800ed8a:	404b      	eors	r3, r1
 800ed8c:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 800ed90:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800ed94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed98:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 800ed9c:	4051      	eors	r1, r2
 800ed9e:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 800eda2:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 800eda6:	404b      	eors	r3, r1
 800eda8:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 800edac:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 800edb8:	4051      	eors	r1, r2
 800edba:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 800edbe:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 800edc2:	404b      	eors	r3, r1
 800edc4:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800edc8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800edcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd0:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 800edd4:	4051      	eors	r1, r2
 800edd6:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 800edda:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 800edde:	404b      	eors	r3, r1
 800ede0:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800ede4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edec:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800edf0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 800edf4:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800edf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edfc:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800ee00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee04:	ea80 0602 	eor.w	r6, r0, r2
 800ee08:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 800ee0c:	404b      	eors	r3, r1
 800ee0e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 800ee12:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1a:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 800ee1e:	4051      	eors	r1, r2
 800ee20:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 800ee24:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 800ee28:	404b      	eors	r3, r1
 800ee2a:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 800ee2e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee36:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 800ee3a:	4051      	eors	r1, r2
 800ee3c:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 800ee40:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 800ee44:	404b      	eors	r3, r1
 800ee46:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 800ee4a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee52:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800ee56:	4051      	eors	r1, r2
 800ee58:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 800ee5c:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 800ee60:	404b      	eors	r3, r1
 800ee62:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800ee66:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800ee72:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 800ee76:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800ee7a:	0fda      	lsrs	r2, r3, #31
 800ee7c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	4313      	orrs	r3, r2
 800ee84:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800ee88:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800ee8c:	0fda      	lsrs	r2, r3, #31
 800ee8e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800ee92:	005b      	lsls	r3, r3, #1
 800ee94:	4313      	orrs	r3, r2
 800ee96:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 800ee9a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ee9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea2:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 800eea6:	4051      	eors	r1, r2
 800eea8:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 800eeac:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 800eeb0:	404b      	eors	r3, r1
 800eeb2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800eeb6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebe:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800eec2:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800eec6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800eeca:	0fda      	lsrs	r2, r3, #31
 800eecc:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	4313      	orrs	r3, r2
 800eed4:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 800eed8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800eedc:	0fda      	lsrs	r2, r3, #31
 800eede:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	4313      	orrs	r3, r2
 800eee6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800eeea:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef2:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 800eef6:	4051      	eors	r1, r2
 800eef8:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 800eefc:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 800ef00:	404b      	eors	r3, r1
 800ef02:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800ef06:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800ef12:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800ef16:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800ef1a:	0fda      	lsrs	r2, r3, #31
 800ef1c:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800ef20:	005b      	lsls	r3, r3, #1
 800ef22:	4313      	orrs	r3, r2
 800ef24:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 800ef28:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800ef2c:	0fda      	lsrs	r2, r3, #31
 800ef2e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	4313      	orrs	r3, r2
 800ef36:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800ef3a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ef3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef42:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800ef46:	4051      	eors	r1, r2
 800ef48:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 800ef4c:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 800ef50:	404b      	eors	r3, r1
 800ef52:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800ef56:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800ef62:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800ef66:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800ef6a:	0fda      	lsrs	r2, r3, #31
 800ef6c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800ef70:	005b      	lsls	r3, r3, #1
 800ef72:	4313      	orrs	r3, r2
 800ef74:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 800ef78:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800ef7c:	0fda      	lsrs	r2, r3, #31
 800ef7e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800ef82:	005b      	lsls	r3, r3, #1
 800ef84:	4313      	orrs	r3, r2
 800ef86:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800ef8a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 800ef96:	4051      	eors	r1, r2
 800ef98:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 800ef9c:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 800efa0:	404b      	eors	r3, r1
 800efa2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800efa6:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efae:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800efb2:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800efb6:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800efba:	0fda      	lsrs	r2, r3, #31
 800efbc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	4313      	orrs	r3, r2
 800efc4:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 800efc8:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800efcc:	0fda      	lsrs	r2, r3, #31
 800efce:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800efd2:	005b      	lsls	r3, r3, #1
 800efd4:	4313      	orrs	r3, r2
 800efd6:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800efda:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800efde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe2:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 800efe6:	4051      	eors	r1, r2
 800efe8:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800efec:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 800eff0:	404b      	eors	r3, r1
 800eff2:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800eff6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800effa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effe:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800f002:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 800f006:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f00a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f00e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f016:	ea80 0602 	eor.w	r6, r0, r2
 800f01a:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 800f01e:	404b      	eors	r3, r1
 800f020:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800f024:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800f030:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 800f034:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f040:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 800f044:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800f048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f04c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	ea80 0602 	eor.w	r6, r0, r2
 800f058:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 800f05c:	404b      	eors	r3, r1
 800f05e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800f062:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800f06e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 800f072:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f076:	031a      	lsls	r2, r3, #12
 800f078:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f07c:	0d1b      	lsrs	r3, r3, #20
 800f07e:	4313      	orrs	r3, r2
 800f080:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800f084:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f088:	031a      	lsls	r2, r3, #12
 800f08a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f08e:	0d1b      	lsrs	r3, r3, #20
 800f090:	4313      	orrs	r3, r2
 800f092:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800f096:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f0a2:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 800f0a6:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800f0aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0ae:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b6:	ea80 0602 	eor.w	r6, r0, r2
 800f0ba:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 800f0be:	404b      	eors	r3, r1
 800f0c0:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800f0c4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0cc:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800f0d0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 800f0d4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f0d8:	02da      	lsls	r2, r3, #11
 800f0da:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f0de:	0d5b      	lsrs	r3, r3, #21
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800f0e6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f0ea:	02da      	lsls	r2, r3, #11
 800f0ec:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f0f0:	0d5b      	lsrs	r3, r3, #21
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800f0f8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f104:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 800f108:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800f10c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f110:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	ea80 0602 	eor.w	r6, r0, r2
 800f11c:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 800f120:	404b      	eors	r3, r1
 800f122:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800f126:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800f132:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 800f136:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f13a:	0ada      	lsrs	r2, r3, #11
 800f13c:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f140:	055b      	lsls	r3, r3, #21
 800f142:	4313      	orrs	r3, r2
 800f144:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800f148:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f14c:	0ada      	lsrs	r2, r3, #11
 800f14e:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f152:	055b      	lsls	r3, r3, #21
 800f154:	4313      	orrs	r3, r2
 800f156:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800f15a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f166:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800f16a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800f16e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f172:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17a:	ea80 0602 	eor.w	r6, r0, r2
 800f17e:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 800f182:	404b      	eors	r3, r1
 800f184:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800f188:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800f18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f190:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800f194:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 800f198:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f19c:	0c9a      	lsrs	r2, r3, #18
 800f19e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f1a2:	039b      	lsls	r3, r3, #14
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800f1aa:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f1ae:	0c9a      	lsrs	r2, r3, #18
 800f1b0:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f1b4:	039b      	lsls	r3, r3, #14
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f1bc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800f1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f1c8:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800f1cc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	43d1      	mvns	r1, r2
 800f1d6:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 800f1da:	43db      	mvns	r3, r3
 800f1dc:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800f1e0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 800f1ec:	4011      	ands	r1, r2
 800f1ee:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 800f1f2:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 800f1f6:	400b      	ands	r3, r1
 800f1f8:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800f1fc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f204:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 800f208:	4051      	eors	r1, r2
 800f20a:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 800f20e:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 800f212:	404b      	eors	r3, r1
 800f214:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800f218:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f224:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800f228:	4afd      	ldr	r2, [pc, #1012]	; (800f620 <KeccakF1600_StatePermute+0xc78>)
 800f22a:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	4413      	add	r3, r2
 800f232:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f236:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	ea82 0600 	eor.w	r6, r2, r0
 800f242:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 800f246:	404b      	eors	r3, r1
 800f248:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800f24c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f258:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 800f25c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f264:	43d1      	mvns	r1, r2
 800f266:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800f26a:	43db      	mvns	r3, r3
 800f26c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800f270:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f278:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 800f27c:	4011      	ands	r1, r2
 800f27e:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 800f282:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 800f286:	400b      	ands	r3, r1
 800f288:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 800f28c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f294:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 800f298:	4051      	eors	r1, r2
 800f29a:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800f29e:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 800f2a2:	404b      	eors	r3, r1
 800f2a4:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800f2a8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b0:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800f2b4:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 800f2b8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	43d1      	mvns	r1, r2
 800f2c2:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 800f2c6:	43db      	mvns	r3, r3
 800f2c8:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800f2cc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 800f2d8:	4011      	ands	r1, r2
 800f2da:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 800f2de:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 800f2e2:	400b      	ands	r3, r1
 800f2e4:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 800f2e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 800f2f4:	4051      	eors	r1, r2
 800f2f6:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800f2fa:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 800f2fe:	404b      	eors	r3, r1
 800f300:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800f304:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800f308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30c:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800f310:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 800f314:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31c:	43d1      	mvns	r1, r2
 800f31e:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 800f322:	43db      	mvns	r3, r3
 800f324:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800f328:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f330:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 800f334:	4011      	ands	r1, r2
 800f336:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 800f33a:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800f33e:	400b      	ands	r3, r1
 800f340:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800f344:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34c:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 800f350:	4051      	eors	r1, r2
 800f352:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 800f356:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800f35a:	404b      	eors	r3, r1
 800f35c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800f360:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f368:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800f36c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 800f370:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	43d1      	mvns	r1, r2
 800f37a:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800f37e:	43db      	mvns	r3, r3
 800f380:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 800f384:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38c:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800f390:	4011      	ands	r1, r2
 800f392:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 800f396:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 800f39a:	400b      	ands	r3, r1
 800f39c:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800f3a0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a8:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 800f3ac:	4051      	eors	r1, r2
 800f3ae:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 800f3b2:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 800f3b6:	404b      	eors	r3, r1
 800f3b8:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800f3bc:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800f3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c4:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800f3c8:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800f3cc:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800f3d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3d4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3dc:	ea80 0602 	eor.w	r6, r0, r2
 800f3e0:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 800f3e4:	404b      	eors	r3, r1
 800f3e6:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800f3ea:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f2:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800f3f6:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800f3fa:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f3fe:	091a      	lsrs	r2, r3, #4
 800f400:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f404:	071b      	lsls	r3, r3, #28
 800f406:	4313      	orrs	r3, r2
 800f408:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800f40c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f410:	091a      	lsrs	r2, r3, #4
 800f412:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f416:	071b      	lsls	r3, r3, #28
 800f418:	4313      	orrs	r3, r2
 800f41a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800f41e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f426:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f42a:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 800f42e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800f432:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f436:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43e:	ea80 0602 	eor.w	r6, r0, r2
 800f442:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800f446:	404b      	eors	r3, r1
 800f448:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800f44c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800f458:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 800f45c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f460:	0b1a      	lsrs	r2, r3, #12
 800f462:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f466:	051b      	lsls	r3, r3, #20
 800f468:	4313      	orrs	r3, r2
 800f46a:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800f46e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f472:	0b1a      	lsrs	r2, r3, #12
 800f474:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f478:	051b      	lsls	r3, r3, #20
 800f47a:	4313      	orrs	r3, r2
 800f47c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800f480:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f48c:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 800f490:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800f494:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f498:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a0:	ea80 0602 	eor.w	r6, r0, r2
 800f4a4:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 800f4a8:	404b      	eors	r3, r1
 800f4aa:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800f4ae:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800f4ba:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800f4be:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f4c2:	0f5a      	lsrs	r2, r3, #29
 800f4c4:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800f4d0:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f4d4:	0f5a      	lsrs	r2, r3, #29
 800f4d6:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800f4e2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ea:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f4ee:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 800f4f2:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800f4f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4fa:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f502:	ea80 0602 	eor.w	r6, r0, r2
 800f506:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 800f50a:	404b      	eors	r3, r1
 800f50c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800f510:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f518:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800f51c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 800f520:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f524:	035a      	lsls	r2, r3, #13
 800f526:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f52a:	0cdb      	lsrs	r3, r3, #19
 800f52c:	4313      	orrs	r3, r2
 800f52e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800f532:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f536:	035a      	lsls	r2, r3, #13
 800f538:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f53c:	0cdb      	lsrs	r3, r3, #19
 800f53e:	4313      	orrs	r3, r2
 800f540:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800f544:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f550:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 800f554:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800f558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f55c:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	ea80 0602 	eor.w	r6, r0, r2
 800f568:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 800f56c:	404b      	eors	r3, r1
 800f56e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800f572:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800f576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57a:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800f57e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 800f582:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800f586:	075a      	lsls	r2, r3, #29
 800f588:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800f58c:	08db      	lsrs	r3, r3, #3
 800f58e:	4313      	orrs	r3, r2
 800f590:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800f594:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800f598:	075a      	lsls	r2, r3, #29
 800f59a:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800f59e:	08db      	lsrs	r3, r3, #3
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800f5a6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f5b2:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800f5b6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5be:	43d1      	mvns	r1, r2
 800f5c0:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800f5c4:	43db      	mvns	r3, r3
 800f5c6:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 800f5ca:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 800f5d6:	4011      	ands	r1, r2
 800f5d8:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 800f5dc:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800f5e0:	400b      	ands	r3, r1
 800f5e2:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 800f5e6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 800f5f2:	4051      	eors	r1, r2
 800f5f4:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800f5f8:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 800f5fc:	404b      	eors	r3, r1
 800f5fe:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800f602:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800f60e:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 800f612:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61a:	43d1      	mvns	r1, r2
 800f61c:	e002      	b.n	800f624 <KeccakF1600_StatePermute+0xc7c>
 800f61e:	bf00      	nop
 800f620:	080164c0 	.word	0x080164c0
 800f624:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 800f628:	43db      	mvns	r3, r3
 800f62a:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 800f62e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f636:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 800f63a:	4011      	ands	r1, r2
 800f63c:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 800f640:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 800f644:	400b      	ands	r3, r1
 800f646:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800f64a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f652:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800f656:	4051      	eors	r1, r2
 800f658:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 800f65c:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 800f660:	404b      	eors	r3, r1
 800f662:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800f666:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800f672:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800f676:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67e:	43d1      	mvns	r1, r2
 800f680:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 800f684:	43db      	mvns	r3, r3
 800f686:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 800f68a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 800f696:	4011      	ands	r1, r2
 800f698:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 800f69c:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800f6a0:	400b      	ands	r3, r1
 800f6a2:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 800f6a6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ae:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 800f6b2:	4051      	eors	r1, r2
 800f6b4:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 800f6b8:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 800f6bc:	404b      	eors	r3, r1
 800f6be:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800f6c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800f6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ca:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800f6ce:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800f6d2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6da:	43d1      	mvns	r1, r2
 800f6dc:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800f6e0:	43db      	mvns	r3, r3
 800f6e2:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800f6e6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 800f6f2:	4011      	ands	r1, r2
 800f6f4:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 800f6f8:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 800f6fc:	400b      	ands	r3, r1
 800f6fe:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800f702:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70a:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 800f70e:	4051      	eors	r1, r2
 800f710:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800f714:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 800f718:	404b      	eors	r3, r1
 800f71a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800f71e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f726:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800f72a:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 800f72e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f736:	43d1      	mvns	r1, r2
 800f738:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 800f73c:	43db      	mvns	r3, r3
 800f73e:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800f742:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 800f74e:	4011      	ands	r1, r2
 800f750:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 800f754:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 800f758:	400b      	ands	r3, r1
 800f75a:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 800f75e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f766:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 800f76a:	4051      	eors	r1, r2
 800f76c:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 800f770:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 800f774:	404b      	eors	r3, r1
 800f776:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800f77a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f782:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800f786:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 800f78a:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800f78e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f792:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79a:	ea80 0602 	eor.w	r6, r0, r2
 800f79e:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 800f7a2:	404b      	eors	r3, r1
 800f7a4:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800f7a8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800f7b4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 800f7b8:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800f7bc:	0fda      	lsrs	r2, r3, #31
 800f7be:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800f7c2:	005b      	lsls	r3, r3, #1
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800f7ca:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800f7ce:	0fda      	lsrs	r2, r3, #31
 800f7d0:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800f7d4:	005b      	lsls	r3, r3, #1
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800f7dc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e4:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f7e8:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 800f7ec:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800f7f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7f4:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	ea80 0602 	eor.w	r6, r0, r2
 800f800:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 800f804:	404b      	eors	r3, r1
 800f806:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800f80a:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800f80e:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800f812:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 800f816:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800f81a:	0e9a      	lsrs	r2, r3, #26
 800f81c:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800f820:	019b      	lsls	r3, r3, #6
 800f822:	4313      	orrs	r3, r2
 800f824:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800f828:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800f82c:	0e9a      	lsrs	r2, r3, #26
 800f82e:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800f832:	019b      	lsls	r3, r3, #6
 800f834:	4313      	orrs	r3, r2
 800f836:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800f83a:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800f83e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f842:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 800f846:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800f84a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f84e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f856:	ea80 0602 	eor.w	r6, r0, r2
 800f85a:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 800f85e:	404b      	eors	r3, r1
 800f860:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800f864:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800f868:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800f86c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 800f870:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800f874:	09da      	lsrs	r2, r3, #7
 800f876:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800f87a:	065b      	lsls	r3, r3, #25
 800f87c:	4313      	orrs	r3, r2
 800f87e:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800f882:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800f886:	09da      	lsrs	r2, r3, #7
 800f888:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800f88c:	065b      	lsls	r3, r3, #25
 800f88e:	4313      	orrs	r3, r2
 800f890:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800f894:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800f898:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f89c:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800f8a0:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800f8a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8a8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b0:	ea80 0602 	eor.w	r6, r0, r2
 800f8b4:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 800f8b8:	404b      	eors	r3, r1
 800f8ba:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800f8be:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800f8c2:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800f8c6:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 800f8ca:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800f8ce:	0e1a      	lsrs	r2, r3, #24
 800f8d0:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800f8d4:	021b      	lsls	r3, r3, #8
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800f8dc:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800f8e0:	0e1a      	lsrs	r2, r3, #24
 800f8e2:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800f8e6:	021b      	lsls	r3, r3, #8
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800f8ee:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800f8f2:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f8f6:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 800f8fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800f8fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f902:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90a:	ea80 0602 	eor.w	r6, r0, r2
 800f90e:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 800f912:	404b      	eors	r3, r1
 800f914:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800f918:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800f91c:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800f920:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 800f924:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800f928:	0b9a      	lsrs	r2, r3, #14
 800f92a:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800f92e:	049b      	lsls	r3, r3, #18
 800f930:	4313      	orrs	r3, r2
 800f932:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800f936:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800f93a:	0b9a      	lsrs	r2, r3, #14
 800f93c:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800f940:	049b      	lsls	r3, r3, #18
 800f942:	4313      	orrs	r3, r2
 800f944:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800f948:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800f94c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f950:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 800f954:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95c:	43d1      	mvns	r1, r2
 800f95e:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 800f962:	43db      	mvns	r3, r3
 800f964:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800f968:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f970:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 800f974:	4011      	ands	r1, r2
 800f976:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 800f97a:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 800f97e:	400b      	ands	r3, r1
 800f980:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800f984:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98c:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 800f990:	4051      	eors	r1, r2
 800f992:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 800f996:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 800f99a:	404b      	eors	r3, r1
 800f99c:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800f9a0:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800f9a4:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800f9a8:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800f9ac:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b4:	43d1      	mvns	r1, r2
 800f9b6:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 800f9ba:	43db      	mvns	r3, r3
 800f9bc:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800f9c0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c8:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 800f9cc:	4011      	ands	r1, r2
 800f9ce:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 800f9d2:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 800f9d6:	400b      	ands	r3, r1
 800f9d8:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 800f9dc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e4:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 800f9e8:	4051      	eors	r1, r2
 800f9ea:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800f9ee:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 800f9f2:	404b      	eors	r3, r1
 800f9f4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800f9f8:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800f9fc:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800fa00:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 800fa04:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0c:	43d1      	mvns	r1, r2
 800fa0e:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800fa12:	43db      	mvns	r3, r3
 800fa14:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800fa18:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa20:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 800fa24:	4011      	ands	r1, r2
 800fa26:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 800fa2a:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 800fa2e:	400b      	ands	r3, r1
 800fa30:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800fa34:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3c:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 800fa40:	4051      	eors	r1, r2
 800fa42:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 800fa46:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 800fa4a:	404b      	eors	r3, r1
 800fa4c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800fa50:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800fa54:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800fa58:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 800fa5c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa64:	43d1      	mvns	r1, r2
 800fa66:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 800fa6a:	43db      	mvns	r3, r3
 800fa6c:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800fa70:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa78:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 800fa7c:	4011      	ands	r1, r2
 800fa7e:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 800fa82:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 800fa86:	400b      	ands	r3, r1
 800fa88:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800fa8c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa94:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 800fa98:	4051      	eors	r1, r2
 800fa9a:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800fa9e:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800faa2:	404b      	eors	r3, r1
 800faa4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800faa8:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 800faac:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800fab0:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 800fab4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	43d1      	mvns	r1, r2
 800fabe:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 800fac2:	43db      	mvns	r3, r3
 800fac4:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800fac8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800facc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad0:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 800fad4:	4011      	ands	r1, r2
 800fad6:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 800fada:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 800fade:	400b      	ands	r3, r1
 800fae0:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800fae4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800faf0:	4051      	eors	r1, r2
 800faf2:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800faf6:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 800fafa:	404b      	eors	r3, r1
 800fafc:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800fb00:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 800fb04:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800fb08:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 800fb0c:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800fb10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb14:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	ea80 0602 	eor.w	r6, r0, r2
 800fb20:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 800fb24:	404b      	eors	r3, r1
 800fb26:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800fb2a:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 800fb2e:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800fb32:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 800fb36:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800fb3a:	095a      	lsrs	r2, r3, #5
 800fb3c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800fb40:	06db      	lsls	r3, r3, #27
 800fb42:	4313      	orrs	r3, r2
 800fb44:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800fb48:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800fb4c:	095a      	lsrs	r2, r3, #5
 800fb4e:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800fb52:	06db      	lsls	r3, r3, #27
 800fb54:	4313      	orrs	r3, r2
 800fb56:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800fb5a:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 800fb5e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800fb62:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 800fb66:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800fb6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb6e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb76:	ea80 0602 	eor.w	r6, r0, r2
 800fb7a:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 800fb7e:	404b      	eors	r3, r1
 800fb80:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800fb84:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 800fb88:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800fb8c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 800fb90:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800fb94:	011a      	lsls	r2, r3, #4
 800fb96:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800fb9a:	0f1b      	lsrs	r3, r3, #28
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800fba2:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800fba6:	011a      	lsls	r2, r3, #4
 800fba8:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800fbac:	0f1b      	lsrs	r3, r3, #28
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800fbb4:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800fbb8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800fbbc:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 800fbc0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800fbc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbc8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800fbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd0:	ea80 0602 	eor.w	r6, r0, r2
 800fbd4:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 800fbd8:	404b      	eors	r3, r1
 800fbda:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800fbde:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800fbe2:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800fbe6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 800fbea:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800fbee:	0d9a      	lsrs	r2, r3, #22
 800fbf0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800fbf4:	029b      	lsls	r3, r3, #10
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800fbfc:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800fc00:	0d9a      	lsrs	r2, r3, #22
 800fc02:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800fc06:	029b      	lsls	r3, r3, #10
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800fc0e:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 800fc12:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800fc16:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 800fc1a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800fc1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc22:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	ea80 0602 	eor.w	r6, r0, r2
 800fc2e:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 800fc32:	404b      	eors	r3, r1
 800fc34:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800fc38:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 800fc3c:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800fc40:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 800fc44:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800fc48:	0c5a      	lsrs	r2, r3, #17
 800fc4a:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800fc4e:	03db      	lsls	r3, r3, #15
 800fc50:	4313      	orrs	r3, r2
 800fc52:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800fc56:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800fc5a:	0c5a      	lsrs	r2, r3, #17
 800fc5c:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800fc60:	03db      	lsls	r3, r3, #15
 800fc62:	4313      	orrs	r3, r2
 800fc64:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800fc68:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 800fc6c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800fc70:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 800fc74:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800fc78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc7c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800fc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc84:	ea80 0602 	eor.w	r6, r0, r2
 800fc88:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 800fc8c:	404b      	eors	r3, r1
 800fc8e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800fc92:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 800fc96:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800fc9a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 800fc9e:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800fca2:	061a      	lsls	r2, r3, #24
 800fca4:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800fca8:	0a1b      	lsrs	r3, r3, #8
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800fcb0:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800fcb4:	061a      	lsls	r2, r3, #24
 800fcb6:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800fcba:	0a1b      	lsrs	r3, r3, #8
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800fcc2:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800fcc6:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800fcca:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 800fcce:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	43d1      	mvns	r1, r2
 800fcd8:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 800fcdc:	43db      	mvns	r3, r3
 800fcde:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800fce2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 800fcee:	4011      	ands	r1, r2
 800fcf0:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 800fcf4:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 800fcf8:	400b      	ands	r3, r1
 800fcfa:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800fcfe:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd06:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 800fd0a:	4051      	eors	r1, r2
 800fd0c:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 800fd10:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 800fd14:	404b      	eors	r3, r1
 800fd16:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800fd1a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800fd1e:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800fd22:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 800fd26:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	43d1      	mvns	r1, r2
 800fd30:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 800fd34:	43db      	mvns	r3, r3
 800fd36:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 800fd3a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd42:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 800fd46:	4011      	ands	r1, r2
 800fd48:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 800fd4c:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 800fd50:	400b      	ands	r3, r1
 800fd52:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 800fd56:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5e:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 800fd62:	4051      	eors	r1, r2
 800fd64:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 800fd68:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 800fd6c:	404b      	eors	r3, r1
 800fd6e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800fd72:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 800fd76:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800fd7a:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 800fd7e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd86:	43d1      	mvns	r1, r2
 800fd88:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 800fd8c:	43db      	mvns	r3, r3
 800fd8e:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 800fd92:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9a:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 800fd9e:	4011      	ands	r1, r2
 800fda0:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 800fda4:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 800fda8:	400b      	ands	r3, r1
 800fdaa:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 800fdae:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 800fdba:	4051      	eors	r1, r2
 800fdbc:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 800fdc0:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 800fdc4:	404b      	eors	r3, r1
 800fdc6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800fdca:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800fdce:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800fdd2:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 800fdd6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	43d1      	mvns	r1, r2
 800fde0:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 800fde4:	43db      	mvns	r3, r3
 800fde6:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 800fdea:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf2:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 800fdf6:	4011      	ands	r1, r2
 800fdf8:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 800fdfc:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 800fe00:	400b      	ands	r3, r1
 800fe02:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 800fe06:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 800fe12:	4051      	eors	r1, r2
 800fe14:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800fe18:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 800fe1c:	404b      	eors	r3, r1
 800fe1e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800fe22:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800fe26:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800fe2a:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 800fe2e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	43d1      	mvns	r1, r2
 800fe38:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 800fe3c:	43db      	mvns	r3, r3
 800fe3e:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 800fe42:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4a:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 800fe4e:	4011      	ands	r1, r2
 800fe50:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 800fe54:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 800fe58:	400b      	ands	r3, r1
 800fe5a:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 800fe5e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe66:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 800fe6a:	4051      	eors	r1, r2
 800fe6c:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800fe70:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800fe74:	404b      	eors	r3, r1
 800fe76:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800fe7a:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800fe7e:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800fe82:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 800fe86:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800fe8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe8e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe96:	ea80 0602 	eor.w	r6, r0, r2
 800fe9a:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 800fe9e:	404b      	eors	r3, r1
 800fea0:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800fea4:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 800fea8:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800feac:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 800feb0:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800feb4:	079a      	lsls	r2, r3, #30
 800feb6:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800feba:	089b      	lsrs	r3, r3, #2
 800febc:	4313      	orrs	r3, r2
 800febe:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800fec2:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800fec6:	079a      	lsls	r2, r3, #30
 800fec8:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800fecc:	089b      	lsrs	r3, r3, #2
 800fece:	4313      	orrs	r3, r2
 800fed0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800fed4:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800fed8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800fedc:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 800fee0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800fee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fee8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800feec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef0:	ea80 0602 	eor.w	r6, r0, r2
 800fef4:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 800fef8:	404b      	eors	r3, r1
 800fefa:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800fefe:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800ff02:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800ff06:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 800ff0a:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800ff0e:	05da      	lsls	r2, r3, #23
 800ff10:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800ff14:	0a5b      	lsrs	r3, r3, #9
 800ff16:	4313      	orrs	r3, r2
 800ff18:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800ff1c:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800ff20:	05da      	lsls	r2, r3, #23
 800ff22:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800ff26:	0a5b      	lsrs	r3, r3, #9
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800ff2e:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800ff32:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ff36:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 800ff3a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800ff3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff42:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4a:	ea80 0602 	eor.w	r6, r0, r2
 800ff4e:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 800ff52:	404b      	eors	r3, r1
 800ff54:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800ff58:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800ff5c:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800ff60:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 800ff64:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800ff68:	01da      	lsls	r2, r3, #7
 800ff6a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800ff6e:	0e5b      	lsrs	r3, r3, #25
 800ff70:	4313      	orrs	r3, r2
 800ff72:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800ff76:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800ff7a:	01da      	lsls	r2, r3, #7
 800ff7c:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800ff80:	0e5b      	lsrs	r3, r3, #25
 800ff82:	4313      	orrs	r3, r2
 800ff84:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800ff88:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800ff8c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ff90:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 800ff94:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800ff98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff9c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	ea80 0602 	eor.w	r6, r0, r2
 800ffa8:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 800ffac:	404b      	eors	r3, r1
 800ffae:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800ffb2:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800ffb6:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800ffba:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 800ffbe:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800ffc2:	025a      	lsls	r2, r3, #9
 800ffc4:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800ffc8:	0ddb      	lsrs	r3, r3, #23
 800ffca:	4313      	orrs	r3, r2
 800ffcc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800ffd0:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800ffd4:	025a      	lsls	r2, r3, #9
 800ffd6:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800ffda:	0ddb      	lsrs	r3, r3, #23
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800ffe2:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800ffe6:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800ffea:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 800ffee:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800fff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fff6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	ea80 0602 	eor.w	r6, r0, r2
 8010002:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 8010006:	404b      	eors	r3, r1
 8010008:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 801000c:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8010010:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8010014:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 8010018:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801001c:	0f9a      	lsrs	r2, r3, #30
 801001e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	4313      	orrs	r3, r2
 8010026:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 801002a:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801002e:	0f9a      	lsrs	r2, r3, #30
 8010030:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	4313      	orrs	r3, r2
 8010038:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 801003c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8010040:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010044:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8010048:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801004c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010050:	43d1      	mvns	r1, r2
 8010052:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 8010056:	43db      	mvns	r3, r3
 8010058:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 801005c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010064:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 8010068:	4011      	ands	r1, r2
 801006a:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 801006e:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 8010072:	400b      	ands	r3, r1
 8010074:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8010078:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010080:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 8010084:	4051      	eors	r1, r2
 8010086:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 801008a:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 801008e:	404b      	eors	r3, r1
 8010090:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8010094:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8010098:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 801009c:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 80100a0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a8:	43d1      	mvns	r1, r2
 80100aa:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 80100ae:	43db      	mvns	r3, r3
 80100b0:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 80100b4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80100b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100bc:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 80100c0:	4011      	ands	r1, r2
 80100c2:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 80100c6:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 80100ca:	400b      	ands	r3, r1
 80100cc:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 80100d0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80100d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d8:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 80100dc:	4051      	eors	r1, r2
 80100de:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80100e2:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 80100e6:	404b      	eors	r3, r1
 80100e8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80100ec:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80100f0:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 80100f4:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 80100f8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80100fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010100:	43d1      	mvns	r1, r2
 8010102:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 8010106:	43db      	mvns	r3, r3
 8010108:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 801010c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010114:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 8010118:	4011      	ands	r1, r2
 801011a:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 801011e:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 8010122:	400b      	ands	r3, r1
 8010124:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 8010128:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801012c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010130:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 8010134:	4051      	eors	r1, r2
 8010136:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 801013a:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 801013e:	404b      	eors	r3, r1
 8010140:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8010144:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8010148:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 801014c:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8010150:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010158:	43d1      	mvns	r1, r2
 801015a:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 801015e:	43db      	mvns	r3, r3
 8010160:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8010164:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016c:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 8010170:	4011      	ands	r1, r2
 8010172:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 8010176:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 801017a:	400b      	ands	r3, r1
 801017c:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8010180:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 801018c:	4051      	eors	r1, r2
 801018e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8010192:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 8010196:	404b      	eors	r3, r1
 8010198:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 801019c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80101a0:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80101a4:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 80101a8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80101ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b0:	43d1      	mvns	r1, r2
 80101b2:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 80101b6:	43db      	mvns	r3, r3
 80101b8:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 80101bc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80101c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c4:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 80101c8:	4011      	ands	r1, r2
 80101ca:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 80101ce:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 80101d2:	400b      	ands	r3, r1
 80101d4:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80101d8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80101dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e0:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 80101e4:	4051      	eors	r1, r2
 80101e6:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 80101ea:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 80101ee:	404b      	eors	r3, r1
 80101f0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80101f4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80101f8:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80101fc:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8010200:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8010204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010208:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 801020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010210:	ea80 0602 	eor.w	r6, r0, r2
 8010214:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 8010218:	404b      	eors	r3, r1
 801021a:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 801021e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 801022a:	4051      	eors	r1, r2
 801022c:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 8010230:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 8010234:	404b      	eors	r3, r1
 8010236:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 801023a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 801023e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010242:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 8010246:	4051      	eors	r1, r2
 8010248:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 801024c:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 8010250:	404b      	eors	r3, r1
 8010252:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8010256:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8010262:	4051      	eors	r1, r2
 8010264:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8010268:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 801026c:	404b      	eors	r3, r1
 801026e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8010272:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8010276:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801027a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 801027e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8010282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010286:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	ea80 0602 	eor.w	r6, r0, r2
 8010292:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 8010296:	404b      	eors	r3, r1
 8010298:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 801029c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 80102a8:	4051      	eors	r1, r2
 80102aa:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 80102ae:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80102b2:	404b      	eors	r3, r1
 80102b4:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 80102b8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80102bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c0:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 80102c4:	4051      	eors	r1, r2
 80102c6:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 80102ca:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80102ce:	404b      	eors	r3, r1
 80102d0:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 80102d4:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80102d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102dc:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 80102e0:	4051      	eors	r1, r2
 80102e2:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 80102e6:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 80102ea:	404b      	eors	r3, r1
 80102ec:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80102f0:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 80102f4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80102f8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80102fc:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8010300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010304:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8010308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030c:	ea80 0602 	eor.w	r6, r0, r2
 8010310:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 8010314:	404b      	eors	r3, r1
 8010316:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 801031a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 801031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010322:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 8010326:	4051      	eors	r1, r2
 8010328:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 801032c:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 8010330:	404b      	eors	r3, r1
 8010332:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8010336:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 8010342:	4051      	eors	r1, r2
 8010344:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 8010348:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 801034c:	404b      	eors	r3, r1
 801034e:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8010352:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035a:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 801035e:	4051      	eors	r1, r2
 8010360:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8010364:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 8010368:	404b      	eors	r3, r1
 801036a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801036e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8010372:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010376:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 801037a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 801037e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010382:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8010386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038a:	ea80 0602 	eor.w	r6, r0, r2
 801038e:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 8010392:	404b      	eors	r3, r1
 8010394:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 8010398:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 80103a4:	4051      	eors	r1, r2
 80103a6:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 80103aa:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 80103ae:	404b      	eors	r3, r1
 80103b0:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80103b4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80103b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103bc:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 80103c0:	4051      	eors	r1, r2
 80103c2:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 80103c6:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 80103ca:	404b      	eors	r3, r1
 80103cc:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80103d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d8:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 80103dc:	4051      	eors	r1, r2
 80103de:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 80103e2:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 80103e6:	404b      	eors	r3, r1
 80103e8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80103ec:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 80103f0:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80103f4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80103f8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80103fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010400:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	ea80 0602 	eor.w	r6, r0, r2
 801040c:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 8010410:	404b      	eors	r3, r1
 8010412:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8010416:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 801041a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041e:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 8010422:	4051      	eors	r1, r2
 8010424:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 8010428:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 801042c:	404b      	eors	r3, r1
 801042e:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8010432:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8010436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043a:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 801043e:	4051      	eors	r1, r2
 8010440:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 8010444:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 8010448:	404b      	eors	r3, r1
 801044a:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 801044e:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010456:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 801045a:	4051      	eors	r1, r2
 801045c:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8010460:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 8010464:	404b      	eors	r3, r1
 8010466:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801046a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 801046e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010472:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8010476:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801047a:	0fda      	lsrs	r2, r3, #31
 801047c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8010480:	005b      	lsls	r3, r3, #1
 8010482:	4313      	orrs	r3, r2
 8010484:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 8010488:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801048c:	0fda      	lsrs	r2, r3, #31
 801048e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4313      	orrs	r3, r2
 8010496:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 801049a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 80104a6:	4051      	eors	r1, r2
 80104a8:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80104ac:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 80104b0:	404b      	eors	r3, r1
 80104b2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80104b6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80104ba:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 80104be:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 80104c2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80104c6:	0fda      	lsrs	r2, r3, #31
 80104c8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80104cc:	005b      	lsls	r3, r3, #1
 80104ce:	4313      	orrs	r3, r2
 80104d0:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 80104d4:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80104d8:	0fda      	lsrs	r2, r3, #31
 80104da:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80104de:	005b      	lsls	r3, r3, #1
 80104e0:	4313      	orrs	r3, r2
 80104e2:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 80104e6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ee:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 80104f2:	4051      	eors	r1, r2
 80104f4:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 80104f8:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 80104fc:	404b      	eors	r3, r1
 80104fe:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8010502:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8010506:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 801050a:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 801050e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8010512:	0fda      	lsrs	r2, r3, #31
 8010514:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8010518:	005b      	lsls	r3, r3, #1
 801051a:	4313      	orrs	r3, r2
 801051c:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8010520:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8010524:	0fda      	lsrs	r2, r3, #31
 8010526:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 801052a:	005b      	lsls	r3, r3, #1
 801052c:	4313      	orrs	r3, r2
 801052e:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8010532:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 801053e:	4051      	eors	r1, r2
 8010540:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8010544:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 8010548:	404b      	eors	r3, r1
 801054a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 801054e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8010552:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8010556:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 801055a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801055e:	0fda      	lsrs	r2, r3, #31
 8010560:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	4313      	orrs	r3, r2
 8010568:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 801056c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010570:	0fda      	lsrs	r2, r3, #31
 8010572:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8010576:	005b      	lsls	r3, r3, #1
 8010578:	4313      	orrs	r3, r2
 801057a:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 801057e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 801058a:	4051      	eors	r1, r2
 801058c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8010590:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 8010594:	404b      	eors	r3, r1
 8010596:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 801059a:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 801059e:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 80105a2:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 80105a6:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80105aa:	0fda      	lsrs	r2, r3, #31
 80105ac:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80105b0:	005b      	lsls	r3, r3, #1
 80105b2:	4313      	orrs	r3, r2
 80105b4:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 80105b8:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80105bc:	0fda      	lsrs	r2, r3, #31
 80105be:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80105c2:	005b      	lsls	r3, r3, #1
 80105c4:	4313      	orrs	r3, r2
 80105c6:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 80105ca:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d2:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 80105d6:	4051      	eors	r1, r2
 80105d8:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 80105dc:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 80105e0:	404b      	eors	r3, r1
 80105e2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80105e6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80105ea:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 80105ee:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 80105f2:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80105f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105fa:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80105fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010602:	ea80 0602 	eor.w	r6, r0, r2
 8010606:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 801060a:	404b      	eors	r3, r1
 801060c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8010610:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8010614:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8010618:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 801061c:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8010620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010624:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010628:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 801062c:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8010630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010634:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	ea80 0602 	eor.w	r6, r0, r2
 8010640:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 8010644:	404b      	eors	r3, r1
 8010646:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801064a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 801064e:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8010652:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 8010656:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801065a:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 801065e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010662:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8010666:	6803      	ldr	r3, [r0, #0]
 8010668:	031a      	lsls	r2, r3, #12
 801066a:	680b      	ldr	r3, [r1, #0]
 801066c:	0d1b      	lsrs	r3, r3, #20
 801066e:	4313      	orrs	r3, r2
 8010670:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8010674:	680b      	ldr	r3, [r1, #0]
 8010676:	031a      	lsls	r2, r3, #12
 8010678:	6803      	ldr	r3, [r0, #0]
 801067a:	0d1b      	lsrs	r3, r3, #20
 801067c:	4313      	orrs	r3, r2
 801067e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8010682:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8010686:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801068a:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 801068e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8010692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010696:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 801069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069e:	ea80 0602 	eor.w	r6, r0, r2
 80106a2:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 80106a6:	404b      	eors	r3, r1
 80106a8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80106ac:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80106b0:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80106b4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 80106b8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80106bc:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 80106c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80106c4:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 80106c8:	6803      	ldr	r3, [r0, #0]
 80106ca:	02da      	lsls	r2, r3, #11
 80106cc:	680b      	ldr	r3, [r1, #0]
 80106ce:	0d5b      	lsrs	r3, r3, #21
 80106d0:	4313      	orrs	r3, r2
 80106d2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80106d6:	680b      	ldr	r3, [r1, #0]
 80106d8:	02da      	lsls	r2, r3, #11
 80106da:	6803      	ldr	r3, [r0, #0]
 80106dc:	0d5b      	lsrs	r3, r3, #21
 80106de:	4313      	orrs	r3, r2
 80106e0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80106e4:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80106e8:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80106ec:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 80106f0:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80106f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80106f8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	ea80 0602 	eor.w	r6, r0, r2
 8010704:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 8010708:	404b      	eors	r3, r1
 801070a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801070e:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8010712:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8010716:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 801071a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801071e:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8010722:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010726:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 801072a:	6803      	ldr	r3, [r0, #0]
 801072c:	0ada      	lsrs	r2, r3, #11
 801072e:	680b      	ldr	r3, [r1, #0]
 8010730:	055b      	lsls	r3, r3, #21
 8010732:	4313      	orrs	r3, r2
 8010734:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8010738:	680b      	ldr	r3, [r1, #0]
 801073a:	0ada      	lsrs	r2, r3, #11
 801073c:	6803      	ldr	r3, [r0, #0]
 801073e:	055b      	lsls	r3, r3, #21
 8010740:	4313      	orrs	r3, r2
 8010742:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8010746:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 801074a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 801074e:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8010752:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010756:	e9d3 0100 	ldrd	r0, r1, [r3]
 801075a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 801075e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010762:	ea80 0602 	eor.w	r6, r0, r2
 8010766:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 801076a:	404b      	eors	r3, r1
 801076c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8010770:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8010774:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8010778:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 801077c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010780:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8010784:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010788:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 801078c:	6803      	ldr	r3, [r0, #0]
 801078e:	0c9a      	lsrs	r2, r3, #18
 8010790:	680b      	ldr	r3, [r1, #0]
 8010792:	039b      	lsls	r3, r3, #14
 8010794:	4313      	orrs	r3, r2
 8010796:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 801079a:	680b      	ldr	r3, [r1, #0]
 801079c:	0c9a      	lsrs	r2, r3, #18
 801079e:	6803      	ldr	r3, [r0, #0]
 80107a0:	039b      	lsls	r3, r3, #14
 80107a2:	4313      	orrs	r3, r2
 80107a4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80107a8:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80107ac:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80107b0:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 80107b4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80107b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107bc:	43d1      	mvns	r1, r2
 80107be:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 80107c2:	43db      	mvns	r3, r3
 80107c4:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 80107c8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80107cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d0:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 80107d4:	4011      	ands	r1, r2
 80107d6:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 80107da:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 80107de:	400b      	ands	r3, r1
 80107e0:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 80107e4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 80107f0:	4051      	eors	r1, r2
 80107f2:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80107f6:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 80107fa:	404b      	eors	r3, r1
 80107fc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8010800:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 8010804:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8010808:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 801080c:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8010810:	3301      	adds	r3, #1
 8010812:	4af4      	ldr	r2, [pc, #976]	; (8010be4 <KeccakF1600_StatePermute+0x223c>)
 8010814:	00db      	lsls	r3, r3, #3
 8010816:	4413      	add	r3, r2
 8010818:	e9d3 0100 	ldrd	r0, r1, [r3]
 801081c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	ea82 0600 	eor.w	r6, r2, r0
 8010828:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 801082c:	404b      	eors	r3, r1
 801082e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8010832:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8010836:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 801083a:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 801083e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	43d1      	mvns	r1, r2
 8010848:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 801084c:	43db      	mvns	r3, r3
 801084e:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8010852:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 801085e:	4011      	ands	r1, r2
 8010860:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 8010864:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 8010868:	400b      	ands	r3, r1
 801086a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 801086e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010876:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 801087a:	4051      	eors	r1, r2
 801087c:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8010880:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 8010884:	404b      	eors	r3, r1
 8010886:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801088a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 801088e:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8010892:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8010896:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089e:	43d1      	mvns	r1, r2
 80108a0:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 80108a4:	43db      	mvns	r3, r3
 80108a6:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 80108aa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80108ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b2:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 80108b6:	4011      	ands	r1, r2
 80108b8:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 80108bc:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 80108c0:	400b      	ands	r3, r1
 80108c2:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 80108c6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ce:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 80108d2:	4051      	eors	r1, r2
 80108d4:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 80108d8:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 80108dc:	404b      	eors	r3, r1
 80108de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80108e2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80108e6:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80108ea:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 80108ee:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80108f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f6:	43d1      	mvns	r1, r2
 80108f8:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 80108fc:	43db      	mvns	r3, r3
 80108fe:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8010902:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090a:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 801090e:	4011      	ands	r1, r2
 8010910:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 8010914:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 8010918:	400b      	ands	r3, r1
 801091a:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 801091e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010926:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 801092a:	4051      	eors	r1, r2
 801092c:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8010930:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8010934:	404b      	eors	r3, r1
 8010936:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801093a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 801093e:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8010942:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8010946:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	43d1      	mvns	r1, r2
 8010950:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8010954:	43db      	mvns	r3, r3
 8010956:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 801095a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 8010966:	4011      	ands	r1, r2
 8010968:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 801096c:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 8010970:	400b      	ands	r3, r1
 8010972:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8010976:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097e:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 8010982:	4051      	eors	r1, r2
 8010984:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8010988:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 801098c:	404b      	eors	r3, r1
 801098e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8010992:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8010996:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 801099a:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 801099e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80109a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109a6:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	ea80 0602 	eor.w	r6, r0, r2
 80109b2:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 80109b6:	404b      	eors	r3, r1
 80109b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80109bc:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 80109c0:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80109c4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 80109c8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80109cc:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 80109d0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80109d4:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 80109d8:	6803      	ldr	r3, [r0, #0]
 80109da:	091a      	lsrs	r2, r3, #4
 80109dc:	680b      	ldr	r3, [r1, #0]
 80109de:	071b      	lsls	r3, r3, #28
 80109e0:	4313      	orrs	r3, r2
 80109e2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80109e6:	680b      	ldr	r3, [r1, #0]
 80109e8:	091a      	lsrs	r2, r3, #4
 80109ea:	6803      	ldr	r3, [r0, #0]
 80109ec:	071b      	lsls	r3, r3, #28
 80109ee:	4313      	orrs	r3, r2
 80109f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80109f4:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80109f8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80109fc:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8010a00:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8010a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a08:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a10:	ea80 0602 	eor.w	r6, r0, r2
 8010a14:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 8010a18:	404b      	eors	r3, r1
 8010a1a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8010a1e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8010a22:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8010a26:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8010a2a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010a2e:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8010a32:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010a36:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8010a3a:	6803      	ldr	r3, [r0, #0]
 8010a3c:	0b1a      	lsrs	r2, r3, #12
 8010a3e:	680b      	ldr	r3, [r1, #0]
 8010a40:	051b      	lsls	r3, r3, #20
 8010a42:	4313      	orrs	r3, r2
 8010a44:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8010a48:	680b      	ldr	r3, [r1, #0]
 8010a4a:	0b1a      	lsrs	r2, r3, #12
 8010a4c:	6803      	ldr	r3, [r0, #0]
 8010a4e:	051b      	lsls	r3, r3, #20
 8010a50:	4313      	orrs	r3, r2
 8010a52:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8010a56:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8010a5a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010a5e:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8010a62:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8010a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a6a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a72:	ea80 0602 	eor.w	r6, r0, r2
 8010a76:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 8010a7a:	404b      	eors	r3, r1
 8010a7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010a80:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8010a84:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8010a88:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8010a8c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010a90:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8010a94:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010a98:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8010a9c:	6803      	ldr	r3, [r0, #0]
 8010a9e:	0f5a      	lsrs	r2, r3, #29
 8010aa0:	680b      	ldr	r3, [r1, #0]
 8010aa2:	00db      	lsls	r3, r3, #3
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010aaa:	680b      	ldr	r3, [r1, #0]
 8010aac:	0f5a      	lsrs	r2, r3, #29
 8010aae:	6803      	ldr	r3, [r0, #0]
 8010ab0:	00db      	lsls	r3, r3, #3
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8010ab8:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8010abc:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010ac0:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8010ac4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010acc:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	ea80 0602 	eor.w	r6, r0, r2
 8010ad8:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 8010adc:	404b      	eors	r3, r1
 8010ade:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010ae2:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8010ae6:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8010aea:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8010aee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010af2:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8010af6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010afa:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8010afe:	6803      	ldr	r3, [r0, #0]
 8010b00:	035a      	lsls	r2, r3, #13
 8010b02:	680b      	ldr	r3, [r1, #0]
 8010b04:	0cdb      	lsrs	r3, r3, #19
 8010b06:	4313      	orrs	r3, r2
 8010b08:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010b0c:	680b      	ldr	r3, [r1, #0]
 8010b0e:	035a      	lsls	r2, r3, #13
 8010b10:	6803      	ldr	r3, [r0, #0]
 8010b12:	0cdb      	lsrs	r3, r3, #19
 8010b14:	4313      	orrs	r3, r2
 8010b16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010b1a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8010b1e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010b22:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8010b26:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b2e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b36:	ea80 0602 	eor.w	r6, r0, r2
 8010b3a:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 8010b3e:	404b      	eors	r3, r1
 8010b40:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010b44:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8010b48:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8010b4c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8010b50:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b54:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8010b58:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b5c:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8010b60:	6803      	ldr	r3, [r0, #0]
 8010b62:	075a      	lsls	r2, r3, #29
 8010b64:	680b      	ldr	r3, [r1, #0]
 8010b66:	08db      	lsrs	r3, r3, #3
 8010b68:	4313      	orrs	r3, r2
 8010b6a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8010b6e:	680b      	ldr	r3, [r1, #0]
 8010b70:	075a      	lsls	r2, r3, #29
 8010b72:	6803      	ldr	r3, [r0, #0]
 8010b74:	08db      	lsrs	r3, r3, #3
 8010b76:	4313      	orrs	r3, r2
 8010b78:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8010b7c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8010b80:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010b84:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8010b88:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b90:	43d1      	mvns	r1, r2
 8010b92:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8010b96:	43db      	mvns	r3, r3
 8010b98:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8010b9c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 8010ba8:	4011      	ands	r1, r2
 8010baa:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 8010bae:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 8010bb2:	400b      	ands	r3, r1
 8010bb4:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8010bb8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc0:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 8010bc4:	4051      	eors	r1, r2
 8010bc6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8010bca:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 8010bce:	404b      	eors	r3, r1
 8010bd0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8010bd4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8010bd8:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8010bdc:	e9c1 2300 	strd	r2, r3, [r1]
 8010be0:	e002      	b.n	8010be8 <KeccakF1600_StatePermute+0x2240>
 8010be2:	bf00      	nop
 8010be4:	080164c0 	.word	0x080164c0
            Age =   BCe ^((~BCi)&  BCo );
 8010be8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf0:	43d1      	mvns	r1, r2
 8010bf2:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8010bf6:	43db      	mvns	r3, r3
 8010bf8:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8010bfc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 8010c08:	4011      	ands	r1, r2
 8010c0a:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 8010c0e:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 8010c12:	400b      	ands	r3, r1
 8010c14:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8010c18:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c20:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 8010c24:	4051      	eors	r1, r2
 8010c26:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8010c2a:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 8010c2e:	404b      	eors	r3, r1
 8010c30:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010c34:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8010c38:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8010c3c:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8010c40:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	43d1      	mvns	r1, r2
 8010c4a:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8010c4e:	43db      	mvns	r3, r3
 8010c50:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8010c54:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8010c60:	4011      	ands	r1, r2
 8010c62:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 8010c66:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8010c6a:	400b      	ands	r3, r1
 8010c6c:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8010c70:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c78:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 8010c7c:	4051      	eors	r1, r2
 8010c7e:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8010c82:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 8010c86:	404b      	eors	r3, r1
 8010c88:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010c8c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8010c90:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8010c94:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8010c98:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca0:	43d1      	mvns	r1, r2
 8010ca2:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8010ca6:	43db      	mvns	r3, r3
 8010ca8:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8010cac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb4:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8010cb8:	4011      	ands	r1, r2
 8010cba:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 8010cbe:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 8010cc2:	400b      	ands	r3, r1
 8010cc4:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8010cc8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd0:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 8010cd4:	4051      	eors	r1, r2
 8010cd6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8010cda:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 8010cde:	404b      	eors	r3, r1
 8010ce0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010ce4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8010ce8:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8010cec:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8010cf0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	43d1      	mvns	r1, r2
 8010cfa:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8010cfe:	43db      	mvns	r3, r3
 8010d00:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8010d04:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 8010d10:	4011      	ands	r1, r2
 8010d12:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 8010d16:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8010d1a:	400b      	ands	r3, r1
 8010d1c:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8010d20:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d28:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 8010d2c:	4051      	eors	r1, r2
 8010d2e:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8010d32:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 8010d36:	404b      	eors	r3, r1
 8010d38:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010d3c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8010d40:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8010d44:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8010d48:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8010d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d50:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d58:	ea80 0602 	eor.w	r6, r0, r2
 8010d5c:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8010d60:	404b      	eors	r3, r1
 8010d62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010d66:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8010d6a:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8010d6e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8010d72:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010d76:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8010d7a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010d7e:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8010d82:	6803      	ldr	r3, [r0, #0]
 8010d84:	0fda      	lsrs	r2, r3, #31
 8010d86:	680b      	ldr	r3, [r1, #0]
 8010d88:	005b      	lsls	r3, r3, #1
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8010d90:	680b      	ldr	r3, [r1, #0]
 8010d92:	0fda      	lsrs	r2, r3, #31
 8010d94:	6803      	ldr	r3, [r0, #0]
 8010d96:	005b      	lsls	r3, r3, #1
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8010d9e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8010da2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010da6:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8010daa:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8010dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010db2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	ea80 0602 	eor.w	r6, r0, r2
 8010dbe:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8010dc2:	404b      	eors	r3, r1
 8010dc4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8010dc8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8010dcc:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8010dd0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8010dd4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010dd8:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8010ddc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010de0:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8010de4:	6803      	ldr	r3, [r0, #0]
 8010de6:	0e9a      	lsrs	r2, r3, #26
 8010de8:	680b      	ldr	r3, [r1, #0]
 8010dea:	019b      	lsls	r3, r3, #6
 8010dec:	4313      	orrs	r3, r2
 8010dee:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8010df2:	680b      	ldr	r3, [r1, #0]
 8010df4:	0e9a      	lsrs	r2, r3, #26
 8010df6:	6803      	ldr	r3, [r0, #0]
 8010df8:	019b      	lsls	r3, r3, #6
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8010e00:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8010e04:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010e08:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8010e0c:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8010e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e14:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	ea80 0602 	eor.w	r6, r0, r2
 8010e20:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8010e24:	404b      	eors	r3, r1
 8010e26:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8010e2a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8010e2e:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8010e32:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8010e36:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e3a:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8010e3e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e42:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8010e46:	6803      	ldr	r3, [r0, #0]
 8010e48:	09da      	lsrs	r2, r3, #7
 8010e4a:	680b      	ldr	r3, [r1, #0]
 8010e4c:	065b      	lsls	r3, r3, #25
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8010e54:	680b      	ldr	r3, [r1, #0]
 8010e56:	09da      	lsrs	r2, r3, #7
 8010e58:	6803      	ldr	r3, [r0, #0]
 8010e5a:	065b      	lsls	r3, r3, #25
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8010e62:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8010e66:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010e6a:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8010e6e:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8010e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e76:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	ea80 0602 	eor.w	r6, r0, r2
 8010e82:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8010e86:	404b      	eors	r3, r1
 8010e88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8010e8c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8010e90:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8010e94:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8010e98:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e9c:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8010ea0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ea4:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 8010ea8:	6803      	ldr	r3, [r0, #0]
 8010eaa:	0e1a      	lsrs	r2, r3, #24
 8010eac:	680b      	ldr	r3, [r1, #0]
 8010eae:	021b      	lsls	r3, r3, #8
 8010eb0:	4313      	orrs	r3, r2
 8010eb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010eb6:	680b      	ldr	r3, [r1, #0]
 8010eb8:	0e1a      	lsrs	r2, r3, #24
 8010eba:	6803      	ldr	r3, [r0, #0]
 8010ebc:	021b      	lsls	r3, r3, #8
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8010ec4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8010ec8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010ecc:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8010ed0:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ed8:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee0:	ea80 0602 	eor.w	r6, r0, r2
 8010ee4:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8010ee8:	404b      	eors	r3, r1
 8010eea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010eee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8010ef2:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8010ef6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8010efa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010efe:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8010f02:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f06:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8010f0a:	6803      	ldr	r3, [r0, #0]
 8010f0c:	0b9a      	lsrs	r2, r3, #14
 8010f0e:	680b      	ldr	r3, [r1, #0]
 8010f10:	049b      	lsls	r3, r3, #18
 8010f12:	4313      	orrs	r3, r2
 8010f14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010f18:	680b      	ldr	r3, [r1, #0]
 8010f1a:	0b9a      	lsrs	r2, r3, #14
 8010f1c:	6803      	ldr	r3, [r0, #0]
 8010f1e:	049b      	lsls	r3, r3, #18
 8010f20:	4313      	orrs	r3, r2
 8010f22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8010f26:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8010f2a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010f2e:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8010f32:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3a:	43d1      	mvns	r1, r2
 8010f3c:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8010f40:	43db      	mvns	r3, r3
 8010f42:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8010f46:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4e:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 8010f52:	4011      	ands	r1, r2
 8010f54:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 8010f58:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 8010f5c:	400b      	ands	r3, r1
 8010f5e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8010f62:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f6a:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 8010f6e:	4051      	eors	r1, r2
 8010f70:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8010f74:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 8010f78:	404b      	eors	r3, r1
 8010f7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010f7e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8010f82:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8010f86:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8010f8a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f92:	43d1      	mvns	r1, r2
 8010f94:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8010f98:	43db      	mvns	r3, r3
 8010f9a:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8010f9e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa6:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 8010faa:	4011      	ands	r1, r2
 8010fac:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8010fb0:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 8010fb4:	400b      	ands	r3, r1
 8010fb6:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8010fba:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 8010fc6:	4051      	eors	r1, r2
 8010fc8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8010fcc:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 8010fd0:	404b      	eors	r3, r1
 8010fd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010fd6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8010fda:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8010fde:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8010fe2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fea:	43d1      	mvns	r1, r2
 8010fec:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8010ff0:	43db      	mvns	r3, r3
 8010ff2:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8010ff6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffe:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8011002:	4011      	ands	r1, r2
 8011004:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 8011008:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 801100c:	400b      	ands	r3, r1
 801100e:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8011012:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 801101e:	4051      	eors	r1, r2
 8011020:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8011024:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 8011028:	404b      	eors	r3, r1
 801102a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801102e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8011032:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8011036:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 801103a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011042:	43d1      	mvns	r1, r2
 8011044:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 8011048:	43db      	mvns	r3, r3
 801104a:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 801104e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011056:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801105a:	4011      	ands	r1, r2
 801105c:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 8011060:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8011064:	400b      	ands	r3, r1
 8011066:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 801106a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011072:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 8011076:	4051      	eors	r1, r2
 8011078:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 801107c:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 8011080:	404b      	eors	r3, r1
 8011082:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011086:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801108a:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 801108e:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8011092:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109a:	43d1      	mvns	r1, r2
 801109c:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 80110a0:	43db      	mvns	r3, r3
 80110a2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 80110a6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80110aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ae:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80110b2:	4011      	ands	r1, r2
 80110b4:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 80110b8:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80110bc:	400b      	ands	r3, r1
 80110be:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 80110c2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80110c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ca:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 80110ce:	4051      	eors	r1, r2
 80110d0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80110d4:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 80110d8:	404b      	eors	r3, r1
 80110da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80110de:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80110e2:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80110e6:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 80110ea:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80110ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110f2:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80110f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fa:	ea80 0602 	eor.w	r6, r0, r2
 80110fe:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 8011102:	404b      	eors	r3, r1
 8011104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011108:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801110c:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8011110:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8011114:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011118:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 801111c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011120:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8011124:	6803      	ldr	r3, [r0, #0]
 8011126:	095a      	lsrs	r2, r3, #5
 8011128:	680b      	ldr	r3, [r1, #0]
 801112a:	06db      	lsls	r3, r3, #27
 801112c:	4313      	orrs	r3, r2
 801112e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011132:	680b      	ldr	r3, [r1, #0]
 8011134:	095a      	lsrs	r2, r3, #5
 8011136:	6803      	ldr	r3, [r0, #0]
 8011138:	06db      	lsls	r3, r3, #27
 801113a:	4313      	orrs	r3, r2
 801113c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011140:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8011144:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8011148:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 801114c:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8011150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011154:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8011158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115c:	ea80 0602 	eor.w	r6, r0, r2
 8011160:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 8011164:	404b      	eors	r3, r1
 8011166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801116a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 801116e:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8011172:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8011176:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801117a:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 801117e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011182:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8011186:	6803      	ldr	r3, [r0, #0]
 8011188:	011a      	lsls	r2, r3, #4
 801118a:	680b      	ldr	r3, [r1, #0]
 801118c:	0f1b      	lsrs	r3, r3, #28
 801118e:	4313      	orrs	r3, r2
 8011190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011194:	680b      	ldr	r3, [r1, #0]
 8011196:	011a      	lsls	r2, r3, #4
 8011198:	6803      	ldr	r3, [r0, #0]
 801119a:	0f1b      	lsrs	r3, r3, #28
 801119c:	4313      	orrs	r3, r2
 801119e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80111a2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80111a6:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80111aa:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 80111ae:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80111b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111b6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	ea80 0602 	eor.w	r6, r0, r2
 80111c2:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 80111c6:	404b      	eors	r3, r1
 80111c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80111cc:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80111d0:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80111d4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 80111d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80111dc:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 80111e0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80111e4:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 80111e8:	6803      	ldr	r3, [r0, #0]
 80111ea:	0d9a      	lsrs	r2, r3, #22
 80111ec:	680b      	ldr	r3, [r1, #0]
 80111ee:	029b      	lsls	r3, r3, #10
 80111f0:	4313      	orrs	r3, r2
 80111f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80111f6:	680b      	ldr	r3, [r1, #0]
 80111f8:	0d9a      	lsrs	r2, r3, #22
 80111fa:	6803      	ldr	r3, [r0, #0]
 80111fc:	029b      	lsls	r3, r3, #10
 80111fe:	4313      	orrs	r3, r2
 8011200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011204:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8011208:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 801120c:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 8011210:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8011214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011218:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 801121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011220:	ea80 0602 	eor.w	r6, r0, r2
 8011224:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 8011228:	404b      	eors	r3, r1
 801122a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801122e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011232:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8011236:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 801123a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801123e:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 8011242:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011246:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 801124a:	6803      	ldr	r3, [r0, #0]
 801124c:	0c5a      	lsrs	r2, r3, #17
 801124e:	680b      	ldr	r3, [r1, #0]
 8011250:	03db      	lsls	r3, r3, #15
 8011252:	4313      	orrs	r3, r2
 8011254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011258:	680b      	ldr	r3, [r1, #0]
 801125a:	0c5a      	lsrs	r2, r3, #17
 801125c:	6803      	ldr	r3, [r0, #0]
 801125e:	03db      	lsls	r3, r3, #15
 8011260:	4313      	orrs	r3, r2
 8011262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011266:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801126a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 801126e:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8011272:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011276:	e9d3 0100 	ldrd	r0, r1, [r3]
 801127a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 801127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011282:	ea80 0602 	eor.w	r6, r0, r2
 8011286:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 801128a:	404b      	eors	r3, r1
 801128c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011290:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011294:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8011298:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 801129c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112a0:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80112a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112a8:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 80112ac:	6803      	ldr	r3, [r0, #0]
 80112ae:	061a      	lsls	r2, r3, #24
 80112b0:	680b      	ldr	r3, [r1, #0]
 80112b2:	0a1b      	lsrs	r3, r3, #8
 80112b4:	4313      	orrs	r3, r2
 80112b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80112ba:	680b      	ldr	r3, [r1, #0]
 80112bc:	061a      	lsls	r2, r3, #24
 80112be:	6803      	ldr	r3, [r0, #0]
 80112c0:	0a1b      	lsrs	r3, r3, #8
 80112c2:	4313      	orrs	r3, r2
 80112c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80112c8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80112cc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80112d0:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 80112d4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	43d1      	mvns	r1, r2
 80112de:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 80112e2:	43db      	mvns	r3, r3
 80112e4:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80112e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80112ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f0:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 80112f4:	4011      	ands	r1, r2
 80112f6:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 80112fa:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 80112fe:	400b      	ands	r3, r1
 8011300:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8011304:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011310:	4051      	eors	r1, r2
 8011312:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011316:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 801131a:	404b      	eors	r3, r1
 801131c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011320:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8011324:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8011328:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 801132c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011334:	43d1      	mvns	r1, r2
 8011336:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 801133a:	43db      	mvns	r3, r3
 801133c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8011340:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801134c:	4011      	ands	r1, r2
 801134e:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 8011352:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8011356:	400b      	ands	r3, r1
 8011358:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 801135c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8011368:	4051      	eors	r1, r2
 801136a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 801136e:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8011372:	404b      	eors	r3, r1
 8011374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011378:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801137c:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8011380:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 8011384:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138c:	43d1      	mvns	r1, r2
 801138e:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8011392:	43db      	mvns	r3, r3
 8011394:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8011398:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a0:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 80113a4:	4011      	ands	r1, r2
 80113a6:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 80113aa:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80113ae:	400b      	ands	r3, r1
 80113b0:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80113b4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80113b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113bc:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80113c0:	4051      	eors	r1, r2
 80113c2:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80113c6:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80113ca:	404b      	eors	r3, r1
 80113cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80113d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80113d4:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80113d8:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 80113dc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80113e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e4:	43d1      	mvns	r1, r2
 80113e6:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 80113ea:	43db      	mvns	r3, r3
 80113ec:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80113f0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80113f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f8:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80113fc:	4011      	ands	r1, r2
 80113fe:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 8011402:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8011406:	400b      	ands	r3, r1
 8011408:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 801140c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011414:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8011418:	4051      	eors	r1, r2
 801141a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801141e:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8011422:	404b      	eors	r3, r1
 8011424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011428:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801142c:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8011430:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 8011434:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143c:	43d1      	mvns	r1, r2
 801143e:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8011442:	43db      	mvns	r3, r3
 8011444:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8011448:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011450:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8011454:	4011      	ands	r1, r2
 8011456:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 801145a:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 801145e:	400b      	ands	r3, r1
 8011460:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8011464:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146c:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8011470:	4051      	eors	r1, r2
 8011472:	67b9      	str	r1, [r7, #120]	; 0x78
 8011474:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 8011478:	404b      	eors	r3, r1
 801147a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801147c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011480:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8011484:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 8011488:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 801148c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011490:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8011494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011498:	ea80 0602 	eor.w	r6, r0, r2
 801149c:	673e      	str	r6, [r7, #112]	; 0x70
 801149e:	404b      	eors	r3, r1
 80114a0:	677b      	str	r3, [r7, #116]	; 0x74
 80114a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80114a6:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 80114aa:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80114ae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80114b2:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80114b6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80114ba:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 80114be:	6803      	ldr	r3, [r0, #0]
 80114c0:	079a      	lsls	r2, r3, #30
 80114c2:	680b      	ldr	r3, [r1, #0]
 80114c4:	089b      	lsrs	r3, r3, #2
 80114c6:	4313      	orrs	r3, r2
 80114c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80114ca:	680b      	ldr	r3, [r1, #0]
 80114cc:	079a      	lsls	r2, r3, #30
 80114ce:	6803      	ldr	r3, [r0, #0]
 80114d0:	089b      	lsrs	r3, r3, #2
 80114d2:	4313      	orrs	r3, r2
 80114d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80114d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80114da:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80114de:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80114e2:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80114e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80114ea:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80114ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f2:	ea80 0602 	eor.w	r6, r0, r2
 80114f6:	663e      	str	r6, [r7, #96]	; 0x60
 80114f8:	404b      	eors	r3, r1
 80114fa:	667b      	str	r3, [r7, #100]	; 0x64
 80114fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011500:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8011504:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 8011508:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801150c:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8011510:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011514:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 8011518:	6803      	ldr	r3, [r0, #0]
 801151a:	05da      	lsls	r2, r3, #23
 801151c:	680b      	ldr	r3, [r1, #0]
 801151e:	0a5b      	lsrs	r3, r3, #9
 8011520:	4313      	orrs	r3, r2
 8011522:	65bb      	str	r3, [r7, #88]	; 0x58
 8011524:	680b      	ldr	r3, [r1, #0]
 8011526:	05da      	lsls	r2, r3, #23
 8011528:	6803      	ldr	r3, [r0, #0]
 801152a:	0a5b      	lsrs	r3, r3, #9
 801152c:	4313      	orrs	r3, r2
 801152e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011530:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011534:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8011538:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 801153c:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011544:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8011548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154c:	ea80 0602 	eor.w	r6, r0, r2
 8011550:	653e      	str	r6, [r7, #80]	; 0x50
 8011552:	404b      	eors	r3, r1
 8011554:	657b      	str	r3, [r7, #84]	; 0x54
 8011556:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801155a:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 801155e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 8011562:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011566:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 801156a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801156e:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8011572:	6803      	ldr	r3, [r0, #0]
 8011574:	01da      	lsls	r2, r3, #7
 8011576:	680b      	ldr	r3, [r1, #0]
 8011578:	0e5b      	lsrs	r3, r3, #25
 801157a:	4313      	orrs	r3, r2
 801157c:	64bb      	str	r3, [r7, #72]	; 0x48
 801157e:	680b      	ldr	r3, [r1, #0]
 8011580:	01da      	lsls	r2, r3, #7
 8011582:	6803      	ldr	r3, [r0, #0]
 8011584:	0e5b      	lsrs	r3, r3, #25
 8011586:	4313      	orrs	r3, r2
 8011588:	64fb      	str	r3, [r7, #76]	; 0x4c
 801158a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801158e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8011592:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 8011596:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 801159a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801159e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80115a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a6:	ea80 0602 	eor.w	r6, r0, r2
 80115aa:	643e      	str	r6, [r7, #64]	; 0x40
 80115ac:	404b      	eors	r3, r1
 80115ae:	647b      	str	r3, [r7, #68]	; 0x44
 80115b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80115b4:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 80115b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 80115bc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115c0:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80115c4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115c8:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80115cc:	6803      	ldr	r3, [r0, #0]
 80115ce:	025a      	lsls	r2, r3, #9
 80115d0:	680b      	ldr	r3, [r1, #0]
 80115d2:	0ddb      	lsrs	r3, r3, #23
 80115d4:	4313      	orrs	r3, r2
 80115d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80115d8:	680b      	ldr	r3, [r1, #0]
 80115da:	025a      	lsls	r2, r3, #9
 80115dc:	6803      	ldr	r3, [r0, #0]
 80115de:	0ddb      	lsrs	r3, r3, #23
 80115e0:	4313      	orrs	r3, r2
 80115e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80115e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80115e8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80115ec:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 80115f0:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80115f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115f8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	ea80 0602 	eor.w	r6, r0, r2
 8011604:	633e      	str	r6, [r7, #48]	; 0x30
 8011606:	404b      	eors	r3, r1
 8011608:	637b      	str	r3, [r7, #52]	; 0x34
 801160a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801160e:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8011612:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 8011616:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801161a:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 801161e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011622:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8011626:	6803      	ldr	r3, [r0, #0]
 8011628:	0f9a      	lsrs	r2, r3, #30
 801162a:	680b      	ldr	r3, [r1, #0]
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	4313      	orrs	r3, r2
 8011630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011632:	680b      	ldr	r3, [r1, #0]
 8011634:	0f9a      	lsrs	r2, r3, #30
 8011636:	6803      	ldr	r3, [r0, #0]
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4313      	orrs	r3, r2
 801163c:	62bb      	str	r3, [r7, #40]	; 0x28
 801163e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011642:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8011646:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 801164a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	43d1      	mvns	r1, r2
 8011654:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 8011658:	43db      	mvns	r3, r3
 801165a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801165e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011666:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 801166a:	4011      	ands	r1, r2
 801166c:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 8011670:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8011674:	400b      	ands	r3, r1
 8011676:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 801167a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011682:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011686:	4051      	eors	r1, r2
 8011688:	6239      	str	r1, [r7, #32]
 801168a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 801168e:	404b      	eors	r3, r1
 8011690:	627b      	str	r3, [r7, #36]	; 0x24
 8011692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011696:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801169a:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 801169e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80116a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a6:	43d1      	mvns	r1, r2
 80116a8:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 80116ac:	43db      	mvns	r3, r3
 80116ae:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 80116b2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ba:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 80116be:	4011      	ands	r1, r2
 80116c0:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 80116c4:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 80116c8:	400b      	ands	r3, r1
 80116ca:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80116ce:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80116d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d6:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80116da:	4051      	eors	r1, r2
 80116dc:	61b9      	str	r1, [r7, #24]
 80116de:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80116e2:	404b      	eors	r3, r1
 80116e4:	61fb      	str	r3, [r7, #28]
 80116e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80116ea:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 80116ee:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 80116f2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80116f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fa:	43d1      	mvns	r1, r2
 80116fc:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8011700:	43db      	mvns	r3, r3
 8011702:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8011706:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170e:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8011712:	4011      	ands	r1, r2
 8011714:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 8011718:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 801171c:	400b      	ands	r3, r1
 801171e:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8011722:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172a:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 801172e:	4051      	eors	r1, r2
 8011730:	6139      	str	r1, [r7, #16]
 8011732:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8011736:	404b      	eors	r3, r1
 8011738:	617b      	str	r3, [r7, #20]
 801173a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801173e:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8011742:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8011746:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	43d1      	mvns	r1, r2
 8011750:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8011754:	43db      	mvns	r3, r3
 8011756:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 801175a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011762:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8011766:	ea01 0a02 	and.w	sl, r1, r2
 801176a:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 801176e:	ea01 0b03 	and.w	fp, r1, r3
 8011772:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177a:	ea82 010a 	eor.w	r1, r2, sl
 801177e:	60b9      	str	r1, [r7, #8]
 8011780:	ea83 030b 	eor.w	r3, r3, fp
 8011784:	60fb      	str	r3, [r7, #12]
 8011786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801178a:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 801178e:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 8011792:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179a:	ea6f 0802 	mvn.w	r8, r2
 801179e:	ea6f 0903 	mvn.w	r9, r3
 80117a2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80117a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117aa:	ea08 0402 	and.w	r4, r8, r2
 80117ae:	ea09 0503 	and.w	r5, r9, r3
 80117b2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80117b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ba:	ea82 0104 	eor.w	r1, r2, r4
 80117be:	6039      	str	r1, [r7, #0]
 80117c0:	406b      	eors	r3, r5
 80117c2:	607b      	str	r3, [r7, #4]
 80117c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117c8:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80117cc:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 80117d0:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80117d4:	3302      	adds	r3, #2
 80117d6:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80117da:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80117de:	2b17      	cmp	r3, #23
 80117e0:	f77d aa04 	ble.w	800ebec <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80117e4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80117e8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80117ec:	6819      	ldr	r1, [r3, #0]
 80117ee:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80117f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f6:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 80117fa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80117fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	f103 0108 	add.w	r1, r3, #8
 8011808:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 801180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011810:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8011814:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011818:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f103 0110 	add.w	r1, r3, #16
 8011822:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 801182e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011832:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f103 0118 	add.w	r1, r3, #24
 801183c:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8011840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011844:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8011848:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801184c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f103 0120 	add.w	r1, r3, #32
 8011856:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 801185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8011862:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011866:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8011870:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8011874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011878:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 801187c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011880:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801188a:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 801188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011892:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8011896:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801189a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118a4:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80118a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ac:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 80118b0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80118be:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 80118ca:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80118d8:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80118dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e0:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 80118e4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80118e8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80118f2:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80118f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fa:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 80118fe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011902:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f103 0158 	add.w	r1, r3, #88	; 0x58
 801190c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8011910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011914:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8011918:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801191c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8011926:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 801192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192e:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8011932:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011936:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8011940:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8011944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011948:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 801194c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011950:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f103 0170 	add.w	r1, r3, #112	; 0x70
 801195a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 801195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011962:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8011966:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801196a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8011974:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8011978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197c:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8011980:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011984:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801198e:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 801199a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801199e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f103 0188 	add.w	r1, r3, #136	; 0x88
 80119a8:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 80119b4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119b8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80119c2:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80119c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ca:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 80119ce:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f103 0198 	add.w	r1, r3, #152	; 0x98
 80119dc:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80119e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e4:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 80119e8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 80119f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80119fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fe:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8011a02:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8011a10:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8011a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a18:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8011a1c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a20:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8011a2a:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8011a36:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8011a44:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8011a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4c:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8011a50:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a54:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8011a5e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8011a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a66:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011a6a:	bf00      	nop
 8011a6c:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 8011a70:	46bd      	mov	sp, r7
 8011a72:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011a76:	4770      	bx	lr

08011a78 <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b085      	sub	sp, #20
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8011a80:	2300      	movs	r3, #0
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	e00c      	b.n	8011aa0 <keccak_init+0x28>
    state->s[i] = 0;
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	18d1      	adds	r1, r2, r3
 8011a8e:	f04f 0200 	mov.w	r2, #0
 8011a92:	f04f 0300 	mov.w	r3, #0
 8011a96:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	60fb      	str	r3, [r7, #12]
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b18      	cmp	r3, #24
 8011aa4:	d9ef      	bls.n	8011a86 <keccak_init+0xe>
  state->pos = 0;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8011aae:	bf00      	nop
 8011ab0:	3714      	adds	r7, #20
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr

08011aba <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8011aba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011abe:	b08e      	sub	sp, #56	; 0x38
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8011ac4:	6239      	str	r1, [r7, #32]
 8011ac6:	61fa      	str	r2, [r7, #28]
 8011ac8:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 8011aca:	2300      	movs	r3, #0
 8011acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ace:	2300      	movs	r3, #0
 8011ad0:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	f003 0307 	and.w	r3, r3, #7
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d03a      	beq.n	8011b52 <keccak_absorb+0x98>
    i = pos & 7;
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	f003 0307 	and.w	r3, r3, #7
 8011ae2:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 8011ae4:	e012      	b.n	8011b0c <keccak_absorb+0x52>
      t[i++] = *m++;
 8011ae6:	69ba      	ldr	r2, [r7, #24]
 8011ae8:	1c53      	adds	r3, r2, #1
 8011aea:	61bb      	str	r3, [r7, #24]
 8011aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aee:	1c59      	adds	r1, r3, #1
 8011af0:	6379      	str	r1, [r7, #52]	; 0x34
 8011af2:	7812      	ldrb	r2, [r2, #0]
 8011af4:	3320      	adds	r3, #32
 8011af6:	f107 0118 	add.w	r1, r7, #24
 8011afa:	440b      	add	r3, r1
 8011afc:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 8011b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b02:	3b01      	subs	r3, #1
 8011b04:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 8011b06:	69fb      	ldr	r3, [r7, #28]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 8011b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b0e:	2b07      	cmp	r3, #7
 8011b10:	d802      	bhi.n	8011b18 <keccak_absorb+0x5e>
 8011b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1e6      	bne.n	8011ae6 <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 8011b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fc fed9 	bl	800e8d4 <load64>
 8011b22:	4604      	mov	r4, r0
 8011b24:	460d      	mov	r5, r1
 8011b26:	69fa      	ldr	r2, [r7, #28]
 8011b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	f023 0307 	bic.w	r3, r3, #7
 8011b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b32:	4413      	add	r3, r2
 8011b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b38:	69fa      	ldr	r2, [r7, #28]
 8011b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	f023 0207 	bic.w	r2, r3, #7
 8011b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b44:	4413      	add	r3, r2
 8011b46:	ea84 0800 	eor.w	r8, r4, r0
 8011b4a:	ea85 0901 	eor.w	r9, r5, r1
 8011b4e:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d075      	beq.n	8011c44 <keccak_absorb+0x18a>
 8011b58:	6a3a      	ldr	r2, [r7, #32]
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d36f      	bcc.n	8011c44 <keccak_absorb+0x18a>
    for(i=0;i<(r-pos)/8;i++)
 8011b64:	2300      	movs	r3, #0
 8011b66:	637b      	str	r3, [r7, #52]	; 0x34
 8011b68:	e023      	b.n	8011bb2 <keccak_absorb+0xf8>
      s[pos/8+i] ^= load64(m+8*i);
 8011b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b6c:	00db      	lsls	r3, r3, #3
 8011b6e:	69ba      	ldr	r2, [r7, #24]
 8011b70:	4413      	add	r3, r2
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fc feae 	bl	800e8d4 <load64>
 8011b78:	4680      	mov	r8, r0
 8011b7a:	4689      	mov	r9, r1
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	08dc      	lsrs	r4, r3, #3
 8011b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b82:	4423      	add	r3, r4
 8011b84:	00db      	lsls	r3, r3, #3
 8011b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b88:	4413      	add	r3, r2
 8011b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b90:	4423      	add	r3, r4
 8011b92:	00db      	lsls	r3, r3, #3
 8011b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b96:	4413      	add	r3, r2
 8011b98:	ea88 0200 	eor.w	r2, r8, r0
 8011b9c:	613a      	str	r2, [r7, #16]
 8011b9e:	ea89 0201 	eor.w	r2, r9, r1
 8011ba2:	617a      	str	r2, [r7, #20]
 8011ba4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011ba8:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 8011bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bae:	3301      	adds	r3, #1
 8011bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8011bb2:	6a3a      	ldr	r2, [r7, #32]
 8011bb4:	69fb      	ldr	r3, [r7, #28]
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	08db      	lsrs	r3, r3, #3
 8011bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d3d4      	bcc.n	8011b6a <keccak_absorb+0xb0>
    m += r-pos;
 8011bc0:	6a3a      	ldr	r2, [r7, #32]
 8011bc2:	69fb      	ldr	r3, [r7, #28]
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	69ba      	ldr	r2, [r7, #24]
 8011bc8:	4413      	add	r3, r2
 8011bca:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 8011bcc:	69fa      	ldr	r2, [r7, #28]
 8011bce:	6a3b      	ldr	r3, [r7, #32]
 8011bd0:	1ad3      	subs	r3, r2, r3
 8011bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bd4:	4413      	add	r3, r2
 8011bd6:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 8011bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bde:	f7fc fee3 	bl	800e9a8 <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 8011be2:	e02f      	b.n	8011c44 <keccak_absorb+0x18a>
    for(i=0;i<r/8;i++)
 8011be4:	2300      	movs	r3, #0
 8011be6:	637b      	str	r3, [r7, #52]	; 0x34
 8011be8:	e01c      	b.n	8011c24 <keccak_absorb+0x16a>
      s[i] ^= load64(m+8*i);
 8011bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bec:	00db      	lsls	r3, r3, #3
 8011bee:	69ba      	ldr	r2, [r7, #24]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fc fe6e 	bl	800e8d4 <load64>
 8011bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfa:	00db      	lsls	r3, r3, #3
 8011bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bfe:	4413      	add	r3, r2
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8011c06:	00e4      	lsls	r4, r4, #3
 8011c08:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011c0a:	442c      	add	r4, r5
 8011c0c:	ea80 0502 	eor.w	r5, r0, r2
 8011c10:	60bd      	str	r5, [r7, #8]
 8011c12:	404b      	eors	r3, r1
 8011c14:	60fb      	str	r3, [r7, #12]
 8011c16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011c1a:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 8011c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c20:	3301      	adds	r3, #1
 8011c22:	637b      	str	r3, [r7, #52]	; 0x34
 8011c24:	6a3b      	ldr	r3, [r7, #32]
 8011c26:	08db      	lsrs	r3, r3, #3
 8011c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d3dd      	bcc.n	8011bea <keccak_absorb+0x130>
    m += r;
 8011c2e:	69ba      	ldr	r2, [r7, #24]
 8011c30:	6a3b      	ldr	r3, [r7, #32]
 8011c32:	4413      	add	r3, r2
 8011c34:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 8011c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c38:	6a3b      	ldr	r3, [r7, #32]
 8011c3a:	1ad3      	subs	r3, r2, r3
 8011c3c:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 8011c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c40:	f7fc feb2 	bl	800e9a8 <KeccakF1600_StatePermute>
  while(mlen >= r) {
 8011c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c46:	6a3b      	ldr	r3, [r7, #32]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d2cb      	bcs.n	8011be4 <keccak_absorb+0x12a>
  }

  for(i=0;i<mlen/8;i++)
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8011c50:	e020      	b.n	8011c94 <keccak_absorb+0x1da>
    s[pos/8+i] ^= load64(m+8*i);
 8011c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c54:	00db      	lsls	r3, r3, #3
 8011c56:	69ba      	ldr	r2, [r7, #24]
 8011c58:	4413      	add	r3, r2
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fc fe3a 	bl	800e8d4 <load64>
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	08dc      	lsrs	r4, r3, #3
 8011c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c66:	4423      	add	r3, r4
 8011c68:	00db      	lsls	r3, r3, #3
 8011c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c6c:	4413      	add	r3, r2
 8011c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c72:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8011c74:	442c      	add	r4, r5
 8011c76:	00e4      	lsls	r4, r4, #3
 8011c78:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011c7a:	442c      	add	r4, r5
 8011c7c:	ea80 0502 	eor.w	r5, r0, r2
 8011c80:	603d      	str	r5, [r7, #0]
 8011c82:	404b      	eors	r3, r1
 8011c84:	607b      	str	r3, [r7, #4]
 8011c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c8a:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 8011c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c90:	3301      	adds	r3, #1
 8011c92:	637b      	str	r3, [r7, #52]	; 0x34
 8011c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c96:	08db      	lsrs	r3, r3, #3
 8011c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d3d9      	bcc.n	8011c52 <keccak_absorb+0x198>
  m += 8*i;
 8011c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca0:	00db      	lsls	r3, r3, #3
 8011ca2:	69ba      	ldr	r2, [r7, #24]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 8011ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011caa:	00db      	lsls	r3, r3, #3
 8011cac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 8011cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb4:	00db      	lsls	r3, r3, #3
 8011cb6:	69fa      	ldr	r2, [r7, #28]
 8011cb8:	4413      	add	r3, r2
 8011cba:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 8011cbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d03d      	beq.n	8011d3e <keccak_absorb+0x284>
    for(i=0;i<8;i++)
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8011cc6:	e008      	b.n	8011cda <keccak_absorb+0x220>
      t[i] = 0;
 8011cc8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cce:	4413      	add	r3, r2
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 8011cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8011cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cdc:	2b07      	cmp	r3, #7
 8011cde:	d9f3      	bls.n	8011cc8 <keccak_absorb+0x20e>
    for(i=0;i<mlen;i++)
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8011ce4:	e00c      	b.n	8011d00 <keccak_absorb+0x246>
      t[i] = m[i];
 8011ce6:	69ba      	ldr	r2, [r7, #24]
 8011ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cea:	4413      	add	r3, r2
 8011cec:	7819      	ldrb	r1, [r3, #0]
 8011cee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cf4:	4413      	add	r3, r2
 8011cf6:	460a      	mov	r2, r1
 8011cf8:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 8011cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8011d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d3ee      	bcc.n	8011ce6 <keccak_absorb+0x22c>
    s[pos/8] ^= load64(t);
 8011d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fc fde1 	bl	800e8d4 <load64>
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	f023 0307 	bic.w	r3, r3, #7
 8011d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d1a:	4413      	add	r3, r2
 8011d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d20:	69fc      	ldr	r4, [r7, #28]
 8011d22:	f024 0407 	bic.w	r4, r4, #7
 8011d26:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011d28:	442c      	add	r4, r5
 8011d2a:	ea80 0a02 	eor.w	sl, r0, r2
 8011d2e:	ea81 0b03 	eor.w	fp, r1, r3
 8011d32:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 8011d36:	69fa      	ldr	r2, [r7, #28]
 8011d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d3a:	4413      	add	r3, r2
 8011d3c:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 8011d3e:	69fb      	ldr	r3, [r7, #28]
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3738      	adds	r7, #56	; 0x38
 8011d44:	46bd      	mov	sp, r7
 8011d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011d4a <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 8011d4a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011d4e:	b088      	sub	sp, #32
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6178      	str	r0, [r7, #20]
 8011d54:	6139      	str	r1, [r7, #16]
 8011d56:	60fa      	str	r2, [r7, #12]
 8011d58:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	08db      	lsrs	r3, r3, #3
 8011d5e:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f003 0307 	and.w	r3, r3, #7
 8011d66:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	00db      	lsls	r3, r3, #3
 8011d6c:	697a      	ldr	r2, [r7, #20]
 8011d6e:	4413      	add	r3, r2
 8011d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d74:	7afb      	ldrb	r3, [r7, #11]
 8011d76:	2200      	movs	r2, #0
 8011d78:	4698      	mov	r8, r3
 8011d7a:	4691      	mov	r9, r2
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	00db      	lsls	r3, r3, #3
 8011d80:	f1a3 0620 	sub.w	r6, r3, #32
 8011d84:	f1c3 0220 	rsb	r2, r3, #32
 8011d88:	fa09 f503 	lsl.w	r5, r9, r3
 8011d8c:	fa08 f606 	lsl.w	r6, r8, r6
 8011d90:	4335      	orrs	r5, r6
 8011d92:	fa28 f202 	lsr.w	r2, r8, r2
 8011d96:	4315      	orrs	r5, r2
 8011d98:	fa08 f403 	lsl.w	r4, r8, r3
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	00db      	lsls	r3, r3, #3
 8011da0:	697a      	ldr	r2, [r7, #20]
 8011da2:	4413      	add	r3, r2
 8011da4:	ea80 0a04 	eor.w	sl, r0, r4
 8011da8:	ea81 0b05 	eor.w	fp, r1, r5
 8011dac:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	f023 0307 	bic.w	r3, r3, #7
 8011db6:	3b08      	subs	r3, #8
 8011db8:	697a      	ldr	r2, [r7, #20]
 8011dba:	4413      	add	r3, r2
 8011dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc0:	6939      	ldr	r1, [r7, #16]
 8011dc2:	f021 0107 	bic.w	r1, r1, #7
 8011dc6:	3908      	subs	r1, #8
 8011dc8:	6978      	ldr	r0, [r7, #20]
 8011dca:	4401      	add	r1, r0
 8011dcc:	603a      	str	r2, [r7, #0]
 8011dce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011dd2:	607b      	str	r3, [r7, #4]
 8011dd4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011dd8:	e9c1 3400 	strd	r3, r4, [r1]
}
 8011ddc:	bf00      	nop
 8011dde:	3720      	adds	r7, #32
 8011de0:	46bd      	mov	sp, r7
 8011de2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011de6:	4770      	bx	lr

08011de8 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b086      	sub	sp, #24
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
 8011df4:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 8011df6:	e021      	b.n	8011e3c <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f7fc fdd5 	bl	800e9a8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8011dfe:	2300      	movs	r3, #0
 8011e00:	617b      	str	r3, [r7, #20]
 8011e02:	e00f      	b.n	8011e24 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	00db      	lsls	r3, r3, #3
 8011e08:	68fa      	ldr	r2, [r7, #12]
 8011e0a:	18d1      	adds	r1, r2, r3
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	00db      	lsls	r3, r3, #3
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	4413      	add	r3, r2
 8011e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e18:	4608      	mov	r0, r1
 8011e1a:	f7fc fd98 	bl	800e94e <store64>
    for(i=0;i<r/8;i++)
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	3301      	adds	r3, #1
 8011e22:	617b      	str	r3, [r7, #20]
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	08db      	lsrs	r3, r3, #3
 8011e28:	697a      	ldr	r2, [r7, #20]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d3ea      	bcc.n	8011e04 <keccak_squeezeblocks+0x1c>
    out += r;
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	4413      	add	r3, r2
 8011e34:	60fb      	str	r3, [r7, #12]
    nblocks--;
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	3b01      	subs	r3, #1
 8011e3a:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d1da      	bne.n	8011df8 <keccak_squeezeblocks+0x10>
  }
}
 8011e42:	bf00      	nop
 8011e44:	bf00      	nop
 8011e46:	3718      	adds	r7, #24
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int r,
                                   unsigned int pos)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b088      	sub	sp, #32
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
 8011e58:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t t[8];

  if(pos & 7) {
 8011e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5c:	f003 0307 	and.w	r3, r3, #7
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d027      	beq.n	8011eb4 <keccak_squeeze+0x68>
    store64(t,s[pos/8]);
 8011e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e66:	f023 0307 	bic.w	r3, r3, #7
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e72:	f107 0114 	add.w	r1, r7, #20
 8011e76:	4608      	mov	r0, r1
 8011e78:	f7fc fd69 	bl	800e94e <store64>
    i = pos & 7;
 8011e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7e:	f003 0307 	and.w	r3, r3, #7
 8011e82:	61fb      	str	r3, [r7, #28]
    while(i < 8 && outlen > 0) {
 8011e84:	e010      	b.n	8011ea8 <keccak_squeeze+0x5c>
      *out++ = t[i++];
 8011e86:	69fa      	ldr	r2, [r7, #28]
 8011e88:	1c53      	adds	r3, r2, #1
 8011e8a:	61fb      	str	r3, [r7, #28]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	1c59      	adds	r1, r3, #1
 8011e90:	60f9      	str	r1, [r7, #12]
 8011e92:	3220      	adds	r2, #32
 8011e94:	443a      	add	r2, r7
 8011e96:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8011e9a:	701a      	strb	r2, [r3, #0]
      outlen--;
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	60bb      	str	r3, [r7, #8]
      pos++;
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    while(i < 8 && outlen > 0) {
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	2b07      	cmp	r3, #7
 8011eac:	d802      	bhi.n	8011eb4 <keccak_squeeze+0x68>
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1e8      	bne.n	8011e86 <keccak_squeeze+0x3a>
    }
  }

  if(pos && outlen >= r-pos) {
 8011eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d054      	beq.n	8011f64 <keccak_squeeze+0x118>
 8011eba:	683a      	ldr	r2, [r7, #0]
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	68ba      	ldr	r2, [r7, #8]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d34e      	bcc.n	8011f64 <keccak_squeeze+0x118>
    for(i=0;i<(r-pos)/8;i++)
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	61fb      	str	r3, [r7, #28]
 8011eca:	e012      	b.n	8011ef2 <keccak_squeeze+0xa6>
      store64(out+8*i,s[pos/8+i]);
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	00db      	lsls	r3, r3, #3
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	18d1      	adds	r1, r2, r3
 8011ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed6:	08da      	lsrs	r2, r3, #3
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	4413      	add	r3, r2
 8011edc:	00db      	lsls	r3, r3, #3
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	4608      	mov	r0, r1
 8011ee8:	f7fc fd31 	bl	800e94e <store64>
    for(i=0;i<(r-pos)/8;i++)
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	61fb      	str	r3, [r7, #28]
 8011ef2:	683a      	ldr	r2, [r7, #0]
 8011ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	08db      	lsrs	r3, r3, #3
 8011efa:	69fa      	ldr	r2, [r7, #28]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d3e5      	bcc.n	8011ecc <keccak_squeeze+0x80>
    out += r-pos;
 8011f00:	683a      	ldr	r2, [r7, #0]
 8011f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	68fa      	ldr	r2, [r7, #12]
 8011f08:	4413      	add	r3, r2
 8011f0a:	60fb      	str	r3, [r7, #12]
    outlen -= r-pos;
 8011f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	1ad3      	subs	r3, r2, r3
 8011f12:	68ba      	ldr	r2, [r7, #8]
 8011f14:	4413      	add	r3, r2
 8011f16:	60bb      	str	r3, [r7, #8]
    pos = 0;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  while(outlen >= r) {
 8011f1c:	e022      	b.n	8011f64 <keccak_squeeze+0x118>
    KeccakF1600_StatePermute(s);
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f7fc fd42 	bl	800e9a8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8011f24:	2300      	movs	r3, #0
 8011f26:	61fb      	str	r3, [r7, #28]
 8011f28:	e00f      	b.n	8011f4a <keccak_squeeze+0xfe>
      store64(out+8*i,s[i]);
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	00db      	lsls	r3, r3, #3
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	18d1      	adds	r1, r2, r3
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	00db      	lsls	r3, r3, #3
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	4413      	add	r3, r2
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	4608      	mov	r0, r1
 8011f40:	f7fc fd05 	bl	800e94e <store64>
    for(i=0;i<r/8;i++)
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	3301      	adds	r3, #1
 8011f48:	61fb      	str	r3, [r7, #28]
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	08db      	lsrs	r3, r3, #3
 8011f4e:	69fa      	ldr	r2, [r7, #28]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d3ea      	bcc.n	8011f2a <keccak_squeeze+0xde>
    out += r;
 8011f54:	68fa      	ldr	r2, [r7, #12]
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	4413      	add	r3, r2
 8011f5a:	60fb      	str	r3, [r7, #12]
    outlen -= r;
 8011f5c:	68ba      	ldr	r2, [r7, #8]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	60bb      	str	r3, [r7, #8]
  while(outlen >= r) {
 8011f64:	68ba      	ldr	r2, [r7, #8]
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d2d8      	bcs.n	8011f1e <keccak_squeeze+0xd2>
  }

  if(!outlen)
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d101      	bne.n	8011f76 <keccak_squeeze+0x12a>
    return pos;
 8011f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f74:	e053      	b.n	801201e <keccak_squeeze+0x1d2>
  else if(!pos)
 8011f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d102      	bne.n	8011f82 <keccak_squeeze+0x136>
    KeccakF1600_StatePermute(s);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7fc fd13 	bl	800e9a8 <KeccakF1600_StatePermute>

  for(i=0;i<outlen/8;i++)
 8011f82:	2300      	movs	r3, #0
 8011f84:	61fb      	str	r3, [r7, #28]
 8011f86:	e012      	b.n	8011fae <keccak_squeeze+0x162>
    store64(out+8*i,s[pos/8+i]);
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	00db      	lsls	r3, r3, #3
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	18d1      	adds	r1, r2, r3
 8011f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f92:	08da      	lsrs	r2, r3, #3
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	4413      	add	r3, r2
 8011f98:	00db      	lsls	r3, r3, #3
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa2:	4608      	mov	r0, r1
 8011fa4:	f7fc fcd3 	bl	800e94e <store64>
  for(i=0;i<outlen/8;i++)
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	3301      	adds	r3, #1
 8011fac:	61fb      	str	r3, [r7, #28]
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	08db      	lsrs	r3, r3, #3
 8011fb2:	69fa      	ldr	r2, [r7, #28]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d3e7      	bcc.n	8011f88 <keccak_squeeze+0x13c>
  out += 8*i;
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	60fb      	str	r3, [r7, #12]
  outlen -= 8*i;
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	00db      	lsls	r3, r3, #3
 8011fc6:	68ba      	ldr	r2, [r7, #8]
 8011fc8:	1ad3      	subs	r3, r2, r3
 8011fca:	60bb      	str	r3, [r7, #8]
  pos += 8*i;
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	00db      	lsls	r3, r3, #3
 8011fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fd2:	4413      	add	r3, r2
 8011fd4:	62bb      	str	r3, [r7, #40]	; 0x28

  store64(t,s[pos/8]);
 8011fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd8:	f023 0307 	bic.w	r3, r3, #7
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	4413      	add	r3, r2
 8011fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe4:	f107 0114 	add.w	r1, r7, #20
 8011fe8:	4608      	mov	r0, r1
 8011fea:	f7fc fcb0 	bl	800e94e <store64>
  for(i=0;i<outlen;i++)
 8011fee:	2300      	movs	r3, #0
 8011ff0:	61fb      	str	r3, [r7, #28]
 8011ff2:	e00b      	b.n	801200c <keccak_squeeze+0x1c0>
    out[i] = t[i];
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	f107 0114 	add.w	r1, r7, #20
 8011ffe:	69fa      	ldr	r2, [r7, #28]
 8012000:	440a      	add	r2, r1
 8012002:	7812      	ldrb	r2, [r2, #0]
 8012004:	701a      	strb	r2, [r3, #0]
  for(i=0;i<outlen;i++)
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	3301      	adds	r3, #1
 801200a:	61fb      	str	r3, [r7, #28]
 801200c:	69fa      	ldr	r2, [r7, #28]
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	429a      	cmp	r2, r3
 8012012:	d3ef      	bcc.n	8011ff4 <keccak_squeeze+0x1a8>
  pos += outlen;
 8012014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	4413      	add	r3, r2
 801201a:	62bb      	str	r3, [r7, #40]	; 0x28
  return pos;
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801201e:	4618      	mov	r0, r3
 8012020:	3720      	adds	r7, #32
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 8012026:	b580      	push	{r7, lr}
 8012028:	b082      	sub	sp, #8
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7ff fd22 	bl	8011a78 <keccak_init>
}
 8012034:	bf00      	nop
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af02      	add	r7, sp, #8
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 8012048:	68f8      	ldr	r0, [r7, #12]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	2188      	movs	r1, #136	; 0x88
 8012058:	f7ff fd2f 	bl	8011aba <keccak_absorb>
 801205c:	4602      	mov	r2, r0
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012064:	bf00      	nop
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 801207c:	231f      	movs	r3, #31
 801207e:	2188      	movs	r1, #136	; 0x88
 8012080:	f7ff fe63 	bl	8011d4a <keccak_finalize>
  state->pos = 0;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 801208c:	bf00      	nop
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	60f8      	str	r0, [r7, #12]
 801209c:	60b9      	str	r1, [r7, #8]
 801209e:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	2388      	movs	r3, #136	; 0x88
 80120a4:	68b9      	ldr	r1, [r7, #8]
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f7ff fe9e 	bl	8011de8 <keccak_squeezeblocks>
}
 80120ac:	bf00      	nop
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <pqcrystals_fips202_ref_shake256_squeeze>:
*              - size_t outlen :  number of bytes to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b086      	sub	sp, #24
 80120b8:	af02      	add	r7, sp, #8
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80120c8:	9300      	str	r3, [sp, #0]
 80120ca:	2388      	movs	r3, #136	; 0x88
 80120cc:	68b9      	ldr	r1, [r7, #8]
 80120ce:	68f8      	ldr	r0, [r7, #12]
 80120d0:	f7ff febc 	bl	8011e4c <keccak_squeeze>
 80120d4:	4602      	mov	r2, r0
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80120dc:	bf00      	nop
 80120de:	3710      	adds	r7, #16
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <pqcrystals_fips202_ref_shake256>:
*              - size_t outlen:     requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen:      length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b0b8      	sub	sp, #224	; 0xe0
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	607a      	str	r2, [r7, #4]
 80120f0:	603b      	str	r3, [r7, #0]
  keccak_state state;

  shake256_init(&state);
 80120f2:	f107 0310 	add.w	r3, r7, #16
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7ff ff95 	bl	8012026 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, in, inlen);
 80120fc:	f107 0310 	add.w	r3, r7, #16
 8012100:	683a      	ldr	r2, [r7, #0]
 8012102:	6879      	ldr	r1, [r7, #4]
 8012104:	4618      	mov	r0, r3
 8012106:	f7ff ff99 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 801210a:	f107 0310 	add.w	r3, r7, #16
 801210e:	4618      	mov	r0, r3
 8012110:	f7ff ffac 	bl	801206c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(out, outlen, &state);
 8012114:	f107 0310 	add.w	r3, r7, #16
 8012118:	461a      	mov	r2, r3
 801211a:	68b9      	ldr	r1, [r7, #8]
 801211c:	68f8      	ldr	r0, [r7, #12]
 801211e:	f7ff ffc9 	bl	80120b4 <pqcrystals_fips202_ref_shake256_squeeze>
}
 8012122:	bf00      	nop
 8012124:	37e0      	adds	r7, #224	; 0xe0
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
	...

0801212c <pqcrystals_dilithium2aes_r_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N_]) {
 801212c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012130:	b088      	sub	sp, #32
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int32_t zeta, t;

  k = 0;
 8012136:	2300      	movs	r3, #0
 8012138:	613b      	str	r3, [r7, #16]
  for(len = 128; len > 0; len >>= 1) {
 801213a:	2380      	movs	r3, #128	; 0x80
 801213c:	61fb      	str	r3, [r7, #28]
 801213e:	e056      	b.n	80121ee <pqcrystals_dilithium2aes_r_ref_ntt+0xc2>
    for(start = 0; start < N_; start = j + len) {
 8012140:	2300      	movs	r3, #0
 8012142:	61bb      	str	r3, [r7, #24]
 8012144:	e04d      	b.n	80121e2 <pqcrystals_dilithium2aes_r_ref_ntt+0xb6>
      zeta = zetas[++k];
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	3301      	adds	r3, #1
 801214a:	613b      	str	r3, [r7, #16]
 801214c:	4a2c      	ldr	r2, [pc, #176]	; (8012200 <pqcrystals_dilithium2aes_r_ref_ntt+0xd4>)
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012154:	60fb      	str	r3, [r7, #12]
      for(j = start; j < start + len; ++j) {
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	617b      	str	r3, [r7, #20]
 801215a:	e038      	b.n	80121ce <pqcrystals_dilithium2aes_r_ref_ntt+0xa2>
        t = montgomery_reduce((int64_t)zeta * a[j + len]);
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	17da      	asrs	r2, r3, #31
 8012160:	4698      	mov	r8, r3
 8012162:	4691      	mov	r9, r2
 8012164:	697a      	ldr	r2, [r7, #20]
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	4413      	add	r3, r2
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	4413      	add	r3, r2
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	17da      	asrs	r2, r3, #31
 8012174:	469a      	mov	sl, r3
 8012176:	4693      	mov	fp, r2
 8012178:	fb0a f209 	mul.w	r2, sl, r9
 801217c:	fb08 f30b 	mul.w	r3, r8, fp
 8012180:	4413      	add	r3, r2
 8012182:	fba8 450a 	umull	r4, r5, r8, sl
 8012186:	442b      	add	r3, r5
 8012188:	461d      	mov	r5, r3
 801218a:	4620      	mov	r0, r4
 801218c:	4629      	mov	r1, r5
 801218e:	f002 fd73 	bl	8014c78 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012192:	60b8      	str	r0, [r7, #8]
        a[j + len] = a[j] - t;
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	4413      	add	r3, r2
 801219c:	6819      	ldr	r1, [r3, #0]
 801219e:	697a      	ldr	r2, [r7, #20]
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	4413      	add	r3, r2
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	4413      	add	r3, r2
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	1a8a      	subs	r2, r1, r2
 80121ae:	601a      	str	r2, [r3, #0]
        a[j] = a[j] + t;
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	4413      	add	r3, r2
 80121b8:	6819      	ldr	r1, [r3, #0]
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	009b      	lsls	r3, r3, #2
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	4413      	add	r3, r2
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	440a      	add	r2, r1
 80121c6:	601a      	str	r2, [r3, #0]
      for(j = start; j < start + len; ++j) {
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	3301      	adds	r3, #1
 80121cc:	617b      	str	r3, [r7, #20]
 80121ce:	69ba      	ldr	r2, [r7, #24]
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	4413      	add	r3, r2
 80121d4:	697a      	ldr	r2, [r7, #20]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d3c0      	bcc.n	801215c <pqcrystals_dilithium2aes_r_ref_ntt+0x30>
    for(start = 0; start < N_; start = j + len) {
 80121da:	697a      	ldr	r2, [r7, #20]
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	4413      	add	r3, r2
 80121e0:	61bb      	str	r3, [r7, #24]
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	2bff      	cmp	r3, #255	; 0xff
 80121e6:	d9ae      	bls.n	8012146 <pqcrystals_dilithium2aes_r_ref_ntt+0x1a>
  for(len = 128; len > 0; len >>= 1) {
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	085b      	lsrs	r3, r3, #1
 80121ec:	61fb      	str	r3, [r7, #28]
 80121ee:	69fb      	ldr	r3, [r7, #28]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d1a5      	bne.n	8012140 <pqcrystals_dilithium2aes_r_ref_ntt+0x14>
      }
    }
  }
}
 80121f4:	bf00      	nop
 80121f6:	bf00      	nop
 80121f8:	3720      	adds	r7, #32
 80121fa:	46bd      	mov	sp, r7
 80121fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012200:	08016580 	.word	0x08016580

08012204 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N_]) {
 8012204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012208:	b091      	sub	sp, #68	; 0x44
 801220a:	af00      	add	r7, sp, #0
 801220c:	61f8      	str	r0, [r7, #28]
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
 801220e:	f24a 33fa 	movw	r3, #41978	; 0xa3fa
 8012212:	62fb      	str	r3, [r7, #44]	; 0x2c

  k = 256;
 8012214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012218:	633b      	str	r3, [r7, #48]	; 0x30
  for(len = 1; len < N_; len <<= 1) {
 801221a:	2301      	movs	r3, #1
 801221c:	63bb      	str	r3, [r7, #56]	; 0x38
 801221e:	e072      	b.n	8012306 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x102>
    for(start = 0; start < N_; start = j + len) {
 8012220:	2300      	movs	r3, #0
 8012222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012224:	e069      	b.n	80122fa <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xf6>
      zeta = -zetas[--k];
 8012226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012228:	3b01      	subs	r3, #1
 801222a:	633b      	str	r3, [r7, #48]	; 0x30
 801222c:	4a51      	ldr	r2, [pc, #324]	; (8012374 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x170>)
 801222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012234:	425b      	negs	r3, r3
 8012236:	62bb      	str	r3, [r7, #40]	; 0x28
      for(j = start; j < start + len; ++j) {
 8012238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801223a:	637b      	str	r3, [r7, #52]	; 0x34
 801223c:	e053      	b.n	80122e6 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xe2>
        t = a[j];
 801223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012240:	009b      	lsls	r3, r3, #2
 8012242:	69fa      	ldr	r2, [r7, #28]
 8012244:	4413      	add	r3, r2
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	627b      	str	r3, [r7, #36]	; 0x24
        a[j] = t + a[j + len];
 801224a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224e:	4413      	add	r3, r2
 8012250:	009b      	lsls	r3, r3, #2
 8012252:	69fa      	ldr	r2, [r7, #28]
 8012254:	4413      	add	r3, r2
 8012256:	6819      	ldr	r1, [r3, #0]
 8012258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801225a:	009a      	lsls	r2, r3, #2
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	441a      	add	r2, r3
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	440b      	add	r3, r1
 8012264:	6013      	str	r3, [r2, #0]
        a[j + len] = t - a[j + len];
 8012266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226a:	4413      	add	r3, r2
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	69fa      	ldr	r2, [r7, #28]
 8012270:	4413      	add	r3, r2
 8012272:	6819      	ldr	r1, [r3, #0]
 8012274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012278:	4413      	add	r3, r2
 801227a:	009a      	lsls	r2, r3, #2
 801227c:	69fb      	ldr	r3, [r7, #28]
 801227e:	441a      	add	r2, r3
 8012280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012282:	1a5b      	subs	r3, r3, r1
 8012284:	6013      	str	r3, [r2, #0]
        a[j + len] = montgomery_reduce((int64_t)zeta * a[j + len]);
 8012286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012288:	17da      	asrs	r2, r3, #31
 801228a:	613b      	str	r3, [r7, #16]
 801228c:	617a      	str	r2, [r7, #20]
 801228e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	4413      	add	r3, r2
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	69fa      	ldr	r2, [r7, #28]
 8012298:	4413      	add	r3, r2
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	17da      	asrs	r2, r3, #31
 801229e:	60bb      	str	r3, [r7, #8]
 80122a0:	60fa      	str	r2, [r7, #12]
 80122a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80122a6:	460b      	mov	r3, r1
 80122a8:	68ba      	ldr	r2, [r7, #8]
 80122aa:	fb02 f203 	mul.w	r2, r2, r3
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80122b4:	4601      	mov	r1, r0
 80122b6:	fb01 f303 	mul.w	r3, r1, r3
 80122ba:	4413      	add	r3, r2
 80122bc:	693a      	ldr	r2, [r7, #16]
 80122be:	68b9      	ldr	r1, [r7, #8]
 80122c0:	fba2 ab01 	umull	sl, fp, r2, r1
 80122c4:	445b      	add	r3, fp
 80122c6:	469b      	mov	fp, r3
 80122c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122cc:	4413      	add	r3, r2
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	69fa      	ldr	r2, [r7, #28]
 80122d2:	18d4      	adds	r4, r2, r3
 80122d4:	4650      	mov	r0, sl
 80122d6:	4659      	mov	r1, fp
 80122d8:	f002 fcce 	bl	8014c78 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 80122dc:	4603      	mov	r3, r0
 80122de:	6023      	str	r3, [r4, #0]
      for(j = start; j < start + len; ++j) {
 80122e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e2:	3301      	adds	r3, #1
 80122e4:	637b      	str	r3, [r7, #52]	; 0x34
 80122e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ea:	4413      	add	r3, r2
 80122ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d3a5      	bcc.n	801223e <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x3a>
    for(start = 0; start < N_; start = j + len) {
 80122f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f6:	4413      	add	r3, r2
 80122f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fc:	2bff      	cmp	r3, #255	; 0xff
 80122fe:	d992      	bls.n	8012226 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x22>
  for(len = 1; len < N_; len <<= 1) {
 8012300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	63bb      	str	r3, [r7, #56]	; 0x38
 8012306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012308:	2bff      	cmp	r3, #255	; 0xff
 801230a:	d989      	bls.n	8012220 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x1c>
      }
    }
  }

  for(j = 0; j < N_; ++j) {
 801230c:	2300      	movs	r3, #0
 801230e:	637b      	str	r3, [r7, #52]	; 0x34
 8012310:	e026      	b.n	8012360 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x15c>
    a[j] = montgomery_reduce((int64_t)f * a[j]);
 8012312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012314:	17da      	asrs	r2, r3, #31
 8012316:	461d      	mov	r5, r3
 8012318:	4616      	mov	r6, r2
 801231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	69fa      	ldr	r2, [r7, #28]
 8012320:	4413      	add	r3, r2
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	17da      	asrs	r2, r3, #31
 8012326:	603b      	str	r3, [r7, #0]
 8012328:	607a      	str	r2, [r7, #4]
 801232a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801232e:	4603      	mov	r3, r0
 8012330:	fb03 f206 	mul.w	r2, r3, r6
 8012334:	460b      	mov	r3, r1
 8012336:	fb05 f303 	mul.w	r3, r5, r3
 801233a:	4413      	add	r3, r2
 801233c:	4602      	mov	r2, r0
 801233e:	fba5 8902 	umull	r8, r9, r5, r2
 8012342:	444b      	add	r3, r9
 8012344:	4699      	mov	r9, r3
 8012346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	69fa      	ldr	r2, [r7, #28]
 801234c:	18d4      	adds	r4, r2, r3
 801234e:	4640      	mov	r0, r8
 8012350:	4649      	mov	r1, r9
 8012352:	f002 fc91 	bl	8014c78 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012356:	4603      	mov	r3, r0
 8012358:	6023      	str	r3, [r4, #0]
  for(j = 0; j < N_; ++j) {
 801235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801235c:	3301      	adds	r3, #1
 801235e:	637b      	str	r3, [r7, #52]	; 0x34
 8012360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012362:	2bff      	cmp	r3, #255	; 0xff
 8012364:	d9d5      	bls.n	8012312 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x10e>
  }
}
 8012366:	bf00      	nop
 8012368:	bf00      	nop
 801236a:	3744      	adds	r7, #68	; 0x44
 801236c:	46bd      	mov	sp, r7
 801236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012372:	bf00      	nop
 8012374:	08016580 	.word	0x08016580

08012378 <pqcrystals_dilithium2aes_r_ref_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b086      	sub	sp, #24
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012384:	2300      	movs	r3, #0
 8012386:	617b      	str	r3, [r7, #20]
 8012388:	e00a      	b.n	80123a0 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x28>
    pk[i] = rho[i];
 801238a:	68ba      	ldr	r2, [r7, #8]
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	441a      	add	r2, r3
 8012390:	68f9      	ldr	r1, [r7, #12]
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	440b      	add	r3, r1
 8012396:	7812      	ldrb	r2, [r2, #0]
 8012398:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	3301      	adds	r3, #1
 801239e:	617b      	str	r3, [r7, #20]
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	2b1f      	cmp	r3, #31
 80123a4:	d9f1      	bls.n	801238a <pqcrystals_dilithium2aes_r_ref_pack_pk+0x12>
  pk += SEEDBYTES;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	3320      	adds	r3, #32
 80123aa:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 80123ac:	2300      	movs	r3, #0
 80123ae:	617b      	str	r3, [r7, #20]
 80123b0:	e011      	b.n	80123d6 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x5e>
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 80123b2:	697a      	ldr	r2, [r7, #20]
 80123b4:	4613      	mov	r3, r2
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	4413      	add	r3, r2
 80123ba:	019b      	lsls	r3, r3, #6
 80123bc:	461a      	mov	r2, r3
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	1898      	adds	r0, r3, r2
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	029b      	lsls	r3, r3, #10
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	4413      	add	r3, r2
 80123ca:	4619      	mov	r1, r3
 80123cc:	f000 fed5 	bl	801317a <pqcrystals_dilithium2aes_r_ref_polyt1_pack>
  for(i = 0; i < K; ++i)
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	3301      	adds	r3, #1
 80123d4:	617b      	str	r3, [r7, #20]
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	2b03      	cmp	r3, #3
 80123da:	d9ea      	bls.n	80123b2 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x3a>
}
 80123dc:	bf00      	nop
 80123de:	bf00      	nop
 80123e0:	3718      	adds	r7, #24
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <pqcrystals_dilithium2aes_r_ref_unpack_pk>:
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void unpack_pk(uint8_t rho[SEEDBYTES],
               polyveck *t1,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b086      	sub	sp, #24
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	60f8      	str	r0, [r7, #12]
 80123ee:	60b9      	str	r1, [r7, #8]
 80123f0:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80123f2:	2300      	movs	r3, #0
 80123f4:	617b      	str	r3, [r7, #20]
 80123f6:	e00a      	b.n	801240e <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x28>
    rho[i] = pk[i];
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	441a      	add	r2, r3
 80123fe:	68f9      	ldr	r1, [r7, #12]
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	440b      	add	r3, r1
 8012404:	7812      	ldrb	r2, [r2, #0]
 8012406:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	3301      	adds	r3, #1
 801240c:	617b      	str	r3, [r7, #20]
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	2b1f      	cmp	r3, #31
 8012412:	d9f1      	bls.n	80123f8 <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x12>
  pk += SEEDBYTES;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	3320      	adds	r3, #32
 8012418:	607b      	str	r3, [r7, #4]

  for(i = 0; i < K; ++i)
 801241a:	2300      	movs	r3, #0
 801241c:	617b      	str	r3, [r7, #20]
 801241e:	e011      	b.n	8012444 <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x5e>
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	029b      	lsls	r3, r3, #10
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	18d0      	adds	r0, r2, r3
 8012428:	697a      	ldr	r2, [r7, #20]
 801242a:	4613      	mov	r3, r2
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	4413      	add	r3, r2
 8012430:	019b      	lsls	r3, r3, #6
 8012432:	461a      	mov	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4413      	add	r3, r2
 8012438:	4619      	mov	r1, r3
 801243a:	f000 ff20 	bl	801327e <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>
  for(i = 0; i < K; ++i)
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	3301      	adds	r3, #1
 8012442:	617b      	str	r3, [r7, #20]
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	2b03      	cmp	r3, #3
 8012448:	d9ea      	bls.n	8012420 <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x3a>
}
 801244a:	bf00      	nop
 801244c:	bf00      	nop
 801244e:	3718      	adds	r7, #24
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <pqcrystals_dilithium2aes_r_ref_pack_sk>:
             const uint8_t rho[SEEDBYTES],
			 const uint8_t rhoprime[SEEDBYTES],
             const uint8_t tr[CRHBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012462:	2300      	movs	r3, #0
 8012464:	617b      	str	r3, [r7, #20]
 8012466:	e00a      	b.n	801247e <pqcrystals_dilithium2aes_r_ref_pack_sk+0x2a>
    sk[i] = rho[i];
 8012468:	68ba      	ldr	r2, [r7, #8]
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	441a      	add	r2, r3
 801246e:	68f9      	ldr	r1, [r7, #12]
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	440b      	add	r3, r1
 8012474:	7812      	ldrb	r2, [r2, #0]
 8012476:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	3301      	adds	r3, #1
 801247c:	617b      	str	r3, [r7, #20]
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	2b1f      	cmp	r3, #31
 8012482:	d9f1      	bls.n	8012468 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x14>
  sk += SEEDBYTES;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	3320      	adds	r3, #32
 8012488:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 801248a:	2300      	movs	r3, #0
 801248c:	617b      	str	r3, [r7, #20]
 801248e:	e00a      	b.n	80124a6 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x52>
    sk[i] = rhoprime[i];
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	441a      	add	r2, r3
 8012496:	68f9      	ldr	r1, [r7, #12]
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	440b      	add	r3, r1
 801249c:	7812      	ldrb	r2, [r2, #0]
 801249e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	3301      	adds	r3, #1
 80124a4:	617b      	str	r3, [r7, #20]
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	2b1f      	cmp	r3, #31
 80124aa:	d9f1      	bls.n	8012490 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x3c>
  sk += SEEDBYTES;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	3320      	adds	r3, #32
 80124b0:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 80124b2:	2300      	movs	r3, #0
 80124b4:	617b      	str	r3, [r7, #20]
 80124b6:	e00a      	b.n	80124ce <pqcrystals_dilithium2aes_r_ref_pack_sk+0x7a>
    sk[i] = key[i];
 80124b8:	6a3a      	ldr	r2, [r7, #32]
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	441a      	add	r2, r3
 80124be:	68f9      	ldr	r1, [r7, #12]
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	440b      	add	r3, r1
 80124c4:	7812      	ldrb	r2, [r2, #0]
 80124c6:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	3301      	adds	r3, #1
 80124cc:	617b      	str	r3, [r7, #20]
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	2b1f      	cmp	r3, #31
 80124d2:	d9f1      	bls.n	80124b8 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x64>
  sk += SEEDBYTES;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	3320      	adds	r3, #32
 80124d8:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < CRHBYTES; ++i)
 80124da:	2300      	movs	r3, #0
 80124dc:	617b      	str	r3, [r7, #20]
 80124de:	e00a      	b.n	80124f6 <pqcrystals_dilithium2aes_r_ref_pack_sk+0xa2>
    sk[i] = tr[i];
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	441a      	add	r2, r3
 80124e6:	68f9      	ldr	r1, [r7, #12]
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	440b      	add	r3, r1
 80124ec:	7812      	ldrb	r2, [r2, #0]
 80124ee:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	3301      	adds	r3, #1
 80124f4:	617b      	str	r3, [r7, #20]
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	2b2f      	cmp	r3, #47	; 0x2f
 80124fa:	d9f1      	bls.n	80124e0 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x8c>
  sk += CRHBYTES;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	3330      	adds	r3, #48	; 0x30
 8012500:	60fb      	str	r3, [r7, #12]
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
  sk += K*POLYETA_PACKEDBYTES;
*/


  for(i = 0; i < K; ++i)
 8012502:	2300      	movs	r3, #0
 8012504:	617b      	str	r3, [r7, #20]
 8012506:	e010      	b.n	801252a <pqcrystals_dilithium2aes_r_ref_pack_sk+0xd6>
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 801250e:	fb02 f303 	mul.w	r3, r2, r3
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	18d0      	adds	r0, r2, r3
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	029b      	lsls	r3, r3, #10
 801251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801251c:	4413      	add	r3, r2
 801251e:	4619      	mov	r1, r3
 8012520:	f000 ff36 	bl	8013390 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>
  for(i = 0; i < K; ++i)
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	3301      	adds	r3, #1
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	2b03      	cmp	r3, #3
 801252e:	d9eb      	bls.n	8012508 <pqcrystals_dilithium2aes_r_ref_pack_sk+0xb4>
}
 8012530:	bf00      	nop
 8012532:	bf00      	nop
 8012534:	3718      	adds	r7, #24
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <pqcrystals_dilithium2aes_r_ref_upack_sk>:
			   uint8_t rhoprime[SEEDBYTES],
               uint8_t tr[CRHBYTES],
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 801253a:	b580      	push	{r7, lr}
 801253c:	b086      	sub	sp, #24
 801253e:	af00      	add	r7, sp, #0
 8012540:	60f8      	str	r0, [r7, #12]
 8012542:	60b9      	str	r1, [r7, #8]
 8012544:	607a      	str	r2, [r7, #4]
 8012546:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012548:	2300      	movs	r3, #0
 801254a:	617b      	str	r3, [r7, #20]
 801254c:	e00a      	b.n	8012564 <pqcrystals_dilithium2aes_r_ref_upack_sk+0x2a>
    rho[i] = sk[i];
 801254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	441a      	add	r2, r3
 8012554:	68f9      	ldr	r1, [r7, #12]
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	440b      	add	r3, r1
 801255a:	7812      	ldrb	r2, [r2, #0]
 801255c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	3301      	adds	r3, #1
 8012562:	617b      	str	r3, [r7, #20]
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2b1f      	cmp	r3, #31
 8012568:	d9f1      	bls.n	801254e <pqcrystals_dilithium2aes_r_ref_upack_sk+0x14>
  sk += SEEDBYTES;
 801256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256c:	3320      	adds	r3, #32
 801256e:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 8012570:	2300      	movs	r3, #0
 8012572:	617b      	str	r3, [r7, #20]
 8012574:	e00a      	b.n	801258c <pqcrystals_dilithium2aes_r_ref_upack_sk+0x52>
    rhoprime[i] = sk[i];
 8012576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	441a      	add	r2, r3
 801257c:	68b9      	ldr	r1, [r7, #8]
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	440b      	add	r3, r1
 8012582:	7812      	ldrb	r2, [r2, #0]
 8012584:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	3301      	adds	r3, #1
 801258a:	617b      	str	r3, [r7, #20]
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	2b1f      	cmp	r3, #31
 8012590:	d9f1      	bls.n	8012576 <pqcrystals_dilithium2aes_r_ref_upack_sk+0x3c>
  sk += SEEDBYTES;
 8012592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012594:	3320      	adds	r3, #32
 8012596:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 8012598:	2300      	movs	r3, #0
 801259a:	617b      	str	r3, [r7, #20]
 801259c:	e00a      	b.n	80125b4 <pqcrystals_dilithium2aes_r_ref_upack_sk+0x7a>
    key[i] = sk[i];
 801259e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	441a      	add	r2, r3
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	440b      	add	r3, r1
 80125aa:	7812      	ldrb	r2, [r2, #0]
 80125ac:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	3301      	adds	r3, #1
 80125b2:	617b      	str	r3, [r7, #20]
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	2b1f      	cmp	r3, #31
 80125b8:	d9f1      	bls.n	801259e <pqcrystals_dilithium2aes_r_ref_upack_sk+0x64>
  sk += SEEDBYTES;
 80125ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125bc:	3320      	adds	r3, #32
 80125be:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < CRHBYTES; ++i)
 80125c0:	2300      	movs	r3, #0
 80125c2:	617b      	str	r3, [r7, #20]
 80125c4:	e00a      	b.n	80125dc <pqcrystals_dilithium2aes_r_ref_upack_sk+0xa2>
    tr[i] = sk[i];
 80125c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	441a      	add	r2, r3
 80125cc:	6879      	ldr	r1, [r7, #4]
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	440b      	add	r3, r1
 80125d2:	7812      	ldrb	r2, [r2, #0]
 80125d4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	3301      	adds	r3, #1
 80125da:	617b      	str	r3, [r7, #20]
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	2b2f      	cmp	r3, #47	; 0x2f
 80125e0:	d9f1      	bls.n	80125c6 <pqcrystals_dilithium2aes_r_ref_upack_sk+0x8c>
  sk += CRHBYTES;
 80125e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e4:	3330      	adds	r3, #48	; 0x30
 80125e6:	627b      	str	r3, [r7, #36]	; 0x24

  for(i=0; i < K; ++i)
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
  sk += K*POLYETA_PACKEDBYTES;
*/
  for(i=0; i < K; ++i)
 80125e8:	2300      	movs	r3, #0
 80125ea:	617b      	str	r3, [r7, #20]
 80125ec:	e010      	b.n	8012610 <pqcrystals_dilithium2aes_r_ref_upack_sk+0xd6>
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	029b      	lsls	r3, r3, #10
 80125f2:	6a3a      	ldr	r2, [r7, #32]
 80125f4:	18d0      	adds	r0, r2, r3
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80125fc:	fb02 f303 	mul.w	r3, r2, r3
 8012600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012602:	4413      	add	r3, r2
 8012604:	4619      	mov	r1, r3
 8012606:	f001 f884 	bl	8013712 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>
  for(i=0; i < K; ++i)
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	3301      	adds	r3, #1
 801260e:	617b      	str	r3, [r7, #20]
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	2b03      	cmp	r3, #3
 8012614:	d9eb      	bls.n	80125ee <pqcrystals_dilithium2aes_r_ref_upack_sk+0xb4>
}
 8012616:	bf00      	nop
 8012618:	bf00      	nop
 801261a:	3718      	adds	r7, #24
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <pqcrystals_dilithium2aes_r_ref_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b088      	sub	sp, #32
 8012624:	af00      	add	r7, sp, #0
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
 801262c:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
 801262e:	2300      	movs	r3, #0
 8012630:	61fb      	str	r3, [r7, #28]
 8012632:	e00a      	b.n	801264a <pqcrystals_dilithium2aes_r_ref_pack_sig+0x2a>
    sig[i] = c[i];
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	441a      	add	r2, r3
 801263a:	68f9      	ldr	r1, [r7, #12]
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	440b      	add	r3, r1
 8012640:	7812      	ldrb	r2, [r2, #0]
 8012642:	701a      	strb	r2, [r3, #0]
  for(i=0; i < SEEDBYTES; ++i)
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	3301      	adds	r3, #1
 8012648:	61fb      	str	r3, [r7, #28]
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	2b1f      	cmp	r3, #31
 801264e:	d9f1      	bls.n	8012634 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x14>
  sig += SEEDBYTES;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	3320      	adds	r3, #32
 8012654:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 8012656:	2300      	movs	r3, #0
 8012658:	61fb      	str	r3, [r7, #28]
 801265a:	e011      	b.n	8012680 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x60>
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 801265c:	69fa      	ldr	r2, [r7, #28]
 801265e:	4613      	mov	r3, r2
 8012660:	00db      	lsls	r3, r3, #3
 8012662:	4413      	add	r3, r2
 8012664:	019b      	lsls	r3, r3, #6
 8012666:	461a      	mov	r2, r3
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	1898      	adds	r0, r3, r2
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	029b      	lsls	r3, r3, #10
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	4413      	add	r3, r2
 8012674:	4619      	mov	r1, r3
 8012676:	f001 faf4 	bl	8013c62 <pqcrystals_dilithium2aes_r_ref_polyz_pack>
  for(i = 0; i < L; ++i)
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	3301      	adds	r3, #1
 801267e:	61fb      	str	r3, [r7, #28]
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	2b03      	cmp	r3, #3
 8012684:	d9ea      	bls.n	801265c <pqcrystals_dilithium2aes_r_ref_pack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801268c:	60fb      	str	r3, [r7, #12]

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
 801268e:	2300      	movs	r3, #0
 8012690:	61fb      	str	r3, [r7, #28]
 8012692:	e007      	b.n	80126a4 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x84>
    sig[i] = 0;
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	69fb      	ldr	r3, [r7, #28]
 8012698:	4413      	add	r3, r2
 801269a:	2200      	movs	r2, #0
 801269c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < OMEGA + K; ++i)
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	3301      	adds	r3, #1
 80126a2:	61fb      	str	r3, [r7, #28]
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	2b53      	cmp	r3, #83	; 0x53
 80126a8:	d9f4      	bls.n	8012694 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x74>

  k = 0;
 80126aa:	2300      	movs	r3, #0
 80126ac:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 80126ae:	2300      	movs	r3, #0
 80126b0:	61fb      	str	r3, [r7, #28]
 80126b2:	e023      	b.n	80126fc <pqcrystals_dilithium2aes_r_ref_pack_sig+0xdc>
    for(j = 0; j < N_; ++j)
 80126b4:	2300      	movs	r3, #0
 80126b6:	61bb      	str	r3, [r7, #24]
 80126b8:	e013      	b.n	80126e2 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xc2>
      if(h->vec[i].coeffs[j] != 0)
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	69fa      	ldr	r2, [r7, #28]
 80126be:	0211      	lsls	r1, r2, #8
 80126c0:	69ba      	ldr	r2, [r7, #24]
 80126c2:	440a      	add	r2, r1
 80126c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d007      	beq.n	80126dc <pqcrystals_dilithium2aes_r_ref_pack_sig+0xbc>
        sig[k++] = j;
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	1c5a      	adds	r2, r3, #1
 80126d0:	617a      	str	r2, [r7, #20]
 80126d2:	68fa      	ldr	r2, [r7, #12]
 80126d4:	4413      	add	r3, r2
 80126d6:	69ba      	ldr	r2, [r7, #24]
 80126d8:	b2d2      	uxtb	r2, r2
 80126da:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < N_; ++j)
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	3301      	adds	r3, #1
 80126e0:	61bb      	str	r3, [r7, #24]
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	2bff      	cmp	r3, #255	; 0xff
 80126e6:	d9e8      	bls.n	80126ba <pqcrystals_dilithium2aes_r_ref_pack_sig+0x9a>

    sig[OMEGA + i] = k;
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	3350      	adds	r3, #80	; 0x50
 80126ec:	68fa      	ldr	r2, [r7, #12]
 80126ee:	4413      	add	r3, r2
 80126f0:	697a      	ldr	r2, [r7, #20]
 80126f2:	b2d2      	uxtb	r2, r2
 80126f4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < K; ++i) {
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	3301      	adds	r3, #1
 80126fa:	61fb      	str	r3, [r7, #28]
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	2b03      	cmp	r3, #3
 8012700:	d9d8      	bls.n	80126b4 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x94>
  }
}
 8012702:	bf00      	nop
 8012704:	bf00      	nop
 8012706:	3720      	adds	r7, #32
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <pqcrystals_dilithium2aes_r_ref_unpack_sig>:
**************************************************/
int unpack_sig(uint8_t c[SEEDBYTES],
               polyvecl *z,
               polyveck *h,
               const uint8_t sig[CRYPTO_BYTES])
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b088      	sub	sp, #32
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
 8012718:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i = 0; i < SEEDBYTES; ++i)
 801271a:	2300      	movs	r3, #0
 801271c:	61fb      	str	r3, [r7, #28]
 801271e:	e00a      	b.n	8012736 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x2a>
    c[i] = sig[i];
 8012720:	683a      	ldr	r2, [r7, #0]
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	441a      	add	r2, r3
 8012726:	68f9      	ldr	r1, [r7, #12]
 8012728:	69fb      	ldr	r3, [r7, #28]
 801272a:	440b      	add	r3, r1
 801272c:	7812      	ldrb	r2, [r2, #0]
 801272e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	3301      	adds	r3, #1
 8012734:	61fb      	str	r3, [r7, #28]
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	2b1f      	cmp	r3, #31
 801273a:	d9f1      	bls.n	8012720 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x14>
  sig += SEEDBYTES;
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	3320      	adds	r3, #32
 8012740:	603b      	str	r3, [r7, #0]

  for(i = 0; i < L; ++i)
 8012742:	2300      	movs	r3, #0
 8012744:	61fb      	str	r3, [r7, #28]
 8012746:	e011      	b.n	801276c <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x60>
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
 8012748:	69fb      	ldr	r3, [r7, #28]
 801274a:	029b      	lsls	r3, r3, #10
 801274c:	68ba      	ldr	r2, [r7, #8]
 801274e:	18d0      	adds	r0, r2, r3
 8012750:	69fa      	ldr	r2, [r7, #28]
 8012752:	4613      	mov	r3, r2
 8012754:	00db      	lsls	r3, r3, #3
 8012756:	4413      	add	r3, r2
 8012758:	019b      	lsls	r3, r3, #6
 801275a:	461a      	mov	r2, r3
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	4413      	add	r3, r2
 8012760:	4619      	mov	r1, r3
 8012762:	f001 fb5d 	bl	8013e20 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
  for(i = 0; i < L; ++i)
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	3301      	adds	r3, #1
 801276a:	61fb      	str	r3, [r7, #28]
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	2b03      	cmp	r3, #3
 8012770:	d9ea      	bls.n	8012748 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012778:	603b      	str	r3, [r7, #0]

  /* Decode h */
  k = 0;
 801277a:	2300      	movs	r3, #0
 801277c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 801277e:	2300      	movs	r3, #0
 8012780:	61fb      	str	r3, [r7, #28]
 8012782:	e057      	b.n	8012834 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x128>
    for(j = 0; j < N_; ++j)
 8012784:	2300      	movs	r3, #0
 8012786:	61bb      	str	r3, [r7, #24]
 8012788:	e00a      	b.n	80127a0 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x94>
      h->vec[i].coeffs[j] = 0;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	69fa      	ldr	r2, [r7, #28]
 801278e:	0211      	lsls	r1, r2, #8
 8012790:	69ba      	ldr	r2, [r7, #24]
 8012792:	440a      	add	r2, r1
 8012794:	2100      	movs	r1, #0
 8012796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = 0; j < N_; ++j)
 801279a:	69bb      	ldr	r3, [r7, #24]
 801279c:	3301      	adds	r3, #1
 801279e:	61bb      	str	r3, [r7, #24]
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	2bff      	cmp	r3, #255	; 0xff
 80127a4:	d9f1      	bls.n	801278a <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x7e>

    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
 80127a6:	69fb      	ldr	r3, [r7, #28]
 80127a8:	3350      	adds	r3, #80	; 0x50
 80127aa:	683a      	ldr	r2, [r7, #0]
 80127ac:	4413      	add	r3, r2
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	461a      	mov	r2, r3
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	4293      	cmp	r3, r2
 80127b6:	d806      	bhi.n	80127c6 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xba>
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	3350      	adds	r3, #80	; 0x50
 80127bc:	683a      	ldr	r2, [r7, #0]
 80127be:	4413      	add	r3, r2
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	2b50      	cmp	r3, #80	; 0x50
 80127c4:	d901      	bls.n	80127ca <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xbe>
      return 1;
 80127c6:	2301      	movs	r3, #1
 80127c8:	e049      	b.n	801285e <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x152>

    for(j = k; j < sig[OMEGA + i]; ++j) {
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	61bb      	str	r3, [r7, #24]
 80127ce:	e01f      	b.n	8012810 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x104>
      /* Coefficients are ordered for strong unforgeability */
      if(j > k && sig[j] <= sig[j-1]) return 1;
 80127d0:	69ba      	ldr	r2, [r7, #24]
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d90c      	bls.n	80127f2 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xe6>
 80127d8:	683a      	ldr	r2, [r7, #0]
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	4413      	add	r3, r2
 80127de:	781a      	ldrb	r2, [r3, #0]
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	3b01      	subs	r3, #1
 80127e4:	6839      	ldr	r1, [r7, #0]
 80127e6:	440b      	add	r3, r1
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d801      	bhi.n	80127f2 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xe6>
 80127ee:	2301      	movs	r3, #1
 80127f0:	e035      	b.n	801285e <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x152>
      h->vec[i].coeffs[sig[j]] = 1;
 80127f2:	683a      	ldr	r2, [r7, #0]
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	4413      	add	r3, r2
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	4619      	mov	r1, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	69fa      	ldr	r2, [r7, #28]
 8012800:	0212      	lsls	r2, r2, #8
 8012802:	440a      	add	r2, r1
 8012804:	2101      	movs	r1, #1
 8012806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = k; j < sig[OMEGA + i]; ++j) {
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	3301      	adds	r3, #1
 801280e:	61bb      	str	r3, [r7, #24]
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	3350      	adds	r3, #80	; 0x50
 8012814:	683a      	ldr	r2, [r7, #0]
 8012816:	4413      	add	r3, r2
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	461a      	mov	r2, r3
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	4293      	cmp	r3, r2
 8012820:	d3d6      	bcc.n	80127d0 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xc4>
    }

    k = sig[OMEGA + i];
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	3350      	adds	r3, #80	; 0x50
 8012826:	683a      	ldr	r2, [r7, #0]
 8012828:	4413      	add	r3, r2
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	3301      	adds	r3, #1
 8012832:	61fb      	str	r3, [r7, #28]
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	2b03      	cmp	r3, #3
 8012838:	d9a4      	bls.n	8012784 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x78>
  }

  /* Extra indices are zero for strong unforgeability */
  for(j = k; j < OMEGA; ++j)
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	61bb      	str	r3, [r7, #24]
 801283e:	e00a      	b.n	8012856 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x14a>
    if(sig[j])
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	4413      	add	r3, r2
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d001      	beq.n	8012850 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x144>
      return 1;
 801284c:	2301      	movs	r3, #1
 801284e:	e006      	b.n	801285e <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x152>
  for(j = k; j < OMEGA; ++j)
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	3301      	adds	r3, #1
 8012854:	61bb      	str	r3, [r7, #24]
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	2b4f      	cmp	r3, #79	; 0x4f
 801285a:	d9f1      	bls.n	8012840 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x134>

  return 0;
 801285c:	2300      	movs	r3, #0
}
 801285e:	4618      	mov	r0, r3
 8012860:	3720      	adds	r7, #32
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}

08012866 <pqcrystals_dilithium2aes_r_ref_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
 8012866:	b580      	push	{r7, lr}
 8012868:	b084      	sub	sp, #16
 801286a:	af00      	add	r7, sp, #0
 801286c:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 801286e:	2300      	movs	r3, #0
 8012870:	60fb      	str	r3, [r7, #12]
 8012872:	e00e      	b.n	8012892 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0x2c>
    a->coeffs[i] = reduce32(a->coeffs[i]);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801287c:	4618      	mov	r0, r3
 801287e:	f002 fa41 	bl	8014d04 <pqcrystals_dilithium2aes_r_ref_reduce32>
 8012882:	4601      	mov	r1, r0
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	68fa      	ldr	r2, [r7, #12]
 8012888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	3301      	adds	r3, #1
 8012890:	60fb      	str	r3, [r7, #12]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2bff      	cmp	r3, #255	; 0xff
 8012896:	d9ed      	bls.n	8012874 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0xe>

  DBENCH_STOP(*tred);
}
 8012898:	bf00      	nop
 801289a:	bf00      	nop
 801289c:	3710      	adds	r7, #16
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <pqcrystals_dilithium2aes_r_ref_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b084      	sub	sp, #16
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80128aa:	2300      	movs	r3, #0
 80128ac:	60fb      	str	r3, [r7, #12]
 80128ae:	e00e      	b.n	80128ce <pqcrystals_dilithium2aes_r_ref_poly_caddq+0x2c>
    a->coeffs[i] = caddq(a->coeffs[i]);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f002 fa3f 	bl	8014d3c <pqcrystals_dilithium2aes_r_ref_caddq>
 80128be:	4601      	mov	r1, r0
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	3301      	adds	r3, #1
 80128cc:	60fb      	str	r3, [r7, #12]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2bff      	cmp	r3, #255	; 0xff
 80128d2:	d9ed      	bls.n	80128b0 <pqcrystals_dilithium2aes_r_ref_poly_caddq+0xe>

  DBENCH_STOP(*tred);
}
 80128d4:	bf00      	nop
 80128d6:	bf00      	nop
 80128d8:	3710      	adds	r7, #16
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}

080128de <pqcrystals_dilithium2aes_r_ref_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
 80128de:	b480      	push	{r7}
 80128e0:	b087      	sub	sp, #28
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	60f8      	str	r0, [r7, #12]
 80128e6:	60b9      	str	r1, [r7, #8]
 80128e8:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80128ea:	2300      	movs	r3, #0
 80128ec:	617b      	str	r3, [r7, #20]
 80128ee:	e00f      	b.n	8012910 <pqcrystals_dilithium2aes_r_ref_poly_add+0x32>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	697a      	ldr	r2, [r7, #20]
 80128f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6979      	ldr	r1, [r7, #20]
 80128fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012900:	18d1      	adds	r1, r2, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	697a      	ldr	r2, [r7, #20]
 8012906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	3301      	adds	r3, #1
 801290e:	617b      	str	r3, [r7, #20]
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	2bff      	cmp	r3, #255	; 0xff
 8012914:	d9ec      	bls.n	80128f0 <pqcrystals_dilithium2aes_r_ref_poly_add+0x12>

  DBENCH_STOP(*tadd);
}
 8012916:	bf00      	nop
 8012918:	bf00      	nop
 801291a:	371c      	adds	r7, #28
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <pqcrystals_dilithium2aes_r_ref_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 8012924:	b480      	push	{r7}
 8012926:	b087      	sub	sp, #28
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012930:	2300      	movs	r3, #0
 8012932:	617b      	str	r3, [r7, #20]
 8012934:	e00f      	b.n	8012956 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x32>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	697a      	ldr	r2, [r7, #20]
 801293a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6979      	ldr	r1, [r7, #20]
 8012942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012946:	1ad1      	subs	r1, r2, r3
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	697a      	ldr	r2, [r7, #20]
 801294c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	3301      	adds	r3, #1
 8012954:	617b      	str	r3, [r7, #20]
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	2bff      	cmp	r3, #255	; 0xff
 801295a:	d9ec      	bls.n	8012936 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x12>

  DBENCH_STOP(*tadd);
}
 801295c:	bf00      	nop
 801295e:	bf00      	nop
 8012960:	371c      	adds	r7, #28
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr

0801296a <pqcrystals_dilithium2aes_r_ref_poly_shiftl>:
* Description: Multiply polynomial by 2^D without modular reduction. Assumes
*              input coefficients to be less than 2^{31-D} in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_shiftl(poly *a) {
 801296a:	b480      	push	{r7}
 801296c:	b085      	sub	sp, #20
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012972:	2300      	movs	r3, #0
 8012974:	60fb      	str	r3, [r7, #12]
 8012976:	e00b      	b.n	8012990 <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0x26>
    a->coeffs[i] <<= D;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	68fa      	ldr	r2, [r7, #12]
 801297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012980:	0359      	lsls	r1, r3, #13
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	3301      	adds	r3, #1
 801298e:	60fb      	str	r3, [r7, #12]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2bff      	cmp	r3, #255	; 0xff
 8012994:	d9f0      	bls.n	8012978 <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0xe>

  DBENCH_STOP(*tmul);
}
 8012996:	bf00      	nop
 8012998:	bf00      	nop
 801299a:	3714      	adds	r7, #20
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr

080129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>:
* Description: Inplace forward NTT. Coefficients can grow by
*              8*Q in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_ntt(poly *a) {
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  ntt(a->coeffs);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ff fbbc 	bl	801212c <pqcrystals_dilithium2aes_r_ref_ntt>

  DBENCH_STOP(*tmul);
}
 80129b4:	bf00      	nop
 80129b6:	3708      	adds	r7, #8
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}

080129bc <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>:
*              Input coefficients need to be less than Q in absolute
*              value and output coefficients are again bounded by Q.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_invntt_tomont(poly *a) {
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  invntt_tomont(a->coeffs);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7ff fc1c 	bl	8012204 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>

  DBENCH_STOP(*tmul);
}
 80129cc:	bf00      	nop
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 80129d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80129d8:	b086      	sub	sp, #24
 80129da:	af00      	add	r7, sp, #0
 80129dc:	60f8      	str	r0, [r7, #12]
 80129de:	60b9      	str	r1, [r7, #8]
 80129e0:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80129e2:	2300      	movs	r3, #0
 80129e4:	617b      	str	r3, [r7, #20]
 80129e6:	e022      	b.n	8012a2e <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x5a>
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	697a      	ldr	r2, [r7, #20]
 80129ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129f0:	17da      	asrs	r2, r3, #31
 80129f2:	4698      	mov	r8, r3
 80129f4:	4691      	mov	r9, r2
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	697a      	ldr	r2, [r7, #20]
 80129fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129fe:	17da      	asrs	r2, r3, #31
 8012a00:	469a      	mov	sl, r3
 8012a02:	4693      	mov	fp, r2
 8012a04:	fb0a f209 	mul.w	r2, sl, r9
 8012a08:	fb08 f30b 	mul.w	r3, r8, fp
 8012a0c:	4413      	add	r3, r2
 8012a0e:	fba8 450a 	umull	r4, r5, r8, sl
 8012a12:	442b      	add	r3, r5
 8012a14:	461d      	mov	r5, r3
 8012a16:	4620      	mov	r0, r4
 8012a18:	4629      	mov	r1, r5
 8012a1a:	f002 f92d 	bl	8014c78 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012a1e:	4601      	mov	r1, r0
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	617b      	str	r3, [r7, #20]
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	2bff      	cmp	r3, #255	; 0xff
 8012a32:	d9d9      	bls.n	80129e8 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x14>

  DBENCH_STOP(*tmul);
}
 8012a34:	bf00      	nop
 8012a36:	bf00      	nop
 8012a38:	3718      	adds	r7, #24
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012a40 <pqcrystals_dilithium2aes_r_ref_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b086      	sub	sp, #24
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	60f8      	str	r0, [r7, #12]
 8012a48:	60b9      	str	r1, [r7, #8]
 8012a4a:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	617b      	str	r3, [r7, #20]
 8012a50:	e012      	b.n	8012a78 <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x38>
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	68ba      	ldr	r2, [r7, #8]
 8012a58:	18d0      	adds	r0, r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	697a      	ldr	r2, [r7, #20]
 8012a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a62:	4619      	mov	r1, r3
 8012a64:	f002 f97e 	bl	8014d64 <pqcrystals_dilithium2aes_r_ref_power2round>
 8012a68:	4601      	mov	r1, r0
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	697a      	ldr	r2, [r7, #20]
 8012a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	3301      	adds	r3, #1
 8012a76:	617b      	str	r3, [r7, #20]
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	2bff      	cmp	r3, #255	; 0xff
 8012a7c:	d9e9      	bls.n	8012a52 <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x12>

  DBENCH_STOP(*tround);
}
 8012a7e:	bf00      	nop
 8012a80:	bf00      	nop
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <pqcrystals_dilithium2aes_r_ref_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012a94:	2300      	movs	r3, #0
 8012a96:	617b      	str	r3, [r7, #20]
 8012a98:	e012      	b.n	8012ac0 <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x38>
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	68ba      	ldr	r2, [r7, #8]
 8012aa0:	18d0      	adds	r0, r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	697a      	ldr	r2, [r7, #20]
 8012aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aaa:	4619      	mov	r1, r3
 8012aac:	f002 f972 	bl	8014d94 <pqcrystals_dilithium2aes_r_ref_decompose>
 8012ab0:	4601      	mov	r1, r0
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	697a      	ldr	r2, [r7, #20]
 8012ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	3301      	adds	r3, #1
 8012abe:	617b      	str	r3, [r7, #20]
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	2bff      	cmp	r3, #255	; 0xff
 8012ac4:	d9e9      	bls.n	8012a9a <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x12>

  DBENCH_STOP(*tround);
}
 8012ac6:	bf00      	nop
 8012ac8:	bf00      	nop
 8012aca:	3718      	adds	r7, #24
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b086      	sub	sp, #24
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8012adc:	2300      	movs	r3, #0
 8012ade:	613b      	str	r3, [r7, #16]
  DBENCH_START();

  for(i = 0; i < N_; ++i) {
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	617b      	str	r3, [r7, #20]
 8012ae4:	e01b      	b.n	8012b1e <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x4e>
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	697a      	ldr	r2, [r7, #20]
 8012aea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	697a      	ldr	r2, [r7, #20]
 8012af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af6:	4619      	mov	r1, r3
 8012af8:	f002 f988 	bl	8014e0c <pqcrystals_dilithium2aes_r_ref_make_hint>
 8012afc:	4603      	mov	r3, r0
 8012afe:	4619      	mov	r1, r3
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	697a      	ldr	r2, [r7, #20]
 8012b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s += h->coeffs[i];
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	697a      	ldr	r2, [r7, #20]
 8012b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b10:	461a      	mov	r2, r3
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	4413      	add	r3, r2
 8012b16:	613b      	str	r3, [r7, #16]
  for(i = 0; i < N_; ++i) {
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	617b      	str	r3, [r7, #20]
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	2bff      	cmp	r3, #255	; 0xff
 8012b22:	d9e0      	bls.n	8012ae6 <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x16>
  }

  DBENCH_STOP(*tround);
  return s;
 8012b24:	693b      	ldr	r3, [r7, #16]
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3718      	adds	r7, #24
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}

08012b2e <pqcrystals_dilithium2aes_r_ref_poly_use_hint>:
*
* Arguments:   - poly *b: pointer to output polynomial with corrected high bits
*              - const poly *a: pointer to input polynomial
*              - const poly *h: pointer to input hint polynomial
**************************************************/
void poly_use_hint(poly *b, const poly *a, const poly *h) {
 8012b2e:	b580      	push	{r7, lr}
 8012b30:	b086      	sub	sp, #24
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	60f8      	str	r0, [r7, #12]
 8012b36:	60b9      	str	r1, [r7, #8]
 8012b38:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	617b      	str	r3, [r7, #20]
 8012b3e:	e012      	b.n	8012b66 <pqcrystals_dilithium2aes_r_ref_poly_use_hint+0x38>
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	697a      	ldr	r2, [r7, #20]
 8012b44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	697a      	ldr	r2, [r7, #20]
 8012b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b50:	4619      	mov	r1, r3
 8012b52:	f002 f97b 	bl	8014e4c <pqcrystals_dilithium2aes_r_ref_use_hint>
 8012b56:	4601      	mov	r1, r0
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	697a      	ldr	r2, [r7, #20]
 8012b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	3301      	adds	r3, #1
 8012b64:	617b      	str	r3, [r7, #20]
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	2bff      	cmp	r3, #255	; 0xff
 8012b6a:	d9e9      	bls.n	8012b40 <pqcrystals_dilithium2aes_r_ref_poly_use_hint+0x12>

  DBENCH_STOP(*tround);
}
 8012b6c:	bf00      	nop
 8012b6e:	bf00      	nop
 8012b70:	3718      	adds	r7, #24
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
	...

08012b78 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>:
* Arguments:   - const poly *a: pointer to polynomial
*              - int32_t B: norm bound
*
* Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
**************************************************/
int poly_chknorm(const poly *a, int32_t B) {
 8012b78:	b480      	push	{r7}
 8012b7a:	b085      	sub	sp, #20
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	6039      	str	r1, [r7, #0]
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q_-1)/8)
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	4a16      	ldr	r2, [pc, #88]	; (8012be0 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x68>)
 8012b86:	4293      	cmp	r3, r2
 8012b88:	dd01      	ble.n	8012b8e <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x16>
    return 1;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e022      	b.n	8012bd4 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N_; ++i) {
 8012b8e:	2300      	movs	r3, #0
 8012b90:	60fb      	str	r3, [r7, #12]
 8012b92:	e01b      	b.n	8012bcc <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x54>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	68fa      	ldr	r2, [r7, #12]
 8012b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b9c:	17db      	asrs	r3, r3, #31
 8012b9e:	60bb      	str	r3, [r7, #8]
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	68f9      	ldr	r1, [r7, #12]
 8012bac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bb0:	0059      	lsls	r1, r3, #1
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	400b      	ands	r3, r1
 8012bb6:	1ad3      	subs	r3, r2, r3
 8012bb8:	60bb      	str	r3, [r7, #8]

    if(t >= B) {
 8012bba:	68ba      	ldr	r2, [r7, #8]
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	db01      	blt.n	8012bc6 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x4e>
      DBENCH_STOP(*tsample);
      return 1;
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	e006      	b.n	8012bd4 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>
  for(i = 0; i < N_; ++i) {
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	60fb      	str	r3, [r7, #12]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2bff      	cmp	r3, #255	; 0xff
 8012bd0:	d9e0      	bls.n	8012b94 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x1c>
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
 8012bd2:	2300      	movs	r3, #0
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3714      	adds	r7, #20
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bde:	4770      	bx	lr
 8012be0:	000ffc00 	.word	0x000ffc00

08012be4 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b089      	sub	sp, #36	; 0x24
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	60f8      	str	r0, [r7, #12]
 8012bec:	60b9      	str	r1, [r7, #8]
 8012bee:	607a      	str	r2, [r7, #4]
 8012bf0:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t;
  DBENCH_START();

  ctr = pos = 0;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	61bb      	str	r3, [r7, #24]
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 8012bfa:	e02a      	b.n	8012c52 <rej_uniform+0x6e>
    t  = buf[pos++];
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	1c5a      	adds	r2, r3, #1
 8012c00:	61ba      	str	r2, [r7, #24]
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	4413      	add	r3, r2
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 8;
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	61ba      	str	r2, [r7, #24]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	4413      	add	r3, r2
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	021b      	lsls	r3, r3, #8
 8012c18:	697a      	ldr	r2, [r7, #20]
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 16;
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	1c5a      	adds	r2, r3, #1
 8012c22:	61ba      	str	r2, [r7, #24]
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	4413      	add	r3, r2
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	041b      	lsls	r3, r3, #16
 8012c2c:	697a      	ldr	r2, [r7, #20]
 8012c2e:	4313      	orrs	r3, r2
 8012c30:	617b      	str	r3, [r7, #20]
    t &= 0x7FFFFF;
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012c38:	617b      	str	r3, [r7, #20]

    if(t < Q_)
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	4a0d      	ldr	r2, [pc, #52]	; (8012c74 <rej_uniform+0x90>)
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d807      	bhi.n	8012c52 <rej_uniform+0x6e>
      a[ctr++] = t;
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	1c5a      	adds	r2, r3, #1
 8012c46:	61fa      	str	r2, [r7, #28]
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	68fa      	ldr	r2, [r7, #12]
 8012c4c:	4413      	add	r3, r2
 8012c4e:	697a      	ldr	r2, [r7, #20]
 8012c50:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 8012c52:	69fa      	ldr	r2, [r7, #28]
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d204      	bcs.n	8012c64 <rej_uniform+0x80>
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	3303      	adds	r3, #3
 8012c5e:	683a      	ldr	r2, [r7, #0]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d2cb      	bcs.n	8012bfc <rej_uniform+0x18>
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8012c64:	69fb      	ldr	r3, [r7, #28]
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3724      	adds	r7, #36	; 0x24
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	007fe000 	.word	0x007fe000

08012c78 <pqcrystals_dilithium2aes_r_ref_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	f5ad 6de5 	sub.w	sp, sp, #1832	; 0x728
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012c84:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012c88:	6018      	str	r0, [r3, #0]
 8012c8a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012c8e:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8012c92:	6019      	str	r1, [r3, #0]
 8012c94:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012c98:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 8012c9c:	801a      	strh	r2, [r3, #0]
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 8012c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012ca2:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 8012ca6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012caa:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 8012cae:	881a      	ldrh	r2, [r3, #0]
 8012cb0:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012cb4:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8012cb8:	f107 0010 	add.w	r0, r7, #16
 8012cbc:	6819      	ldr	r1, [r3, #0]
 8012cbe:	f002 fe05 	bl	80158cc <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8012cc2:	f107 0210 	add.w	r2, r7, #16
 8012cc6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8012cca:	210c      	movs	r1, #12
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7fb fde4 	bl	800e89a <pqcrystals_aes256ctr_ref_squeezeblocks>

  ctr = rej_uniform(a->coeffs, N_, buf, buflen);
 8012cd2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012cd6:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012cda:	6818      	ldr	r0, [r3, #0]
 8012cdc:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012ce0:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8012ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012ce8:	f7ff ff7c 	bl	8012be4 <rej_uniform>
 8012cec:	f8c7 0720 	str.w	r0, [r7, #1824]	; 0x720

  while(ctr < N_) {
 8012cf0:	e059      	b.n	8012da6 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x12e>
    off = buflen % 3;
 8012cf2:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8012cf6:	4b31      	ldr	r3, [pc, #196]	; (8012dbc <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x144>)
 8012cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8012cfc:	0859      	lsrs	r1, r3, #1
 8012cfe:	460b      	mov	r3, r1
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	440b      	add	r3, r1
 8012d04:	1ad3      	subs	r3, r2, r3
 8012d06:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
    for(i = 0; i < off; ++i)
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8012d10:	e01a      	b.n	8012d48 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0xd0>
      buf[i] = buf[buflen - off + i];
 8012d12:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8012d16:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012d1a:	1ad2      	subs	r2, r2, r3
 8012d1c:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012d20:	4413      	add	r3, r2
 8012d22:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8012d26:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8012d2a:	5cd1      	ldrb	r1, [r2, r3]
 8012d2c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d30:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8012d34:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012d38:	4413      	add	r3, r2
 8012d3a:	460a      	mov	r2, r1
 8012d3c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < off; ++i)
 8012d3e:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8012d42:	3301      	adds	r3, #1
 8012d44:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8012d48:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
 8012d4c:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d3de      	bcc.n	8012d12 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x9a>

    stream128_squeezeblocks(buf + off, 1, &state);
 8012d54:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012d58:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012d5c:	4413      	add	r3, r2
 8012d5e:	f107 0210 	add.w	r2, r7, #16
 8012d62:	2101      	movs	r1, #1
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fb fd98 	bl	800e89a <pqcrystals_aes256ctr_ref_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
 8012d6a:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8012d6e:	3340      	adds	r3, #64	; 0x40
 8012d70:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
    ctr += rej_uniform(a->coeffs + ctr, N_ - ctr, buf, buflen);
 8012d74:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8012d78:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	18d0      	adds	r0, r2, r3
 8012d86:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012d8a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8012d8e:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012d92:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8012d96:	f7ff ff25 	bl	8012be4 <rej_uniform>
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012da0:	4413      	add	r3, r2
 8012da2:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
  while(ctr < N_) {
 8012da6:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8012daa:	2bff      	cmp	r3, #255	; 0xff
 8012dac:	d9a1      	bls.n	8012cf2 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x7a>
  }
}
 8012dae:	bf00      	nop
 8012db0:	bf00      	nop
 8012db2:	f507 67e5 	add.w	r7, r7, #1832	; 0x728
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	aaaaaaab 	.word	0xaaaaaaab

08012dc0 <rej_eta>:
**************************************************/
static unsigned int rej_eta(int32_t *a,
                            unsigned int len,
                            const uint8_t *buf,
                            unsigned int buflen)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b089      	sub	sp, #36	; 0x24
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
 8012dcc:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t0, t1;
  DBENCH_START();

  ctr = pos = 0;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	61bb      	str	r3, [r7, #24]
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos < buflen) {
 8012dd6:	e045      	b.n	8012e64 <rej_eta+0xa4>
    t0 = buf[pos] & 0x0F;
 8012dd8:	687a      	ldr	r2, [r7, #4]
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	4413      	add	r3, r2
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	f003 030f 	and.w	r3, r3, #15
 8012de4:	617b      	str	r3, [r7, #20]
    t1 = buf[pos++] >> 4;
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	1c5a      	adds	r2, r3, #1
 8012dea:	61ba      	str	r2, [r7, #24]
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	4413      	add	r3, r2
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	091b      	lsrs	r3, r3, #4
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	613b      	str	r3, [r7, #16]

#if ETA == 2
    if(t0 < 15) {
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	2b0e      	cmp	r3, #14
 8012dfc:	d815      	bhi.n	8012e2a <rej_eta+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	22cd      	movs	r2, #205	; 0xcd
 8012e02:	fb02 f303 	mul.w	r3, r2, r3
 8012e06:	0a9a      	lsrs	r2, r3, #10
 8012e08:	4613      	mov	r3, r2
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	4413      	add	r3, r2
 8012e0e:	697a      	ldr	r2, [r7, #20]
 8012e10:	1ad3      	subs	r3, r2, r3
 8012e12:	617b      	str	r3, [r7, #20]
      a[ctr++] = 2 - t0;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	f1c3 0102 	rsb	r1, r3, #2
 8012e1a:	69fb      	ldr	r3, [r7, #28]
 8012e1c:	1c5a      	adds	r2, r3, #1
 8012e1e:	61fa      	str	r2, [r7, #28]
 8012e20:	009b      	lsls	r3, r3, #2
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	4413      	add	r3, r2
 8012e26:	460a      	mov	r2, r1
 8012e28:	601a      	str	r2, [r3, #0]
    }
    if(t1 < 15 && ctr < len) {
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	2b0e      	cmp	r3, #14
 8012e2e:	d819      	bhi.n	8012e64 <rej_eta+0xa4>
 8012e30:	69fa      	ldr	r2, [r7, #28]
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d215      	bcs.n	8012e64 <rej_eta+0xa4>
      t1 = t1 - (205*t1 >> 10)*5;
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	22cd      	movs	r2, #205	; 0xcd
 8012e3c:	fb02 f303 	mul.w	r3, r2, r3
 8012e40:	0a9a      	lsrs	r2, r3, #10
 8012e42:	4613      	mov	r3, r2
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	4413      	add	r3, r2
 8012e48:	693a      	ldr	r2, [r7, #16]
 8012e4a:	1ad3      	subs	r3, r2, r3
 8012e4c:	613b      	str	r3, [r7, #16]
      a[ctr++] = 2 - t1;
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	f1c3 0102 	rsb	r1, r3, #2
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	1c5a      	adds	r2, r3, #1
 8012e58:	61fa      	str	r2, [r7, #28]
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	68fa      	ldr	r2, [r7, #12]
 8012e5e:	4413      	add	r3, r2
 8012e60:	460a      	mov	r2, r1
 8012e62:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos < buflen) {
 8012e64:	69fa      	ldr	r2, [r7, #28]
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d203      	bcs.n	8012e74 <rej_eta+0xb4>
 8012e6c:	69ba      	ldr	r2, [r7, #24]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d3b1      	bcc.n	8012dd8 <rej_eta+0x18>
      a[ctr++] = 4 - t1;
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8012e74:	69fb      	ldr	r3, [r7, #28]
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3724      	adds	r7, #36	; 0x24
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[SEEDBYTES],
                      uint16_t nonce)
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012e8e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012e92:	6018      	str	r0, [r3, #0]
 8012e94:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012e98:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8012e9c:	6019      	str	r1, [r3, #0]
 8012e9e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012ea2:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 8012ea6:	801a      	strh	r2, [r3, #0]
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES;
 8012ea8:	23c0      	movs	r3, #192	; 0xc0
 8012eaa:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 8012eae:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012eb2:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 8012eb6:	881a      	ldrh	r2, [r3, #0]
 8012eb8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012ebc:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8012ec0:	f107 0010 	add.w	r0, r7, #16
 8012ec4:	6819      	ldr	r1, [r3, #0]
 8012ec6:	f002 fd01 	bl	80158cc <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8012eca:	f107 0210 	add.w	r2, r7, #16
 8012ece:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012ed2:	2103      	movs	r1, #3
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7fb fce0 	bl	800e89a <pqcrystals_aes256ctr_ref_squeezeblocks>

  ctr = rej_eta(a->coeffs, N_, buf, buflen);
 8012eda:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012ede:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012ee2:	6818      	ldr	r0, [r3, #0]
 8012ee4:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8012ee8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8012eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012ef0:	f7ff ff66 	bl	8012dc0 <rej_eta>
 8012ef4:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4

  while(ctr < N_) {
 8012ef8:	e01f      	b.n	8012f3a <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0xb8>
    stream128_squeezeblocks(buf, 1, &state);
 8012efa:	f107 0210 	add.w	r2, r7, #16
 8012efe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012f02:	2101      	movs	r1, #1
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fb fcc8 	bl	800e89a <pqcrystals_aes256ctr_ref_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N_ - ctr, buf, STREAM128_BLOCKBYTES);
 8012f0a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8012f0e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	18d0      	adds	r0, r2, r3
 8012f1c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012f20:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8012f24:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8012f28:	2340      	movs	r3, #64	; 0x40
 8012f2a:	f7ff ff49 	bl	8012dc0 <rej_eta>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012f34:	4413      	add	r3, r2
 8012f36:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  while(ctr < N_) {
 8012f3a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8012f3e:	2bff      	cmp	r3, #255	; 0xff
 8012f40:	d9db      	bls.n	8012efa <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0x78>
  }
}
 8012f42:	bf00      	nop
 8012f44:	bf00      	nop
 8012f46:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}

08012f4e <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 8012f4e:	b580      	push	{r7, lr}
 8012f50:	f5ad 6dca 	sub.w	sp, sp, #1616	; 0x650
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8012f5a:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8012f5e:	6018      	str	r0, [r3, #0]
 8012f60:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8012f64:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8012f68:	6019      	str	r1, [r3, #0]
 8012f6a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8012f6e:	f2a3 634a 	subw	r3, r3, #1610	; 0x64a
 8012f72:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 8012f74:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8012f78:	f2a3 634a 	subw	r3, r3, #1610	; 0x64a
 8012f7c:	881a      	ldrh	r2, [r3, #0]
 8012f7e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8012f82:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8012f86:	f107 0010 	add.w	r0, r7, #16
 8012f8a:	6819      	ldr	r1, [r3, #0]
 8012f8c:	f002 fc9e 	bl	80158cc <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8012f90:	f107 0210 	add.w	r2, r7, #16
 8012f94:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012f98:	2109      	movs	r1, #9
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fb fc7d 	bl	800e89a <pqcrystals_aes256ctr_ref_squeezeblocks>
  polyz_unpack(a, buf);
 8012fa0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8012fa4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8012fa8:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8012fac:	4611      	mov	r1, r2
 8012fae:	6818      	ldr	r0, [r3, #0]
 8012fb0:	f000 ff36 	bl	8013e20 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
}
 8012fb4:	bf00      	nop
 8012fb6:	f507 67ca 	add.w	r7, r7, #1616	; 0x650
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}

08012fbe <pqcrystals_dilithium2aes_r_ref_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 8012fbe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012fc2:	b0de      	sub	sp, #376	; 0x178
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012fca:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8012fce:	6018      	str	r0, [r3, #0]
 8012fd0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012fd4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012fd8:	6019      	str	r1, [r3, #0]
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
 8012fda:	f107 0308 	add.w	r3, r7, #8
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7ff f821 	bl	8012026 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
 8012fe4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012fe8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012fec:	f107 0008 	add.w	r0, r7, #8
 8012ff0:	2220      	movs	r2, #32
 8012ff2:	6819      	ldr	r1, [r3, #0]
 8012ff4:	f7ff f822 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8012ff8:	f107 0308 	add.w	r3, r7, #8
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff f835 	bl	801206c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
 8013002:	f107 0208 	add.w	r2, r7, #8
 8013006:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801300a:	2101      	movs	r1, #1
 801300c:	4618      	mov	r0, r3
 801300e:	f7ff f841 	bl	8012094 <pqcrystals_fips202_ref_shake256_squeezeblocks>

  signs = 0;
 8013012:	f04f 0200 	mov.w	r2, #0
 8013016:	f04f 0300 	mov.w	r3, #0
 801301a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 801301e:	2300      	movs	r3, #0
 8013020:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013024:	e027      	b.n	8013076 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xb8>
    signs |= (uint64_t)buf[i] << 8*i;
 8013026:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801302a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801302e:	4413      	add	r3, r2
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	b2db      	uxtb	r3, r3
 8013034:	2200      	movs	r2, #0
 8013036:	4698      	mov	r8, r3
 8013038:	4691      	mov	r9, r2
 801303a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801303e:	00db      	lsls	r3, r3, #3
 8013040:	f1a3 0120 	sub.w	r1, r3, #32
 8013044:	f1c3 0220 	rsb	r2, r3, #32
 8013048:	fa09 f503 	lsl.w	r5, r9, r3
 801304c:	fa08 f101 	lsl.w	r1, r8, r1
 8013050:	430d      	orrs	r5, r1
 8013052:	fa28 f202 	lsr.w	r2, r8, r2
 8013056:	4315      	orrs	r5, r2
 8013058:	fa08 f403 	lsl.w	r4, r8, r3
 801305c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8013060:	ea42 0a04 	orr.w	sl, r2, r4
 8013064:	ea43 0b05 	orr.w	fp, r3, r5
 8013068:	e9c7 ab5a 	strd	sl, fp, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 801306c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013070:	3301      	adds	r3, #1
 8013072:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013076:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801307a:	2b07      	cmp	r3, #7
 801307c:	d9d3      	bls.n	8013026 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x68>
  pos = 8;
 801307e:	2308      	movs	r3, #8
 8013080:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  for(i = 0; i < N_; ++i)
 8013084:	2300      	movs	r3, #0
 8013086:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801308a:	e00e      	b.n	80130aa <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xec>
    c->coeffs[i] = 0;
 801308c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013090:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801309a:	2100      	movs	r1, #0
 801309c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 80130a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80130a4:	3301      	adds	r3, #1
 80130a6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80130aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80130ae:	2bff      	cmp	r3, #255	; 0xff
 80130b0:	d9ec      	bls.n	801308c <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xce>
  for(i = N_-TAU; i < N_; ++i) {
 80130b2:	23d9      	movs	r3, #217	; 0xd9
 80130b4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80130b8:	e054      	b.n	8013164 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x1a6>
    do {
      if(pos >= SHAKE256_RATE) {
 80130ba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80130be:	2b87      	cmp	r3, #135	; 0x87
 80130c0:	d90a      	bls.n	80130d8 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x11a>
        shake256_squeezeblocks(buf, 1, &state);
 80130c2:	f107 0208 	add.w	r2, r7, #8
 80130c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80130ca:	2101      	movs	r1, #1
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fe ffe1 	bl	8012094 <pqcrystals_fips202_ref_shake256_squeezeblocks>
        pos = 0;
 80130d2:	2300      	movs	r3, #0
 80130d4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      }

      b = buf[pos++];
 80130d8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80130dc:	1c5a      	adds	r2, r3, #1
 80130de:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 80130e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80130e6:	443b      	add	r3, r7
 80130e8:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80130ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    } while(b > i);
 80130f0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80130f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d8de      	bhi.n	80130ba <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>

    c->coeffs[i] = c->coeffs[b];
 80130fc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013100:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801310a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801310e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013112:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 8013120:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8013124:	f003 0301 	and.w	r3, r3, #1
 8013128:	005b      	lsls	r3, r3, #1
 801312a:	f1c3 0301 	rsb	r3, r3, #1
 801312e:	4619      	mov	r1, r3
 8013130:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013134:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801313e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    signs >>= 1;
 8013142:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8013146:	f04f 0200 	mov.w	r2, #0
 801314a:	f04f 0300 	mov.w	r3, #0
 801314e:	0842      	lsrs	r2, r0, #1
 8013150:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013154:	084b      	lsrs	r3, r1, #1
 8013156:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = N_-TAU; i < N_; ++i) {
 801315a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801315e:	3301      	adds	r3, #1
 8013160:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013164:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013168:	2bff      	cmp	r3, #255	; 0xff
 801316a:	d9a6      	bls.n	80130ba <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>
  }
}
 801316c:	bf00      	nop
 801316e:	bf00      	nop
 8013170:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8013174:	46bd      	mov	sp, r7
 8013176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801317a <pqcrystals_dilithium2aes_r_ref_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 801317a:	b480      	push	{r7}
 801317c:	b085      	sub	sp, #20
 801317e:	af00      	add	r7, sp, #0
 8013180:	6078      	str	r0, [r7, #4]
 8013182:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013184:	2300      	movs	r3, #0
 8013186:	60fb      	str	r3, [r7, #12]
 8013188:	e06f      	b.n	801326a <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0xf0>
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	009a      	lsls	r2, r3, #2
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013194:	68fa      	ldr	r2, [r7, #12]
 8013196:	4613      	mov	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	4413      	add	r3, r2
 801319c:	687a      	ldr	r2, [r7, #4]
 801319e:	4413      	add	r3, r2
 80131a0:	b2ca      	uxtb	r2, r1
 80131a2:	701a      	strb	r2, [r3, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	009a      	lsls	r2, r3, #2
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131ae:	121b      	asrs	r3, r3, #8
 80131b0:	b25a      	sxtb	r2, r3
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	1c59      	adds	r1, r3, #1
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131be:	009b      	lsls	r3, r3, #2
 80131c0:	b25b      	sxtb	r3, r3
 80131c2:	4313      	orrs	r3, r2
 80131c4:	b259      	sxtb	r1, r3
 80131c6:	68fa      	ldr	r2, [r7, #12]
 80131c8:	4613      	mov	r3, r2
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4413      	add	r3, r2
 80131ce:	3301      	adds	r3, #1
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	4413      	add	r3, r2
 80131d4:	b2ca      	uxtb	r2, r1
 80131d6:	701a      	strb	r2, [r3, #0]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	009b      	lsls	r3, r3, #2
 80131dc:	1c5a      	adds	r2, r3, #1
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131e4:	119b      	asrs	r3, r3, #6
 80131e6:	b25a      	sxtb	r2, r3
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	1c99      	adds	r1, r3, #2
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131f4:	011b      	lsls	r3, r3, #4
 80131f6:	b25b      	sxtb	r3, r3
 80131f8:	4313      	orrs	r3, r2
 80131fa:	b259      	sxtb	r1, r3
 80131fc:	68fa      	ldr	r2, [r7, #12]
 80131fe:	4613      	mov	r3, r2
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	4413      	add	r3, r2
 8013204:	3302      	adds	r3, #2
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	4413      	add	r3, r2
 801320a:	b2ca      	uxtb	r2, r1
 801320c:	701a      	strb	r2, [r3, #0]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	009b      	lsls	r3, r3, #2
 8013212:	1c9a      	adds	r2, r3, #2
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801321a:	111b      	asrs	r3, r3, #4
 801321c:	b25a      	sxtb	r2, r3
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	009b      	lsls	r3, r3, #2
 8013222:	1cd9      	adds	r1, r3, #3
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801322a:	019b      	lsls	r3, r3, #6
 801322c:	b25b      	sxtb	r3, r3
 801322e:	4313      	orrs	r3, r2
 8013230:	b259      	sxtb	r1, r3
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	4613      	mov	r3, r2
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	4413      	add	r3, r2
 801323a:	3303      	adds	r3, #3
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	4413      	add	r3, r2
 8013240:	b2ca      	uxtb	r2, r1
 8013242:	701a      	strb	r2, [r3, #0]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	1cda      	adds	r2, r3, #3
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013250:	1099      	asrs	r1, r3, #2
 8013252:	68fa      	ldr	r2, [r7, #12]
 8013254:	4613      	mov	r3, r2
 8013256:	009b      	lsls	r3, r3, #2
 8013258:	4413      	add	r3, r2
 801325a:	3304      	adds	r3, #4
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	4413      	add	r3, r2
 8013260:	b2ca      	uxtb	r2, r1
 8013262:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	3301      	adds	r3, #1
 8013268:	60fb      	str	r3, [r7, #12]
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	2b3f      	cmp	r3, #63	; 0x3f
 801326e:	d98c      	bls.n	801318a <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013270:	bf00      	nop
 8013272:	bf00      	nop
 8013274:	3714      	adds	r7, #20
 8013276:	46bd      	mov	sp, r7
 8013278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327c:	4770      	bx	lr

0801327e <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>:
*              Output coefficients are standard representatives.
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
 801327e:	b480      	push	{r7}
 8013280:	b085      	sub	sp, #20
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
 8013286:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013288:	2300      	movs	r3, #0
 801328a:	60fb      	str	r3, [r7, #12]
 801328c:	e076      	b.n	801337c <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0xfe>
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	4613      	mov	r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	4413      	add	r3, r2
 8013296:	683a      	ldr	r2, [r7, #0]
 8013298:	4413      	add	r3, r2
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	4619      	mov	r1, r3
 801329e:	68fa      	ldr	r2, [r7, #12]
 80132a0:	4613      	mov	r3, r2
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	4413      	add	r3, r2
 80132a6:	3301      	adds	r3, #1
 80132a8:	683a      	ldr	r2, [r7, #0]
 80132aa:	4413      	add	r3, r2
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	021b      	lsls	r3, r3, #8
 80132b0:	430b      	orrs	r3, r1
 80132b2:	4619      	mov	r1, r3
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	009a      	lsls	r2, r3, #2
 80132b8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 80132c2:	68fa      	ldr	r2, [r7, #12]
 80132c4:	4613      	mov	r3, r2
 80132c6:	009b      	lsls	r3, r3, #2
 80132c8:	4413      	add	r3, r2
 80132ca:	3301      	adds	r3, #1
 80132cc:	683a      	ldr	r2, [r7, #0]
 80132ce:	4413      	add	r3, r2
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	089b      	lsrs	r3, r3, #2
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	4619      	mov	r1, r3
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	4613      	mov	r3, r2
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	4413      	add	r3, r2
 80132e0:	3302      	adds	r3, #2
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	4413      	add	r3, r2
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	019b      	lsls	r3, r3, #6
 80132ea:	430b      	orrs	r3, r1
 80132ec:	4619      	mov	r1, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	009b      	lsls	r3, r3, #2
 80132f2:	1c5a      	adds	r2, r3, #1
 80132f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	4613      	mov	r3, r2
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	4413      	add	r3, r2
 8013306:	3302      	adds	r3, #2
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	4413      	add	r3, r2
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	091b      	lsrs	r3, r3, #4
 8013310:	b2db      	uxtb	r3, r3
 8013312:	4619      	mov	r1, r3
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	4613      	mov	r3, r2
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	4413      	add	r3, r2
 801331c:	3303      	adds	r3, #3
 801331e:	683a      	ldr	r2, [r7, #0]
 8013320:	4413      	add	r3, r2
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	011b      	lsls	r3, r3, #4
 8013326:	430b      	orrs	r3, r1
 8013328:	4619      	mov	r1, r3
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	1c9a      	adds	r2, r3, #2
 8013330:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	4613      	mov	r3, r2
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	4413      	add	r3, r2
 8013342:	3303      	adds	r3, #3
 8013344:	683a      	ldr	r2, [r7, #0]
 8013346:	4413      	add	r3, r2
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	099b      	lsrs	r3, r3, #6
 801334c:	b2db      	uxtb	r3, r3
 801334e:	4619      	mov	r1, r3
 8013350:	68fa      	ldr	r2, [r7, #12]
 8013352:	4613      	mov	r3, r2
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	4413      	add	r3, r2
 8013358:	3304      	adds	r3, #4
 801335a:	683a      	ldr	r2, [r7, #0]
 801335c:	4413      	add	r3, r2
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	430b      	orrs	r3, r1
 8013364:	4619      	mov	r1, r3
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	1cda      	adds	r2, r3, #3
 801336c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	3301      	adds	r3, #1
 801337a:	60fb      	str	r3, [r7, #12]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	2b3f      	cmp	r3, #63	; 0x3f
 8013380:	d985      	bls.n	801328e <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013382:	bf00      	nop
 8013384:	bf00      	nop
 8013386:	3714      	adds	r7, #20
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr

08013390 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8013390:	b480      	push	{r7}
 8013392:	b08d      	sub	sp, #52	; 0x34
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 801339a:	2300      	movs	r3, #0
 801339c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801339e:	e1ad      	b.n	80136fc <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x36c>
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 80133a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a2:	00da      	lsls	r2, r3, #3
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133aa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80133ae:	60fb      	str	r3, [r7, #12]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 80133b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b2:	00db      	lsls	r3, r3, #3
 80133b4:	1c5a      	adds	r2, r3, #1
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133bc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80133c0:	613b      	str	r3, [r7, #16]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 80133c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c4:	00db      	lsls	r3, r3, #3
 80133c6:	1c9a      	adds	r2, r3, #2
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133ce:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80133d2:	617b      	str	r3, [r7, #20]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 80133d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	1cda      	adds	r2, r3, #3
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133e0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80133e4:	61bb      	str	r3, [r7, #24]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 80133e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e8:	00db      	lsls	r3, r3, #3
 80133ea:	1d1a      	adds	r2, r3, #4
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80133f6:	61fb      	str	r3, [r7, #28]
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 80133f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fa:	00db      	lsls	r3, r3, #3
 80133fc:	1d5a      	adds	r2, r3, #5
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013404:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013408:	623b      	str	r3, [r7, #32]
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 801340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340c:	00db      	lsls	r3, r3, #3
 801340e:	1d9a      	adds	r2, r3, #6
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013416:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801341a:	627b      	str	r3, [r7, #36]	; 0x24
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 801341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341e:	00db      	lsls	r3, r3, #3
 8013420:	1dda      	adds	r2, r3, #7
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013428:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801342c:	62bb      	str	r3, [r7, #40]	; 0x28

    r[13*i+ 0]  =  t[0];
 801342e:	68f9      	ldr	r1, [r7, #12]
 8013430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013432:	4613      	mov	r3, r2
 8013434:	005b      	lsls	r3, r3, #1
 8013436:	4413      	add	r3, r2
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	4413      	add	r3, r2
 801343c:	687a      	ldr	r2, [r7, #4]
 801343e:	4413      	add	r3, r2
 8013440:	b2ca      	uxtb	r2, r1
 8013442:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1]  =  t[0] >>  8;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	0a19      	lsrs	r1, r3, #8
 8013448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801344a:	4613      	mov	r3, r2
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	4413      	add	r3, r2
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	4413      	add	r3, r2
 8013454:	3301      	adds	r3, #1
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	4413      	add	r3, r2
 801345a:	b2ca      	uxtb	r2, r1
 801345c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 801345e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013460:	4613      	mov	r3, r2
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	4413      	add	r3, r2
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4413      	add	r3, r2
 801346a:	3301      	adds	r3, #1
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	4413      	add	r3, r2
 8013470:	7818      	ldrb	r0, [r3, #0]
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	b2db      	uxtb	r3, r3
 8013476:	015b      	lsls	r3, r3, #5
 8013478:	b2d9      	uxtb	r1, r3
 801347a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801347c:	4613      	mov	r3, r2
 801347e:	005b      	lsls	r3, r3, #1
 8013480:	4413      	add	r3, r2
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	4413      	add	r3, r2
 8013486:	3301      	adds	r3, #1
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	4413      	add	r3, r2
 801348c:	ea40 0201 	orr.w	r2, r0, r1
 8013490:	b2d2      	uxtb	r2, r2
 8013492:	701a      	strb	r2, [r3, #0]
    r[13*i+ 2]  =  t[1] >>  3;
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	08d9      	lsrs	r1, r3, #3
 8013498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801349a:	4613      	mov	r3, r2
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	4413      	add	r3, r2
 80134a0:	009b      	lsls	r3, r3, #2
 80134a2:	4413      	add	r3, r2
 80134a4:	3302      	adds	r3, #2
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	4413      	add	r3, r2
 80134aa:	b2ca      	uxtb	r2, r1
 80134ac:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3]  =  t[1] >> 11;
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	0ad9      	lsrs	r1, r3, #11
 80134b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134b4:	4613      	mov	r3, r2
 80134b6:	005b      	lsls	r3, r3, #1
 80134b8:	4413      	add	r3, r2
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	4413      	add	r3, r2
 80134be:	3303      	adds	r3, #3
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	4413      	add	r3, r2
 80134c4:	b2ca      	uxtb	r2, r1
 80134c6:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3] |=  t[2] <<  2;
 80134c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134ca:	4613      	mov	r3, r2
 80134cc:	005b      	lsls	r3, r3, #1
 80134ce:	4413      	add	r3, r2
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	4413      	add	r3, r2
 80134d4:	3303      	adds	r3, #3
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	4413      	add	r3, r2
 80134da:	7818      	ldrb	r0, [r3, #0]
 80134dc:	697b      	ldr	r3, [r7, #20]
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	009b      	lsls	r3, r3, #2
 80134e2:	b2d9      	uxtb	r1, r3
 80134e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134e6:	4613      	mov	r3, r2
 80134e8:	005b      	lsls	r3, r3, #1
 80134ea:	4413      	add	r3, r2
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	4413      	add	r3, r2
 80134f0:	3303      	adds	r3, #3
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	4413      	add	r3, r2
 80134f6:	ea40 0201 	orr.w	r2, r0, r1
 80134fa:	b2d2      	uxtb	r2, r2
 80134fc:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4]  =  t[2] >>  6;
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	0999      	lsrs	r1, r3, #6
 8013502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013504:	4613      	mov	r3, r2
 8013506:	005b      	lsls	r3, r3, #1
 8013508:	4413      	add	r3, r2
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	4413      	add	r3, r2
 801350e:	3304      	adds	r3, #4
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	4413      	add	r3, r2
 8013514:	b2ca      	uxtb	r2, r1
 8013516:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4] |=  t[3] <<  7;
 8013518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801351a:	4613      	mov	r3, r2
 801351c:	005b      	lsls	r3, r3, #1
 801351e:	4413      	add	r3, r2
 8013520:	009b      	lsls	r3, r3, #2
 8013522:	4413      	add	r3, r2
 8013524:	3304      	adds	r3, #4
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	4413      	add	r3, r2
 801352a:	7818      	ldrb	r0, [r3, #0]
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	b2db      	uxtb	r3, r3
 8013530:	01db      	lsls	r3, r3, #7
 8013532:	b2d9      	uxtb	r1, r3
 8013534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013536:	4613      	mov	r3, r2
 8013538:	005b      	lsls	r3, r3, #1
 801353a:	4413      	add	r3, r2
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	4413      	add	r3, r2
 8013540:	3304      	adds	r3, #4
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	4413      	add	r3, r2
 8013546:	ea40 0201 	orr.w	r2, r0, r1
 801354a:	b2d2      	uxtb	r2, r2
 801354c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 5]  =  t[3] >>  1;
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	0859      	lsrs	r1, r3, #1
 8013552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013554:	4613      	mov	r3, r2
 8013556:	005b      	lsls	r3, r3, #1
 8013558:	4413      	add	r3, r2
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	4413      	add	r3, r2
 801355e:	3305      	adds	r3, #5
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	4413      	add	r3, r2
 8013564:	b2ca      	uxtb	r2, r1
 8013566:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6]  =  t[3] >>  9;
 8013568:	69bb      	ldr	r3, [r7, #24]
 801356a:	0a59      	lsrs	r1, r3, #9
 801356c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801356e:	4613      	mov	r3, r2
 8013570:	005b      	lsls	r3, r3, #1
 8013572:	4413      	add	r3, r2
 8013574:	009b      	lsls	r3, r3, #2
 8013576:	4413      	add	r3, r2
 8013578:	3306      	adds	r3, #6
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	4413      	add	r3, r2
 801357e:	b2ca      	uxtb	r2, r1
 8013580:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6] |=  t[4] <<  4;
 8013582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013584:	4613      	mov	r3, r2
 8013586:	005b      	lsls	r3, r3, #1
 8013588:	4413      	add	r3, r2
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	4413      	add	r3, r2
 801358e:	3306      	adds	r3, #6
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	4413      	add	r3, r2
 8013594:	7818      	ldrb	r0, [r3, #0]
 8013596:	69fb      	ldr	r3, [r7, #28]
 8013598:	b2db      	uxtb	r3, r3
 801359a:	011b      	lsls	r3, r3, #4
 801359c:	b2d9      	uxtb	r1, r3
 801359e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135a0:	4613      	mov	r3, r2
 80135a2:	005b      	lsls	r3, r3, #1
 80135a4:	4413      	add	r3, r2
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	4413      	add	r3, r2
 80135aa:	3306      	adds	r3, #6
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	4413      	add	r3, r2
 80135b0:	ea40 0201 	orr.w	r2, r0, r1
 80135b4:	b2d2      	uxtb	r2, r2
 80135b6:	701a      	strb	r2, [r3, #0]
    r[13*i+ 7]  =  t[4] >>  4;
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	0919      	lsrs	r1, r3, #4
 80135bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135be:	4613      	mov	r3, r2
 80135c0:	005b      	lsls	r3, r3, #1
 80135c2:	4413      	add	r3, r2
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	4413      	add	r3, r2
 80135c8:	3307      	adds	r3, #7
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	4413      	add	r3, r2
 80135ce:	b2ca      	uxtb	r2, r1
 80135d0:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8]  =  t[4] >> 12;
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	0b19      	lsrs	r1, r3, #12
 80135d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135d8:	4613      	mov	r3, r2
 80135da:	005b      	lsls	r3, r3, #1
 80135dc:	4413      	add	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4413      	add	r3, r2
 80135e2:	3308      	adds	r3, #8
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	4413      	add	r3, r2
 80135e8:	b2ca      	uxtb	r2, r1
 80135ea:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8] |=  t[5] <<  1;
 80135ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ee:	4613      	mov	r3, r2
 80135f0:	005b      	lsls	r3, r3, #1
 80135f2:	4413      	add	r3, r2
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	4413      	add	r3, r2
 80135f8:	3308      	adds	r3, #8
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	4413      	add	r3, r2
 80135fe:	7818      	ldrb	r0, [r3, #0]
 8013600:	6a3b      	ldr	r3, [r7, #32]
 8013602:	b2db      	uxtb	r3, r3
 8013604:	005b      	lsls	r3, r3, #1
 8013606:	b2d9      	uxtb	r1, r3
 8013608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801360a:	4613      	mov	r3, r2
 801360c:	005b      	lsls	r3, r3, #1
 801360e:	4413      	add	r3, r2
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	4413      	add	r3, r2
 8013614:	3308      	adds	r3, #8
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	4413      	add	r3, r2
 801361a:	ea40 0201 	orr.w	r2, r0, r1
 801361e:	b2d2      	uxtb	r2, r2
 8013620:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9]  =  t[5] >>  7;
 8013622:	6a3b      	ldr	r3, [r7, #32]
 8013624:	09d9      	lsrs	r1, r3, #7
 8013626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013628:	4613      	mov	r3, r2
 801362a:	005b      	lsls	r3, r3, #1
 801362c:	4413      	add	r3, r2
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	4413      	add	r3, r2
 8013632:	3309      	adds	r3, #9
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	4413      	add	r3, r2
 8013638:	b2ca      	uxtb	r2, r1
 801363a:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9] |=  t[6] <<  6;
 801363c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801363e:	4613      	mov	r3, r2
 8013640:	005b      	lsls	r3, r3, #1
 8013642:	4413      	add	r3, r2
 8013644:	009b      	lsls	r3, r3, #2
 8013646:	4413      	add	r3, r2
 8013648:	3309      	adds	r3, #9
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	4413      	add	r3, r2
 801364e:	7818      	ldrb	r0, [r3, #0]
 8013650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013652:	b2db      	uxtb	r3, r3
 8013654:	019b      	lsls	r3, r3, #6
 8013656:	b2d9      	uxtb	r1, r3
 8013658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801365a:	4613      	mov	r3, r2
 801365c:	005b      	lsls	r3, r3, #1
 801365e:	4413      	add	r3, r2
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	4413      	add	r3, r2
 8013664:	3309      	adds	r3, #9
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	4413      	add	r3, r2
 801366a:	ea40 0201 	orr.w	r2, r0, r1
 801366e:	b2d2      	uxtb	r2, r2
 8013670:	701a      	strb	r2, [r3, #0]
    r[13*i+10]  =  t[6] >>  2;
 8013672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013674:	0899      	lsrs	r1, r3, #2
 8013676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013678:	4613      	mov	r3, r2
 801367a:	005b      	lsls	r3, r3, #1
 801367c:	4413      	add	r3, r2
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	4413      	add	r3, r2
 8013682:	330a      	adds	r3, #10
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	4413      	add	r3, r2
 8013688:	b2ca      	uxtb	r2, r1
 801368a:	701a      	strb	r2, [r3, #0]
    r[13*i+11]  =  t[6] >> 10;
 801368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368e:	0a99      	lsrs	r1, r3, #10
 8013690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013692:	4613      	mov	r3, r2
 8013694:	005b      	lsls	r3, r3, #1
 8013696:	4413      	add	r3, r2
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	4413      	add	r3, r2
 801369c:	330b      	adds	r3, #11
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	4413      	add	r3, r2
 80136a2:	b2ca      	uxtb	r2, r1
 80136a4:	701a      	strb	r2, [r3, #0]
    r[13*i+11] |=  t[7] <<  3;
 80136a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136a8:	4613      	mov	r3, r2
 80136aa:	005b      	lsls	r3, r3, #1
 80136ac:	4413      	add	r3, r2
 80136ae:	009b      	lsls	r3, r3, #2
 80136b0:	4413      	add	r3, r2
 80136b2:	330b      	adds	r3, #11
 80136b4:	687a      	ldr	r2, [r7, #4]
 80136b6:	4413      	add	r3, r2
 80136b8:	7818      	ldrb	r0, [r3, #0]
 80136ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	00db      	lsls	r3, r3, #3
 80136c0:	b2d9      	uxtb	r1, r3
 80136c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136c4:	4613      	mov	r3, r2
 80136c6:	005b      	lsls	r3, r3, #1
 80136c8:	4413      	add	r3, r2
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	4413      	add	r3, r2
 80136ce:	330b      	adds	r3, #11
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	4413      	add	r3, r2
 80136d4:	ea40 0201 	orr.w	r2, r0, r1
 80136d8:	b2d2      	uxtb	r2, r2
 80136da:	701a      	strb	r2, [r3, #0]
    r[13*i+12]  =  t[7] >>  5;
 80136dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136de:	0959      	lsrs	r1, r3, #5
 80136e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136e2:	4613      	mov	r3, r2
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	4413      	add	r3, r2
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	4413      	add	r3, r2
 80136ec:	330c      	adds	r3, #12
 80136ee:	687a      	ldr	r2, [r7, #4]
 80136f0:	4413      	add	r3, r2
 80136f2:	b2ca      	uxtb	r2, r1
 80136f4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/8; ++i) {
 80136f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f8:	3301      	adds	r3, #1
 80136fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fe:	2b1f      	cmp	r3, #31
 8013700:	f67f ae4e 	bls.w	80133a0 <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013704:	bf00      	nop
 8013706:	bf00      	nop
 8013708:	3734      	adds	r7, #52	; 0x34
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr

08013712 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 8013712:	b480      	push	{r7}
 8013714:	b085      	sub	sp, #20
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
 801371a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 801371c:	2300      	movs	r3, #0
 801371e:	60fb      	str	r3, [r7, #12]
 8013720:	e294      	b.n	8013c4c <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x53a>
    r->coeffs[8*i+0]  = a[13*i+0];
 8013722:	68fa      	ldr	r2, [r7, #12]
 8013724:	4613      	mov	r3, r2
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	4413      	add	r3, r2
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	4413      	add	r3, r2
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	4413      	add	r3, r2
 8013732:	7819      	ldrb	r1, [r3, #0]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	00da      	lsls	r2, r3, #3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	00da      	lsls	r2, r3, #3
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013748:	4619      	mov	r1, r3
 801374a:	68fa      	ldr	r2, [r7, #12]
 801374c:	4613      	mov	r3, r2
 801374e:	005b      	lsls	r3, r3, #1
 8013750:	4413      	add	r3, r2
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	4413      	add	r3, r2
 8013756:	3301      	adds	r3, #1
 8013758:	683a      	ldr	r2, [r7, #0]
 801375a:	4413      	add	r3, r2
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	021b      	lsls	r3, r3, #8
 8013760:	4319      	orrs	r1, r3
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	00da      	lsls	r2, r3, #3
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] &= 0x1FFF;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	00da      	lsls	r2, r3, #3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013776:	68fa      	ldr	r2, [r7, #12]
 8013778:	00d2      	lsls	r2, r2, #3
 801377a:	f3c3 010c 	ubfx	r1, r3, #0, #13
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	4613      	mov	r3, r2
 8013788:	005b      	lsls	r3, r3, #1
 801378a:	4413      	add	r3, r2
 801378c:	009b      	lsls	r3, r3, #2
 801378e:	4413      	add	r3, r2
 8013790:	3301      	adds	r3, #1
 8013792:	683a      	ldr	r2, [r7, #0]
 8013794:	4413      	add	r3, r2
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	095b      	lsrs	r3, r3, #5
 801379a:	b2d9      	uxtb	r1, r3
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	00db      	lsls	r3, r3, #3
 80137a0:	1c5a      	adds	r2, r3, #1
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	00db      	lsls	r3, r3, #3
 80137ac:	1c5a      	adds	r2, r3, #1
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b4:	4619      	mov	r1, r3
 80137b6:	68fa      	ldr	r2, [r7, #12]
 80137b8:	4613      	mov	r3, r2
 80137ba:	005b      	lsls	r3, r3, #1
 80137bc:	4413      	add	r3, r2
 80137be:	009b      	lsls	r3, r3, #2
 80137c0:	4413      	add	r3, r2
 80137c2:	3302      	adds	r3, #2
 80137c4:	683a      	ldr	r2, [r7, #0]
 80137c6:	4413      	add	r3, r2
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	00db      	lsls	r3, r3, #3
 80137cc:	4319      	orrs	r1, r3
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	00db      	lsls	r3, r3, #3
 80137d2:	1c5a      	adds	r2, r3, #1
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	00db      	lsls	r3, r3, #3
 80137de:	1c5a      	adds	r2, r3, #1
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137e6:	4619      	mov	r1, r3
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	4613      	mov	r3, r2
 80137ec:	005b      	lsls	r3, r3, #1
 80137ee:	4413      	add	r3, r2
 80137f0:	009b      	lsls	r3, r3, #2
 80137f2:	4413      	add	r3, r2
 80137f4:	3303      	adds	r3, #3
 80137f6:	683a      	ldr	r2, [r7, #0]
 80137f8:	4413      	add	r3, r2
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	02db      	lsls	r3, r3, #11
 80137fe:	4319      	orrs	r1, r3
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	00db      	lsls	r3, r3, #3
 8013804:	1c5a      	adds	r2, r3, #1
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] &= 0x1FFF;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	00db      	lsls	r3, r3, #3
 8013810:	1c5a      	adds	r2, r3, #1
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013818:	68fa      	ldr	r2, [r7, #12]
 801381a:	00d2      	lsls	r2, r2, #3
 801381c:	3201      	adds	r2, #1
 801381e:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	4613      	mov	r3, r2
 801382c:	005b      	lsls	r3, r3, #1
 801382e:	4413      	add	r3, r2
 8013830:	009b      	lsls	r3, r3, #2
 8013832:	4413      	add	r3, r2
 8013834:	3303      	adds	r3, #3
 8013836:	683a      	ldr	r2, [r7, #0]
 8013838:	4413      	add	r3, r2
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	089b      	lsrs	r3, r3, #2
 801383e:	b2d9      	uxtb	r1, r3
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	00db      	lsls	r3, r3, #3
 8013844:	1c9a      	adds	r2, r3, #2
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	00db      	lsls	r3, r3, #3
 8013850:	1c9a      	adds	r2, r3, #2
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013858:	4619      	mov	r1, r3
 801385a:	68fa      	ldr	r2, [r7, #12]
 801385c:	4613      	mov	r3, r2
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	4413      	add	r3, r2
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	4413      	add	r3, r2
 8013866:	3304      	adds	r3, #4
 8013868:	683a      	ldr	r2, [r7, #0]
 801386a:	4413      	add	r3, r2
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	019b      	lsls	r3, r3, #6
 8013870:	4319      	orrs	r1, r3
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	1c9a      	adds	r2, r3, #2
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] &= 0x1FFF;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	00db      	lsls	r3, r3, #3
 8013882:	1c9a      	adds	r2, r3, #2
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801388a:	68fa      	ldr	r2, [r7, #12]
 801388c:	00d2      	lsls	r2, r2, #3
 801388e:	3202      	adds	r2, #2
 8013890:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 801389a:	68fa      	ldr	r2, [r7, #12]
 801389c:	4613      	mov	r3, r2
 801389e:	005b      	lsls	r3, r3, #1
 80138a0:	4413      	add	r3, r2
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	4413      	add	r3, r2
 80138a6:	3304      	adds	r3, #4
 80138a8:	683a      	ldr	r2, [r7, #0]
 80138aa:	4413      	add	r3, r2
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	09db      	lsrs	r3, r3, #7
 80138b0:	b2d9      	uxtb	r1, r3
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	00db      	lsls	r3, r3, #3
 80138b6:	1cda      	adds	r2, r3, #3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	00db      	lsls	r3, r3, #3
 80138c2:	1cda      	adds	r2, r3, #3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ca:	4619      	mov	r1, r3
 80138cc:	68fa      	ldr	r2, [r7, #12]
 80138ce:	4613      	mov	r3, r2
 80138d0:	005b      	lsls	r3, r3, #1
 80138d2:	4413      	add	r3, r2
 80138d4:	009b      	lsls	r3, r3, #2
 80138d6:	4413      	add	r3, r2
 80138d8:	3305      	adds	r3, #5
 80138da:	683a      	ldr	r2, [r7, #0]
 80138dc:	4413      	add	r3, r2
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	005b      	lsls	r3, r3, #1
 80138e2:	4319      	orrs	r1, r3
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	00db      	lsls	r3, r3, #3
 80138e8:	1cda      	adds	r2, r3, #3
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	00db      	lsls	r3, r3, #3
 80138f4:	1cda      	adds	r2, r3, #3
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138fc:	4619      	mov	r1, r3
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	4613      	mov	r3, r2
 8013902:	005b      	lsls	r3, r3, #1
 8013904:	4413      	add	r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	4413      	add	r3, r2
 801390a:	3306      	adds	r3, #6
 801390c:	683a      	ldr	r2, [r7, #0]
 801390e:	4413      	add	r3, r2
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	025b      	lsls	r3, r3, #9
 8013914:	4319      	orrs	r1, r3
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	00db      	lsls	r3, r3, #3
 801391a:	1cda      	adds	r2, r3, #3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] &= 0x1FFF;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	00db      	lsls	r3, r3, #3
 8013926:	1cda      	adds	r2, r3, #3
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801392e:	68fa      	ldr	r2, [r7, #12]
 8013930:	00d2      	lsls	r2, r2, #3
 8013932:	3203      	adds	r2, #3
 8013934:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	4613      	mov	r3, r2
 8013942:	005b      	lsls	r3, r3, #1
 8013944:	4413      	add	r3, r2
 8013946:	009b      	lsls	r3, r3, #2
 8013948:	4413      	add	r3, r2
 801394a:	3306      	adds	r3, #6
 801394c:	683a      	ldr	r2, [r7, #0]
 801394e:	4413      	add	r3, r2
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	091b      	lsrs	r3, r3, #4
 8013954:	b2d9      	uxtb	r1, r3
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	00db      	lsls	r3, r3, #3
 801395a:	1d1a      	adds	r2, r3, #4
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	00db      	lsls	r3, r3, #3
 8013966:	1d1a      	adds	r2, r3, #4
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801396e:	4619      	mov	r1, r3
 8013970:	68fa      	ldr	r2, [r7, #12]
 8013972:	4613      	mov	r3, r2
 8013974:	005b      	lsls	r3, r3, #1
 8013976:	4413      	add	r3, r2
 8013978:	009b      	lsls	r3, r3, #2
 801397a:	4413      	add	r3, r2
 801397c:	3307      	adds	r3, #7
 801397e:	683a      	ldr	r2, [r7, #0]
 8013980:	4413      	add	r3, r2
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	011b      	lsls	r3, r3, #4
 8013986:	4319      	orrs	r1, r3
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	00db      	lsls	r3, r3, #3
 801398c:	1d1a      	adds	r2, r3, #4
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	00db      	lsls	r3, r3, #3
 8013998:	1d1a      	adds	r2, r3, #4
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139a0:	4619      	mov	r1, r3
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	4613      	mov	r3, r2
 80139a6:	005b      	lsls	r3, r3, #1
 80139a8:	4413      	add	r3, r2
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	4413      	add	r3, r2
 80139ae:	3308      	adds	r3, #8
 80139b0:	683a      	ldr	r2, [r7, #0]
 80139b2:	4413      	add	r3, r2
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	031b      	lsls	r3, r3, #12
 80139b8:	4319      	orrs	r1, r3
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	00db      	lsls	r3, r3, #3
 80139be:	1d1a      	adds	r2, r3, #4
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] &= 0x1FFF;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	00db      	lsls	r3, r3, #3
 80139ca:	1d1a      	adds	r2, r3, #4
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	00d2      	lsls	r2, r2, #3
 80139d6:	3204      	adds	r2, #4
 80139d8:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 80139e2:	68fa      	ldr	r2, [r7, #12]
 80139e4:	4613      	mov	r3, r2
 80139e6:	005b      	lsls	r3, r3, #1
 80139e8:	4413      	add	r3, r2
 80139ea:	009b      	lsls	r3, r3, #2
 80139ec:	4413      	add	r3, r2
 80139ee:	3308      	adds	r3, #8
 80139f0:	683a      	ldr	r2, [r7, #0]
 80139f2:	4413      	add	r3, r2
 80139f4:	781b      	ldrb	r3, [r3, #0]
 80139f6:	085b      	lsrs	r3, r3, #1
 80139f8:	b2d9      	uxtb	r1, r3
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	00db      	lsls	r3, r3, #3
 80139fe:	1d5a      	adds	r2, r3, #5
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	00db      	lsls	r3, r3, #3
 8013a0a:	1d5a      	adds	r2, r3, #5
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a12:	4619      	mov	r1, r3
 8013a14:	68fa      	ldr	r2, [r7, #12]
 8013a16:	4613      	mov	r3, r2
 8013a18:	005b      	lsls	r3, r3, #1
 8013a1a:	4413      	add	r3, r2
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	4413      	add	r3, r2
 8013a20:	3309      	adds	r3, #9
 8013a22:	683a      	ldr	r2, [r7, #0]
 8013a24:	4413      	add	r3, r2
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	01db      	lsls	r3, r3, #7
 8013a2a:	4319      	orrs	r1, r3
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	00db      	lsls	r3, r3, #3
 8013a30:	1d5a      	adds	r2, r3, #5
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] &= 0x1FFF;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	00db      	lsls	r3, r3, #3
 8013a3c:	1d5a      	adds	r2, r3, #5
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a44:	68fa      	ldr	r2, [r7, #12]
 8013a46:	00d2      	lsls	r2, r2, #3
 8013a48:	3205      	adds	r2, #5
 8013a4a:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	4613      	mov	r3, r2
 8013a58:	005b      	lsls	r3, r3, #1
 8013a5a:	4413      	add	r3, r2
 8013a5c:	009b      	lsls	r3, r3, #2
 8013a5e:	4413      	add	r3, r2
 8013a60:	3309      	adds	r3, #9
 8013a62:	683a      	ldr	r2, [r7, #0]
 8013a64:	4413      	add	r3, r2
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	099b      	lsrs	r3, r3, #6
 8013a6a:	b2d9      	uxtb	r1, r3
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	00db      	lsls	r3, r3, #3
 8013a70:	1d9a      	adds	r2, r3, #6
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	1d9a      	adds	r2, r3, #6
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a84:	4619      	mov	r1, r3
 8013a86:	68fa      	ldr	r2, [r7, #12]
 8013a88:	4613      	mov	r3, r2
 8013a8a:	005b      	lsls	r3, r3, #1
 8013a8c:	4413      	add	r3, r2
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	4413      	add	r3, r2
 8013a92:	330a      	adds	r3, #10
 8013a94:	683a      	ldr	r2, [r7, #0]
 8013a96:	4413      	add	r3, r2
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	4319      	orrs	r1, r3
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	00db      	lsls	r3, r3, #3
 8013aa2:	1d9a      	adds	r2, r3, #6
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	00db      	lsls	r3, r3, #3
 8013aae:	1d9a      	adds	r2, r3, #6
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	4613      	mov	r3, r2
 8013abc:	005b      	lsls	r3, r3, #1
 8013abe:	4413      	add	r3, r2
 8013ac0:	009b      	lsls	r3, r3, #2
 8013ac2:	4413      	add	r3, r2
 8013ac4:	330b      	adds	r3, #11
 8013ac6:	683a      	ldr	r2, [r7, #0]
 8013ac8:	4413      	add	r3, r2
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	029b      	lsls	r3, r3, #10
 8013ace:	4319      	orrs	r1, r3
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	00db      	lsls	r3, r3, #3
 8013ad4:	1d9a      	adds	r2, r3, #6
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] &= 0x1FFF;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	00db      	lsls	r3, r3, #3
 8013ae0:	1d9a      	adds	r2, r3, #6
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae8:	68fa      	ldr	r2, [r7, #12]
 8013aea:	00d2      	lsls	r2, r2, #3
 8013aec:	3206      	adds	r2, #6
 8013aee:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	4613      	mov	r3, r2
 8013afc:	005b      	lsls	r3, r3, #1
 8013afe:	4413      	add	r3, r2
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	4413      	add	r3, r2
 8013b04:	330b      	adds	r3, #11
 8013b06:	683a      	ldr	r2, [r7, #0]
 8013b08:	4413      	add	r3, r2
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	08db      	lsrs	r3, r3, #3
 8013b0e:	b2d9      	uxtb	r1, r3
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	00db      	lsls	r3, r3, #3
 8013b14:	1dda      	adds	r2, r3, #7
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	00db      	lsls	r3, r3, #3
 8013b20:	1dda      	adds	r2, r3, #7
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b28:	4619      	mov	r1, r3
 8013b2a:	68fa      	ldr	r2, [r7, #12]
 8013b2c:	4613      	mov	r3, r2
 8013b2e:	005b      	lsls	r3, r3, #1
 8013b30:	4413      	add	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	330c      	adds	r3, #12
 8013b38:	683a      	ldr	r2, [r7, #0]
 8013b3a:	4413      	add	r3, r2
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	015b      	lsls	r3, r3, #5
 8013b40:	4319      	orrs	r1, r3
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	00db      	lsls	r3, r3, #3
 8013b46:	1dda      	adds	r2, r3, #7
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] &= 0x1FFF;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	1dda      	adds	r2, r3, #7
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b5a:	68fa      	ldr	r2, [r7, #12]
 8013b5c:	00d2      	lsls	r2, r2, #3
 8013b5e:	3207      	adds	r2, #7
 8013b60:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	00da      	lsls	r2, r3, #3
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b74:	68fa      	ldr	r2, [r7, #12]
 8013b76:	00d2      	lsls	r2, r2, #3
 8013b78:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	00db      	lsls	r3, r3, #3
 8013b86:	1c5a      	adds	r2, r3, #1
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b8e:	68fa      	ldr	r2, [r7, #12]
 8013b90:	00d2      	lsls	r2, r2, #3
 8013b92:	3201      	adds	r2, #1
 8013b94:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	00db      	lsls	r3, r3, #3
 8013ba2:	1c9a      	adds	r2, r3, #2
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013baa:	68fa      	ldr	r2, [r7, #12]
 8013bac:	00d2      	lsls	r2, r2, #3
 8013bae:	3202      	adds	r2, #2
 8013bb0:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	00db      	lsls	r3, r3, #3
 8013bbe:	1cda      	adds	r2, r3, #3
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bc6:	68fa      	ldr	r2, [r7, #12]
 8013bc8:	00d2      	lsls	r2, r2, #3
 8013bca:	3203      	adds	r2, #3
 8013bcc:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	00db      	lsls	r3, r3, #3
 8013bda:	1d1a      	adds	r2, r3, #4
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	00d2      	lsls	r2, r2, #3
 8013be6:	3204      	adds	r2, #4
 8013be8:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	00db      	lsls	r3, r3, #3
 8013bf6:	1d5a      	adds	r2, r3, #5
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	00d2      	lsls	r2, r2, #3
 8013c02:	3205      	adds	r2, #5
 8013c04:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	00db      	lsls	r3, r3, #3
 8013c12:	1d9a      	adds	r2, r3, #6
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c1a:	68fa      	ldr	r2, [r7, #12]
 8013c1c:	00d2      	lsls	r2, r2, #3
 8013c1e:	3206      	adds	r2, #6
 8013c20:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	00db      	lsls	r3, r3, #3
 8013c2e:	1dda      	adds	r2, r3, #7
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	00d2      	lsls	r2, r2, #3
 8013c3a:	3207      	adds	r2, #7
 8013c3c:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/8; ++i) {
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	3301      	adds	r3, #1
 8013c4a:	60fb      	str	r3, [r7, #12]
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	2b1f      	cmp	r3, #31
 8013c50:	f67f ad67 	bls.w	8013722 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013c54:	bf00      	nop
 8013c56:	bf00      	nop
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr

08013c62 <pqcrystals_dilithium2aes_r_ref_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 8013c62:	b480      	push	{r7}
 8013c64:	b089      	sub	sp, #36	; 0x24
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
 8013c6a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	61fb      	str	r3, [r7, #28]
 8013c70:	e0cb      	b.n	8013e0a <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x1a8>
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	009a      	lsls	r2, r3, #2
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c7c:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013c80:	60fb      	str	r3, [r7, #12]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	1c5a      	adds	r2, r3, #1
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c8e:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013c92:	613b      	str	r3, [r7, #16]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	009b      	lsls	r3, r3, #2
 8013c98:	1c9a      	adds	r2, r3, #2
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca0:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013ca4:	617b      	str	r3, [r7, #20]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	009b      	lsls	r3, r3, #2
 8013caa:	1cda      	adds	r2, r3, #3
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cb2:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8013cb6:	61bb      	str	r3, [r7, #24]

    r[9*i+0]  = t[0];
 8013cb8:	68f9      	ldr	r1, [r7, #12]
 8013cba:	69fa      	ldr	r2, [r7, #28]
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	00db      	lsls	r3, r3, #3
 8013cc0:	4413      	add	r3, r2
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	b2ca      	uxtb	r2, r1
 8013cc8:	701a      	strb	r2, [r3, #0]
    r[9*i+1]  = t[0] >> 8;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	0a19      	lsrs	r1, r3, #8
 8013cce:	69fa      	ldr	r2, [r7, #28]
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	00db      	lsls	r3, r3, #3
 8013cd4:	4413      	add	r3, r2
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	4413      	add	r3, r2
 8013cdc:	b2ca      	uxtb	r2, r1
 8013cde:	701a      	strb	r2, [r3, #0]
    r[9*i+2]  = t[0] >> 16;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	0c19      	lsrs	r1, r3, #16
 8013ce4:	69fa      	ldr	r2, [r7, #28]
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	00db      	lsls	r3, r3, #3
 8013cea:	4413      	add	r3, r2
 8013cec:	3302      	adds	r3, #2
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	4413      	add	r3, r2
 8013cf2:	b2ca      	uxtb	r2, r1
 8013cf4:	701a      	strb	r2, [r3, #0]
    r[9*i+2] |= t[1] << 2;
 8013cf6:	69fa      	ldr	r2, [r7, #28]
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	00db      	lsls	r3, r3, #3
 8013cfc:	4413      	add	r3, r2
 8013cfe:	3302      	adds	r3, #2
 8013d00:	687a      	ldr	r2, [r7, #4]
 8013d02:	4413      	add	r3, r2
 8013d04:	7818      	ldrb	r0, [r3, #0]
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	009b      	lsls	r3, r3, #2
 8013d0c:	b2d9      	uxtb	r1, r3
 8013d0e:	69fa      	ldr	r2, [r7, #28]
 8013d10:	4613      	mov	r3, r2
 8013d12:	00db      	lsls	r3, r3, #3
 8013d14:	4413      	add	r3, r2
 8013d16:	3302      	adds	r3, #2
 8013d18:	687a      	ldr	r2, [r7, #4]
 8013d1a:	4413      	add	r3, r2
 8013d1c:	ea40 0201 	orr.w	r2, r0, r1
 8013d20:	b2d2      	uxtb	r2, r2
 8013d22:	701a      	strb	r2, [r3, #0]
    r[9*i+3]  = t[1] >> 6;
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	0999      	lsrs	r1, r3, #6
 8013d28:	69fa      	ldr	r2, [r7, #28]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	00db      	lsls	r3, r3, #3
 8013d2e:	4413      	add	r3, r2
 8013d30:	3303      	adds	r3, #3
 8013d32:	687a      	ldr	r2, [r7, #4]
 8013d34:	4413      	add	r3, r2
 8013d36:	b2ca      	uxtb	r2, r1
 8013d38:	701a      	strb	r2, [r3, #0]
    r[9*i+4]  = t[1] >> 14;
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	0b99      	lsrs	r1, r3, #14
 8013d3e:	69fa      	ldr	r2, [r7, #28]
 8013d40:	4613      	mov	r3, r2
 8013d42:	00db      	lsls	r3, r3, #3
 8013d44:	4413      	add	r3, r2
 8013d46:	3304      	adds	r3, #4
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	b2ca      	uxtb	r2, r1
 8013d4e:	701a      	strb	r2, [r3, #0]
    r[9*i+4] |= t[2] << 4;
 8013d50:	69fa      	ldr	r2, [r7, #28]
 8013d52:	4613      	mov	r3, r2
 8013d54:	00db      	lsls	r3, r3, #3
 8013d56:	4413      	add	r3, r2
 8013d58:	3304      	adds	r3, #4
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	7818      	ldrb	r0, [r3, #0]
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	011b      	lsls	r3, r3, #4
 8013d66:	b2d9      	uxtb	r1, r3
 8013d68:	69fa      	ldr	r2, [r7, #28]
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	00db      	lsls	r3, r3, #3
 8013d6e:	4413      	add	r3, r2
 8013d70:	3304      	adds	r3, #4
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	4413      	add	r3, r2
 8013d76:	ea40 0201 	orr.w	r2, r0, r1
 8013d7a:	b2d2      	uxtb	r2, r2
 8013d7c:	701a      	strb	r2, [r3, #0]
    r[9*i+5]  = t[2] >> 4;
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	0919      	lsrs	r1, r3, #4
 8013d82:	69fa      	ldr	r2, [r7, #28]
 8013d84:	4613      	mov	r3, r2
 8013d86:	00db      	lsls	r3, r3, #3
 8013d88:	4413      	add	r3, r2
 8013d8a:	3305      	adds	r3, #5
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	4413      	add	r3, r2
 8013d90:	b2ca      	uxtb	r2, r1
 8013d92:	701a      	strb	r2, [r3, #0]
    r[9*i+6]  = t[2] >> 12;
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	0b19      	lsrs	r1, r3, #12
 8013d98:	69fa      	ldr	r2, [r7, #28]
 8013d9a:	4613      	mov	r3, r2
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	4413      	add	r3, r2
 8013da0:	3306      	adds	r3, #6
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	4413      	add	r3, r2
 8013da6:	b2ca      	uxtb	r2, r1
 8013da8:	701a      	strb	r2, [r3, #0]
    r[9*i+6] |= t[3] << 6;
 8013daa:	69fa      	ldr	r2, [r7, #28]
 8013dac:	4613      	mov	r3, r2
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	4413      	add	r3, r2
 8013db2:	3306      	adds	r3, #6
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	4413      	add	r3, r2
 8013db8:	7818      	ldrb	r0, [r3, #0]
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	019b      	lsls	r3, r3, #6
 8013dc0:	b2d9      	uxtb	r1, r3
 8013dc2:	69fa      	ldr	r2, [r7, #28]
 8013dc4:	4613      	mov	r3, r2
 8013dc6:	00db      	lsls	r3, r3, #3
 8013dc8:	4413      	add	r3, r2
 8013dca:	3306      	adds	r3, #6
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	4413      	add	r3, r2
 8013dd0:	ea40 0201 	orr.w	r2, r0, r1
 8013dd4:	b2d2      	uxtb	r2, r2
 8013dd6:	701a      	strb	r2, [r3, #0]
    r[9*i+7]  = t[3] >> 2;
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	0899      	lsrs	r1, r3, #2
 8013ddc:	69fa      	ldr	r2, [r7, #28]
 8013dde:	4613      	mov	r3, r2
 8013de0:	00db      	lsls	r3, r3, #3
 8013de2:	4413      	add	r3, r2
 8013de4:	3307      	adds	r3, #7
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	4413      	add	r3, r2
 8013dea:	b2ca      	uxtb	r2, r1
 8013dec:	701a      	strb	r2, [r3, #0]
    r[9*i+8]  = t[3] >> 10;
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	0a99      	lsrs	r1, r3, #10
 8013df2:	69fa      	ldr	r2, [r7, #28]
 8013df4:	4613      	mov	r3, r2
 8013df6:	00db      	lsls	r3, r3, #3
 8013df8:	4413      	add	r3, r2
 8013dfa:	3308      	adds	r3, #8
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	4413      	add	r3, r2
 8013e00:	b2ca      	uxtb	r2, r1
 8013e02:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8013e04:	69fb      	ldr	r3, [r7, #28]
 8013e06:	3301      	adds	r3, #1
 8013e08:	61fb      	str	r3, [r7, #28]
 8013e0a:	69fb      	ldr	r3, [r7, #28]
 8013e0c:	2b3f      	cmp	r3, #63	; 0x3f
 8013e0e:	f67f af30 	bls.w	8013c72 <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x10>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8013e12:	bf00      	nop
 8013e14:	bf00      	nop
 8013e16:	3724      	adds	r7, #36	; 0x24
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr

08013e20 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 8013e20:	b480      	push	{r7}
 8013e22:	b085      	sub	sp, #20
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	60fb      	str	r3, [r7, #12]
 8013e2e:	e15e      	b.n	80140ee <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	4613      	mov	r3, r2
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	4413      	add	r3, r2
 8013e38:	683a      	ldr	r2, [r7, #0]
 8013e3a:	4413      	add	r3, r2
 8013e3c:	7819      	ldrb	r1, [r3, #0]
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	009a      	lsls	r2, r3, #2
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	009a      	lsls	r2, r3, #2
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e52:	4619      	mov	r1, r3
 8013e54:	68fa      	ldr	r2, [r7, #12]
 8013e56:	4613      	mov	r3, r2
 8013e58:	00db      	lsls	r3, r3, #3
 8013e5a:	4413      	add	r3, r2
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	683a      	ldr	r2, [r7, #0]
 8013e60:	4413      	add	r3, r2
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	021b      	lsls	r3, r3, #8
 8013e66:	4319      	orrs	r1, r3
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	009a      	lsls	r2, r3, #2
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	009a      	lsls	r2, r3, #2
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	68fa      	ldr	r2, [r7, #12]
 8013e80:	4613      	mov	r3, r2
 8013e82:	00db      	lsls	r3, r3, #3
 8013e84:	4413      	add	r3, r2
 8013e86:	3302      	adds	r3, #2
 8013e88:	683a      	ldr	r2, [r7, #0]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	041b      	lsls	r3, r3, #16
 8013e90:	4319      	orrs	r1, r3
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	009a      	lsls	r2, r3, #2
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	009a      	lsls	r2, r3, #2
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	0092      	lsls	r2, r2, #2
 8013eaa:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8013eb4:	68fa      	ldr	r2, [r7, #12]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	00db      	lsls	r3, r3, #3
 8013eba:	4413      	add	r3, r2
 8013ebc:	3302      	adds	r3, #2
 8013ebe:	683a      	ldr	r2, [r7, #0]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	089b      	lsrs	r3, r3, #2
 8013ec6:	b2d9      	uxtb	r1, r3
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	009b      	lsls	r3, r3, #2
 8013ecc:	1c5a      	adds	r2, r3, #1
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	1c5a      	adds	r2, r3, #1
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	68fa      	ldr	r2, [r7, #12]
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	00db      	lsls	r3, r3, #3
 8013ee8:	4413      	add	r3, r2
 8013eea:	3303      	adds	r3, #3
 8013eec:	683a      	ldr	r2, [r7, #0]
 8013eee:	4413      	add	r3, r2
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	019b      	lsls	r3, r3, #6
 8013ef4:	4319      	orrs	r1, r3
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	1c5a      	adds	r2, r3, #1
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	009b      	lsls	r3, r3, #2
 8013f06:	1c5a      	adds	r2, r3, #1
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f0e:	4619      	mov	r1, r3
 8013f10:	68fa      	ldr	r2, [r7, #12]
 8013f12:	4613      	mov	r3, r2
 8013f14:	00db      	lsls	r3, r3, #3
 8013f16:	4413      	add	r3, r2
 8013f18:	3304      	adds	r3, #4
 8013f1a:	683a      	ldr	r2, [r7, #0]
 8013f1c:	4413      	add	r3, r2
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	039b      	lsls	r3, r3, #14
 8013f22:	4319      	orrs	r1, r3
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	1c5a      	adds	r2, r3, #1
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	009b      	lsls	r3, r3, #2
 8013f34:	1c5a      	adds	r2, r3, #1
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f3c:	68fa      	ldr	r2, [r7, #12]
 8013f3e:	0092      	lsls	r2, r2, #2
 8013f40:	3201      	adds	r2, #1
 8013f42:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 8013f4c:	68fa      	ldr	r2, [r7, #12]
 8013f4e:	4613      	mov	r3, r2
 8013f50:	00db      	lsls	r3, r3, #3
 8013f52:	4413      	add	r3, r2
 8013f54:	3304      	adds	r3, #4
 8013f56:	683a      	ldr	r2, [r7, #0]
 8013f58:	4413      	add	r3, r2
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	091b      	lsrs	r3, r3, #4
 8013f5e:	b2d9      	uxtb	r1, r3
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	009b      	lsls	r3, r3, #2
 8013f64:	1c9a      	adds	r2, r3, #2
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	009b      	lsls	r3, r3, #2
 8013f70:	1c9a      	adds	r2, r3, #2
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f78:	4619      	mov	r1, r3
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	4613      	mov	r3, r2
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	4413      	add	r3, r2
 8013f82:	3305      	adds	r3, #5
 8013f84:	683a      	ldr	r2, [r7, #0]
 8013f86:	4413      	add	r3, r2
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	011b      	lsls	r3, r3, #4
 8013f8c:	4319      	orrs	r1, r3
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	1c9a      	adds	r2, r3, #2
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	009b      	lsls	r3, r3, #2
 8013f9e:	1c9a      	adds	r2, r3, #2
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	68fa      	ldr	r2, [r7, #12]
 8013faa:	4613      	mov	r3, r2
 8013fac:	00db      	lsls	r3, r3, #3
 8013fae:	4413      	add	r3, r2
 8013fb0:	3306      	adds	r3, #6
 8013fb2:	683a      	ldr	r2, [r7, #0]
 8013fb4:	4413      	add	r3, r2
 8013fb6:	781b      	ldrb	r3, [r3, #0]
 8013fb8:	031b      	lsls	r3, r3, #12
 8013fba:	4319      	orrs	r1, r3
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	1c9a      	adds	r2, r3, #2
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	1c9a      	adds	r2, r3, #2
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd4:	68fa      	ldr	r2, [r7, #12]
 8013fd6:	0092      	lsls	r2, r2, #2
 8013fd8:	3202      	adds	r2, #2
 8013fda:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	4613      	mov	r3, r2
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	4413      	add	r3, r2
 8013fec:	3306      	adds	r3, #6
 8013fee:	683a      	ldr	r2, [r7, #0]
 8013ff0:	4413      	add	r3, r2
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	099b      	lsrs	r3, r3, #6
 8013ff6:	b2d9      	uxtb	r1, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	009b      	lsls	r3, r3, #2
 8013ffc:	1cda      	adds	r2, r3, #3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	009b      	lsls	r3, r3, #2
 8014008:	1cda      	adds	r2, r3, #3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014010:	4619      	mov	r1, r3
 8014012:	68fa      	ldr	r2, [r7, #12]
 8014014:	4613      	mov	r3, r2
 8014016:	00db      	lsls	r3, r3, #3
 8014018:	4413      	add	r3, r2
 801401a:	3307      	adds	r3, #7
 801401c:	683a      	ldr	r2, [r7, #0]
 801401e:	4413      	add	r3, r2
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	009b      	lsls	r3, r3, #2
 8014024:	4319      	orrs	r1, r3
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	009b      	lsls	r3, r3, #2
 801402a:	1cda      	adds	r2, r3, #3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	009b      	lsls	r3, r3, #2
 8014036:	1cda      	adds	r2, r3, #3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801403e:	4619      	mov	r1, r3
 8014040:	68fa      	ldr	r2, [r7, #12]
 8014042:	4613      	mov	r3, r2
 8014044:	00db      	lsls	r3, r3, #3
 8014046:	4413      	add	r3, r2
 8014048:	3308      	adds	r3, #8
 801404a:	683a      	ldr	r2, [r7, #0]
 801404c:	4413      	add	r3, r2
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	029b      	lsls	r3, r3, #10
 8014052:	4319      	orrs	r1, r3
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	1cda      	adds	r2, r3, #3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	009b      	lsls	r3, r3, #2
 8014064:	1cda      	adds	r2, r3, #3
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801406c:	68fa      	ldr	r2, [r7, #12]
 801406e:	0092      	lsls	r2, r2, #2
 8014070:	3203      	adds	r2, #3
 8014072:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	009a      	lsls	r2, r3, #2
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014086:	68fa      	ldr	r2, [r7, #12]
 8014088:	0092      	lsls	r2, r2, #2
 801408a:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	009b      	lsls	r3, r3, #2
 8014098:	1c5a      	adds	r2, r3, #1
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140a0:	68fa      	ldr	r2, [r7, #12]
 80140a2:	0092      	lsls	r2, r2, #2
 80140a4:	3201      	adds	r2, #1
 80140a6:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	009b      	lsls	r3, r3, #2
 80140b4:	1c9a      	adds	r2, r3, #2
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	0092      	lsls	r2, r2, #2
 80140c0:	3202      	adds	r2, #2
 80140c2:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	1cda      	adds	r2, r3, #3
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	0092      	lsls	r2, r2, #2
 80140dc:	3203      	adds	r2, #3
 80140de:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	3301      	adds	r3, #1
 80140ec:	60fb      	str	r3, [r7, #12]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2b3f      	cmp	r3, #63	; 0x3f
 80140f2:	f67f ae9d 	bls.w	8013e30 <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 80140f6:	bf00      	nop
 80140f8:	bf00      	nop
 80140fa:	3714      	adds	r7, #20
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr

08014104 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 8014104:	b480      	push	{r7}
 8014106:	b085      	sub	sp, #20
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q_-1)/88
  for(i = 0; i < N_/4; ++i) {
 801410e:	2300      	movs	r3, #0
 8014110:	60fb      	str	r3, [r7, #12]
 8014112:	e081      	b.n	8014218 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x114>
    r[3*i+0]  = a->coeffs[4*i+0];
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	009a      	lsls	r2, r3, #2
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801411e:	68fa      	ldr	r2, [r7, #12]
 8014120:	4613      	mov	r3, r2
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	4413      	add	r3, r2
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	4413      	add	r3, r2
 801412a:	b2ca      	uxtb	r2, r1
 801412c:	701a      	strb	r2, [r3, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	4613      	mov	r3, r2
 8014132:	005b      	lsls	r3, r3, #1
 8014134:	4413      	add	r3, r2
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	4413      	add	r3, r2
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	b25a      	sxtb	r2, r3
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	1c59      	adds	r1, r3, #1
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801414a:	019b      	lsls	r3, r3, #6
 801414c:	b25b      	sxtb	r3, r3
 801414e:	4313      	orrs	r3, r2
 8014150:	b259      	sxtb	r1, r3
 8014152:	68fa      	ldr	r2, [r7, #12]
 8014154:	4613      	mov	r3, r2
 8014156:	005b      	lsls	r3, r3, #1
 8014158:	4413      	add	r3, r2
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	4413      	add	r3, r2
 801415e:	b2ca      	uxtb	r2, r1
 8014160:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	1c5a      	adds	r2, r3, #1
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801416e:	1099      	asrs	r1, r3, #2
 8014170:	68fa      	ldr	r2, [r7, #12]
 8014172:	4613      	mov	r3, r2
 8014174:	005b      	lsls	r3, r3, #1
 8014176:	4413      	add	r3, r2
 8014178:	3301      	adds	r3, #1
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	4413      	add	r3, r2
 801417e:	b2ca      	uxtb	r2, r1
 8014180:	701a      	strb	r2, [r3, #0]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8014182:	68fa      	ldr	r2, [r7, #12]
 8014184:	4613      	mov	r3, r2
 8014186:	005b      	lsls	r3, r3, #1
 8014188:	4413      	add	r3, r2
 801418a:	3301      	adds	r3, #1
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	4413      	add	r3, r2
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	b25a      	sxtb	r2, r3
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	009b      	lsls	r3, r3, #2
 8014198:	1c99      	adds	r1, r3, #2
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141a0:	011b      	lsls	r3, r3, #4
 80141a2:	b25b      	sxtb	r3, r3
 80141a4:	4313      	orrs	r3, r2
 80141a6:	b259      	sxtb	r1, r3
 80141a8:	68fa      	ldr	r2, [r7, #12]
 80141aa:	4613      	mov	r3, r2
 80141ac:	005b      	lsls	r3, r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	3301      	adds	r3, #1
 80141b2:	687a      	ldr	r2, [r7, #4]
 80141b4:	4413      	add	r3, r2
 80141b6:	b2ca      	uxtb	r2, r1
 80141b8:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	009b      	lsls	r3, r3, #2
 80141be:	1c9a      	adds	r2, r3, #2
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141c6:	1119      	asrs	r1, r3, #4
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	4613      	mov	r3, r2
 80141cc:	005b      	lsls	r3, r3, #1
 80141ce:	4413      	add	r3, r2
 80141d0:	3302      	adds	r3, #2
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	4413      	add	r3, r2
 80141d6:	b2ca      	uxtb	r2, r1
 80141d8:	701a      	strb	r2, [r3, #0]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	4613      	mov	r3, r2
 80141de:	005b      	lsls	r3, r3, #1
 80141e0:	4413      	add	r3, r2
 80141e2:	3302      	adds	r3, #2
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	4413      	add	r3, r2
 80141e8:	781b      	ldrb	r3, [r3, #0]
 80141ea:	b25a      	sxtb	r2, r3
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	1cd9      	adds	r1, r3, #3
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	b25b      	sxtb	r3, r3
 80141fc:	4313      	orrs	r3, r2
 80141fe:	b259      	sxtb	r1, r3
 8014200:	68fa      	ldr	r2, [r7, #12]
 8014202:	4613      	mov	r3, r2
 8014204:	005b      	lsls	r3, r3, #1
 8014206:	4413      	add	r3, r2
 8014208:	3302      	adds	r3, #2
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	4413      	add	r3, r2
 801420e:	b2ca      	uxtb	r2, r1
 8014210:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	3301      	adds	r3, #1
 8014216:	60fb      	str	r3, [r7, #12]
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	2b3f      	cmp	r3, #63	; 0x3f
 801421c:	f67f af7a 	bls.w	8014114 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x10>
  for(i = 0; i < N_/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 8014220:	bf00      	nop
 8014222:	bf00      	nop
 8014224:	3714      	adds	r7, #20
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr

0801422e <polyvec_matrix_poly_smul_montgomery>:
*
* Arguments:   - polyveck t: output vector after multiplication of A*s1+s2
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors s1 and s2
**************************************************/
void polyvec_matrix_poly_smul_montgomery(polyveck *t, const uint8_t rho[], const uint8_t rhoprime[]) {
 801422e:	b580      	push	{r7, lr}
 8014230:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8014234:	b086      	sub	sp, #24
 8014236:	af00      	add	r7, sp, #0
 8014238:	f107 0318 	add.w	r3, r7, #24
 801423c:	f843 0c0c 	str.w	r0, [r3, #-12]
 8014240:	f107 0318 	add.w	r3, r7, #24
 8014244:	f843 1c10 	str.w	r1, [r3, #-16]
 8014248:	f107 0318 	add.w	r3, r7, #24
 801424c:	f843 2c14 	str.w	r2, [r3, #-20]
	  poly acc;
	  poly a_ij;
	  poly s1_j;
	  poly s2_j;

	  for(i = 0; i < K; ++i) {
 8014250:	2300      	movs	r3, #0
 8014252:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8014256:	f102 0214 	add.w	r2, r2, #20
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	e09d      	b.n	801439a <polyvec_matrix_poly_smul_montgomery+0x16c>
		memset(&acc, 0, sizeof(acc));
 801425e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8014262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014266:	2100      	movs	r1, #0
 8014268:	4618      	mov	r0, r3
 801426a:	f001 fb89 	bl	8015980 <memset>
		for(j = 0; j < L; ++j) {
 801426e:	2300      	movs	r3, #0
 8014270:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8014274:	f102 0210 	add.w	r2, r2, #16
 8014278:	6013      	str	r3, [r2, #0]
 801427a:	e04b      	b.n	8014314 <polyvec_matrix_poly_smul_montgomery+0xe6>
			poly_uniform(&a_ij, rho, (i << 8) + j); // generate A[i][j]
 801427c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014280:	f103 0314 	add.w	r3, r3, #20
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	b29b      	uxth	r3, r3
 8014288:	021b      	lsls	r3, r3, #8
 801428a:	b29a      	uxth	r2, r3
 801428c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014290:	f103 0310 	add.w	r3, r3, #16
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	b29b      	uxth	r3, r3
 8014298:	4413      	add	r3, r2
 801429a:	b29a      	uxth	r2, r3
 801429c:	f107 0318 	add.w	r3, r7, #24
 80142a0:	4619      	mov	r1, r3
 80142a2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80142a6:	f851 1c10 	ldr.w	r1, [r1, #-16]
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7fe fce4 	bl	8012c78 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			poly_uniform_eta(&s1_j, rhoprime, j);		// generate s1[j]
 80142b0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80142b4:	f103 0310 	add.w	r3, r3, #16
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	f107 0318 	add.w	r3, r7, #24
 80142c0:	4619      	mov	r1, r3
 80142c2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80142c6:	f851 1c14 	ldr.w	r1, [r1, #-20]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7fe fdd9 	bl	8012e82 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
			poly_ntt(&s1_j);						// transform s1[j] to ntt
 80142d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fe fb65 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &s1_j); // multiply A[i][j] on s1[j]
 80142da:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80142de:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80142e2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7fe fb74 	bl	80129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&acc, &acc, &a_ij);
 80142ec:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80142f0:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 80142f4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fe faf0 	bl	80128de <pqcrystals_dilithium2aes_r_ref_poly_add>
		for(j = 0; j < L; ++j) {
 80142fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014302:	f103 0310 	add.w	r3, r3, #16
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	3301      	adds	r3, #1
 801430a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801430e:	f102 0210 	add.w	r2, r2, #16
 8014312:	6013      	str	r3, [r2, #0]
 8014314:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014318:	f103 0310 	add.w	r3, r3, #16
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2b03      	cmp	r3, #3
 8014320:	d9ac      	bls.n	801427c <polyvec_matrix_poly_smul_montgomery+0x4e>
		}
		poly_reduce(&acc);
 8014322:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8014326:	4618      	mov	r0, r3
 8014328:	f7fe fa9d 	bl	8012866 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&acc); // invert accumulated result from ntt
 801432c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8014330:	4618      	mov	r0, r3
 8014332:	f7fe fb43 	bl	80129bc <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
		poly_uniform_eta(&s2_j, rhoprime, L+i); // generate s2[j]
 8014336:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801433a:	f103 0314 	add.w	r3, r3, #20
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	b29b      	uxth	r3, r3
 8014342:	3304      	adds	r3, #4
 8014344:	b29a      	uxth	r2, r3
 8014346:	f107 0318 	add.w	r3, r7, #24
 801434a:	4619      	mov	r1, r3
 801434c:	f107 0318 	add.w	r3, r7, #24
 8014350:	3b08      	subs	r3, #8
 8014352:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8014356:	4618      	mov	r0, r3
 8014358:	f7fe fd93 	bl	8012e82 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		poly_add(&t->vec[i], &acc, &s2_j);	// add accumulator and s2[j]
 801435c:	f107 0318 	add.w	r3, r7, #24
 8014360:	461a      	mov	r2, r3
 8014362:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014366:	f103 0314 	add.w	r3, r3, #20
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	029b      	lsls	r3, r3, #10
 801436e:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8014372:	18d0      	adds	r0, r2, r3
 8014374:	f107 0318 	add.w	r3, r7, #24
 8014378:	3b08      	subs	r3, #8
 801437a:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 801437e:	461a      	mov	r2, r3
 8014380:	f7fe faad 	bl	80128de <pqcrystals_dilithium2aes_r_ref_poly_add>
	  for(i = 0; i < K; ++i) {
 8014384:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8014388:	f103 0314 	add.w	r3, r3, #20
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	3301      	adds	r3, #1
 8014390:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8014394:	f102 0214 	add.w	r2, r2, #20
 8014398:	6013      	str	r3, [r2, #0]
 801439a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801439e:	f103 0314 	add.w	r3, r3, #20
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	2b03      	cmp	r3, #3
 80143a6:	f67f af5a 	bls.w	801425e <polyvec_matrix_poly_smul_montgomery+0x30>
	  }
}
 80143aa:	bf00      	nop
 80143ac:	bf00      	nop
 80143ae:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80143b2:	3718      	adds	r7, #24
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <polyvec_matrix_poly_ymul_montgomery>:
*
* Arguments:   - polyveck w: output vector after multiplication of A*y
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors y
**************************************************/
void polyvec_matrix_poly_ymul_montgomery(polyveck *w, const uint8_t rho[], const uint8_t rhoprime[], uint16_t nonce) {
 80143b8:	b590      	push	{r4, r7, lr}
 80143ba:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 80143be:	af00      	add	r7, sp, #0
 80143c0:	f607 0418 	addw	r4, r7, #2072	; 0x818
 80143c4:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 80143c8:	6020      	str	r0, [r4, #0]
 80143ca:	f607 0018 	addw	r0, r7, #2072	; 0x818
 80143ce:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 80143d2:	6001      	str	r1, [r0, #0]
 80143d4:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80143d8:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 80143dc:	600a      	str	r2, [r1, #0]
 80143de:	461a      	mov	r2, r3
 80143e0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80143e4:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 80143e8:	801a      	strh	r2, [r3, #0]
	  unsigned int i, j;
	  poly a_ij;
	  poly y_j;

	  for(i = 0; i < K; ++i) {
 80143ea:	2300      	movs	r3, #0
 80143ec:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80143f0:	e085      	b.n	80144fe <polyvec_matrix_poly_ymul_montgomery+0x146>
		memset(&w->vec[i], 0, sizeof(uint32_t)*N_);
 80143f2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80143f6:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 80143fa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80143fe:	029b      	lsls	r3, r3, #10
 8014400:	6812      	ldr	r2, [r2, #0]
 8014402:	4413      	add	r3, r2
 8014404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014408:	2100      	movs	r1, #0
 801440a:	4618      	mov	r0, r3
 801440c:	f001 fab8 	bl	8015980 <memset>
		for(j = 0; j < L; ++j) {
 8014410:	2300      	movs	r3, #0
 8014412:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8014416:	e051      	b.n	80144bc <polyvec_matrix_poly_ymul_montgomery+0x104>
			poly_uniform(&a_ij, rho, (i << 8) + j); 		// generate A[i][j]
 8014418:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801441c:	b29b      	uxth	r3, r3
 801441e:	021b      	lsls	r3, r3, #8
 8014420:	b29a      	uxth	r2, r3
 8014422:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8014426:	b29b      	uxth	r3, r3
 8014428:	4413      	add	r3, r2
 801442a:	b29a      	uxth	r2, r3
 801442c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014430:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8014434:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 8014438:	6819      	ldr	r1, [r3, #0]
 801443a:	f7fe fc1d 	bl	8012c78 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			poly_uniform_gamma1(&y_j, rhoprime, L*nonce + j);	// generate y[j]
 801443e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014442:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 8014446:	881b      	ldrh	r3, [r3, #0]
 8014448:	009b      	lsls	r3, r3, #2
 801444a:	b29a      	uxth	r2, r3
 801444c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8014450:	b29b      	uxth	r3, r3
 8014452:	4413      	add	r3, r2
 8014454:	b29a      	uxth	r2, r3
 8014456:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801445a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801445e:	f107 0010 	add.w	r0, r7, #16
 8014462:	6819      	ldr	r1, [r3, #0]
 8014464:	f7fe fd73 	bl	8012f4e <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
			poly_ntt(&y_j);									// transform s1[j] to ntt
 8014468:	f107 0310 	add.w	r3, r7, #16
 801446c:	4618      	mov	r0, r3
 801446e:	f7fe fa99 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &y_j); // multiply A[i][j] on y[j]
 8014472:	f107 0210 	add.w	r2, r7, #16
 8014476:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 801447a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801447e:	4618      	mov	r0, r3
 8014480:	f7fe faa8 	bl	80129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&w->vec[i], &w->vec[i], &a_ij);
 8014484:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014488:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801448c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014490:	029b      	lsls	r3, r3, #10
 8014492:	6812      	ldr	r2, [r2, #0]
 8014494:	18d0      	adds	r0, r2, r3
 8014496:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801449a:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801449e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80144a2:	029b      	lsls	r3, r3, #10
 80144a4:	6812      	ldr	r2, [r2, #0]
 80144a6:	4413      	add	r3, r2
 80144a8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80144ac:	4619      	mov	r1, r3
 80144ae:	f7fe fa16 	bl	80128de <pqcrystals_dilithium2aes_r_ref_poly_add>
		for(j = 0; j < L; ++j) {
 80144b2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80144b6:	3301      	adds	r3, #1
 80144b8:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 80144bc:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80144c0:	2b03      	cmp	r3, #3
 80144c2:	d9a9      	bls.n	8014418 <polyvec_matrix_poly_ymul_montgomery+0x60>
		}
		poly_reduce(&w->vec[i]);
 80144c4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80144c8:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 80144cc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80144d0:	029b      	lsls	r3, r3, #10
 80144d2:	6812      	ldr	r2, [r2, #0]
 80144d4:	4413      	add	r3, r2
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7fe f9c5 	bl	8012866 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&w->vec[i]); // invert accumulated result from ntt
 80144dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80144e0:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 80144e4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80144e8:	029b      	lsls	r3, r3, #10
 80144ea:	6812      	ldr	r2, [r2, #0]
 80144ec:	4413      	add	r3, r2
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fe fa64 	bl	80129bc <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	  for(i = 0; i < K; ++i) {
 80144f4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80144f8:	3301      	adds	r3, #1
 80144fa:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80144fe:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014502:	2b03      	cmp	r3, #3
 8014504:	f67f af75 	bls.w	80143f2 <polyvec_matrix_poly_ymul_montgomery+0x3a>
	  }
}
 8014508:	bf00      	nop
 801450a:	bf00      	nop
 801450c:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8014510:	46bd      	mov	sp, r7
 8014512:	bd90      	pop	{r4, r7, pc}

08014514 <polyvec_compute_z_montgomery>:
* Arguments:   - polyvecl z: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s1
*              - const uint8_t y_rhoprime[]: byte array containing seed for vector y
**************************************************/
void polyvec_compute_z_montgomery(polyvecl *z, const poly *cp, const uint8_t s_rhoprime[], const uint8_t y_rhoprime[], uint16_t nonce) {
 8014514:	b590      	push	{r4, r7, lr}
 8014516:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 801451a:	af00      	add	r7, sp, #0
 801451c:	f607 0418 	addw	r4, r7, #2072	; 0x818
 8014520:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 8014524:	6020      	str	r0, [r4, #0]
 8014526:	f607 0018 	addw	r0, r7, #2072	; 0x818
 801452a:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 801452e:	6001      	str	r1, [r0, #0]
 8014530:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8014534:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 8014538:	600a      	str	r2, [r1, #0]
 801453a:	f607 0218 	addw	r2, r7, #2072	; 0x818
 801453e:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 8014542:	6013      	str	r3, [r2, #0]
	  unsigned int j;
	  poly s1_j;
	  poly y_j;

	  for(j = 0; j < L; ++j) {
 8014544:	2300      	movs	r3, #0
 8014546:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 801454a:	e053      	b.n	80145f4 <polyvec_compute_z_montgomery+0xe0>
		  poly_uniform_eta(&s1_j, s_rhoprime, j);		// generate s1[j]
 801454c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8014550:	b29a      	uxth	r2, r3
 8014552:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014556:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801455a:	f207 4014 	addw	r0, r7, #1044	; 0x414
 801455e:	6819      	ldr	r1, [r3, #0]
 8014560:	f7fe fc8f 	bl	8012e82 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		  poly_ntt(&s1_j);								// transform s1[j] to ntt
 8014564:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8014568:	4618      	mov	r0, r3
 801456a:	f7fe fa1b 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		  poly_uniform_gamma1(&y_j, y_rhoprime, L*nonce + j);	// generate y[j]; nonce == j
 801456e:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	b29a      	uxth	r2, r3
 8014576:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801457a:	b29b      	uxth	r3, r3
 801457c:	4413      	add	r3, r2
 801457e:	b29a      	uxth	r2, r3
 8014580:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8014584:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8014588:	f107 0014 	add.w	r0, r7, #20
 801458c:	6819      	ldr	r1, [r3, #0]
 801458e:	f7fe fcde 	bl	8012f4e <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
		  poly_pointwise_montgomery(&s1_j, cp, &s1_j); // multiply cp on s1[j]
 8014592:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8014596:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801459a:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801459e:	f207 4014 	addw	r0, r7, #1044	; 0x414
 80145a2:	6819      	ldr	r1, [r3, #0]
 80145a4:	f7fe fa16 	bl	80129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		  poly_invntt_tomont(&s1_j);					// invert multiplication result
 80145a8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7fe fa05 	bl	80129bc <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>

		  poly_add(&z->vec[j], &y_j, &s1_j);			// z = y + cp*s1.
 80145b2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80145b6:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 80145ba:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80145be:	029b      	lsls	r3, r3, #10
 80145c0:	6812      	ldr	r2, [r2, #0]
 80145c2:	4413      	add	r3, r2
 80145c4:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80145c8:	f107 0114 	add.w	r1, r7, #20
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7fe f986 	bl	80128de <pqcrystals_dilithium2aes_r_ref_poly_add>
		  poly_reduce(&z->vec[j]);
 80145d2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80145d6:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 80145da:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80145de:	029b      	lsls	r3, r3, #10
 80145e0:	6812      	ldr	r2, [r2, #0]
 80145e2:	4413      	add	r3, r2
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7fe f93e 	bl	8012866 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
	  for(j = 0; j < L; ++j) {
 80145ea:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80145ee:	3301      	adds	r3, #1
 80145f0:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80145f4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80145f8:	2b03      	cmp	r3, #3
 80145fa:	d9a7      	bls.n	801454c <polyvec_compute_z_montgomery+0x38>
	  }
}
 80145fc:	bf00      	nop
 80145fe:	bf00      	nop
 8014600:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8014604:	46bd      	mov	sp, r7
 8014606:	bd90      	pop	{r4, r7, pc}

08014608 <polyvec_compute_h_montgomery>:
*
* Arguments:   - polyveck h: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s2
**************************************************/
void polyvec_compute_h_montgomery(polyveck *h, const poly *cp, const uint8_t s_rhoprime[]) {
 8014608:	b580      	push	{r7, lr}
 801460a:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 801460e:	af00      	add	r7, sp, #0
 8014610:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014614:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014618:	6018      	str	r0, [r3, #0]
 801461a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801461e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8014622:	6019      	str	r1, [r3, #0]
 8014624:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014628:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 801462c:	601a      	str	r2, [r3, #0]
	  unsigned int j;
	  poly s2_j;

	  for(j = 0; j < K; ++j) {
 801462e:	2300      	movs	r3, #0
 8014630:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8014634:	e035      	b.n	80146a2 <polyvec_compute_h_montgomery+0x9a>
		  poly_uniform_eta(&s2_j, s_rhoprime, L+j);		// generate s2[j]
 8014636:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801463a:	b29b      	uxth	r3, r3
 801463c:	3304      	adds	r3, #4
 801463e:	b29a      	uxth	r2, r3
 8014640:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014644:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014648:	f107 0014 	add.w	r0, r7, #20
 801464c:	6819      	ldr	r1, [r3, #0]
 801464e:	f7fe fc18 	bl	8012e82 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		  poly_ntt(&s2_j);								// transform s2[j] to ntt
 8014652:	f107 0314 	add.w	r3, r7, #20
 8014656:	4618      	mov	r0, r3
 8014658:	f7fe f9a4 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		  poly_pointwise_montgomery(&h->vec[j], cp, &s2_j); // h_j = cp*s2_j
 801465c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014660:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8014664:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014668:	029b      	lsls	r3, r3, #10
 801466a:	6812      	ldr	r2, [r2, #0]
 801466c:	18d0      	adds	r0, r2, r3
 801466e:	f107 0214 	add.w	r2, r7, #20
 8014672:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014676:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801467a:	6819      	ldr	r1, [r3, #0]
 801467c:	f7fe f9aa 	bl	80129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		  poly_invntt_tomont(&h->vec[j]);					// invert multiplication result
 8014680:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014684:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8014688:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801468c:	029b      	lsls	r3, r3, #10
 801468e:	6812      	ldr	r2, [r2, #0]
 8014690:	4413      	add	r3, r2
 8014692:	4618      	mov	r0, r3
 8014694:	f7fe f992 	bl	80129bc <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	  for(j = 0; j < K; ++j) {
 8014698:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801469c:	3301      	adds	r3, #1
 801469e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80146a2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80146a6:	2b03      	cmp	r3, #3
 80146a8:	d9c5      	bls.n	8014636 <polyvec_compute_h_montgomery+0x2e>
		  //poly_reduce(&h->vec[j]);
	  }
}
 80146aa:	bf00      	nop
 80146ac:	bf00      	nop
 80146ae:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}

080146b6 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand>:
*              or AES256CTR(rho,j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 80146b6:	b580      	push	{r7, lr}
 80146b8:	b084      	sub	sp, #16
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
 80146be:	6039      	str	r1, [r7, #0]
  unsigned int i, j;

  for(i = 0; i < K; ++i)
 80146c0:	2300      	movs	r3, #0
 80146c2:	60fb      	str	r3, [r7, #12]
 80146c4:	e01e      	b.n	8014704 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x4e>
    for(j = 0; j < L; ++j)
 80146c6:	2300      	movs	r3, #0
 80146c8:	60bb      	str	r3, [r7, #8]
 80146ca:	e015      	b.n	80146f8 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x42>
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	031b      	lsls	r3, r3, #12
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	441a      	add	r2, r3
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	029b      	lsls	r3, r3, #10
 80146d8:	18d0      	adds	r0, r2, r3
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	b29b      	uxth	r3, r3
 80146de:	021b      	lsls	r3, r3, #8
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	4413      	add	r3, r2
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	461a      	mov	r2, r3
 80146ec:	6839      	ldr	r1, [r7, #0]
 80146ee:	f7fe fac3 	bl	8012c78 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
    for(j = 0; j < L; ++j)
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	3301      	adds	r3, #1
 80146f6:	60bb      	str	r3, [r7, #8]
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	2b03      	cmp	r3, #3
 80146fc:	d9e6      	bls.n	80146cc <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x16>
  for(i = 0; i < K; ++i)
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	3301      	adds	r3, #1
 8014702:	60fb      	str	r3, [r7, #12]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2b03      	cmp	r3, #3
 8014708:	d9dd      	bls.n	80146c6 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x10>
}
 801470a:	bf00      	nop
 801470c:	bf00      	nop
 801470e:	3710      	adds	r7, #16
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery>:

void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 8014714:	b580      	push	{r7, lr}
 8014716:	b086      	sub	sp, #24
 8014718:	af00      	add	r7, sp, #0
 801471a:	60f8      	str	r0, [r7, #12]
 801471c:	60b9      	str	r1, [r7, #8]
 801471e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014720:	2300      	movs	r3, #0
 8014722:	617b      	str	r3, [r7, #20]
 8014724:	e00e      	b.n	8014744 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery+0x30>
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	029b      	lsls	r3, r3, #10
 801472a:	68fa      	ldr	r2, [r7, #12]
 801472c:	18d0      	adds	r0, r2, r3
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	031b      	lsls	r3, r3, #12
 8014732:	68ba      	ldr	r2, [r7, #8]
 8014734:	4413      	add	r3, r2
 8014736:	687a      	ldr	r2, [r7, #4]
 8014738:	4619      	mov	r1, r3
 801473a:	f000 f824 	bl	8014786 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery>
  for(i = 0; i < K; ++i)
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	3301      	adds	r3, #1
 8014742:	617b      	str	r3, [r7, #20]
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	2b03      	cmp	r3, #3
 8014748:	d9ed      	bls.n	8014726 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery+0x12>
}
 801474a:	bf00      	nop
 801474c:	bf00      	nop
 801474e:	3718      	adds	r7, #24
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}

08014754 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void polyvecl_ntt(polyvecl *v) {
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 801475c:	2300      	movs	r3, #0
 801475e:	60fb      	str	r3, [r7, #12]
 8014760:	e009      	b.n	8014776 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt+0x22>
    poly_ntt(&v->vec[i]);
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	029b      	lsls	r3, r3, #10
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	4413      	add	r3, r2
 801476a:	4618      	mov	r0, r3
 801476c:	f7fe f91a 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  for(i = 0; i < L; ++i)
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	3301      	adds	r3, #1
 8014774:	60fb      	str	r3, [r7, #12]
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	2b03      	cmp	r3, #3
 801477a:	d9f2      	bls.n	8014762 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt+0xe>
}
 801477c:	bf00      	nop
 801477e:	bf00      	nop
 8014780:	3710      	adds	r7, #16
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}

08014786 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void polyvecl_pointwise_acc_montgomery(poly *w,
                                       const polyvecl *u,
                                       const polyvecl *v)
{
 8014786:	b580      	push	{r7, lr}
 8014788:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 801478c:	af00      	add	r7, sp, #0
 801478e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014792:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014796:	6018      	str	r0, [r3, #0]
 8014798:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801479c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80147a0:	6019      	str	r1, [r3, #0]
 80147a2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147a6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80147aa:	601a      	str	r2, [r3, #0]
  unsigned int i;
  poly t;

  poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 80147ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147b0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80147b4:	6819      	ldr	r1, [r3, #0]
 80147b6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147ba:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80147be:	681a      	ldr	r2, [r3, #0]
 80147c0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147c4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80147c8:	6818      	ldr	r0, [r3, #0]
 80147ca:	f7fe f903 	bl	80129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 1; i < L; ++i) {
 80147ce:	2301      	movs	r3, #1
 80147d0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80147d4:	e029      	b.n	801482a <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery+0xa4>
    poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
 80147d6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147da:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 80147de:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80147e2:	029b      	lsls	r3, r3, #10
 80147e4:	6812      	ldr	r2, [r2, #0]
 80147e6:	18d1      	adds	r1, r2, r3
 80147e8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80147ec:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 80147f0:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80147f4:	029b      	lsls	r3, r3, #10
 80147f6:	6812      	ldr	r2, [r2, #0]
 80147f8:	441a      	add	r2, r3
 80147fa:	f107 0314 	add.w	r3, r7, #20
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fe f8e8 	bl	80129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
    poly_add(w, w, &t);
 8014804:	f107 0214 	add.w	r2, r7, #20
 8014808:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801480c:	f2a3 410c 	subw	r1, r3, #1036	; 0x40c
 8014810:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014814:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014818:	6809      	ldr	r1, [r1, #0]
 801481a:	6818      	ldr	r0, [r3, #0]
 801481c:	f7fe f85f 	bl	80128de <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 1; i < L; ++i) {
 8014820:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014824:	3301      	adds	r3, #1
 8014826:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 801482a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801482e:	2b03      	cmp	r3, #3
 8014830:	d9d1      	bls.n	80147d6 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery+0x50>
  }
}
 8014832:	bf00      	nop
 8014834:	bf00      	nop
 8014836:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}

0801483e <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 801483e:	b580      	push	{r7, lr}
 8014840:	b084      	sub	sp, #16
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
 8014846:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014848:	2300      	movs	r3, #0
 801484a:	60fb      	str	r3, [r7, #12]
 801484c:	e00f      	b.n	801486e <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	029b      	lsls	r3, r3, #10
 8014852:	687a      	ldr	r2, [r7, #4]
 8014854:	4413      	add	r3, r2
 8014856:	6839      	ldr	r1, [r7, #0]
 8014858:	4618      	mov	r0, r3
 801485a:	f7fe f98d 	bl	8012b78 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d001      	beq.n	8014868 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x2a>
      return 1;
 8014864:	2301      	movs	r3, #1
 8014866:	e006      	b.n	8014876 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x38>
  for(i = 0; i < L; ++i)
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	3301      	adds	r3, #1
 801486c:	60fb      	str	r3, [r7, #12]
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	2b03      	cmp	r3, #3
 8014872:	d9ec      	bls.n	801484e <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x10>

  return 0;
 8014874:	2300      	movs	r3, #0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}

0801487e <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 801487e:	b580      	push	{r7, lr}
 8014880:	b084      	sub	sp, #16
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014886:	2300      	movs	r3, #0
 8014888:	60fb      	str	r3, [r7, #12]
 801488a:	e009      	b.n	80148a0 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0x22>
    poly_reduce(&v->vec[i]);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	029b      	lsls	r3, r3, #10
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	4413      	add	r3, r2
 8014894:	4618      	mov	r0, r3
 8014896:	f7fd ffe6 	bl	8012866 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
  for(i = 0; i < K; ++i)
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	3301      	adds	r3, #1
 801489e:	60fb      	str	r3, [r7, #12]
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2b03      	cmp	r3, #3
 80148a4:	d9f2      	bls.n	801488c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0xe>
}
 80148a6:	bf00      	nop
 80148a8:	bf00      	nop
 80148aa:	3710      	adds	r7, #16
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80148b8:	2300      	movs	r3, #0
 80148ba:	60fb      	str	r3, [r7, #12]
 80148bc:	e009      	b.n	80148d2 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0x22>
    poly_caddq(&v->vec[i]);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	029b      	lsls	r3, r3, #10
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	4413      	add	r3, r2
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7fd ffeb 	bl	80128a2 <pqcrystals_dilithium2aes_r_ref_poly_caddq>
  for(i = 0; i < K; ++i)
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	3301      	adds	r3, #1
 80148d0:	60fb      	str	r3, [r7, #12]
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2b03      	cmp	r3, #3
 80148d6:	d9f2      	bls.n	80148be <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0xe>
}
 80148d8:	bf00      	nop
 80148da:	bf00      	nop
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <pqcrystals_dilithium2aes_r_ref_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b086      	sub	sp, #24
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	60f8      	str	r0, [r7, #12]
 80148ea:	60b9      	str	r1, [r7, #8]
 80148ec:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80148ee:	2300      	movs	r3, #0
 80148f0:	617b      	str	r3, [r7, #20]
 80148f2:	e011      	b.n	8014918 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 80148f4:	697b      	ldr	r3, [r7, #20]
 80148f6:	029b      	lsls	r3, r3, #10
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	18d0      	adds	r0, r2, r3
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	029b      	lsls	r3, r3, #10
 8014900:	68ba      	ldr	r2, [r7, #8]
 8014902:	18d1      	adds	r1, r2, r3
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	029b      	lsls	r3, r3, #10
 8014908:	687a      	ldr	r2, [r7, #4]
 801490a:	4413      	add	r3, r2
 801490c:	461a      	mov	r2, r3
 801490e:	f7fd ffe6 	bl	80128de <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 0; i < K; ++i)
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	3301      	adds	r3, #1
 8014916:	617b      	str	r3, [r7, #20]
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	2b03      	cmp	r3, #3
 801491c:	d9ea      	bls.n	80148f4 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x12>
}
 801491e:	bf00      	nop
 8014920:	bf00      	nop
 8014922:	3718      	adds	r7, #24
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 8014928:	b580      	push	{r7, lr}
 801492a:	b086      	sub	sp, #24
 801492c:	af00      	add	r7, sp, #0
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014934:	2300      	movs	r3, #0
 8014936:	617b      	str	r3, [r7, #20]
 8014938:	e011      	b.n	801495e <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x36>
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	029b      	lsls	r3, r3, #10
 801493e:	68fa      	ldr	r2, [r7, #12]
 8014940:	18d0      	adds	r0, r2, r3
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	029b      	lsls	r3, r3, #10
 8014946:	68ba      	ldr	r2, [r7, #8]
 8014948:	18d1      	adds	r1, r2, r3
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	029b      	lsls	r3, r3, #10
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	4413      	add	r3, r2
 8014952:	461a      	mov	r2, r3
 8014954:	f7fd ffe6 	bl	8012924 <pqcrystals_dilithium2aes_r_ref_poly_sub>
  for(i = 0; i < K; ++i)
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	3301      	adds	r3, #1
 801495c:	617b      	str	r3, [r7, #20]
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	2b03      	cmp	r3, #3
 8014962:	d9ea      	bls.n	801493a <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x12>
}
 8014964:	bf00      	nop
 8014966:	bf00      	nop
 8014968:	3718      	adds	r7, #24
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}

0801496e <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_shiftl(polyveck *v) {
 801496e:	b580      	push	{r7, lr}
 8014970:	b084      	sub	sp, #16
 8014972:	af00      	add	r7, sp, #0
 8014974:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014976:	2300      	movs	r3, #0
 8014978:	60fb      	str	r3, [r7, #12]
 801497a:	e009      	b.n	8014990 <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl+0x22>
    poly_shiftl(&v->vec[i]);
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	029b      	lsls	r3, r3, #10
 8014980:	687a      	ldr	r2, [r7, #4]
 8014982:	4413      	add	r3, r2
 8014984:	4618      	mov	r0, r3
 8014986:	f7fd fff0 	bl	801296a <pqcrystals_dilithium2aes_r_ref_poly_shiftl>
  for(i = 0; i < K; ++i)
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	3301      	adds	r3, #1
 801498e:	60fb      	str	r3, [r7, #12]
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2b03      	cmp	r3, #3
 8014994:	d9f2      	bls.n	801497c <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl+0xe>
}
 8014996:	bf00      	nop
 8014998:	bf00      	nop
 801499a:	3710      	adds	r7, #16
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80149a8:	2300      	movs	r3, #0
 80149aa:	60fb      	str	r3, [r7, #12]
 80149ac:	e009      	b.n	80149c2 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0x22>
    poly_ntt(&v->vec[i]);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	029b      	lsls	r3, r3, #10
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	4413      	add	r3, r2
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7fd fff4 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  for(i = 0; i < K; ++i)
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3301      	adds	r3, #1
 80149c0:	60fb      	str	r3, [r7, #12]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	2b03      	cmp	r3, #3
 80149c6:	d9f2      	bls.n	80149ae <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0xe>
}
 80149c8:	bf00      	nop
 80149ca:	bf00      	nop
 80149cc:	3710      	adds	r7, #16
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}

080149d2 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 80149d2:	b580      	push	{r7, lr}
 80149d4:	b084      	sub	sp, #16
 80149d6:	af00      	add	r7, sp, #0
 80149d8:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80149da:	2300      	movs	r3, #0
 80149dc:	60fb      	str	r3, [r7, #12]
 80149de:	e009      	b.n	80149f4 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	029b      	lsls	r3, r3, #10
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	4413      	add	r3, r2
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7fd ffe7 	bl	80129bc <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
  for(i = 0; i < K; ++i)
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	3301      	adds	r3, #1
 80149f2:	60fb      	str	r3, [r7, #12]
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	2b03      	cmp	r3, #3
 80149f8:	d9f2      	bls.n	80149e0 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0xe>
}
 80149fa:	bf00      	nop
 80149fc:	bf00      	nop
 80149fe:	3710      	adds	r7, #16
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}

08014a04 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>:

void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b086      	sub	sp, #24
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014a10:	2300      	movs	r3, #0
 8014a12:	617b      	str	r3, [r7, #20]
 8014a14:	e00e      	b.n	8014a34 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	029b      	lsls	r3, r3, #10
 8014a1a:	68fa      	ldr	r2, [r7, #12]
 8014a1c:	18d0      	adds	r0, r2, r3
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	029b      	lsls	r3, r3, #10
 8014a22:	687a      	ldr	r2, [r7, #4]
 8014a24:	4413      	add	r3, r2
 8014a26:	461a      	mov	r2, r3
 8014a28:	68b9      	ldr	r1, [r7, #8]
 8014a2a:	f7fd ffd3 	bl	80129d4 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 0; i < K; ++i)
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	3301      	adds	r3, #1
 8014a32:	617b      	str	r3, [r7, #20]
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	2b03      	cmp	r3, #3
 8014a38:	d9ed      	bls.n	8014a16 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x12>
}
 8014a3a:	bf00      	nop
 8014a3c:	bf00      	nop
 8014a3e:	3718      	adds	r7, #24
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b084      	sub	sp, #16
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014a4e:	2300      	movs	r3, #0
 8014a50:	60fb      	str	r3, [r7, #12]
 8014a52:	e00f      	b.n	8014a74 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	029b      	lsls	r3, r3, #10
 8014a58:	687a      	ldr	r2, [r7, #4]
 8014a5a:	4413      	add	r3, r2
 8014a5c:	6839      	ldr	r1, [r7, #0]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7fe f88a 	bl	8012b78 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d001      	beq.n	8014a6e <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x2a>
      return 1;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e006      	b.n	8014a7c <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x38>
  for(i = 0; i < K; ++i)
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	3301      	adds	r3, #1
 8014a72:	60fb      	str	r3, [r7, #12]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2b03      	cmp	r3, #3
 8014a78:	d9ec      	bls.n	8014a54 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x10>

  return 0;
 8014a7a:	2300      	movs	r3, #0
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3710      	adds	r7, #16
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b086      	sub	sp, #24
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014a90:	2300      	movs	r3, #0
 8014a92:	617b      	str	r3, [r7, #20]
 8014a94:	e011      	b.n	8014aba <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x36>
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	029b      	lsls	r3, r3, #10
 8014a9a:	68fa      	ldr	r2, [r7, #12]
 8014a9c:	18d0      	adds	r0, r2, r3
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	029b      	lsls	r3, r3, #10
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	18d1      	adds	r1, r2, r3
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	029b      	lsls	r3, r3, #10
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	4413      	add	r3, r2
 8014aae:	461a      	mov	r2, r3
 8014ab0:	f7fd ffc6 	bl	8012a40 <pqcrystals_dilithium2aes_r_ref_poly_power2round>
  for(i = 0; i < K; ++i)
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	617b      	str	r3, [r7, #20]
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	2b03      	cmp	r3, #3
 8014abe:	d9ea      	bls.n	8014a96 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x12>
}
 8014ac0:	bf00      	nop
 8014ac2:	bf00      	nop
 8014ac4:	3718      	adds	r7, #24
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}

08014aca <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 8014aca:	b580      	push	{r7, lr}
 8014acc:	b086      	sub	sp, #24
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	60f8      	str	r0, [r7, #12]
 8014ad2:	60b9      	str	r1, [r7, #8]
 8014ad4:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	617b      	str	r3, [r7, #20]
 8014ada:	e011      	b.n	8014b00 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x36>
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	029b      	lsls	r3, r3, #10
 8014ae0:	68fa      	ldr	r2, [r7, #12]
 8014ae2:	18d0      	adds	r0, r2, r3
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	029b      	lsls	r3, r3, #10
 8014ae8:	68ba      	ldr	r2, [r7, #8]
 8014aea:	18d1      	adds	r1, r2, r3
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	029b      	lsls	r3, r3, #10
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	4413      	add	r3, r2
 8014af4:	461a      	mov	r2, r3
 8014af6:	f7fd ffc7 	bl	8012a88 <pqcrystals_dilithium2aes_r_ref_poly_decompose>
  for(i = 0; i < K; ++i)
 8014afa:	697b      	ldr	r3, [r7, #20]
 8014afc:	3301      	adds	r3, #1
 8014afe:	617b      	str	r3, [r7, #20]
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	2b03      	cmp	r3, #3
 8014b04:	d9ea      	bls.n	8014adc <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x12>
}
 8014b06:	bf00      	nop
 8014b08:	bf00      	nop
 8014b0a:	3718      	adds	r7, #24
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	613b      	str	r3, [r7, #16]

  for(i = 0; i < K; ++i)
 8014b20:	2300      	movs	r3, #0
 8014b22:	617b      	str	r3, [r7, #20]
 8014b24:	e015      	b.n	8014b52 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x42>
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	029b      	lsls	r3, r3, #10
 8014b2a:	68fa      	ldr	r2, [r7, #12]
 8014b2c:	18d0      	adds	r0, r2, r3
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	029b      	lsls	r3, r3, #10
 8014b32:	68ba      	ldr	r2, [r7, #8]
 8014b34:	18d1      	adds	r1, r2, r3
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	029b      	lsls	r3, r3, #10
 8014b3a:	687a      	ldr	r2, [r7, #4]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	461a      	mov	r2, r3
 8014b40:	f7fd ffc6 	bl	8012ad0 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>
 8014b44:	4602      	mov	r2, r0
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	4413      	add	r3, r2
 8014b4a:	613b      	str	r3, [r7, #16]
  for(i = 0; i < K; ++i)
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	617b      	str	r3, [r7, #20]
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	2b03      	cmp	r3, #3
 8014b56:	d9e6      	bls.n	8014b26 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x16>

  return s;
 8014b58:	693b      	ldr	r3, [r7, #16]
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3718      	adds	r7, #24
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}

08014b62 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
 8014b62:	b580      	push	{r7, lr}
 8014b64:	b086      	sub	sp, #24
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	60f8      	str	r0, [r7, #12]
 8014b6a:	60b9      	str	r1, [r7, #8]
 8014b6c:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014b6e:	2300      	movs	r3, #0
 8014b70:	617b      	str	r3, [r7, #20]
 8014b72:	e011      	b.n	8014b98 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint+0x36>
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	029b      	lsls	r3, r3, #10
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	18d0      	adds	r0, r2, r3
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	029b      	lsls	r3, r3, #10
 8014b80:	68ba      	ldr	r2, [r7, #8]
 8014b82:	18d1      	adds	r1, r2, r3
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	029b      	lsls	r3, r3, #10
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	4413      	add	r3, r2
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	f7fd ffce 	bl	8012b2e <pqcrystals_dilithium2aes_r_ref_poly_use_hint>
  for(i = 0; i < K; ++i)
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	3301      	adds	r3, #1
 8014b96:	617b      	str	r3, [r7, #20]
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	2b03      	cmp	r3, #3
 8014b9c:	d9ea      	bls.n	8014b74 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint+0x12>
}
 8014b9e:	bf00      	nop
 8014ba0:	bf00      	nop
 8014ba2:	3718      	adds	r7, #24
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}

08014ba8 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	60fb      	str	r3, [r7, #12]
 8014bb6:	e011      	b.n	8014bdc <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x34>
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 8014bb8:	68fa      	ldr	r2, [r7, #12]
 8014bba:	4613      	mov	r3, r2
 8014bbc:	005b      	lsls	r3, r3, #1
 8014bbe:	4413      	add	r3, r2
 8014bc0:	019b      	lsls	r3, r3, #6
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	1898      	adds	r0, r3, r2
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	029b      	lsls	r3, r3, #10
 8014bcc:	683a      	ldr	r2, [r7, #0]
 8014bce:	4413      	add	r3, r2
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	f7ff fa97 	bl	8014104 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>
  for(i = 0; i < K; ++i)
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	60fb      	str	r3, [r7, #12]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2b03      	cmp	r3, #3
 8014be0:	d9ea      	bls.n	8014bb8 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x10>
}
 8014be2:	bf00      	nop
 8014be4:	bf00      	nop
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <randombytes>:
#include <stdint.h>
#include <stdlib.h>
#include "randombytes.h"


void randombytes(RNG_HandleTypeDef *hrng, uint8_t *out, size_t outlen) {
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b08a      	sub	sp, #40	; 0x28
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
	uint32_t rand_int = 0;
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	613b      	str	r3, [r7, #16]
	uint8_t *rand_int_byte = (uint8_t*)&rand_int;
 8014bfc:	f107 0310 	add.w	r3, r7, #16
 8014c00:	61fb      	str	r3, [r7, #28]
	uint32_t *int_out = (uint32_t*)out;
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	61bb      	str	r3, [r7, #24]
	int i = 0;
 8014c06:	2300      	movs	r3, #0
 8014c08:	627b      	str	r3, [r7, #36]	; 0x24
	int j = 0;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	623b      	str	r3, [r7, #32]

	for(; i < outlen/4; i++){
 8014c0e:	e00a      	b.n	8014c26 <randombytes+0x3a>
		HAL_RNG_GenerateRandomNumber(hrng, &int_out[i]);
 8014c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c12:	009b      	lsls	r3, r3, #2
 8014c14:	69ba      	ldr	r2, [r7, #24]
 8014c16:	4413      	add	r3, r2
 8014c18:	4619      	mov	r1, r3
 8014c1a:	68f8      	ldr	r0, [r7, #12]
 8014c1c:	f7f0 fc5d 	bl	80054da <HAL_RNG_GenerateRandomNumber>
	for(; i < outlen/4; i++){
 8014c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c22:	3301      	adds	r3, #1
 8014c24:	627b      	str	r3, [r7, #36]	; 0x24
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	089a      	lsrs	r2, r3, #2
 8014c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d8ef      	bhi.n	8014c10 <randombytes+0x24>
	}

	int rem = outlen % 4;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f003 0303 	and.w	r3, r3, #3
 8014c36:	617b      	str	r3, [r7, #20]
	if (rem) {
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d018      	beq.n	8014c70 <randombytes+0x84>
		HAL_RNG_GenerateRandomNumber(hrng, &rand_int);
 8014c3e:	f107 0310 	add.w	r3, r7, #16
 8014c42:	4619      	mov	r1, r3
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f7f0 fc48 	bl	80054da <HAL_RNG_GenerateRandomNumber>
		for(; j < rem; j++){
 8014c4a:	e00d      	b.n	8014c68 <randombytes+0x7c>
			out[i+j] = rand_int_byte[j];
 8014c4c:	6a3b      	ldr	r3, [r7, #32]
 8014c4e:	69fa      	ldr	r2, [r7, #28]
 8014c50:	441a      	add	r2, r3
 8014c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c54:	6a3b      	ldr	r3, [r7, #32]
 8014c56:	440b      	add	r3, r1
 8014c58:	4619      	mov	r1, r3
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	440b      	add	r3, r1
 8014c5e:	7812      	ldrb	r2, [r2, #0]
 8014c60:	701a      	strb	r2, [r3, #0]
		for(; j < rem; j++){
 8014c62:	6a3b      	ldr	r3, [r7, #32]
 8014c64:	3301      	adds	r3, #1
 8014c66:	623b      	str	r3, [r7, #32]
 8014c68:	6a3a      	ldr	r2, [r7, #32]
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	dbed      	blt.n	8014c4c <randombytes+0x60>
		}
	}
}
 8014c70:	bf00      	nop
 8014c72:	3728      	adds	r7, #40	; 0x28
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>:
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
 8014c78:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014c7c:	b086      	sub	sp, #24
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int32_t t;

  t = (int32_t)a*QINV;
 8014c84:	68b8      	ldr	r0, [r7, #8]
 8014c86:	4601      	mov	r1, r0
 8014c88:	00c9      	lsls	r1, r1, #3
 8014c8a:	1a09      	subs	r1, r1, r0
 8014c8c:	0289      	lsls	r1, r1, #10
 8014c8e:	4401      	add	r1, r0
 8014c90:	0349      	lsls	r1, r1, #13
 8014c92:	4401      	add	r1, r0
 8014c94:	6179      	str	r1, [r7, #20]
  t = (a - (int64_t)t*Q_) >> 32;
 8014c96:	6979      	ldr	r1, [r7, #20]
 8014c98:	17c8      	asrs	r0, r1, #31
 8014c9a:	460c      	mov	r4, r1
 8014c9c:	4605      	mov	r5, r0
 8014c9e:	e9c7 4500 	strd	r4, r5, [r7]
 8014ca2:	f04f 0000 	mov.w	r0, #0
 8014ca6:	f04f 0100 	mov.w	r1, #0
 8014caa:	02a9      	lsls	r1, r5, #10
 8014cac:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8014cb0:	02a0      	lsls	r0, r4, #10
 8014cb2:	683e      	ldr	r6, [r7, #0]
 8014cb4:	1a32      	subs	r2, r6, r0
 8014cb6:	687e      	ldr	r6, [r7, #4]
 8014cb8:	eb66 0301 	sbc.w	r3, r6, r1
 8014cbc:	f04f 0000 	mov.w	r0, #0
 8014cc0:	f04f 0100 	mov.w	r1, #0
 8014cc4:	0359      	lsls	r1, r3, #13
 8014cc6:	ea41 41d2 	orr.w	r1, r1, r2, lsr #19
 8014cca:	0350      	lsls	r0, r2, #13
 8014ccc:	4602      	mov	r2, r0
 8014cce:	460b      	mov	r3, r1
 8014cd0:	ebb2 0a04 	subs.w	sl, r2, r4
 8014cd4:	eb63 0b05 	sbc.w	fp, r3, r5
 8014cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014cdc:	eb1a 0802 	adds.w	r8, sl, r2
 8014ce0:	eb4b 0903 	adc.w	r9, fp, r3
 8014ce4:	f04f 0200 	mov.w	r2, #0
 8014ce8:	f04f 0300 	mov.w	r3, #0
 8014cec:	464a      	mov	r2, r9
 8014cee:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8014cf2:	4613      	mov	r3, r2
 8014cf4:	617b      	str	r3, [r7, #20]
  return t;
 8014cf6:	697b      	ldr	r3, [r7, #20]
}
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3718      	adds	r7, #24
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014d02:	4770      	bx	lr

08014d04 <pqcrystals_dilithium2aes_r_ref_reduce32>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
 8014d04:	b480      	push	{r7}
 8014d06:	b085      	sub	sp, #20
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
  int32_t t;

  t = (a + (1 << 22)) >> 23;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8014d12:	15db      	asrs	r3, r3, #23
 8014d14:	60fb      	str	r3, [r7, #12]
  t = a - t*Q_;
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	4613      	mov	r3, r2
 8014d1a:	025b      	lsls	r3, r3, #9
 8014d1c:	1a9b      	subs	r3, r3, r2
 8014d1e:	029b      	lsls	r3, r3, #10
 8014d20:	4413      	add	r3, r2
 8014d22:	035b      	lsls	r3, r3, #13
 8014d24:	1a9b      	subs	r3, r3, r2
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	4413      	add	r3, r2
 8014d2a:	60fb      	str	r3, [r7, #12]
  return t;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr
	...

08014d3c <pqcrystals_dilithium2aes_r_ref_caddq>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
  a += (a >> 31) & Q_;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	17da      	asrs	r2, r3, #31
 8014d48:	4b05      	ldr	r3, [pc, #20]	; (8014d60 <pqcrystals_dilithium2aes_r_ref_caddq+0x24>)
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	4413      	add	r3, r2
 8014d50:	607b      	str	r3, [r7, #4]
  return a;
 8014d52:	687b      	ldr	r3, [r7, #4]
}
 8014d54:	4618      	mov	r0, r3
 8014d56:	370c      	adds	r7, #12
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr
 8014d60:	007fe001 	.word	0x007fe001

08014d64 <pqcrystals_dilithium2aes_r_ref_power2round>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
 8014d64:	b480      	push	{r7}
 8014d66:	b085      	sub	sp, #20
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8014d74:	135b      	asrs	r3, r3, #13
 8014d76:	60fb      	str	r3, [r7, #12]
  *a0 = a - (a1 << D);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	035b      	lsls	r3, r3, #13
 8014d7c:	683a      	ldr	r2, [r7, #0]
 8014d7e:	1ad2      	subs	r2, r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	601a      	str	r2, [r3, #0]
  return a1;
 8014d84:	68fb      	ldr	r3, [r7, #12]
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3714      	adds	r7, #20
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr
	...

08014d94 <pqcrystals_dilithium2aes_r_ref_decompose>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
 8014d94:	b480      	push	{r7}
 8014d96:	b085      	sub	sp, #20
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1  = (a + 127) >> 7;
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	337f      	adds	r3, #127	; 0x7f
 8014da2:	11db      	asrs	r3, r3, #7
 8014da4:	60fb      	str	r3, [r7, #12]
#if GAMMA2 == (Q_-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q_-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f642 420b 	movw	r2, #11275	; 0x2c0b
 8014dac:	fb02 f303 	mul.w	r3, r2, r3
 8014db0:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8014db4:	161b      	asrs	r3, r3, #24
 8014db6:	60fb      	str	r3, [r7, #12]
  a1 ^= ((43 - a1) >> 31) & a1;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8014dbe:	17db      	asrs	r3, r3, #31
 8014dc0:	43db      	mvns	r3, r3
 8014dc2:	68fa      	ldr	r2, [r7, #12]
 8014dc4:	4013      	ands	r3, r2
 8014dc6:	60fb      	str	r3, [r7, #12]
#endif

  *a0  = a - a1*2*GAMMA2;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	4a0e      	ldr	r2, [pc, #56]	; (8014e04 <pqcrystals_dilithium2aes_r_ref_decompose+0x70>)
 8014dcc:	fb03 f202 	mul.w	r2, r3, r2
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	441a      	add	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	601a      	str	r2, [r3, #0]
  *a0 -= (((Q_-1)/2 - *a0) >> 31) & Q_;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	f5c3 137f 	rsb	r3, r3, #4177920	; 0x3fc000
 8014de4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014de8:	17d9      	asrs	r1, r3, #31
 8014dea:	4b07      	ldr	r3, [pc, #28]	; (8014e08 <pqcrystals_dilithium2aes_r_ref_decompose+0x74>)
 8014dec:	400b      	ands	r3, r1
 8014dee:	1ad2      	subs	r2, r2, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	601a      	str	r2, [r3, #0]
  return a1;
 8014df4:	68fb      	ldr	r3, [r7, #12]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3714      	adds	r7, #20
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	fffd1800 	.word	0xfffd1800
 8014e08:	007fe001 	.word	0x007fe001

08014e0c <pqcrystals_dilithium2aes_r_ref_make_hint>:
* Arguments:   - int32_t a0: low bits of input element
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  if(a0 <= GAMMA2 || a0 > Q_ - GAMMA2 || (a0 == Q_ - GAMMA2 && a1 == 0))
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f5b3 3fba 	cmp.w	r3, #95232	; 0x17400
 8014e1c:	dd0a      	ble.n	8014e34 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	4a09      	ldr	r2, [pc, #36]	; (8014e48 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	dc06      	bgt.n	8014e34 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	4a07      	ldr	r2, [pc, #28]	; (8014e48 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d104      	bne.n	8014e38 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d101      	bne.n	8014e38 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
    return 0;
 8014e34:	2300      	movs	r3, #0
 8014e36:	e000      	b.n	8014e3a <pqcrystals_dilithium2aes_r_ref_make_hint+0x2e>

  return 1;
 8014e38:	2301      	movs	r3, #1
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	370c      	adds	r7, #12
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e44:	4770      	bx	lr
 8014e46:	bf00      	nop
 8014e48:	007e6c01 	.word	0x007e6c01

08014e4c <pqcrystals_dilithium2aes_r_ref_use_hint>:
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b084      	sub	sp, #16
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
 8014e54:	6039      	str	r1, [r7, #0]
  int32_t a0, a1;

  a1 = decompose(&a0, a);
 8014e56:	f107 0308 	add.w	r3, r7, #8
 8014e5a:	6879      	ldr	r1, [r7, #4]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7ff ff99 	bl	8014d94 <pqcrystals_dilithium2aes_r_ref_decompose>
 8014e62:	60f8      	str	r0, [r7, #12]
  if(hint == 0)
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d101      	bne.n	8014e6e <pqcrystals_dilithium2aes_r_ref_use_hint+0x22>
    return a1;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	e011      	b.n	8014e92 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  if(a0 > 0)
    return (a1 + 1) & 15;
  else
    return (a1 - 1) & 15;
#elif GAMMA2 == (Q_-1)/88
  if(a0 > 0)
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	dd07      	ble.n	8014e84 <pqcrystals_dilithium2aes_r_ref_use_hint+0x38>
    return (a1 == 43) ?  0 : a1 + 1;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2b2b      	cmp	r3, #43	; 0x2b
 8014e78:	d002      	beq.n	8014e80 <pqcrystals_dilithium2aes_r_ref_use_hint+0x34>
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	3301      	adds	r3, #1
 8014e7e:	e008      	b.n	8014e92 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 8014e80:	2300      	movs	r3, #0
 8014e82:	e006      	b.n	8014e92 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  else
    return (a1 ==  0) ? 43 : a1 - 1;
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d002      	beq.n	8014e90 <pqcrystals_dilithium2aes_r_ref_use_hint+0x44>
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	3b01      	subs	r3, #1
 8014e8e:	e000      	b.n	8014e92 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 8014e90:	232b      	movs	r3, #43	; 0x2b
#endif
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3710      	adds	r7, #16
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}

08014e9a <pqcrystals_dilithium2aes_r_ref_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int crypto_sign_keypair(RNG_HandleTypeDef *hrng, uint8_t *pk, uint8_t *sk) {
 8014e9a:	b580      	push	{r7, lr}
 8014e9c:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8014ea0:	b08e      	sub	sp, #56	; 0x38
 8014ea2:	af02      	add	r7, sp, #8
 8014ea4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014ea8:	f843 0ca4 	str.w	r0, [r3, #-164]
 8014eac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014eb0:	f843 1ca8 	str.w	r1, [r3, #-168]
 8014eb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014eb8:	f843 2cac 	str.w	r2, [r3, #-172]
  const uint8_t *rho, *rhoprime, *key;
  //polyvecl mat[K];
  polyveck t1, t0;

  /* Get randomness for rho, rhoprime and key */
  randombytes(hrng, seedbuf, SEEDBYTES);
 8014ebc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8014ec0:	f103 0304 	add.w	r3, r3, #4
 8014ec4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014ec8:	4610      	mov	r0, r2
 8014eca:	2220      	movs	r2, #32
 8014ecc:	4619      	mov	r1, r3
 8014ece:	f850 0ca4 	ldr.w	r0, [r0, #-164]
 8014ed2:	f7ff fe8b 	bl	8014bec <randombytes>
  shake256(seedbuf, 3*SEEDBYTES, seedbuf, SEEDBYTES);
 8014ed6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8014eda:	f102 0204 	add.w	r2, r2, #4
 8014ede:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 8014ee2:	f100 0004 	add.w	r0, r0, #4
 8014ee6:	2320      	movs	r3, #32
 8014ee8:	2160      	movs	r1, #96	; 0x60
 8014eea:	f7fd f8fb 	bl	80120e4 <pqcrystals_fips202_ref_shake256>
  rho = seedbuf;
 8014eee:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8014ef2:	f103 0304 	add.w	r3, r3, #4
 8014ef6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8014efa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8014efe:	6013      	str	r3, [r2, #0]
  rhoprime = seedbuf + SEEDBYTES;
 8014f00:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8014f04:	f103 0304 	add.w	r3, r3, #4
 8014f08:	3320      	adds	r3, #32
 8014f0a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8014f0e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8014f12:	6013      	str	r3, [r2, #0]
  key = seedbuf + 2*SEEDBYTES;
 8014f14:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8014f18:	f103 0304 	add.w	r3, r3, #4
 8014f1c:	3340      	adds	r3, #64	; 0x40
 8014f1e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8014f22:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8014f26:	6013      	str	r3, [r2, #0]
  polyvecl_uniform_eta(&s1, rhoprime, 0);
  polyveck_uniform_eta(&s2, rhoprime, L);
  */

  /* Matrix-vector multiplication */
  polyvec_matrix_poly_smul_montgomery(&t1, rho, rhoprime);
 8014f28:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8014f2c:	f103 0310 	add.w	r3, r3, #16
 8014f30:	3b1c      	subs	r3, #28
 8014f32:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8014f36:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8014f3a:	6812      	ldr	r2, [r2, #0]
 8014f3c:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8014f40:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8014f44:	6809      	ldr	r1, [r1, #0]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7ff f971 	bl	801422e <polyvec_matrix_poly_smul_montgomery>
  // Add error vector s2
  polyveck_add(&t1, &t1, &s2);
  */

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 8014f4c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8014f50:	f103 0310 	add.w	r3, r3, #16
 8014f54:	3b1c      	subs	r3, #28
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7ff fcaa 	bl	80148b0 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 8014f5c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8014f60:	f102 0210 	add.w	r2, r2, #16
 8014f64:	3a1c      	subs	r2, #28
 8014f66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014f6a:	391c      	subs	r1, #28
 8014f6c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8014f70:	f103 0310 	add.w	r3, r3, #16
 8014f74:	3b1c      	subs	r3, #28
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7ff fd84 	bl	8014a84 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>
  pack_pk(pk, rho, &t1);
 8014f7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8014f80:	f103 0310 	add.w	r3, r3, #16
 8014f84:	3b1c      	subs	r3, #28
 8014f86:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8014f8a:	4610      	mov	r0, r2
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8014f92:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8014f96:	6819      	ldr	r1, [r3, #0]
 8014f98:	f850 0ca8 	ldr.w	r0, [r0, #-168]
 8014f9c:	f7fd f9ec 	bl	8012378 <pqcrystals_dilithium2aes_r_ref_pack_pk>

  /* Compute CRH(rho, t1) and write secret key */
  crh(tr, pk, CRYPTO_PUBLICKEYBYTES);
 8014fa0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8014faa:	f100 0014 	add.w	r0, r0, #20
 8014fae:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8014fb2:	f852 2ca8 	ldr.w	r2, [r2, #-168]
 8014fb6:	2130      	movs	r1, #48	; 0x30
 8014fb8:	f7fd f894 	bl	80120e4 <pqcrystals_fips202_ref_shake256>
  pack_sk(sk, rho, rhoprime, tr, key, &t0);
 8014fbc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8014fc0:	f102 0214 	add.w	r2, r2, #20
 8014fc4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014fce:	3b1c      	subs	r3, #28
 8014fd0:	9301      	str	r3, [sp, #4]
 8014fd2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8014fd6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	4613      	mov	r3, r2
 8014fe0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8014fe4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8014fe8:	6812      	ldr	r2, [r2, #0]
 8014fea:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8014fee:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8014ff2:	6809      	ldr	r1, [r1, #0]
 8014ff4:	f850 0cac 	ldr.w	r0, [r0, #-172]
 8014ff8:	f7fd fa2c 	bl	8012454 <pqcrystals_dilithium2aes_r_ref_pack_sk>

  return 0;
 8014ffc:	2300      	movs	r3, #0
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8015004:	3730      	adds	r7, #48	; 0x30
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
	...

0801500c <pqcrystals_dilithium2aes_r_ref_signature>:
int crypto_sign_signature(RNG_HandleTypeDef *hrng, uint8_t *sig,
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
{
 801500c:	b590      	push	{r4, r7, lr}
 801500e:	f5ad 4dab 	sub.w	sp, sp, #21888	; 0x5580
 8015012:	b09f      	sub	sp, #124	; 0x7c
 8015014:	af02      	add	r7, sp, #8
 8015016:	f507 64be 	add.w	r4, r7, #1520	; 0x5f0
 801501a:	f2a4 54e4 	subw	r4, r4, #1508	; 0x5e4
 801501e:	6020      	str	r0, [r4, #0]
 8015020:	f507 60be 	add.w	r0, r7, #1520	; 0x5f0
 8015024:	f5a0 60bd 	sub.w	r0, r0, #1512	; 0x5e8
 8015028:	6001      	str	r1, [r0, #0]
 801502a:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 801502e:	f2a1 51ec 	subw	r1, r1, #1516	; 0x5ec
 8015032:	600a      	str	r2, [r1, #0]
 8015034:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 8015038:	f5a2 62be 	sub.w	r2, r2, #1520	; 0x5f0
 801503c:	6013      	str	r3, [r2, #0]
  unsigned int n;
  uint8_t seedbuf[3*SEEDBYTES + 3*CRHBYTES];
  uint8_t *rho, *s_rhoprime, *tr, *key, *mu, *y_rhoprime;
  uint16_t nonce = 0;
 801503e:	2300      	movs	r3, #0
 8015040:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015044:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8015048:	8013      	strh	r3, [r2, #0]
  polyvecl z; // mat[K], s1, y,
  polyveck t0, w1, w0, h; // s2,
  poly cp;
  keccak_state state;

  rho = seedbuf;
 801504a:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 801504e:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8015052:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015056:	f102 0268 	add.w	r2, r2, #104	; 0x68
 801505a:	6013      	str	r3, [r2, #0]
  s_rhoprime = rho + SEEDBYTES;
 801505c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015060:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	3320      	adds	r3, #32
 8015068:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 801506c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8015070:	6013      	str	r3, [r2, #0]
  tr = s_rhoprime + SEEDBYTES;
 8015072:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015076:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	3320      	adds	r3, #32
 801507e:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015082:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8015086:	6013      	str	r3, [r2, #0]
  key = tr + CRHBYTES;
 8015088:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 801508c:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	3330      	adds	r3, #48	; 0x30
 8015094:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8015098:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 801509c:	6013      	str	r3, [r2, #0]
  mu = key + SEEDBYTES;
 801509e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80150a2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	3320      	adds	r3, #32
 80150aa:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80150ae:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80150b2:	6013      	str	r3, [r2, #0]
  y_rhoprime = mu + CRHBYTES;
 80150b4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80150b8:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	3330      	adds	r3, #48	; 0x30
 80150c0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80150c4:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80150c8:	6013      	str	r3, [r2, #0]
  unpack_sk(rho, s_rhoprime, tr, key, &t0, sk);
 80150ca:	f507 43ac 	add.w	r3, r7, #22016	; 0x5600
 80150ce:	f103 0304 	add.w	r3, r3, #4
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	9301      	str	r3, [sp, #4]
 80150d6:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80150da:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80150de:	3b10      	subs	r3, #16
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80150e6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80150f0:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80150f4:	6812      	ldr	r2, [r2, #0]
 80150f6:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 80150fa:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80150fe:	6809      	ldr	r1, [r1, #0]
 8015100:	f507 40ab 	add.w	r0, r7, #21888	; 0x5580
 8015104:	f100 0068 	add.w	r0, r0, #104	; 0x68
 8015108:	6800      	ldr	r0, [r0, #0]
 801510a:	f7fd fa16 	bl	801253a <pqcrystals_dilithium2aes_r_ref_upack_sk>

  //polyvecl_uniform_eta(&s1, s_rhoprime, 0);
  //polyveck_uniform_eta(&s2, s_rhoprime, L);

  /* Compute CRH(tr, msg) */
  shake256_init(&state);
 801510e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015112:	3b60      	subs	r3, #96	; 0x60
 8015114:	4618      	mov	r0, r3
 8015116:	f7fc ff86 	bl	8012026 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, tr, CRHBYTES);
 801511a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801511e:	3b60      	subs	r3, #96	; 0x60
 8015120:	2230      	movs	r2, #48	; 0x30
 8015122:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015126:	f101 0160 	add.w	r1, r1, #96	; 0x60
 801512a:	6809      	ldr	r1, [r1, #0]
 801512c:	4618      	mov	r0, r3
 801512e:	f7fc ff85 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 8015132:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8015136:	f5a3 61be 	sub.w	r1, r3, #1520	; 0x5f0
 801513a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801513e:	3b60      	subs	r3, #96	; 0x60
 8015140:	f507 42ac 	add.w	r2, r7, #22016	; 0x5600
 8015144:	6812      	ldr	r2, [r2, #0]
 8015146:	6809      	ldr	r1, [r1, #0]
 8015148:	4618      	mov	r0, r3
 801514a:	f7fc ff77 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 801514e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015152:	3b60      	subs	r3, #96	; 0x60
 8015154:	4618      	mov	r0, r3
 8015156:	f7fc ff89 	bl	801206c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
 801515a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801515e:	3b60      	subs	r3, #96	; 0x60
 8015160:	461a      	mov	r2, r3
 8015162:	2130      	movs	r1, #48	; 0x30
 8015164:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8015168:	f103 0358 	add.w	r3, r3, #88	; 0x58
 801516c:	6818      	ldr	r0, [r3, #0]
 801516e:	f7fc ffa1 	bl	80120b4 <pqcrystals_fips202_ref_shake256_squeeze>

#ifdef DILITHIUM_RANDOMIZED_SIGNING
  randombytes(hrng, y_rhoprime, CRHBYTES);
 8015172:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8015176:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801517a:	2230      	movs	r2, #48	; 0x30
 801517c:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8015180:	f101 0154 	add.w	r1, r1, #84	; 0x54
 8015184:	6809      	ldr	r1, [r1, #0]
 8015186:	6818      	ldr	r0, [r3, #0]
 8015188:	f7ff fd30 	bl	8014bec <randombytes>
  /*
  polyvec_matrix_expand(mat, rho);
  polyvecl_ntt(&s1);
  polyveck_ntt(&s2);
  */
  polyveck_ntt(&t0);
 801518c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8015190:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8015194:	3b10      	subs	r3, #16
 8015196:	4618      	mov	r0, r3
 8015198:	f7ff fc02 	bl	80149a0 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>
  // Matrix-vector multiplication
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
  polyveck_reduce(&w1);
  polyveck_invntt_tomont(&w1);
  */
  polyvec_matrix_poly_ymul_montgomery(&w1, rho, y_rhoprime, nonce);
 801519c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80151a0:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 80151a4:	881b      	ldrh	r3, [r3, #0]
 80151a6:	f507 5013 	add.w	r0, r7, #9408	; 0x24c0
 80151aa:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80151ae:	3810      	subs	r0, #16
 80151b0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80151b4:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 80151be:	f101 0168 	add.w	r1, r1, #104	; 0x68
 80151c2:	6809      	ldr	r1, [r1, #0]
 80151c4:	f7ff f8f8 	bl	80143b8 <polyvec_matrix_poly_ymul_montgomery>

  /* Decompose w and call the random oracle */
  polyveck_caddq(&w1);
 80151c8:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 80151cc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80151d0:	3b10      	subs	r3, #16
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7ff fb6c 	bl	80148b0 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 80151d8:	f507 5213 	add.w	r2, r7, #9408	; 0x24c0
 80151dc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80151e0:	3a10      	subs	r2, #16
 80151e2:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 80151e6:	f101 0110 	add.w	r1, r1, #16
 80151ea:	3910      	subs	r1, #16
 80151ec:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 80151f0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80151f4:	3b10      	subs	r3, #16
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7ff fc67 	bl	8014aca <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 80151fc:	f507 5313 	add.w	r3, r7, #9408	; 0x24c0
 8015200:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8015204:	3b10      	subs	r3, #16
 8015206:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 801520a:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 801520e:	4619      	mov	r1, r3
 8015210:	6810      	ldr	r0, [r2, #0]
 8015212:	f7ff fcc9 	bl	8014ba8 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>

  shake256_init(&state);
 8015216:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801521a:	3b60      	subs	r3, #96	; 0x60
 801521c:	4618      	mov	r0, r3
 801521e:	f7fc ff02 	bl	8012026 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 8015222:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015226:	3b60      	subs	r3, #96	; 0x60
 8015228:	2230      	movs	r2, #48	; 0x30
 801522a:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 801522e:	f101 0158 	add.w	r1, r1, #88	; 0x58
 8015232:	6809      	ldr	r1, [r1, #0]
 8015234:	4618      	mov	r0, r3
 8015236:	f7fc ff01 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 801523a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801523e:	f5a3 61bd 	sub.w	r1, r3, #1512	; 0x5e8
 8015242:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015246:	3b60      	subs	r3, #96	; 0x60
 8015248:	f44f 7240 	mov.w	r2, #768	; 0x300
 801524c:	6809      	ldr	r1, [r1, #0]
 801524e:	4618      	mov	r0, r3
 8015250:	f7fc fef4 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8015254:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015258:	3b60      	subs	r3, #96	; 0x60
 801525a:	4618      	mov	r0, r3
 801525c:	f7fc ff06 	bl	801206c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(sig, SEEDBYTES, &state);
 8015260:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015264:	3b60      	subs	r3, #96	; 0x60
 8015266:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 801526a:	f5a2 60bd 	sub.w	r0, r2, #1512	; 0x5e8
 801526e:	461a      	mov	r2, r3
 8015270:	2120      	movs	r1, #32
 8015272:	6800      	ldr	r0, [r0, #0]
 8015274:	f7fc ff1e 	bl	80120b4 <pqcrystals_fips202_ref_shake256_squeeze>
  poly_challenge(&cp, sig);
 8015278:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801527c:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8015280:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8015284:	3b10      	subs	r3, #16
 8015286:	6811      	ldr	r1, [r2, #0]
 8015288:	4618      	mov	r0, r3
 801528a:	f7fd fe98 	bl	8012fbe <pqcrystals_dilithium2aes_r_ref_poly_challenge>
  poly_ntt(&cp);
 801528e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8015292:	3b10      	subs	r3, #16
 8015294:	4618      	mov	r0, r3
 8015296:	f7fd fb85 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>

  /* Compute z, reject if it reveals secret */
  polyvec_compute_z_montgomery(&z, &cp, s_rhoprime, y_rhoprime, nonce);
 801529a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 801529e:	3910      	subs	r1, #16
 80152a0:	f507 4089 	add.w	r0, r7, #17536	; 0x4480
 80152a4:	f100 0070 	add.w	r0, r0, #112	; 0x70
 80152a8:	3810      	subs	r0, #16
 80152aa:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80152ae:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 80152b2:	881b      	ldrh	r3, [r3, #0]
 80152b4:	9300      	str	r3, [sp, #0]
 80152b6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80152ba:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80152c4:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80152c8:	6812      	ldr	r2, [r2, #0]
 80152ca:	f7ff f923 	bl	8014514 <polyvec_compute_z_montgomery>
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
  polyvecl_invntt_tomont(&z);
  polyvecl_add(&z, &z, &y);
  polyvecl_reduce(&z);
  */
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 80152ce:	f507 4389 	add.w	r3, r7, #17536	; 0x4480
 80152d2:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80152d6:	3b10      	subs	r3, #16
 80152d8:	495c      	ldr	r1, [pc, #368]	; (801544c <pqcrystals_dilithium2aes_r_ref_signature+0x440>)
 80152da:	4618      	mov	r0, r3
 80152dc:	f7ff faaf 	bl	801483e <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>
 80152e0:	4603      	mov	r3, r0
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d000      	beq.n	80152e8 <pqcrystals_dilithium2aes_r_ref_signature+0x2dc>
    goto rej;
 80152e6:	e759      	b.n	801519c <pqcrystals_dilithium2aes_r_ref_signature+0x190>
  /* Check that subtracting cs2 does not change high bits of w and low bits
   * do not reveal secret information */
  /*polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
  polyveck_invntt_tomont(&h);
  */
  polyvec_compute_h_montgomery(&h, &cp, s_rhoprime);
 80152e8:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80152ec:	3910      	subs	r1, #16
 80152ee:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80152f2:	3b10      	subs	r3, #16
 80152f4:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80152f8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80152fc:	6812      	ldr	r2, [r2, #0]
 80152fe:	4618      	mov	r0, r3
 8015300:	f7ff f982 	bl	8014608 <polyvec_compute_h_montgomery>
  polyveck_sub(&w0, &w0, &h);
 8015304:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8015308:	3a10      	subs	r2, #16
 801530a:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 801530e:	f101 0110 	add.w	r1, r1, #16
 8015312:	3910      	subs	r1, #16
 8015314:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8015318:	f103 0310 	add.w	r3, r3, #16
 801531c:	3b10      	subs	r3, #16
 801531e:	4618      	mov	r0, r3
 8015320:	f7ff fb02 	bl	8014928 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>
  polyveck_reduce(&w0);
 8015324:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8015328:	f103 0310 	add.w	r3, r3, #16
 801532c:	3b10      	subs	r3, #16
 801532e:	4618      	mov	r0, r3
 8015330:	f7ff faa5 	bl	801487e <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
 8015334:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 8015338:	f103 0310 	add.w	r3, r3, #16
 801533c:	3b10      	subs	r3, #16
 801533e:	4944      	ldr	r1, [pc, #272]	; (8015450 <pqcrystals_dilithium2aes_r_ref_signature+0x444>)
 8015340:	4618      	mov	r0, r3
 8015342:	f7ff fb7f 	bl	8014a44 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d000      	beq.n	801534e <pqcrystals_dilithium2aes_r_ref_signature+0x342>
    goto rej;
 801534c:	e726      	b.n	801519c <pqcrystals_dilithium2aes_r_ref_signature+0x190>

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 801534e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8015352:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8015356:	3a10      	subs	r2, #16
 8015358:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 801535c:	3910      	subs	r1, #16
 801535e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8015362:	3b10      	subs	r3, #16
 8015364:	4618      	mov	r0, r3
 8015366:	f7ff fb4d 	bl	8014a04 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 801536a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801536e:	3b10      	subs	r3, #16
 8015370:	4618      	mov	r0, r3
 8015372:	f7ff fb2e 	bl	80149d2 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>
  polyveck_reduce(&h);
 8015376:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801537a:	3b10      	subs	r3, #16
 801537c:	4618      	mov	r0, r3
 801537e:	f7ff fa7e 	bl	801487e <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  if(polyveck_chknorm(&h, GAMMA2))
 8015382:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8015386:	3b10      	subs	r3, #16
 8015388:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 801538c:	4618      	mov	r0, r3
 801538e:	f7ff fb59 	bl	8014a44 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d000      	beq.n	801539a <pqcrystals_dilithium2aes_r_ref_signature+0x38e>
    goto rej;
 8015398:	e700      	b.n	801519c <pqcrystals_dilithium2aes_r_ref_signature+0x190>

  polyveck_add(&w0, &w0, &h);
 801539a:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 801539e:	3a10      	subs	r2, #16
 80153a0:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 80153a4:	f101 0110 	add.w	r1, r1, #16
 80153a8:	3910      	subs	r1, #16
 80153aa:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 80153ae:	f103 0310 	add.w	r3, r3, #16
 80153b2:	3b10      	subs	r3, #16
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7ff fa94 	bl	80148e2 <pqcrystals_dilithium2aes_r_ref_polyveck_add>
  polyveck_caddq(&w0);
 80153ba:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 80153be:	f103 0310 	add.w	r3, r3, #16
 80153c2:	3b10      	subs	r3, #16
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7ff fa73 	bl	80148b0 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  n = polyveck_make_hint(&h, &w0, &w1);
 80153ca:	f507 5213 	add.w	r2, r7, #9408	; 0x24c0
 80153ce:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80153d2:	3a10      	subs	r2, #16
 80153d4:	f507 51a7 	add.w	r1, r7, #5344	; 0x14e0
 80153d8:	f101 0110 	add.w	r1, r1, #16
 80153dc:	3910      	subs	r1, #16
 80153de:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80153e2:	3b10      	subs	r3, #16
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7ff fb93 	bl	8014b10 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>
 80153ea:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80153ee:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80153f2:	6018      	str	r0, [r3, #0]
  if(n > OMEGA)
 80153f4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80153f8:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b50      	cmp	r3, #80	; 0x50
 8015400:	d900      	bls.n	8015404 <pqcrystals_dilithium2aes_r_ref_signature+0x3f8>
    goto rej;
 8015402:	e6cb      	b.n	801519c <pqcrystals_dilithium2aes_r_ref_signature+0x190>

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
 8015404:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8015408:	3b10      	subs	r3, #16
 801540a:	f507 4289 	add.w	r2, r7, #17536	; 0x4480
 801540e:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8015412:	3a10      	subs	r2, #16
 8015414:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8015418:	f5a1 61bd 	sub.w	r1, r1, #1512	; 0x5e8
 801541c:	f507 60be 	add.w	r0, r7, #1520	; 0x5f0
 8015420:	f5a0 60bd 	sub.w	r0, r0, #1512	; 0x5e8
 8015424:	6809      	ldr	r1, [r1, #0]
 8015426:	6800      	ldr	r0, [r0, #0]
 8015428:	f7fd f8fa 	bl	8012620 <pqcrystals_dilithium2aes_r_ref_pack_sig>
  *siglen = CRYPTO_BYTES;
 801542c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8015430:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	f640 1274 	movw	r2, #2420	; 0x974
 801543a:	601a      	str	r2, [r3, #0]
  return 0;
 801543c:	2300      	movs	r3, #0
}
 801543e:	4618      	mov	r0, r3
 8015440:	f507 47ab 	add.w	r7, r7, #21888	; 0x5580
 8015444:	3774      	adds	r7, #116	; 0x74
 8015446:	46bd      	mov	sp, r7
 8015448:	bd90      	pop	{r4, r7, pc}
 801544a:	bf00      	nop
 801544c:	0001ffb2 	.word	0x0001ffb2
 8015450:	000173b2 	.word	0x000173b2

08015454 <pqcrystals_dilithium2aes_r_ref>:
int crypto_sign(RNG_HandleTypeDef *hrng, uint8_t *sm,
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b088      	sub	sp, #32
 8015458:	af02      	add	r7, sp, #8
 801545a:	60f8      	str	r0, [r7, #12]
 801545c:	60b9      	str	r1, [r7, #8]
 801545e:	607a      	str	r2, [r7, #4]
 8015460:	603b      	str	r3, [r7, #0]
  size_t i;

  for(i = 0; i < mlen; ++i)
 8015462:	2300      	movs	r3, #0
 8015464:	617b      	str	r3, [r7, #20]
 8015466:	e011      	b.n	801548c <pqcrystals_dilithium2aes_r_ref+0x38>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8015468:	6a3a      	ldr	r2, [r7, #32]
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	1ad3      	subs	r3, r2, r3
 801546e:	3b01      	subs	r3, #1
 8015470:	683a      	ldr	r2, [r7, #0]
 8015472:	441a      	add	r2, r3
 8015474:	6a39      	ldr	r1, [r7, #32]
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	1acb      	subs	r3, r1, r3
 801547a:	f603 1373 	addw	r3, r3, #2419	; 0x973
 801547e:	68b9      	ldr	r1, [r7, #8]
 8015480:	440b      	add	r3, r1
 8015482:	7812      	ldrb	r2, [r2, #0]
 8015484:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < mlen; ++i)
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	3301      	adds	r3, #1
 801548a:	617b      	str	r3, [r7, #20]
 801548c:	697a      	ldr	r2, [r7, #20]
 801548e:	6a3b      	ldr	r3, [r7, #32]
 8015490:	429a      	cmp	r2, r3
 8015492:	d3e9      	bcc.n	8015468 <pqcrystals_dilithium2aes_r_ref+0x14>
  crypto_sign_signature(hrng, sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	f603 1274 	addw	r2, r3, #2420	; 0x974
 801549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549c:	9301      	str	r3, [sp, #4]
 801549e:	6a3b      	ldr	r3, [r7, #32]
 80154a0:	9300      	str	r3, [sp, #0]
 80154a2:	4613      	mov	r3, r2
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	68b9      	ldr	r1, [r7, #8]
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f7ff fdaf 	bl	801500c <pqcrystals_dilithium2aes_r_ref_signature>
  *smlen += mlen;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681a      	ldr	r2, [r3, #0]
 80154b2:	6a3b      	ldr	r3, [r7, #32]
 80154b4:	441a      	add	r2, r3
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	601a      	str	r2, [r3, #0]
  return 0;
 80154ba:	2300      	movs	r3, #0
}
 80154bc:	4618      	mov	r0, r3
 80154be:	3718      	adds	r7, #24
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <pqcrystals_dilithium2aes_r_ref_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
 80154c4:	b590      	push	{r4, r7, lr}
 80154c6:	f5ad 4d08 	sub.w	sp, sp, #34816	; 0x8800
 80154ca:	b09f      	sub	sp, #124	; 0x7c
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	f607 0478 	addw	r4, r7, #2168	; 0x878
 80154d2:	f6a4 046c 	subw	r4, r4, #2156	; 0x86c
 80154d6:	6020      	str	r0, [r4, #0]
 80154d8:	f607 0078 	addw	r0, r7, #2168	; 0x878
 80154dc:	f5a0 6007 	sub.w	r0, r0, #2160	; 0x870
 80154e0:	6001      	str	r1, [r0, #0]
 80154e2:	f607 0178 	addw	r1, r7, #2168	; 0x878
 80154e6:	f6a1 0174 	subw	r1, r1, #2164	; 0x874
 80154ea:	600a      	str	r2, [r1, #0]
 80154ec:	f607 0278 	addw	r2, r7, #2168	; 0x878
 80154f0:	f6a2 0278 	subw	r2, r2, #2168	; 0x878
 80154f4:	6013      	str	r3, [r2, #0]
  poly cp;
  polyvecl mat[K], z;
  polyveck t1, w1, h;
  keccak_state state;

  if(siglen != CRYPTO_BYTES)
 80154f6:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80154fa:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	f640 1274 	movw	r2, #2420	; 0x974
 8015504:	4293      	cmp	r3, r2
 8015506:	d002      	beq.n	801550e <pqcrystals_dilithium2aes_r_ref_verify+0x4a>
    return -1;
 8015508:	f04f 33ff 	mov.w	r3, #4294967295
 801550c:	e181      	b.n	8015812 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>

  unpack_pk(rho, &t1, pk);
 801550e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8015512:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8015516:	3b14      	subs	r3, #20
 8015518:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 801551c:	f100 0054 	add.w	r0, r0, #84	; 0x54
 8015520:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 8015524:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8015528:	6812      	ldr	r2, [r2, #0]
 801552a:	4619      	mov	r1, r3
 801552c:	f7fc ff5b 	bl	80123e6 <pqcrystals_dilithium2aes_r_ref_unpack_pk>
  if(unpack_sig(c, &z, &h, sig))
 8015530:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8015534:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 8015538:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801553c:	3a94      	subs	r2, #148	; 0x94
 801553e:	f507 5143 	add.w	r1, r7, #12480	; 0x30c0
 8015542:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8015546:	3914      	subs	r1, #20
 8015548:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 801554c:	f100 0004 	add.w	r0, r0, #4
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	f7fd f8db 	bl	801270c <pqcrystals_dilithium2aes_r_ref_unpack_sig>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d002      	beq.n	8015562 <pqcrystals_dilithium2aes_r_ref_verify+0x9e>
    return -1;
 801555c:	f04f 33ff 	mov.w	r3, #4294967295
 8015560:	e157      	b.n	8015812 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 8015562:	f507 5343 	add.w	r3, r7, #12480	; 0x30c0
 8015566:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801556a:	3b14      	subs	r3, #20
 801556c:	49ac      	ldr	r1, [pc, #688]	; (8015820 <pqcrystals_dilithium2aes_r_ref_verify+0x35c>)
 801556e:	4618      	mov	r0, r3
 8015570:	f7ff f965 	bl	801483e <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	d002      	beq.n	8015580 <pqcrystals_dilithium2aes_r_ref_verify+0xbc>
    return -1;
 801557a:	f04f 33ff 	mov.w	r3, #4294967295
 801557e:	e148      	b.n	8015812 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>

  /* Compute CRH(CRH(rho, t1), msg) */
  crh(mu, pk, CRYPTO_PUBLICKEYBYTES);
 8015580:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 8015584:	f100 0024 	add.w	r0, r0, #36	; 0x24
 8015588:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 801558c:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 8015590:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8015594:	6812      	ldr	r2, [r2, #0]
 8015596:	2130      	movs	r1, #48	; 0x30
 8015598:	f7fc fda4 	bl	80120e4 <pqcrystals_fips202_ref_shake256>
  shake256_init(&state);
 801559c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80155a0:	3b68      	subs	r3, #104	; 0x68
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fc fd3f 	bl	8012026 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 80155a8:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 80155ac:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80155b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80155b4:	3b68      	subs	r3, #104	; 0x68
 80155b6:	2230      	movs	r2, #48	; 0x30
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7fc fd3f 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 80155be:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80155c2:	f6a3 0278 	subw	r2, r3, #2168	; 0x878
 80155c6:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80155ca:	f6a3 0174 	subw	r1, r3, #2164	; 0x874
 80155ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80155d2:	3b68      	subs	r3, #104	; 0x68
 80155d4:	6812      	ldr	r2, [r2, #0]
 80155d6:	6809      	ldr	r1, [r1, #0]
 80155d8:	4618      	mov	r0, r3
 80155da:	f7fc fd2f 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80155de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80155e2:	3b68      	subs	r3, #104	; 0x68
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7fc fd41 	bl	801206c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
 80155ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80155ee:	3b68      	subs	r3, #104	; 0x68
 80155f0:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 80155f4:	f100 0024 	add.w	r0, r0, #36	; 0x24
 80155f8:	461a      	mov	r2, r3
 80155fa:	2130      	movs	r1, #48	; 0x30
 80155fc:	f7fc fd5a 	bl	80120b4 <pqcrystals_fips202_ref_shake256_squeeze>

  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  poly_challenge(&cp, c);
 8015600:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8015604:	f102 0204 	add.w	r2, r2, #4
 8015608:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 801560c:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8015610:	4611      	mov	r1, r2
 8015612:	4618      	mov	r0, r3
 8015614:	f7fd fcd3 	bl	8012fbe <pqcrystals_dilithium2aes_r_ref_poly_challenge>
  polyvec_matrix_expand(mat, rho);
 8015618:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 801561c:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8015620:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8015624:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8015628:	3b14      	subs	r3, #20
 801562a:	4611      	mov	r1, r2
 801562c:	4618      	mov	r0, r3
 801562e:	f7ff f842 	bl	80146b6 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand>

  polyvecl_ntt(&z);
 8015632:	f507 5343 	add.w	r3, r7, #12480	; 0x30c0
 8015636:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801563a:	3b14      	subs	r3, #20
 801563c:	4618      	mov	r0, r3
 801563e:	f7ff f889 	bl	8014754 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8015642:	f507 5243 	add.w	r2, r7, #12480	; 0x30c0
 8015646:	f102 0238 	add.w	r2, r2, #56	; 0x38
 801564a:	3a14      	subs	r2, #20
 801564c:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8015650:	f101 0178 	add.w	r1, r1, #120	; 0x78
 8015654:	3914      	subs	r1, #20
 8015656:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801565a:	f103 0318 	add.w	r3, r3, #24
 801565e:	3b14      	subs	r3, #20
 8015660:	4618      	mov	r0, r3
 8015662:	f7ff f857 	bl	8014714 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery>

  poly_ntt(&cp);
 8015666:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 801566a:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 801566e:	4618      	mov	r0, r3
 8015670:	f7fd f998 	bl	80129a4 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  polyveck_shiftl(&t1);
 8015674:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8015678:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801567c:	3b14      	subs	r3, #20
 801567e:	4618      	mov	r0, r3
 8015680:	f7ff f975 	bl	801496e <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl>
  polyveck_ntt(&t1);
 8015684:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8015688:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801568c:	3b14      	subs	r3, #20
 801568e:	4618      	mov	r0, r3
 8015690:	f7ff f986 	bl	80149a0 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>
  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 8015694:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8015698:	f102 0238 	add.w	r2, r2, #56	; 0x38
 801569c:	3a14      	subs	r2, #20
 801569e:	f507 4100 	add.w	r1, r7, #32768	; 0x8000
 80156a2:	f101 01e4 	add.w	r1, r1, #228	; 0xe4
 80156a6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80156aa:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80156ae:	3b14      	subs	r3, #20
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7ff f9a7 	bl	8014a04 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>

  polyveck_sub(&w1, &w1, &t1);
 80156b6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80156ba:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80156be:	3a14      	subs	r2, #20
 80156c0:	f507 5187 	add.w	r1, r7, #4320	; 0x10e0
 80156c4:	f101 0118 	add.w	r1, r1, #24
 80156c8:	3914      	subs	r1, #20
 80156ca:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80156ce:	f103 0318 	add.w	r3, r3, #24
 80156d2:	3b14      	subs	r3, #20
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff f927 	bl	8014928 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>
  polyveck_reduce(&w1);
 80156da:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80156de:	f103 0318 	add.w	r3, r3, #24
 80156e2:	3b14      	subs	r3, #20
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7ff f8ca 	bl	801487e <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 80156ea:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80156ee:	f103 0318 	add.w	r3, r3, #24
 80156f2:	3b14      	subs	r3, #20
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7ff f96c 	bl	80149d2 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>

  /* Reconstruct w1 */
  polyveck_caddq(&w1);
 80156fa:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80156fe:	f103 0318 	add.w	r3, r3, #24
 8015702:	3b14      	subs	r3, #20
 8015704:	4618      	mov	r0, r3
 8015706:	f7ff f8d3 	bl	80148b0 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_use_hint(&w1, &w1, &h);
 801570a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801570e:	3a94      	subs	r2, #148	; 0x94
 8015710:	f507 5187 	add.w	r1, r7, #4320	; 0x10e0
 8015714:	f101 0118 	add.w	r1, r1, #24
 8015718:	3914      	subs	r1, #20
 801571a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801571e:	f103 0318 	add.w	r3, r3, #24
 8015722:	3b14      	subs	r3, #20
 8015724:	4618      	mov	r0, r3
 8015726:	f7ff fa1c 	bl	8014b62 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint>
  polyveck_pack_w1(buf, &w1);
 801572a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801572e:	f103 0318 	add.w	r3, r3, #24
 8015732:	3b14      	subs	r3, #20
 8015734:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8015738:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801573c:	4619      	mov	r1, r3
 801573e:	4610      	mov	r0, r2
 8015740:	f7ff fa32 	bl	8014ba8 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>

  /* Call random oracle and verify challenge */
  shake256_init(&state);
 8015744:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015748:	3b68      	subs	r3, #104	; 0x68
 801574a:	4618      	mov	r0, r3
 801574c:	f7fc fc6b 	bl	8012026 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 8015750:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 8015754:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8015758:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801575c:	3b68      	subs	r3, #104	; 0x68
 801575e:	2230      	movs	r2, #48	; 0x30
 8015760:	4618      	mov	r0, r3
 8015762:	f7fc fc6b 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
 8015766:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 801576a:	f101 0174 	add.w	r1, r1, #116	; 0x74
 801576e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015772:	3b68      	subs	r3, #104	; 0x68
 8015774:	f44f 7240 	mov.w	r2, #768	; 0x300
 8015778:	4618      	mov	r0, r3
 801577a:	f7fc fc5f 	bl	801203c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 801577e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015782:	3b68      	subs	r3, #104	; 0x68
 8015784:	4618      	mov	r0, r3
 8015786:	f7fc fc71 	bl	801206c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(c2, SEEDBYTES, &state);
 801578a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801578e:	3b68      	subs	r3, #104	; 0x68
 8015790:	f507 4004 	add.w	r0, r7, #33792	; 0x8400
 8015794:	f100 00e4 	add.w	r0, r0, #228	; 0xe4
 8015798:	461a      	mov	r2, r3
 801579a:	2120      	movs	r1, #32
 801579c:	f7fc fc8a 	bl	80120b4 <pqcrystals_fips202_ref_shake256_squeeze>
  for(i = 0; i < SEEDBYTES; ++i)
 80157a0:	2300      	movs	r3, #0
 80157a2:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 80157a6:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80157aa:	6013      	str	r3, [r2, #0]
 80157ac:	e029      	b.n	8015802 <pqcrystals_dilithium2aes_r_ref_verify+0x33e>
    if(c[i] != c2[i])
 80157ae:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 80157b2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80157b6:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 80157ba:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 80157be:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	4413      	add	r3, r2
 80157c6:	781a      	ldrb	r2, [r3, #0]
 80157c8:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 80157cc:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80157d0:	f5a3 7165 	sub.w	r1, r3, #916	; 0x394
 80157d4:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 80157d8:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	440b      	add	r3, r1
 80157e0:	781b      	ldrb	r3, [r3, #0]
 80157e2:	429a      	cmp	r2, r3
 80157e4:	d002      	beq.n	80157ec <pqcrystals_dilithium2aes_r_ref_verify+0x328>
      return -1;
 80157e6:	f04f 33ff 	mov.w	r3, #4294967295
 80157ea:	e012      	b.n	8015812 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>
  for(i = 0; i < SEEDBYTES; ++i)
 80157ec:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 80157f0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	3301      	adds	r3, #1
 80157f8:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 80157fc:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8015800:	6013      	str	r3, [r2, #0]
 8015802:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 8015806:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2b1f      	cmp	r3, #31
 801580e:	d9ce      	bls.n	80157ae <pqcrystals_dilithium2aes_r_ref_verify+0x2ea>

  return 0;
 8015810:	2300      	movs	r3, #0
}
 8015812:	4618      	mov	r0, r3
 8015814:	f507 4708 	add.w	r7, r7, #34816	; 0x8800
 8015818:	377c      	adds	r7, #124	; 0x7c
 801581a:	46bd      	mov	sp, r7
 801581c:	bd90      	pop	{r4, r7, pc}
 801581e:	bf00      	nop
 8015820:	0001ffb2 	.word	0x0001ffb2

08015824 <pqcrystals_dilithium2aes_r_ref_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b088      	sub	sp, #32
 8015828:	af02      	add	r7, sp, #8
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	607a      	str	r2, [r7, #4]
 8015830:	603b      	str	r3, [r7, #0]
  size_t i;

  if(smlen < CRYPTO_BYTES)
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	f640 1273 	movw	r2, #2419	; 0x973
 8015838:	4293      	cmp	r3, r2
 801583a:	d92b      	bls.n	8015894 <pqcrystals_dilithium2aes_r_ref_open+0x70>
    goto badsig;

  *mlen = smlen - CRYPTO_BYTES;
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	f6a3 1274 	subw	r2, r3, #2420	; 0x974
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	601a      	str	r2, [r3, #0]
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f603 1274 	addw	r2, r3, #2420	; 0x974
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	6819      	ldr	r1, [r3, #0]
 8015850:	6a3b      	ldr	r3, [r7, #32]
 8015852:	9300      	str	r3, [sp, #0]
 8015854:	460b      	mov	r3, r1
 8015856:	f640 1174 	movw	r1, #2420	; 0x974
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f7ff fe32 	bl	80154c4 <pqcrystals_dilithium2aes_r_ref_verify>
 8015860:	4603      	mov	r3, r0
 8015862:	2b00      	cmp	r3, #0
 8015864:	d118      	bne.n	8015898 <pqcrystals_dilithium2aes_r_ref_open+0x74>
    goto badsig;
  else {
    /* All good, copy msg, return 0 */
    for(i = 0; i < *mlen; ++i)
 8015866:	2300      	movs	r3, #0
 8015868:	617b      	str	r3, [r7, #20]
 801586a:	e00c      	b.n	8015886 <pqcrystals_dilithium2aes_r_ref_open+0x62>
      m[i] = sm[CRYPTO_BYTES + i];
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	f603 1374 	addw	r3, r3, #2420	; 0x974
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	441a      	add	r2, r3
 8015876:	68f9      	ldr	r1, [r7, #12]
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	440b      	add	r3, r1
 801587c:	7812      	ldrb	r2, [r2, #0]
 801587e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < *mlen; ++i)
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	3301      	adds	r3, #1
 8015884:	617b      	str	r3, [r7, #20]
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	697a      	ldr	r2, [r7, #20]
 801588c:	429a      	cmp	r2, r3
 801588e:	d3ed      	bcc.n	801586c <pqcrystals_dilithium2aes_r_ref_open+0x48>
    return 0;
 8015890:	2300      	movs	r3, #0
 8015892:	e017      	b.n	80158c4 <pqcrystals_dilithium2aes_r_ref_open+0xa0>
    goto badsig;
 8015894:	bf00      	nop
 8015896:	e000      	b.n	801589a <pqcrystals_dilithium2aes_r_ref_open+0x76>
    goto badsig;
 8015898:	bf00      	nop
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	f04f 32ff 	mov.w	r2, #4294967295
 80158a0:	601a      	str	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 80158a2:	2300      	movs	r3, #0
 80158a4:	617b      	str	r3, [r7, #20]
 80158a6:	e007      	b.n	80158b8 <pqcrystals_dilithium2aes_r_ref_open+0x94>
    m[i] = 0;
 80158a8:	68fa      	ldr	r2, [r7, #12]
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	4413      	add	r3, r2
 80158ae:	2200      	movs	r2, #0
 80158b0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	3301      	adds	r3, #1
 80158b6:	617b      	str	r3, [r7, #20]
 80158b8:	697a      	ldr	r2, [r7, #20]
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d3f3      	bcc.n	80158a8 <pqcrystals_dilithium2aes_r_ref_open+0x84>

  return -1;
 80158c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3718      	adds	r7, #24
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>:
#include "aes256ctr.h"

void dilithium_aes256ctr_init(aes256ctr_ctx *state,
                              const uint8_t key[32],
                              uint16_t nonce)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b088      	sub	sp, #32
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	4613      	mov	r3, r2
 80158d8:	80fb      	strh	r3, [r7, #6]
  uint8_t expnonce[12] = {0};
 80158da:	2300      	movs	r3, #0
 80158dc:	617b      	str	r3, [r7, #20]
 80158de:	f107 0318 	add.w	r3, r7, #24
 80158e2:	2200      	movs	r2, #0
 80158e4:	601a      	str	r2, [r3, #0]
 80158e6:	605a      	str	r2, [r3, #4]
  expnonce[0] = nonce;
 80158e8:	88fb      	ldrh	r3, [r7, #6]
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	753b      	strb	r3, [r7, #20]
  expnonce[1] = nonce >> 8;
 80158ee:	88fb      	ldrh	r3, [r7, #6]
 80158f0:	0a1b      	lsrs	r3, r3, #8
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	b2db      	uxtb	r3, r3
 80158f6:	757b      	strb	r3, [r7, #21]
  aes256ctr_init(state, key, expnonce);
 80158f8:	f107 0314 	add.w	r3, r7, #20
 80158fc:	461a      	mov	r2, r3
 80158fe:	68b9      	ldr	r1, [r7, #8]
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f7f8 ff73 	bl	800e7ec <pqcrystals_aes256ctr_ref_init>
}
 8015906:	bf00      	nop
 8015908:	3720      	adds	r7, #32
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
	...

08015910 <__errno>:
 8015910:	4b01      	ldr	r3, [pc, #4]	; (8015918 <__errno+0x8>)
 8015912:	6818      	ldr	r0, [r3, #0]
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop
 8015918:	20000108 	.word	0x20000108

0801591c <__libc_init_array>:
 801591c:	b570      	push	{r4, r5, r6, lr}
 801591e:	4d0d      	ldr	r5, [pc, #52]	; (8015954 <__libc_init_array+0x38>)
 8015920:	4c0d      	ldr	r4, [pc, #52]	; (8015958 <__libc_init_array+0x3c>)
 8015922:	1b64      	subs	r4, r4, r5
 8015924:	10a4      	asrs	r4, r4, #2
 8015926:	2600      	movs	r6, #0
 8015928:	42a6      	cmp	r6, r4
 801592a:	d109      	bne.n	8015940 <__libc_init_array+0x24>
 801592c:	4d0b      	ldr	r5, [pc, #44]	; (801595c <__libc_init_array+0x40>)
 801592e:	4c0c      	ldr	r4, [pc, #48]	; (8015960 <__libc_init_array+0x44>)
 8015930:	f000 fc8e 	bl	8016250 <_init>
 8015934:	1b64      	subs	r4, r4, r5
 8015936:	10a4      	asrs	r4, r4, #2
 8015938:	2600      	movs	r6, #0
 801593a:	42a6      	cmp	r6, r4
 801593c:	d105      	bne.n	801594a <__libc_init_array+0x2e>
 801593e:	bd70      	pop	{r4, r5, r6, pc}
 8015940:	f855 3b04 	ldr.w	r3, [r5], #4
 8015944:	4798      	blx	r3
 8015946:	3601      	adds	r6, #1
 8015948:	e7ee      	b.n	8015928 <__libc_init_array+0xc>
 801594a:	f855 3b04 	ldr.w	r3, [r5], #4
 801594e:	4798      	blx	r3
 8015950:	3601      	adds	r6, #1
 8015952:	e7f2      	b.n	801593a <__libc_init_array+0x1e>
 8015954:	080169bc 	.word	0x080169bc
 8015958:	080169bc 	.word	0x080169bc
 801595c:	080169bc 	.word	0x080169bc
 8015960:	080169c0 	.word	0x080169c0

08015964 <memcpy>:
 8015964:	440a      	add	r2, r1
 8015966:	4291      	cmp	r1, r2
 8015968:	f100 33ff 	add.w	r3, r0, #4294967295
 801596c:	d100      	bne.n	8015970 <memcpy+0xc>
 801596e:	4770      	bx	lr
 8015970:	b510      	push	{r4, lr}
 8015972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015976:	f803 4f01 	strb.w	r4, [r3, #1]!
 801597a:	4291      	cmp	r1, r2
 801597c:	d1f9      	bne.n	8015972 <memcpy+0xe>
 801597e:	bd10      	pop	{r4, pc}

08015980 <memset>:
 8015980:	4402      	add	r2, r0
 8015982:	4603      	mov	r3, r0
 8015984:	4293      	cmp	r3, r2
 8015986:	d100      	bne.n	801598a <memset+0xa>
 8015988:	4770      	bx	lr
 801598a:	f803 1b01 	strb.w	r1, [r3], #1
 801598e:	e7f9      	b.n	8015984 <memset+0x4>

08015990 <siprintf>:
 8015990:	b40e      	push	{r1, r2, r3}
 8015992:	b500      	push	{lr}
 8015994:	b09c      	sub	sp, #112	; 0x70
 8015996:	ab1d      	add	r3, sp, #116	; 0x74
 8015998:	9002      	str	r0, [sp, #8]
 801599a:	9006      	str	r0, [sp, #24]
 801599c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80159a0:	4809      	ldr	r0, [pc, #36]	; (80159c8 <siprintf+0x38>)
 80159a2:	9107      	str	r1, [sp, #28]
 80159a4:	9104      	str	r1, [sp, #16]
 80159a6:	4909      	ldr	r1, [pc, #36]	; (80159cc <siprintf+0x3c>)
 80159a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80159ac:	9105      	str	r1, [sp, #20]
 80159ae:	6800      	ldr	r0, [r0, #0]
 80159b0:	9301      	str	r3, [sp, #4]
 80159b2:	a902      	add	r1, sp, #8
 80159b4:	f000 f868 	bl	8015a88 <_svfiprintf_r>
 80159b8:	9b02      	ldr	r3, [sp, #8]
 80159ba:	2200      	movs	r2, #0
 80159bc:	701a      	strb	r2, [r3, #0]
 80159be:	b01c      	add	sp, #112	; 0x70
 80159c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80159c4:	b003      	add	sp, #12
 80159c6:	4770      	bx	lr
 80159c8:	20000108 	.word	0x20000108
 80159cc:	ffff0208 	.word	0xffff0208

080159d0 <__ssputs_r>:
 80159d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159d4:	688e      	ldr	r6, [r1, #8]
 80159d6:	429e      	cmp	r6, r3
 80159d8:	4682      	mov	sl, r0
 80159da:	460c      	mov	r4, r1
 80159dc:	4690      	mov	r8, r2
 80159de:	461f      	mov	r7, r3
 80159e0:	d838      	bhi.n	8015a54 <__ssputs_r+0x84>
 80159e2:	898a      	ldrh	r2, [r1, #12]
 80159e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80159e8:	d032      	beq.n	8015a50 <__ssputs_r+0x80>
 80159ea:	6825      	ldr	r5, [r4, #0]
 80159ec:	6909      	ldr	r1, [r1, #16]
 80159ee:	eba5 0901 	sub.w	r9, r5, r1
 80159f2:	6965      	ldr	r5, [r4, #20]
 80159f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80159fc:	3301      	adds	r3, #1
 80159fe:	444b      	add	r3, r9
 8015a00:	106d      	asrs	r5, r5, #1
 8015a02:	429d      	cmp	r5, r3
 8015a04:	bf38      	it	cc
 8015a06:	461d      	movcc	r5, r3
 8015a08:	0553      	lsls	r3, r2, #21
 8015a0a:	d531      	bpl.n	8015a70 <__ssputs_r+0xa0>
 8015a0c:	4629      	mov	r1, r5
 8015a0e:	f000 fb55 	bl	80160bc <_malloc_r>
 8015a12:	4606      	mov	r6, r0
 8015a14:	b950      	cbnz	r0, 8015a2c <__ssputs_r+0x5c>
 8015a16:	230c      	movs	r3, #12
 8015a18:	f8ca 3000 	str.w	r3, [sl]
 8015a1c:	89a3      	ldrh	r3, [r4, #12]
 8015a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a22:	81a3      	strh	r3, [r4, #12]
 8015a24:	f04f 30ff 	mov.w	r0, #4294967295
 8015a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a2c:	6921      	ldr	r1, [r4, #16]
 8015a2e:	464a      	mov	r2, r9
 8015a30:	f7ff ff98 	bl	8015964 <memcpy>
 8015a34:	89a3      	ldrh	r3, [r4, #12]
 8015a36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a3e:	81a3      	strh	r3, [r4, #12]
 8015a40:	6126      	str	r6, [r4, #16]
 8015a42:	6165      	str	r5, [r4, #20]
 8015a44:	444e      	add	r6, r9
 8015a46:	eba5 0509 	sub.w	r5, r5, r9
 8015a4a:	6026      	str	r6, [r4, #0]
 8015a4c:	60a5      	str	r5, [r4, #8]
 8015a4e:	463e      	mov	r6, r7
 8015a50:	42be      	cmp	r6, r7
 8015a52:	d900      	bls.n	8015a56 <__ssputs_r+0x86>
 8015a54:	463e      	mov	r6, r7
 8015a56:	6820      	ldr	r0, [r4, #0]
 8015a58:	4632      	mov	r2, r6
 8015a5a:	4641      	mov	r1, r8
 8015a5c:	f000 faa8 	bl	8015fb0 <memmove>
 8015a60:	68a3      	ldr	r3, [r4, #8]
 8015a62:	1b9b      	subs	r3, r3, r6
 8015a64:	60a3      	str	r3, [r4, #8]
 8015a66:	6823      	ldr	r3, [r4, #0]
 8015a68:	4433      	add	r3, r6
 8015a6a:	6023      	str	r3, [r4, #0]
 8015a6c:	2000      	movs	r0, #0
 8015a6e:	e7db      	b.n	8015a28 <__ssputs_r+0x58>
 8015a70:	462a      	mov	r2, r5
 8015a72:	f000 fb97 	bl	80161a4 <_realloc_r>
 8015a76:	4606      	mov	r6, r0
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	d1e1      	bne.n	8015a40 <__ssputs_r+0x70>
 8015a7c:	6921      	ldr	r1, [r4, #16]
 8015a7e:	4650      	mov	r0, sl
 8015a80:	f000 fab0 	bl	8015fe4 <_free_r>
 8015a84:	e7c7      	b.n	8015a16 <__ssputs_r+0x46>
	...

08015a88 <_svfiprintf_r>:
 8015a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a8c:	4698      	mov	r8, r3
 8015a8e:	898b      	ldrh	r3, [r1, #12]
 8015a90:	061b      	lsls	r3, r3, #24
 8015a92:	b09d      	sub	sp, #116	; 0x74
 8015a94:	4607      	mov	r7, r0
 8015a96:	460d      	mov	r5, r1
 8015a98:	4614      	mov	r4, r2
 8015a9a:	d50e      	bpl.n	8015aba <_svfiprintf_r+0x32>
 8015a9c:	690b      	ldr	r3, [r1, #16]
 8015a9e:	b963      	cbnz	r3, 8015aba <_svfiprintf_r+0x32>
 8015aa0:	2140      	movs	r1, #64	; 0x40
 8015aa2:	f000 fb0b 	bl	80160bc <_malloc_r>
 8015aa6:	6028      	str	r0, [r5, #0]
 8015aa8:	6128      	str	r0, [r5, #16]
 8015aaa:	b920      	cbnz	r0, 8015ab6 <_svfiprintf_r+0x2e>
 8015aac:	230c      	movs	r3, #12
 8015aae:	603b      	str	r3, [r7, #0]
 8015ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ab4:	e0d1      	b.n	8015c5a <_svfiprintf_r+0x1d2>
 8015ab6:	2340      	movs	r3, #64	; 0x40
 8015ab8:	616b      	str	r3, [r5, #20]
 8015aba:	2300      	movs	r3, #0
 8015abc:	9309      	str	r3, [sp, #36]	; 0x24
 8015abe:	2320      	movs	r3, #32
 8015ac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ac8:	2330      	movs	r3, #48	; 0x30
 8015aca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015c74 <_svfiprintf_r+0x1ec>
 8015ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ad2:	f04f 0901 	mov.w	r9, #1
 8015ad6:	4623      	mov	r3, r4
 8015ad8:	469a      	mov	sl, r3
 8015ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ade:	b10a      	cbz	r2, 8015ae4 <_svfiprintf_r+0x5c>
 8015ae0:	2a25      	cmp	r2, #37	; 0x25
 8015ae2:	d1f9      	bne.n	8015ad8 <_svfiprintf_r+0x50>
 8015ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8015ae8:	d00b      	beq.n	8015b02 <_svfiprintf_r+0x7a>
 8015aea:	465b      	mov	r3, fp
 8015aec:	4622      	mov	r2, r4
 8015aee:	4629      	mov	r1, r5
 8015af0:	4638      	mov	r0, r7
 8015af2:	f7ff ff6d 	bl	80159d0 <__ssputs_r>
 8015af6:	3001      	adds	r0, #1
 8015af8:	f000 80aa 	beq.w	8015c50 <_svfiprintf_r+0x1c8>
 8015afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015afe:	445a      	add	r2, fp
 8015b00:	9209      	str	r2, [sp, #36]	; 0x24
 8015b02:	f89a 3000 	ldrb.w	r3, [sl]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	f000 80a2 	beq.w	8015c50 <_svfiprintf_r+0x1c8>
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b16:	f10a 0a01 	add.w	sl, sl, #1
 8015b1a:	9304      	str	r3, [sp, #16]
 8015b1c:	9307      	str	r3, [sp, #28]
 8015b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b22:	931a      	str	r3, [sp, #104]	; 0x68
 8015b24:	4654      	mov	r4, sl
 8015b26:	2205      	movs	r2, #5
 8015b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b2c:	4851      	ldr	r0, [pc, #324]	; (8015c74 <_svfiprintf_r+0x1ec>)
 8015b2e:	f7ea fb27 	bl	8000180 <memchr>
 8015b32:	9a04      	ldr	r2, [sp, #16]
 8015b34:	b9d8      	cbnz	r0, 8015b6e <_svfiprintf_r+0xe6>
 8015b36:	06d0      	lsls	r0, r2, #27
 8015b38:	bf44      	itt	mi
 8015b3a:	2320      	movmi	r3, #32
 8015b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b40:	0711      	lsls	r1, r2, #28
 8015b42:	bf44      	itt	mi
 8015b44:	232b      	movmi	r3, #43	; 0x2b
 8015b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8015b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8015b50:	d015      	beq.n	8015b7e <_svfiprintf_r+0xf6>
 8015b52:	9a07      	ldr	r2, [sp, #28]
 8015b54:	4654      	mov	r4, sl
 8015b56:	2000      	movs	r0, #0
 8015b58:	f04f 0c0a 	mov.w	ip, #10
 8015b5c:	4621      	mov	r1, r4
 8015b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b62:	3b30      	subs	r3, #48	; 0x30
 8015b64:	2b09      	cmp	r3, #9
 8015b66:	d94e      	bls.n	8015c06 <_svfiprintf_r+0x17e>
 8015b68:	b1b0      	cbz	r0, 8015b98 <_svfiprintf_r+0x110>
 8015b6a:	9207      	str	r2, [sp, #28]
 8015b6c:	e014      	b.n	8015b98 <_svfiprintf_r+0x110>
 8015b6e:	eba0 0308 	sub.w	r3, r0, r8
 8015b72:	fa09 f303 	lsl.w	r3, r9, r3
 8015b76:	4313      	orrs	r3, r2
 8015b78:	9304      	str	r3, [sp, #16]
 8015b7a:	46a2      	mov	sl, r4
 8015b7c:	e7d2      	b.n	8015b24 <_svfiprintf_r+0x9c>
 8015b7e:	9b03      	ldr	r3, [sp, #12]
 8015b80:	1d19      	adds	r1, r3, #4
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	9103      	str	r1, [sp, #12]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	bfbb      	ittet	lt
 8015b8a:	425b      	neglt	r3, r3
 8015b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8015b90:	9307      	strge	r3, [sp, #28]
 8015b92:	9307      	strlt	r3, [sp, #28]
 8015b94:	bfb8      	it	lt
 8015b96:	9204      	strlt	r2, [sp, #16]
 8015b98:	7823      	ldrb	r3, [r4, #0]
 8015b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8015b9c:	d10c      	bne.n	8015bb8 <_svfiprintf_r+0x130>
 8015b9e:	7863      	ldrb	r3, [r4, #1]
 8015ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8015ba2:	d135      	bne.n	8015c10 <_svfiprintf_r+0x188>
 8015ba4:	9b03      	ldr	r3, [sp, #12]
 8015ba6:	1d1a      	adds	r2, r3, #4
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	9203      	str	r2, [sp, #12]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	bfb8      	it	lt
 8015bb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8015bb4:	3402      	adds	r4, #2
 8015bb6:	9305      	str	r3, [sp, #20]
 8015bb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015c84 <_svfiprintf_r+0x1fc>
 8015bbc:	7821      	ldrb	r1, [r4, #0]
 8015bbe:	2203      	movs	r2, #3
 8015bc0:	4650      	mov	r0, sl
 8015bc2:	f7ea fadd 	bl	8000180 <memchr>
 8015bc6:	b140      	cbz	r0, 8015bda <_svfiprintf_r+0x152>
 8015bc8:	2340      	movs	r3, #64	; 0x40
 8015bca:	eba0 000a 	sub.w	r0, r0, sl
 8015bce:	fa03 f000 	lsl.w	r0, r3, r0
 8015bd2:	9b04      	ldr	r3, [sp, #16]
 8015bd4:	4303      	orrs	r3, r0
 8015bd6:	3401      	adds	r4, #1
 8015bd8:	9304      	str	r3, [sp, #16]
 8015bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bde:	4826      	ldr	r0, [pc, #152]	; (8015c78 <_svfiprintf_r+0x1f0>)
 8015be0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015be4:	2206      	movs	r2, #6
 8015be6:	f7ea facb 	bl	8000180 <memchr>
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d038      	beq.n	8015c60 <_svfiprintf_r+0x1d8>
 8015bee:	4b23      	ldr	r3, [pc, #140]	; (8015c7c <_svfiprintf_r+0x1f4>)
 8015bf0:	bb1b      	cbnz	r3, 8015c3a <_svfiprintf_r+0x1b2>
 8015bf2:	9b03      	ldr	r3, [sp, #12]
 8015bf4:	3307      	adds	r3, #7
 8015bf6:	f023 0307 	bic.w	r3, r3, #7
 8015bfa:	3308      	adds	r3, #8
 8015bfc:	9303      	str	r3, [sp, #12]
 8015bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c00:	4433      	add	r3, r6
 8015c02:	9309      	str	r3, [sp, #36]	; 0x24
 8015c04:	e767      	b.n	8015ad6 <_svfiprintf_r+0x4e>
 8015c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c0a:	460c      	mov	r4, r1
 8015c0c:	2001      	movs	r0, #1
 8015c0e:	e7a5      	b.n	8015b5c <_svfiprintf_r+0xd4>
 8015c10:	2300      	movs	r3, #0
 8015c12:	3401      	adds	r4, #1
 8015c14:	9305      	str	r3, [sp, #20]
 8015c16:	4619      	mov	r1, r3
 8015c18:	f04f 0c0a 	mov.w	ip, #10
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c22:	3a30      	subs	r2, #48	; 0x30
 8015c24:	2a09      	cmp	r2, #9
 8015c26:	d903      	bls.n	8015c30 <_svfiprintf_r+0x1a8>
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d0c5      	beq.n	8015bb8 <_svfiprintf_r+0x130>
 8015c2c:	9105      	str	r1, [sp, #20]
 8015c2e:	e7c3      	b.n	8015bb8 <_svfiprintf_r+0x130>
 8015c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c34:	4604      	mov	r4, r0
 8015c36:	2301      	movs	r3, #1
 8015c38:	e7f0      	b.n	8015c1c <_svfiprintf_r+0x194>
 8015c3a:	ab03      	add	r3, sp, #12
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	462a      	mov	r2, r5
 8015c40:	4b0f      	ldr	r3, [pc, #60]	; (8015c80 <_svfiprintf_r+0x1f8>)
 8015c42:	a904      	add	r1, sp, #16
 8015c44:	4638      	mov	r0, r7
 8015c46:	f3af 8000 	nop.w
 8015c4a:	1c42      	adds	r2, r0, #1
 8015c4c:	4606      	mov	r6, r0
 8015c4e:	d1d6      	bne.n	8015bfe <_svfiprintf_r+0x176>
 8015c50:	89ab      	ldrh	r3, [r5, #12]
 8015c52:	065b      	lsls	r3, r3, #25
 8015c54:	f53f af2c 	bmi.w	8015ab0 <_svfiprintf_r+0x28>
 8015c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c5a:	b01d      	add	sp, #116	; 0x74
 8015c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c60:	ab03      	add	r3, sp, #12
 8015c62:	9300      	str	r3, [sp, #0]
 8015c64:	462a      	mov	r2, r5
 8015c66:	4b06      	ldr	r3, [pc, #24]	; (8015c80 <_svfiprintf_r+0x1f8>)
 8015c68:	a904      	add	r1, sp, #16
 8015c6a:	4638      	mov	r0, r7
 8015c6c:	f000 f87a 	bl	8015d64 <_printf_i>
 8015c70:	e7eb      	b.n	8015c4a <_svfiprintf_r+0x1c2>
 8015c72:	bf00      	nop
 8015c74:	08016980 	.word	0x08016980
 8015c78:	0801698a 	.word	0x0801698a
 8015c7c:	00000000 	.word	0x00000000
 8015c80:	080159d1 	.word	0x080159d1
 8015c84:	08016986 	.word	0x08016986

08015c88 <_printf_common>:
 8015c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c8c:	4616      	mov	r6, r2
 8015c8e:	4699      	mov	r9, r3
 8015c90:	688a      	ldr	r2, [r1, #8]
 8015c92:	690b      	ldr	r3, [r1, #16]
 8015c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	bfb8      	it	lt
 8015c9c:	4613      	movlt	r3, r2
 8015c9e:	6033      	str	r3, [r6, #0]
 8015ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ca4:	4607      	mov	r7, r0
 8015ca6:	460c      	mov	r4, r1
 8015ca8:	b10a      	cbz	r2, 8015cae <_printf_common+0x26>
 8015caa:	3301      	adds	r3, #1
 8015cac:	6033      	str	r3, [r6, #0]
 8015cae:	6823      	ldr	r3, [r4, #0]
 8015cb0:	0699      	lsls	r1, r3, #26
 8015cb2:	bf42      	ittt	mi
 8015cb4:	6833      	ldrmi	r3, [r6, #0]
 8015cb6:	3302      	addmi	r3, #2
 8015cb8:	6033      	strmi	r3, [r6, #0]
 8015cba:	6825      	ldr	r5, [r4, #0]
 8015cbc:	f015 0506 	ands.w	r5, r5, #6
 8015cc0:	d106      	bne.n	8015cd0 <_printf_common+0x48>
 8015cc2:	f104 0a19 	add.w	sl, r4, #25
 8015cc6:	68e3      	ldr	r3, [r4, #12]
 8015cc8:	6832      	ldr	r2, [r6, #0]
 8015cca:	1a9b      	subs	r3, r3, r2
 8015ccc:	42ab      	cmp	r3, r5
 8015cce:	dc26      	bgt.n	8015d1e <_printf_common+0x96>
 8015cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015cd4:	1e13      	subs	r3, r2, #0
 8015cd6:	6822      	ldr	r2, [r4, #0]
 8015cd8:	bf18      	it	ne
 8015cda:	2301      	movne	r3, #1
 8015cdc:	0692      	lsls	r2, r2, #26
 8015cde:	d42b      	bmi.n	8015d38 <_printf_common+0xb0>
 8015ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ce4:	4649      	mov	r1, r9
 8015ce6:	4638      	mov	r0, r7
 8015ce8:	47c0      	blx	r8
 8015cea:	3001      	adds	r0, #1
 8015cec:	d01e      	beq.n	8015d2c <_printf_common+0xa4>
 8015cee:	6823      	ldr	r3, [r4, #0]
 8015cf0:	68e5      	ldr	r5, [r4, #12]
 8015cf2:	6832      	ldr	r2, [r6, #0]
 8015cf4:	f003 0306 	and.w	r3, r3, #6
 8015cf8:	2b04      	cmp	r3, #4
 8015cfa:	bf08      	it	eq
 8015cfc:	1aad      	subeq	r5, r5, r2
 8015cfe:	68a3      	ldr	r3, [r4, #8]
 8015d00:	6922      	ldr	r2, [r4, #16]
 8015d02:	bf0c      	ite	eq
 8015d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d08:	2500      	movne	r5, #0
 8015d0a:	4293      	cmp	r3, r2
 8015d0c:	bfc4      	itt	gt
 8015d0e:	1a9b      	subgt	r3, r3, r2
 8015d10:	18ed      	addgt	r5, r5, r3
 8015d12:	2600      	movs	r6, #0
 8015d14:	341a      	adds	r4, #26
 8015d16:	42b5      	cmp	r5, r6
 8015d18:	d11a      	bne.n	8015d50 <_printf_common+0xc8>
 8015d1a:	2000      	movs	r0, #0
 8015d1c:	e008      	b.n	8015d30 <_printf_common+0xa8>
 8015d1e:	2301      	movs	r3, #1
 8015d20:	4652      	mov	r2, sl
 8015d22:	4649      	mov	r1, r9
 8015d24:	4638      	mov	r0, r7
 8015d26:	47c0      	blx	r8
 8015d28:	3001      	adds	r0, #1
 8015d2a:	d103      	bne.n	8015d34 <_printf_common+0xac>
 8015d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d34:	3501      	adds	r5, #1
 8015d36:	e7c6      	b.n	8015cc6 <_printf_common+0x3e>
 8015d38:	18e1      	adds	r1, r4, r3
 8015d3a:	1c5a      	adds	r2, r3, #1
 8015d3c:	2030      	movs	r0, #48	; 0x30
 8015d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d42:	4422      	add	r2, r4
 8015d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d4c:	3302      	adds	r3, #2
 8015d4e:	e7c7      	b.n	8015ce0 <_printf_common+0x58>
 8015d50:	2301      	movs	r3, #1
 8015d52:	4622      	mov	r2, r4
 8015d54:	4649      	mov	r1, r9
 8015d56:	4638      	mov	r0, r7
 8015d58:	47c0      	blx	r8
 8015d5a:	3001      	adds	r0, #1
 8015d5c:	d0e6      	beq.n	8015d2c <_printf_common+0xa4>
 8015d5e:	3601      	adds	r6, #1
 8015d60:	e7d9      	b.n	8015d16 <_printf_common+0x8e>
	...

08015d64 <_printf_i>:
 8015d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d68:	7e0f      	ldrb	r7, [r1, #24]
 8015d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015d6c:	2f78      	cmp	r7, #120	; 0x78
 8015d6e:	4691      	mov	r9, r2
 8015d70:	4680      	mov	r8, r0
 8015d72:	460c      	mov	r4, r1
 8015d74:	469a      	mov	sl, r3
 8015d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015d7a:	d807      	bhi.n	8015d8c <_printf_i+0x28>
 8015d7c:	2f62      	cmp	r7, #98	; 0x62
 8015d7e:	d80a      	bhi.n	8015d96 <_printf_i+0x32>
 8015d80:	2f00      	cmp	r7, #0
 8015d82:	f000 80d8 	beq.w	8015f36 <_printf_i+0x1d2>
 8015d86:	2f58      	cmp	r7, #88	; 0x58
 8015d88:	f000 80a3 	beq.w	8015ed2 <_printf_i+0x16e>
 8015d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d94:	e03a      	b.n	8015e0c <_printf_i+0xa8>
 8015d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d9a:	2b15      	cmp	r3, #21
 8015d9c:	d8f6      	bhi.n	8015d8c <_printf_i+0x28>
 8015d9e:	a101      	add	r1, pc, #4	; (adr r1, 8015da4 <_printf_i+0x40>)
 8015da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015da4:	08015dfd 	.word	0x08015dfd
 8015da8:	08015e11 	.word	0x08015e11
 8015dac:	08015d8d 	.word	0x08015d8d
 8015db0:	08015d8d 	.word	0x08015d8d
 8015db4:	08015d8d 	.word	0x08015d8d
 8015db8:	08015d8d 	.word	0x08015d8d
 8015dbc:	08015e11 	.word	0x08015e11
 8015dc0:	08015d8d 	.word	0x08015d8d
 8015dc4:	08015d8d 	.word	0x08015d8d
 8015dc8:	08015d8d 	.word	0x08015d8d
 8015dcc:	08015d8d 	.word	0x08015d8d
 8015dd0:	08015f1d 	.word	0x08015f1d
 8015dd4:	08015e41 	.word	0x08015e41
 8015dd8:	08015eff 	.word	0x08015eff
 8015ddc:	08015d8d 	.word	0x08015d8d
 8015de0:	08015d8d 	.word	0x08015d8d
 8015de4:	08015f3f 	.word	0x08015f3f
 8015de8:	08015d8d 	.word	0x08015d8d
 8015dec:	08015e41 	.word	0x08015e41
 8015df0:	08015d8d 	.word	0x08015d8d
 8015df4:	08015d8d 	.word	0x08015d8d
 8015df8:	08015f07 	.word	0x08015f07
 8015dfc:	682b      	ldr	r3, [r5, #0]
 8015dfe:	1d1a      	adds	r2, r3, #4
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	602a      	str	r2, [r5, #0]
 8015e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	e0a3      	b.n	8015f58 <_printf_i+0x1f4>
 8015e10:	6820      	ldr	r0, [r4, #0]
 8015e12:	6829      	ldr	r1, [r5, #0]
 8015e14:	0606      	lsls	r6, r0, #24
 8015e16:	f101 0304 	add.w	r3, r1, #4
 8015e1a:	d50a      	bpl.n	8015e32 <_printf_i+0xce>
 8015e1c:	680e      	ldr	r6, [r1, #0]
 8015e1e:	602b      	str	r3, [r5, #0]
 8015e20:	2e00      	cmp	r6, #0
 8015e22:	da03      	bge.n	8015e2c <_printf_i+0xc8>
 8015e24:	232d      	movs	r3, #45	; 0x2d
 8015e26:	4276      	negs	r6, r6
 8015e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e2c:	485e      	ldr	r0, [pc, #376]	; (8015fa8 <_printf_i+0x244>)
 8015e2e:	230a      	movs	r3, #10
 8015e30:	e019      	b.n	8015e66 <_printf_i+0x102>
 8015e32:	680e      	ldr	r6, [r1, #0]
 8015e34:	602b      	str	r3, [r5, #0]
 8015e36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015e3a:	bf18      	it	ne
 8015e3c:	b236      	sxthne	r6, r6
 8015e3e:	e7ef      	b.n	8015e20 <_printf_i+0xbc>
 8015e40:	682b      	ldr	r3, [r5, #0]
 8015e42:	6820      	ldr	r0, [r4, #0]
 8015e44:	1d19      	adds	r1, r3, #4
 8015e46:	6029      	str	r1, [r5, #0]
 8015e48:	0601      	lsls	r1, r0, #24
 8015e4a:	d501      	bpl.n	8015e50 <_printf_i+0xec>
 8015e4c:	681e      	ldr	r6, [r3, #0]
 8015e4e:	e002      	b.n	8015e56 <_printf_i+0xf2>
 8015e50:	0646      	lsls	r6, r0, #25
 8015e52:	d5fb      	bpl.n	8015e4c <_printf_i+0xe8>
 8015e54:	881e      	ldrh	r6, [r3, #0]
 8015e56:	4854      	ldr	r0, [pc, #336]	; (8015fa8 <_printf_i+0x244>)
 8015e58:	2f6f      	cmp	r7, #111	; 0x6f
 8015e5a:	bf0c      	ite	eq
 8015e5c:	2308      	moveq	r3, #8
 8015e5e:	230a      	movne	r3, #10
 8015e60:	2100      	movs	r1, #0
 8015e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e66:	6865      	ldr	r5, [r4, #4]
 8015e68:	60a5      	str	r5, [r4, #8]
 8015e6a:	2d00      	cmp	r5, #0
 8015e6c:	bfa2      	ittt	ge
 8015e6e:	6821      	ldrge	r1, [r4, #0]
 8015e70:	f021 0104 	bicge.w	r1, r1, #4
 8015e74:	6021      	strge	r1, [r4, #0]
 8015e76:	b90e      	cbnz	r6, 8015e7c <_printf_i+0x118>
 8015e78:	2d00      	cmp	r5, #0
 8015e7a:	d04d      	beq.n	8015f18 <_printf_i+0x1b4>
 8015e7c:	4615      	mov	r5, r2
 8015e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015e82:	fb03 6711 	mls	r7, r3, r1, r6
 8015e86:	5dc7      	ldrb	r7, [r0, r7]
 8015e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015e8c:	4637      	mov	r7, r6
 8015e8e:	42bb      	cmp	r3, r7
 8015e90:	460e      	mov	r6, r1
 8015e92:	d9f4      	bls.n	8015e7e <_printf_i+0x11a>
 8015e94:	2b08      	cmp	r3, #8
 8015e96:	d10b      	bne.n	8015eb0 <_printf_i+0x14c>
 8015e98:	6823      	ldr	r3, [r4, #0]
 8015e9a:	07de      	lsls	r6, r3, #31
 8015e9c:	d508      	bpl.n	8015eb0 <_printf_i+0x14c>
 8015e9e:	6923      	ldr	r3, [r4, #16]
 8015ea0:	6861      	ldr	r1, [r4, #4]
 8015ea2:	4299      	cmp	r1, r3
 8015ea4:	bfde      	ittt	le
 8015ea6:	2330      	movle	r3, #48	; 0x30
 8015ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015eb0:	1b52      	subs	r2, r2, r5
 8015eb2:	6122      	str	r2, [r4, #16]
 8015eb4:	f8cd a000 	str.w	sl, [sp]
 8015eb8:	464b      	mov	r3, r9
 8015eba:	aa03      	add	r2, sp, #12
 8015ebc:	4621      	mov	r1, r4
 8015ebe:	4640      	mov	r0, r8
 8015ec0:	f7ff fee2 	bl	8015c88 <_printf_common>
 8015ec4:	3001      	adds	r0, #1
 8015ec6:	d14c      	bne.n	8015f62 <_printf_i+0x1fe>
 8015ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ecc:	b004      	add	sp, #16
 8015ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ed2:	4835      	ldr	r0, [pc, #212]	; (8015fa8 <_printf_i+0x244>)
 8015ed4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015ed8:	6829      	ldr	r1, [r5, #0]
 8015eda:	6823      	ldr	r3, [r4, #0]
 8015edc:	f851 6b04 	ldr.w	r6, [r1], #4
 8015ee0:	6029      	str	r1, [r5, #0]
 8015ee2:	061d      	lsls	r5, r3, #24
 8015ee4:	d514      	bpl.n	8015f10 <_printf_i+0x1ac>
 8015ee6:	07df      	lsls	r7, r3, #31
 8015ee8:	bf44      	itt	mi
 8015eea:	f043 0320 	orrmi.w	r3, r3, #32
 8015eee:	6023      	strmi	r3, [r4, #0]
 8015ef0:	b91e      	cbnz	r6, 8015efa <_printf_i+0x196>
 8015ef2:	6823      	ldr	r3, [r4, #0]
 8015ef4:	f023 0320 	bic.w	r3, r3, #32
 8015ef8:	6023      	str	r3, [r4, #0]
 8015efa:	2310      	movs	r3, #16
 8015efc:	e7b0      	b.n	8015e60 <_printf_i+0xfc>
 8015efe:	6823      	ldr	r3, [r4, #0]
 8015f00:	f043 0320 	orr.w	r3, r3, #32
 8015f04:	6023      	str	r3, [r4, #0]
 8015f06:	2378      	movs	r3, #120	; 0x78
 8015f08:	4828      	ldr	r0, [pc, #160]	; (8015fac <_printf_i+0x248>)
 8015f0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f0e:	e7e3      	b.n	8015ed8 <_printf_i+0x174>
 8015f10:	0659      	lsls	r1, r3, #25
 8015f12:	bf48      	it	mi
 8015f14:	b2b6      	uxthmi	r6, r6
 8015f16:	e7e6      	b.n	8015ee6 <_printf_i+0x182>
 8015f18:	4615      	mov	r5, r2
 8015f1a:	e7bb      	b.n	8015e94 <_printf_i+0x130>
 8015f1c:	682b      	ldr	r3, [r5, #0]
 8015f1e:	6826      	ldr	r6, [r4, #0]
 8015f20:	6961      	ldr	r1, [r4, #20]
 8015f22:	1d18      	adds	r0, r3, #4
 8015f24:	6028      	str	r0, [r5, #0]
 8015f26:	0635      	lsls	r5, r6, #24
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	d501      	bpl.n	8015f30 <_printf_i+0x1cc>
 8015f2c:	6019      	str	r1, [r3, #0]
 8015f2e:	e002      	b.n	8015f36 <_printf_i+0x1d2>
 8015f30:	0670      	lsls	r0, r6, #25
 8015f32:	d5fb      	bpl.n	8015f2c <_printf_i+0x1c8>
 8015f34:	8019      	strh	r1, [r3, #0]
 8015f36:	2300      	movs	r3, #0
 8015f38:	6123      	str	r3, [r4, #16]
 8015f3a:	4615      	mov	r5, r2
 8015f3c:	e7ba      	b.n	8015eb4 <_printf_i+0x150>
 8015f3e:	682b      	ldr	r3, [r5, #0]
 8015f40:	1d1a      	adds	r2, r3, #4
 8015f42:	602a      	str	r2, [r5, #0]
 8015f44:	681d      	ldr	r5, [r3, #0]
 8015f46:	6862      	ldr	r2, [r4, #4]
 8015f48:	2100      	movs	r1, #0
 8015f4a:	4628      	mov	r0, r5
 8015f4c:	f7ea f918 	bl	8000180 <memchr>
 8015f50:	b108      	cbz	r0, 8015f56 <_printf_i+0x1f2>
 8015f52:	1b40      	subs	r0, r0, r5
 8015f54:	6060      	str	r0, [r4, #4]
 8015f56:	6863      	ldr	r3, [r4, #4]
 8015f58:	6123      	str	r3, [r4, #16]
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f60:	e7a8      	b.n	8015eb4 <_printf_i+0x150>
 8015f62:	6923      	ldr	r3, [r4, #16]
 8015f64:	462a      	mov	r2, r5
 8015f66:	4649      	mov	r1, r9
 8015f68:	4640      	mov	r0, r8
 8015f6a:	47d0      	blx	sl
 8015f6c:	3001      	adds	r0, #1
 8015f6e:	d0ab      	beq.n	8015ec8 <_printf_i+0x164>
 8015f70:	6823      	ldr	r3, [r4, #0]
 8015f72:	079b      	lsls	r3, r3, #30
 8015f74:	d413      	bmi.n	8015f9e <_printf_i+0x23a>
 8015f76:	68e0      	ldr	r0, [r4, #12]
 8015f78:	9b03      	ldr	r3, [sp, #12]
 8015f7a:	4298      	cmp	r0, r3
 8015f7c:	bfb8      	it	lt
 8015f7e:	4618      	movlt	r0, r3
 8015f80:	e7a4      	b.n	8015ecc <_printf_i+0x168>
 8015f82:	2301      	movs	r3, #1
 8015f84:	4632      	mov	r2, r6
 8015f86:	4649      	mov	r1, r9
 8015f88:	4640      	mov	r0, r8
 8015f8a:	47d0      	blx	sl
 8015f8c:	3001      	adds	r0, #1
 8015f8e:	d09b      	beq.n	8015ec8 <_printf_i+0x164>
 8015f90:	3501      	adds	r5, #1
 8015f92:	68e3      	ldr	r3, [r4, #12]
 8015f94:	9903      	ldr	r1, [sp, #12]
 8015f96:	1a5b      	subs	r3, r3, r1
 8015f98:	42ab      	cmp	r3, r5
 8015f9a:	dcf2      	bgt.n	8015f82 <_printf_i+0x21e>
 8015f9c:	e7eb      	b.n	8015f76 <_printf_i+0x212>
 8015f9e:	2500      	movs	r5, #0
 8015fa0:	f104 0619 	add.w	r6, r4, #25
 8015fa4:	e7f5      	b.n	8015f92 <_printf_i+0x22e>
 8015fa6:	bf00      	nop
 8015fa8:	08016991 	.word	0x08016991
 8015fac:	080169a2 	.word	0x080169a2

08015fb0 <memmove>:
 8015fb0:	4288      	cmp	r0, r1
 8015fb2:	b510      	push	{r4, lr}
 8015fb4:	eb01 0402 	add.w	r4, r1, r2
 8015fb8:	d902      	bls.n	8015fc0 <memmove+0x10>
 8015fba:	4284      	cmp	r4, r0
 8015fbc:	4623      	mov	r3, r4
 8015fbe:	d807      	bhi.n	8015fd0 <memmove+0x20>
 8015fc0:	1e43      	subs	r3, r0, #1
 8015fc2:	42a1      	cmp	r1, r4
 8015fc4:	d008      	beq.n	8015fd8 <memmove+0x28>
 8015fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015fce:	e7f8      	b.n	8015fc2 <memmove+0x12>
 8015fd0:	4402      	add	r2, r0
 8015fd2:	4601      	mov	r1, r0
 8015fd4:	428a      	cmp	r2, r1
 8015fd6:	d100      	bne.n	8015fda <memmove+0x2a>
 8015fd8:	bd10      	pop	{r4, pc}
 8015fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015fe2:	e7f7      	b.n	8015fd4 <memmove+0x24>

08015fe4 <_free_r>:
 8015fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fe6:	2900      	cmp	r1, #0
 8015fe8:	d044      	beq.n	8016074 <_free_r+0x90>
 8015fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fee:	9001      	str	r0, [sp, #4]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8015ff6:	bfb8      	it	lt
 8015ff8:	18e4      	addlt	r4, r4, r3
 8015ffa:	f000 f913 	bl	8016224 <__malloc_lock>
 8015ffe:	4a1e      	ldr	r2, [pc, #120]	; (8016078 <_free_r+0x94>)
 8016000:	9801      	ldr	r0, [sp, #4]
 8016002:	6813      	ldr	r3, [r2, #0]
 8016004:	b933      	cbnz	r3, 8016014 <_free_r+0x30>
 8016006:	6063      	str	r3, [r4, #4]
 8016008:	6014      	str	r4, [r2, #0]
 801600a:	b003      	add	sp, #12
 801600c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016010:	f000 b90e 	b.w	8016230 <__malloc_unlock>
 8016014:	42a3      	cmp	r3, r4
 8016016:	d908      	bls.n	801602a <_free_r+0x46>
 8016018:	6825      	ldr	r5, [r4, #0]
 801601a:	1961      	adds	r1, r4, r5
 801601c:	428b      	cmp	r3, r1
 801601e:	bf01      	itttt	eq
 8016020:	6819      	ldreq	r1, [r3, #0]
 8016022:	685b      	ldreq	r3, [r3, #4]
 8016024:	1949      	addeq	r1, r1, r5
 8016026:	6021      	streq	r1, [r4, #0]
 8016028:	e7ed      	b.n	8016006 <_free_r+0x22>
 801602a:	461a      	mov	r2, r3
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	b10b      	cbz	r3, 8016034 <_free_r+0x50>
 8016030:	42a3      	cmp	r3, r4
 8016032:	d9fa      	bls.n	801602a <_free_r+0x46>
 8016034:	6811      	ldr	r1, [r2, #0]
 8016036:	1855      	adds	r5, r2, r1
 8016038:	42a5      	cmp	r5, r4
 801603a:	d10b      	bne.n	8016054 <_free_r+0x70>
 801603c:	6824      	ldr	r4, [r4, #0]
 801603e:	4421      	add	r1, r4
 8016040:	1854      	adds	r4, r2, r1
 8016042:	42a3      	cmp	r3, r4
 8016044:	6011      	str	r1, [r2, #0]
 8016046:	d1e0      	bne.n	801600a <_free_r+0x26>
 8016048:	681c      	ldr	r4, [r3, #0]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	6053      	str	r3, [r2, #4]
 801604e:	4421      	add	r1, r4
 8016050:	6011      	str	r1, [r2, #0]
 8016052:	e7da      	b.n	801600a <_free_r+0x26>
 8016054:	d902      	bls.n	801605c <_free_r+0x78>
 8016056:	230c      	movs	r3, #12
 8016058:	6003      	str	r3, [r0, #0]
 801605a:	e7d6      	b.n	801600a <_free_r+0x26>
 801605c:	6825      	ldr	r5, [r4, #0]
 801605e:	1961      	adds	r1, r4, r5
 8016060:	428b      	cmp	r3, r1
 8016062:	bf04      	itt	eq
 8016064:	6819      	ldreq	r1, [r3, #0]
 8016066:	685b      	ldreq	r3, [r3, #4]
 8016068:	6063      	str	r3, [r4, #4]
 801606a:	bf04      	itt	eq
 801606c:	1949      	addeq	r1, r1, r5
 801606e:	6021      	streq	r1, [r4, #0]
 8016070:	6054      	str	r4, [r2, #4]
 8016072:	e7ca      	b.n	801600a <_free_r+0x26>
 8016074:	b003      	add	sp, #12
 8016076:	bd30      	pop	{r4, r5, pc}
 8016078:	20001cec 	.word	0x20001cec

0801607c <sbrk_aligned>:
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	4e0e      	ldr	r6, [pc, #56]	; (80160b8 <sbrk_aligned+0x3c>)
 8016080:	460c      	mov	r4, r1
 8016082:	6831      	ldr	r1, [r6, #0]
 8016084:	4605      	mov	r5, r0
 8016086:	b911      	cbnz	r1, 801608e <sbrk_aligned+0x12>
 8016088:	f000 f8bc 	bl	8016204 <_sbrk_r>
 801608c:	6030      	str	r0, [r6, #0]
 801608e:	4621      	mov	r1, r4
 8016090:	4628      	mov	r0, r5
 8016092:	f000 f8b7 	bl	8016204 <_sbrk_r>
 8016096:	1c43      	adds	r3, r0, #1
 8016098:	d00a      	beq.n	80160b0 <sbrk_aligned+0x34>
 801609a:	1cc4      	adds	r4, r0, #3
 801609c:	f024 0403 	bic.w	r4, r4, #3
 80160a0:	42a0      	cmp	r0, r4
 80160a2:	d007      	beq.n	80160b4 <sbrk_aligned+0x38>
 80160a4:	1a21      	subs	r1, r4, r0
 80160a6:	4628      	mov	r0, r5
 80160a8:	f000 f8ac 	bl	8016204 <_sbrk_r>
 80160ac:	3001      	adds	r0, #1
 80160ae:	d101      	bne.n	80160b4 <sbrk_aligned+0x38>
 80160b0:	f04f 34ff 	mov.w	r4, #4294967295
 80160b4:	4620      	mov	r0, r4
 80160b6:	bd70      	pop	{r4, r5, r6, pc}
 80160b8:	20001cf0 	.word	0x20001cf0

080160bc <_malloc_r>:
 80160bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160c0:	1ccd      	adds	r5, r1, #3
 80160c2:	f025 0503 	bic.w	r5, r5, #3
 80160c6:	3508      	adds	r5, #8
 80160c8:	2d0c      	cmp	r5, #12
 80160ca:	bf38      	it	cc
 80160cc:	250c      	movcc	r5, #12
 80160ce:	2d00      	cmp	r5, #0
 80160d0:	4607      	mov	r7, r0
 80160d2:	db01      	blt.n	80160d8 <_malloc_r+0x1c>
 80160d4:	42a9      	cmp	r1, r5
 80160d6:	d905      	bls.n	80160e4 <_malloc_r+0x28>
 80160d8:	230c      	movs	r3, #12
 80160da:	603b      	str	r3, [r7, #0]
 80160dc:	2600      	movs	r6, #0
 80160de:	4630      	mov	r0, r6
 80160e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160e4:	4e2e      	ldr	r6, [pc, #184]	; (80161a0 <_malloc_r+0xe4>)
 80160e6:	f000 f89d 	bl	8016224 <__malloc_lock>
 80160ea:	6833      	ldr	r3, [r6, #0]
 80160ec:	461c      	mov	r4, r3
 80160ee:	bb34      	cbnz	r4, 801613e <_malloc_r+0x82>
 80160f0:	4629      	mov	r1, r5
 80160f2:	4638      	mov	r0, r7
 80160f4:	f7ff ffc2 	bl	801607c <sbrk_aligned>
 80160f8:	1c43      	adds	r3, r0, #1
 80160fa:	4604      	mov	r4, r0
 80160fc:	d14d      	bne.n	801619a <_malloc_r+0xde>
 80160fe:	6834      	ldr	r4, [r6, #0]
 8016100:	4626      	mov	r6, r4
 8016102:	2e00      	cmp	r6, #0
 8016104:	d140      	bne.n	8016188 <_malloc_r+0xcc>
 8016106:	6823      	ldr	r3, [r4, #0]
 8016108:	4631      	mov	r1, r6
 801610a:	4638      	mov	r0, r7
 801610c:	eb04 0803 	add.w	r8, r4, r3
 8016110:	f000 f878 	bl	8016204 <_sbrk_r>
 8016114:	4580      	cmp	r8, r0
 8016116:	d13a      	bne.n	801618e <_malloc_r+0xd2>
 8016118:	6821      	ldr	r1, [r4, #0]
 801611a:	3503      	adds	r5, #3
 801611c:	1a6d      	subs	r5, r5, r1
 801611e:	f025 0503 	bic.w	r5, r5, #3
 8016122:	3508      	adds	r5, #8
 8016124:	2d0c      	cmp	r5, #12
 8016126:	bf38      	it	cc
 8016128:	250c      	movcc	r5, #12
 801612a:	4629      	mov	r1, r5
 801612c:	4638      	mov	r0, r7
 801612e:	f7ff ffa5 	bl	801607c <sbrk_aligned>
 8016132:	3001      	adds	r0, #1
 8016134:	d02b      	beq.n	801618e <_malloc_r+0xd2>
 8016136:	6823      	ldr	r3, [r4, #0]
 8016138:	442b      	add	r3, r5
 801613a:	6023      	str	r3, [r4, #0]
 801613c:	e00e      	b.n	801615c <_malloc_r+0xa0>
 801613e:	6822      	ldr	r2, [r4, #0]
 8016140:	1b52      	subs	r2, r2, r5
 8016142:	d41e      	bmi.n	8016182 <_malloc_r+0xc6>
 8016144:	2a0b      	cmp	r2, #11
 8016146:	d916      	bls.n	8016176 <_malloc_r+0xba>
 8016148:	1961      	adds	r1, r4, r5
 801614a:	42a3      	cmp	r3, r4
 801614c:	6025      	str	r5, [r4, #0]
 801614e:	bf18      	it	ne
 8016150:	6059      	strne	r1, [r3, #4]
 8016152:	6863      	ldr	r3, [r4, #4]
 8016154:	bf08      	it	eq
 8016156:	6031      	streq	r1, [r6, #0]
 8016158:	5162      	str	r2, [r4, r5]
 801615a:	604b      	str	r3, [r1, #4]
 801615c:	4638      	mov	r0, r7
 801615e:	f104 060b 	add.w	r6, r4, #11
 8016162:	f000 f865 	bl	8016230 <__malloc_unlock>
 8016166:	f026 0607 	bic.w	r6, r6, #7
 801616a:	1d23      	adds	r3, r4, #4
 801616c:	1af2      	subs	r2, r6, r3
 801616e:	d0b6      	beq.n	80160de <_malloc_r+0x22>
 8016170:	1b9b      	subs	r3, r3, r6
 8016172:	50a3      	str	r3, [r4, r2]
 8016174:	e7b3      	b.n	80160de <_malloc_r+0x22>
 8016176:	6862      	ldr	r2, [r4, #4]
 8016178:	42a3      	cmp	r3, r4
 801617a:	bf0c      	ite	eq
 801617c:	6032      	streq	r2, [r6, #0]
 801617e:	605a      	strne	r2, [r3, #4]
 8016180:	e7ec      	b.n	801615c <_malloc_r+0xa0>
 8016182:	4623      	mov	r3, r4
 8016184:	6864      	ldr	r4, [r4, #4]
 8016186:	e7b2      	b.n	80160ee <_malloc_r+0x32>
 8016188:	4634      	mov	r4, r6
 801618a:	6876      	ldr	r6, [r6, #4]
 801618c:	e7b9      	b.n	8016102 <_malloc_r+0x46>
 801618e:	230c      	movs	r3, #12
 8016190:	603b      	str	r3, [r7, #0]
 8016192:	4638      	mov	r0, r7
 8016194:	f000 f84c 	bl	8016230 <__malloc_unlock>
 8016198:	e7a1      	b.n	80160de <_malloc_r+0x22>
 801619a:	6025      	str	r5, [r4, #0]
 801619c:	e7de      	b.n	801615c <_malloc_r+0xa0>
 801619e:	bf00      	nop
 80161a0:	20001cec 	.word	0x20001cec

080161a4 <_realloc_r>:
 80161a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a8:	4680      	mov	r8, r0
 80161aa:	4614      	mov	r4, r2
 80161ac:	460e      	mov	r6, r1
 80161ae:	b921      	cbnz	r1, 80161ba <_realloc_r+0x16>
 80161b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161b4:	4611      	mov	r1, r2
 80161b6:	f7ff bf81 	b.w	80160bc <_malloc_r>
 80161ba:	b92a      	cbnz	r2, 80161c8 <_realloc_r+0x24>
 80161bc:	f7ff ff12 	bl	8015fe4 <_free_r>
 80161c0:	4625      	mov	r5, r4
 80161c2:	4628      	mov	r0, r5
 80161c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161c8:	f000 f838 	bl	801623c <_malloc_usable_size_r>
 80161cc:	4284      	cmp	r4, r0
 80161ce:	4607      	mov	r7, r0
 80161d0:	d802      	bhi.n	80161d8 <_realloc_r+0x34>
 80161d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80161d6:	d812      	bhi.n	80161fe <_realloc_r+0x5a>
 80161d8:	4621      	mov	r1, r4
 80161da:	4640      	mov	r0, r8
 80161dc:	f7ff ff6e 	bl	80160bc <_malloc_r>
 80161e0:	4605      	mov	r5, r0
 80161e2:	2800      	cmp	r0, #0
 80161e4:	d0ed      	beq.n	80161c2 <_realloc_r+0x1e>
 80161e6:	42bc      	cmp	r4, r7
 80161e8:	4622      	mov	r2, r4
 80161ea:	4631      	mov	r1, r6
 80161ec:	bf28      	it	cs
 80161ee:	463a      	movcs	r2, r7
 80161f0:	f7ff fbb8 	bl	8015964 <memcpy>
 80161f4:	4631      	mov	r1, r6
 80161f6:	4640      	mov	r0, r8
 80161f8:	f7ff fef4 	bl	8015fe4 <_free_r>
 80161fc:	e7e1      	b.n	80161c2 <_realloc_r+0x1e>
 80161fe:	4635      	mov	r5, r6
 8016200:	e7df      	b.n	80161c2 <_realloc_r+0x1e>
	...

08016204 <_sbrk_r>:
 8016204:	b538      	push	{r3, r4, r5, lr}
 8016206:	4d06      	ldr	r5, [pc, #24]	; (8016220 <_sbrk_r+0x1c>)
 8016208:	2300      	movs	r3, #0
 801620a:	4604      	mov	r4, r0
 801620c:	4608      	mov	r0, r1
 801620e:	602b      	str	r3, [r5, #0]
 8016210:	f7ea fef0 	bl	8000ff4 <_sbrk>
 8016214:	1c43      	adds	r3, r0, #1
 8016216:	d102      	bne.n	801621e <_sbrk_r+0x1a>
 8016218:	682b      	ldr	r3, [r5, #0]
 801621a:	b103      	cbz	r3, 801621e <_sbrk_r+0x1a>
 801621c:	6023      	str	r3, [r4, #0]
 801621e:	bd38      	pop	{r3, r4, r5, pc}
 8016220:	20001cf4 	.word	0x20001cf4

08016224 <__malloc_lock>:
 8016224:	4801      	ldr	r0, [pc, #4]	; (801622c <__malloc_lock+0x8>)
 8016226:	f000 b811 	b.w	801624c <__retarget_lock_acquire_recursive>
 801622a:	bf00      	nop
 801622c:	20001cf8 	.word	0x20001cf8

08016230 <__malloc_unlock>:
 8016230:	4801      	ldr	r0, [pc, #4]	; (8016238 <__malloc_unlock+0x8>)
 8016232:	f000 b80c 	b.w	801624e <__retarget_lock_release_recursive>
 8016236:	bf00      	nop
 8016238:	20001cf8 	.word	0x20001cf8

0801623c <_malloc_usable_size_r>:
 801623c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016240:	1f18      	subs	r0, r3, #4
 8016242:	2b00      	cmp	r3, #0
 8016244:	bfbc      	itt	lt
 8016246:	580b      	ldrlt	r3, [r1, r0]
 8016248:	18c0      	addlt	r0, r0, r3
 801624a:	4770      	bx	lr

0801624c <__retarget_lock_acquire_recursive>:
 801624c:	4770      	bx	lr

0801624e <__retarget_lock_release_recursive>:
 801624e:	4770      	bx	lr

08016250 <_init>:
 8016250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016252:	bf00      	nop
 8016254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016256:	bc08      	pop	{r3}
 8016258:	469e      	mov	lr, r3
 801625a:	4770      	bx	lr

0801625c <_fini>:
 801625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801625e:	bf00      	nop
 8016260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016262:	bc08      	pop	{r3}
 8016264:	469e      	mov	lr, r3
 8016266:	4770      	bx	lr
