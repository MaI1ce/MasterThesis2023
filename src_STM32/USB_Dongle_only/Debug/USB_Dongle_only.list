
USB_Dongle_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dd8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  08013f18  08013f18  00023f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801468c  0801468c  0002468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014694  08014694  00024694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014698  08014698  00024698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  20000008  0801469c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c40  2000016c  08014800  0003016c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001dac  08014800  00031dac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026aa0  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a61  00000000  00000000  00056c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023a0  00000000  00000000  0005c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002118  00000000  00000000  0005ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000290b6  00000000  00000000  00060b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d3d5  00000000  00000000  00089c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e92bb  00000000  00000000  000b6fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a029e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009770  00000000  00000000  001a02f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	08013f00 	.word	0x08013f00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	08013f00 	.word	0x08013f00

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	f5ad 5dff 	sub.w	sp, sp, #8160	; 0x1fe0
 800059e:	b083      	sub	sp, #12
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fe85 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f94d 	bl	8000844 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005aa:	f000 f9b3 	bl	8000914 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80005ae:	f000 f9f9 	bl	80009a4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fab9 	bl	8000b28 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b6:	f000 faa5 	bl	8000b04 <MX_DMA_Init>
  MX_RF_Init();
 80005ba:	f000 fa07 	bl	80009cc <MX_RF_Init>
  MX_USART1_UART_Init();
 80005be:	f000 fa55 	bl	8000a6c <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005c2:	f000 fa21 	bl	8000a08 <MX_RTC_Init>
  MX_USB_Device_Init();
 80005c6:	f00b fa3b 	bl	800ba40 <MX_USB_Device_Init>
  MX_RNG_Init();
 80005ca:	f000 fa07 	bl	80009dc <MX_RNG_Init>
#ifdef HARDWARE_AES
  MX_AES1_Init();
 80005ce:	f000 f9c1 	bl	8000954 <MX_AES1_Init>
#endif
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin); // BLUE LED
 80005d2:	2101      	movs	r1, #1
 80005d4:	4890      	ldr	r0, [pc, #576]	; (8000818 <main+0x280>)
 80005d6:	f002 fb5b 	bl	8002c90 <HAL_GPIO_TogglePin>
  HAL_Delay(3000);
 80005da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005de:	f000 feed 	bl	80013bc <HAL_Delay>
  USB_DEBUG_MSG("Program Compilation Date: %s %s\n", __DATE__, __TIME__);
 80005e2:	2250      	movs	r2, #80	; 0x50
 80005e4:	2100      	movs	r1, #0
 80005e6:	488d      	ldr	r0, [pc, #564]	; (800081c <main+0x284>)
 80005e8:	f013 f822 	bl	8013630 <memset>
 80005ec:	4b8c      	ldr	r3, [pc, #560]	; (8000820 <main+0x288>)
 80005ee:	4a8d      	ldr	r2, [pc, #564]	; (8000824 <main+0x28c>)
 80005f0:	498d      	ldr	r1, [pc, #564]	; (8000828 <main+0x290>)
 80005f2:	488a      	ldr	r0, [pc, #552]	; (800081c <main+0x284>)
 80005f4:	f013 f824 	bl	8013640 <siprintf>
 80005f8:	4888      	ldr	r0, [pc, #544]	; (800081c <main+0x284>)
 80005fa:	f7ff fdc1 	bl	8000180 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29b      	uxth	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	4885      	ldr	r0, [pc, #532]	; (800081c <main+0x284>)
 8000606:	f00b fad9 	bl	800bbbc <CDC_Transmit_FS>
 800060a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060e:	f012 ffc1 	bl	8013594 <Delay_94ns>
  USB_DEBUG_MSG("Dilithium Signature Test Start\n");
 8000612:	2250      	movs	r2, #80	; 0x50
 8000614:	2100      	movs	r1, #0
 8000616:	4881      	ldr	r0, [pc, #516]	; (800081c <main+0x284>)
 8000618:	f013 f80a 	bl	8013630 <memset>
 800061c:	4983      	ldr	r1, [pc, #524]	; (800082c <main+0x294>)
 800061e:	487f      	ldr	r0, [pc, #508]	; (800081c <main+0x284>)
 8000620:	f013 f80e 	bl	8013640 <siprintf>
 8000624:	487d      	ldr	r0, [pc, #500]	; (800081c <main+0x284>)
 8000626:	f7ff fdab 	bl	8000180 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b29b      	uxth	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	487a      	ldr	r0, [pc, #488]	; (800081c <main+0x284>)
 8000632:	f00b fac3 	bl	800bbbc <CDC_Transmit_FS>
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f012 ffab 	bl	8013594 <Delay_94ns>
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800063e:	2101      	movs	r1, #1
 8000640:	4875      	ldr	r0, [pc, #468]	; (8000818 <main+0x280>)
 8000642:	f002 fb25 	bl	8002c90 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064a:	4879      	ldr	r0, [pc, #484]	; (8000830 <main+0x298>)
 800064c:	f002 fb20 	bl	8002c90 <HAL_GPIO_TogglePin>

#elif defined FULL_TEST
  unsigned int i, j;
  int ret;
  size_t mlen, smlen;
  uint8_t m[MLEN] = { 0x55 };
 8000650:	2355      	movs	r3, #85	; 0x55
 8000652:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8000656:	f102 0210 	add.w	r2, r2, #16
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8000660:	f103 0314 	add.w	r3, r3, #20
 8000664:	2237      	movs	r2, #55	; 0x37
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f012 ffe1 	bl	8013630 <memset>
  uint8_t sm[MLEN + CRYPTO_BYTES];
  uint8_t m2[MLEN + CRYPTO_BYTES];
  uint8_t test_ok = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 8000674:	f102 0217 	add.w	r2, r2, #23
 8000678:	7013      	strb	r3, [r2, #0]
  uint8_t pk[CRYPTO_PUBLICKEYBYTES];
  uint8_t sk[CRYPTO_SECRETKEYBYTES];

  for (i = 0; i < NTESTS; ++i) {
 800067a:	2300      	movs	r3, #0
 800067c:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 8000680:	f102 021c 	add.w	r2, r2, #28
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	e077      	b.n	8000778 <main+0x1e0>
	  //
	  USB_DEBUG_MSG("Test %d\r\n", i);
 8000688:	2250      	movs	r2, #80	; 0x50
 800068a:	2100      	movs	r1, #0
 800068c:	4863      	ldr	r0, [pc, #396]	; (800081c <main+0x284>)
 800068e:	f012 ffcf 	bl	8013630 <memset>
 8000692:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000696:	f103 031c 	add.w	r3, r3, #28
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4965      	ldr	r1, [pc, #404]	; (8000834 <main+0x29c>)
 800069e:	485f      	ldr	r0, [pc, #380]	; (800081c <main+0x284>)
 80006a0:	f012 ffce 	bl	8013640 <siprintf>
 80006a4:	485d      	ldr	r0, [pc, #372]	; (800081c <main+0x284>)
 80006a6:	f7ff fd6b 	bl	8000180 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	485a      	ldr	r0, [pc, #360]	; (800081c <main+0x284>)
 80006b2:	f00b fa83 	bl	800bbbc <CDC_Transmit_FS>
 80006b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ba:	f012 ff6b 	bl	8013594 <Delay_94ns>

	  crypto_sign_keypair(&hrng, pk, sk);
 80006be:	463a      	mov	r2, r7
 80006c0:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80006c4:	3b10      	subs	r3, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	485b      	ldr	r0, [pc, #364]	; (8000838 <main+0x2a0>)
 80006ca:	f012 fa96 	bl	8012bfa <pqcrystals_dilithium2aes_r_ref_keypair>
	  crypto_sign(&hrng, sm, &smlen, m, MLEN, sk);
 80006ce:	f507 50fc 	add.w	r0, r7, #8064	; 0x1f80
 80006d2:	f100 0010 	add.w	r0, r0, #16
 80006d6:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 80006da:	f102 020c 	add.w	r2, r2, #12
 80006de:	f507 51af 	add.w	r1, r7, #5600	; 0x15e0
 80006e2:	463b      	mov	r3, r7
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	233b      	movs	r3, #59	; 0x3b
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4603      	mov	r3, r0
 80006ec:	4852      	ldr	r0, [pc, #328]	; (8000838 <main+0x2a0>)
 80006ee:	f012 fd35 	bl	801315c <pqcrystals_dilithium2aes_r_ref>
	  ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
 80006f2:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 80006f6:	f103 030c 	add.w	r3, r3, #12
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	f507 52af 	add.w	r2, r7, #5600	; 0x15e0
 8000700:	f507 51fe 	add.w	r1, r7, #8128	; 0x1fc0
 8000704:	f101 0110 	add.w	r1, r1, #16
 8000708:	f507 6044 	add.w	r0, r7, #3136	; 0xc40
 800070c:	3810      	subs	r0, #16
 800070e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8000712:	3b10      	subs	r3, #16
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	4623      	mov	r3, r4
 8000718:	f012 fe7f 	bl	801341a <pqcrystals_dilithium2aes_r_ref_open>
 800071c:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000720:	f103 0318 	add.w	r3, r3, #24
 8000724:	6018      	str	r0, [r3, #0]

	  if(sign_verify_test_assert(ret, mlen, m, m2)){
 8000726:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 800072a:	f103 0310 	add.w	r3, r3, #16
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8000736:	3b10      	subs	r3, #16
 8000738:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 800073c:	f102 0210 	add.w	r2, r2, #16
 8000740:	f507 50fe 	add.w	r0, r7, #8128	; 0x1fc0
 8000744:	f100 0018 	add.w	r0, r0, #24
 8000748:	6800      	ldr	r0, [r0, #0]
 800074a:	f000 fa3f 	bl	8000bcc <sign_verify_test_assert>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d006      	beq.n	8000762 <main+0x1ca>
		  test_ok = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 800075a:	f102 0217 	add.w	r2, r2, #23
 800075e:	7013      	strb	r3, [r2, #0]
		  break;
 8000760:	e011      	b.n	8000786 <main+0x1ee>
  for (i = 0; i < NTESTS; ++i) {
 8000762:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000766:	f103 031c 	add.w	r3, r3, #28
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 8000772:	f102 021c 	add.w	r2, r2, #28
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 800077c:	f103 031c 	add.w	r3, r3, #28
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d980      	bls.n	8000688 <main+0xf0>
	  }

  }

  if (test_ok){
 8000786:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 800078a:	f103 0317 	add.w	r3, r3, #23
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d01b      	beq.n	80007cc <main+0x234>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // GREEN LED
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	4825      	ldr	r0, [pc, #148]	; (8000830 <main+0x298>)
 800079a:	f002 fa79 	bl	8002c90 <HAL_GPIO_TogglePin>
	  USB_DEBUG_MSG("New Dilithium - OK\r\n");
 800079e:	2250      	movs	r2, #80	; 0x50
 80007a0:	2100      	movs	r1, #0
 80007a2:	481e      	ldr	r0, [pc, #120]	; (800081c <main+0x284>)
 80007a4:	f012 ff44 	bl	8013630 <memset>
 80007a8:	4924      	ldr	r1, [pc, #144]	; (800083c <main+0x2a4>)
 80007aa:	481c      	ldr	r0, [pc, #112]	; (800081c <main+0x284>)
 80007ac:	f012 ff48 	bl	8013640 <siprintf>
 80007b0:	481a      	ldr	r0, [pc, #104]	; (800081c <main+0x284>)
 80007b2:	f7ff fce5 	bl	8000180 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	4817      	ldr	r0, [pc, #92]	; (800081c <main+0x284>)
 80007be:	f00b f9fd 	bl	800bbbc <CDC_Transmit_FS>
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f012 fee5 	bl	8013594 <Delay_94ns>
 80007ca:	e01a      	b.n	8000802 <main+0x26a>
  }
  else {
	  USB_DEBUG_MSG("New Dilithium - err_code = %d\r\n", ret);
 80007cc:	2250      	movs	r2, #80	; 0x50
 80007ce:	2100      	movs	r1, #0
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <main+0x284>)
 80007d2:	f012 ff2d 	bl	8013630 <memset>
 80007d6:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 80007da:	f103 0318 	add.w	r3, r3, #24
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4917      	ldr	r1, [pc, #92]	; (8000840 <main+0x2a8>)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <main+0x284>)
 80007e4:	f012 ff2c 	bl	8013640 <siprintf>
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <main+0x284>)
 80007ea:	f7ff fcc9 	bl	8000180 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4619      	mov	r1, r3
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <main+0x284>)
 80007f6:	f00b f9e1 	bl	800bbbc <CDC_Transmit_FS>
 80007fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fe:	f012 fec9 	bl	8013594 <Delay_94ns>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(1000);
 8000802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000806:	f000 fdd9 	bl	80013bc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // YELLOW LED
 800080a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <main+0x298>)
 8000810:	f002 fa3e 	bl	8002c90 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000814:	e7f5      	b.n	8000802 <main+0x26a>
 8000816:	bf00      	nop
 8000818:	48000c00 	.word	0x48000c00
 800081c:	20001d4c 	.word	0x20001d4c
 8000820:	08013f18 	.word	0x08013f18
 8000824:	08013f24 	.word	0x08013f24
 8000828:	08013f30 	.word	0x08013f30
 800082c:	08013f54 	.word	0x08013f54
 8000830:	48000800 	.word	0x48000800
 8000834:	08013f74 	.word	0x08013f74
 8000838:	200001c4 	.word	0x200001c4
 800083c:	08013f80 	.word	0x08013f80
 8000840:	08013f98 	.word	0x08013f98

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b09a      	sub	sp, #104	; 0x68
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2248      	movs	r2, #72	; 0x48
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f012 feec 	bl	8013630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <SystemClock_Config+0xcc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000872:	4a27      	ldr	r2, [pc, #156]	; (8000910 <SystemClock_Config+0xcc>)
 8000874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <SystemClock_Config+0xcc>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000886:	234b      	movs	r3, #75	; 0x4b
 8000888:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI1|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800089e:	2305      	movs	r3, #5
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	2303      	movs	r3, #3
 80008a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008aa:	2330      	movs	r3, #48	; 0x30
 80008ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008ae:	2310      	movs	r3, #16
 80008b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fc27 	bl	800511c <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d4:	f000 fa06 	bl	8000ce4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008d8:	236f      	movs	r3, #111	; 0x6f
 80008da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2303      	movs	r3, #3
 80008de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2103      	movs	r1, #3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f004 ff83 	bl	8005804 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000904:	f000 f9ee 	bl	8000ce4 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3768      	adds	r7, #104	; 0x68
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58000400 	.word	0x58000400

08000914 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2250      	movs	r2, #80	; 0x50
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f012 fe85 	bl	8013630 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000926:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800092a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800092c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000932:	2300      	movs	r3, #0
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000936:	2310      	movs	r3, #16
 8000938:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4618      	mov	r0, r3
 800093e:	f005 fb9e 	bl	800607e <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000948:	f000 f9cc 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <MX_AES1_Init>:
  * @retval None
  */

#ifdef HARDWARE_AES
static void MX_AES1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END AES1_Init 0 */

  /* USER CODE BEGIN AES1_Init 1 */

  /* USER CODE END AES1_Init 1 */
	hcryp_state.Instance = AES1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_AES1_Init+0x44>)
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <MX_AES1_Init+0x48>)
 800095c:	601a      	str	r2, [r3, #0]
	hcryp_state.Init.DataType = CRYP_DATATYPE_32B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_AES1_Init+0x44>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
	hcryp_state.Init.KeySize = CRYP_KEYSIZE_128B;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_AES1_Init+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
	hcryp_state.Init.pKey = (uint32_t *)pKeyAES1;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_AES1_Init+0x44>)
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <MX_AES1_Init+0x4c>)
 800096e:	60da      	str	r2, [r3, #12]
	hcryp_state.Init.Algorithm = CRYP_AES_ECB;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_AES1_Init+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
	hcryp_state.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_AES1_Init+0x44>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
	hcryp_state.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_AES1_Init+0x44>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp_state) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_AES1_Init+0x44>)
 8000984:	f000 fe4d 	bl	8001622 <HAL_CRYP_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_AES1_Init+0x3e>
  {
    Error_Handler();
 800098e:	f000 f9a9 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN AES1_Init 2 */

  /* USER CODE END AES1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20001cec 	.word	0x20001cec
 800099c:	50060000 	.word	0x50060000
 80009a0:	080140bc 	.word	0x080140bc

080009a4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_IPCC_Init+0x20>)
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <MX_IPCC_Init+0x24>)
 80009ac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_IPCC_Init+0x20>)
 80009b0:	f002 f9ac 	bl	8002d0c <HAL_IPCC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80009ba:	f000 f993 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000188 	.word	0x20000188
 80009c8:	58000c00 	.word	0x58000c00

080009cc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_RNG_Init+0x24>)
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <MX_RNG_Init+0x28>)
 80009e4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_RNG_Init+0x24>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_RNG_Init+0x24>)
 80009ee:	f005 fdcd 	bl	800658c <HAL_RNG_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80009f8:	f000 f974 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200001c4 	.word	0x200001c4
 8000a04:	58001000 	.word	0x58001000

08000a08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_RTC_Init+0x60>)
 8000a10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a1a:	227f      	movs	r2, #127	; 0x7f
 8000a1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a20:	22ff      	movs	r2, #255	; 0xff
 8000a22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a3e:	f005 fe31 	bl	80066a4 <HAL_RTC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a48:	f000 f94c 	bl	8000ce4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_RTC_Init+0x5c>)
 8000a52:	f005 ff27 	bl	80068a4 <HAL_RTCEx_SetWakeUpTimer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 f942 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200001d8 	.word	0x200001d8
 8000a68:	40002800 	.word	0x40002800

08000a6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a72:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <MX_USART1_UART_Init+0x94>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab4:	4811      	ldr	r0, [pc, #68]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000ab6:	f005 ffb0 	bl	8006a1a <HAL_UART_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ac0:	f000 f910 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000ac8:	f006 fc11 	bl	80072ee <HAL_UARTEx_SetTxFifoThreshold>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ad2:	f000 f907 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4808      	ldr	r0, [pc, #32]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000ada:	f006 fc46 	bl	800736a <HAL_UARTEx_SetRxFifoThreshold>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae4:	f000 f8fe 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_USART1_UART_Init+0x90>)
 8000aea:	f006 fbc7 	bl	800727c <HAL_UARTEx_DisableFifoMode>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000af4:	f000 f8f6 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200001fc 	.word	0x200001fc
 8000b00:	40013800 	.word	0x40013800

08000b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b08:	2004      	movs	r0, #4
 8000b0a:	f7ff fd13 	bl	8000534 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff fd10 	bl	8000534 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	200b      	movs	r0, #11
 8000b1a:	f000 fd4e 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b1e:	200b      	movs	r0, #11
 8000b20:	f000 fd65 	bl	80015ee <HAL_NVIC_EnableIRQ>

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	2004      	movs	r0, #4
 8000b3e:	f7ff fd12 	bl	8000566 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff fd0f 	bl	8000566 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f7ff fd0c 	bl	8000566 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff fd09 	bl	8000566 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000b5a:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <MX_GPIO_Init+0x9c>)
 8000b5c:	f002 f880 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2101      	movs	r1, #1
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b66:	f002 f87b 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTI10_Pin */
  GPIO_InitStruct.Pin = EXTI10_Pin;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXTI10_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f001 fefd 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000b86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_GPIO_Init+0x9c>)
 8000b9e:	f001 feef 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_GPIO_Init+0xa0>)
 8000bb8:	f001 fee2 	bl	8002980 <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000c00 	.word	0x48000c00

08000bcc <sign_verify_test_assert>:

/* USER CODE BEGIN 4 */
static int sign_verify_test_assert(int ret, int mlen, uint8_t ref_m[MLEN], uint8_t new_m[MLEN]){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
	  if (ret) {
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01e      	beq.n	8000c1e <sign_verify_test_assert+0x52>
	 		  USB_DEBUG_MSG("Verification failed - err_code = %d\r\n", ret);
 8000be0:	2250      	movs	r2, #80	; 0x50
 8000be2:	2100      	movs	r1, #0
 8000be4:	483a      	ldr	r0, [pc, #232]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000be6:	f012 fd23 	bl	8013630 <memset>
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4939      	ldr	r1, [pc, #228]	; (8000cd4 <sign_verify_test_assert+0x108>)
 8000bee:	4838      	ldr	r0, [pc, #224]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000bf0:	f012 fd26 	bl	8013640 <siprintf>
 8000bf4:	4836      	ldr	r0, [pc, #216]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000bf6:	f7ff fac3 	bl	8000180 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4833      	ldr	r0, [pc, #204]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c02:	f00a ffdb 	bl	800bbbc <CDC_Transmit_FS>
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f012 fcc3 	bl	8013594 <Delay_94ns>
	 		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c14:	4830      	ldr	r0, [pc, #192]	; (8000cd8 <sign_verify_test_assert+0x10c>)
 8000c16:	f002 f823 	bl	8002c60 <HAL_GPIO_WritePin>
	 		 return 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e053      	b.n	8000cc6 <sign_verify_test_assert+0xfa>
	 }

	  if (mlen != MLEN) {
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	2b3b      	cmp	r3, #59	; 0x3b
 8000c22:	d01d      	beq.n	8000c60 <sign_verify_test_assert+0x94>
		  USB_DEBUG_MSG("Message lengths don't match\r\n");
 8000c24:	2250      	movs	r2, #80	; 0x50
 8000c26:	2100      	movs	r1, #0
 8000c28:	4829      	ldr	r0, [pc, #164]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c2a:	f012 fd01 	bl	8013630 <memset>
 8000c2e:	492b      	ldr	r1, [pc, #172]	; (8000cdc <sign_verify_test_assert+0x110>)
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c32:	f012 fd05 	bl	8013640 <siprintf>
 8000c36:	4826      	ldr	r0, [pc, #152]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c38:	f7ff faa2 	bl	8000180 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	4619      	mov	r1, r3
 8000c42:	4823      	ldr	r0, [pc, #140]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c44:	f00a ffba 	bl	800bbbc <CDC_Transmit_FS>
 8000c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4c:	f012 fca2 	bl	8013594 <Delay_94ns>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c56:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <sign_verify_test_assert+0x10c>)
 8000c58:	f002 f802 	bl	8002c60 <HAL_GPIO_WritePin>
		  return 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e032      	b.n	8000cc6 <sign_verify_test_assert+0xfa>
	  }

	  for (int j = 0; j < mlen; ++j) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e02a      	b.n	8000cbc <sign_verify_test_assert+0xf0>
		  if (ref_m[j] != new_m[j]) {
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	6839      	ldr	r1, [r7, #0]
 8000c72:	440b      	add	r3, r1
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d01d      	beq.n	8000cb6 <sign_verify_test_assert+0xea>
			  USB_DEBUG_MSG("Messages don't match\r\n");
 8000c7a:	2250      	movs	r2, #80	; 0x50
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c80:	f012 fcd6 	bl	8013630 <memset>
 8000c84:	4916      	ldr	r1, [pc, #88]	; (8000ce0 <sign_verify_test_assert+0x114>)
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c88:	f012 fcda 	bl	8013640 <siprintf>
 8000c8c:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c8e:	f7ff fa77 	bl	8000180 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <sign_verify_test_assert+0x104>)
 8000c9a:	f00a ff8f 	bl	800bbbc <CDC_Transmit_FS>
 8000c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca2:	f012 fc77 	bl	8013594 <Delay_94ns>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cac:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <sign_verify_test_assert+0x10c>)
 8000cae:	f001 ffd7 	bl	8002c60 <HAL_GPIO_WritePin>
			  return 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e007      	b.n	8000cc6 <sign_verify_test_assert+0xfa>
	  for (int j = 0; j < mlen; ++j) {
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbd0      	blt.n	8000c66 <sign_verify_test_assert+0x9a>
		  }
	  }
	  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20001d4c 	.word	0x20001d4c
 8000cd4:	08013fb8 	.word	0x08013fb8
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	08013fe0 	.word	0x08013fe0
 8000ce0:	08014000 	.word	0x08014000

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <Error_Handler+0x38>)
 8000cf2:	f001 ffcd 	bl	8002c90 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000cf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfa:	4808      	ldr	r0, [pc, #32]	; (8000d1c <Error_Handler+0x38>)
 8000cfc:	f001 ffc8 	bl	8002c90 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <Error_Handler+0x38>)
 8000d06:	f001 ffc3 	bl	8002c90 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <Error_Handler+0x3c>)
 8000d0e:	f001 ffbf 	bl	8002c90 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d16:	f000 fb51 	bl	80013bc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000d1a:	e7e7      	b.n	8000cec <Error_Handler+0x8>
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00

08000d24 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_AHB2_GRP1_EnableClock>:
{
 8000d46:	b480      	push	{r7}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d8e:	4013      	ands	r3, r2
 8000d90:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b085      	sub	sp, #20
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ddc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df4:	68fb      	ldr	r3, [r7, #12]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000e38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e3c:	f7ff ffaf 	bl	8000d9e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	202e      	movs	r0, #46	; 0x2e
 8000e46:	f000 fbb8 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000e4a:	202e      	movs	r0, #46	; 0x2e
 8000e4c:	f000 fbcf 	bl	80015ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <HAL_CRYP_MspInit+0x24>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d103      	bne.n	8000e6e <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES1_MspInit 0 */

  /* USER CODE END AES1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES1_CLK_ENABLE();
 8000e66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e6a:	f7ff ff6c 	bl	8000d46 <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN AES1_MspInit 1 */

  /* USER CODE END AES1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	50060000 	.word	0x50060000

08000e7c <HAL_CRYP_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* hcryp)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <HAL_CRYP_MspDeInit+0x24>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d103      	bne.n	8000e96 <HAL_CRYP_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN AES1_MspDeInit 0 */

  /* USER CODE END AES1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_AES1_CLK_DISABLE();
 8000e8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e92:	f7ff ff71 	bl	8000d78 <LL_AHB2_GRP1_DisableClock>
  /* USER CODE BEGIN AES1_MspDeInit 1 */

  /* USER CODE END AES1_MspDeInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	50060000 	.word	0x50060000

08000ea4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_IPCC_MspInit+0x44>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d113      	bne.n	8000ede <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000eb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000eba:	f7ff ff70 	bl	8000d9e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	202c      	movs	r0, #44	; 0x2c
 8000ec4:	f000 fb79 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000ec8:	202c      	movs	r0, #44	; 0x2c
 8000eca:	f000 fb90 	bl	80015ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	202d      	movs	r0, #45	; 0x2d
 8000ed4:	f000 fb71 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000ed8:	202d      	movs	r0, #45	; 0x2d
 8000eda:	f000 fb88 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	58000c00 	.word	0x58000c00

08000eec <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b096      	sub	sp, #88	; 0x58
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	2250      	movs	r2, #80	; 0x50
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f012 fb97 	bl	8013630 <memset>
  if(hrng->Instance==RNG)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_RNG_MspInit+0x50>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d113      	bne.n	8000f34 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f10:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000f12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 f8ae 	bl	800607e <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000f28:	f7ff fedc 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f2c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f30:	f7ff ff35 	bl	8000d9e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3758      	adds	r7, #88	; 0x58
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58001000 	.word	0x58001000

08000f40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b096      	sub	sp, #88	; 0x58
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2250      	movs	r2, #80	; 0x50
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f012 fb6d 	bl	8013630 <memset>
  if(hrtc->Instance==RTC)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_RTC_MspInit+0x54>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d115      	bne.n	8000f8c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f64:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 f884 	bl	800607e <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f7c:	f7ff feb2 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f80:	f7ff fed0 	bl	8000d24 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f88:	f7ff ff22 	bl	8000dd0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3758      	adds	r7, #88	; 0x58
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40002800 	.word	0x40002800

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b09c      	sub	sp, #112	; 0x70
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2250      	movs	r2, #80	; 0x50
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f012 fb39 	bl	8013630 <memset>
  if(huart->Instance==USART1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	; (800106c <HAL_UART_MspInit+0xd4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d14d      	bne.n	8001064 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 f852 	bl	800607e <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe0:	f7ff fe80 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fe8:	f7ff ff0b 	bl	8000e02 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff feaa 	bl	8000d46 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff2:	23c0      	movs	r3, #192	; 0xc0
 8000ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001002:	2307      	movs	r3, #7
 8001004:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800100a:	4619      	mov	r1, r3
 800100c:	4818      	ldr	r0, [pc, #96]	; (8001070 <HAL_UART_MspInit+0xd8>)
 800100e:	f001 fcb7 	bl	8002980 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_UART_MspInit+0xdc>)
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <HAL_UART_MspInit+0xe0>)
 8001016:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_UART_MspInit+0xdc>)
 800101a:	220f      	movs	r2, #15
 800101c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_UART_MspInit+0xdc>)
 8001020:	2210      	movs	r2, #16
 8001022:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_UART_MspInit+0xdc>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_UART_MspInit+0xdc>)
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_UART_MspInit+0xdc>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_UART_MspInit+0xdc>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_UART_MspInit+0xdc>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_UART_MspInit+0xdc>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <HAL_UART_MspInit+0xdc>)
 800104a:	f001 fadd 	bl	8002608 <HAL_DMA_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001054:	f7ff fe46 	bl	8000ce4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_UART_MspInit+0xdc>)
 800105c:	67da      	str	r2, [r3, #124]	; 0x7c
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <HAL_UART_MspInit+0xdc>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3770      	adds	r7, #112	; 0x70
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40013800 	.word	0x40013800
 8001070:	48000400 	.word	0x48000400
 8001074:	20000290 	.word	0x20000290
 8001078:	40020008 	.word	0x40020008

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f94c 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <DMA1_Channel1_IRQHandler+0x10>)
 80010d6:	f001 fb3f 	bl	8002758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000290 	.word	0x20000290

080010e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <USB_LP_IRQHandler+0x10>)
 80010ea:	f002 f82a 	bl	8003142 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200017d8 	.word	0x200017d8

080010f8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <IPCC_C1_RX_IRQHandler+0x10>)
 80010fe:	f001 fe85 	bl	8002e0c <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000188 	.word	0x20000188

0800110c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <IPCC_C1_TX_IRQHandler+0x10>)
 8001112:	f001 fe2d 	bl	8002d70 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000188 	.word	0x20000188

08001120 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001124:	f001 fdce 	bl	8002cc4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f012 fa30 	bl	80135c0 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20030000 	.word	0x20030000
 800118c:	00000400 	.word	0x00000400
 8001190:	200002f0 	.word	0x200002f0
 8001194:	20001db0 	.word	0x20001db0

08001198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <SystemInit+0x98>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <SystemInit+0x98>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80011c4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80011c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <SystemInit+0x9c>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e2:	f023 0305 	bic.w	r3, r3, #5
 80011e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80011fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001202:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <SystemInit+0xa0>)
 8001204:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <SystemInit+0xa0>)
 800120c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	faf6fefb 	.word	0xfaf6fefb
 8001238:	22041000 	.word	0x22041000

0800123c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800123c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001240:	3304      	adds	r3, #4

08001242 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001242:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001244:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001246:	d3f9      	bcc.n	800123c <CopyDataInit>
  bx lr
 8001248:	4770      	bx	lr

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800124a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800124c:	3004      	adds	r0, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800124e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>
  bx lr
 8001252:	4770      	bx	lr

08001254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001258:	f7ff ff9e 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <LoopForever+0x6>)
 800125e:	490c      	ldr	r1, [pc, #48]	; (8001290 <LoopForever+0xa>)
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <LoopForever+0xe>)
 8001262:	2300      	movs	r3, #0
 8001264:	f7ff ffed 	bl	8001242 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <LoopForever+0x12>)
 800126a:	490c      	ldr	r1, [pc, #48]	; (800129c <LoopForever+0x16>)
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <LoopForever+0x1a>)
 800126e:	2300      	movs	r3, #0
 8001270:	f7ff ffe7 	bl	8001242 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <LoopForever+0x1e>)
 8001276:	490c      	ldr	r1, [pc, #48]	; (80012a8 <LoopForever+0x22>)
 8001278:	2300      	movs	r3, #0
 800127a:	f7ff ffe8 	bl	800124e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800127e:	f012 f9a5 	bl	80135cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001282:	f7ff f989 	bl	8000598 <main>

08001286 <LoopForever>:

LoopForever:
  b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   r0, =_estack
 8001288:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800128c:	20000008 	.word	0x20000008
 8001290:	2000016c 	.word	0x2000016c
 8001294:	0801469c 	.word	0x0801469c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001298:	20030000 	.word	0x20030000
 800129c:	20030000 	.word	0x20030000
 80012a0:	08014800 	.word	0x08014800
  INIT_BSS _sbss, _ebss
 80012a4:	2000016c 	.word	0x2000016c
 80012a8:	20001dac 	.word	0x20001dac

080012ac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_Init+0x3c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_Init+0x3c>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c6:	2003      	movs	r0, #3
 80012c8:	f000 f96c 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012cc:	200f      	movs	r0, #15
 80012ce:	f000 f80f 	bl	80012f0 <HAL_InitTick>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	e001      	b.n	80012e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012de:	f7ff fda9 	bl	8000e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	58004000 	.word	0x58004000

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_InitTick+0x6c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d024      	beq.n	800134e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001304:	f004 fc2a 	bl	8005b5c <HAL_RCC_GetHCLKFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_InitTick+0x6c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	fbb3 f3f1 	udiv	r3, r3, r1
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f974 	bl	800160a <HAL_SYSTICK_Config>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10f      	bne.n	8001348 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d809      	bhi.n	8001342 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132e:	2200      	movs	r2, #0
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	f000 f940 	bl	80015ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <HAL_InitTick+0x70>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e007      	b.n	8001352 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	e004      	b.n	8001352 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e001      	b.n	8001352 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000010 	.word	0x20000010
 8001360:	2000000c 	.word	0x2000000c

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000010 	.word	0x20000010
 8001388:	200002f4 	.word	0x200002f4

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200002f4 	.word	0x200002f4

080013a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTickPrio+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000000c 	.word	0x2000000c

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffe2 	bl	800138c <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffd2 	bl	800138c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000010 	.word	0x20000010

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff40 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff33 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa4 	bl	8001560 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e02d      	b.n	8001690 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d106      	bne.n	800164e <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fc03 	bl	8000e54 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8001658:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6851      	ldr	r1, [r2, #4]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6892      	ldr	r2, [r2, #8]
 8001664:	4311      	orrs	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6952      	ldr	r2, [r2, #20]
 800166a:	4311      	orrs	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	430b      	orrs	r3, r1
 8001672:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e020      	b.n	80016ec <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fbd1 	bl	8000e7c <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4613      	mov	r3, r2
 8001702:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d17c      	bne.n	800180a <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_CRYP_Encrypt+0x32>
 8001722:	2302      	movs	r3, #2
 8001724:	e07a      	b.n	800181c <HAL_CRYP_Encrypt+0x128>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2b00      	cmp	r3, #0
 800174e:	d106      	bne.n	800175e <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800175c:	e003      	b.n	8001766 <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	88fa      	ldrh	r2, [r7, #6]
 8001762:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0218 	bic.w	r2, r2, #24
 8001774:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_CRYP_Encrypt+0x130>)
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]

    switch (algo)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d023      	beq.n	80017d2 <HAL_CRYP_Encrypt+0xde>
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d826      	bhi.n	80017e0 <HAL_CRYP_Encrypt+0xec>
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b60      	cmp	r3, #96	; 0x60
 8001796:	d015      	beq.n	80017c4 <HAL_CRYP_Encrypt+0xd0>
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b60      	cmp	r3, #96	; 0x60
 800179c:	d820      	bhi.n	80017e0 <HAL_CRYP_Encrypt+0xec>
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b40      	cmp	r3, #64	; 0x40
 80017a2:	d008      	beq.n	80017b6 <HAL_CRYP_Encrypt+0xc2>
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b40      	cmp	r3, #64	; 0x40
 80017a8:	d81a      	bhi.n	80017e0 <HAL_CRYP_Encrypt+0xec>
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <HAL_CRYP_Encrypt+0xc2>
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	d114      	bne.n	80017e0 <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 80017b6:	6a39      	ldr	r1, [r7, #32]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f83f 	bl	800183c <CRYP_AES_Encrypt>
 80017be:	4603      	mov	r3, r0
 80017c0:	75fb      	strb	r3, [r7, #23]
        break;
 80017c2:	e016      	b.n	80017f2 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9cc 	bl	8001b64 <CRYP_AESGCM_Process>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
        break;
 80017d0:	e00f      	b.n	80017f2 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80017d2:	6a39      	ldr	r1, [r7, #32]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fb6d 	bl	8001eb4 <CRYP_AESCCM_Process>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
        break;
 80017de:	e008      	b.n	80017f2 <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	75fb      	strb	r3, [r7, #23]
        break;
 80017f0:	bf00      	nop
    }

    if (status == HAL_OK)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d110      	bne.n	800181a <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001808:	e007      	b.n	800181a <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f043 0208 	orr.w	r2, r3, #8
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800181a:	7dfb      	ldrb	r3, [r7, #23]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	00010060 	.word	0x00010060

08001828 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001846:	2301      	movs	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	2b01      	cmp	r3, #1
 8001850:	d109      	bne.n	8001866 <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	e002      	b.n	8001866 <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d121      	bne.n	80018b0 <CRYP_AES_Encrypt+0x74>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f913 	bl	8001a9e <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d017      	beq.n	80018b0 <CRYP_AES_Encrypt+0x74>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6852      	ldr	r2, [r2, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6892      	ldr	r2, [r2, #8]
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68d2      	ldr	r2, [r2, #12]
 80018ae:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018ca:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d2:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80018d4:	e00a      	b.n	80018ec <CRYP_AES_Encrypt+0xb0>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f828 	bl	800192e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018e2:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ea:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	89fa      	ldrh	r2, [r7, #14]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <CRYP_AES_Encrypt+0xd0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	b29b      	uxth	r3, r3
 8001906:	89ba      	ldrh	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d3e4      	bcc.n	80018d6 <CRYP_AES_Encrypt+0x9a>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001940:	b29b      	uxth	r3, r3
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	441a      	add	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001952:	b29b      	uxth	r3, r3
 8001954:	3301      	adds	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001964:	b29b      	uxth	r3, r3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	441a      	add	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001976:	b29b      	uxth	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001988:	b29b      	uxth	r3, r3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	441a      	add	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800199a:	b29b      	uxth	r3, r3
 800199c:	3301      	adds	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	441a      	add	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80019c8:	6839      	ldr	r1, [r7, #0]
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fdf6 	bl	80025bc <CRYP_WaitOnCCFlag>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d018      	beq.n	8001a08 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff10 	bl	8001828 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a16:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e00b      	b.n	8001a36 <CRYP_AES_ProcessData+0x108>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3320      	adds	r3, #32
 8001a2a:	443b      	add	r3, r7
 8001a2c:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d9f0      	bls.n	8001a1e <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8001a40:	e01a      	b.n	8001a78 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	441a      	add	r2, r3
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	3320      	adds	r3, #32
 8001a58:	443b      	add	r3, r7
 8001a5a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001a5e:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001a88:	3303      	adds	r3, #3
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d202      	bcs.n	8001a96 <CRYP_AES_ProcessData+0x168>
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d9d5      	bls.n	8001a42 <CRYP_AES_ProcessData+0x114>
  }
}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d050      	beq.n	8001b52 <CRYP_SetKey+0xb4>
  {
    switch (KeySize)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d034      	beq.n	8001b20 <CRYP_SetKey+0x82>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001abc:	d14b      	bne.n	8001b56 <CRYP_SetKey+0xb8>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6852      	ldr	r2, [r2, #4]
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6892      	ldr	r2, [r2, #8]
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68d2      	ldr	r2, [r2, #12]
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6912      	ldr	r2, [r2, #16]
 8001af8:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6952      	ldr	r2, [r2, #20]
 8001b04:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6992      	ldr	r2, [r2, #24]
 8001b10:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69d2      	ldr	r2, [r2, #28]
 8001b1c:	611a      	str	r2, [r3, #16]
        break;
 8001b1e:	e01b      	b.n	8001b58 <CRYP_SetKey+0xba>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6852      	ldr	r2, [r2, #4]
 8001b36:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6892      	ldr	r2, [r2, #8]
 8001b42:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68d2      	ldr	r2, [r2, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

        break;
 8001b50:	e002      	b.n	8001b58 <CRYP_SetKey+0xba>
      default:
        break;
    }
  }
 8001b52:	bf00      	nop
 8001b54:	e000      	b.n	8001b58 <CRYP_SetKey+0xba>
        break;
 8001b56:	bf00      	nop
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d118      	bne.n	8001bb8 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10a      	bne.n	8001ba4 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001b9c:	441a      	add	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ba2:	e00f      	b.n	8001bc4 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bb6:	e005      	b.n	8001bc4 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d16d      	bne.n	8001ca6 <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001bde:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ff59 	bl	8001a9e <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6852      	ldr	r2, [r2, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6892      	ldr	r2, [r2, #8]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68d2      	ldr	r2, [r2, #12]
 8001c1a:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fcc4 	bl	80025bc <CRYP_WaitOnCCFlag>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00f      	beq.n	8001c5a <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e128      	b.n	8001eac <CRYP_AESGCM_Process+0x348>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c68:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 facf 	bl	8002210 <CRYP_GCMCCM_SetHeaderPhase>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e117      	b.n	8001eac <CRYP_AESGCM_Process+0x348>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c94:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ca4:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	f023 0303 	bic.w	r3, r3, #3
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cbe:	f7ff fb65 	bl	800138c <HAL_GetTick>
 8001cc2:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001cd6:	e033      	b.n	8001d40 <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001cd8:	6839      	ldr	r1, [r7, #0]
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fe27 	bl	800192e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce6:	d022      	beq.n	8001d2e <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ce8:	f7ff fb50 	bl	800138c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d302      	bcc.n	8001cfe <CRYP_AESGCM_Process+0x19a>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d117      	bne.n	8001d2e <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0be      	b.n	8001eac <CRYP_AESGCM_Process+0x348>
      }
    }
    incount = hcryp->CrypInCount;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d203      	bcs.n	8001d50 <CRYP_AESGCM_Process+0x1ec>
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3c3      	bcc.n	8001cd8 <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a4 	beq.w	8001eaa <CRYP_AESGCM_Process+0x346>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0318 	and.w	r3, r3, #24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	051a      	lsls	r2, r3, #20
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f1c3 0310 	rsb	r3, r3, #16
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db2:	e005      	b.n	8001dc0 <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f1c3 0310 	rsb	r3, r3, #16
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc4:	e014      	b.n	8001df0 <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	441a      	add	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	3301      	adds	r3, #1
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
 8001df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3e6      	bcc.n	8001dc6 <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 8001df8:	e006      	b.n	8001e08 <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
      index++;
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	3301      	adds	r3, #1
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d9f5      	bls.n	8001dfa <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fbd3 	bl	80025bc <CRYP_WaitOnCCFlag>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fcfb 	bl	8001828 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e40:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
 8001e46:	e00b      	b.n	8001e60 <CRYP_AESGCM_Process+0x2fc>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3338      	adds	r3, #56	; 0x38
 8001e54:	443b      	add	r3, r7
 8001e56:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d9f0      	bls.n	8001e48 <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6a:	e01a      	b.n	8001ea2 <CRYP_AESGCM_Process+0x33e>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	441a      	add	r2, r3
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	3338      	adds	r3, #56	; 0x38
 8001e82:	443b      	add	r3, r7
 8001e84:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e88:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3e0      	bcc.n	8001e6c <CRYP_AESGCM_Process+0x308>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3738      	adds	r7, #56	; 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08e      	sub	sp, #56	; 0x38
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d118      	bne.n	8001f08 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10a      	bne.n	8001ef4 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001eec:	441a      	add	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ef2:	e00f      	b.n	8001f14 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f06:	e005      	b.n	8001f14 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d16d      	bne.n	8001ff6 <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fdb1 	bl	8001a9e <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6852      	ldr	r2, [r2, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68d2      	ldr	r2, [r2, #12]
 8001f6a:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fb1c 	bl	80025bc <CRYP_WaitOnCCFlag>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00f      	beq.n	8001faa <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e12d      	b.n	8002206 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb8:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f927 	bl	8002210 <CRYP_GCMCCM_SetHeaderPhase>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e11c      	b.n	8002206 <CRYP_AESCCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ff4:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8002006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002008:	f023 0303 	bic.w	r3, r3, #3
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800200e:	f7ff f9bd 	bl	800138c <HAL_GetTick>
 8002012:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002018:	b29b      	uxth	r3, r3
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002022:	b29b      	uxth	r3, r3
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002026:	e033      	b.n	8002090 <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fc7f 	bl	800192e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d022      	beq.n	800207e <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8002038:	f7ff f9a8 	bl	800138c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <CRYP_AESCCM_Process+0x19a>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d117      	bne.n	800207e <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0c3      	b.n	8002206 <CRYP_AESCCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002082:	b29b      	uxth	r3, r3
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800208c:	b29b      	uxth	r3, r3
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002094:	429a      	cmp	r2, r3
 8002096:	d203      	bcs.n	80020a0 <CRYP_AESCCM_Process+0x1ec>
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	429a      	cmp	r2, r3
 800209e:	d3c3      	bcc.n	8002028 <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a9 	beq.w	8002204 <CRYP_AESCCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0318 	and.w	r3, r3, #24
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d10a      	bne.n	80020ee <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	051a      	lsls	r2, r3, #20
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f1c3 0310 	rsb	r3, r3, #16
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002102:	e005      	b.n	8002110 <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f1c3 0310 	rsb	r3, r3, #16
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3301      	adds	r3, #1
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
 8002114:	e014      	b.n	8002140 <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	441a      	add	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002130:	b29b      	uxth	r3, r3
 8002132:	3301      	adds	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	3301      	adds	r3, #1
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
 8002140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d3e6      	bcc.n	8002116 <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8002148:	e006      	b.n	8002158 <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	3301      	adds	r3, #1
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	2b03      	cmp	r3, #3
 800215c:	d9f5      	bls.n	800214a <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fa2b 	bl	80025bc <CRYP_WaitOnCCFlag>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00f      	beq.n	800218c <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 0210 	orr.w	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e03c      	b.n	8002206 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800219a:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
 80021a0:	e00b      	b.n	80021ba <CRYP_AESCCM_Process+0x306>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3338      	adds	r3, #56	; 0x38
 80021ae:	443b      	add	r3, r7
 80021b0:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	3301      	adds	r3, #1
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d9f0      	bls.n	80021a2 <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
 80021c4:	e01a      	b.n	80021fc <CRYP_AESCCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	441a      	add	r2, r3
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	443b      	add	r3, r7
 80021de:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80021e2:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	3301      	adds	r3, #1
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
 80021fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	429a      	cmp	r2, r3
 8002202:	d3e0      	bcc.n	80021c6 <CRYP_AESCCM_Process+0x312>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3738      	adds	r7, #56	; 0x38
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b092      	sub	sp, #72	; 0x48
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 800221a:	4b8c      	ldr	r3, [pc, #560]	; (800244c <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 800221c:	f107 040c 	add.w	r4, r7, #12
 8002220:	461d      	mov	r5, r3
 8002222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800222e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	2b00      	cmp	r3, #0
 8002238:	d104      	bne.n	8002244 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	643b      	str	r3, [r7, #64]	; 0x40
 8002242:	e002      	b.n	800224a <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 800224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8192 	beq.w	8002576 <CRYP_GCMCCM_SetHeaderPhase+0x366>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002264:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8002276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	2b00      	cmp	r3, #0
 800227e:	d17a      	bne.n	8002376 <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8002280:	2300      	movs	r3, #0
 8002282:	647b      	str	r3, [r7, #68]	; 0x44
 8002284:	e071      	b.n	800236a <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800228e:	b29b      	uxth	r3, r3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	441a      	add	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	441a      	add	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	441a      	add	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800230c:	b29b      	uxth	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f94f 	bl	80025bc <CRYP_WaitOnCCFlag>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0210 	orr.w	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e12e      	b.n	80025b2 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002362:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8002364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002366:	3304      	adds	r3, #4
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
 800236a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002370:	429a      	cmp	r2, r3
 8002372:	d388      	bcc.n	8002286 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8002374:	e11c      	b.n	80025b0 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8002376:	2300      	movs	r3, #0
 8002378:	647b      	str	r3, [r7, #68]	; 0x44
 800237a:	e074      	b.n	8002466 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002384:	b29b      	uxth	r3, r3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002396:	b29b      	uxth	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	441a      	add	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002402:	b29b      	uxth	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800240c:	6839      	ldr	r1, [r7, #0]
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8d4 	bl	80025bc <CRYP_WaitOnCCFlag>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01a      	beq.n	8002450 <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0b3      	b.n	80025b2 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
 800244a:	bf00      	nop
 800244c:	08014018 	.word	0x08014018
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002462:	3304      	adds	r3, #4
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
 8002466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800246e:	429a      	cmp	r2, r3
 8002470:	d384      	bcc.n	800237c <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8002472:	2300      	movs	r3, #0
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e014      	b.n	80024a2 <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002480:	b29b      	uxth	r3, r3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	441a      	add	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002492:	b29b      	uxth	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 800249c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249e:	3301      	adds	r3, #1
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d3e3      	bcc.n	8002478 <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 80024b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 80024ba:	e006      	b.n	80024ca <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
          loopcounter++;
 80024c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c6:	3301      	adds	r3, #1
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 80024ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d9f5      	bls.n	80024bc <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 80024d0:	e029      	b.n	8002526 <CRYP_GCMCCM_SetHeaderPhase+0x316>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80024da:	b29b      	uxth	r3, r3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	005a      	lsls	r2, r3, #1
 80024ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	3348      	adds	r3, #72	; 0x48
 80024f6:	443b      	add	r3, r7
 80024f8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80024fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fe:	4013      	ands	r3, r2
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002508:	609a      	str	r2, [r3, #8]
         loopcounter++;
 800250a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250c:	3301      	adds	r3, #1
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 8002510:	e006      	b.n	8002520 <CRYP_GCMCCM_SetHeaderPhase+0x310>
         {
           hcryp->Instance->DINR = 0x0U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
           loopcounter++;
 800251a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251c:	3301      	adds	r3, #1
 800251e:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 8002520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002522:	2b03      	cmp	r3, #3
 8002524:	d9f5      	bls.n	8002512 <CRYP_GCMCCM_SetHeaderPhase+0x302>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f847 	bl	80025bc <CRYP_WaitOnCCFlag>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d017      	beq.n	8002564 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e026      	b.n	80025b2 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e01c      	b.n	80025b0 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 0106 	bic.w	r1, r3, #6
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800259e:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3748      	adds	r7, #72	; 0x48
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ba:	bf00      	nop

080025bc <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80025c6:	f7fe fee1 	bl	800138c <HAL_GetTick>
 80025ca:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80025cc:	e010      	b.n	80025f0 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d00c      	beq.n	80025f0 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7fe fed9 	bl	800138c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <CRYP_WaitOnCCFlag+0x30>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e007      	b.n	8002600 <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0e7      	beq.n	80025ce <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e08e      	b.n	8002738 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_DMA_Init+0x138>)
 8002622:	429a      	cmp	r2, r3
 8002624:	d80f      	bhi.n	8002646 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_DMA_Init+0x13c>)
 800262e:	4413      	add	r3, r2
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_DMA_Init+0x140>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	009a      	lsls	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_DMA_Init+0x144>)
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
 8002644:	e00e      	b.n	8002664 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <HAL_DMA_Init+0x148>)
 800264e:	4413      	add	r3, r2
 8002650:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <HAL_DMA_Init+0x140>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	009a      	lsls	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_DMA_Init+0x14c>)
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8fe 	bl	80028b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c4:	d102      	bne.n	80026cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80026d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_DMA_Init+0x106>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d80c      	bhi.n	800270e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f91d 	bl	8002934 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	e008      	b.n	8002720 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40020407 	.word	0x40020407
 8002744:	bffdfff8 	.word	0xbffdfff8
 8002748:	cccccccd 	.word	0xcccccccd
 800274c:	40020000 	.word	0x40020000
 8002750:	bffdfbf8 	.word	0xbffdfbf8
 8002754:	40020400 	.word	0x40020400

08002758 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f003 031c 	and.w	r3, r3, #28
 8002778:	2204      	movs	r2, #4
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d026      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x7a>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d021      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0204 	bic.w	r2, r2, #4
 80027aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f003 021c 	and.w	r2, r3, #28
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2104      	movs	r1, #4
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d071      	beq.n	80028ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027d0:	e06c      	b.n	80028ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f003 031c 	and.w	r3, r3, #28
 80027da:	2202      	movs	r2, #2
 80027dc:	409a      	lsls	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02e      	beq.n	8002844 <HAL_DMA_IRQHandler+0xec>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d029      	beq.n	8002844 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 020a 	bic.w	r2, r2, #10
 800280c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f003 021c 	and.w	r2, r3, #28
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2102      	movs	r1, #2
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d038      	beq.n	80028ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002842:	e033      	b.n	80028ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f003 031c 	and.w	r3, r3, #28
 800284c:	2208      	movs	r2, #8
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02a      	beq.n	80028ae <HAL_DMA_IRQHandler+0x156>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d025      	beq.n	80028ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 020e 	bic.w	r2, r2, #14
 8002870:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f003 021c 	and.w	r2, r3, #28
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
}
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d80a      	bhi.n	80028e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6493      	str	r3, [r2, #72]	; 0x48
 80028e0:	e007      	b.n	80028f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80028ec:	4413      	add	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3b08      	subs	r3, #8
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002908:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2201      	movs	r2, #1
 8002912:	409a      	lsls	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40020407 	.word	0x40020407
 8002928:	4002081c 	.word	0x4002081c
 800292c:	cccccccd 	.word	0xcccccccd
 8002930:	40020880 	.word	0x40020880

08002934 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002944:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002958:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2201      	movs	r2, #1
 8002964:	409a      	lsls	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	1000823f 	.word	0x1000823f
 800297c:	40020940 	.word	0x40020940

08002980 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298e:	e14c      	b.n	8002c2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 813e 	beq.w	8002c24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d005      	beq.n	80029c0 <HAL_GPIO_Init+0x40>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d130      	bne.n	8002a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029f6:	2201      	movs	r2, #1
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f003 0201 	and.w	r2, r3, #1
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d017      	beq.n	8002a5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d123      	bne.n	8002ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	6939      	ldr	r1, [r7, #16]
 8002aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8098 	beq.w	8002c24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_GPIO_Init+0x2c8>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b1e:	d019      	beq.n	8002b54 <HAL_GPIO_Init+0x1d4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a4a      	ldr	r2, [pc, #296]	; (8002c4c <HAL_GPIO_Init+0x2cc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <HAL_GPIO_Init+0x1d0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a49      	ldr	r2, [pc, #292]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00d      	beq.n	8002b4c <HAL_GPIO_Init+0x1cc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a48      	ldr	r2, [pc, #288]	; (8002c54 <HAL_GPIO_Init+0x2d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x1c8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_GPIO_Init+0x2d8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_GPIO_Init+0x1c4>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e008      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b44:	2307      	movs	r3, #7
 8002b46:	e006      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e004      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e002      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b54:	2300      	movs	r3, #0
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	f002 0203 	and.w	r2, r2, #3
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	4093      	lsls	r3, r2
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b66:	4938      	ldr	r1, [pc, #224]	; (8002c48 <HAL_GPIO_Init+0x2c8>)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b98:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bee:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3301      	adds	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f aeab 	bne.w	8002990 <HAL_GPIO_Init+0x10>
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	48000400 	.word	0x48000400
 8002c50:	48000800 	.word	0x48000800
 8002c54:	48000c00 	.word	0x48000c00
 8002c58:	48001000 	.word	0x48001000
 8002c5c:	58000800 	.word	0x58000800

08002c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	43d9      	mvns	r1, r3
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_HSEM_IRQHandler+0x30>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_HSEM_IRQHandler+0x30>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	4906      	ldr	r1, [pc, #24]	; (8002cf4 <HAL_HSEM_IRQHandler+0x30>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <HAL_HSEM_IRQHandler+0x30>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f807 	bl	8002cf8 <HAL_HSEM_FreeCallback>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	58001500 	.word	0x58001500

08002cf8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01e      	beq.n	8002d5c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_IPCC_Init+0x60>)
 8002d20:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe f8b8 	bl	8000ea4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f000 f8f5 	bl	8002f24 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8c6 	bl	8002ed8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002d5a:	e001      	b.n	8002d60 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	58000c00 	.word	0x58000c00

08002d70 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_IPCC_TX_IRQHandler+0x98>)
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002d8a:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	43db      	mvns	r3, r3
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4013      	ands	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8002d9a:	e02c      	b.n	8002df6 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3310      	adds	r3, #16
 8002da4:	2201      	movs	r2, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01c      	beq.n	8002df0 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	3306      	adds	r3, #6
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	3306      	adds	r3, #6
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	6939      	ldr	r1, [r7, #16]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	3301      	adds	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1cf      	bne.n	8002d9c <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	58000c00 	.word	0x58000c00

08002e0c <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_IPCC_RX_IRQHandler+0x90>)
 8002e1a:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_IPCC_RX_IRQHandler+0x94>)
 8002e1e:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2a:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8002e36:	e029      	b.n	8002e8c <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01a      	beq.n	8002e86 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1d2      	bne.n	8002e38 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	58000c00 	.word	0x58000c00
 8002ea0:	58000c10 	.word	0x58000c10

08002ea4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e00f      	b.n	8002f06 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <IPCC_SetDefaultCallbacks+0x44>)
 8002ef0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3306      	adds	r3, #6
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <IPCC_SetDefaultCallbacks+0x48>)
 8002efe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d9ec      	bls.n	8002ee6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	08002ea5 	.word	0x08002ea5
 8002f20:	08002ebf 	.word	0x08002ebf

08002f24 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002f38:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	223f      	movs	r2, #63	; 0x3f
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4e:	b08b      	sub	sp, #44	; 0x2c
 8002f50:	af06      	add	r7, sp, #24
 8002f52:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0cb      	b.n	80030f6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f008 ff9c 	bl	800beb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 fa94 	bl	80074b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e040      	b.n	8003012 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3303      	adds	r3, #3
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	3338      	adds	r3, #56	; 0x38
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	333c      	adds	r3, #60	; 0x3c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	3340      	adds	r3, #64	; 0x40
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	3301      	adds	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d3b9      	bcc.n	8002f90 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e044      	b.n	80030ac <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	440b      	add	r3, r1
 800305c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	3301      	adds	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3b5      	bcc.n	8003022 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	687e      	ldr	r6, [r7, #4]
 80030be:	466d      	mov	r5, sp
 80030c0:	f106 0410 	add.w	r4, r6, #16
 80030c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	1d33      	adds	r3, r6, #4
 80030ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d0:	6838      	ldr	r0, [r7, #0]
 80030d2:	f004 fa09 	bl	80074e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f001 fc45 	bl	800497e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_PCD_Start+0x16>
 8003110:	2302      	movs	r3, #2
 8003112:	e012      	b.n	800313a <HAL_PCD_Start+0x3c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f004 f9af 	bl	8007484 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f006 fc73 	bl	8009a16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f006 fc78 	bl	8009a44 <USB_ReadInterrupts>
 8003154:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb05 	bl	8003770 <PCD_EP_ISR_Handler>

    return;
 8003166:	e110      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	b292      	uxth	r2, r2
 8003186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f008 ff33 	bl	800bff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003190:	2100      	movs	r1, #0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8fc 	bl	8003390 <HAL_PCD_SetAddress>

    return;
 8003198:	e0f7      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00c      	beq.n	80031be <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031b6:	b292      	uxth	r2, r2
 80031b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031bc:	e0e5      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031da:	b292      	uxth	r2, r2
 80031dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031e0:	e0d3      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d034      	beq.n	8003256 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	b292      	uxth	r2, r2
 8003200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0208 	bic.w	r2, r2, #8
 8003216:	b292      	uxth	r2, r2
 8003218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800322e:	2100      	movs	r1, #0
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f009 f8d7 	bl	800c3e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f008 ff16 	bl	800c068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800324e:	b292      	uxth	r2, r2
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003254:	e099      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325c:	2b00      	cmp	r3, #0
 800325e:	d027      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	b292      	uxth	r2, r2
 8003274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328a:	b292      	uxth	r2, r2
 800328c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0204 	orr.w	r2, r2, #4
 80032a2:	b292      	uxth	r2, r2
 80032a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f008 fec3 	bl	800c034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80032ae:	e06c      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d040      	beq.n	800333c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032cc:	b292      	uxth	r2, r2
 80032ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d12b      	bne.n	8003334 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0204 	orr.w	r2, r2, #4
 80032ee:	b292      	uxth	r2, r2
 80032f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0208 	orr.w	r2, r2, #8
 8003306:	b292      	uxth	r2, r2
 8003308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800331c:	b29b      	uxth	r3, r3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800332a:	2101      	movs	r1, #1
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f009 f859 	bl	800c3e4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003332:	e02a      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f008 fe7d 	bl	800c034 <HAL_PCD_SuspendCallback>
    return;
 800333a:	e026      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00f      	beq.n	8003366 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003358:	b292      	uxth	r2, r2
 800335a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f008 fe3b 	bl	800bfda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003364:	e011      	b.n	800338a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003382:	b292      	uxth	r2, r2
 8003384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003388:	bf00      	nop
  }
}
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_PCD_SetAddress+0x1a>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e013      	b.n	80033d2 <HAL_PCD_SetAddress+0x42>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f006 fb13 	bl	80099ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	70fb      	strb	r3, [r7, #3]
 80033ec:	460b      	mov	r3, r1
 80033ee:	803b      	strh	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0e      	bge.n	800341e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	705a      	strb	r2, [r3, #1]
 800341c:	e00e      	b.n	800343c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 0207 	and.w	r2, r3, #7
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003448:	883a      	ldrh	r2, [r7, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	78ba      	ldrb	r2, [r7, #2]
 8003452:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003454:	78bb      	ldrb	r3, [r7, #2]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d102      	bne.n	8003460 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_PCD_EP_Open+0x94>
 800346a:	2302      	movs	r3, #2
 800346c:	e00e      	b.n	800348c <HAL_PCD_EP_Open+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68f9      	ldr	r1, [r7, #12]
 800347c:	4618      	mov	r0, r3
 800347e:	f004 f855 	bl	800752c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800348a:	7afb      	ldrb	r3, [r7, #11]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da0e      	bge.n	80034c6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	705a      	strb	r2, [r3, #1]
 80034c4:	e00e      	b.n	80034e4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 0207 	and.w	r2, r3, #7
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_EP_Close+0x6a>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e00e      	b.n	800351c <HAL_PCD_EP_Close+0x88>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f004 fbd1 	bl	8007cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	460b      	mov	r3, r1
 8003532:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003534:	7afb      	ldrb	r3, [r7, #11]
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003564:	7afb      	ldrb	r3, [r7, #11]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	b2da      	uxtb	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fd89 	bl	800808e <USB_EPStartXfer>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 0207 	and.w	r2, r3, #7
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80035a8:	681b      	ldr	r3, [r3, #0]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	460b      	mov	r3, r1
 80035c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2201      	movs	r2, #1
 8003600:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003602:	7afb      	ldrb	r3, [r7, #11]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	b2da      	uxtb	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6979      	ldr	r1, [r7, #20]
 8003614:	4618      	mov	r0, r3
 8003616:	f004 fd3a 	bl	800808e <USB_EPStartXfer>

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 0207 	and.w	r2, r3, #7
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d901      	bls.n	8003642 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e03e      	b.n	80036c0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da0e      	bge.n	8003668 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	705a      	strb	r2, [r3, #1]
 8003666:	e00c      	b.n	8003682 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_EP_SetStall+0x7e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e00e      	b.n	80036c0 <HAL_PCD_EP_SetStall+0x9c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f006 f89d 	bl	80097f0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f003 020f 	and.w	r2, r3, #15
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d901      	bls.n	80036e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e040      	b.n	8003768 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da0e      	bge.n	800370c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	705a      	strb	r2, [r3, #1]
 800370a:	e00e      	b.n	800372a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 0207 	and.w	r2, r3, #7
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	b2da      	uxtb	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_PCD_EP_ClrStall+0x82>
 8003746:	2302      	movs	r3, #2
 8003748:	e00e      	b.n	8003768 <HAL_PCD_EP_ClrStall+0xa0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68f9      	ldr	r1, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f006 f89a 	bl	8009892 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b096      	sub	sp, #88	; 0x58
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003778:	e3b1      	b.n	8003ede <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003782:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003786:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003794:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 8173 	bne.w	8003a84 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800379e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d150      	bne.n	800384c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	81fb      	strh	r3, [r7, #14]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3328      	adds	r3, #40	; 0x28
 80037d2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	4413      	add	r3, r2
 80037ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80037fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	441a      	add	r2, r3
 8003806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003808:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800380a:	2100      	movs	r1, #0
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f008 fbca 	bl	800bfa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 835f 	beq.w	8003ede <PCD_EP_ISR_Handler+0x76e>
 8003820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 835a 	bne.w	8003ede <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003836:	b2da      	uxtb	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	b292      	uxth	r2, r2
 800383e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800384a:	e348      	b.n	8003ede <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003852:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800385e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	2b00      	cmp	r3, #0
 8003868:	d032      	beq.n	80038d0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	4413      	add	r3, r2
 8003884:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800389c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f006 f91f 	bl	8009ae8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038b6:	4013      	ands	r3, r2
 80038b8:	823b      	strh	r3, [r7, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	8a3a      	ldrh	r2, [r7, #16]
 80038c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038c4:	b292      	uxth	r2, r2
 80038c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f008 fb3f 	bl	800bf4c <HAL_PCD_SetupStageCallback>
 80038ce:	e306      	b.n	8003ede <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f280 8302 	bge.w	8003ede <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038e6:	4013      	ands	r3, r2
 80038e8:	83fb      	strh	r3, [r7, #30]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	8bfa      	ldrh	r2, [r7, #30]
 80038f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f4:	b292      	uxth	r2, r2
 80038f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003900:	b29b      	uxth	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4413      	add	r3, r2
 8003912:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800391c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d019      	beq.n	800395c <PCD_EP_ISR_Handler+0x1ec>
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003936:	6959      	ldr	r1, [r3, #20]
 8003938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003940:	b29b      	uxth	r3, r3
 8003942:	f006 f8d1 	bl	8009ae8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	441a      	add	r2, r3
 8003950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003952:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003954:	2100      	movs	r1, #0
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f008 fb0a 	bl	800bf70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003966:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800396a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 82b5 	bne.w	8003ede <PCD_EP_ISR_Handler+0x76e>
 8003974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003978:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800397c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003980:	f000 82ad 	beq.w	8003ede <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	4413      	add	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b3e      	cmp	r3, #62	; 0x3e
 80039ba:	d91d      	bls.n	80039f8 <PCD_EP_ISR_Handler+0x288>
 80039bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	647b      	str	r3, [r7, #68]	; 0x44
 80039c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <PCD_EP_ISR_Handler+0x266>
 80039d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d2:	3b01      	subs	r3, #1
 80039d4:	647b      	str	r3, [r7, #68]	; 0x44
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039de:	b29b      	uxth	r3, r3
 80039e0:	029b      	lsls	r3, r3, #10
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	801a      	strh	r2, [r3, #0]
 80039f6:	e026      	b.n	8003a46 <PCD_EP_ISR_Handler+0x2d6>
 80039f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <PCD_EP_ISR_Handler+0x2a6>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	e017      	b.n	8003a46 <PCD_EP_ISR_Handler+0x2d6>
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <PCD_EP_ISR_Handler+0x2c0>
 8003a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	827b      	strh	r3, [r7, #18]
 8003a58:	8a7b      	ldrh	r3, [r7, #18]
 8003a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a5e:	827b      	strh	r3, [r7, #18]
 8003a60:	8a7b      	ldrh	r3, [r7, #18]
 8003a62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a66:	827b      	strh	r3, [r7, #18]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	8a7b      	ldrh	r3, [r7, #18]
 8003a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	8013      	strh	r3, [r2, #0]
 8003a82:	e22c      	b.n	8003ede <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a98:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f280 80f6 	bge.w	8003c8e <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ab8:	4013      	ands	r3, r2
 8003aba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ad8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af0:	7b1b      	ldrb	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d123      	bne.n	8003b3e <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003b1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 808e 	beq.w	8003c44 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2e:	6959      	ldr	r1, [r3, #20]
 8003b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b32:	88da      	ldrh	r2, [r3, #6]
 8003b34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b38:	f005 ffd6 	bl	8009ae8 <USB_ReadPMA>
 8003b3c:	e082      	b.n	8003c44 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	78db      	ldrb	r3, [r3, #3]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d10a      	bne.n	8003b5c <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9d3 	bl	8003efa <HAL_PCD_EP_DB_Receive>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003b5a:	e073      	b.n	8003c44 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d022      	beq.n	8003c00 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bde:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003be2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02c      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	891a      	ldrh	r2, [r3, #8]
 8003bf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003bfa:	f005 ff75 	bl	8009ae8 <USB_ReadPMA>
 8003bfe:	e021      	b.n	8003c44 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c36:	6959      	ldr	r1, [r3, #20]
 8003c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3a:	895a      	ldrh	r2, [r3, #10]
 8003c3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c40:	f005 ff52 	bl	8009ae8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c4c:	441a      	add	r2, r3
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c5a:	441a      	add	r2, r3
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <PCD_EP_ISR_Handler+0x504>
 8003c68:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d206      	bcs.n	8003c82 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f008 f978 	bl	800bf70 <HAL_PCD_DataOutStageCallback>
 8003c80:	e005      	b.n	8003c8e <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f004 fa00 	bl	800808e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8121 	beq.w	8003ede <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cee:	78db      	ldrb	r3, [r3, #3]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 80a2 	bne.w	8003e3a <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfe:	7b1b      	ldrb	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8093 	beq.w	8003e2c <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d046      	beq.n	8003da0 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d126      	bne.n	8003d68 <PCD_EP_ISR_Handler+0x5f8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	4413      	add	r3, r2
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00da      	lsls	r2, r3, #3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d40:	623b      	str	r3, [r7, #32]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	e061      	b.n	8003e2c <PCD_EP_ISR_Handler+0x6bc>
 8003d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d15d      	bne.n	8003e2c <PCD_EP_ISR_Handler+0x6bc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	4413      	add	r3, r2
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	00da      	lsls	r2, r3, #3
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	e045      	b.n	8003e2c <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d126      	bne.n	8003dfc <PCD_EP_ISR_Handler+0x68c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	4413      	add	r3, r2
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	00da      	lsls	r2, r3, #3
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e017      	b.n	8003e2c <PCD_EP_ISR_Handler+0x6bc>
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d113      	bne.n	8003e2c <PCD_EP_ISR_Handler+0x6bc>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	4413      	add	r3, r2
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	00da      	lsls	r2, r3, #3
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	4413      	add	r3, r2
 8003e20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f008 f8b7 	bl	800bfa6 <HAL_PCD_DataInStageCallback>
 8003e38:	e051      	b.n	8003ede <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d144      	bne.n	8003ed0 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d907      	bls.n	8003e8a <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e82:	1ad2      	subs	r2, r2, r3
 8003e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e86:	619a      	str	r2, [r3, #24]
 8003e88:	e002      	b.n	8003e90 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f008 f881 	bl	800bfa6 <HAL_PCD_DataInStageCallback>
 8003ea4:	e01b      	b.n	8003ede <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003eae:	441a      	add	r2, r3
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ebc:	441a      	add	r2, r3
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 f8e0 	bl	800808e <USB_EPStartXfer>
 8003ece:	e006      	b.n	8003ede <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ed0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f917 	bl	800410c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	b21b      	sxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f6ff ac45 	blt.w	800377a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3758      	adds	r7, #88	; 0x58
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b088      	sub	sp, #32
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d07c      	beq.n	800400c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	8b7b      	ldrh	r3, [r7, #26]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d306      	bcc.n	8003f50 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	8b7b      	ldrh	r3, [r7, #26]
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	619a      	str	r2, [r3, #24]
 8003f4e:	e002      	b.n	8003f56 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d123      	bne.n	8003fa6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	833b      	strh	r3, [r7, #24]
 8003f7a:	8b3b      	ldrh	r3, [r7, #24]
 8003f7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f80:	833b      	strh	r3, [r7, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	441a      	add	r2, r3
 8003f90:	8b3b      	ldrh	r3, [r7, #24]
 8003f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01f      	beq.n	8003ff0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	82fb      	strh	r3, [r7, #22]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	8afb      	ldrh	r3, [r7, #22]
 8003fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ff0:	8b7b      	ldrh	r3, [r7, #26]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8085 	beq.w	8004102 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	6959      	ldr	r1, [r3, #20]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	891a      	ldrh	r2, [r3, #8]
 8004004:	8b7b      	ldrh	r3, [r7, #26]
 8004006:	f005 fd6f 	bl	8009ae8 <USB_ReadPMA>
 800400a:	e07a      	b.n	8004102 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	4413      	add	r3, r2
 8004026:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004030:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	8b7b      	ldrh	r3, [r7, #26]
 8004038:	429a      	cmp	r2, r3
 800403a:	d306      	bcc.n	800404a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	8b7b      	ldrh	r3, [r7, #26]
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	619a      	str	r2, [r3, #24]
 8004048:	e002      	b.n	8004050 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d123      	bne.n	80040a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	83fb      	strh	r3, [r7, #30]
 8004074:	8bfb      	ldrh	r3, [r7, #30]
 8004076:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800407a:	83fb      	strh	r3, [r7, #30]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	8bfb      	ldrh	r3, [r7, #30]
 800408c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	b29b      	uxth	r3, r3
 800409e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11f      	bne.n	80040ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c4:	83bb      	strh	r3, [r7, #28]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	8bbb      	ldrh	r3, [r7, #28]
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040ea:	8b7b      	ldrh	r3, [r7, #26]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6959      	ldr	r1, [r3, #20]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	895a      	ldrh	r2, [r3, #10]
 80040fc:	8b7b      	ldrh	r3, [r7, #26]
 80040fe:	f005 fcf3 	bl	8009ae8 <USB_ReadPMA>
    }
  }

  return count;
 8004102:	8b7b      	ldrh	r3, [r7, #26]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b0a4      	sub	sp, #144	; 0x90
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	4613      	mov	r3, r2
 8004118:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 81db 	beq.w	80044dc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	4413      	add	r3, r2
 8004140:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004156:	429a      	cmp	r2, r3
 8004158:	d907      	bls.n	800416a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	619a      	str	r2, [r3, #24]
 8004168:	e002      	b.n	8004170 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 80b9 	bne.w	80042ec <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d126      	bne.n	80041d0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004190:	b29b      	uxth	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	4413      	add	r3, r2
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	00da      	lsls	r2, r3, #3
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	4413      	add	r3, r2
 80041a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e01a      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0xfa>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d116      	bne.n	8004206 <HAL_PCD_EP_DB_Transmit+0xfa>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ec:	4413      	add	r3, r2
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	00da      	lsls	r2, r3, #3
 80041f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f8:	4413      	add	r3, r2
 80041fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	2200      	movs	r2, #0
 8004204:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d126      	bne.n	8004262 <HAL_PCD_EP_DB_Transmit+0x156>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004222:	b29b      	uxth	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	00da      	lsls	r2, r3, #3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004246:	b29a      	uxth	r2, r3
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425a:	b29a      	uxth	r2, r3
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	e017      	b.n	8004292 <HAL_PCD_EP_DB_Transmit+0x186>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	785b      	ldrb	r3, [r3, #1]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d113      	bne.n	8004292 <HAL_PCD_EP_DB_Transmit+0x186>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004272:	b29b      	uxth	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	4413      	add	r3, r2
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	00da      	lsls	r2, r3, #3
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	4413      	add	r3, r2
 8004286:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800428a:	623b      	str	r3, [r7, #32]
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	2200      	movs	r2, #0
 8004290:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f007 fe84 	bl	800bfa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 82fa 	beq.w	800489e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c4:	82fb      	strh	r3, [r7, #22]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	8013      	strh	r3, [r2, #0]
 80042ea:	e2d8      	b.n	800489e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d021      	beq.n	800433a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004310:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	b29b      	uxth	r3, r3
 8004338:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004340:	2b01      	cmp	r3, #1
 8004342:	f040 82ac 	bne.w	800489e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800434e:	441a      	add	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800435c:	441a      	add	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d30b      	bcc.n	8004386 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800437e:	1ad2      	subs	r2, r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	621a      	str	r2, [r3, #32]
 8004384:	e017      	b.n	80043b6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d108      	bne.n	80043a0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800438e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800439e:	e00a      	b.n	80043b6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d165      	bne.n	800448a <HAL_PCD_EP_DB_Transmit+0x37e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d2:	4413      	add	r3, r2
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043de:	4413      	add	r3, r2
 80043e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043fa:	2b3e      	cmp	r3, #62	; 0x3e
 80043fc:	d91d      	bls.n	800443a <HAL_PCD_EP_DB_Transmit+0x32e>
 80043fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
 8004406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004414:	3b01      	subs	r3, #1
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29a      	uxth	r2, r3
 800441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004420:	b29b      	uxth	r3, r3
 8004422:	029b      	lsls	r3, r3, #10
 8004424:	b29b      	uxth	r3, r3
 8004426:	4313      	orrs	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004432:	b29a      	uxth	r2, r3
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	e044      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800443a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004450:	b29a      	uxth	r2, r3
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	e035      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_PCD_EP_DB_Transmit+0x366>
 800446c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446e:	3301      	adds	r3, #1
 8004470:	64bb      	str	r3, [r7, #72]	; 0x48
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447a:	b29b      	uxth	r3, r3
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	b29b      	uxth	r3, r3
 8004480:	4313      	orrs	r3, r2
 8004482:	b29a      	uxth	r2, r3
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	e01c      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d118      	bne.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a6:	4413      	add	r3, r2
 80044a8:	647b      	str	r3, [r7, #68]	; 0x44
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	00da      	lsls	r2, r3, #3
 80044b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b2:	4413      	add	r3, r2
 80044b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6959      	ldr	r1, [r3, #20]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	891a      	ldrh	r2, [r3, #8]
 80044d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f005 fac5 	bl	8009a64 <USB_WritePMA>
 80044da:	e1e0      	b.n	800489e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	4413      	add	r3, r2
 80044f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004500:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800450c:	429a      	cmp	r2, r3
 800450e:	d307      	bcc.n	8004520 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004518:	1ad2      	subs	r2, r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	619a      	str	r2, [r3, #24]
 800451e:	e002      	b.n	8004526 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2200      	movs	r2, #0
 8004524:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 80c0 	bne.w	80046b0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d126      	bne.n	8004586 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800454c:	4413      	add	r3, r2
 800454e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	00da      	lsls	r2, r3, #3
 8004556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004558:	4413      	add	r3, r2
 800455a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800455e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800456a:	b29a      	uxth	r2, r3
 800456c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457e:	b29a      	uxth	r2, r3
 8004580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e01a      	b.n	80045bc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d116      	bne.n	80045bc <HAL_PCD_EP_DB_Transmit+0x4b0>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	667b      	str	r3, [r7, #100]	; 0x64
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a2:	4413      	add	r3, r2
 80045a4:	667b      	str	r3, [r7, #100]	; 0x64
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	00da      	lsls	r2, r3, #3
 80045ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045b4:	663b      	str	r3, [r7, #96]	; 0x60
 80045b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b8:	2200      	movs	r2, #0
 80045ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	677b      	str	r3, [r7, #116]	; 0x74
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	785b      	ldrb	r3, [r3, #1]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d12b      	bne.n	8004622 <HAL_PCD_EP_DB_Transmit+0x516>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d8:	b29b      	uxth	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	4413      	add	r3, r2
 80045e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	00da      	lsls	r2, r3, #3
 80045e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ea:	4413      	add	r3, r2
 80045ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004600:	b29a      	uxth	r2, r3
 8004602:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004618:	b29a      	uxth	r2, r3
 800461a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	e017      	b.n	8004652 <HAL_PCD_EP_DB_Transmit+0x546>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d113      	bne.n	8004652 <HAL_PCD_EP_DB_Transmit+0x546>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004632:	b29b      	uxth	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004638:	4413      	add	r3, r2
 800463a:	677b      	str	r3, [r7, #116]	; 0x74
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	00da      	lsls	r2, r3, #3
 8004642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004644:	4413      	add	r3, r2
 8004646:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800464a:	673b      	str	r3, [r7, #112]	; 0x70
 800464c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800464e:	2200      	movs	r2, #0
 8004650:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f007 fca4 	bl	800bfa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 811a 	bne.w	800489e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004684:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800469a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8013      	strh	r3, [r2, #0]
 80046ae:	e0f6      	b.n	800489e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046b0:	88fb      	ldrh	r3, [r7, #6]
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d121      	bne.n	80046fe <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004704:	2b01      	cmp	r3, #1
 8004706:	f040 80ca 	bne.w	800489e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004712:	441a      	add	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004720:	441a      	add	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	429a      	cmp	r2, r3
 8004730:	d30b      	bcc.n	800474a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	621a      	str	r2, [r3, #32]
 8004748:	e017      	b.n	800477a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004752:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004762:	e00a      	b.n	800477a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	657b      	str	r3, [r7, #84]	; 0x54
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d165      	bne.n	8004854 <HAL_PCD_EP_DB_Transmit+0x748>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479c:	4413      	add	r3, r2
 800479e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	00da      	lsls	r2, r3, #3
 80047a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a8:	4413      	add	r3, r2
 80047aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80047b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047c4:	2b3e      	cmp	r3, #62	; 0x3e
 80047c6:	d91d      	bls.n	8004804 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80047c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80047dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047de:	3b01      	subs	r3, #1
 80047e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	029b      	lsls	r3, r3, #10
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4313      	orrs	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	e041      	b.n	8004888 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_PCD_EP_DB_Transmit+0x716>
 800480c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481a:	b29a      	uxth	r2, r3
 800481c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	e032      	b.n	8004888 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	66bb      	str	r3, [r7, #104]	; 0x68
 800482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_PCD_EP_DB_Transmit+0x730>
 8004836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004838:	3301      	adds	r3, #1
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
 800483c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29a      	uxth	r2, r3
 8004842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004844:	b29b      	uxth	r3, r3
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	b29b      	uxth	r3, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e019      	b.n	8004888 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d115      	bne.n	8004888 <HAL_PCD_EP_DB_Transmit+0x77c>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004864:	b29b      	uxth	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486a:	4413      	add	r3, r2
 800486c:	657b      	str	r3, [r7, #84]	; 0x54
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	00da      	lsls	r2, r3, #3
 8004874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004876:	4413      	add	r3, r2
 8004878:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800487c:	653b      	str	r3, [r7, #80]	; 0x50
 800487e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004882:	b29a      	uxth	r2, r3
 8004884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004886:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6959      	ldr	r1, [r3, #20]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	895a      	ldrh	r2, [r3, #10]
 8004894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004898:	b29b      	uxth	r3, r3
 800489a:	f005 f8e3 	bl	8009a64 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b8:	82bb      	strh	r3, [r7, #20]
 80048ba:	8abb      	ldrh	r3, [r7, #20]
 80048bc:	f083 0310 	eor.w	r3, r3, #16
 80048c0:	82bb      	strh	r3, [r7, #20]
 80048c2:	8abb      	ldrh	r3, [r7, #20]
 80048c4:	f083 0320 	eor.w	r3, r3, #32
 80048c8:	82bb      	strh	r3, [r7, #20]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8abb      	ldrh	r3, [r7, #20]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3790      	adds	r7, #144	; 0x90
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	817b      	strh	r3, [r7, #10]
 8004906:	4613      	mov	r3, r2
 8004908:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800490a:	897b      	ldrh	r3, [r7, #10]
 800490c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e009      	b.n	8004942 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800492e:	897a      	ldrh	r2, [r7, #10]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004942:	893b      	ldrh	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	b29a      	uxth	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	80da      	strh	r2, [r3, #6]
 8004956:	e00b      	b.n	8004970 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2201      	movs	r2, #1
 800495c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	b29a      	uxth	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	b29a      	uxth	r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e2:	6013      	str	r3, [r2, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	58000400 	.word	0x58000400

080049f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <HAL_PWREx_GetVoltageRange+0x18>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	58000400 	.word	0x58000400

08004a10 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a1e:	6053      	str	r3, [r2, #4]
}
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	58000400 	.word	0x58000400

08004a30 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a42:	d101      	bne.n	8004a48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_HSE_Enable>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_RCC_HSE_Disable>:
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_RCC_HSE_IsReady>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa2:	d101      	bne.n	8004aa8 <LL_RCC_HSE_IsReady+0x18>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <LL_RCC_HSE_IsReady+0x1a>
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_RCC_HSI_Enable>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac6:	6013      	str	r3, [r2, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_RCC_HSI_Disable>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae4:	6013      	str	r3, [r2, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_RCC_HSI_IsReady>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b02:	d101      	bne.n	8004b08 <LL_RCC_HSI_IsReady+0x18>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <LL_RCC_HSI_IsReady+0x1a>
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	604b      	str	r3, [r1, #4]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_RCC_HSI48_Enable>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_RCC_HSI48_Disable>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_HSI48_IsReady>:
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d101      	bne.n	8004b9a <LL_RCC_HSI48_IsReady+0x18>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <LL_RCC_HSI48_IsReady+0x1a>
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_RCC_LSE_Enable>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_LSE_Disable>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_RCC_LSE_EnableBypass>:
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfa:	f043 0304 	orr.w	r3, r3, #4
 8004bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c02:	bf00      	nop
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_LSE_DisableBypass>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_RCC_LSE_IsReady>:
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d101      	bne.n	8004c46 <LL_RCC_LSE_IsReady+0x18>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <LL_RCC_LSE_IsReady+0x1a>
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_LSI1_Enable>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_RCC_LSI1_Disable>:
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_RCC_LSI1_IsReady>:
{
 8004c96:	b480      	push	{r7}
 8004c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d101      	bne.n	8004cae <LL_RCC_LSI1_IsReady+0x18>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <LL_RCC_LSI1_IsReady+0x1a>
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_RCC_LSI2_Enable>:
{
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cca:	f043 0304 	orr.w	r3, r3, #4
 8004cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_RCC_LSI2_Disable>:
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cec:	f023 0304 	bic.w	r3, r3, #4
 8004cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <LL_RCC_LSI2_IsReady>:
{
 8004cfe:	b480      	push	{r7}
 8004d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d101      	bne.n	8004d16 <LL_RCC_LSI2_IsReady+0x18>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <LL_RCC_LSI2_IsReady+0x1a>
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_LSI2_SetTrimming>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <LL_RCC_MSI_Enable>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6013      	str	r3, [r2, #0]
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <LL_RCC_MSI_Disable>:
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	6013      	str	r3, [r2, #0]
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_MSI_IsReady>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d101      	bne.n	8004da2 <LL_RCC_MSI_IsReady+0x16>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <LL_RCC_MSI_IsReady+0x18>
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_RCC_MSI_SetRange>:
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_RCC_MSI_GetRange>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2bb0      	cmp	r3, #176	; 0xb0
 8004dec:	d901      	bls.n	8004df2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004dee:	23b0      	movs	r3, #176	; 0xb0
 8004df0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004df2:	687b      	ldr	r3, [r7, #4]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_RCC_SetSysClkSource>:
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 0203 	bic.w	r2, r3, #3
 8004e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_RCC_GetSysClkSource>:
{
 8004e52:	b480      	push	{r7}
 8004e54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_RCC_SetAHBPrescaler>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_RCC_SetAHB4Prescaler>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ece:	f023 020f 	bic.w	r2, r3, #15
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_RCC_SetAPB1Prescaler>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <LL_RCC_SetAPB2Prescaler>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <LL_RCC_GetAHBPrescaler>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_RCC_GetAHB4Prescaler>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_RCC_GetAPB1Prescaler>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_RCC_GetAPB2Prescaler>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	6013      	str	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fee:	d101      	bne.n	8004ff4 <LL_RCC_PLL_IsReady+0x18>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <LL_RCC_PLL_IsReady+0x1a>
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800504a:	b480      	push	{r7}
 800504c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0303 	and.w	r3, r3, #3
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005062:	b480      	push	{r7}
 8005064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d101      	bne.n	800507a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800508a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800509a:	d101      	bne.n	80050a0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d101      	bne.n	80050c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e4:	d101      	bne.n	80050ea <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005104:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005108:	d101      	bne.n	800510e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b08d      	sub	sp, #52	; 0x34
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e363      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 808d 	beq.w	8005256 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513c:	f7ff fe89 	bl	8004e52 <LL_RCC_GetSysClkSource>
 8005140:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005142:	f7ff ff82 	bl	800504a <LL_RCC_PLL_GetMainSource>
 8005146:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_RCC_OscConfig+0x3e>
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d147      	bne.n	80051e4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	2b01      	cmp	r3, #1
 8005158:	d144      	bne.n	80051e4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e347      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800516a:	f7ff fe34 	bl	8004dd6 <LL_RCC_MSI_GetRange>
 800516e:	4603      	mov	r3, r0
 8005170:	429c      	cmp	r4, r3
 8005172:	d914      	bls.n	800519e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fd2f 	bl	8005bdc <RCC_SetFlashLatencyFromMSIRange>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e336      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fe0e 	bl	8004dae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fe32 	bl	8004e00 <LL_RCC_MSI_SetCalibTrimming>
 800519c:	e013      	b.n	80051c6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fe03 	bl	8004dae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fe27 	bl	8004e00 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd10 	bl	8005bdc <RCC_SetFlashLatencyFromMSIRange>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e317      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80051c6:	f000 fcc9 	bl	8005b5c <HAL_RCC_GetHCLKFreq>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4aa4      	ldr	r2, [pc, #656]	; (8005460 <HAL_RCC_OscConfig+0x344>)
 80051ce:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051d0:	4ba4      	ldr	r3, [pc, #656]	; (8005464 <HAL_RCC_OscConfig+0x348>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fc f88b 	bl	80012f0 <HAL_InitTick>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d039      	beq.n	8005254 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e308      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01e      	beq.n	800522a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051ec:	f7ff fdb0 	bl	8004d50 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051f0:	f7fc f8cc 	bl	800138c <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051f8:	f7fc f8c8 	bl	800138c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e2f5      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800520a:	f7ff fdbf 	bl	8004d8c <LL_RCC_MSI_IsReady>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f1      	beq.n	80051f8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fdc8 	bl	8004dae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fdec 	bl	8004e00 <LL_RCC_MSI_SetCalibTrimming>
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800522a:	f7ff fda0 	bl	8004d6e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800522e:	f7fc f8ad 	bl	800138c <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005236:	f7fc f8a9 	bl	800138c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e2d6      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005248:	f7ff fda0 	bl	8004d8c <LL_RCC_MSI_IsReady>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f1      	bne.n	8005236 <HAL_RCC_OscConfig+0x11a>
 8005252:	e000      	b.n	8005256 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005254:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d047      	beq.n	80052f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005262:	f7ff fdf6 	bl	8004e52 <LL_RCC_GetSysClkSource>
 8005266:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005268:	f7ff feef 	bl	800504a <LL_RCC_PLL_GetMainSource>
 800526c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2b08      	cmp	r3, #8
 8005272:	d005      	beq.n	8005280 <HAL_RCC_OscConfig+0x164>
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d108      	bne.n	800528c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d105      	bne.n	800528c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d134      	bne.n	80052f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e2b4      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d102      	bne.n	800529c <HAL_RCC_OscConfig+0x180>
 8005296:	f7ff fbdd 	bl	8004a54 <LL_RCC_HSE_Enable>
 800529a:	e001      	b.n	80052a0 <HAL_RCC_OscConfig+0x184>
 800529c:	f7ff fbe9 	bl	8004a72 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fc f870 	bl	800138c <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fc f86c 	bl	800138c <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e299      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80052c2:	f7ff fbe5 	bl	8004a90 <LL_RCC_HSE_IsReady>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f1      	beq.n	80052b0 <HAL_RCC_OscConfig+0x194>
 80052cc:	e011      	b.n	80052f2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ce:	f7fc f85d 	bl	800138c <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d6:	f7fc f859 	bl	800138c <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b64      	cmp	r3, #100	; 0x64
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e286      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80052e8:	f7ff fbd2 	bl	8004a90 <LL_RCC_HSE_IsReady>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f1      	bne.n	80052d6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d04c      	beq.n	8005398 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fe:	f7ff fda8 	bl	8004e52 <LL_RCC_GetSysClkSource>
 8005302:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005304:	f7ff fea1 	bl	800504a <LL_RCC_PLL_GetMainSource>
 8005308:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d005      	beq.n	800531c <HAL_RCC_OscConfig+0x200>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d10e      	bne.n	8005334 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d10b      	bne.n	8005334 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e266      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff fbf1 	bl	8004b14 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005332:	e031      	b.n	8005398 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d019      	beq.n	8005370 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800533c:	f7ff fbba 	bl	8004ab4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fc f824 	bl	800138c <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005348:	f7fc f820 	bl	800138c <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e24d      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800535a:	f7ff fbc9 	bl	8004af0 <LL_RCC_HSI_IsReady>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f1      	beq.n	8005348 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fbd3 	bl	8004b14 <LL_RCC_HSI_SetCalibTrimming>
 800536e:	e013      	b.n	8005398 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005370:	f7ff fbaf 	bl	8004ad2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fc f80a 	bl	800138c <HAL_GetTick>
 8005378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800537c:	f7fc f806 	bl	800138c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e233      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800538e:	f7ff fbaf 	bl	8004af0 <LL_RCC_HSI_IsReady>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f1      	bne.n	800537c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80a3 	beq.w	80054f8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d076      	beq.n	80054a8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d046      	beq.n	8005454 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80053c6:	f7ff fc66 	bl	8004c96 <LL_RCC_LSI1_IsReady>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d113      	bne.n	80053f8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80053d0:	f7ff fc3f 	bl	8004c52 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053d4:	f7fb ffda 	bl	800138c <HAL_GetTick>
 80053d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053dc:	f7fb ffd6 	bl	800138c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e203      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80053ee:	f7ff fc52 	bl	8004c96 <LL_RCC_LSI1_IsReady>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f1      	beq.n	80053dc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80053f8:	f7ff fc5f 	bl	8004cba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fb ffc6 	bl	800138c <HAL_GetTick>
 8005400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005404:	f7fb ffc2 	bl	800138c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b03      	cmp	r3, #3
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e1ef      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005416:	f7ff fc72 	bl	8004cfe <LL_RCC_LSI2_IsReady>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f1      	beq.n	8005404 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fc7c 	bl	8004d22 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800542a:	f7ff fc23 	bl	8004c74 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fb ffad 	bl	800138c <HAL_GetTick>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005436:	f7fb ffa9 	bl	800138c <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e1d6      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005448:	f7ff fc25 	bl	8004c96 <LL_RCC_LSI1_IsReady>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f1      	bne.n	8005436 <HAL_RCC_OscConfig+0x31a>
 8005452:	e051      	b.n	80054f8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005454:	f7ff fbfd 	bl	8004c52 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fb ff98 	bl	800138c <HAL_GetTick>
 800545c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800545e:	e00c      	b.n	800547a <HAL_RCC_OscConfig+0x35e>
 8005460:	20000008 	.word	0x20000008
 8005464:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005468:	f7fb ff90 	bl	800138c <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1bd      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800547a:	f7ff fc0c 	bl	8004c96 <LL_RCC_LSI1_IsReady>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f1      	beq.n	8005468 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005484:	f7ff fc2a 	bl	8004cdc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800548a:	f7fb ff7f 	bl	800138c <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b03      	cmp	r3, #3
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e1ac      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800549c:	f7ff fc2f 	bl	8004cfe <LL_RCC_LSI2_IsReady>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f1      	bne.n	800548a <HAL_RCC_OscConfig+0x36e>
 80054a6:	e027      	b.n	80054f8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80054a8:	f7ff fc18 	bl	8004cdc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fb ff6e 	bl	800138c <HAL_GetTick>
 80054b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80054b4:	f7fb ff6a 	bl	800138c <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e197      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80054c6:	f7ff fc1a 	bl	8004cfe <LL_RCC_LSI2_IsReady>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f1      	bne.n	80054b4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80054d0:	f7ff fbd0 	bl	8004c74 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7fb ff5a 	bl	800138c <HAL_GetTick>
 80054d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054dc:	f7fb ff56 	bl	800138c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e183      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80054ee:	f7ff fbd2 	bl	8004c96 <LL_RCC_LSI1_IsReady>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f1      	bne.n	80054dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05b      	beq.n	80055bc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005504:	4ba7      	ldr	r3, [pc, #668]	; (80057a4 <HAL_RCC_OscConfig+0x688>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d114      	bne.n	800553a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005510:	f7ff fa60 	bl	80049d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005514:	f7fb ff3a 	bl	800138c <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551c:	f7fb ff36 	bl	800138c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e163      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800552e:	4b9d      	ldr	r3, [pc, #628]	; (80057a4 <HAL_RCC_OscConfig+0x688>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <HAL_RCC_OscConfig+0x42c>
 8005542:	f7ff fb30 	bl	8004ba6 <LL_RCC_LSE_Enable>
 8005546:	e00c      	b.n	8005562 <HAL_RCC_OscConfig+0x446>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b05      	cmp	r3, #5
 800554e:	d104      	bne.n	800555a <HAL_RCC_OscConfig+0x43e>
 8005550:	f7ff fb4b 	bl	8004bea <LL_RCC_LSE_EnableBypass>
 8005554:	f7ff fb27 	bl	8004ba6 <LL_RCC_LSE_Enable>
 8005558:	e003      	b.n	8005562 <HAL_RCC_OscConfig+0x446>
 800555a:	f7ff fb35 	bl	8004bc8 <LL_RCC_LSE_Disable>
 800555e:	f7ff fb55 	bl	8004c0c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d014      	beq.n	8005594 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fb ff0f 	bl	800138c <HAL_GetTick>
 800556e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005570:	e00a      	b.n	8005588 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005572:	f7fb ff0b 	bl	800138c <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005580:	4293      	cmp	r3, r2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e136      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005588:	f7ff fb51 	bl	8004c2e <LL_RCC_LSE_IsReady>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ef      	beq.n	8005572 <HAL_RCC_OscConfig+0x456>
 8005592:	e013      	b.n	80055bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fb fefa 	bl	800138c <HAL_GetTick>
 8005598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fb fef6 	bl	800138c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e121      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80055b2:	f7ff fb3c 	bl	8004c2e <LL_RCC_LSE_IsReady>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ef      	bne.n	800559c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02c      	beq.n	8005622 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d014      	beq.n	80055fa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d0:	f7ff fab5 	bl	8004b3e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d4:	f7fb feda 	bl	800138c <HAL_GetTick>
 80055d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055dc:	f7fb fed6 	bl	800138c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e103      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80055ee:	f7ff fac8 	bl	8004b82 <LL_RCC_HSI48_IsReady>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f1      	beq.n	80055dc <HAL_RCC_OscConfig+0x4c0>
 80055f8:	e013      	b.n	8005622 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055fa:	f7ff fab1 	bl	8004b60 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7fb fec5 	bl	800138c <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005606:	f7fb fec1 	bl	800138c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e0ee      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005618:	f7ff fab3 	bl	8004b82 <LL_RCC_HSI48_IsReady>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f1      	bne.n	8005606 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80e4 	beq.w	80057f4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562c:	f7ff fc11 	bl	8004e52 <LL_RCC_GetSysClkSource>
 8005630:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	2b02      	cmp	r3, #2
 8005640:	f040 80b4 	bne.w	80057ac <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0203 	and.w	r2, r3, #3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	429a      	cmp	r2, r3
 8005650:	d123      	bne.n	800569a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d11c      	bne.n	800569a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d114      	bne.n	800569a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d10d      	bne.n	800569a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d05d      	beq.n	8005756 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	d058      	beq.n	8005752 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e0a1      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056b2:	f7ff fc84 	bl	8004fbe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056b6:	f7fb fe69 	bl	800138c <HAL_GetTick>
 80056ba:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056be:	f7fb fe65 	bl	800138c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e092      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ef      	bne.n	80056be <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <HAL_RCC_OscConfig+0x68c>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056f0:	4311      	orrs	r1, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056f6:	0212      	lsls	r2, r2, #8
 80056f8:	4311      	orrs	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056fe:	4311      	orrs	r1, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005704:	4311      	orrs	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800570a:	430a      	orrs	r2, r1
 800570c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005710:	4313      	orrs	r3, r2
 8005712:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005714:	f7ff fc44 	bl	8004fa0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005728:	f7fb fe30 	bl	800138c <HAL_GetTick>
 800572c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005730:	f7fb fe2c 	bl	800138c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e059      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0ef      	beq.n	8005730 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005750:	e050      	b.n	80057f4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e04f      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d147      	bne.n	80057f4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005764:	f7ff fc1c 	bl	8004fa0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005778:	f7fb fe08 	bl	800138c <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fb fe04 	bl	800138c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e031      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ef      	beq.n	8005780 <HAL_RCC_OscConfig+0x664>
 80057a0:	e028      	b.n	80057f4 <HAL_RCC_OscConfig+0x6d8>
 80057a2:	bf00      	nop
 80057a4:	58000400 	.word	0x58000400
 80057a8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	d01e      	beq.n	80057f0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b2:	f7ff fc04 	bl	8004fbe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b6:	f7fb fde9 	bl	800138c <HAL_GetTick>
 80057ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057be:	f7fb fde5 	bl	800138c <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e012      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ef      	bne.n	80057be <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_OscConfig+0x6e4>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	60cb      	str	r3, [r1, #12]
 80057ee:	e001      	b.n	80057f4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3734      	adds	r7, #52	; 0x34
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd90      	pop	{r4, r7, pc}
 80057fe:	bf00      	nop
 8005800:	eefefffc 	.word	0xeefefffc

08005804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e12d      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005818:	4b98      	ldr	r3, [pc, #608]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d91b      	bls.n	800585e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005826:	4b95      	ldr	r3, [pc, #596]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0207 	bic.w	r2, r3, #7
 800582e:	4993      	ldr	r1, [pc, #588]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005836:	f7fb fda9 	bl	800138c <HAL_GetTick>
 800583a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583c:	e008      	b.n	8005850 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800583e:	f7fb fda5 	bl	800138c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e111      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005850:	4b8a      	ldr	r3, [pc, #552]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d1ef      	bne.n	800583e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d016      	beq.n	8005898 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fafb 	bl	8004e6a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005874:	f7fb fd8a 	bl	800138c <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800587c:	f7fb fd86 	bl	800138c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0f2      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800588e:	f7ff fbe8 	bl	8005062 <LL_RCC_IsActiveFlag_HPRE>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f1      	beq.n	800587c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d016      	beq.n	80058d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff faf2 	bl	8004e92 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058ae:	f7fb fd6d 	bl	800138c <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058b6:	f7fb fd69 	bl	800138c <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e0d5      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80058c8:	f7ff fbdd 	bl	8005086 <LL_RCC_IsActiveFlag_C2HPRE>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f1      	beq.n	80058b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff faeb 	bl	8004ebe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058e8:	f7fb fd50 	bl	800138c <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058f0:	f7fb fd4c 	bl	800138c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0b8      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005902:	f7ff fbd3 	bl	80050ac <LL_RCC_IsActiveFlag_SHDHPRE>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f1      	beq.n	80058f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d016      	beq.n	8005946 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff fae5 	bl	8004eec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005922:	f7fb fd33 	bl	800138c <HAL_GetTick>
 8005926:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800592a:	f7fb fd2f 	bl	800138c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e09b      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800593c:	f7ff fbc9 	bl	80050d2 <LL_RCC_IsActiveFlag_PPRE1>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f1      	beq.n	800592a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fadb 	bl	8004f14 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800595e:	f7fb fd15 	bl	800138c <HAL_GetTick>
 8005962:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005966:	f7fb fd11 	bl	800138c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e07d      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005978:	f7ff fbbd 	bl	80050f6 <LL_RCC_IsActiveFlag_PPRE2>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f1      	beq.n	8005966 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d043      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d106      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005996:	f7ff f87b 	bl	8004a90 <LL_RCC_HSE_IsReady>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11e      	bne.n	80059de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e067      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80059ac:	f7ff fb16 	bl	8004fdc <LL_RCC_PLL_IsReady>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d113      	bne.n	80059de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e05c      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80059c2:	f7ff f9e3 	bl	8004d8c <LL_RCC_MSI_IsReady>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e051      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80059d0:	f7ff f88e 	bl	8004af0 <LL_RCC_HSI_IsReady>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e04a      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fa21 	bl	8004e2a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e8:	f7fb fcd0 	bl	800138c <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f0:	f7fb fccc 	bl	800138c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e036      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a06:	f7ff fa24 	bl	8004e52 <LL_RCC_GetSysClkSource>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d1ec      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a16:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d21b      	bcs.n	8005a5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a24:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f023 0207 	bic.w	r2, r3, #7
 8005a2c:	4913      	ldr	r1, [pc, #76]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a34:	f7fb fcaa 	bl	800138c <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a3c:	f7fb fca6 	bl	800138c <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e012      	b.n	8005a74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_ClockConfig+0x278>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1ef      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005a5c:	f000 f87e 	bl	8005b5c <HAL_RCC_GetHCLKFreq>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4a07      	ldr	r2, [pc, #28]	; (8005a80 <HAL_RCC_ClockConfig+0x27c>)
 8005a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005a66:	f7fb fc9d 	bl	80013a4 <HAL_GetTickPrio>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fb fc3f 	bl	80012f0 <HAL_InitTick>
 8005a72:	4603      	mov	r3, r0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	58004000 	.word	0x58004000
 8005a80:	20000008 	.word	0x20000008

08005a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a8a:	f7ff f9e2 	bl	8004e52 <LL_RCC_GetSysClkSource>
 8005a8e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a96:	f7ff f99e 	bl	8004dd6 <LL_RCC_MSI_GetRange>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	4a2b      	ldr	r2, [pc, #172]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e04b      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d102      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ab2:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e045      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d10a      	bne.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005abe:	f7fe ffb7 	bl	8004a30 <LL_RCC_HSE_IsEnabledDiv2>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d102      	bne.n	8005ace <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005ac8:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e03a      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005ace:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e037      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005ad4:	f7ff fab9 	bl	800504a <LL_RCC_PLL_GetMainSource>
 8005ad8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d003      	beq.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x64>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d003      	beq.n	8005aee <HAL_RCC_GetSysClockFreq+0x6a>
 8005ae6:	e00d      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005aea:	60bb      	str	r3, [r7, #8]
        break;
 8005aec:	e015      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005aee:	f7fe ff9f 	bl	8004a30 <LL_RCC_HSE_IsEnabledDiv2>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d102      	bne.n	8005afe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005af8:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005afa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005afc:	e00d      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005afe:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005b00:	60bb      	str	r3, [r7, #8]
        break;
 8005b02:	e00a      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b04:	f7ff f967 	bl	8004dd6 <LL_RCC_MSI_GetRange>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	091b      	lsrs	r3, r3, #4
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	4a0f      	ldr	r2, [pc, #60]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b16:	60bb      	str	r3, [r7, #8]
        break;
 8005b18:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005b1a:	f7ff fa71 	bl	8005000 <LL_RCC_PLL_GetN>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	fb03 f402 	mul.w	r4, r3, r2
 8005b26:	f7ff fa84 	bl	8005032 <LL_RCC_PLL_GetDivider>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	3301      	adds	r3, #1
 8005b30:	fbb4 f4f3 	udiv	r4, r4, r3
 8005b34:	f7ff fa71 	bl	800501a <LL_RCC_PLL_GetR>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	0f5b      	lsrs	r3, r3, #29
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005b42:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005b44:	68fb      	ldr	r3, [r7, #12]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	0801412c 	.word	0x0801412c
 8005b54:	00f42400 	.word	0x00f42400
 8005b58:	01e84800 	.word	0x01e84800

08005b5c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b5c:	b598      	push	{r3, r4, r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005b60:	f7ff ff90 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005b64:	4604      	mov	r4, r0
 8005b66:	f7ff f9e9 	bl	8004f3c <LL_RCC_GetAHBPrescaler>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	4a03      	ldr	r2, [pc, #12]	; (8005b80 <HAL_RCC_GetHCLKFreq+0x24>)
 8005b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b78:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd98      	pop	{r3, r4, r7, pc}
 8005b80:	080140cc 	.word	0x080140cc

08005b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b84:	b598      	push	{r3, r4, r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005b88:	f7ff ffe8 	bl	8005b5c <HAL_RCC_GetHCLKFreq>
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	f7ff f9ef 	bl	8004f70 <LL_RCC_GetAPB1Prescaler>
 8005b92:	4603      	mov	r3, r0
 8005b94:	0a1b      	lsrs	r3, r3, #8
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	4a04      	ldr	r2, [pc, #16]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd98      	pop	{r3, r4, r7, pc}
 8005bac:	0801410c 	.word	0x0801410c

08005bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb0:	b598      	push	{r3, r4, r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005bb4:	f7ff ffd2 	bl	8005b5c <HAL_RCC_GetHCLKFreq>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	f7ff f9e5 	bl	8004f88 <LL_RCC_GetAPB2Prescaler>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	0adb      	lsrs	r3, r3, #11
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd98      	pop	{r3, r4, r7, pc}
 8005bd8:	0801410c 	.word	0x0801410c

08005bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2bb0      	cmp	r3, #176	; 0xb0
 8005be8:	d903      	bls.n	8005bf2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e007      	b.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	091b      	lsrs	r3, r3, #4
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	4a11      	ldr	r2, [pc, #68]	; (8005c40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005c02:	f7ff f9a7 	bl	8004f54 <LL_RCC_GetAHB4Prescaler>
 8005c06:	4603      	mov	r3, r0
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005c20:	fba2 2303 	umull	r2, r3, r2, r3
 8005c24:	0c9c      	lsrs	r4, r3, #18
 8005c26:	f7fe fee5 	bl	80049f4 <HAL_PWREx_GetVoltageRange>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 f80c 	bl	8005c4c <RCC_SetFlashLatency>
 8005c34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd90      	pop	{r4, r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	0801412c 	.word	0x0801412c
 8005c44:	080140cc 	.word	0x080140cc
 8005c48:	431bde83 	.word	0x431bde83

08005c4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b093      	sub	sp, #76	; 0x4c
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005c56:	4b37      	ldr	r3, [pc, #220]	; (8005d34 <RCC_SetFlashLatency+0xe8>)
 8005c58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005c62:	4a35      	ldr	r2, [pc, #212]	; (8005d38 <RCC_SetFlashLatency+0xec>)
 8005c64:	f107 031c 	add.w	r3, r7, #28
 8005c68:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005c6e:	4b33      	ldr	r3, [pc, #204]	; (8005d3c <RCC_SetFlashLatency+0xf0>)
 8005c70:	f107 040c 	add.w	r4, r7, #12
 8005c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c84:	d11a      	bne.n	8005cbc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c86:	2300      	movs	r3, #0
 8005c88:	643b      	str	r3, [r7, #64]	; 0x40
 8005c8a:	e013      	b.n	8005cb4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	3348      	adds	r3, #72	; 0x48
 8005c92:	443b      	add	r3, r7
 8005c94:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d807      	bhi.n	8005cae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	3348      	adds	r3, #72	; 0x48
 8005ca4:	443b      	add	r3, r7
 8005ca6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005caa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005cac:	e020      	b.n	8005cf0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d9e8      	bls.n	8005c8c <RCC_SetFlashLatency+0x40>
 8005cba:	e019      	b.n	8005cf0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc0:	e013      	b.n	8005cea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	3348      	adds	r3, #72	; 0x48
 8005cc8:	443b      	add	r3, r7
 8005cca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d807      	bhi.n	8005ce4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	3348      	adds	r3, #72	; 0x48
 8005cda:	443b      	add	r3, r7
 8005cdc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ce0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005ce2:	e005      	b.n	8005cf0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d9e8      	bls.n	8005cc2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005cf0:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <RCC_SetFlashLatency+0xf4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f023 0207 	bic.w	r2, r3, #7
 8005cf8:	4911      	ldr	r1, [pc, #68]	; (8005d40 <RCC_SetFlashLatency+0xf4>)
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d00:	f7fb fb44 	bl	800138c <HAL_GetTick>
 8005d04:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005d06:	e008      	b.n	8005d1a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d08:	f7fb fb40 	bl	800138c <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e007      	b.n	8005d2a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <RCC_SetFlashLatency+0xf4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d1ef      	bne.n	8005d08 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	374c      	adds	r7, #76	; 0x4c
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08014048 	.word	0x08014048
 8005d38:	08014058 	.word	0x08014058
 8005d3c:	08014064 	.word	0x08014064
 8005d40:	58004000 	.word	0x58004000

08005d44 <LL_RCC_LSE_IsEnabled>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <LL_RCC_LSE_IsEnabled+0x18>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <LL_RCC_LSE_IsEnabled+0x1a>
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <LL_RCC_LSE_IsReady>:
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d101      	bne.n	8005d80 <LL_RCC_LSE_IsReady+0x18>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <LL_RCC_LSE_IsReady+0x1a>
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_RCC_SetRFWKPClockSource>:
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <LL_RCC_SetSMPSClockSource>:
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	f023 0203 	bic.w	r2, r3, #3
 8005dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <LL_RCC_SetSMPSPrescaler>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_SetUSARTClockSource>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e18:	f023 0203 	bic.w	r2, r3, #3
 8005e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_RCC_SetLPUARTClockSource>:
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <LL_RCC_SetI2CClockSource>:
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <LL_RCC_SetLPTIMClockSource>:
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <LL_RCC_SetSAIClockSource>:
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <LL_RCC_SetRNGClockSource>:
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <LL_RCC_SetCLK48ClockSource>:
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <LL_RCC_SetUSBClockSource>:
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff ffe3 	bl	8005f26 <LL_RCC_SetCLK48ClockSource>
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <LL_RCC_SetADCClockSource>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <LL_RCC_SetRTCClockSource>:
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_RCC_GetRTCClockSource>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_ForceBackupDomainReset>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ff2:	bf00      	nop
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800600c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <LL_RCC_PLLSAI1_Enable>:
{
 800601e:	b480      	push	{r7}
 8006020:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800602c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006030:	6013      	str	r3, [r2, #0]
}
 8006032:	bf00      	nop
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_RCC_PLLSAI1_Disable>:
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800604a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800604e:	6013      	str	r3, [r2, #0]
}
 8006050:	bf00      	nop
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <LL_RCC_PLLSAI1_IsReady>:
{
 800605a:	b480      	push	{r7}
 800605c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800605e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800606c:	d101      	bne.n	8006072 <LL_RCC_PLLSAI1_IsReady+0x18>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b088      	sub	sp, #32
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006086:	2300      	movs	r3, #0
 8006088:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800608a:	2300      	movs	r3, #0
 800608c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d034      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060a2:	d021      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80060a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060a8:	d81b      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ae:	d01d      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80060b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060b4:	d815      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80060ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060be:	d110      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ce:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80060d0:	e00d      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f947 	bl	800636a <RCCEx_PLLSAI1_ConfigNP>
 80060dc:	4603      	mov	r3, r0
 80060de:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80060e0:	e005      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	77fb      	strb	r3, [r7, #31]
        break;
 80060e6:	e002      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80060e8:	bf00      	nop
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80060ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ee:	7ffb      	ldrb	r3, [r7, #31]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fee8 	bl	8005ece <LL_RCC_SetSAIClockSource>
 80060fe:	e001      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	7ffb      	ldrb	r3, [r7, #31]
 8006102:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610c:	2b00      	cmp	r3, #0
 800610e:	d046      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006110:	f7ff ff56 	bl	8005fc0 <LL_RCC_GetRTCClockSource>
 8006114:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	429a      	cmp	r2, r3
 800611e:	d03c      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006120:	f7fe fc58 	bl	80049d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff ff30 	bl	8005f94 <LL_RCC_SetRTCClockSource>
 8006134:	e02e      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006140:	f7ff ff4b 	bl	8005fda <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006144:	f7ff ff5a 	bl	8005ffc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006160:	f7ff fdf0 	bl	8005d44 <LL_RCC_LSE_IsEnabled>
 8006164:	4603      	mov	r3, r0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d114      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800616a:	f7fb f90f 	bl	800138c <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006170:	e00b      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006172:	f7fb f90b 	bl	800138c <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006180:	4293      	cmp	r3, r2
 8006182:	d902      	bls.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	77fb      	strb	r3, [r7, #31]
              break;
 8006188:	e004      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800618a:	f7ff fded 	bl	8005d68 <LL_RCC_LSE_IsReady>
 800618e:	4603      	mov	r3, r0
 8006190:	2b01      	cmp	r3, #1
 8006192:	d1ee      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006194:	7ffb      	ldrb	r3, [r7, #31]
 8006196:	77bb      	strb	r3, [r7, #30]
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7ffb      	ldrb	r3, [r7, #31]
 800619c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d004      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fe2a 	bl	8005e08 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d004      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fe35 	bl	8005e34 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fe5d 	bl	8005e9a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fe52 	bl	8005e9a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff fe2a 	bl	8005e60 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fe1f 	bl	8005e60 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	2b00      	cmp	r3, #0
 800622c:	d022      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fe8d 	bl	8005f52 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006240:	d107      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800624c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006250:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800625a:	d10b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f8dd 	bl	8006420 <RCCEx_PLLSAI1_ConfigNQ>
 8006266:	4603      	mov	r3, r0
 8006268:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800626a:	7ffb      	ldrb	r3, [r7, #31]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006270:	7ffb      	ldrb	r3, [r7, #31]
 8006272:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02b      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006288:	d008      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006292:	d003      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fe2a 	bl	8005efa <LL_RCC_SetRNGClockSource>
 80062a6:	e00a      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x240>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	2000      	movs	r0, #0
 80062b4:	f7ff fe21 	bl	8005efa <LL_RCC_SetRNGClockSource>
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7ff fe34 	bl	8005f26 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80062c6:	d107      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80062c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d022      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fe3d 	bl	8005f68 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006306:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006310:	d10b      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f8dd 	bl	80064d6 <RCCEx_PLLSAI1_ConfigNR>
 800631c:	4603      	mov	r3, r0
 800631e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006320:	7ffb      	ldrb	r3, [r7, #31]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006326:	7ffb      	ldrb	r3, [r7, #31]
 8006328:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fd26 	bl	8005d8c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fd45 	bl	8005de0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fd2c 	bl	8005db8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006360:	7fbb      	ldrb	r3, [r7, #30]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006376:	f7ff fe61 	bl	800603c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800637a:	f7fb f807 	bl	800138c <HAL_GetTick>
 800637e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006380:	e009      	b.n	8006396 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006382:	f7fb f803 	bl	800138c <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d902      	bls.n	8006396 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	73fb      	strb	r3, [r7, #15]
      break;
 8006394:	e004      	b.n	80063a0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006396:	f7ff fe60 	bl	800605a <LL_RCC_PLLSAI1_IsReady>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d137      	bne.n	8006416 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80063a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ba:	4313      	orrs	r3, r2
 80063bc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d0:	4313      	orrs	r3, r2
 80063d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063d4:	f7ff fe23 	bl	800601e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d8:	f7fa ffd8 	bl	800138c <HAL_GetTick>
 80063dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063de:	e009      	b.n	80063f4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063e0:	f7fa ffd4 	bl	800138c <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d902      	bls.n	80063f4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	73fb      	strb	r3, [r7, #15]
        break;
 80063f2:	e004      	b.n	80063fe <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063f4:	f7ff fe31 	bl	800605a <LL_RCC_PLLSAI1_IsReady>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d1f0      	bne.n	80063e0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d108      	bne.n	8006416 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006412:	4313      	orrs	r3, r2
 8006414:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800642c:	f7ff fe06 	bl	800603c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006430:	f7fa ffac 	bl	800138c <HAL_GetTick>
 8006434:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006436:	e009      	b.n	800644c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006438:	f7fa ffa8 	bl	800138c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d902      	bls.n	800644c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	73fb      	strb	r3, [r7, #15]
      break;
 800644a:	e004      	b.n	8006456 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800644c:	f7ff fe05 	bl	800605a <LL_RCC_PLLSAI1_IsReady>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d137      	bne.n	80064cc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800645c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006470:	4313      	orrs	r3, r2
 8006472:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006486:	4313      	orrs	r3, r2
 8006488:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800648a:	f7ff fdc8 	bl	800601e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648e:	f7fa ff7d 	bl	800138c <HAL_GetTick>
 8006492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006494:	e009      	b.n	80064aa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006496:	f7fa ff79 	bl	800138c <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d902      	bls.n	80064aa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	73fb      	strb	r3, [r7, #15]
        break;
 80064a8:	e004      	b.n	80064b4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064aa:	f7ff fdd6 	bl	800605a <LL_RCC_PLLSAI1_IsReady>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d1f0      	bne.n	8006496 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d108      	bne.n	80064cc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80064ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c8:	4313      	orrs	r3, r2
 80064ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80064e2:	f7ff fdab 	bl	800603c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064e6:	f7fa ff51 	bl	800138c <HAL_GetTick>
 80064ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064ec:	e009      	b.n	8006502 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064ee:	f7fa ff4d 	bl	800138c <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d902      	bls.n	8006502 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006500:	e004      	b.n	800650c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006502:	f7ff fdaa 	bl	800605a <LL_RCC_PLLSAI1_IsReady>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f0      	bne.n	80064ee <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d137      	bne.n	8006582 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006526:	4313      	orrs	r3, r2
 8006528:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800652a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800653c:	4313      	orrs	r3, r2
 800653e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006540:	f7ff fd6d 	bl	800601e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006544:	f7fa ff22 	bl	800138c <HAL_GetTick>
 8006548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800654a:	e009      	b.n	8006560 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800654c:	f7fa ff1e 	bl	800138c <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d902      	bls.n	8006560 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	73fb      	strb	r3, [r7, #15]
        break;
 800655e:	e004      	b.n	800656a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006560:	f7ff fd7b 	bl	800605a <LL_RCC_PLLSAI1_IsReady>
 8006564:	4603      	mov	r3, r0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d1f0      	bne.n	800654c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d108      	bne.n	8006582 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800657e:	4313      	orrs	r3, r2
 8006580:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e027      	b.n	80065ee <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	7a5b      	ldrb	r3, [r3, #9]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fa fc9c 	bl	8000eec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 0120 	bic.w	r1, r3, #32
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0204 	orr.w	r2, r2, #4
 80065de:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	7a1b      	ldrb	r3, [r3, #8]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_RNG_GenerateRandomNumber+0x1a>
 800660c:	2302      	movs	r3, #2
 800660e:	e044      	b.n	800669a <HAL_RNG_GenerateRandomNumber+0xa4>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7a5b      	ldrb	r3, [r3, #9]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d133      	bne.n	8006688 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006626:	f7fa feb1 	bl	800138c <HAL_GetTick>
 800662a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800662c:	e018      	b.n	8006660 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800662e:	f7fa fead 	bl	800138c <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d911      	bls.n	8006660 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b01      	cmp	r3, #1
 8006648:	d00a      	beq.n	8006660 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e01c      	b.n	800669a <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d1df      	bne.n	800662e <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	725a      	strb	r2, [r3, #9]
 8006686:	e004      	b.n	8006692 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2204      	movs	r2, #4
 800668c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	721a      	strb	r2, [r3, #8]

  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e09f      	b.n	80067f6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fa fc38 	bl	8000f40 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80066d8:	4b49      	ldr	r3, [pc, #292]	; (8006800 <HAL_RTC_Init+0x15c>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d07e      	beq.n	80067e2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	22ca      	movs	r2, #202	; 0xca
 80066ea:	625a      	str	r2, [r3, #36]	; 0x24
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2253      	movs	r2, #83	; 0x53
 80066f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f8ab 	bl	8006850 <RTC_EnterInitMode>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	22ff      	movs	r2, #255	; 0xff
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2204      	movs	r2, #4
 800670c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
 8006714:	e067      	b.n	80067e6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006728:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6899      	ldr	r1, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68d2      	ldr	r2, [r2, #12]
 8006750:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6919      	ldr	r1, [r3, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	041a      	lsls	r2, r3, #16
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006774:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0203 	bic.w	r2, r2, #3
 8006784:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d113      	bne.n	80067d4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f829 	bl	8006804 <HAL_RTC_WaitForSynchro>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00d      	beq.n	80067d4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	22ff      	movs	r2, #255	; 0xff
 80067be:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2204      	movs	r2, #4
 80067c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e010      	b.n	80067f6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	22ff      	movs	r2, #255	; 0xff
 80067da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
 80067e0:	e001      	b.n	80067e6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d103      	bne.n	80067f4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40002800 	.word	0x40002800

08006804 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800681a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800681c:	f7fa fdb6 	bl	800138c <HAL_GetTick>
 8006820:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006822:	e009      	b.n	8006838 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006824:	f7fa fdb2 	bl	800138c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006832:	d901      	bls.n	8006838 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e007      	b.n	8006848 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0ee      	beq.n	8006824 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d119      	bne.n	800689a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006870:	f7fa fd8c 	bl	800138c <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006876:	e009      	b.n	800688c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006878:	f7fa fd88 	bl	800138c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006886:	d901      	bls.n	800688c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e007      	b.n	800689c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0ee      	beq.n	8006878 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e089      	b.n	80069d2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	22ca      	movs	r2, #202	; 0xca
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2253      	movs	r2, #83	; 0x53
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d020      	beq.n	800692e <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80068ec:	f7fa fd4e 	bl	800138c <HAL_GetTick>
 80068f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80068f2:	e015      	b.n	8006920 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068f4:	f7fa fd4a 	bl	800138c <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006902:	d90d      	bls.n	8006920 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	22ff      	movs	r2, #255	; 0xff
 800690a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2203      	movs	r2, #3
 8006910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e058      	b.n	80069d2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e2      	bne.n	80068f4 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800693e:	f7fa fd25 	bl	800138c <HAL_GetTick>
 8006942:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006944:	e015      	b.n	8006972 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006946:	f7fa fd21 	bl	800138c <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006954:	d90d      	bls.n	8006972 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	22ff      	movs	r2, #255	; 0xff
 800695c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2203      	movs	r2, #3
 8006962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e02f      	b.n	80069d2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0e2      	beq.n	8006946 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0207 	bic.w	r2, r2, #7
 800698e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	430a      	orrs	r2, r1
 800699e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069b6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	22ff      	movs	r2, #255	; 0xff
 80069be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <LL_RCC_GetUSARTClockSource>:
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80069e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4013      	ands	r3, r2
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <LL_RCC_GetLPUARTClockSource>:
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4013      	ands	r3, r2
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e042      	b.n	8006ab2 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fa faaa 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2224      	movs	r2, #36	; 0x24
 8006a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f82d 	bl	8006abc <UART_SetConfig>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e022      	b.n	8006ab2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fa49 	bl	8006f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fad0 	bl	8007050 <UART_CheckIdleState>
 8006ab0:	4603      	mov	r3, r0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ac0:	b08c      	sub	sp, #48	; 0x30
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4baf      	ldr	r3, [pc, #700]	; (8006da8 <UART_SetConfig+0x2ec>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4aa4      	ldr	r2, [pc, #656]	; (8006dac <UART_SetConfig+0x2f0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b24:	4313      	orrs	r3, r2
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	f023 010f 	bic.w	r1, r3, #15
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a95      	ldr	r2, [pc, #596]	; (8006db0 <UART_SetConfig+0x2f4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d125      	bne.n	8006bac <UART_SetConfig+0xf0>
 8006b60:	2003      	movs	r0, #3
 8006b62:	f7ff ff3a 	bl	80069da <LL_RCC_GetUSARTClockSource>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d81b      	bhi.n	8006ba4 <UART_SetConfig+0xe8>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0xb8>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	08006b8d 	.word	0x08006b8d
 8006b80:	08006b9d 	.word	0x08006b9d
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	e042      	b.n	8006c12 <UART_SetConfig+0x156>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b92:	e03e      	b.n	8006c12 <UART_SetConfig+0x156>
 8006b94:	2304      	movs	r3, #4
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9a:	e03a      	b.n	8006c12 <UART_SetConfig+0x156>
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba2:	e036      	b.n	8006c12 <UART_SetConfig+0x156>
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006baa:	e032      	b.n	8006c12 <UART_SetConfig+0x156>
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a7e      	ldr	r2, [pc, #504]	; (8006dac <UART_SetConfig+0x2f0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d12a      	bne.n	8006c0c <UART_SetConfig+0x150>
 8006bb6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006bba:	f7ff ff1e 	bl	80069fa <LL_RCC_GetLPUARTClockSource>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bc4:	d01a      	beq.n	8006bfc <UART_SetConfig+0x140>
 8006bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bca:	d81b      	bhi.n	8006c04 <UART_SetConfig+0x148>
 8006bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd0:	d00c      	beq.n	8006bec <UART_SetConfig+0x130>
 8006bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd6:	d815      	bhi.n	8006c04 <UART_SetConfig+0x148>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <UART_SetConfig+0x128>
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d008      	beq.n	8006bf4 <UART_SetConfig+0x138>
 8006be2:	e00f      	b.n	8006c04 <UART_SetConfig+0x148>
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bea:	e012      	b.n	8006c12 <UART_SetConfig+0x156>
 8006bec:	2302      	movs	r3, #2
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	e00e      	b.n	8006c12 <UART_SetConfig+0x156>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e00a      	b.n	8006c12 <UART_SetConfig+0x156>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e006      	b.n	8006c12 <UART_SetConfig+0x156>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e002      	b.n	8006c12 <UART_SetConfig+0x156>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a65      	ldr	r2, [pc, #404]	; (8006dac <UART_SetConfig+0x2f0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f040 8097 	bne.w	8006d4c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d823      	bhi.n	8006c6e <UART_SetConfig+0x1b2>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x170>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c6f 	.word	0x08006c6f
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c6f 	.word	0x08006c6f
 8006c3c:	08006c5f 	.word	0x08006c5f
 8006c40:	08006c6f 	.word	0x08006c6f
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c6f 	.word	0x08006c6f
 8006c4c:	08006c67 	.word	0x08006c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fe ff98 	bl	8005b84 <HAL_RCC_GetPCLK1Freq>
 8006c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c56:	e010      	b.n	8006c7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c58:	4b56      	ldr	r3, [pc, #344]	; (8006db4 <UART_SetConfig+0x2f8>)
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c5c:	e00d      	b.n	8006c7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5e:	f7fe ff11 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c64:	e009      	b.n	8006c7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c6c:	e005      	b.n	8006c7a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 812b 	beq.w	8006ed8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	4a4c      	ldr	r2, [pc, #304]	; (8006db8 <UART_SetConfig+0x2fc>)
 8006c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	4413      	add	r3, r2
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d305      	bcc.n	8006cb2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d903      	bls.n	8006cba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cb8:	e10e      	b.n	8006ed8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	60fa      	str	r2, [r7, #12]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	4a3c      	ldr	r2, [pc, #240]	; (8006db8 <UART_SetConfig+0x2fc>)
 8006cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2200      	movs	r2, #0
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cdc:	f7f9 faa8 	bl	8000230 <__aeabi_uldivmod>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	020b      	lsls	r3, r1, #8
 8006cf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cf6:	0202      	lsls	r2, r0, #8
 8006cf8:	6979      	ldr	r1, [r7, #20]
 8006cfa:	6849      	ldr	r1, [r1, #4]
 8006cfc:	0849      	lsrs	r1, r1, #1
 8006cfe:	2000      	movs	r0, #0
 8006d00:	460c      	mov	r4, r1
 8006d02:	4605      	mov	r5, r0
 8006d04:	eb12 0804 	adds.w	r8, r2, r4
 8006d08:	eb43 0905 	adc.w	r9, r3, r5
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	469a      	mov	sl, r3
 8006d14:	4693      	mov	fp, r2
 8006d16:	4652      	mov	r2, sl
 8006d18:	465b      	mov	r3, fp
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f7f9 fa87 	bl	8000230 <__aeabi_uldivmod>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4613      	mov	r3, r2
 8006d28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d30:	d308      	bcc.n	8006d44 <UART_SetConfig+0x288>
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d38:	d204      	bcs.n	8006d44 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6a3a      	ldr	r2, [r7, #32]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e0c9      	b.n	8006ed8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d4a:	e0c5      	b.n	8006ed8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d54:	d16d      	bne.n	8006e32 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2b07      	cmp	r3, #7
 8006d5e:	d82d      	bhi.n	8006dbc <UART_SetConfig+0x300>
 8006d60:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x2ac>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006d89 	.word	0x08006d89
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006dbd 	.word	0x08006dbd
 8006d74:	08006d97 	.word	0x08006d97
 8006d78:	08006dbd 	.word	0x08006dbd
 8006d7c:	08006dbd 	.word	0x08006dbd
 8006d80:	08006dbd 	.word	0x08006dbd
 8006d84:	08006d9f 	.word	0x08006d9f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d88:	f7fe ff12 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
 8006d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d8e:	e01b      	b.n	8006dc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d90:	4b08      	ldr	r3, [pc, #32]	; (8006db4 <UART_SetConfig+0x2f8>)
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d94:	e018      	b.n	8006dc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d96:	f7fe fe75 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d9c:	e014      	b.n	8006dc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006da4:	e010      	b.n	8006dc8 <UART_SetConfig+0x30c>
 8006da6:	bf00      	nop
 8006da8:	cfff69f3 	.word	0xcfff69f3
 8006dac:	40008000 	.word	0x40008000
 8006db0:	40013800 	.word	0x40013800
 8006db4:	00f42400 	.word	0x00f42400
 8006db8:	0801416c 	.word	0x0801416c
      default:
        pclk = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8084 	beq.w	8006ed8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	4a4b      	ldr	r2, [pc, #300]	; (8006f04 <UART_SetConfig+0x448>)
 8006dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8006de2:	005a      	lsls	r2, r3, #1
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	441a      	add	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	2b0f      	cmp	r3, #15
 8006dfa:	d916      	bls.n	8006e2a <UART_SetConfig+0x36e>
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e02:	d212      	bcs.n	8006e2a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f023 030f 	bic.w	r3, r3, #15
 8006e0c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	8bfb      	ldrh	r3, [r7, #30]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	8bfa      	ldrh	r2, [r7, #30]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	e056      	b.n	8006ed8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e30:	e052      	b.n	8006ed8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e36:	3b01      	subs	r3, #1
 8006e38:	2b07      	cmp	r3, #7
 8006e3a:	d822      	bhi.n	8006e82 <UART_SetConfig+0x3c6>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x388>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e65 	.word	0x08006e65
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e83 	.word	0x08006e83
 8006e50:	08006e73 	.word	0x08006e73
 8006e54:	08006e83 	.word	0x08006e83
 8006e58:	08006e83 	.word	0x08006e83
 8006e5c:	08006e83 	.word	0x08006e83
 8006e60:	08006e7b 	.word	0x08006e7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e64:	f7fe fea4 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
 8006e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6a:	e010      	b.n	8006e8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e6c:	4b26      	ldr	r3, [pc, #152]	; (8006f08 <UART_SetConfig+0x44c>)
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e70:	e00d      	b.n	8006e8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e72:	f7fe fe07 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e78:	e009      	b.n	8006e8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e80:	e005      	b.n	8006e8e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d021      	beq.n	8006ed8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	4a1a      	ldr	r2, [pc, #104]	; (8006f04 <UART_SetConfig+0x448>)
 8006e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	441a      	add	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d909      	bls.n	8006ed2 <UART_SetConfig+0x416>
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec4:	d205      	bcs.n	8006ed2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	e002      	b.n	8006ed8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006ef4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3730      	adds	r7, #48	; 0x30
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	0801416c 	.word	0x0801416c
 8006f08:	00f42400 	.word	0x00f42400

08006f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01a      	beq.n	8007022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800700a:	d10a      	bne.n	8007022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	605a      	str	r2, [r3, #4]
  }
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af02      	add	r7, sp, #8
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007060:	f7fa f994 	bl	800138c <HAL_GetTick>
 8007064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d10e      	bne.n	8007092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f832 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e028      	b.n	80070e4 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b04      	cmp	r3, #4
 800709e:	d10e      	bne.n	80070be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f81c 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e012      	b.n	80070e4 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b09c      	sub	sp, #112	; 0x70
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fc:	e0a9      	b.n	8007252 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	f000 80a5 	beq.w	8007252 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007108:	f7fa f940 	bl	800138c <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <UART_WaitOnFlagUntilTimeout+0x32>
 8007118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711a:	2b00      	cmp	r3, #0
 800711c:	d140      	bne.n	80071a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800712c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007132:	667b      	str	r3, [r7, #100]	; 0x64
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800713c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800713e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800714a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e6      	bne.n	800711e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	663b      	str	r3, [r7, #96]	; 0x60
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007170:	64ba      	str	r2, [r7, #72]	; 0x48
 8007172:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800717e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e5      	bne.n	8007150 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2220      	movs	r2, #32
 8007190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e069      	b.n	8007274 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d051      	beq.n	8007252 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071bc:	d149      	bne.n	8007252 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
 80071e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e6      	bne.n	80071c8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	66bb      	str	r3, [r7, #104]	; 0x68
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3308      	adds	r3, #8
 8007218:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800721a:	623a      	str	r2, [r7, #32]
 800721c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	69f9      	ldr	r1, [r7, #28]
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	61bb      	str	r3, [r7, #24]
   return(result);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e5      	bne.n	80071fa <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e010      	b.n	8007274 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4013      	ands	r3, r2
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	bf0c      	ite	eq
 8007262:	2301      	moveq	r3, #1
 8007264:	2300      	movne	r3, #0
 8007266:	b2db      	uxtb	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	429a      	cmp	r2, r3
 800726e:	f43f af46 	beq.w	80070fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3770      	adds	r7, #112	; 0x70
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_UARTEx_DisableFifoMode+0x16>
 800728e:	2302      	movs	r3, #2
 8007290:	e027      	b.n	80072e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2224      	movs	r2, #36	; 0x24
 800729e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0201 	bic.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007302:	2302      	movs	r3, #2
 8007304:	e02d      	b.n	8007362 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2224      	movs	r2, #36	; 0x24
 8007312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0201 	bic.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f850 	bl	80073e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800737e:	2302      	movs	r3, #2
 8007380:	e02d      	b.n	80073de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2224      	movs	r2, #36	; 0x24
 800738e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f812 	bl	80073e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d108      	bne.n	800740a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007408:	e031      	b.n	800746e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800740a:	2308      	movs	r3, #8
 800740c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800740e:	2308      	movs	r3, #8
 8007410:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	0e5b      	lsrs	r3, r3, #25
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	0f5b      	lsrs	r3, r3, #29
 800742a:	b2db      	uxtb	r3, r3
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	7b3a      	ldrb	r2, [r7, #12]
 8007436:	4911      	ldr	r1, [pc, #68]	; (800747c <UARTEx_SetNbDataToProcess+0x94>)
 8007438:	5c8a      	ldrb	r2, [r1, r2]
 800743a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800743e:	7b3a      	ldrb	r2, [r7, #12]
 8007440:	490f      	ldr	r1, [pc, #60]	; (8007480 <UARTEx_SetNbDataToProcess+0x98>)
 8007442:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007444:	fb93 f3f2 	sdiv	r3, r3, r2
 8007448:	b29a      	uxth	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	7b7a      	ldrb	r2, [r7, #13]
 8007454:	4909      	ldr	r1, [pc, #36]	; (800747c <UARTEx_SetNbDataToProcess+0x94>)
 8007456:	5c8a      	ldrb	r2, [r1, r2]
 8007458:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800745c:	7b7a      	ldrb	r2, [r7, #13]
 800745e:	4908      	ldr	r1, [pc, #32]	; (8007480 <UARTEx_SetNbDataToProcess+0x98>)
 8007460:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007462:	fb93 f3f2 	sdiv	r3, r3, r2
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	08014184 	.word	0x08014184
 8007480:	0801418c 	.word	0x0801418c

08007484 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007494:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007498:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074ba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80074be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4013      	ands	r3, r2
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074e8:	b084      	sub	sp, #16
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	f107 0014 	add.w	r0, r7, #20
 80074f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	b004      	add	sp, #16
 8007528:	4770      	bx	lr
	...

0800752c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800752c:	b480      	push	{r7}
 800752e:	b09d      	sub	sp, #116	; 0x74
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d81f      	bhi.n	800759e <USB_ActivateEndpoint+0x72>
 800755e:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <USB_ActivateEndpoint+0x38>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007575 	.word	0x08007575
 8007568:	08007591 	.word	0x08007591
 800756c:	080075a7 	.word	0x080075a7
 8007570:	08007583 	.word	0x08007583
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800757c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007580:	e012      	b.n	80075a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007582:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007586:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800758a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800758e:	e00b      	b.n	80075a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007590:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007598:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800759c:	e004      	b.n	80075a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80075a4:	e000      	b.n	80075a8 <USB_ActivateEndpoint+0x7c>
      break;
 80075a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	441a      	add	r2, r3
 80075b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80075b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	b21b      	sxth	r3, r3
 80075da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	b21a      	sxth	r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b21b      	sxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b21b      	sxth	r3, r3
 80075ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	441a      	add	r2, r3
 80075fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007610:	b29b      	uxth	r3, r3
 8007612:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	7b1b      	ldrb	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 8178 	bne.w	800790e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8084 	beq.w	8007730 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007632:	b29b      	uxth	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	4413      	add	r3, r2
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	00da      	lsls	r2, r3, #3
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	88db      	ldrh	r3, [r3, #6]
 8007650:	085b      	lsrs	r3, r3, #1
 8007652:	b29b      	uxth	r3, r3
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	827b      	strh	r3, [r7, #18]
 800766a:	8a7b      	ldrh	r3, [r7, #18]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01b      	beq.n	80076ac <USB_ActivateEndpoint+0x180>
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768a:	823b      	strh	r3, [r7, #16]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	8a3b      	ldrh	r3, [r7, #16]
 8007698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800769c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	78db      	ldrb	r3, [r3, #3]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d020      	beq.n	80076f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ca:	81bb      	strh	r3, [r7, #12]
 80076cc:	89bb      	ldrh	r3, [r7, #12]
 80076ce:	f083 0320 	eor.w	r3, r3, #32
 80076d2:	81bb      	strh	r3, [r7, #12]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	89bb      	ldrh	r3, [r7, #12]
 80076e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	8013      	strh	r3, [r2, #0]
 80076f4:	e2d5      	b.n	8007ca2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770c:	81fb      	strh	r3, [r7, #14]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	441a      	add	r2, r3
 8007718:	89fb      	ldrh	r3, [r7, #14]
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]
 800772e:	e2b8      	b.n	8007ca2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	633b      	str	r3, [r7, #48]	; 0x30
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773a:	b29b      	uxth	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	4413      	add	r3, r2
 8007742:	633b      	str	r3, [r7, #48]	; 0x30
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	00da      	lsls	r2, r3, #3
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	4413      	add	r3, r2
 800774e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	88db      	ldrh	r3, [r3, #6]
 8007758:	085b      	lsrs	r3, r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776e:	b29b      	uxth	r3, r3
 8007770:	461a      	mov	r2, r3
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	4413      	add	r3, r2
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	00da      	lsls	r2, r3, #3
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	4413      	add	r3, r2
 8007782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007792:	b29a      	uxth	r2, r3
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b3e      	cmp	r3, #62	; 0x3e
 800779e:	d91d      	bls.n	80077dc <USB_ActivateEndpoint+0x2b0>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <USB_ActivateEndpoint+0x28e>
 80077b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077b6:	3b01      	subs	r3, #1
 80077b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	029b      	lsls	r3, r3, #10
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4313      	orrs	r3, r2
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	e026      	b.n	800782a <USB_ActivateEndpoint+0x2fe>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <USB_ActivateEndpoint+0x2ce>
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	801a      	strh	r2, [r3, #0]
 80077f8:	e017      	b.n	800782a <USB_ActivateEndpoint+0x2fe>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	66bb      	str	r3, [r7, #104]	; 0x68
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <USB_ActivateEndpoint+0x2e8>
 800780e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007810:	3301      	adds	r3, #1
 8007812:	66bb      	str	r3, [r7, #104]	; 0x68
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29a      	uxth	r2, r3
 800781a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800781c:	b29b      	uxth	r3, r3
 800781e:	029b      	lsls	r3, r3, #10
 8007820:	b29b      	uxth	r3, r3
 8007822:	4313      	orrs	r3, r2
 8007824:	b29a      	uxth	r2, r3
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	847b      	strh	r3, [r7, #34]	; 0x22
 8007838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800783a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01b      	beq.n	800787a <USB_ActivateEndpoint+0x34e>
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
 8007850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007858:	843b      	strh	r3, [r7, #32]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	441a      	add	r2, r3
 8007864:	8c3b      	ldrh	r3, [r7, #32]
 8007866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007876:	b29b      	uxth	r3, r3
 8007878:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d124      	bne.n	80078cc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	83bb      	strh	r3, [r7, #28]
 800789a:	8bbb      	ldrh	r3, [r7, #28]
 800789c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078a0:	83bb      	strh	r3, [r7, #28]
 80078a2:	8bbb      	ldrh	r3, [r7, #28]
 80078a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078a8:	83bb      	strh	r3, [r7, #28]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	8bbb      	ldrh	r3, [r7, #28]
 80078b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	8013      	strh	r3, [r2, #0]
 80078ca:	e1ea      	b.n	8007ca2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e2:	83fb      	strh	r3, [r7, #30]
 80078e4:	8bfb      	ldrh	r3, [r7, #30]
 80078e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078ea:	83fb      	strh	r3, [r7, #30]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	441a      	add	r2, r3
 80078f6:	8bfb      	ldrh	r3, [r7, #30]
 80078f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007908:	b29b      	uxth	r3, r3
 800790a:	8013      	strh	r3, [r2, #0]
 800790c:	e1c9      	b.n	8007ca2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	78db      	ldrb	r3, [r3, #3]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d11e      	bne.n	8007954 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	441a      	add	r2, r3
 800793a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800793e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007946:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800794a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794e:	b29b      	uxth	r3, r3
 8007950:	8013      	strh	r3, [r2, #0]
 8007952:	e01d      	b.n	8007990 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	441a      	add	r2, r3
 8007978:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799a:	b29b      	uxth	r3, r3
 800799c:	461a      	mov	r2, r3
 800799e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a0:	4413      	add	r3, r2
 80079a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	00da      	lsls	r2, r3, #3
 80079aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	891b      	ldrh	r3, [r3, #8]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	657b      	str	r3, [r7, #84]	; 0x54
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d4:	4413      	add	r3, r2
 80079d6:	657b      	str	r3, [r7, #84]	; 0x54
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	00da      	lsls	r2, r3, #3
 80079de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e0:	4413      	add	r3, r2
 80079e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079e6:	653b      	str	r3, [r7, #80]	; 0x50
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	895b      	ldrh	r3, [r3, #10]
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8093 	bne.w	8007b28 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d01b      	beq.n	8007a56 <USB_ActivateEndpoint+0x52a>
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007a64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01b      	beq.n	8007aa6 <USB_ActivateEndpoint+0x57a>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abc:	873b      	strh	r3, [r7, #56]	; 0x38
 8007abe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ac0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ac4:	873b      	strh	r3, [r7, #56]	; 0x38
 8007ac6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ac8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007acc:	873b      	strh	r3, [r7, #56]	; 0x38
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8013      	strh	r3, [r2, #0]
 8007b26:	e0bc      	b.n	8007ca2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01d      	beq.n	8007b80 <USB_ActivateEndpoint+0x654>
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01d      	beq.n	8007bd8 <USB_ActivateEndpoint+0x6ac>
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	441a      	add	r2, r3
 8007bc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	78db      	ldrb	r3, [r3, #3]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d024      	beq.n	8007c2a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007bfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007bfe:	f083 0320 	eor.w	r3, r3, #32
 8007c02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	8013      	strh	r3, [r2, #0]
 8007c28:	e01d      	b.n	8007c66 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	441a      	add	r2, r3
 8007c4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007ca2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3774      	adds	r7, #116	; 0x74
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop

08007cb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b08d      	sub	sp, #52	; 0x34
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	7b1b      	ldrb	r3, [r3, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f040 808e 	bne.w	8007de4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d044      	beq.n	8007d5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	81bb      	strh	r3, [r7, #12]
 8007cde:	89bb      	ldrh	r3, [r7, #12]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01b      	beq.n	8007d20 <USB_DeactivateEndpoint+0x6c>
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfe:	817b      	strh	r3, [r7, #10]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	441a      	add	r2, r3
 8007d0a:	897b      	ldrh	r3, [r7, #10]
 8007d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d36:	813b      	strh	r3, [r7, #8]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	441a      	add	r2, r3
 8007d42:	893b      	ldrh	r3, [r7, #8]
 8007d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	8013      	strh	r3, [r2, #0]
 8007d58:	e192      	b.n	8008080 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	827b      	strh	r3, [r7, #18]
 8007d68:	8a7b      	ldrh	r3, [r7, #18]
 8007d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d01b      	beq.n	8007daa <USB_DeactivateEndpoint+0xf6>
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d88:	823b      	strh	r3, [r7, #16]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	8a3b      	ldrh	r3, [r7, #16]
 8007d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc0:	81fb      	strh	r3, [r7, #14]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	441a      	add	r2, r3
 8007dcc:	89fb      	ldrh	r3, [r7, #14]
 8007dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	8013      	strh	r3, [r2, #0]
 8007de2:	e14d      	b.n	8008080 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	785b      	ldrb	r3, [r3, #1]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f040 80a5 	bne.w	8007f38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	843b      	strh	r3, [r7, #32]
 8007dfc:	8c3b      	ldrh	r3, [r7, #32]
 8007dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01b      	beq.n	8007e3e <USB_DeactivateEndpoint+0x18a>
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1c:	83fb      	strh	r3, [r7, #30]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	441a      	add	r2, r3
 8007e28:	8bfb      	ldrh	r3, [r7, #30]
 8007e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	83bb      	strh	r3, [r7, #28]
 8007e4c:	8bbb      	ldrh	r3, [r7, #28]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d01b      	beq.n	8007e8e <USB_DeactivateEndpoint+0x1da>
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6c:	837b      	strh	r3, [r7, #26]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	8b7b      	ldrh	r3, [r7, #26]
 8007e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea4:	833b      	strh	r3, [r7, #24]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	441a      	add	r2, r3
 8007eb0:	8b3b      	ldrh	r3, [r7, #24]
 8007eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	82fb      	strh	r3, [r7, #22]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	8afb      	ldrh	r3, [r7, #22]
 8007eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f14:	82bb      	strh	r3, [r7, #20]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	441a      	add	r2, r3
 8007f20:	8abb      	ldrh	r3, [r7, #20]
 8007f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8013      	strh	r3, [r2, #0]
 8007f36:	e0a3      	b.n	8008080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01b      	beq.n	8007f88 <USB_DeactivateEndpoint+0x2d4>
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	441a      	add	r2, r3
 8007f72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01b      	beq.n	8007fd8 <USB_DeactivateEndpoint+0x324>
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	441a      	add	r2, r3
 8008032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800803c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008044:	b29b      	uxth	r3, r3
 8008046:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800805a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	441a      	add	r2, r3
 800806a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800806c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	b29b      	uxth	r3, r3
 800807e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3734      	adds	r7, #52	; 0x34
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b0c2      	sub	sp, #264	; 0x108
 8008092:	af00      	add	r7, sp, #0
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800809c:	6018      	str	r0, [r3, #0]
 800809e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	f040 86b7 	bne.w	8008e28 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80080ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d908      	bls.n	80080e8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080e6:	e007      	b.n	80080f8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80080e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	7b1b      	ldrb	r3, [r3, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d13a      	bne.n	800817e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6959      	ldr	r1, [r3, #20]
 8008114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	88da      	ldrh	r2, [r3, #6]
 8008120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008124:	b29b      	uxth	r3, r3
 8008126:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800812a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	f001 fc98 	bl	8009a64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800814e:	b29b      	uxth	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	00da      	lsls	r2, r3, #3
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4413      	add	r3, r2
 800816a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	f000 be1f 	b.w	8008dbc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800817e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	78db      	ldrb	r3, [r3, #3]
 800818a:	2b02      	cmp	r3, #2
 800818c:	f040 8462 	bne.w	8008a54 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6a1a      	ldr	r2, [r3, #32]
 800819c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	f240 83df 	bls.w	800896c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80081ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80081d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	441a      	add	r2, r3
 80081f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008206:	b29b      	uxth	r3, r3
 8008208:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800820a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a1a      	ldr	r2, [r3, #32]
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821a:	1ad2      	subs	r2, r2, r3
 800821c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 81c7 	beq.w	80085de <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	633b      	str	r3, [r7, #48]	; 0x30
 800825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d177      	bne.n	800835c <USB_EPStartXfer+0x2ce>
 800826c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28
 8008278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	4413      	add	r3, r2
 800828e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	00da      	lsls	r2, r3, #3
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	4413      	add	r3, r2
 80082a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	801a      	strh	r2, [r3, #0]
 80082b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082bc:	2b3e      	cmp	r3, #62	; 0x3e
 80082be:	d921      	bls.n	8008304 <USB_EPStartXfer+0x276>
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ce:	f003 031f 	and.w	r3, r3, #31
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <USB_EPStartXfer+0x252>
 80082d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082da:	3b01      	subs	r3, #1
 80082dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	4313      	orrs	r3, r2
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e050      	b.n	80083a6 <USB_EPStartXfer+0x318>
 8008304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <USB_EPStartXfer+0x294>
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831a:	b29a      	uxth	r2, r3
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	e041      	b.n	80083a6 <USB_EPStartXfer+0x318>
 8008322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008326:	085b      	lsrs	r3, r3, #1
 8008328:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <USB_EPStartXfer+0x2b4>
 8008338:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800833c:	3301      	adds	r3, #1
 800833e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29a      	uxth	r2, r3
 8008348:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800834c:	b29b      	uxth	r3, r3
 800834e:	029b      	lsls	r3, r3, #10
 8008350:	b29b      	uxth	r3, r3
 8008352:	4313      	orrs	r3, r2
 8008354:	b29a      	uxth	r2, r3
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	801a      	strh	r2, [r3, #0]
 800835a:	e024      	b.n	80083a6 <USB_EPStartXfer+0x318>
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d11c      	bne.n	80083a6 <USB_EPStartXfer+0x318>
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837a:	b29b      	uxth	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	4413      	add	r3, r2
 8008382:	633b      	str	r3, [r7, #48]	; 0x30
 8008384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	00da      	lsls	r2, r3, #3
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	4413      	add	r3, r2
 8008396:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	895b      	ldrh	r3, [r3, #10]
 80083b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6959      	ldr	r1, [r3, #20]
 80083c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083d4:	6800      	ldr	r0, [r0, #0]
 80083d6:	f001 fb45 	bl	8009a64 <USB_WritePMA>
            ep->xfer_buff += len;
 80083da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ea:	441a      	add	r2, r3
 80083ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6a1a      	ldr	r2, [r3, #32]
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	429a      	cmp	r2, r3
 8008412:	d90f      	bls.n	8008434 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6a1a      	ldr	r2, [r3, #32]
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008424:	1ad2      	subs	r2, r2, r3
 8008426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	621a      	str	r2, [r3, #32]
 8008432:	e00e      	b.n	8008452 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2200      	movs	r2, #0
 8008450:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d177      	bne.n	8008552 <USB_EPStartXfer+0x4c4>
 8008462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800847c:	b29b      	uxth	r3, r3
 800847e:	461a      	mov	r2, r3
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	4413      	add	r3, r2
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	00da      	lsls	r2, r3, #3
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	4413      	add	r3, r2
 8008498:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b2:	2b3e      	cmp	r3, #62	; 0x3e
 80084b4:	d921      	bls.n	80084fa <USB_EPStartXfer+0x46c>
 80084b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ba:	095b      	lsrs	r3, r3, #5
 80084bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c4:	f003 031f 	and.w	r3, r3, #31
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d104      	bne.n	80084d6 <USB_EPStartXfer+0x448>
 80084cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084d0:	3b01      	subs	r3, #1
 80084d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	029b      	lsls	r3, r3, #10
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4313      	orrs	r3, r2
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	e056      	b.n	80085a8 <USB_EPStartXfer+0x51a>
 80084fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10a      	bne.n	8008518 <USB_EPStartXfer+0x48a>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008510:	b29a      	uxth	r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	e047      	b.n	80085a8 <USB_EPStartXfer+0x51a>
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851c:	085b      	lsrs	r3, r3, #1
 800851e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d004      	beq.n	8008538 <USB_EPStartXfer+0x4aa>
 800852e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008532:	3301      	adds	r3, #1
 8008534:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008542:	b29b      	uxth	r3, r3
 8008544:	029b      	lsls	r3, r3, #10
 8008546:	b29b      	uxth	r3, r3
 8008548:	4313      	orrs	r3, r2
 800854a:	b29a      	uxth	r2, r3
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	e02a      	b.n	80085a8 <USB_EPStartXfer+0x51a>
 8008552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d122      	bne.n	80085a8 <USB_EPStartXfer+0x51a>
 8008562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	623b      	str	r3, [r7, #32]
 800856e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800857c:	b29b      	uxth	r3, r3
 800857e:	461a      	mov	r2, r3
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	4413      	add	r3, r2
 8008584:	623b      	str	r3, [r7, #32]
 8008586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800858a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	00da      	lsls	r2, r3, #3
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	4413      	add	r3, r2
 8008598:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	891b      	ldrh	r3, [r3, #8]
 80085b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6959      	ldr	r1, [r3, #20]
 80085c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80085d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80085d6:	6800      	ldr	r0, [r0, #0]
 80085d8:	f001 fa44 	bl	8009a64 <USB_WritePMA>
 80085dc:	e3ee      	b.n	8008dbc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d177      	bne.n	80086de <USB_EPStartXfer+0x650>
 80085ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008608:	b29b      	uxth	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860e:	4413      	add	r3, r2
 8008610:	64bb      	str	r3, [r7, #72]	; 0x48
 8008612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	00da      	lsls	r2, r3, #3
 8008620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008622:	4413      	add	r3, r2
 8008624:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
 800862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008634:	b29a      	uxth	r2, r3
 8008636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008638:	801a      	strh	r2, [r3, #0]
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863e:	2b3e      	cmp	r3, #62	; 0x3e
 8008640:	d921      	bls.n	8008686 <USB_EPStartXfer+0x5f8>
 8008642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800864c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <USB_EPStartXfer+0x5d4>
 8008658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800865c:	3b01      	subs	r3, #1
 800865e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29a      	uxth	r2, r3
 8008668:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800866c:	b29b      	uxth	r3, r3
 800866e:	029b      	lsls	r3, r3, #10
 8008670:	b29b      	uxth	r3, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	b29b      	uxth	r3, r3
 8008676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867e:	b29a      	uxth	r2, r3
 8008680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	e056      	b.n	8008734 <USB_EPStartXfer+0x6a6>
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10a      	bne.n	80086a4 <USB_EPStartXfer+0x616>
 800868e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800869c:	b29a      	uxth	r2, r3
 800869e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a0:	801a      	strh	r2, [r3, #0]
 80086a2:	e047      	b.n	8008734 <USB_EPStartXfer+0x6a6>
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d004      	beq.n	80086c4 <USB_EPStartXfer+0x636>
 80086ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086be:	3301      	adds	r3, #1
 80086c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	029b      	lsls	r3, r3, #10
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	4313      	orrs	r3, r2
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	e02a      	b.n	8008734 <USB_EPStartXfer+0x6a6>
 80086de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d122      	bne.n	8008734 <USB_EPStartXfer+0x6a6>
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	653b      	str	r3, [r7, #80]	; 0x50
 80086fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008708:	b29b      	uxth	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800870e:	4413      	add	r3, r2
 8008710:	653b      	str	r3, [r7, #80]	; 0x50
 8008712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	00da      	lsls	r2, r3, #3
 8008720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008722:	4413      	add	r3, r2
 8008724:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800872a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800872e:	b29a      	uxth	r2, r3
 8008730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008732:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	891b      	ldrh	r3, [r3, #8]
 8008740:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6959      	ldr	r1, [r3, #20]
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008754:	b29b      	uxth	r3, r3
 8008756:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800875a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800875e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008762:	6800      	ldr	r0, [r0, #0]
 8008764:	f001 f97e 	bl	8009a64 <USB_WritePMA>
            ep->xfer_buff += len;
 8008768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695a      	ldr	r2, [r3, #20]
 8008774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008778:	441a      	add	r2, r3
 800877a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6a1a      	ldr	r2, [r3, #32]
 8008792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d90f      	bls.n	80087c2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80087a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6a1a      	ldr	r2, [r3, #32]
 80087ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b2:	1ad2      	subs	r2, r2, r3
 80087b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	621a      	str	r2, [r3, #32]
 80087c0:	e00e      	b.n	80087e0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80087c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80087d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2200      	movs	r2, #0
 80087de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	643b      	str	r3, [r7, #64]	; 0x40
 80087ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d177      	bne.n	80088ec <USB_EPStartXfer+0x85e>
 80087fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008800:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	63bb      	str	r3, [r7, #56]	; 0x38
 8008808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008816:	b29b      	uxth	r3, r3
 8008818:	461a      	mov	r2, r3
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	4413      	add	r3, r2
 800881e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	00da      	lsls	r2, r3, #3
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	4413      	add	r3, r2
 8008832:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008842:	b29a      	uxth	r2, r3
 8008844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884c:	2b3e      	cmp	r3, #62	; 0x3e
 800884e:	d921      	bls.n	8008894 <USB_EPStartXfer+0x806>
 8008850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008854:	095b      	lsrs	r3, r3, #5
 8008856:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885e:	f003 031f 	and.w	r3, r3, #31
 8008862:	2b00      	cmp	r3, #0
 8008864:	d104      	bne.n	8008870 <USB_EPStartXfer+0x7e2>
 8008866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886a:	3b01      	subs	r3, #1
 800886c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29a      	uxth	r2, r3
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887a:	b29b      	uxth	r3, r3
 800887c:	029b      	lsls	r3, r3, #10
 800887e:	b29b      	uxth	r3, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	b29b      	uxth	r3, r3
 8008884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800888c:	b29a      	uxth	r2, r3
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	801a      	strh	r2, [r3, #0]
 8008892:	e050      	b.n	8008936 <USB_EPStartXfer+0x8a8>
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <USB_EPStartXfer+0x824>
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	801a      	strh	r2, [r3, #0]
 80088b0:	e041      	b.n	8008936 <USB_EPStartXfer+0x8a8>
 80088b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b6:	085b      	lsrs	r3, r3, #1
 80088b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <USB_EPStartXfer+0x844>
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088cc:	3301      	adds	r3, #1
 80088ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088dc:	b29b      	uxth	r3, r3
 80088de:	029b      	lsls	r3, r3, #10
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	e024      	b.n	8008936 <USB_EPStartXfer+0x8a8>
 80088ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	785b      	ldrb	r3, [r3, #1]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d11c      	bne.n	8008936 <USB_EPStartXfer+0x8a8>
 80088fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800890a:	b29b      	uxth	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008910:	4413      	add	r3, r2
 8008912:	643b      	str	r3, [r7, #64]	; 0x40
 8008914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	00da      	lsls	r2, r3, #3
 8008922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008924:	4413      	add	r3, r2
 8008926:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800892c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008930:	b29a      	uxth	r2, r3
 8008932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008934:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	895b      	ldrh	r3, [r3, #10]
 8008942:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6959      	ldr	r1, [r3, #20]
 8008952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008956:	b29b      	uxth	r3, r3
 8008958:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800895c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008960:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008964:	6800      	ldr	r0, [r0, #0]
 8008966:	f001 f87d 	bl	8009a64 <USB_WritePMA>
 800896a:	e227      	b.n	8008dbc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800896c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800897c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80089a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	441a      	add	r2, r3
 80089c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80089c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089f8:	4413      	add	r3, r2
 80089fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	00da      	lsls	r2, r3, #3
 8008a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	891b      	ldrh	r3, [r3, #8]
 8008a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6959      	ldr	r1, [r3, #20]
 8008a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	f001 f809 	bl	8009a64 <USB_WritePMA>
 8008a52:	e1b3      	b.n	8008dbc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 80c6 	beq.w	8008c26 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8008aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	785b      	ldrb	r3, [r3, #1]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d177      	bne.n	8008ba6 <USB_EPStartXfer+0xb18>
 8008ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ad6:	4413      	add	r3, r2
 8008ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	00da      	lsls	r2, r3, #3
 8008ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008aea:	4413      	add	r3, r2
 8008aec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008af0:	667b      	str	r3, [r7, #100]	; 0x64
 8008af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b06:	2b3e      	cmp	r3, #62	; 0x3e
 8008b08:	d921      	bls.n	8008b4e <USB_EPStartXfer+0xac0>
 8008b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0e:	095b      	lsrs	r3, r3, #5
 8008b10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b18:	f003 031f 	and.w	r3, r3, #31
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d104      	bne.n	8008b2a <USB_EPStartXfer+0xa9c>
 8008b20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b24:	3b01      	subs	r3, #1
 8008b26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	029b      	lsls	r3, r3, #10
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b4a:	801a      	strh	r2, [r3, #0]
 8008b4c:	e050      	b.n	8008bf0 <USB_EPStartXfer+0xb62>
 8008b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <USB_EPStartXfer+0xade>
 8008b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b68:	801a      	strh	r2, [r3, #0]
 8008b6a:	e041      	b.n	8008bf0 <USB_EPStartXfer+0xb62>
 8008b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <USB_EPStartXfer+0xafe>
 8008b82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b86:	3301      	adds	r3, #1
 8008b88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	029b      	lsls	r3, r3, #10
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	e024      	b.n	8008bf0 <USB_EPStartXfer+0xb62>
 8008ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d11c      	bne.n	8008bf0 <USB_EPStartXfer+0xb62>
 8008bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bca:	4413      	add	r3, r2
 8008bcc:	673b      	str	r3, [r7, #112]	; 0x70
 8008bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	00da      	lsls	r2, r3, #3
 8008bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bde:	4413      	add	r3, r2
 8008be0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	895b      	ldrh	r3, [r3, #10]
 8008bfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6959      	ldr	r1, [r3, #20]
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	f000 ff20 	bl	8009a64 <USB_WritePMA>
 8008c24:	e0ca      	b.n	8008dbc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d177      	bne.n	8008d26 <USB_EPStartXfer+0xc98>
 8008c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	461a      	mov	r2, r3
 8008c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c56:	4413      	add	r3, r2
 8008c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	00da      	lsls	r2, r3, #3
 8008c68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c86:	2b3e      	cmp	r3, #62	; 0x3e
 8008c88:	d921      	bls.n	8008cce <USB_EPStartXfer+0xc40>
 8008c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c98:	f003 031f 	and.w	r3, r3, #31
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d104      	bne.n	8008caa <USB_EPStartXfer+0xc1c>
 8008ca0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	029b      	lsls	r3, r3, #10
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cca:	801a      	strh	r2, [r3, #0]
 8008ccc:	e05c      	b.n	8008d88 <USB_EPStartXfer+0xcfa>
 8008cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <USB_EPStartXfer+0xc5e>
 8008cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ce8:	801a      	strh	r2, [r3, #0]
 8008cea:	e04d      	b.n	8008d88 <USB_EPStartXfer+0xcfa>
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf0:	085b      	lsrs	r3, r3, #1
 8008cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d004      	beq.n	8008d0c <USB_EPStartXfer+0xc7e>
 8008d02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d06:	3301      	adds	r3, #1
 8008d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	029b      	lsls	r3, r3, #10
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	e030      	b.n	8008d88 <USB_EPStartXfer+0xcfa>
 8008d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	785b      	ldrb	r3, [r3, #1]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d128      	bne.n	8008d88 <USB_EPStartXfer+0xcfa>
 8008d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	00da      	lsls	r2, r3, #3
 8008d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d72:	4413      	add	r3, r2
 8008d74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	891b      	ldrh	r3, [r3, #8]
 8008d94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6959      	ldr	r1, [r3, #20]
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008dae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008db2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008db6:	6800      	ldr	r0, [r0, #0]
 8008db8:	f000 fe54 	bl	8009a64 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de2:	817b      	strh	r3, [r7, #10]
 8008de4:	897b      	ldrh	r3, [r7, #10]
 8008de6:	f083 0310 	eor.w	r3, r3, #16
 8008dea:	817b      	strh	r3, [r7, #10]
 8008dec:	897b      	ldrh	r3, [r7, #10]
 8008dee:	f083 0320 	eor.w	r3, r3, #32
 8008df2:	817b      	strh	r3, [r7, #10]
 8008df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	441a      	add	r2, r3
 8008e0e:	897b      	ldrh	r3, [r7, #10]
 8008e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	8013      	strh	r3, [r2, #0]
 8008e24:	f000 bcde 	b.w	80097e4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	7b1b      	ldrb	r3, [r3, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f040 80bb 	bne.w	8008fb0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d917      	bls.n	8008e86 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	699a      	ldr	r2, [r3, #24]
 8008e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e76:	1ad2      	subs	r2, r2, r3
 8008e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	619a      	str	r2, [r3, #24]
 8008e84:	e00e      	b.n	8008ea4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ec8:	4413      	add	r3, r2
 8008eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	00da      	lsls	r2, r3, #3
 8008edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008efc:	801a      	strh	r2, [r3, #0]
 8008efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f02:	2b3e      	cmp	r3, #62	; 0x3e
 8008f04:	d924      	bls.n	8008f50 <USB_EPStartXfer+0xec2>
 8008f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0a:	095b      	lsrs	r3, r3, #5
 8008f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <USB_EPStartXfer+0xe98>
 8008f1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f20:	3b01      	subs	r3, #1
 8008f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	029b      	lsls	r3, r3, #10
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	f000 bc10 	b.w	8009770 <USB_EPStartXfer+0x16e2>
 8008f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10c      	bne.n	8008f72 <USB_EPStartXfer+0xee4>
 8008f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e3fe      	b.n	8009770 <USB_EPStartXfer+0x16e2>
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f76:	085b      	lsrs	r3, r3, #1
 8008f78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <USB_EPStartXfer+0xf04>
 8008f88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	029b      	lsls	r3, r3, #10
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fac:	801a      	strh	r2, [r3, #0]
 8008fae:	e3df      	b.n	8009770 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	78db      	ldrb	r3, [r3, #3]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	f040 8218 	bne.w	80093f2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	785b      	ldrb	r3, [r3, #1]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f040 809d 	bne.w	800910e <USB_EPStartXfer+0x1080>
 8008fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	00da      	lsls	r2, r3, #3
 800900c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009010:	4413      	add	r3, r2
 8009012:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800901a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009026:	b29a      	uxth	r2, r3
 8009028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800902c:	801a      	strh	r2, [r3, #0]
 800902e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b3e      	cmp	r3, #62	; 0x3e
 800903c:	d92b      	bls.n	8009096 <USB_EPStartXfer+0x1008>
 800903e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 031f 	and.w	r3, r3, #31
 8009060:	2b00      	cmp	r3, #0
 8009062:	d104      	bne.n	800906e <USB_EPStartXfer+0xfe0>
 8009064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009068:	3b01      	subs	r3, #1
 800906a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800906e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29a      	uxth	r2, r3
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907a:	b29b      	uxth	r3, r3
 800907c:	029b      	lsls	r3, r3, #10
 800907e:	b29b      	uxth	r3, r3
 8009080:	4313      	orrs	r3, r2
 8009082:	b29b      	uxth	r3, r3
 8009084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800908c:	b29a      	uxth	r2, r3
 800908e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009092:	801a      	strh	r2, [r3, #0]
 8009094:	e070      	b.n	8009178 <USB_EPStartXfer+0x10ea>
 8009096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10c      	bne.n	80090c0 <USB_EPStartXfer+0x1032>
 80090a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090bc:	801a      	strh	r2, [r3, #0]
 80090be:	e05b      	b.n	8009178 <USB_EPStartXfer+0x10ea>
 80090c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <USB_EPStartXfer+0x1062>
 80090e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ea:	3301      	adds	r3, #1
 80090ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	029b      	lsls	r3, r3, #10
 8009100:	b29b      	uxth	r3, r3
 8009102:	4313      	orrs	r3, r2
 8009104:	b29a      	uxth	r2, r3
 8009106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e034      	b.n	8009178 <USB_EPStartXfer+0x10ea>
 800910e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	785b      	ldrb	r3, [r3, #1]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d12c      	bne.n	8009178 <USB_EPStartXfer+0x10ea>
 800911e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800912c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800913a:	b29b      	uxth	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009142:	4413      	add	r3, r2
 8009144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	00da      	lsls	r2, r3, #3
 8009156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800915a:	4413      	add	r3, r2
 800915c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	b29a      	uxth	r2, r3
 8009172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009176:	801a      	strh	r2, [r3, #0]
 8009178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f040 809d 	bne.w	80092d2 <USB_EPStartXfer+0x1244>
 8009198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800919c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091bc:	4413      	add	r3, r2
 80091be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	00da      	lsls	r2, r3, #3
 80091d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091d4:	4413      	add	r3, r2
 80091d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091f0:	801a      	strh	r2, [r3, #0]
 80091f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009200:	d92b      	bls.n	800925a <USB_EPStartXfer+0x11cc>
 8009202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f003 031f 	and.w	r3, r3, #31
 8009224:	2b00      	cmp	r3, #0
 8009226:	d104      	bne.n	8009232 <USB_EPStartXfer+0x11a4>
 8009228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800922c:	3b01      	subs	r3, #1
 800922e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29a      	uxth	r2, r3
 800923a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800923e:	b29b      	uxth	r3, r3
 8009240:	029b      	lsls	r3, r3, #10
 8009242:	b29b      	uxth	r3, r3
 8009244:	4313      	orrs	r3, r2
 8009246:	b29b      	uxth	r3, r3
 8009248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009250:	b29a      	uxth	r2, r3
 8009252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009256:	801a      	strh	r2, [r3, #0]
 8009258:	e069      	b.n	800932e <USB_EPStartXfer+0x12a0>
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10c      	bne.n	8009284 <USB_EPStartXfer+0x11f6>
 800926a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927a:	b29a      	uxth	r2, r3
 800927c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009280:	801a      	strh	r2, [r3, #0]
 8009282:	e054      	b.n	800932e <USB_EPStartXfer+0x12a0>
 8009284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	085b      	lsrs	r3, r3, #1
 8009292:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <USB_EPStartXfer+0x1226>
 80092aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ae:	3301      	adds	r3, #1
 80092b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	029b      	lsls	r3, r3, #10
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092ce:	801a      	strh	r2, [r3, #0]
 80092d0:	e02d      	b.n	800932e <USB_EPStartXfer+0x12a0>
 80092d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	785b      	ldrb	r3, [r3, #1]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d125      	bne.n	800932e <USB_EPStartXfer+0x12a0>
 80092e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092f8:	4413      	add	r3, r2
 80092fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	00da      	lsls	r2, r3, #3
 800930c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009310:	4413      	add	r3, r2
 8009312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800931a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	b29a      	uxth	r2, r3
 8009328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800932c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800932e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 8218 	beq.w	8009770 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009360:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <USB_EPStartXfer+0x12ea>
 800936c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10d      	bne.n	8009394 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009378:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800937c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009380:	2b00      	cmp	r3, #0
 8009382:	f040 81f5 	bne.w	8009770 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009386:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800938a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 81ee 	bne.w	8009770 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ba:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80093be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	441a      	add	r2, r3
 80093d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80093dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	8013      	strh	r3, [r2, #0]
 80093f0:	e1be      	b.n	8009770 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80093f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	78db      	ldrb	r3, [r3, #3]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	f040 81b4 	bne.w	800976c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	699a      	ldr	r2, [r3, #24]
 8009410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	429a      	cmp	r2, r3
 800941e:	d917      	bls.n	8009450 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	699a      	ldr	r2, [r3, #24]
 800943c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009440:	1ad2      	subs	r2, r2, r3
 8009442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	619a      	str	r2, [r3, #24]
 800944e:	e00e      	b.n	800946e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800946e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f040 8085 	bne.w	800958a <USB_EPStartXfer+0x14fc>
 8009480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800948e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800949c:	b29b      	uxth	r3, r3
 800949e:	461a      	mov	r2, r3
 80094a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094a4:	4413      	add	r3, r2
 80094a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	00da      	lsls	r2, r3, #3
 80094b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094bc:	4413      	add	r3, r2
 80094be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094de:	2b3e      	cmp	r3, #62	; 0x3e
 80094e0:	d923      	bls.n	800952a <USB_EPStartXfer+0x149c>
 80094e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f0:	f003 031f 	and.w	r3, r3, #31
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d104      	bne.n	8009502 <USB_EPStartXfer+0x1474>
 80094f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fc:	3b01      	subs	r3, #1
 80094fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	b29a      	uxth	r2, r3
 800950a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800950e:	b29b      	uxth	r3, r3
 8009510:	029b      	lsls	r3, r3, #10
 8009512:	b29b      	uxth	r3, r3
 8009514:	4313      	orrs	r3, r2
 8009516:	b29b      	uxth	r3, r3
 8009518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800951c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009520:	b29a      	uxth	r2, r3
 8009522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	e060      	b.n	80095ec <USB_EPStartXfer+0x155e>
 800952a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10c      	bne.n	800954c <USB_EPStartXfer+0x14be>
 8009532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800953e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009542:	b29a      	uxth	r2, r3
 8009544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	e04f      	b.n	80095ec <USB_EPStartXfer+0x155e>
 800954c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009550:	085b      	lsrs	r3, r3, #1
 8009552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d004      	beq.n	800956c <USB_EPStartXfer+0x14de>
 8009562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009566:	3301      	adds	r3, #1
 8009568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800956c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	b29a      	uxth	r2, r3
 8009574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009578:	b29b      	uxth	r3, r3
 800957a:	029b      	lsls	r3, r3, #10
 800957c:	b29b      	uxth	r3, r3
 800957e:	4313      	orrs	r3, r2
 8009580:	b29a      	uxth	r2, r3
 8009582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009586:	801a      	strh	r2, [r3, #0]
 8009588:	e030      	b.n	80095ec <USB_EPStartXfer+0x155e>
 800958a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	785b      	ldrb	r3, [r3, #1]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d128      	bne.n	80095ec <USB_EPStartXfer+0x155e>
 800959a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095be:	4413      	add	r3, r2
 80095c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	00da      	lsls	r2, r3, #3
 80095d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095d6:	4413      	add	r3, r2
 80095d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095ea:	801a      	strh	r2, [r3, #0]
 80095ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 8085 	bne.w	8009716 <USB_EPStartXfer+0x1688>
 800960c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800961a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800961e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009628:	b29b      	uxth	r3, r3
 800962a:	461a      	mov	r2, r3
 800962c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009630:	4413      	add	r3, r2
 8009632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	00da      	lsls	r2, r3, #3
 8009644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009648:	4413      	add	r3, r2
 800964a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800964e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29b      	uxth	r3, r3
 800965a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800965e:	b29a      	uxth	r2, r3
 8009660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009664:	801a      	strh	r2, [r3, #0]
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966a:	2b3e      	cmp	r3, #62	; 0x3e
 800966c:	d923      	bls.n	80096b6 <USB_EPStartXfer+0x1628>
 800966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009672:	095b      	lsrs	r3, r3, #5
 8009674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800967c:	f003 031f 	and.w	r3, r3, #31
 8009680:	2b00      	cmp	r3, #0
 8009682:	d104      	bne.n	800968e <USB_EPStartXfer+0x1600>
 8009684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009688:	3b01      	subs	r3, #1
 800968a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800968e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29a      	uxth	r2, r3
 8009696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800969a:	b29b      	uxth	r3, r3
 800969c:	029b      	lsls	r3, r3, #10
 800969e:	b29b      	uxth	r3, r3
 80096a0:	4313      	orrs	r3, r2
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096b2:	801a      	strh	r2, [r3, #0]
 80096b4:	e05c      	b.n	8009770 <USB_EPStartXfer+0x16e2>
 80096b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10c      	bne.n	80096d8 <USB_EPStartXfer+0x164a>
 80096be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096d4:	801a      	strh	r2, [r3, #0]
 80096d6:	e04b      	b.n	8009770 <USB_EPStartXfer+0x16e2>
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096dc:	085b      	lsrs	r3, r3, #1
 80096de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <USB_EPStartXfer+0x166a>
 80096ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096f2:	3301      	adds	r3, #1
 80096f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	b29a      	uxth	r2, r3
 8009700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009704:	b29b      	uxth	r3, r3
 8009706:	029b      	lsls	r3, r3, #10
 8009708:	b29b      	uxth	r3, r3
 800970a:	4313      	orrs	r3, r2
 800970c:	b29a      	uxth	r2, r3
 800970e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	e02c      	b.n	8009770 <USB_EPStartXfer+0x16e2>
 8009716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d124      	bne.n	8009770 <USB_EPStartXfer+0x16e2>
 8009726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009734:	b29b      	uxth	r3, r3
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800973c:	4413      	add	r3, r2
 800973e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	00da      	lsls	r2, r3, #3
 8009750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009754:	4413      	add	r3, r2
 8009756:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800975a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009762:	b29a      	uxth	r2, r3
 8009764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	e001      	b.n	8009770 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e03a      	b.n	80097e6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009796:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800979a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800979e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	441a      	add	r2, r3
 80097cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d020      	beq.n	8009844 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009818:	81bb      	strh	r3, [r7, #12]
 800981a:	89bb      	ldrh	r3, [r7, #12]
 800981c:	f083 0310 	eor.w	r3, r3, #16
 8009820:	81bb      	strh	r3, [r7, #12]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	441a      	add	r2, r3
 800982c:	89bb      	ldrh	r3, [r7, #12]
 800982e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983e:	b29b      	uxth	r3, r3
 8009840:	8013      	strh	r3, [r2, #0]
 8009842:	e01f      	b.n	8009884 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29b      	uxth	r3, r3
 8009852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985a:	81fb      	strh	r3, [r7, #14]
 800985c:	89fb      	ldrh	r3, [r7, #14]
 800985e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009862:	81fb      	strh	r3, [r7, #14]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	441a      	add	r2, r3
 800986e:	89fb      	ldrh	r3, [r7, #14]
 8009870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	b29b      	uxth	r3, r3
 8009882:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009892:	b480      	push	{r7}
 8009894:	b087      	sub	sp, #28
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	7b1b      	ldrb	r3, [r3, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f040 809d 	bne.w	80099e0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d04c      	beq.n	8009948 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	823b      	strh	r3, [r7, #16]
 80098bc:	8a3b      	ldrh	r3, [r7, #16]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01b      	beq.n	80098fe <USB_EPClearStall+0x6c>
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098dc:	81fb      	strh	r3, [r7, #14]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	441a      	add	r2, r3
 80098e8:	89fb      	ldrh	r3, [r7, #14]
 80098ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	78db      	ldrb	r3, [r3, #3]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d06c      	beq.n	80099e0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800991c:	81bb      	strh	r3, [r7, #12]
 800991e:	89bb      	ldrh	r3, [r7, #12]
 8009920:	f083 0320 	eor.w	r3, r3, #32
 8009924:	81bb      	strh	r3, [r7, #12]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	89bb      	ldrh	r3, [r7, #12]
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800993e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]
 8009946:	e04b      	b.n	80099e0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	82fb      	strh	r3, [r7, #22]
 8009956:	8afb      	ldrh	r3, [r7, #22]
 8009958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d01b      	beq.n	8009998 <USB_EPClearStall+0x106>
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009976:	82bb      	strh	r3, [r7, #20]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	441a      	add	r2, r3
 8009982:	8abb      	ldrh	r3, [r7, #20]
 8009984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800998c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009994:	b29b      	uxth	r3, r3
 8009996:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ae:	827b      	strh	r3, [r7, #18]
 80099b0:	8a7b      	ldrh	r3, [r7, #18]
 80099b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099b6:	827b      	strh	r3, [r7, #18]
 80099b8:	8a7b      	ldrh	r3, [r7, #18]
 80099ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099be:	827b      	strh	r3, [r7, #18]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	441a      	add	r2, r3
 80099ca:	8a7b      	ldrh	r3, [r7, #18]
 80099cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099dc:	b29b      	uxth	r3, r3
 80099de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2280      	movs	r2, #128	; 0x80
 8009a04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a56:	68fb      	ldr	r3, [r7, #12]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b08b      	sub	sp, #44	; 0x2c
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	461a      	mov	r2, r3
 8009a72:	460b      	mov	r3, r1
 8009a74:	80fb      	strh	r3, [r7, #6]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a7a:	88bb      	ldrh	r3, [r7, #4]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	085b      	lsrs	r3, r3, #1
 8009a80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a8a:	88fa      	ldrh	r2, [r7, #6]
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
 8009a9a:	e01b      	b.n	8009ad4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	021b      	lsls	r3, r3, #8
 8009aaa:	b21a      	sxth	r2, r3
 8009aac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	b21b      	sxth	r3, r3
 8009ab4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	8a7a      	ldrh	r2, [r7, #18]
 8009aba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	3302      	adds	r3, #2
 8009ac0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	3301      	adds	r3, #1
 8009acc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e0      	bne.n	8009a9c <USB_WritePMA+0x38>
  }
}
 8009ada:	bf00      	nop
 8009adc:	bf00      	nop
 8009ade:	372c      	adds	r7, #44	; 0x2c
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b08b      	sub	sp, #44	; 0x2c
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4611      	mov	r1, r2
 8009af4:	461a      	mov	r2, r3
 8009af6:	460b      	mov	r3, r1
 8009af8:	80fb      	strh	r3, [r7, #6]
 8009afa:	4613      	mov	r3, r2
 8009afc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009afe:	88bb      	ldrh	r3, [r7, #4]
 8009b00:	085b      	lsrs	r3, r3, #1
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b0e:	88fa      	ldrh	r2, [r7, #6]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b1e:	e018      	b.n	8009b52 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	3302      	adds	r3, #2
 8009b2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	0a1b      	lsrs	r3, r3, #8
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	627b      	str	r3, [r7, #36]	; 0x24
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e3      	bne.n	8009b20 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b58:	88bb      	ldrh	r3, [r7, #4]
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	701a      	strb	r2, [r3, #0]
  }
}
 8009b74:	bf00      	nop
 8009b76:	372c      	adds	r7, #44	; 0x2c
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b90:	f002 fc5e 	bl	800c450 <USBD_static_malloc>
 8009b94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	32b0      	adds	r2, #176	; 0xb0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009bac:	2302      	movs	r3, #2
 8009bae:	e0d4      	b.n	8009d5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009bb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f009 fd3a 	bl	8013630 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	32b0      	adds	r2, #176	; 0xb0
 8009bc6:	68f9      	ldr	r1, [r7, #12]
 8009bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32b0      	adds	r2, #176	; 0xb0
 8009bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7c1b      	ldrb	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d138      	bne.n	8009c5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009be8:	4b5e      	ldr	r3, [pc, #376]	; (8009d64 <USBD_CDC_Init+0x1e4>)
 8009bea:	7819      	ldrb	r1, [r3, #0]
 8009bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 fad1 	bl	800c19a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bf8:	4b5a      	ldr	r3, [pc, #360]	; (8009d64 <USBD_CDC_Init+0x1e4>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	3324      	adds	r3, #36	; 0x24
 8009c0e:	2201      	movs	r2, #1
 8009c10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c12:	4b55      	ldr	r3, [pc, #340]	; (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c14:	7819      	ldrb	r1, [r3, #0]
 8009c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f002 fabc 	bl	800c19a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c22:	4b51      	ldr	r3, [pc, #324]	; (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 020f 	and.w	r2, r3, #15
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c3e:	4b4b      	ldr	r3, [pc, #300]	; (8009d6c <USBD_CDC_Init+0x1ec>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 020f 	and.w	r2, r3, #15
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	440b      	add	r3, r1
 8009c52:	3326      	adds	r3, #38	; 0x26
 8009c54:	2210      	movs	r2, #16
 8009c56:	801a      	strh	r2, [r3, #0]
 8009c58:	e035      	b.n	8009cc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c5a:	4b42      	ldr	r3, [pc, #264]	; (8009d64 <USBD_CDC_Init+0x1e4>)
 8009c5c:	7819      	ldrb	r1, [r3, #0]
 8009c5e:	2340      	movs	r3, #64	; 0x40
 8009c60:	2202      	movs	r2, #2
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f002 fa99 	bl	800c19a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c68:	4b3e      	ldr	r3, [pc, #248]	; (8009d64 <USBD_CDC_Init+0x1e4>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3324      	adds	r3, #36	; 0x24
 8009c7e:	2201      	movs	r2, #1
 8009c80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c82:	4b39      	ldr	r3, [pc, #228]	; (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c84:	7819      	ldrb	r1, [r3, #0]
 8009c86:	2340      	movs	r3, #64	; 0x40
 8009c88:	2202      	movs	r2, #2
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f002 fa85 	bl	800c19a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c90:	4b35      	ldr	r3, [pc, #212]	; (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 020f 	and.w	r2, r3, #15
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ca8:	2201      	movs	r2, #1
 8009caa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009cac:	4b2f      	ldr	r3, [pc, #188]	; (8009d6c <USBD_CDC_Init+0x1ec>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 020f 	and.w	r2, r3, #15
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3326      	adds	r3, #38	; 0x26
 8009cc2:	2210      	movs	r2, #16
 8009cc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cc6:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <USBD_CDC_Init+0x1ec>)
 8009cc8:	7819      	ldrb	r1, [r3, #0]
 8009cca:	2308      	movs	r3, #8
 8009ccc:	2203      	movs	r2, #3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f002 fa63 	bl	800c19a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cd4:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <USBD_CDC_Init+0x1ec>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 020f 	and.w	r2, r3, #15
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	3324      	adds	r3, #36	; 0x24
 8009cea:	2201      	movs	r2, #1
 8009cec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	33b0      	adds	r3, #176	; 0xb0
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d24:	2302      	movs	r3, #2
 8009d26:	e018      	b.n	8009d5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	7c1b      	ldrb	r3, [r3, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d30:	4b0d      	ldr	r3, [pc, #52]	; (8009d68 <USBD_CDC_Init+0x1e8>)
 8009d32:	7819      	ldrb	r1, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f002 fb1b 	bl	800c37a <USBD_LL_PrepareReceive>
 8009d44:	e008      	b.n	8009d58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d46:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <USBD_CDC_Init+0x1e8>)
 8009d48:	7819      	ldrb	r1, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f002 fb11 	bl	800c37a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	2000009b 	.word	0x2000009b
 8009d68:	2000009c 	.word	0x2000009c
 8009d6c:	2000009d 	.word	0x2000009d

08009d70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d7c:	4b3a      	ldr	r3, [pc, #232]	; (8009e68 <USBD_CDC_DeInit+0xf8>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f002 fa2f 	bl	800c1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d88:	4b37      	ldr	r3, [pc, #220]	; (8009e68 <USBD_CDC_DeInit+0xf8>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f003 020f 	and.w	r2, r3, #15
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3324      	adds	r3, #36	; 0x24
 8009d9e:	2200      	movs	r2, #0
 8009da0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009da2:	4b32      	ldr	r3, [pc, #200]	; (8009e6c <USBD_CDC_DeInit+0xfc>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f002 fa1c 	bl	800c1e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009dae:	4b2f      	ldr	r3, [pc, #188]	; (8009e6c <USBD_CDC_DeInit+0xfc>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f003 020f 	and.w	r2, r3, #15
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dca:	4b29      	ldr	r3, [pc, #164]	; (8009e70 <USBD_CDC_DeInit+0x100>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f002 fa08 	bl	800c1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dd6:	4b26      	ldr	r3, [pc, #152]	; (8009e70 <USBD_CDC_DeInit+0x100>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 020f 	and.w	r2, r3, #15
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	3324      	adds	r3, #36	; 0x24
 8009dec:	2200      	movs	r2, #0
 8009dee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009df0:	4b1f      	ldr	r3, [pc, #124]	; (8009e70 <USBD_CDC_DeInit+0x100>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	440b      	add	r3, r1
 8009e04:	3326      	adds	r3, #38	; 0x26
 8009e06:	2200      	movs	r2, #0
 8009e08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	32b0      	adds	r2, #176	; 0xb0
 8009e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01f      	beq.n	8009e5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	33b0      	adds	r3, #176	; 0xb0
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32b0      	adds	r2, #176	; 0xb0
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f002 fb14 	bl	800c46c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32b0      	adds	r2, #176	; 0xb0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	2000009b 	.word	0x2000009b
 8009e6c:	2000009c 	.word	0x2000009c
 8009e70:	2000009d 	.word	0x2000009d

08009e74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	32b0      	adds	r2, #176	; 0xb0
 8009e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e0bf      	b.n	800a024 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d050      	beq.n	8009f52 <USBD_CDC_Setup+0xde>
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	f040 80af 	bne.w	800a014 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	88db      	ldrh	r3, [r3, #6]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d03a      	beq.n	8009f34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	b25b      	sxtb	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	da1b      	bge.n	8009f00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	33b0      	adds	r3, #176	; 0xb0
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ede:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	88d2      	ldrh	r2, [r2, #6]
 8009ee4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88db      	ldrh	r3, [r3, #6]
 8009eea:	2b07      	cmp	r3, #7
 8009eec:	bf28      	it	cs
 8009eee:	2307      	movcs	r3, #7
 8009ef0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	89fa      	ldrh	r2, [r7, #14]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 fd21 	bl	800b940 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009efe:	e090      	b.n	800a022 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	785a      	ldrb	r2, [r3, #1]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b3f      	cmp	r3, #63	; 0x3f
 8009f10:	d803      	bhi.n	8009f1a <USBD_CDC_Setup+0xa6>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	88db      	ldrh	r3, [r3, #6]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	e000      	b.n	8009f1c <USBD_CDC_Setup+0xa8>
 8009f1a:	2240      	movs	r2, #64	; 0x40
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f22:	6939      	ldr	r1, [r7, #16]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 fd33 	bl	800b998 <USBD_CtlPrepareRx>
      break;
 8009f32:	e076      	b.n	800a022 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	33b0      	adds	r3, #176	; 0xb0
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	7850      	ldrb	r0, [r2, #1]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	4798      	blx	r3
      break;
 8009f50:	e067      	b.n	800a022 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b0b      	cmp	r3, #11
 8009f58:	d851      	bhi.n	8009ffe <USBD_CDC_Setup+0x18a>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <USBD_CDC_Setup+0xec>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f91 	.word	0x08009f91
 8009f64:	0800a00d 	.word	0x0800a00d
 8009f68:	08009fff 	.word	0x08009fff
 8009f6c:	08009fff 	.word	0x08009fff
 8009f70:	08009fff 	.word	0x08009fff
 8009f74:	08009fff 	.word	0x08009fff
 8009f78:	08009fff 	.word	0x08009fff
 8009f7c:	08009fff 	.word	0x08009fff
 8009f80:	08009fff 	.word	0x08009fff
 8009f84:	08009fff 	.word	0x08009fff
 8009f88:	08009fbb 	.word	0x08009fbb
 8009f8c:	08009fe5 	.word	0x08009fe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d107      	bne.n	8009fac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f9c:	f107 030a 	add.w	r3, r7, #10
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 fccb 	bl	800b940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009faa:	e032      	b.n	800a012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fc55 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8009fb8:	e02b      	b.n	800a012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d107      	bne.n	8009fd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fc6:	f107 030d 	add.w	r3, r7, #13
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f001 fcb6 	bl	800b940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fd4:	e01d      	b.n	800a012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fc40 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe2:	e016      	b.n	800a012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d00f      	beq.n	800a010 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 fc33 	bl	800b85e <USBD_CtlError>
            ret = USBD_FAIL;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ffc:	e008      	b.n	800a010 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fc2c 	bl	800b85e <USBD_CtlError>
          ret = USBD_FAIL;
 800a006:	2303      	movs	r3, #3
 800a008:	75fb      	strb	r3, [r7, #23]
          break;
 800a00a:	e002      	b.n	800a012 <USBD_CDC_Setup+0x19e>
          break;
 800a00c:	bf00      	nop
 800a00e:	e008      	b.n	800a022 <USBD_CDC_Setup+0x1ae>
          break;
 800a010:	bf00      	nop
      }
      break;
 800a012:	e006      	b.n	800a022 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fc21 	bl	800b85e <USBD_CtlError>
      ret = USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	75fb      	strb	r3, [r7, #23]
      break;
 800a020:	bf00      	nop
  }

  return (uint8_t)ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a03e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	32b0      	adds	r2, #176	; 0xb0
 800a04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a052:	2303      	movs	r3, #3
 800a054:	e065      	b.n	800a122 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	32b0      	adds	r2, #176	; 0xb0
 800a060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	f003 020f 	and.w	r2, r3, #15
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	3318      	adds	r3, #24
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d02f      	beq.n	800a0e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	f003 020f 	and.w	r2, r3, #15
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	440b      	add	r3, r1
 800a092:	3318      	adds	r3, #24
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	f003 010f 	and.w	r1, r3, #15
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	440b      	add	r3, r1
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	4403      	add	r3, r0
 800a0a8:	3338      	adds	r3, #56	; 0x38
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0b0:	fb01 f303 	mul.w	r3, r1, r3
 800a0b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d112      	bne.n	800a0e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	f003 020f 	and.w	r2, r3, #15
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	440b      	add	r3, r1
 800a0cc:	3318      	adds	r3, #24
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0d2:	78f9      	ldrb	r1, [r7, #3]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f002 f92d 	bl	800c338 <USBD_LL_Transmit>
 800a0de:	e01f      	b.n	800a120 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	33b0      	adds	r3, #176	; 0xb0
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d010      	beq.n	800a120 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	33b0      	adds	r3, #176	; 0xb0
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	32b0      	adds	r2, #176	; 0xb0
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	32b0      	adds	r2, #176	; 0xb0
 800a150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a158:	2303      	movs	r3, #3
 800a15a:	e01a      	b.n	800a192 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f002 f92b 	bl	800c3bc <USBD_LL_GetRxDataSize>
 800a166:	4602      	mov	r2, r0
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	33b0      	adds	r3, #176	; 0xb0
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a18c:	4611      	mov	r1, r2
 800a18e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	32b0      	adds	r2, #176	; 0xb0
 800a1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e025      	b.n	800a208 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	33b0      	adds	r3, #176	; 0xb0
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01a      	beq.n	800a206 <USBD_CDC_EP0_RxReady+0x6c>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1d6:	2bff      	cmp	r3, #255	; 0xff
 800a1d8:	d015      	beq.n	800a206 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	33b0      	adds	r3, #176	; 0xb0
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1fa:	b292      	uxth	r2, r2
 800a1fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	22ff      	movs	r2, #255	; 0xff
 800a202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a218:	2182      	movs	r1, #130	; 0x82
 800a21a:	4818      	ldr	r0, [pc, #96]	; (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a21c:	f000 fcbd 	bl	800ab9a <USBD_GetEpDesc>
 800a220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a222:	2101      	movs	r1, #1
 800a224:	4815      	ldr	r0, [pc, #84]	; (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a226:	f000 fcb8 	bl	800ab9a <USBD_GetEpDesc>
 800a22a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a22c:	2181      	movs	r1, #129	; 0x81
 800a22e:	4813      	ldr	r0, [pc, #76]	; (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a230:	f000 fcb3 	bl	800ab9a <USBD_GetEpDesc>
 800a234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2210      	movs	r2, #16
 800a240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a250:	711a      	strb	r2, [r3, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a264:	711a      	strb	r2, [r3, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2243      	movs	r2, #67	; 0x43
 800a26e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000058 	.word	0x20000058

0800a280 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a288:	2182      	movs	r1, #130	; 0x82
 800a28a:	4818      	ldr	r0, [pc, #96]	; (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a28c:	f000 fc85 	bl	800ab9a <USBD_GetEpDesc>
 800a290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a292:	2101      	movs	r1, #1
 800a294:	4815      	ldr	r0, [pc, #84]	; (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a296:	f000 fc80 	bl	800ab9a <USBD_GetEpDesc>
 800a29a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a29c:	2181      	movs	r1, #129	; 0x81
 800a29e:	4813      	ldr	r0, [pc, #76]	; (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2a0:	f000 fc7b 	bl	800ab9a <USBD_GetEpDesc>
 800a2a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2210      	movs	r2, #16
 800a2b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	711a      	strb	r2, [r3, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f042 0202 	orr.w	r2, r2, #2
 800a2c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d006      	beq.n	800a2da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	711a      	strb	r2, [r3, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f042 0202 	orr.w	r2, r2, #2
 800a2d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2243      	movs	r2, #67	; 0x43
 800a2de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2e0:	4b02      	ldr	r3, [pc, #8]	; (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000058 	.word	0x20000058

0800a2f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2f8:	2182      	movs	r1, #130	; 0x82
 800a2fa:	4818      	ldr	r0, [pc, #96]	; (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2fc:	f000 fc4d 	bl	800ab9a <USBD_GetEpDesc>
 800a300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a302:	2101      	movs	r1, #1
 800a304:	4815      	ldr	r0, [pc, #84]	; (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a306:	f000 fc48 	bl	800ab9a <USBD_GetEpDesc>
 800a30a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a30c:	2181      	movs	r1, #129	; 0x81
 800a30e:	4813      	ldr	r0, [pc, #76]	; (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a310:	f000 fc43 	bl	800ab9a <USBD_GetEpDesc>
 800a314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2210      	movs	r2, #16
 800a320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a330:	711a      	strb	r2, [r3, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d006      	beq.n	800a34a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a344:	711a      	strb	r2, [r3, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2243      	movs	r2, #67	; 0x43
 800a34e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a350:	4b02      	ldr	r3, [pc, #8]	; (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20000058 	.word	0x20000058

0800a360 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	220a      	movs	r2, #10
 800a36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a36e:	4b03      	ldr	r3, [pc, #12]	; (800a37c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20000014 	.word	0x20000014

0800a380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a390:	2303      	movs	r3, #3
 800a392:	e009      	b.n	800a3a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	33b0      	adds	r3, #176	; 0xb0
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	32b0      	adds	r2, #176	; 0xb0
 800a3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e008      	b.n	800a3ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	371c      	adds	r7, #28
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	32b0      	adds	r2, #176	; 0xb0
 800a40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	e004      	b.n	800a426 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
	...

0800a434 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	32b0      	adds	r2, #176	; 0xb0
 800a446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a44c:	2301      	movs	r3, #1
 800a44e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a456:	2303      	movs	r3, #3
 800a458:	e025      	b.n	800a4a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a460:	2b00      	cmp	r3, #0
 800a462:	d11f      	bne.n	800a4a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2201      	movs	r2, #1
 800a468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a46c:	4b10      	ldr	r3, [pc, #64]	; (800a4b0 <USBD_CDC_TransmitPacket+0x7c>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f003 020f 	and.w	r2, r3, #15
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4403      	add	r3, r0
 800a486:	3318      	adds	r3, #24
 800a488:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a48a:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <USBD_CDC_TransmitPacket+0x7c>)
 800a48c:	7819      	ldrb	r1, [r3, #0]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 ff4c 	bl	800c338 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	2000009b 	.word	0x2000009b

0800a4b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	32b0      	adds	r2, #176	; 0xb0
 800a4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	32b0      	adds	r2, #176	; 0xb0
 800a4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e018      	b.n	800a514 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7c1b      	ldrb	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4ea:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <USBD_CDC_ReceivePacket+0x68>)
 800a4ec:	7819      	ldrb	r1, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f001 ff3e 	bl	800c37a <USBD_LL_PrepareReceive>
 800a4fe:	e008      	b.n	800a512 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <USBD_CDC_ReceivePacket+0x68>)
 800a502:	7819      	ldrb	r1, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a50a:	2340      	movs	r3, #64	; 0x40
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 ff34 	bl	800c37a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	2000009c 	.word	0x2000009c

0800a520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a534:	2303      	movs	r3, #3
 800a536:	e01f      	b.n	800a578 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	79fa      	ldrb	r2, [r7, #7]
 800a56a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f001 fd97 	bl	800c0a0 <USBD_LL_Init>
 800a572:	4603      	mov	r3, r0
 800a574:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a576:	7dfb      	ldrb	r3, [r7, #23]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a594:	2303      	movs	r3, #3
 800a596:	e025      	b.n	800a5e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	32ae      	adds	r2, #174	; 0xae
 800a5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00f      	beq.n	800a5d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32ae      	adds	r2, #174	; 0xae
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	f107 020e 	add.w	r2, r7, #14
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	4798      	blx	r3
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 fdb5 	bl	800c164 <USBD_LL_Start>
 800a5fa:	4603      	mov	r3, r0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a60c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a630:	2b00      	cmp	r3, #0
 800a632:	d009      	beq.n	800a648 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	4611      	mov	r1, r2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b084      	sub	sp, #16
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	4611      	mov	r1, r2
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	4798      	blx	r3
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a678:	2303      	movs	r3, #3
 800a67a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 f8a6 	bl	800b7ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6ba:	f003 031f 	and.w	r3, r3, #31
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d01a      	beq.n	800a6f8 <USBD_LL_SetupStage+0x72>
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d822      	bhi.n	800a70c <USBD_LL_SetupStage+0x86>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <USBD_LL_SetupStage+0x4a>
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d00a      	beq.n	800a6e4 <USBD_LL_SetupStage+0x5e>
 800a6ce:	e01d      	b.n	800a70c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fad3 	bl	800ac84 <USBD_StdDevReq>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e2:	e020      	b.n	800a726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fb3b 	bl	800ad68 <USBD_StdItfReq>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f6:	e016      	b.n	800a726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fb9d 	bl	800ae40 <USBD_StdEPReq>
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]
      break;
 800a70a:	e00c      	b.n	800a726 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a712:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a716:	b2db      	uxtb	r3, r3
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 fd82 	bl	800c224 <USBD_LL_StallEP>
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]
      break;
 800a724:	bf00      	nop
  }

  return ret;
 800a726:	7bfb      	ldrb	r3, [r7, #15]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	460b      	mov	r3, r1
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a742:	7afb      	ldrb	r3, [r7, #11]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d16e      	bne.n	800a826 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a74e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a756:	2b03      	cmp	r3, #3
 800a758:	f040 8098 	bne.w	800a88c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d913      	bls.n	800a790 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	1ad2      	subs	r2, r2, r3
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	4293      	cmp	r3, r2
 800a780:	bf28      	it	cs
 800a782:	4613      	movcs	r3, r2
 800a784:	461a      	mov	r2, r3
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f001 f922 	bl	800b9d2 <USBD_CtlContinueRx>
 800a78e:	e07d      	b.n	800a88c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a796:	f003 031f 	and.w	r3, r3, #31
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d014      	beq.n	800a7c8 <USBD_LL_DataOutStage+0x98>
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d81d      	bhi.n	800a7de <USBD_LL_DataOutStage+0xae>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <USBD_LL_DataOutStage+0x7c>
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d003      	beq.n	800a7b2 <USBD_LL_DataOutStage+0x82>
 800a7aa:	e018      	b.n	800a7de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	75bb      	strb	r3, [r7, #22]
            break;
 800a7b0:	e018      	b.n	800a7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 f9d2 	bl	800ab66 <USBD_CoreFindIF>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c6:	e00d      	b.n	800a7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f9d4 	bl	800ab80 <USBD_CoreFindEP>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	75bb      	strb	r3, [r7, #22]
            break;
 800a7dc:	e002      	b.n	800a7e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75bb      	strb	r3, [r7, #22]
            break;
 800a7e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7e4:	7dbb      	ldrb	r3, [r7, #22]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d119      	bne.n	800a81e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d113      	bne.n	800a81e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7f6:	7dba      	ldrb	r2, [r7, #22]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	32ae      	adds	r2, #174	; 0xae
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00b      	beq.n	800a81e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a806:	7dba      	ldrb	r2, [r7, #22]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a80e:	7dba      	ldrb	r2, [r7, #22]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	32ae      	adds	r2, #174	; 0xae
 800a814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f001 f8e8 	bl	800b9f4 <USBD_CtlSendStatus>
 800a824:	e032      	b.n	800a88c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a826:	7afb      	ldrb	r3, [r7, #11]
 800a828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	4619      	mov	r1, r3
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 f9a5 	bl	800ab80 <USBD_CoreFindEP>
 800a836:	4603      	mov	r3, r0
 800a838:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a83a:	7dbb      	ldrb	r3, [r7, #22]
 800a83c:	2bff      	cmp	r3, #255	; 0xff
 800a83e:	d025      	beq.n	800a88c <USBD_LL_DataOutStage+0x15c>
 800a840:	7dbb      	ldrb	r3, [r7, #22]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d122      	bne.n	800a88c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d117      	bne.n	800a882 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a852:	7dba      	ldrb	r2, [r7, #22]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	32ae      	adds	r2, #174	; 0xae
 800a858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00f      	beq.n	800a882 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a862:	7dba      	ldrb	r2, [r7, #22]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a86a:	7dba      	ldrb	r2, [r7, #22]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	32ae      	adds	r2, #174	; 0xae
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	7afa      	ldrb	r2, [r7, #11]
 800a878:	4611      	mov	r1, r2
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	4798      	blx	r3
 800a87e:	4603      	mov	r3, r0
 800a880:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	e000      	b.n	800a88e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b086      	sub	sp, #24
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	607a      	str	r2, [r7, #4]
 800a8a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d16f      	bne.n	800a98a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3314      	adds	r3, #20
 800a8ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d15a      	bne.n	800a970 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d914      	bls.n	800a8f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	689a      	ldr	r2, [r3, #8]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	1ad2      	subs	r2, r2, r3
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f001 f84a 	bl	800b976 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f001 fd46 	bl	800c37a <USBD_LL_PrepareReceive>
 800a8ee:	e03f      	b.n	800a970 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d11c      	bne.n	800a936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a904:	429a      	cmp	r2, r3
 800a906:	d316      	bcc.n	800a936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a912:	429a      	cmp	r2, r3
 800a914:	d20f      	bcs.n	800a936 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a916:	2200      	movs	r2, #0
 800a918:	2100      	movs	r1, #0
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f001 f82b 	bl	800b976 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a928:	2300      	movs	r3, #0
 800a92a:	2200      	movs	r2, #0
 800a92c:	2100      	movs	r1, #0
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f001 fd23 	bl	800c37a <USBD_LL_PrepareReceive>
 800a934:	e01c      	b.n	800a970 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d10f      	bne.n	800a962 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a962:	2180      	movs	r1, #128	; 0x80
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f001 fc5d 	bl	800c224 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f001 f855 	bl	800ba1a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d03a      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff fe42 	bl	800a604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a988:	e032      	b.n	800a9f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a98a:	7afb      	ldrb	r3, [r7, #11]
 800a98c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a990:	b2db      	uxtb	r3, r3
 800a992:	4619      	mov	r1, r3
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 f8f3 	bl	800ab80 <USBD_CoreFindEP>
 800a99a:	4603      	mov	r3, r0
 800a99c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	2bff      	cmp	r3, #255	; 0xff
 800a9a2:	d025      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d122      	bne.n	800a9f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d11c      	bne.n	800a9f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9b6:	7dfa      	ldrb	r2, [r7, #23]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	32ae      	adds	r2, #174	; 0xae
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d014      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9c6:	7dfa      	ldrb	r2, [r7, #23]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9ce:	7dfa      	ldrb	r2, [r7, #23]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	32ae      	adds	r2, #174	; 0xae
 800a9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	7afa      	ldrb	r2, [r7, #11]
 800a9dc:	4611      	mov	r1, r2
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	4798      	blx	r3
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9e6:	7dbb      	ldrb	r3, [r7, #22]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a9ec:	7dbb      	ldrb	r3, [r7, #22]
 800a9ee:	e000      	b.n	800a9f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d014      	beq.n	800aa60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00e      	beq.n	800aa60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	6852      	ldr	r2, [r2, #4]
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	4611      	mov	r1, r2
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fb97 	bl	800c19a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2240      	movs	r2, #64	; 0x40
 800aa78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa7c:	2340      	movs	r3, #64	; 0x40
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2180      	movs	r1, #128	; 0x80
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 fb89 	bl	800c19a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2240      	movs	r2, #64	; 0x40
 800aa92:	621a      	str	r2, [r3, #32]

  return ret;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b04      	cmp	r3, #4
 800aad0:	d006      	beq.n	800aae0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2204      	movs	r2, #4
 800aae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b083      	sub	sp, #12
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d106      	bne.n	800ab18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d110      	bne.n	800ab5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d005      	beq.n	800ab5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b086      	sub	sp, #24
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	885b      	ldrh	r3, [r3, #2]
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d920      	bls.n	800ac04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800abca:	e013      	b.n	800abf4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800abcc:	f107 030a 	add.w	r3, r7, #10
 800abd0:	4619      	mov	r1, r3
 800abd2:	6978      	ldr	r0, [r7, #20]
 800abd4:	f000 f81b 	bl	800ac0e <USBD_GetNextDesc>
 800abd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	785b      	ldrb	r3, [r3, #1]
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d108      	bne.n	800abf4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	789b      	ldrb	r3, [r3, #2]
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	429a      	cmp	r2, r3
 800abee:	d008      	beq.n	800ac02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	885b      	ldrh	r3, [r3, #2]
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	897b      	ldrh	r3, [r7, #10]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d8e5      	bhi.n	800abcc <USBD_GetEpDesc+0x32>
 800ac00:	e000      	b.n	800ac04 <USBD_GetEpDesc+0x6a>
          break;
 800ac02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac04:	693b      	ldr	r3, [r7, #16]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b085      	sub	sp, #20
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	881a      	ldrh	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4413      	add	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4413      	add	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac66:	8a3b      	ldrh	r3, [r7, #16]
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	b21a      	sxth	r2, r3
 800ac6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	b21b      	sxth	r3, r3
 800ac74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac76:	89fb      	ldrh	r3, [r7, #14]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac9a:	2b40      	cmp	r3, #64	; 0x40
 800ac9c:	d005      	beq.n	800acaa <USBD_StdDevReq+0x26>
 800ac9e:	2b40      	cmp	r3, #64	; 0x40
 800aca0:	d857      	bhi.n	800ad52 <USBD_StdDevReq+0xce>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00f      	beq.n	800acc6 <USBD_StdDevReq+0x42>
 800aca6:	2b20      	cmp	r3, #32
 800aca8:	d153      	bne.n	800ad52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	32ae      	adds	r2, #174	; 0xae
 800acb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]
      break;
 800acc4:	e04a      	b.n	800ad5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	785b      	ldrb	r3, [r3, #1]
 800acca:	2b09      	cmp	r3, #9
 800accc:	d83b      	bhi.n	800ad46 <USBD_StdDevReq+0xc2>
 800acce:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <USBD_StdDevReq+0x50>)
 800acd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd4:	0800ad29 	.word	0x0800ad29
 800acd8:	0800ad3d 	.word	0x0800ad3d
 800acdc:	0800ad47 	.word	0x0800ad47
 800ace0:	0800ad33 	.word	0x0800ad33
 800ace4:	0800ad47 	.word	0x0800ad47
 800ace8:	0800ad07 	.word	0x0800ad07
 800acec:	0800acfd 	.word	0x0800acfd
 800acf0:	0800ad47 	.word	0x0800ad47
 800acf4:	0800ad1f 	.word	0x0800ad1f
 800acf8:	0800ad11 	.word	0x0800ad11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fa3c 	bl	800b17c <USBD_GetDescriptor>
          break;
 800ad04:	e024      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fbcb 	bl	800b4a4 <USBD_SetAddress>
          break;
 800ad0e:	e01f      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fc0a 	bl	800b52c <USBD_SetConfig>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]
          break;
 800ad1c:	e018      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fcad 	bl	800b680 <USBD_GetConfig>
          break;
 800ad26:	e013      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fcde 	bl	800b6ec <USBD_GetStatus>
          break;
 800ad30:	e00e      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fd0d 	bl	800b754 <USBD_SetFeature>
          break;
 800ad3a:	e009      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fd31 	bl	800b7a6 <USBD_ClrFeature>
          break;
 800ad44:	e004      	b.n	800ad50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fd88 	bl	800b85e <USBD_CtlError>
          break;
 800ad4e:	bf00      	nop
      }
      break;
 800ad50:	e004      	b.n	800ad5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fd82 	bl	800b85e <USBD_CtlError>
      break;
 800ad5a:	bf00      	nop
  }

  return ret;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop

0800ad68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad7e:	2b40      	cmp	r3, #64	; 0x40
 800ad80:	d005      	beq.n	800ad8e <USBD_StdItfReq+0x26>
 800ad82:	2b40      	cmp	r3, #64	; 0x40
 800ad84:	d852      	bhi.n	800ae2c <USBD_StdItfReq+0xc4>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <USBD_StdItfReq+0x26>
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	d14e      	bne.n	800ae2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	3b01      	subs	r3, #1
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d840      	bhi.n	800ae1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	889b      	ldrh	r3, [r3, #4]
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d836      	bhi.n	800ae14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	889b      	ldrh	r3, [r3, #4]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff fed9 	bl	800ab66 <USBD_CoreFindIF>
 800adb4:	4603      	mov	r3, r0
 800adb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	2bff      	cmp	r3, #255	; 0xff
 800adbc:	d01d      	beq.n	800adfa <USBD_StdItfReq+0x92>
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d11a      	bne.n	800adfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800adc4:	7bba      	ldrb	r2, [r7, #14]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	32ae      	adds	r2, #174	; 0xae
 800adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00f      	beq.n	800adf4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800add4:	7bba      	ldrb	r2, [r7, #14]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800addc:	7bba      	ldrb	r2, [r7, #14]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	32ae      	adds	r2, #174	; 0xae
 800ade2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	4798      	blx	r3
 800adee:	4603      	mov	r3, r0
 800adf0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adf2:	e004      	b.n	800adfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800adf4:	2303      	movs	r3, #3
 800adf6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adf8:	e001      	b.n	800adfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800adfa:	2303      	movs	r3, #3
 800adfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	88db      	ldrh	r3, [r3, #6]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d110      	bne.n	800ae28 <USBD_StdItfReq+0xc0>
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10d      	bne.n	800ae28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fdf1 	bl	800b9f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae12:	e009      	b.n	800ae28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fd21 	bl	800b85e <USBD_CtlError>
          break;
 800ae1c:	e004      	b.n	800ae28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fd1c 	bl	800b85e <USBD_CtlError>
          break;
 800ae26:	e000      	b.n	800ae2a <USBD_StdItfReq+0xc2>
          break;
 800ae28:	bf00      	nop
      }
      break;
 800ae2a:	e004      	b.n	800ae36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fd15 	bl	800b85e <USBD_CtlError>
      break;
 800ae34:	bf00      	nop
  }

  return ret;
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	889b      	ldrh	r3, [r3, #4]
 800ae52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae5c:	2b40      	cmp	r3, #64	; 0x40
 800ae5e:	d007      	beq.n	800ae70 <USBD_StdEPReq+0x30>
 800ae60:	2b40      	cmp	r3, #64	; 0x40
 800ae62:	f200 817f 	bhi.w	800b164 <USBD_StdEPReq+0x324>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d02a      	beq.n	800aec0 <USBD_StdEPReq+0x80>
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	f040 817a 	bne.w	800b164 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff fe83 	bl	800ab80 <USBD_CoreFindEP>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae7e:	7b7b      	ldrb	r3, [r7, #13]
 800ae80:	2bff      	cmp	r3, #255	; 0xff
 800ae82:	f000 8174 	beq.w	800b16e <USBD_StdEPReq+0x32e>
 800ae86:	7b7b      	ldrb	r3, [r7, #13]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f040 8170 	bne.w	800b16e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae8e:	7b7a      	ldrb	r2, [r7, #13]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae96:	7b7a      	ldrb	r2, [r7, #13]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	32ae      	adds	r2, #174	; 0xae
 800ae9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8163 	beq.w	800b16e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aea8:	7b7a      	ldrb	r2, [r7, #13]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	32ae      	adds	r2, #174	; 0xae
 800aeae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aebe:	e156      	b.n	800b16e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d008      	beq.n	800aeda <USBD_StdEPReq+0x9a>
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	f300 8145 	bgt.w	800b158 <USBD_StdEPReq+0x318>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 809b 	beq.w	800b00a <USBD_StdEPReq+0x1ca>
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d03c      	beq.n	800af52 <USBD_StdEPReq+0x112>
 800aed8:	e13e      	b.n	800b158 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d002      	beq.n	800aeec <USBD_StdEPReq+0xac>
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d016      	beq.n	800af18 <USBD_StdEPReq+0xd8>
 800aeea:	e02c      	b.n	800af46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00d      	beq.n	800af0e <USBD_StdEPReq+0xce>
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b80      	cmp	r3, #128	; 0x80
 800aef6:	d00a      	beq.n	800af0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 f991 	bl	800c224 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af02:	2180      	movs	r1, #128	; 0x80
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 f98d 	bl	800c224 <USBD_LL_StallEP>
 800af0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af0c:	e020      	b.n	800af50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fca4 	bl	800b85e <USBD_CtlError>
              break;
 800af16:	e01b      	b.n	800af50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	885b      	ldrh	r3, [r3, #2]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10e      	bne.n	800af3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00b      	beq.n	800af3e <USBD_StdEPReq+0xfe>
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	2b80      	cmp	r3, #128	; 0x80
 800af2a:	d008      	beq.n	800af3e <USBD_StdEPReq+0xfe>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	88db      	ldrh	r3, [r3, #6]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d104      	bne.n	800af3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 f973 	bl	800c224 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fd58 	bl	800b9f4 <USBD_CtlSendStatus>

              break;
 800af44:	e004      	b.n	800af50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fc88 	bl	800b85e <USBD_CtlError>
              break;
 800af4e:	bf00      	nop
          }
          break;
 800af50:	e107      	b.n	800b162 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d002      	beq.n	800af64 <USBD_StdEPReq+0x124>
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d016      	beq.n	800af90 <USBD_StdEPReq+0x150>
 800af62:	e04b      	b.n	800affc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af64:	7bbb      	ldrb	r3, [r7, #14]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00d      	beq.n	800af86 <USBD_StdEPReq+0x146>
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	2b80      	cmp	r3, #128	; 0x80
 800af6e:	d00a      	beq.n	800af86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 f955 	bl	800c224 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af7a:	2180      	movs	r1, #128	; 0x80
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 f951 	bl	800c224 <USBD_LL_StallEP>
 800af82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af84:	e040      	b.n	800b008 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fc68 	bl	800b85e <USBD_CtlError>
              break;
 800af8e:	e03b      	b.n	800b008 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d136      	bne.n	800b006 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af98:	7bbb      	ldrb	r3, [r7, #14]
 800af9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d004      	beq.n	800afac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 f95b 	bl	800c262 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fd21 	bl	800b9f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff fde2 	bl	800ab80 <USBD_CoreFindEP>
 800afbc:	4603      	mov	r3, r0
 800afbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afc0:	7b7b      	ldrb	r3, [r7, #13]
 800afc2:	2bff      	cmp	r3, #255	; 0xff
 800afc4:	d01f      	beq.n	800b006 <USBD_StdEPReq+0x1c6>
 800afc6:	7b7b      	ldrb	r3, [r7, #13]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d11c      	bne.n	800b006 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800afcc:	7b7a      	ldrb	r2, [r7, #13]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800afd4:	7b7a      	ldrb	r2, [r7, #13]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	32ae      	adds	r2, #174	; 0xae
 800afda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d010      	beq.n	800b006 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afe4:	7b7a      	ldrb	r2, [r7, #13]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	32ae      	adds	r2, #174	; 0xae
 800afea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	4798      	blx	r3
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800affa:	e004      	b.n	800b006 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fc2d 	bl	800b85e <USBD_CtlError>
              break;
 800b004:	e000      	b.n	800b008 <USBD_StdEPReq+0x1c8>
              break;
 800b006:	bf00      	nop
          }
          break;
 800b008:	e0ab      	b.n	800b162 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b02      	cmp	r3, #2
 800b014:	d002      	beq.n	800b01c <USBD_StdEPReq+0x1dc>
 800b016:	2b03      	cmp	r3, #3
 800b018:	d032      	beq.n	800b080 <USBD_StdEPReq+0x240>
 800b01a:	e097      	b.n	800b14c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d007      	beq.n	800b032 <USBD_StdEPReq+0x1f2>
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	2b80      	cmp	r3, #128	; 0x80
 800b026:	d004      	beq.n	800b032 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fc17 	bl	800b85e <USBD_CtlError>
                break;
 800b030:	e091      	b.n	800b156 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	da0b      	bge.n	800b052 <USBD_StdEPReq+0x212>
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	3310      	adds	r3, #16
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	4413      	add	r3, r2
 800b04e:	3304      	adds	r3, #4
 800b050:	e00b      	b.n	800b06a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	4413      	add	r3, r2
 800b068:	3304      	adds	r3, #4
 800b06a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2202      	movs	r2, #2
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fc61 	bl	800b940 <USBD_CtlSendData>
              break;
 800b07e:	e06a      	b.n	800b156 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b084:	2b00      	cmp	r3, #0
 800b086:	da11      	bge.n	800b0ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	f003 020f 	and.w	r2, r3, #15
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	440b      	add	r3, r1
 800b09a:	3324      	adds	r3, #36	; 0x24
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d117      	bne.n	800b0d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fbda 	bl	800b85e <USBD_CtlError>
                  break;
 800b0aa:	e054      	b.n	800b156 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	f003 020f 	and.w	r2, r3, #15
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	440b      	add	r3, r1
 800b0be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d104      	bne.n	800b0d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fbc7 	bl	800b85e <USBD_CtlError>
                  break;
 800b0d0:	e041      	b.n	800b156 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da0b      	bge.n	800b0f2 <USBD_StdEPReq+0x2b2>
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	3310      	adds	r3, #16
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	e00b      	b.n	800b10a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0f2:	7bbb      	ldrb	r3, [r7, #14]
 800b0f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	4413      	add	r3, r2
 800b108:	3304      	adds	r3, #4
 800b10a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <USBD_StdEPReq+0x2d8>
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	2b80      	cmp	r3, #128	; 0x80
 800b116:	d103      	bne.n	800b120 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	e00e      	b.n	800b13e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 f8bb 	bl	800c2a0 <USBD_LL_IsStallEP>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2201      	movs	r2, #1
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	e002      	b.n	800b13e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2202      	movs	r2, #2
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fbfb 	bl	800b940 <USBD_CtlSendData>
              break;
 800b14a:	e004      	b.n	800b156 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fb85 	bl	800b85e <USBD_CtlError>
              break;
 800b154:	bf00      	nop
          }
          break;
 800b156:	e004      	b.n	800b162 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fb7f 	bl	800b85e <USBD_CtlError>
          break;
 800b160:	bf00      	nop
      }
      break;
 800b162:	e005      	b.n	800b170 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fb79 	bl	800b85e <USBD_CtlError>
      break;
 800b16c:	e000      	b.n	800b170 <USBD_StdEPReq+0x330>
      break;
 800b16e:	bf00      	nop
  }

  return ret;
 800b170:	7bfb      	ldrb	r3, [r7, #15]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	0a1b      	lsrs	r3, r3, #8
 800b198:	b29b      	uxth	r3, r3
 800b19a:	3b01      	subs	r3, #1
 800b19c:	2b0e      	cmp	r3, #14
 800b19e:	f200 8152 	bhi.w	800b446 <USBD_GetDescriptor+0x2ca>
 800b1a2:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <USBD_GetDescriptor+0x2c>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b219 	.word	0x0800b219
 800b1ac:	0800b231 	.word	0x0800b231
 800b1b0:	0800b271 	.word	0x0800b271
 800b1b4:	0800b447 	.word	0x0800b447
 800b1b8:	0800b447 	.word	0x0800b447
 800b1bc:	0800b3e7 	.word	0x0800b3e7
 800b1c0:	0800b413 	.word	0x0800b413
 800b1c4:	0800b447 	.word	0x0800b447
 800b1c8:	0800b447 	.word	0x0800b447
 800b1cc:	0800b447 	.word	0x0800b447
 800b1d0:	0800b447 	.word	0x0800b447
 800b1d4:	0800b447 	.word	0x0800b447
 800b1d8:	0800b447 	.word	0x0800b447
 800b1dc:	0800b447 	.word	0x0800b447
 800b1e0:	0800b1e5 	.word	0x0800b1e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7c12      	ldrb	r2, [r2, #16]
 800b1fc:	f107 0108 	add.w	r1, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b206:	e126      	b.n	800b456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fb27 	bl	800b85e <USBD_CtlError>
        err++;
 800b210:	7afb      	ldrb	r3, [r7, #11]
 800b212:	3301      	adds	r3, #1
 800b214:	72fb      	strb	r3, [r7, #11]
      break;
 800b216:	e11e      	b.n	800b456 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	7c12      	ldrb	r2, [r2, #16]
 800b224:	f107 0108 	add.w	r1, r7, #8
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
 800b22c:	60f8      	str	r0, [r7, #12]
      break;
 800b22e:	e112      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7c1b      	ldrb	r3, [r3, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10d      	bne.n	800b254 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b240:	f107 0208 	add.w	r2, r7, #8
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
 800b248:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3301      	adds	r3, #1
 800b24e:	2202      	movs	r2, #2
 800b250:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b252:	e100      	b.n	800b456 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	f107 0208 	add.w	r2, r7, #8
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	2202      	movs	r2, #2
 800b26c:	701a      	strb	r2, [r3, #0]
      break;
 800b26e:	e0f2      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b05      	cmp	r3, #5
 800b278:	f200 80ac 	bhi.w	800b3d4 <USBD_GetDescriptor+0x258>
 800b27c:	a201      	add	r2, pc, #4	; (adr r2, 800b284 <USBD_GetDescriptor+0x108>)
 800b27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b282:	bf00      	nop
 800b284:	0800b29d 	.word	0x0800b29d
 800b288:	0800b2d1 	.word	0x0800b2d1
 800b28c:	0800b305 	.word	0x0800b305
 800b290:	0800b339 	.word	0x0800b339
 800b294:	0800b36d 	.word	0x0800b36d
 800b298:	0800b3a1 	.word	0x0800b3a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7c12      	ldrb	r2, [r2, #16]
 800b2b4:	f107 0108 	add.w	r1, r7, #8
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
 800b2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2be:	e091      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 facb 	bl	800b85e <USBD_CtlError>
            err++;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ce:	e089      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f2:	e077      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fab1 	bl	800b85e <USBD_CtlError>
            err++;
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	3301      	adds	r3, #1
 800b300:	72fb      	strb	r3, [r7, #11]
          break;
 800b302:	e06f      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00b      	beq.n	800b328 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b326:	e05d      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa97 	bl	800b85e <USBD_CtlError>
            err++;
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	3301      	adds	r3, #1
 800b334:	72fb      	strb	r3, [r7, #11]
          break;
 800b336:	e055      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	7c12      	ldrb	r2, [r2, #16]
 800b350:	f107 0108 	add.w	r1, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35a:	e043      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa7d 	bl	800b85e <USBD_CtlError>
            err++;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	3301      	adds	r3, #1
 800b368:	72fb      	strb	r3, [r7, #11]
          break;
 800b36a:	e03b      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	7c12      	ldrb	r2, [r2, #16]
 800b384:	f107 0108 	add.w	r1, r7, #8
 800b388:	4610      	mov	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b38e:	e029      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa63 	bl	800b85e <USBD_CtlError>
            err++;
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	3301      	adds	r3, #1
 800b39c:	72fb      	strb	r3, [r7, #11]
          break;
 800b39e:	e021      	b.n	800b3e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7c12      	ldrb	r2, [r2, #16]
 800b3b8:	f107 0108 	add.w	r1, r7, #8
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4798      	blx	r3
 800b3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c2:	e00f      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa49 	bl	800b85e <USBD_CtlError>
            err++;
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d2:	e007      	b.n	800b3e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa41 	bl	800b85e <USBD_CtlError>
          err++;
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3e2:	bf00      	nop
      }
      break;
 800b3e4:	e037      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	7c1b      	ldrb	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	f107 0208 	add.w	r2, r7, #8
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4798      	blx	r3
 800b3fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b400:	e029      	b.n	800b456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fa2a 	bl	800b85e <USBD_CtlError>
        err++;
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	3301      	adds	r3, #1
 800b40e:	72fb      	strb	r3, [r7, #11]
      break;
 800b410:	e021      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7c1b      	ldrb	r3, [r3, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10d      	bne.n	800b436 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b422:	f107 0208 	add.w	r2, r7, #8
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
 800b42a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	2207      	movs	r2, #7
 800b432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b434:	e00f      	b.n	800b456 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fa10 	bl	800b85e <USBD_CtlError>
        err++;
 800b43e:	7afb      	ldrb	r3, [r7, #11]
 800b440:	3301      	adds	r3, #1
 800b442:	72fb      	strb	r3, [r7, #11]
      break;
 800b444:	e007      	b.n	800b456 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa08 	bl	800b85e <USBD_CtlError>
      err++;
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	3301      	adds	r3, #1
 800b452:	72fb      	strb	r3, [r7, #11]
      break;
 800b454:	bf00      	nop
  }

  if (err != 0U)
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d11e      	bne.n	800b49a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	88db      	ldrh	r3, [r3, #6]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d016      	beq.n	800b492 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b464:	893b      	ldrh	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	88da      	ldrh	r2, [r3, #6]
 800b46e:	893b      	ldrh	r3, [r7, #8]
 800b470:	4293      	cmp	r3, r2
 800b472:	bf28      	it	cs
 800b474:	4613      	movcs	r3, r2
 800b476:	b29b      	uxth	r3, r3
 800b478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b47a:	893b      	ldrh	r3, [r7, #8]
 800b47c:	461a      	mov	r2, r3
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fa5d 	bl	800b940 <USBD_CtlSendData>
 800b486:	e009      	b.n	800b49c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f9e7 	bl	800b85e <USBD_CtlError>
 800b490:	e004      	b.n	800b49c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 faae 	bl	800b9f4 <USBD_CtlSendStatus>
 800b498:	e000      	b.n	800b49c <USBD_GetDescriptor+0x320>
    return;
 800b49a:	bf00      	nop
  }
}
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop

0800b4a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	889b      	ldrh	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d131      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88db      	ldrh	r3, [r3, #6]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d12d      	bne.n	800b51a <USBD_SetAddress+0x76>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	885b      	ldrh	r3, [r3, #2]
 800b4c2:	2b7f      	cmp	r3, #127	; 0x7f
 800b4c4:	d829      	bhi.n	800b51a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	d104      	bne.n	800b4e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f9bc 	bl	800b85e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e6:	e01d      	b.n	800b524 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7bfa      	ldrb	r2, [r7, #15]
 800b4ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 ff00 	bl	800c2fa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fa7a 	bl	800b9f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d004      	beq.n	800b510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2202      	movs	r2, #2
 800b50a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50e:	e009      	b.n	800b524 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b518:	e004      	b.n	800b524 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f99e 	bl	800b85e <USBD_CtlError>
  }
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	885b      	ldrh	r3, [r3, #2]
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <USBD_SetConfig+0x150>)
 800b542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b544:	4b4d      	ldr	r3, [pc, #308]	; (800b67c <USBD_SetConfig+0x150>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d905      	bls.n	800b558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f985 	bl	800b85e <USBD_CtlError>
    return USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	e08c      	b.n	800b672 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d002      	beq.n	800b56a <USBD_SetConfig+0x3e>
 800b564:	2b03      	cmp	r3, #3
 800b566:	d029      	beq.n	800b5bc <USBD_SetConfig+0x90>
 800b568:	e075      	b.n	800b656 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b56a:	4b44      	ldr	r3, [pc, #272]	; (800b67c <USBD_SetConfig+0x150>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d020      	beq.n	800b5b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b572:	4b42      	ldr	r3, [pc, #264]	; (800b67c <USBD_SetConfig+0x150>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b57c:	4b3f      	ldr	r3, [pc, #252]	; (800b67c <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff f849 	bl	800a61a <USBD_SetClassConfig>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d008      	beq.n	800b5a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f962 	bl	800b85e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5a2:	e065      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa25 	bl	800b9f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5b2:	e05d      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa1d 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b5ba:	e059      	b.n	800b670 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5bc:	4b2f      	ldr	r3, [pc, #188]	; (800b67c <USBD_SetConfig+0x150>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d112      	bne.n	800b5ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b5cc:	4b2b      	ldr	r3, [pc, #172]	; (800b67c <USBD_SetConfig+0x150>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5d6:	4b29      	ldr	r3, [pc, #164]	; (800b67c <USBD_SetConfig+0x150>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff f838 	bl	800a652 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa06 	bl	800b9f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5e8:	e042      	b.n	800b670 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5ea:	4b24      	ldr	r3, [pc, #144]	; (800b67c <USBD_SetConfig+0x150>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d02a      	beq.n	800b64e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff f826 	bl	800a652 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b606:	4b1d      	ldr	r3, [pc, #116]	; (800b67c <USBD_SetConfig+0x150>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b610:	4b1a      	ldr	r3, [pc, #104]	; (800b67c <USBD_SetConfig+0x150>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fe ffff 	bl	800a61a <USBD_SetClassConfig>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f918 	bl	800b85e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff f80b 	bl	800a652 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b644:	e014      	b.n	800b670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f9d4 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b64c:	e010      	b.n	800b670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9d0 	bl	800b9f4 <USBD_CtlSendStatus>
      break;
 800b654:	e00c      	b.n	800b670 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f900 	bl	800b85e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <USBD_SetConfig+0x150>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7fe fff4 	bl	800a652 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b66a:	2303      	movs	r3, #3
 800b66c:	73fb      	strb	r3, [r7, #15]
      break;
 800b66e:	bf00      	nop
  }

  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200002f8 	.word	0x200002f8

0800b680 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	88db      	ldrh	r3, [r3, #6]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d004      	beq.n	800b69c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f8e2 	bl	800b85e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b69a:	e023      	b.n	800b6e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	dc02      	bgt.n	800b6ae <USBD_GetConfig+0x2e>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dc03      	bgt.n	800b6b4 <USBD_GetConfig+0x34>
 800b6ac:	e015      	b.n	800b6da <USBD_GetConfig+0x5a>
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d00b      	beq.n	800b6ca <USBD_GetConfig+0x4a>
 800b6b2:	e012      	b.n	800b6da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	2201      	movs	r2, #1
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f93c 	bl	800b940 <USBD_CtlSendData>
        break;
 800b6c8:	e00c      	b.n	800b6e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f934 	bl	800b940 <USBD_CtlSendData>
        break;
 800b6d8:	e004      	b.n	800b6e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f8be 	bl	800b85e <USBD_CtlError>
        break;
 800b6e2:	bf00      	nop
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	3b01      	subs	r3, #1
 800b700:	2b02      	cmp	r3, #2
 800b702:	d81e      	bhi.n	800b742 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	88db      	ldrh	r3, [r3, #6]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d004      	beq.n	800b716 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f8a5 	bl	800b85e <USBD_CtlError>
        break;
 800b714:	e01a      	b.n	800b74c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f043 0202 	orr.w	r2, r3, #2
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	330c      	adds	r3, #12
 800b736:	2202      	movs	r2, #2
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f900 	bl	800b940 <USBD_CtlSendData>
      break;
 800b740:	e004      	b.n	800b74c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f88a 	bl	800b85e <USBD_CtlError>
      break;
 800b74a:	bf00      	nop
  }
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	885b      	ldrh	r3, [r3, #2]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d107      	bne.n	800b776 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f940 	bl	800b9f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b774:	e013      	b.n	800b79e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	885b      	ldrh	r3, [r3, #2]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d10b      	bne.n	800b796 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	889b      	ldrh	r3, [r3, #4]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b29b      	uxth	r3, r3
 800b786:	b2da      	uxtb	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f930 	bl	800b9f4 <USBD_CtlSendStatus>
}
 800b794:	e003      	b.n	800b79e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f860 	bl	800b85e <USBD_CtlError>
}
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d80b      	bhi.n	800b7d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	885b      	ldrh	r3, [r3, #2]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d10c      	bne.n	800b7e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f910 	bl	800b9f4 <USBD_CtlSendStatus>
      }
      break;
 800b7d4:	e004      	b.n	800b7e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f840 	bl	800b85e <USBD_CtlError>
      break;
 800b7de:	e000      	b.n	800b7e2 <USBD_ClrFeature+0x3c>
      break;
 800b7e0:	bf00      	nop
  }
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	781a      	ldrb	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff fa17 	bl	800ac48 <SWAPBYTE>
 800b81a:	4603      	mov	r3, r0
 800b81c:	461a      	mov	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3301      	adds	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff fa0a 	bl	800ac48 <SWAPBYTE>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	3301      	adds	r3, #1
 800b846:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff f9fd 	bl	800ac48 <SWAPBYTE>
 800b84e:	4603      	mov	r3, r0
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	80da      	strh	r2, [r3, #6]
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b868:	2180      	movs	r1, #128	; 0x80
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fcda 	bl	800c224 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b870:	2100      	movs	r1, #0
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fcd6 	bl	800c224 <USBD_LL_StallEP>
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d036      	beq.n	800b904 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b89a:	6938      	ldr	r0, [r7, #16]
 800b89c:	f000 f836 	bl	800b90c <USBD_GetLen>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	7812      	ldrb	r2, [r2, #0]
 800b8b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8d0:	e013      	b.n	800b8fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	7812      	ldrb	r2, [r2, #0]
 800b8dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	613b      	str	r3, [r7, #16]
    idx++;
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e7      	bne.n	800b8d2 <USBD_GetString+0x52>
 800b902:	e000      	b.n	800b906 <USBD_GetString+0x86>
    return;
 800b904:	bf00      	nop
  }
}
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b91c:	e005      	b.n	800b92a <USBD_GetLen+0x1e>
  {
    len++;
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	3301      	adds	r3, #1
 800b922:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3301      	adds	r3, #1
 800b928:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1f5      	bne.n	800b91e <USBD_GetLen+0x12>
  }

  return len;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2202      	movs	r2, #2
 800b950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	2100      	movs	r1, #0
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 fce6 	bl	800c338 <USBD_LL_Transmit>

  return USBD_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	2100      	movs	r1, #0
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 fcd5 	bl	800c338 <USBD_LL_Transmit>

  return USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f000 fcd9 	bl	800c37a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b084      	sub	sp, #16
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 fcc8 	bl	800c37a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2204      	movs	r2, #4
 800ba00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba04:	2300      	movs	r3, #0
 800ba06:	2200      	movs	r2, #0
 800ba08:	2100      	movs	r1, #0
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fc94 	bl	800c338 <USBD_LL_Transmit>

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2205      	movs	r2, #5
 800ba26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fca2 	bl	800c37a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ba44:	2200      	movs	r2, #0
 800ba46:	4912      	ldr	r1, [pc, #72]	; (800ba90 <MX_USB_Device_Init+0x50>)
 800ba48:	4812      	ldr	r0, [pc, #72]	; (800ba94 <MX_USB_Device_Init+0x54>)
 800ba4a:	f7fe fd69 	bl	800a520 <USBD_Init>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ba54:	f7f5 f946 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ba58:	490f      	ldr	r1, [pc, #60]	; (800ba98 <MX_USB_Device_Init+0x58>)
 800ba5a:	480e      	ldr	r0, [pc, #56]	; (800ba94 <MX_USB_Device_Init+0x54>)
 800ba5c:	f7fe fd90 	bl	800a580 <USBD_RegisterClass>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ba66:	f7f5 f93d 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ba6a:	490c      	ldr	r1, [pc, #48]	; (800ba9c <MX_USB_Device_Init+0x5c>)
 800ba6c:	4809      	ldr	r0, [pc, #36]	; (800ba94 <MX_USB_Device_Init+0x54>)
 800ba6e:	f7fe fc87 	bl	800a380 <USBD_CDC_RegisterInterface>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ba78:	f7f5 f934 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ba7c:	4805      	ldr	r0, [pc, #20]	; (800ba94 <MX_USB_Device_Init+0x54>)
 800ba7e:	f7fe fdb5 	bl	800a5ec <USBD_Start>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ba88:	f7f5 f92c 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ba8c:	bf00      	nop
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	200000b4 	.word	0x200000b4
 800ba94:	200002fc 	.word	0x200002fc
 800ba98:	20000020 	.word	0x20000020
 800ba9c:	200000a0 	.word	0x200000a0

0800baa0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800baa4:	2200      	movs	r2, #0
 800baa6:	4905      	ldr	r1, [pc, #20]	; (800babc <CDC_Init_FS+0x1c>)
 800baa8:	4805      	ldr	r0, [pc, #20]	; (800bac0 <CDC_Init_FS+0x20>)
 800baaa:	f7fe fc83 	bl	800a3b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800baae:	4905      	ldr	r1, [pc, #20]	; (800bac4 <CDC_Init_FS+0x24>)
 800bab0:	4803      	ldr	r0, [pc, #12]	; (800bac0 <CDC_Init_FS+0x20>)
 800bab2:	f7fe fca1 	bl	800a3f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bab6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bab8:	4618      	mov	r0, r3
 800baba:	bd80      	pop	{r7, pc}
 800babc:	20000dd8 	.word	0x20000dd8
 800bac0:	200002fc 	.word	0x200002fc
 800bac4:	200005d8 	.word	0x200005d8

0800bac8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bac8:	b480      	push	{r7}
 800baca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bacc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bace:	4618      	mov	r0, r3
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	71fb      	strb	r3, [r7, #7]
 800bae4:	4613      	mov	r3, r2
 800bae6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bae8:	79fb      	ldrb	r3, [r7, #7]
 800baea:	2b23      	cmp	r3, #35	; 0x23
 800baec:	d84a      	bhi.n	800bb84 <CDC_Control_FS+0xac>
 800baee:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <CDC_Control_FS+0x1c>)
 800baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf4:	0800bb85 	.word	0x0800bb85
 800baf8:	0800bb85 	.word	0x0800bb85
 800bafc:	0800bb85 	.word	0x0800bb85
 800bb00:	0800bb85 	.word	0x0800bb85
 800bb04:	0800bb85 	.word	0x0800bb85
 800bb08:	0800bb85 	.word	0x0800bb85
 800bb0c:	0800bb85 	.word	0x0800bb85
 800bb10:	0800bb85 	.word	0x0800bb85
 800bb14:	0800bb85 	.word	0x0800bb85
 800bb18:	0800bb85 	.word	0x0800bb85
 800bb1c:	0800bb85 	.word	0x0800bb85
 800bb20:	0800bb85 	.word	0x0800bb85
 800bb24:	0800bb85 	.word	0x0800bb85
 800bb28:	0800bb85 	.word	0x0800bb85
 800bb2c:	0800bb85 	.word	0x0800bb85
 800bb30:	0800bb85 	.word	0x0800bb85
 800bb34:	0800bb85 	.word	0x0800bb85
 800bb38:	0800bb85 	.word	0x0800bb85
 800bb3c:	0800bb85 	.word	0x0800bb85
 800bb40:	0800bb85 	.word	0x0800bb85
 800bb44:	0800bb85 	.word	0x0800bb85
 800bb48:	0800bb85 	.word	0x0800bb85
 800bb4c:	0800bb85 	.word	0x0800bb85
 800bb50:	0800bb85 	.word	0x0800bb85
 800bb54:	0800bb85 	.word	0x0800bb85
 800bb58:	0800bb85 	.word	0x0800bb85
 800bb5c:	0800bb85 	.word	0x0800bb85
 800bb60:	0800bb85 	.word	0x0800bb85
 800bb64:	0800bb85 	.word	0x0800bb85
 800bb68:	0800bb85 	.word	0x0800bb85
 800bb6c:	0800bb85 	.word	0x0800bb85
 800bb70:	0800bb85 	.word	0x0800bb85
 800bb74:	0800bb85 	.word	0x0800bb85
 800bb78:	0800bb85 	.word	0x0800bb85
 800bb7c:	0800bb85 	.word	0x0800bb85
 800bb80:	0800bb85 	.word	0x0800bb85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bb84:	bf00      	nop
  }

  return (USBD_OK);
 800bb86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	4805      	ldr	r0, [pc, #20]	; (800bbb8 <CDC_Receive_FS+0x24>)
 800bba2:	f7fe fc29 	bl	800a3f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bba6:	4804      	ldr	r0, [pc, #16]	; (800bbb8 <CDC_Receive_FS+0x24>)
 800bba8:	f7fe fc84 	bl	800a4b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bbac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	200002fc 	.word	0x200002fc

0800bbbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bbcc:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <CDC_Transmit_FS+0x48>)
 800bbce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e00b      	b.n	800bbfa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bbe2:	887b      	ldrh	r3, [r7, #2]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	4806      	ldr	r0, [pc, #24]	; (800bc04 <CDC_Transmit_FS+0x48>)
 800bbea:	f7fe fbe3 	bl	800a3b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bbee:	4805      	ldr	r0, [pc, #20]	; (800bc04 <CDC_Transmit_FS+0x48>)
 800bbf0:	f7fe fc20 	bl	800a434 <USBD_CDC_TransmitPacket>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	200002fc 	.word	0x200002fc

0800bc08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
	...

0800bc2c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	4603      	mov	r3, r0
 800bc34:	6039      	str	r1, [r7, #0]
 800bc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2212      	movs	r2, #18
 800bc3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bc3e:	4b03      	ldr	r3, [pc, #12]	; (800bc4c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	200000d4 	.word	0x200000d4

0800bc50 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	6039      	str	r1, [r7, #0]
 800bc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	2204      	movs	r2, #4
 800bc60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc62:	4b03      	ldr	r3, [pc, #12]	; (800bc70 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	200000e8 	.word	0x200000e8

0800bc74 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6039      	str	r1, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d105      	bne.n	800bc92 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bc86:	683a      	ldr	r2, [r7, #0]
 800bc88:	4907      	ldr	r1, [pc, #28]	; (800bca8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bc8a:	4808      	ldr	r0, [pc, #32]	; (800bcac <USBD_CDC_ProductStrDescriptor+0x38>)
 800bc8c:	f7ff fdf8 	bl	800b880 <USBD_GetString>
 800bc90:	e004      	b.n	800bc9c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	4904      	ldr	r1, [pc, #16]	; (800bca8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bc96:	4805      	ldr	r0, [pc, #20]	; (800bcac <USBD_CDC_ProductStrDescriptor+0x38>)
 800bc98:	f7ff fdf2 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc9c:	4b02      	ldr	r3, [pc, #8]	; (800bca8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200015d8 	.word	0x200015d8
 800bcac:	08014074 	.word	0x08014074

0800bcb0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	6039      	str	r1, [r7, #0]
 800bcba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	4904      	ldr	r1, [pc, #16]	; (800bcd0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bcc0:	4804      	ldr	r0, [pc, #16]	; (800bcd4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bcc2:	f7ff fddd 	bl	800b880 <USBD_GetString>
  return USBD_StrDesc;
 800bcc6:	4b02      	ldr	r3, [pc, #8]	; (800bcd0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	200015d8 	.word	0x200015d8
 800bcd4:	0801408c 	.word	0x0801408c

0800bcd8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	6039      	str	r1, [r7, #0]
 800bce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	221a      	movs	r2, #26
 800bce8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcea:	f000 f843 	bl	800bd74 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bcee:	4b02      	ldr	r3, [pc, #8]	; (800bcf8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	200000ec 	.word	0x200000ec

0800bcfc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d105      	bne.n	800bd1a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	4907      	ldr	r1, [pc, #28]	; (800bd30 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bd12:	4808      	ldr	r0, [pc, #32]	; (800bd34 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bd14:	f7ff fdb4 	bl	800b880 <USBD_GetString>
 800bd18:	e004      	b.n	800bd24 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	4904      	ldr	r1, [pc, #16]	; (800bd30 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bd1e:	4805      	ldr	r0, [pc, #20]	; (800bd34 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bd20:	f7ff fdae 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd24:	4b02      	ldr	r3, [pc, #8]	; (800bd30 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	200015d8 	.word	0x200015d8
 800bd34:	080140a0 	.word	0x080140a0

0800bd38 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	6039      	str	r1, [r7, #0]
 800bd42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd44:	79fb      	ldrb	r3, [r7, #7]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d105      	bne.n	800bd56 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	4907      	ldr	r1, [pc, #28]	; (800bd6c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bd4e:	4808      	ldr	r0, [pc, #32]	; (800bd70 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bd50:	f7ff fd96 	bl	800b880 <USBD_GetString>
 800bd54:	e004      	b.n	800bd60 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4904      	ldr	r1, [pc, #16]	; (800bd6c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bd5a:	4805      	ldr	r0, [pc, #20]	; (800bd70 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bd5c:	f7ff fd90 	bl	800b880 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd60:	4b02      	ldr	r3, [pc, #8]	; (800bd6c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	200015d8 	.word	0x200015d8
 800bd70:	080140ac 	.word	0x080140ac

0800bd74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd7a:	4b0f      	ldr	r3, [pc, #60]	; (800bdb8 <Get_SerialNum+0x44>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd80:	4b0e      	ldr	r3, [pc, #56]	; (800bdbc <Get_SerialNum+0x48>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd86:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <Get_SerialNum+0x4c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4413      	add	r3, r2
 800bd92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d009      	beq.n	800bdae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd9a:	2208      	movs	r2, #8
 800bd9c:	4909      	ldr	r1, [pc, #36]	; (800bdc4 <Get_SerialNum+0x50>)
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f000 f814 	bl	800bdcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bda4:	2204      	movs	r2, #4
 800bda6:	4908      	ldr	r1, [pc, #32]	; (800bdc8 <Get_SerialNum+0x54>)
 800bda8:	68b8      	ldr	r0, [r7, #8]
 800bdaa:	f000 f80f 	bl	800bdcc <IntToUnicode>
  }
}
 800bdae:	bf00      	nop
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	1fff7590 	.word	0x1fff7590
 800bdbc:	1fff7594 	.word	0x1fff7594
 800bdc0:	1fff7598 	.word	0x1fff7598
 800bdc4:	200000ee 	.word	0x200000ee
 800bdc8:	200000fe 	.word	0x200000fe

0800bdcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bdde:	2300      	movs	r3, #0
 800bde0:	75fb      	strb	r3, [r7, #23]
 800bde2:	e027      	b.n	800be34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	0f1b      	lsrs	r3, r3, #28
 800bde8:	2b09      	cmp	r3, #9
 800bdea:	d80b      	bhi.n	800be04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	0f1b      	lsrs	r3, r3, #28
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	440b      	add	r3, r1
 800bdfc:	3230      	adds	r2, #48	; 0x30
 800bdfe:	b2d2      	uxtb	r2, r2
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	e00a      	b.n	800be1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	0f1b      	lsrs	r3, r3, #28
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	4619      	mov	r1, r3
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	440b      	add	r3, r1
 800be14:	3237      	adds	r2, #55	; 0x37
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	011b      	lsls	r3, r3, #4
 800be1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	005b      	lsls	r3, r3, #1
 800be24:	3301      	adds	r3, #1
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	4413      	add	r3, r2
 800be2a:	2200      	movs	r2, #0
 800be2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	3301      	adds	r3, #1
 800be32:	75fb      	strb	r3, [r7, #23]
 800be34:	7dfa      	ldrb	r2, [r7, #23]
 800be36:	79fb      	ldrb	r3, [r7, #7]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d3d3      	bcc.n	800bde4 <IntToUnicode+0x18>
  }
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <LL_AHB2_GRP1_EnableClock>:
{
 800be4a:	b480      	push	{r7}
 800be4c:	b085      	sub	sp, #20
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800be52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4313      	orrs	r3, r2
 800be60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800be62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4013      	ands	r3, r2
 800be6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be6e:	68fb      	ldr	r3, [r7, #12]
}
 800be70:	bf00      	nop
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <LL_APB1_GRP1_EnableClock>:
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800be84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4313      	orrs	r3, r2
 800be92:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800be94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4013      	ands	r3, r2
 800be9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bea0:	68fb      	ldr	r3, [r7, #12]
}
 800bea2:	bf00      	nop
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
	...

0800beb0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b09c      	sub	sp, #112	; 0x70
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800beb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	605a      	str	r2, [r3, #4]
 800bec2:	609a      	str	r2, [r3, #8]
 800bec4:	60da      	str	r2, [r3, #12]
 800bec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bec8:	f107 030c 	add.w	r3, r7, #12
 800becc:	2250      	movs	r2, #80	; 0x50
 800bece:	2100      	movs	r1, #0
 800bed0:	4618      	mov	r0, r3
 800bed2:	f007 fbad 	bl	8013630 <memset>
  if(pcdHandle->Instance==USB)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a1b      	ldr	r2, [pc, #108]	; (800bf48 <HAL_PCD_MspInit+0x98>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d12f      	bne.n	800bf40 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bee4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bee6:	2300      	movs	r3, #0
 800bee8:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800beea:	f107 030c 	add.w	r3, r7, #12
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fa f8c5 	bl	800607e <HAL_RCCEx_PeriphCLKConfig>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800befa:	f7f4 fef3 	bl	8000ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800befe:	2001      	movs	r0, #1
 800bf00:	f7ff ffa3 	bl	800be4a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bf08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf12:	2300      	movs	r3, #0
 800bf14:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800bf16:	230a      	movs	r3, #10
 800bf18:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bf1e:	4619      	mov	r1, r3
 800bf20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bf24:	f7f6 fd2c 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf28:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800bf2c:	f7ff ffa6 	bl	800be7c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bf30:	2200      	movs	r2, #0
 800bf32:	2100      	movs	r1, #0
 800bf34:	2014      	movs	r0, #20
 800bf36:	f7f5 fb40 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bf3a:	2014      	movs	r0, #20
 800bf3c:	f7f5 fb57 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf40:	bf00      	nop
 800bf42:	3770      	adds	r7, #112	; 0x70
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	40006800 	.word	0x40006800

0800bf4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bf60:	4619      	mov	r1, r3
 800bf62:	4610      	mov	r0, r2
 800bf64:	f7fe fb8f 	bl	800a686 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bf82:	78fa      	ldrb	r2, [r7, #3]
 800bf84:	6879      	ldr	r1, [r7, #4]
 800bf86:	4613      	mov	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	440b      	add	r3, r1
 800bf90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	78fb      	ldrb	r3, [r7, #3]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	f7fe fbc9 	bl	800a730 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bf9e:	bf00      	nop
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800bfb8:	78fa      	ldrb	r2, [r7, #3]
 800bfba:	6879      	ldr	r1, [r7, #4]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	440b      	add	r3, r1
 800bfc6:	333c      	adds	r3, #60	; 0x3c
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	78fb      	ldrb	r3, [r7, #3]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f7fe fc62 	bl	800a896 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fd9c 	bl	800ab26 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bffe:	2301      	movs	r3, #1
 800c000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	2b02      	cmp	r3, #2
 800c008:	d001      	beq.n	800c00e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c00a:	f7f4 fe6b 	bl	8000ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c014:	7bfa      	ldrb	r2, [r7, #15]
 800c016:	4611      	mov	r1, r2
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe fd40 	bl	800aa9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe fce8 	bl	800a9fa <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c02a:	bf00      	nop
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c042:	4618      	mov	r0, r3
 800c044:	f7fe fd3b 	bl	800aabe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d005      	beq.n	800c05c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c050:	4b04      	ldr	r3, [pc, #16]	; (800c064 <HAL_PCD_SuspendCallback+0x30>)
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	4a03      	ldr	r2, [pc, #12]	; (800c064 <HAL_PCD_SuspendCallback+0x30>)
 800c056:	f043 0306 	orr.w	r3, r3, #6
 800c05a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	e000ed00 	.word	0xe000ed00

0800c068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d007      	beq.n	800c088 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c078:	4b08      	ldr	r3, [pc, #32]	; (800c09c <HAL_PCD_ResumeCallback+0x34>)
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	4a07      	ldr	r2, [pc, #28]	; (800c09c <HAL_PCD_ResumeCallback+0x34>)
 800c07e:	f023 0306 	bic.w	r3, r3, #6
 800c082:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c084:	f000 f9fc 	bl	800c480 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fd31 	bl	800aaf6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	e000ed00 	.word	0xe000ed00

0800c0a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c0a8:	4a2c      	ldr	r2, [pc, #176]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a2a      	ldr	r2, [pc, #168]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c0b8:	f7f8 fcaa 	bl	8004a10 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800c0bc:	4b27      	ldr	r3, [pc, #156]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0be:	4a28      	ldr	r2, [pc, #160]	; (800c160 <USBD_LL_Init+0xc0>)
 800c0c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c0c2:	4b26      	ldr	r3, [pc, #152]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c0c8:	4b24      	ldr	r3, [pc, #144]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c0ce:	4b23      	ldr	r3, [pc, #140]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0d0:	2202      	movs	r2, #2
 800c0d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c0d4:	4b21      	ldr	r3, [pc, #132]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c0da:	4b20      	ldr	r3, [pc, #128]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c0e0:	4b1e      	ldr	r3, [pc, #120]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c0e6:	4b1d      	ldr	r3, [pc, #116]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c0ec:	481b      	ldr	r0, [pc, #108]	; (800c15c <USBD_LL_Init+0xbc>)
 800c0ee:	f7f6 ff2d 	bl	8002f4c <HAL_PCD_Init>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c0f8:	f7f4 fdf4 	bl	8000ce4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c102:	2318      	movs	r3, #24
 800c104:	2200      	movs	r2, #0
 800c106:	2100      	movs	r1, #0
 800c108:	f7f8 fbf6 	bl	80048f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c112:	2358      	movs	r3, #88	; 0x58
 800c114:	2200      	movs	r2, #0
 800c116:	2180      	movs	r1, #128	; 0x80
 800c118:	f7f8 fbee 	bl	80048f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c122:	23c0      	movs	r3, #192	; 0xc0
 800c124:	2200      	movs	r2, #0
 800c126:	2181      	movs	r1, #129	; 0x81
 800c128:	f7f8 fbe6 	bl	80048f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c132:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c136:	2200      	movs	r2, #0
 800c138:	2101      	movs	r1, #1
 800c13a:	f7f8 fbdd 	bl	80048f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c144:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c148:	2200      	movs	r2, #0
 800c14a:	2182      	movs	r1, #130	; 0x82
 800c14c:	f7f8 fbd4 	bl	80048f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	200017d8 	.word	0x200017d8
 800c160:	40006800 	.word	0x40006800

0800c164 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c170:	2300      	movs	r3, #0
 800c172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7f6 ffbf 	bl	80030fe <HAL_PCD_Start>
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	4618      	mov	r0, r3
 800c188:	f000 f980 	bl	800c48c <USBD_Get_USB_Status>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c190:	7bbb      	ldrb	r3, [r7, #14]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	70fb      	strb	r3, [r7, #3]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70bb      	strb	r3, [r7, #2]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1c2:	78bb      	ldrb	r3, [r7, #2]
 800c1c4:	883a      	ldrh	r2, [r7, #0]
 800c1c6:	78f9      	ldrb	r1, [r7, #3]
 800c1c8:	f7f7 f907 	bl	80033da <HAL_PCD_EP_Open>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 f95a 	bl	800c48c <USBD_Get_USB_Status>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b084      	sub	sp, #16
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c200:	78fa      	ldrb	r2, [r7, #3]
 800c202:	4611      	mov	r1, r2
 800c204:	4618      	mov	r0, r3
 800c206:	f7f7 f945 	bl	8003494 <HAL_PCD_EP_Close>
 800c20a:	4603      	mov	r3, r0
 800c20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f93b 	bl	800c48c <USBD_Get_USB_Status>
 800c216:	4603      	mov	r3, r0
 800c218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c23e:	78fa      	ldrb	r2, [r7, #3]
 800c240:	4611      	mov	r1, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f7f7 f9ee 	bl	8003624 <HAL_PCD_EP_SetStall>
 800c248:	4603      	mov	r3, r0
 800c24a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 f91c 	bl	800c48c <USBD_Get_USB_Status>
 800c254:	4603      	mov	r3, r0
 800c256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c258:	7bbb      	ldrb	r3, [r7, #14]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	460b      	mov	r3, r1
 800c26c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c27c:	78fa      	ldrb	r2, [r7, #3]
 800c27e:	4611      	mov	r1, r2
 800c280:	4618      	mov	r0, r3
 800c282:	f7f7 fa21 	bl	80036c8 <HAL_PCD_EP_ClrStall>
 800c286:	4603      	mov	r3, r0
 800c288:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 f8fd 	bl	800c48c <USBD_Get_USB_Status>
 800c292:	4603      	mov	r3, r0
 800c294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c296:	7bbb      	ldrb	r3, [r7, #14]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	da0c      	bge.n	800c2d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c2:	68f9      	ldr	r1, [r7, #12]
 800c2c4:	1c5a      	adds	r2, r3, #1
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	440b      	add	r3, r1
 800c2d0:	3302      	adds	r3, #2
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	e00b      	b.n	800c2ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2d6:	78fb      	ldrb	r3, [r7, #3]
 800c2d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2dc:	68f9      	ldr	r1, [r7, #12]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	00db      	lsls	r3, r3, #3
 800c2e6:	440b      	add	r3, r1
 800c2e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c2ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3714      	adds	r7, #20
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	460b      	mov	r3, r1
 800c304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c314:	78fa      	ldrb	r2, [r7, #3]
 800c316:	4611      	mov	r1, r2
 800c318:	4618      	mov	r0, r3
 800c31a:	f7f7 f839 	bl	8003390 <HAL_PCD_SetAddress>
 800c31e:	4603      	mov	r3, r0
 800c320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	4618      	mov	r0, r3
 800c326:	f000 f8b1 	bl	800c48c <USBD_Get_USB_Status>
 800c32a:	4603      	mov	r3, r0
 800c32c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	607a      	str	r2, [r7, #4]
 800c342:	603b      	str	r3, [r7, #0]
 800c344:	460b      	mov	r3, r1
 800c346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c356:	7af9      	ldrb	r1, [r7, #11]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	f7f7 f92b 	bl	80035b6 <HAL_PCD_EP_Transmit>
 800c360:	4603      	mov	r3, r0
 800c362:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	4618      	mov	r0, r3
 800c368:	f000 f890 	bl	800c48c <USBD_Get_USB_Status>
 800c36c:	4603      	mov	r3, r0
 800c36e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c370:	7dbb      	ldrb	r3, [r7, #22]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b086      	sub	sp, #24
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
 800c386:	460b      	mov	r3, r1
 800c388:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c398:	7af9      	ldrb	r1, [r7, #11]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	f7f7 f8c1 	bl	8003524 <HAL_PCD_EP_Receive>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a6:	7dfb      	ldrb	r3, [r7, #23]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 f86f 	bl	800c48c <USBD_Get_USB_Status>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3ce:	78fa      	ldrb	r2, [r7, #3]
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7f7 f8d7 	bl	8003586 <HAL_PCD_EP_GetRxCount>
 800c3d8:	4603      	mov	r3, r0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
	...

0800c3e4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <HAL_PCDEx_LPM_Callback+0x18>
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d013      	beq.n	800c422 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c3fa:	e023      	b.n	800c444 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	699b      	ldr	r3, [r3, #24]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d007      	beq.n	800c414 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c404:	f000 f83c 	bl	800c480 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c408:	4b10      	ldr	r3, [pc, #64]	; (800c44c <HAL_PCDEx_LPM_Callback+0x68>)
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	4a0f      	ldr	r2, [pc, #60]	; (800c44c <HAL_PCDEx_LPM_Callback+0x68>)
 800c40e:	f023 0306 	bic.w	r3, r3, #6
 800c412:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe fb6b 	bl	800aaf6 <USBD_LL_Resume>
    break;
 800c420:	e010      	b.n	800c444 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fe fb48 	bl	800aabe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d005      	beq.n	800c442 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c436:	4b05      	ldr	r3, [pc, #20]	; (800c44c <HAL_PCDEx_LPM_Callback+0x68>)
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	4a04      	ldr	r2, [pc, #16]	; (800c44c <HAL_PCDEx_LPM_Callback+0x68>)
 800c43c:	f043 0306 	orr.w	r3, r3, #6
 800c440:	6113      	str	r3, [r2, #16]
    break;
 800c442:	bf00      	nop
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	e000ed00 	.word	0xe000ed00

0800c450 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c458:	4b03      	ldr	r3, [pc, #12]	; (800c468 <USBD_static_malloc+0x18>)
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	20001acc 	.word	0x20001acc

0800c46c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c484:	f7f4 f9de 	bl	8000844 <SystemClock_Config>
}
 800c488:	bf00      	nop
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c49a:	79fb      	ldrb	r3, [r7, #7]
 800c49c:	2b03      	cmp	r3, #3
 800c49e:	d817      	bhi.n	800c4d0 <USBD_Get_USB_Status+0x44>
 800c4a0:	a201      	add	r2, pc, #4	; (adr r2, 800c4a8 <USBD_Get_USB_Status+0x1c>)
 800c4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a6:	bf00      	nop
 800c4a8:	0800c4b9 	.word	0x0800c4b9
 800c4ac:	0800c4bf 	.word	0x0800c4bf
 800c4b0:	0800c4c5 	.word	0x0800c4c5
 800c4b4:	0800c4cb 	.word	0x0800c4cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c4bc:	e00b      	b.n	800c4d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c2:	e008      	b.n	800c4d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c8:	e005      	b.n	800c4d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ce:	e002      	b.n	800c4d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d4:	bf00      	nop
  }
  return usb_status;
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3714      	adds	r7, #20
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 800c4e4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800c4e8:	b086      	sub	sp, #24
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800c4ee:	f04f 0000 	mov.w	r0, #0
 800c4f2:	f04f 0100 	mov.w	r1, #0
 800c4f6:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	6179      	str	r1, [r7, #20]
 800c4fe:	e022      	b.n	800c546 <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	6979      	ldr	r1, [r7, #20]
 800c504:	4401      	add	r1, r0
 800c506:	7809      	ldrb	r1, [r1, #0]
 800c508:	b2c9      	uxtb	r1, r1
 800c50a:	2000      	movs	r0, #0
 800c50c:	460c      	mov	r4, r1
 800c50e:	4605      	mov	r5, r0
 800c510:	6979      	ldr	r1, [r7, #20]
 800c512:	00c9      	lsls	r1, r1, #3
 800c514:	f1a1 0620 	sub.w	r6, r1, #32
 800c518:	f1c1 0020 	rsb	r0, r1, #32
 800c51c:	fa05 f301 	lsl.w	r3, r5, r1
 800c520:	fa04 f606 	lsl.w	r6, r4, r6
 800c524:	4333      	orrs	r3, r6
 800c526:	fa24 f000 	lsr.w	r0, r4, r0
 800c52a:	4303      	orrs	r3, r0
 800c52c:	fa04 f201 	lsl.w	r2, r4, r1
 800c530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c534:	ea40 0802 	orr.w	r8, r0, r2
 800c538:	ea41 0903 	orr.w	r9, r1, r3
 800c53c:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 800c540:	6979      	ldr	r1, [r7, #20]
 800c542:	3101      	adds	r1, #1
 800c544:	6179      	str	r1, [r7, #20]
 800c546:	6979      	ldr	r1, [r7, #20]
 800c548:	2907      	cmp	r1, #7
 800c54a:	d9d9      	bls.n	800c500 <load64+0x1c>

  return r;
 800c54c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800c550:	4610      	mov	r0, r2
 800c552:	4619      	mov	r1, r3
 800c554:	3718      	adds	r7, #24
 800c556:	46bd      	mov	sp, r7
 800c558:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800c55c:	4770      	bx	lr

0800c55e <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800c55e:	b4f0      	push	{r4, r5, r6, r7}
 800c560:	b086      	sub	sp, #24
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 800c56a:	2300      	movs	r3, #0
 800c56c:	617b      	str	r3, [r7, #20]
 800c56e:	e019      	b.n	800c5a4 <store64+0x46>
    x[i] = u >> 8*i;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	00d9      	lsls	r1, r3, #3
 800c574:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c578:	f1c1 0620 	rsb	r6, r1, #32
 800c57c:	f1a1 0020 	sub.w	r0, r1, #32
 800c580:	fa22 f401 	lsr.w	r4, r2, r1
 800c584:	fa03 f606 	lsl.w	r6, r3, r6
 800c588:	4334      	orrs	r4, r6
 800c58a:	fa23 f000 	lsr.w	r0, r3, r0
 800c58e:	4304      	orrs	r4, r0
 800c590:	fa23 f501 	lsr.w	r5, r3, r1
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	4413      	add	r3, r2
 800c59a:	b2e2      	uxtb	r2, r4
 800c59c:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	617b      	str	r3, [r7, #20]
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	2b07      	cmp	r3, #7
 800c5a8:	d9e2      	bls.n	800c570 <store64+0x12>
}
 800c5aa:	bf00      	nop
 800c5ac:	bf00      	nop
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bcf0      	pop	{r4, r5, r6, r7}
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 800c5b8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c5bc:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c5c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c5ca:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800c5cc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c5d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5da:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800c5de:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 800c5e2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c5e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c5f0:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800c5f4:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 800c5f8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c5fc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c606:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800c60a:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 800c60e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c612:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c61c:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800c620:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 800c624:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c628:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c632:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800c636:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 800c63a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c63e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800c648:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800c64c:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 800c650:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c654:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800c65e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800c662:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800c666:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c66a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c674:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800c678:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800c67c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c680:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800c68a:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800c68e:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800c692:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c696:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c6a0:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800c6a4:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 800c6a8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c6ac:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800c6b6:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800c6ba:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800c6be:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c6c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800c6cc:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800c6d0:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 800c6d4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c6d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800c6e2:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800c6e6:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 800c6ea:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c6ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800c6f8:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800c6fc:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 800c700:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c704:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800c70e:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800c712:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 800c716:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c71a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800c724:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800c728:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 800c72c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c730:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800c73a:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800c73e:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 800c742:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c746:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800c750:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800c754:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 800c758:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c75c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800c766:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800c76a:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 800c76e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c772:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800c77c:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800c780:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 800c784:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c788:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800c792:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800c796:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 800c79a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c79e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800c7a8:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800c7ac:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 800c7b0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c7b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800c7be:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800c7c2:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 800c7c6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c7ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800c7d4:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800c7d8:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 800c7dc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800c7e0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800c7ea:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800c7ee:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800c7f8:	f002 bdf7 	b.w	800f3ea <KeccakF1600_StatePermute+0x2e32>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 800c7fc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800c800:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c804:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	ea80 0602 	eor.w	r6, r0, r2
 800c810:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 800c814:	404b      	eors	r3, r1
 800c816:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 800c81a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 800c826:	4051      	eors	r1, r2
 800c828:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 800c82c:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 800c830:	404b      	eors	r3, r1
 800c832:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 800c836:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 800c842:	4051      	eors	r1, r2
 800c844:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 800c848:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 800c84c:	404b      	eors	r3, r1
 800c84e:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 800c852:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85a:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 800c85e:	4051      	eors	r1, r2
 800c860:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800c864:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 800c868:	404b      	eors	r3, r1
 800c86a:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800c86e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c876:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800c87a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 800c87e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800c882:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c886:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	ea80 0602 	eor.w	r6, r0, r2
 800c892:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 800c896:	404b      	eors	r3, r1
 800c898:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 800c89c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 800c8a8:	4051      	eors	r1, r2
 800c8aa:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 800c8ae:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 800c8b2:	404b      	eors	r3, r1
 800c8b4:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 800c8b8:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 800c8c4:	4051      	eors	r1, r2
 800c8c6:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 800c8ca:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 800c8ce:	404b      	eors	r3, r1
 800c8d0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800c8d4:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8dc:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 800c8e0:	4051      	eors	r1, r2
 800c8e2:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 800c8e6:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 800c8ea:	404b      	eors	r3, r1
 800c8ec:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800c8f0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800c8fc:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 800c900:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800c904:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c908:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	ea80 0602 	eor.w	r6, r0, r2
 800c914:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 800c918:	404b      	eors	r3, r1
 800c91a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800c91e:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 800c92a:	4051      	eors	r1, r2
 800c92c:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 800c930:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 800c934:	404b      	eors	r3, r1
 800c936:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 800c93a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 800c946:	4051      	eors	r1, r2
 800c948:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 800c94c:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 800c950:	404b      	eors	r3, r1
 800c952:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800c956:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95e:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 800c962:	4051      	eors	r1, r2
 800c964:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 800c968:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 800c96c:	404b      	eors	r3, r1
 800c96e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800c972:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800c97e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 800c982:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800c986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c98a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	ea80 0602 	eor.w	r6, r0, r2
 800c996:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 800c99a:	404b      	eors	r3, r1
 800c99c:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 800c9a0:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800c9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a8:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 800c9ac:	4051      	eors	r1, r2
 800c9ae:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 800c9b2:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 800c9b6:	404b      	eors	r3, r1
 800c9b8:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 800c9bc:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 800c9c8:	4051      	eors	r1, r2
 800c9ca:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 800c9ce:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 800c9d2:	404b      	eors	r3, r1
 800c9d4:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800c9d8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e0:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 800c9e4:	4051      	eors	r1, r2
 800c9e6:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 800c9ea:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 800c9ee:	404b      	eors	r3, r1
 800c9f0:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800c9f4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800ca00:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 800ca04:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800ca08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca0c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	ea80 0602 	eor.w	r6, r0, r2
 800ca18:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 800ca1c:	404b      	eors	r3, r1
 800ca1e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 800ca22:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 800ca2e:	4051      	eors	r1, r2
 800ca30:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 800ca34:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 800ca38:	404b      	eors	r3, r1
 800ca3a:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 800ca3e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 800ca4a:	4051      	eors	r1, r2
 800ca4c:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 800ca50:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 800ca54:	404b      	eors	r3, r1
 800ca56:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 800ca5a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800ca66:	4051      	eors	r1, r2
 800ca68:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 800ca6c:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 800ca70:	404b      	eors	r3, r1
 800ca72:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800ca76:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800ca82:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 800ca86:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800ca8a:	0fda      	lsrs	r2, r3, #31
 800ca8c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	4313      	orrs	r3, r2
 800ca94:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800ca98:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800ca9c:	0fda      	lsrs	r2, r3, #31
 800ca9e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	4313      	orrs	r3, r2
 800caa6:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 800caaa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 800cab6:	4051      	eors	r1, r2
 800cab8:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 800cabc:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 800cac0:	404b      	eors	r3, r1
 800cac2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800cac6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800cad2:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800cad6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800cada:	0fda      	lsrs	r2, r3, #31
 800cadc:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800cae0:	005b      	lsls	r3, r3, #1
 800cae2:	4313      	orrs	r3, r2
 800cae4:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 800cae8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800caec:	0fda      	lsrs	r2, r3, #31
 800caee:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	4313      	orrs	r3, r2
 800caf6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800cafa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 800cb06:	4051      	eors	r1, r2
 800cb08:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 800cb0c:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 800cb10:	404b      	eors	r3, r1
 800cb12:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800cb16:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800cb22:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800cb26:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800cb2a:	0fda      	lsrs	r2, r3, #31
 800cb2c:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800cb30:	005b      	lsls	r3, r3, #1
 800cb32:	4313      	orrs	r3, r2
 800cb34:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 800cb38:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800cb3c:	0fda      	lsrs	r2, r3, #31
 800cb3e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	4313      	orrs	r3, r2
 800cb46:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800cb4a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800cb56:	4051      	eors	r1, r2
 800cb58:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 800cb5c:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 800cb60:	404b      	eors	r3, r1
 800cb62:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800cb66:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800cb72:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800cb76:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800cb7a:	0fda      	lsrs	r2, r3, #31
 800cb7c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	4313      	orrs	r3, r2
 800cb84:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 800cb88:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800cb8c:	0fda      	lsrs	r2, r3, #31
 800cb8e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	4313      	orrs	r3, r2
 800cb96:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800cb9a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 800cba6:	4051      	eors	r1, r2
 800cba8:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 800cbac:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 800cbb0:	404b      	eors	r3, r1
 800cbb2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800cbb6:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800cbc2:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800cbc6:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800cbca:	0fda      	lsrs	r2, r3, #31
 800cbcc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 800cbd8:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800cbdc:	0fda      	lsrs	r2, r3, #31
 800cbde:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800cbea:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 800cbf6:	4051      	eors	r1, r2
 800cbf8:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800cbfc:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 800cc00:	404b      	eors	r3, r1
 800cc02:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800cc06:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800cc12:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 800cc16:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800cc1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc1e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	ea80 0602 	eor.w	r6, r0, r2
 800cc2a:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 800cc2e:	404b      	eors	r3, r1
 800cc30:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800cc34:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800cc40:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 800cc44:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800cc50:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 800cc54:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800cc58:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc5c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	ea80 0602 	eor.w	r6, r0, r2
 800cc68:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 800cc6c:	404b      	eors	r3, r1
 800cc6e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800cc72:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800cc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800cc7e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 800cc82:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800cc86:	031a      	lsls	r2, r3, #12
 800cc88:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800cc8c:	0d1b      	lsrs	r3, r3, #20
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800cc94:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800cc98:	031a      	lsls	r2, r3, #12
 800cc9a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800cc9e:	0d1b      	lsrs	r3, r3, #20
 800cca0:	4313      	orrs	r3, r2
 800cca2:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800cca6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccae:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ccb2:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 800ccb6:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800ccba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ccbe:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	ea80 0602 	eor.w	r6, r0, r2
 800ccca:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 800ccce:	404b      	eors	r3, r1
 800ccd0:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800ccd4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800cce0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 800cce4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800cce8:	02da      	lsls	r2, r3, #11
 800ccea:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800ccee:	0d5b      	lsrs	r3, r3, #21
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800ccf6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800ccfa:	02da      	lsls	r2, r3, #11
 800ccfc:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800cd00:	0d5b      	lsrs	r3, r3, #21
 800cd02:	4313      	orrs	r3, r2
 800cd04:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800cd08:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800cd14:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 800cd18:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800cd1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd20:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	ea80 0602 	eor.w	r6, r0, r2
 800cd2c:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 800cd30:	404b      	eors	r3, r1
 800cd32:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800cd36:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800cd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3e:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800cd42:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 800cd46:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800cd4a:	0ada      	lsrs	r2, r3, #11
 800cd4c:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800cd50:	055b      	lsls	r3, r3, #21
 800cd52:	4313      	orrs	r3, r2
 800cd54:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800cd58:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800cd5c:	0ada      	lsrs	r2, r3, #11
 800cd5e:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800cd62:	055b      	lsls	r3, r3, #21
 800cd64:	4313      	orrs	r3, r2
 800cd66:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800cd6a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800cd76:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800cd7a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800cd7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd82:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8a:	ea80 0602 	eor.w	r6, r0, r2
 800cd8e:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 800cd92:	404b      	eors	r3, r1
 800cd94:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800cd98:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800cda4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 800cda8:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800cdac:	0c9a      	lsrs	r2, r3, #18
 800cdae:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800cdb2:	039b      	lsls	r3, r3, #14
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800cdba:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800cdbe:	0c9a      	lsrs	r2, r3, #18
 800cdc0:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800cdc4:	039b      	lsls	r3, r3, #14
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800cdcc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800cdd8:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800cddc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde4:	43d1      	mvns	r1, r2
 800cde6:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 800cdea:	43db      	mvns	r3, r3
 800cdec:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800cdf0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 800cdfc:	4011      	ands	r1, r2
 800cdfe:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 800ce02:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 800ce06:	400b      	ands	r3, r1
 800ce08:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800ce0c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce14:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 800ce18:	4051      	eors	r1, r2
 800ce1a:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 800ce1e:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 800ce22:	404b      	eors	r3, r1
 800ce24:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800ce28:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800ce34:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800ce38:	4afd      	ldr	r2, [pc, #1012]	; (800d230 <KeccakF1600_StatePermute+0xc78>)
 800ce3a:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	4413      	add	r3, r2
 800ce42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce46:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800ce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4e:	ea82 0600 	eor.w	r6, r2, r0
 800ce52:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 800ce56:	404b      	eors	r3, r1
 800ce58:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800ce5c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800ce68:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 800ce6c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	43d1      	mvns	r1, r2
 800ce76:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800ce7a:	43db      	mvns	r3, r3
 800ce7c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800ce80:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 800ce8c:	4011      	ands	r1, r2
 800ce8e:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 800ce92:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 800ce96:	400b      	ands	r3, r1
 800ce98:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 800ce9c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 800cea8:	4051      	eors	r1, r2
 800ceaa:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800ceae:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 800ceb2:	404b      	eors	r3, r1
 800ceb4:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800ceb8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800cec4:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 800cec8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	43d1      	mvns	r1, r2
 800ced2:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 800ced6:	43db      	mvns	r3, r3
 800ced8:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800cedc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 800cee8:	4011      	ands	r1, r2
 800ceea:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 800ceee:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 800cef2:	400b      	ands	r3, r1
 800cef4:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 800cef8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf00:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 800cf04:	4051      	eors	r1, r2
 800cf06:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800cf0a:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 800cf0e:	404b      	eors	r3, r1
 800cf10:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800cf14:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800cf20:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 800cf24:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2c:	43d1      	mvns	r1, r2
 800cf2e:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 800cf32:	43db      	mvns	r3, r3
 800cf34:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800cf38:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 800cf44:	4011      	ands	r1, r2
 800cf46:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 800cf4a:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800cf4e:	400b      	ands	r3, r1
 800cf50:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800cf54:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 800cf60:	4051      	eors	r1, r2
 800cf62:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 800cf66:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800cf6a:	404b      	eors	r3, r1
 800cf6c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800cf70:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800cf7c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 800cf80:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	43d1      	mvns	r1, r2
 800cf8a:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800cf8e:	43db      	mvns	r3, r3
 800cf90:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 800cf94:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800cfa0:	4011      	ands	r1, r2
 800cfa2:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 800cfa6:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 800cfaa:	400b      	ands	r3, r1
 800cfac:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800cfb0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb8:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 800cfbc:	4051      	eors	r1, r2
 800cfbe:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 800cfc2:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 800cfc6:	404b      	eors	r3, r1
 800cfc8:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800cfcc:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800cfd8:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800cfdc:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800cfe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfe4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	ea80 0602 	eor.w	r6, r0, r2
 800cff0:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 800cff4:	404b      	eors	r3, r1
 800cff6:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800cffa:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d002:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800d006:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800d00a:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800d00e:	091a      	lsrs	r2, r3, #4
 800d010:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800d014:	071b      	lsls	r3, r3, #28
 800d016:	4313      	orrs	r3, r2
 800d018:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800d01c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800d020:	091a      	lsrs	r2, r3, #4
 800d022:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800d026:	071b      	lsls	r3, r3, #28
 800d028:	4313      	orrs	r3, r2
 800d02a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800d02e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800d032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d036:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800d03a:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 800d03e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800d042:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d046:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	ea80 0602 	eor.w	r6, r0, r2
 800d052:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800d056:	404b      	eors	r3, r1
 800d058:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800d05c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800d068:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 800d06c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800d070:	0b1a      	lsrs	r2, r3, #12
 800d072:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800d076:	051b      	lsls	r3, r3, #20
 800d078:	4313      	orrs	r3, r2
 800d07a:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800d07e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800d082:	0b1a      	lsrs	r2, r3, #12
 800d084:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800d088:	051b      	lsls	r3, r3, #20
 800d08a:	4313      	orrs	r3, r2
 800d08c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800d090:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800d094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d098:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800d09c:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 800d0a0:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800d0a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d0a8:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b0:	ea80 0602 	eor.w	r6, r0, r2
 800d0b4:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 800d0b8:	404b      	eors	r3, r1
 800d0ba:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800d0be:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800d0ca:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800d0ce:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800d0d2:	0f5a      	lsrs	r2, r3, #29
 800d0d4:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800d0e0:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800d0e4:	0f5a      	lsrs	r2, r3, #29
 800d0e6:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800d0f2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800d0fe:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 800d102:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800d106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d10a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	ea80 0602 	eor.w	r6, r0, r2
 800d116:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 800d11a:	404b      	eors	r3, r1
 800d11c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800d120:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800d12c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 800d130:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800d134:	035a      	lsls	r2, r3, #13
 800d136:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800d13a:	0cdb      	lsrs	r3, r3, #19
 800d13c:	4313      	orrs	r3, r2
 800d13e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800d142:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800d146:	035a      	lsls	r2, r3, #13
 800d148:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800d14c:	0cdb      	lsrs	r3, r3, #19
 800d14e:	4313      	orrs	r3, r2
 800d150:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800d154:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800d160:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 800d164:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800d168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d16c:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800d170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d174:	ea80 0602 	eor.w	r6, r0, r2
 800d178:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 800d17c:	404b      	eors	r3, r1
 800d17e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800d182:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800d18e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 800d192:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800d196:	075a      	lsls	r2, r3, #29
 800d198:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800d19c:	08db      	lsrs	r3, r3, #3
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800d1a4:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800d1a8:	075a      	lsls	r2, r3, #29
 800d1aa:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800d1ae:	08db      	lsrs	r3, r3, #3
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800d1b6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800d1c2:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800d1c6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	43d1      	mvns	r1, r2
 800d1d0:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800d1d4:	43db      	mvns	r3, r3
 800d1d6:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 800d1da:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e2:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 800d1e6:	4011      	ands	r1, r2
 800d1e8:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 800d1ec:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800d1f0:	400b      	ands	r3, r1
 800d1f2:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 800d1f6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 800d202:	4051      	eors	r1, r2
 800d204:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800d208:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 800d20c:	404b      	eors	r3, r1
 800d20e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800d212:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21a:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800d21e:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 800d222:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	43d1      	mvns	r1, r2
 800d22c:	e002      	b.n	800d234 <KeccakF1600_StatePermute+0xc7c>
 800d22e:	bf00      	nop
 800d230:	08014198 	.word	0x08014198
 800d234:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 800d238:	43db      	mvns	r3, r3
 800d23a:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 800d23e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 800d24a:	4011      	ands	r1, r2
 800d24c:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 800d250:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 800d254:	400b      	ands	r3, r1
 800d256:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800d25a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d262:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800d266:	4051      	eors	r1, r2
 800d268:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 800d26c:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 800d270:	404b      	eors	r3, r1
 800d272:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800d276:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800d282:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800d286:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	43d1      	mvns	r1, r2
 800d290:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 800d294:	43db      	mvns	r3, r3
 800d296:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 800d29a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 800d2a6:	4011      	ands	r1, r2
 800d2a8:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 800d2ac:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800d2b0:	400b      	ands	r3, r1
 800d2b2:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 800d2b6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2be:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 800d2c2:	4051      	eors	r1, r2
 800d2c4:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 800d2c8:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 800d2cc:	404b      	eors	r3, r1
 800d2ce:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800d2d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800d2de:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800d2e2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	43d1      	mvns	r1, r2
 800d2ec:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800d2f0:	43db      	mvns	r3, r3
 800d2f2:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800d2f6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 800d302:	4011      	ands	r1, r2
 800d304:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 800d308:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 800d30c:	400b      	ands	r3, r1
 800d30e:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800d312:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 800d31e:	4051      	eors	r1, r2
 800d320:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800d324:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 800d328:	404b      	eors	r3, r1
 800d32a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800d32e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800d33a:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 800d33e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	43d1      	mvns	r1, r2
 800d348:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 800d34c:	43db      	mvns	r3, r3
 800d34e:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800d352:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 800d35e:	4011      	ands	r1, r2
 800d360:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 800d364:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 800d368:	400b      	ands	r3, r1
 800d36a:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 800d36e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d376:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 800d37a:	4051      	eors	r1, r2
 800d37c:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 800d380:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 800d384:	404b      	eors	r3, r1
 800d386:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800d38a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d392:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800d396:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 800d39a:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800d39e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3a2:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3aa:	ea80 0602 	eor.w	r6, r0, r2
 800d3ae:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 800d3b2:	404b      	eors	r3, r1
 800d3b4:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800d3b8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800d3c4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 800d3c8:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800d3cc:	0fda      	lsrs	r2, r3, #31
 800d3ce:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800d3da:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800d3de:	0fda      	lsrs	r2, r3, #31
 800d3e0:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800d3ec:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800d3f8:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 800d3fc:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800d400:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d404:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	ea80 0602 	eor.w	r6, r0, r2
 800d410:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 800d414:	404b      	eors	r3, r1
 800d416:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800d41a:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800d41e:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800d422:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 800d426:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800d42a:	0e9a      	lsrs	r2, r3, #26
 800d42c:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800d430:	019b      	lsls	r3, r3, #6
 800d432:	4313      	orrs	r3, r2
 800d434:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800d438:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800d43c:	0e9a      	lsrs	r2, r3, #26
 800d43e:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800d442:	019b      	lsls	r3, r3, #6
 800d444:	4313      	orrs	r3, r2
 800d446:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800d44a:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800d44e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800d452:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 800d456:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800d45a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d45e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	ea80 0602 	eor.w	r6, r0, r2
 800d46a:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 800d46e:	404b      	eors	r3, r1
 800d470:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800d474:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800d478:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800d47c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 800d480:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800d484:	09da      	lsrs	r2, r3, #7
 800d486:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800d48a:	065b      	lsls	r3, r3, #25
 800d48c:	4313      	orrs	r3, r2
 800d48e:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800d492:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800d496:	09da      	lsrs	r2, r3, #7
 800d498:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800d49c:	065b      	lsls	r3, r3, #25
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800d4a4:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800d4a8:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800d4ac:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800d4b0:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800d4b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4b8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	ea80 0602 	eor.w	r6, r0, r2
 800d4c4:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 800d4c8:	404b      	eors	r3, r1
 800d4ca:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800d4ce:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800d4d2:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800d4d6:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 800d4da:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800d4de:	0e1a      	lsrs	r2, r3, #24
 800d4e0:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800d4e4:	021b      	lsls	r3, r3, #8
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800d4ec:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800d4f0:	0e1a      	lsrs	r2, r3, #24
 800d4f2:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800d4fe:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800d502:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800d506:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 800d50a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800d50e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d512:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51a:	ea80 0602 	eor.w	r6, r0, r2
 800d51e:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 800d522:	404b      	eors	r3, r1
 800d524:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800d528:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800d52c:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800d530:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 800d534:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800d538:	0b9a      	lsrs	r2, r3, #14
 800d53a:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800d53e:	049b      	lsls	r3, r3, #18
 800d540:	4313      	orrs	r3, r2
 800d542:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800d546:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800d54a:	0b9a      	lsrs	r2, r3, #14
 800d54c:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800d550:	049b      	lsls	r3, r3, #18
 800d552:	4313      	orrs	r3, r2
 800d554:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800d558:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800d55c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800d560:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 800d564:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	43d1      	mvns	r1, r2
 800d56e:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 800d572:	43db      	mvns	r3, r3
 800d574:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800d578:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 800d584:	4011      	ands	r1, r2
 800d586:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 800d58a:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 800d58e:	400b      	ands	r3, r1
 800d590:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800d594:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 800d5a0:	4051      	eors	r1, r2
 800d5a2:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 800d5a6:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 800d5aa:	404b      	eors	r3, r1
 800d5ac:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800d5b0:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800d5b4:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800d5b8:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800d5bc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	43d1      	mvns	r1, r2
 800d5c6:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 800d5ca:	43db      	mvns	r3, r3
 800d5cc:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800d5d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 800d5dc:	4011      	ands	r1, r2
 800d5de:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 800d5e2:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 800d5e6:	400b      	ands	r3, r1
 800d5e8:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 800d5ec:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 800d5f8:	4051      	eors	r1, r2
 800d5fa:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800d5fe:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 800d602:	404b      	eors	r3, r1
 800d604:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800d608:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800d60c:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800d610:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 800d614:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61c:	43d1      	mvns	r1, r2
 800d61e:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800d622:	43db      	mvns	r3, r3
 800d624:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800d628:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d630:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 800d634:	4011      	ands	r1, r2
 800d636:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 800d63a:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 800d63e:	400b      	ands	r3, r1
 800d640:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800d644:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64c:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 800d650:	4051      	eors	r1, r2
 800d652:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 800d656:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 800d65a:	404b      	eors	r3, r1
 800d65c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800d660:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800d664:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800d668:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 800d66c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d674:	43d1      	mvns	r1, r2
 800d676:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 800d67a:	43db      	mvns	r3, r3
 800d67c:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800d680:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 800d68c:	4011      	ands	r1, r2
 800d68e:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 800d692:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 800d696:	400b      	ands	r3, r1
 800d698:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800d69c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a4:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 800d6a8:	4051      	eors	r1, r2
 800d6aa:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800d6ae:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800d6b2:	404b      	eors	r3, r1
 800d6b4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800d6b8:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 800d6bc:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800d6c0:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 800d6c4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	43d1      	mvns	r1, r2
 800d6ce:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 800d6d2:	43db      	mvns	r3, r3
 800d6d4:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800d6d8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 800d6e4:	4011      	ands	r1, r2
 800d6e6:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 800d6ea:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 800d6ee:	400b      	ands	r3, r1
 800d6f0:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800d6f4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800d700:	4051      	eors	r1, r2
 800d702:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800d706:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 800d70a:	404b      	eors	r3, r1
 800d70c:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800d710:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 800d714:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800d718:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 800d71c:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800d720:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d724:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72c:	ea80 0602 	eor.w	r6, r0, r2
 800d730:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 800d734:	404b      	eors	r3, r1
 800d736:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800d73a:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 800d73e:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800d742:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 800d746:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800d74a:	095a      	lsrs	r2, r3, #5
 800d74c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800d750:	06db      	lsls	r3, r3, #27
 800d752:	4313      	orrs	r3, r2
 800d754:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800d758:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800d75c:	095a      	lsrs	r2, r3, #5
 800d75e:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800d762:	06db      	lsls	r3, r3, #27
 800d764:	4313      	orrs	r3, r2
 800d766:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800d76a:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 800d76e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800d772:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 800d776:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800d77a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d77e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	ea80 0602 	eor.w	r6, r0, r2
 800d78a:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 800d78e:	404b      	eors	r3, r1
 800d790:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800d794:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 800d798:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800d79c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 800d7a0:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800d7a4:	011a      	lsls	r2, r3, #4
 800d7a6:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800d7aa:	0f1b      	lsrs	r3, r3, #28
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800d7b2:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800d7b6:	011a      	lsls	r2, r3, #4
 800d7b8:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800d7bc:	0f1b      	lsrs	r3, r3, #28
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800d7c4:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800d7c8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800d7cc:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 800d7d0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800d7d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d7d8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800d7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e0:	ea80 0602 	eor.w	r6, r0, r2
 800d7e4:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 800d7e8:	404b      	eors	r3, r1
 800d7ea:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800d7ee:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800d7f2:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800d7f6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 800d7fa:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800d7fe:	0d9a      	lsrs	r2, r3, #22
 800d800:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800d804:	029b      	lsls	r3, r3, #10
 800d806:	4313      	orrs	r3, r2
 800d808:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800d80c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800d810:	0d9a      	lsrs	r2, r3, #22
 800d812:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800d816:	029b      	lsls	r3, r3, #10
 800d818:	4313      	orrs	r3, r2
 800d81a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800d81e:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 800d822:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800d826:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 800d82a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800d82e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d832:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	ea80 0602 	eor.w	r6, r0, r2
 800d83e:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 800d842:	404b      	eors	r3, r1
 800d844:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800d848:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 800d84c:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800d850:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 800d854:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800d858:	0c5a      	lsrs	r2, r3, #17
 800d85a:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800d85e:	03db      	lsls	r3, r3, #15
 800d860:	4313      	orrs	r3, r2
 800d862:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800d866:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800d86a:	0c5a      	lsrs	r2, r3, #17
 800d86c:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800d870:	03db      	lsls	r3, r3, #15
 800d872:	4313      	orrs	r3, r2
 800d874:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800d878:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 800d87c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800d880:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 800d884:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800d888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d88c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800d890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d894:	ea80 0602 	eor.w	r6, r0, r2
 800d898:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 800d89c:	404b      	eors	r3, r1
 800d89e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800d8a2:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 800d8a6:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800d8aa:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 800d8ae:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800d8b2:	061a      	lsls	r2, r3, #24
 800d8b4:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800d8b8:	0a1b      	lsrs	r3, r3, #8
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800d8c0:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800d8c4:	061a      	lsls	r2, r3, #24
 800d8c6:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800d8ca:	0a1b      	lsrs	r3, r3, #8
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800d8d2:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800d8d6:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800d8da:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 800d8de:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	43d1      	mvns	r1, r2
 800d8e8:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 800d8ec:	43db      	mvns	r3, r3
 800d8ee:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800d8f2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 800d8fe:	4011      	ands	r1, r2
 800d900:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 800d904:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 800d908:	400b      	ands	r3, r1
 800d90a:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800d90e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 800d91a:	4051      	eors	r1, r2
 800d91c:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 800d920:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 800d924:	404b      	eors	r3, r1
 800d926:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800d92a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800d92e:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800d932:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 800d936:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93e:	43d1      	mvns	r1, r2
 800d940:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 800d944:	43db      	mvns	r3, r3
 800d946:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 800d94a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d952:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 800d956:	4011      	ands	r1, r2
 800d958:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 800d95c:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 800d960:	400b      	ands	r3, r1
 800d962:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 800d966:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 800d972:	4051      	eors	r1, r2
 800d974:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 800d978:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 800d97c:	404b      	eors	r3, r1
 800d97e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800d982:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 800d986:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800d98a:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 800d98e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800d992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d996:	43d1      	mvns	r1, r2
 800d998:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 800d99c:	43db      	mvns	r3, r3
 800d99e:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 800d9a2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9aa:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 800d9ae:	4011      	ands	r1, r2
 800d9b0:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 800d9b4:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 800d9b8:	400b      	ands	r3, r1
 800d9ba:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 800d9be:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 800d9ca:	4051      	eors	r1, r2
 800d9cc:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 800d9d0:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 800d9d4:	404b      	eors	r3, r1
 800d9d6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800d9da:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800d9de:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800d9e2:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 800d9e6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	43d1      	mvns	r1, r2
 800d9f0:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 800d9f4:	43db      	mvns	r3, r3
 800d9f6:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 800d9fa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 800da06:	4011      	ands	r1, r2
 800da08:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 800da0c:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 800da10:	400b      	ands	r3, r1
 800da12:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 800da16:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 800da22:	4051      	eors	r1, r2
 800da24:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800da28:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 800da2c:	404b      	eors	r3, r1
 800da2e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800da32:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800da36:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800da3a:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 800da3e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	43d1      	mvns	r1, r2
 800da48:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 800da4c:	43db      	mvns	r3, r3
 800da4e:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 800da52:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800da56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5a:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 800da5e:	4011      	ands	r1, r2
 800da60:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 800da64:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 800da68:	400b      	ands	r3, r1
 800da6a:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 800da6e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da76:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 800da7a:	4051      	eors	r1, r2
 800da7c:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800da80:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800da84:	404b      	eors	r3, r1
 800da86:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800da8a:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800da8e:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800da92:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 800da96:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800da9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da9e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	ea80 0602 	eor.w	r6, r0, r2
 800daaa:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 800daae:	404b      	eors	r3, r1
 800dab0:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800dab4:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 800dab8:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800dabc:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 800dac0:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800dac4:	079a      	lsls	r2, r3, #30
 800dac6:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800daca:	089b      	lsrs	r3, r3, #2
 800dacc:	4313      	orrs	r3, r2
 800dace:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800dad2:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800dad6:	079a      	lsls	r2, r3, #30
 800dad8:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800dadc:	089b      	lsrs	r3, r3, #2
 800dade:	4313      	orrs	r3, r2
 800dae0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800dae4:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800dae8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800daec:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 800daf0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800daf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800daf8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800dafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db00:	ea80 0602 	eor.w	r6, r0, r2
 800db04:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 800db08:	404b      	eors	r3, r1
 800db0a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800db0e:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800db12:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800db16:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 800db1a:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800db1e:	05da      	lsls	r2, r3, #23
 800db20:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800db24:	0a5b      	lsrs	r3, r3, #9
 800db26:	4313      	orrs	r3, r2
 800db28:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800db2c:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800db30:	05da      	lsls	r2, r3, #23
 800db32:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800db36:	0a5b      	lsrs	r3, r3, #9
 800db38:	4313      	orrs	r3, r2
 800db3a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800db3e:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800db42:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800db46:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 800db4a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800db4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db52:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	ea80 0602 	eor.w	r6, r0, r2
 800db5e:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 800db62:	404b      	eors	r3, r1
 800db64:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800db68:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800db6c:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800db70:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 800db74:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800db78:	01da      	lsls	r2, r3, #7
 800db7a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800db7e:	0e5b      	lsrs	r3, r3, #25
 800db80:	4313      	orrs	r3, r2
 800db82:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800db86:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800db8a:	01da      	lsls	r2, r3, #7
 800db8c:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800db90:	0e5b      	lsrs	r3, r3, #25
 800db92:	4313      	orrs	r3, r2
 800db94:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800db98:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800db9c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800dba0:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 800dba4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800dba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbac:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800dbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb4:	ea80 0602 	eor.w	r6, r0, r2
 800dbb8:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 800dbbc:	404b      	eors	r3, r1
 800dbbe:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800dbc2:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800dbc6:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800dbca:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 800dbce:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800dbd2:	025a      	lsls	r2, r3, #9
 800dbd4:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800dbd8:	0ddb      	lsrs	r3, r3, #23
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800dbe0:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800dbe4:	025a      	lsls	r2, r3, #9
 800dbe6:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800dbea:	0ddb      	lsrs	r3, r3, #23
 800dbec:	4313      	orrs	r3, r2
 800dbee:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800dbf2:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800dbf6:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800dbfa:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 800dbfe:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800dc02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc06:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	ea80 0602 	eor.w	r6, r0, r2
 800dc12:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 800dc16:	404b      	eors	r3, r1
 800dc18:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800dc1c:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800dc20:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800dc24:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 800dc28:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800dc2c:	0f9a      	lsrs	r2, r3, #30
 800dc2e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4313      	orrs	r3, r2
 800dc36:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800dc3a:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800dc3e:	0f9a      	lsrs	r2, r3, #30
 800dc40:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4313      	orrs	r3, r2
 800dc48:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800dc4c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800dc50:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800dc54:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 800dc58:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc60:	43d1      	mvns	r1, r2
 800dc62:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 800dc66:	43db      	mvns	r3, r3
 800dc68:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 800dc6c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 800dc78:	4011      	ands	r1, r2
 800dc7a:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 800dc7e:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 800dc82:	400b      	ands	r3, r1
 800dc84:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 800dc88:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800dc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc90:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 800dc94:	4051      	eors	r1, r2
 800dc96:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800dc9a:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 800dc9e:	404b      	eors	r3, r1
 800dca0:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800dca4:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800dca8:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800dcac:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 800dcb0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	43d1      	mvns	r1, r2
 800dcba:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 800dcbe:	43db      	mvns	r3, r3
 800dcc0:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 800dcc4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dccc:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 800dcd0:	4011      	ands	r1, r2
 800dcd2:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 800dcd6:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 800dcda:	400b      	ands	r3, r1
 800dcdc:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 800dce0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce8:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 800dcec:	4051      	eors	r1, r2
 800dcee:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800dcf2:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 800dcf6:	404b      	eors	r3, r1
 800dcf8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800dcfc:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800dd00:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 800dd04:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 800dd08:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800dd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd10:	43d1      	mvns	r1, r2
 800dd12:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 800dd16:	43db      	mvns	r3, r3
 800dd18:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 800dd1c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 800dd28:	4011      	ands	r1, r2
 800dd2a:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 800dd2e:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 800dd32:	400b      	ands	r3, r1
 800dd34:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 800dd38:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800dd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd40:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 800dd44:	4051      	eors	r1, r2
 800dd46:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 800dd4a:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 800dd4e:	404b      	eors	r3, r1
 800dd50:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800dd54:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800dd58:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800dd5c:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 800dd60:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	43d1      	mvns	r1, r2
 800dd6a:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 800dd6e:	43db      	mvns	r3, r3
 800dd70:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 800dd74:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 800dd80:	4011      	ands	r1, r2
 800dd82:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 800dd86:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 800dd8a:	400b      	ands	r3, r1
 800dd8c:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 800dd90:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd98:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 800dd9c:	4051      	eors	r1, r2
 800dd9e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800dda2:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 800dda6:	404b      	eors	r3, r1
 800dda8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800ddac:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800ddb0:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800ddb4:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 800ddb8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc0:	43d1      	mvns	r1, r2
 800ddc2:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 800ddc6:	43db      	mvns	r3, r3
 800ddc8:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 800ddcc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ddd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd4:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 800ddd8:	4011      	ands	r1, r2
 800ddda:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 800ddde:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 800dde2:	400b      	ands	r3, r1
 800dde4:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 800dde8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 800ddf4:	4051      	eors	r1, r2
 800ddf6:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800ddfa:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 800ddfe:	404b      	eors	r3, r1
 800de00:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800de04:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800de08:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800de0c:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 800de10:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800de14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de18:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	ea80 0602 	eor.w	r6, r0, r2
 800de24:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 800de28:	404b      	eors	r3, r1
 800de2a:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 800de2e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800de32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de36:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 800de3a:	4051      	eors	r1, r2
 800de3c:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 800de40:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 800de44:	404b      	eors	r3, r1
 800de46:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 800de4a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de52:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 800de56:	4051      	eors	r1, r2
 800de58:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 800de5c:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 800de60:	404b      	eors	r3, r1
 800de62:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 800de66:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 800de72:	4051      	eors	r1, r2
 800de74:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 800de78:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 800de7c:	404b      	eors	r3, r1
 800de7e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800de82:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800de86:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800de8a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800de8e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800de92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de96:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800de9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9e:	ea80 0602 	eor.w	r6, r0, r2
 800dea2:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 800dea6:	404b      	eors	r3, r1
 800dea8:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 800deac:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 800deb8:	4051      	eors	r1, r2
 800deba:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 800debe:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800dec2:	404b      	eors	r3, r1
 800dec4:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 800dec8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800decc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded0:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 800ded4:	4051      	eors	r1, r2
 800ded6:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 800deda:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 800dede:	404b      	eors	r3, r1
 800dee0:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 800dee4:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 800def0:	4051      	eors	r1, r2
 800def2:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800def6:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 800defa:	404b      	eors	r3, r1
 800defc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800df00:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800df04:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800df08:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 800df0c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800df10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df14:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	ea80 0602 	eor.w	r6, r0, r2
 800df20:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 800df24:	404b      	eors	r3, r1
 800df26:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 800df2a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 800df36:	4051      	eors	r1, r2
 800df38:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 800df3c:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 800df40:	404b      	eors	r3, r1
 800df42:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 800df46:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 800df52:	4051      	eors	r1, r2
 800df54:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 800df58:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 800df5c:	404b      	eors	r3, r1
 800df5e:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 800df62:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 800df6e:	4051      	eors	r1, r2
 800df70:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800df74:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 800df78:	404b      	eors	r3, r1
 800df7a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800df7e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800df82:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800df86:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 800df8a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800df8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df92:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	ea80 0602 	eor.w	r6, r0, r2
 800df9e:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 800dfa2:	404b      	eors	r3, r1
 800dfa4:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 800dfa8:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 800dfb4:	4051      	eors	r1, r2
 800dfb6:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 800dfba:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 800dfbe:	404b      	eors	r3, r1
 800dfc0:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 800dfc4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 800dfd0:	4051      	eors	r1, r2
 800dfd2:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 800dfd6:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 800dfda:	404b      	eors	r3, r1
 800dfdc:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 800dfe0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 800dfec:	4051      	eors	r1, r2
 800dfee:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 800dff2:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 800dff6:	404b      	eors	r3, r1
 800dff8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800dffc:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800e000:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800e004:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800e008:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800e00c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e010:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 800e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e018:	ea80 0602 	eor.w	r6, r0, r2
 800e01c:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 800e020:	404b      	eors	r3, r1
 800e022:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 800e026:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 800e032:	4051      	eors	r1, r2
 800e034:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 800e038:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 800e03c:	404b      	eors	r3, r1
 800e03e:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 800e042:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 800e04e:	4051      	eors	r1, r2
 800e050:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 800e054:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 800e058:	404b      	eors	r3, r1
 800e05a:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 800e05e:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 800e06a:	4051      	eors	r1, r2
 800e06c:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800e070:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 800e074:	404b      	eors	r3, r1
 800e076:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800e07a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800e07e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800e082:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 800e086:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800e08a:	0fda      	lsrs	r2, r3, #31
 800e08c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	4313      	orrs	r3, r2
 800e094:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 800e098:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800e09c:	0fda      	lsrs	r2, r3, #31
 800e09e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800e0a2:	005b      	lsls	r3, r3, #1
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 800e0aa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800e0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b2:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 800e0b6:	4051      	eors	r1, r2
 800e0b8:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800e0bc:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 800e0c0:	404b      	eors	r3, r1
 800e0c2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800e0c6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800e0ca:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800e0ce:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800e0d2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800e0d6:	0fda      	lsrs	r2, r3, #31
 800e0d8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800e0dc:	005b      	lsls	r3, r3, #1
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 800e0e4:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800e0e8:	0fda      	lsrs	r2, r3, #31
 800e0ea:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 800e0f6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 800e102:	4051      	eors	r1, r2
 800e104:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 800e108:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 800e10c:	404b      	eors	r3, r1
 800e10e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800e112:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800e116:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800e11a:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800e11e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800e122:	0fda      	lsrs	r2, r3, #31
 800e124:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	4313      	orrs	r3, r2
 800e12c:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 800e130:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800e134:	0fda      	lsrs	r2, r3, #31
 800e136:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	4313      	orrs	r3, r2
 800e13e:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 800e142:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 800e14e:	4051      	eors	r1, r2
 800e150:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800e154:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 800e158:	404b      	eors	r3, r1
 800e15a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800e15e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800e162:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800e166:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800e16a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800e16e:	0fda      	lsrs	r2, r3, #31
 800e170:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800e174:	005b      	lsls	r3, r3, #1
 800e176:	4313      	orrs	r3, r2
 800e178:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 800e17c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800e180:	0fda      	lsrs	r2, r3, #31
 800e182:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	4313      	orrs	r3, r2
 800e18a:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 800e18e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800e192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e196:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 800e19a:	4051      	eors	r1, r2
 800e19c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800e1a0:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 800e1a4:	404b      	eors	r3, r1
 800e1a6:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800e1aa:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800e1ae:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800e1b2:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800e1b6:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800e1ba:	0fda      	lsrs	r2, r3, #31
 800e1bc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 800e1c8:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800e1cc:	0fda      	lsrs	r2, r3, #31
 800e1ce:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 800e1da:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800e1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e2:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 800e1e6:	4051      	eors	r1, r2
 800e1e8:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 800e1ec:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 800e1f0:	404b      	eors	r3, r1
 800e1f2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e1f6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800e1fa:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800e1fe:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 800e202:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800e206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e20a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	ea80 0602 	eor.w	r6, r0, r2
 800e216:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 800e21a:	404b      	eors	r3, r1
 800e21c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800e220:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800e224:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800e228:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 800e22c:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800e238:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 800e23c:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800e240:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e244:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	ea80 0602 	eor.w	r6, r0, r2
 800e250:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 800e254:	404b      	eors	r3, r1
 800e256:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800e25a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800e25e:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800e262:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 800e266:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e26a:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 800e26e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e272:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 800e276:	6803      	ldr	r3, [r0, #0]
 800e278:	031a      	lsls	r2, r3, #12
 800e27a:	680b      	ldr	r3, [r1, #0]
 800e27c:	0d1b      	lsrs	r3, r3, #20
 800e27e:	4313      	orrs	r3, r2
 800e280:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800e284:	680b      	ldr	r3, [r1, #0]
 800e286:	031a      	lsls	r2, r3, #12
 800e288:	6803      	ldr	r3, [r0, #0]
 800e28a:	0d1b      	lsrs	r3, r3, #20
 800e28c:	4313      	orrs	r3, r2
 800e28e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800e292:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800e296:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800e29a:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 800e29e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800e2a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2a6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	ea80 0602 	eor.w	r6, r0, r2
 800e2b2:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 800e2b6:	404b      	eors	r3, r1
 800e2b8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800e2bc:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800e2c0:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800e2c4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 800e2c8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e2cc:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 800e2d0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e2d4:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800e2d8:	6803      	ldr	r3, [r0, #0]
 800e2da:	02da      	lsls	r2, r3, #11
 800e2dc:	680b      	ldr	r3, [r1, #0]
 800e2de:	0d5b      	lsrs	r3, r3, #21
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800e2e6:	680b      	ldr	r3, [r1, #0]
 800e2e8:	02da      	lsls	r2, r3, #11
 800e2ea:	6803      	ldr	r3, [r0, #0]
 800e2ec:	0d5b      	lsrs	r3, r3, #21
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800e2f4:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800e2f8:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800e2fc:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 800e300:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800e304:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e308:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e310:	ea80 0602 	eor.w	r6, r0, r2
 800e314:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 800e318:	404b      	eors	r3, r1
 800e31a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800e31e:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 800e322:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800e326:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 800e32a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e32e:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 800e332:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e336:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 800e33a:	6803      	ldr	r3, [r0, #0]
 800e33c:	0ada      	lsrs	r2, r3, #11
 800e33e:	680b      	ldr	r3, [r1, #0]
 800e340:	055b      	lsls	r3, r3, #21
 800e342:	4313      	orrs	r3, r2
 800e344:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e348:	680b      	ldr	r3, [r1, #0]
 800e34a:	0ada      	lsrs	r2, r3, #11
 800e34c:	6803      	ldr	r3, [r0, #0]
 800e34e:	055b      	lsls	r3, r3, #21
 800e350:	4313      	orrs	r3, r2
 800e352:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800e356:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 800e35a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800e35e:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 800e362:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800e366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e36a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	ea80 0602 	eor.w	r6, r0, r2
 800e376:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 800e37a:	404b      	eors	r3, r1
 800e37c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800e380:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800e384:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800e388:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 800e38c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e390:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 800e394:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e398:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 800e39c:	6803      	ldr	r3, [r0, #0]
 800e39e:	0c9a      	lsrs	r2, r3, #18
 800e3a0:	680b      	ldr	r3, [r1, #0]
 800e3a2:	039b      	lsls	r3, r3, #14
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800e3aa:	680b      	ldr	r3, [r1, #0]
 800e3ac:	0c9a      	lsrs	r2, r3, #18
 800e3ae:	6803      	ldr	r3, [r0, #0]
 800e3b0:	039b      	lsls	r3, r3, #14
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800e3b8:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800e3bc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800e3c0:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 800e3c4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3cc:	43d1      	mvns	r1, r2
 800e3ce:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 800e3d2:	43db      	mvns	r3, r3
 800e3d4:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 800e3d8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e0:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 800e3e4:	4011      	ands	r1, r2
 800e3e6:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 800e3ea:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 800e3ee:	400b      	ands	r3, r1
 800e3f0:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800e3f4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 800e400:	4051      	eors	r1, r2
 800e402:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800e406:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 800e40a:	404b      	eors	r3, r1
 800e40c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800e410:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 800e414:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800e418:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 800e41c:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800e420:	3301      	adds	r3, #1
 800e422:	4af4      	ldr	r2, [pc, #976]	; (800e7f4 <KeccakF1600_StatePermute+0x223c>)
 800e424:	00db      	lsls	r3, r3, #3
 800e426:	4413      	add	r3, r2
 800e428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e42c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	ea82 0600 	eor.w	r6, r2, r0
 800e438:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 800e43c:	404b      	eors	r3, r1
 800e43e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800e442:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 800e446:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800e44a:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 800e44e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	43d1      	mvns	r1, r2
 800e458:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 800e45c:	43db      	mvns	r3, r3
 800e45e:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 800e462:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 800e46e:	4011      	ands	r1, r2
 800e470:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 800e474:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 800e478:	400b      	ands	r3, r1
 800e47a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 800e47e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 800e48a:	4051      	eors	r1, r2
 800e48c:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 800e490:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 800e494:	404b      	eors	r3, r1
 800e496:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800e49a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 800e49e:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800e4a2:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 800e4a6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	43d1      	mvns	r1, r2
 800e4b0:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 800e4b4:	43db      	mvns	r3, r3
 800e4b6:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 800e4ba:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 800e4c6:	4011      	ands	r1, r2
 800e4c8:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 800e4cc:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 800e4d0:	400b      	ands	r3, r1
 800e4d2:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 800e4d6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4de:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 800e4e2:	4051      	eors	r1, r2
 800e4e4:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800e4e8:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 800e4ec:	404b      	eors	r3, r1
 800e4ee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800e4f2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800e4f6:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800e4fa:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 800e4fe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	43d1      	mvns	r1, r2
 800e508:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 800e50c:	43db      	mvns	r3, r3
 800e50e:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 800e512:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 800e51e:	4011      	ands	r1, r2
 800e520:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 800e524:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 800e528:	400b      	ands	r3, r1
 800e52a:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800e52e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e536:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 800e53a:	4051      	eors	r1, r2
 800e53c:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 800e540:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 800e544:	404b      	eors	r3, r1
 800e546:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800e54a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800e54e:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800e552:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 800e556:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	43d1      	mvns	r1, r2
 800e560:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 800e564:	43db      	mvns	r3, r3
 800e566:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800e56a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 800e576:	4011      	ands	r1, r2
 800e578:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 800e57c:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 800e580:	400b      	ands	r3, r1
 800e582:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800e586:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 800e592:	4051      	eors	r1, r2
 800e594:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 800e598:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 800e59c:	404b      	eors	r3, r1
 800e59e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800e5a2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e5a6:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800e5aa:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 800e5ae:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800e5b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5b6:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800e5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5be:	ea80 0602 	eor.w	r6, r0, r2
 800e5c2:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 800e5c6:	404b      	eors	r3, r1
 800e5c8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800e5cc:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 800e5d0:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800e5d4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 800e5d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e5dc:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 800e5e0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e5e4:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 800e5e8:	6803      	ldr	r3, [r0, #0]
 800e5ea:	091a      	lsrs	r2, r3, #4
 800e5ec:	680b      	ldr	r3, [r1, #0]
 800e5ee:	071b      	lsls	r3, r3, #28
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800e5f6:	680b      	ldr	r3, [r1, #0]
 800e5f8:	091a      	lsrs	r2, r3, #4
 800e5fa:	6803      	ldr	r3, [r0, #0]
 800e5fc:	071b      	lsls	r3, r3, #28
 800e5fe:	4313      	orrs	r3, r2
 800e600:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800e604:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800e608:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800e60c:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 800e610:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 800e614:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e618:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	ea80 0602 	eor.w	r6, r0, r2
 800e624:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 800e628:	404b      	eors	r3, r1
 800e62a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800e62e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800e632:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800e636:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 800e63a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e63e:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 800e642:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e646:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	0b1a      	lsrs	r2, r3, #12
 800e64e:	680b      	ldr	r3, [r1, #0]
 800e650:	051b      	lsls	r3, r3, #20
 800e652:	4313      	orrs	r3, r2
 800e654:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800e658:	680b      	ldr	r3, [r1, #0]
 800e65a:	0b1a      	lsrs	r2, r3, #12
 800e65c:	6803      	ldr	r3, [r0, #0]
 800e65e:	051b      	lsls	r3, r3, #20
 800e660:	4313      	orrs	r3, r2
 800e662:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800e666:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800e66a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800e66e:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 800e672:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800e676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e67a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	ea80 0602 	eor.w	r6, r0, r2
 800e686:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 800e68a:	404b      	eors	r3, r1
 800e68c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800e690:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800e694:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800e698:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 800e69c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e6a0:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 800e6a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e6a8:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 800e6ac:	6803      	ldr	r3, [r0, #0]
 800e6ae:	0f5a      	lsrs	r2, r3, #29
 800e6b0:	680b      	ldr	r3, [r1, #0]
 800e6b2:	00db      	lsls	r3, r3, #3
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800e6ba:	680b      	ldr	r3, [r1, #0]
 800e6bc:	0f5a      	lsrs	r2, r3, #29
 800e6be:	6803      	ldr	r3, [r0, #0]
 800e6c0:	00db      	lsls	r3, r3, #3
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800e6c8:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800e6cc:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800e6d0:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 800e6d4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800e6d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6dc:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800e6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e4:	ea80 0602 	eor.w	r6, r0, r2
 800e6e8:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 800e6ec:	404b      	eors	r3, r1
 800e6ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800e6f2:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800e6f6:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800e6fa:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 800e6fe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e702:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 800e706:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e70a:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 800e70e:	6803      	ldr	r3, [r0, #0]
 800e710:	035a      	lsls	r2, r3, #13
 800e712:	680b      	ldr	r3, [r1, #0]
 800e714:	0cdb      	lsrs	r3, r3, #19
 800e716:	4313      	orrs	r3, r2
 800e718:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800e71c:	680b      	ldr	r3, [r1, #0]
 800e71e:	035a      	lsls	r2, r3, #13
 800e720:	6803      	ldr	r3, [r0, #0]
 800e722:	0cdb      	lsrs	r3, r3, #19
 800e724:	4313      	orrs	r3, r2
 800e726:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800e72a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e72e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800e732:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 800e736:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800e73a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e73e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	ea80 0602 	eor.w	r6, r0, r2
 800e74a:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 800e74e:	404b      	eors	r3, r1
 800e750:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800e754:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e758:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800e75c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 800e760:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e764:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 800e768:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e76c:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 800e770:	6803      	ldr	r3, [r0, #0]
 800e772:	075a      	lsls	r2, r3, #29
 800e774:	680b      	ldr	r3, [r1, #0]
 800e776:	08db      	lsrs	r3, r3, #3
 800e778:	4313      	orrs	r3, r2
 800e77a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800e77e:	680b      	ldr	r3, [r1, #0]
 800e780:	075a      	lsls	r2, r3, #29
 800e782:	6803      	ldr	r3, [r0, #0]
 800e784:	08db      	lsrs	r3, r3, #3
 800e786:	4313      	orrs	r3, r2
 800e788:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800e78c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e790:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800e794:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 800e798:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	43d1      	mvns	r1, r2
 800e7a2:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 800e7a6:	43db      	mvns	r3, r3
 800e7a8:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 800e7ac:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 800e7b8:	4011      	ands	r1, r2
 800e7ba:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 800e7be:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 800e7c2:	400b      	ands	r3, r1
 800e7c4:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800e7c8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d0:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 800e7d4:	4051      	eors	r1, r2
 800e7d6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 800e7da:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 800e7de:	404b      	eors	r3, r1
 800e7e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800e7e4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e7e8:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800e7ec:	e9c1 2300 	strd	r2, r3, [r1]
 800e7f0:	e002      	b.n	800e7f8 <KeccakF1600_StatePermute+0x2240>
 800e7f2:	bf00      	nop
 800e7f4:	08014198 	.word	0x08014198
            Age =   BCe ^((~BCi)&  BCo );
 800e7f8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	43d1      	mvns	r1, r2
 800e802:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800e806:	43db      	mvns	r3, r3
 800e808:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800e80c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 800e818:	4011      	ands	r1, r2
 800e81a:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 800e81e:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 800e822:	400b      	ands	r3, r1
 800e824:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800e828:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800e82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e830:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 800e834:	4051      	eors	r1, r2
 800e836:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 800e83a:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 800e83e:	404b      	eors	r3, r1
 800e840:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800e844:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e848:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800e84c:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 800e850:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	43d1      	mvns	r1, r2
 800e85a:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 800e85e:	43db      	mvns	r3, r3
 800e860:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 800e864:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 800e870:	4011      	ands	r1, r2
 800e872:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 800e876:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 800e87a:	400b      	ands	r3, r1
 800e87c:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800e880:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 800e88c:	4051      	eors	r1, r2
 800e88e:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800e892:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 800e896:	404b      	eors	r3, r1
 800e898:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800e89c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e8a0:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800e8a4:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 800e8a8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800e8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b0:	43d1      	mvns	r1, r2
 800e8b2:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 800e8b6:	43db      	mvns	r3, r3
 800e8b8:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 800e8bc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800e8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c4:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 800e8c8:	4011      	ands	r1, r2
 800e8ca:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 800e8ce:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 800e8d2:	400b      	ands	r3, r1
 800e8d4:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800e8d8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800e8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e0:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 800e8e4:	4051      	eors	r1, r2
 800e8e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800e8ea:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 800e8ee:	404b      	eors	r3, r1
 800e8f0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800e8f4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e8f8:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800e8fc:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 800e900:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	43d1      	mvns	r1, r2
 800e90a:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 800e90e:	43db      	mvns	r3, r3
 800e910:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 800e914:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91c:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 800e920:	4011      	ands	r1, r2
 800e922:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 800e926:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800e92a:	400b      	ands	r3, r1
 800e92c:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800e930:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 800e93c:	4051      	eors	r1, r2
 800e93e:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800e942:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 800e946:	404b      	eors	r3, r1
 800e948:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800e94c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e950:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800e954:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 800e958:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800e95c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e960:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	ea80 0602 	eor.w	r6, r0, r2
 800e96c:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 800e970:	404b      	eors	r3, r1
 800e972:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800e976:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e97a:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800e97e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 800e982:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e986:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 800e98a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e98e:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 800e992:	6803      	ldr	r3, [r0, #0]
 800e994:	0fda      	lsrs	r2, r3, #31
 800e996:	680b      	ldr	r3, [r1, #0]
 800e998:	005b      	lsls	r3, r3, #1
 800e99a:	4313      	orrs	r3, r2
 800e99c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800e9a0:	680b      	ldr	r3, [r1, #0]
 800e9a2:	0fda      	lsrs	r2, r3, #31
 800e9a4:	6803      	ldr	r3, [r0, #0]
 800e9a6:	005b      	lsls	r3, r3, #1
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800e9ae:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800e9b2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800e9b6:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 800e9ba:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 800e9be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9c2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ca:	ea80 0602 	eor.w	r6, r0, r2
 800e9ce:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 800e9d2:	404b      	eors	r3, r1
 800e9d4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e9d8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800e9dc:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800e9e0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 800e9e4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9e8:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 800e9ec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800e9f0:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 800e9f4:	6803      	ldr	r3, [r0, #0]
 800e9f6:	0e9a      	lsrs	r2, r3, #26
 800e9f8:	680b      	ldr	r3, [r1, #0]
 800e9fa:	019b      	lsls	r3, r3, #6
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800ea02:	680b      	ldr	r3, [r1, #0]
 800ea04:	0e9a      	lsrs	r2, r3, #26
 800ea06:	6803      	ldr	r3, [r0, #0]
 800ea08:	019b      	lsls	r3, r3, #6
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800ea10:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800ea14:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ea18:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 800ea1c:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 800ea20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea24:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	ea80 0602 	eor.w	r6, r0, r2
 800ea30:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 800ea34:	404b      	eors	r3, r1
 800ea36:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800ea3a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800ea3e:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800ea42:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 800ea46:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea4a:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 800ea4e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ea52:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 800ea56:	6803      	ldr	r3, [r0, #0]
 800ea58:	09da      	lsrs	r2, r3, #7
 800ea5a:	680b      	ldr	r3, [r1, #0]
 800ea5c:	065b      	lsls	r3, r3, #25
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800ea64:	680b      	ldr	r3, [r1, #0]
 800ea66:	09da      	lsrs	r2, r3, #7
 800ea68:	6803      	ldr	r3, [r0, #0]
 800ea6a:	065b      	lsls	r3, r3, #25
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800ea72:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800ea76:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ea7a:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 800ea7e:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800ea82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea86:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	ea80 0602 	eor.w	r6, r0, r2
 800ea92:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 800ea96:	404b      	eors	r3, r1
 800ea98:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ea9c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800eaa0:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800eaa4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 800eaa8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eaac:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 800eab0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eab4:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 800eab8:	6803      	ldr	r3, [r0, #0]
 800eaba:	0e1a      	lsrs	r2, r3, #24
 800eabc:	680b      	ldr	r3, [r1, #0]
 800eabe:	021b      	lsls	r3, r3, #8
 800eac0:	4313      	orrs	r3, r2
 800eac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800eac6:	680b      	ldr	r3, [r1, #0]
 800eac8:	0e1a      	lsrs	r2, r3, #24
 800eaca:	6803      	ldr	r3, [r0, #0]
 800eacc:	021b      	lsls	r3, r3, #8
 800eace:	4313      	orrs	r3, r2
 800ead0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ead4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800ead8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800eadc:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 800eae0:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800eae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eae8:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	ea80 0602 	eor.w	r6, r0, r2
 800eaf4:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 800eaf8:	404b      	eors	r3, r1
 800eafa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800eafe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800eb02:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800eb06:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 800eb0a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb0e:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 800eb12:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eb16:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 800eb1a:	6803      	ldr	r3, [r0, #0]
 800eb1c:	0b9a      	lsrs	r2, r3, #14
 800eb1e:	680b      	ldr	r3, [r1, #0]
 800eb20:	049b      	lsls	r3, r3, #18
 800eb22:	4313      	orrs	r3, r2
 800eb24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800eb28:	680b      	ldr	r3, [r1, #0]
 800eb2a:	0b9a      	lsrs	r2, r3, #14
 800eb2c:	6803      	ldr	r3, [r0, #0]
 800eb2e:	049b      	lsls	r3, r3, #18
 800eb30:	4313      	orrs	r3, r2
 800eb32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800eb36:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eb3a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800eb3e:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 800eb42:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	43d1      	mvns	r1, r2
 800eb4c:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 800eb50:	43db      	mvns	r3, r3
 800eb52:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800eb56:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 800eb62:	4011      	ands	r1, r2
 800eb64:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 800eb68:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 800eb6c:	400b      	ands	r3, r1
 800eb6e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800eb72:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7a:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 800eb7e:	4051      	eors	r1, r2
 800eb80:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800eb84:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 800eb88:	404b      	eors	r3, r1
 800eb8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eb8e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800eb92:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800eb96:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 800eb9a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba2:	43d1      	mvns	r1, r2
 800eba4:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 800eba8:	43db      	mvns	r3, r3
 800ebaa:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800ebae:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb6:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 800ebba:	4011      	ands	r1, r2
 800ebbc:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 800ebc0:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 800ebc4:	400b      	ands	r3, r1
 800ebc6:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800ebca:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd2:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 800ebd6:	4051      	eors	r1, r2
 800ebd8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800ebdc:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 800ebe0:	404b      	eors	r3, r1
 800ebe2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ebe6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800ebea:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800ebee:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 800ebf2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	43d1      	mvns	r1, r2
 800ebfc:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 800ec00:	43db      	mvns	r3, r3
 800ec02:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800ec06:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800ec12:	4011      	ands	r1, r2
 800ec14:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 800ec18:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 800ec1c:	400b      	ands	r3, r1
 800ec1e:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800ec22:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800ec26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2a:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 800ec2e:	4051      	eors	r1, r2
 800ec30:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800ec34:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 800ec38:	404b      	eors	r3, r1
 800ec3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ec3e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800ec42:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800ec46:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 800ec4a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	43d1      	mvns	r1, r2
 800ec54:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 800ec58:	43db      	mvns	r3, r3
 800ec5a:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800ec5e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800ec6a:	4011      	ands	r1, r2
 800ec6c:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 800ec70:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 800ec74:	400b      	ands	r3, r1
 800ec76:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800ec7a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 800ec86:	4051      	eors	r1, r2
 800ec88:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800ec8c:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 800ec90:	404b      	eors	r3, r1
 800ec92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ec96:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800ec9a:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800ec9e:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 800eca2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800eca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecaa:	43d1      	mvns	r1, r2
 800ecac:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 800ecb0:	43db      	mvns	r3, r3
 800ecb2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800ecb6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbe:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800ecc2:	4011      	ands	r1, r2
 800ecc4:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 800ecc8:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800eccc:	400b      	ands	r3, r1
 800ecce:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800ecd2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecda:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 800ecde:	4051      	eors	r1, r2
 800ece0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800ece4:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 800ece8:	404b      	eors	r3, r1
 800ecea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ecee:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800ecf2:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800ecf6:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 800ecfa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800ecfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed02:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	ea80 0602 	eor.w	r6, r0, r2
 800ed0e:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 800ed12:	404b      	eors	r3, r1
 800ed14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ed18:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ed1c:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800ed20:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 800ed24:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ed28:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 800ed2c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ed30:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 800ed34:	6803      	ldr	r3, [r0, #0]
 800ed36:	095a      	lsrs	r2, r3, #5
 800ed38:	680b      	ldr	r3, [r1, #0]
 800ed3a:	06db      	lsls	r3, r3, #27
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ed42:	680b      	ldr	r3, [r1, #0]
 800ed44:	095a      	lsrs	r2, r3, #5
 800ed46:	6803      	ldr	r3, [r0, #0]
 800ed48:	06db      	lsls	r3, r3, #27
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ed50:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ed54:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800ed58:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 800ed5c:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800ed60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed64:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800ed68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6c:	ea80 0602 	eor.w	r6, r0, r2
 800ed70:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 800ed74:	404b      	eors	r3, r1
 800ed76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ed7a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800ed7e:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800ed82:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 800ed86:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ed8a:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 800ed8e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ed92:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 800ed96:	6803      	ldr	r3, [r0, #0]
 800ed98:	011a      	lsls	r2, r3, #4
 800ed9a:	680b      	ldr	r3, [r1, #0]
 800ed9c:	0f1b      	lsrs	r3, r3, #28
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eda4:	680b      	ldr	r3, [r1, #0]
 800eda6:	011a      	lsls	r2, r3, #4
 800eda8:	6803      	ldr	r3, [r0, #0]
 800edaa:	0f1b      	lsrs	r3, r3, #28
 800edac:	4313      	orrs	r3, r2
 800edae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800edb2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800edb6:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800edba:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 800edbe:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800edc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edc6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800edca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edce:	ea80 0602 	eor.w	r6, r0, r2
 800edd2:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 800edd6:	404b      	eors	r3, r1
 800edd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eddc:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800ede0:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800ede4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 800ede8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800edec:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 800edf0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800edf4:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 800edf8:	6803      	ldr	r3, [r0, #0]
 800edfa:	0d9a      	lsrs	r2, r3, #22
 800edfc:	680b      	ldr	r3, [r1, #0]
 800edfe:	029b      	lsls	r3, r3, #10
 800ee00:	4313      	orrs	r3, r2
 800ee02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ee06:	680b      	ldr	r3, [r1, #0]
 800ee08:	0d9a      	lsrs	r2, r3, #22
 800ee0a:	6803      	ldr	r3, [r0, #0]
 800ee0c:	029b      	lsls	r3, r3, #10
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ee14:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800ee18:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ee1c:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 800ee20:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800ee24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee28:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800ee2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee30:	ea80 0602 	eor.w	r6, r0, r2
 800ee34:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 800ee38:	404b      	eors	r3, r1
 800ee3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ee3e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ee42:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800ee46:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 800ee4a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ee4e:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 800ee52:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ee56:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 800ee5a:	6803      	ldr	r3, [r0, #0]
 800ee5c:	0c5a      	lsrs	r2, r3, #17
 800ee5e:	680b      	ldr	r3, [r1, #0]
 800ee60:	03db      	lsls	r3, r3, #15
 800ee62:	4313      	orrs	r3, r2
 800ee64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee68:	680b      	ldr	r3, [r1, #0]
 800ee6a:	0c5a      	lsrs	r2, r3, #17
 800ee6c:	6803      	ldr	r3, [r0, #0]
 800ee6e:	03db      	lsls	r3, r3, #15
 800ee70:	4313      	orrs	r3, r2
 800ee72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee76:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800ee7a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800ee7e:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 800ee82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee8a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	ea80 0602 	eor.w	r6, r0, r2
 800ee96:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 800ee9a:	404b      	eors	r3, r1
 800ee9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eea0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800eea4:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800eea8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 800eeac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eeb0:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 800eeb4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eeb8:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 800eebc:	6803      	ldr	r3, [r0, #0]
 800eebe:	061a      	lsls	r2, r3, #24
 800eec0:	680b      	ldr	r3, [r1, #0]
 800eec2:	0a1b      	lsrs	r3, r3, #8
 800eec4:	4313      	orrs	r3, r2
 800eec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eeca:	680b      	ldr	r3, [r1, #0]
 800eecc:	061a      	lsls	r2, r3, #24
 800eece:	6803      	ldr	r3, [r0, #0]
 800eed0:	0a1b      	lsrs	r3, r3, #8
 800eed2:	4313      	orrs	r3, r2
 800eed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eed8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800eedc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800eee0:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 800eee4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeec:	43d1      	mvns	r1, r2
 800eeee:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 800eef2:	43db      	mvns	r3, r3
 800eef4:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800eef8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800eefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef00:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800ef04:	4011      	ands	r1, r2
 800ef06:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 800ef0a:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800ef0e:	400b      	ands	r3, r1
 800ef10:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800ef14:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800ef20:	4051      	eors	r1, r2
 800ef22:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800ef26:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800ef2a:	404b      	eors	r3, r1
 800ef2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ef30:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800ef34:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800ef38:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 800ef3c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	43d1      	mvns	r1, r2
 800ef46:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 800ef4a:	43db      	mvns	r3, r3
 800ef4c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800ef50:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800ef5c:	4011      	ands	r1, r2
 800ef5e:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 800ef62:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800ef66:	400b      	ands	r3, r1
 800ef68:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800ef6c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800ef78:	4051      	eors	r1, r2
 800ef7a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800ef7e:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800ef82:	404b      	eors	r3, r1
 800ef84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ef88:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ef8c:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800ef90:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 800ef94:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	43d1      	mvns	r1, r2
 800ef9e:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800efa2:	43db      	mvns	r3, r3
 800efa4:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800efa8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800efac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb0:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800efb4:	4011      	ands	r1, r2
 800efb6:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 800efba:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800efbe:	400b      	ands	r3, r1
 800efc0:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800efc4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800efd0:	4051      	eors	r1, r2
 800efd2:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800efd6:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800efda:	404b      	eors	r3, r1
 800efdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800efe0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800efe4:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800efe8:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 800efec:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	43d1      	mvns	r1, r2
 800eff6:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800effa:	43db      	mvns	r3, r3
 800effc:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800f000:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f008:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800f00c:	4011      	ands	r1, r2
 800f00e:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 800f012:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800f016:	400b      	ands	r3, r1
 800f018:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800f01c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800f028:	4051      	eors	r1, r2
 800f02a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f02e:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800f032:	404b      	eors	r3, r1
 800f034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f038:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800f03c:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800f040:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 800f044:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	43d1      	mvns	r1, r2
 800f04e:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 800f052:	43db      	mvns	r3, r3
 800f054:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800f058:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800f064:	4011      	ands	r1, r2
 800f066:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 800f06a:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800f06e:	400b      	ands	r3, r1
 800f070:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800f074:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800f080:	4051      	eors	r1, r2
 800f082:	67b9      	str	r1, [r7, #120]	; 0x78
 800f084:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800f088:	404b      	eors	r3, r1
 800f08a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f08c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f090:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800f094:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 800f098:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800f09c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0a0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	ea80 0602 	eor.w	r6, r0, r2
 800f0ac:	673e      	str	r6, [r7, #112]	; 0x70
 800f0ae:	404b      	eors	r3, r1
 800f0b0:	677b      	str	r3, [r7, #116]	; 0x74
 800f0b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800f0b6:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800f0ba:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 800f0be:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f0c2:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 800f0c6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f0ca:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 800f0ce:	6803      	ldr	r3, [r0, #0]
 800f0d0:	079a      	lsls	r2, r3, #30
 800f0d2:	680b      	ldr	r3, [r1, #0]
 800f0d4:	089b      	lsrs	r3, r3, #2
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0da:	680b      	ldr	r3, [r1, #0]
 800f0dc:	079a      	lsls	r2, r3, #30
 800f0de:	6803      	ldr	r3, [r0, #0]
 800f0e0:	089b      	lsrs	r3, r3, #2
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f0e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f0ea:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f0ee:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 800f0f2:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800f0f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0fa:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f102:	ea80 0602 	eor.w	r6, r0, r2
 800f106:	663e      	str	r6, [r7, #96]	; 0x60
 800f108:	404b      	eors	r3, r1
 800f10a:	667b      	str	r3, [r7, #100]	; 0x64
 800f10c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800f110:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800f114:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 800f118:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f11c:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 800f120:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f124:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 800f128:	6803      	ldr	r3, [r0, #0]
 800f12a:	05da      	lsls	r2, r3, #23
 800f12c:	680b      	ldr	r3, [r1, #0]
 800f12e:	0a5b      	lsrs	r3, r3, #9
 800f130:	4313      	orrs	r3, r2
 800f132:	65bb      	str	r3, [r7, #88]	; 0x58
 800f134:	680b      	ldr	r3, [r1, #0]
 800f136:	05da      	lsls	r2, r3, #23
 800f138:	6803      	ldr	r3, [r0, #0]
 800f13a:	0a5b      	lsrs	r3, r3, #9
 800f13c:	4313      	orrs	r3, r2
 800f13e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f140:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f144:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f148:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 800f14c:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800f150:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f154:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	ea80 0602 	eor.w	r6, r0, r2
 800f160:	653e      	str	r6, [r7, #80]	; 0x50
 800f162:	404b      	eors	r3, r1
 800f164:	657b      	str	r3, [r7, #84]	; 0x54
 800f166:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f16a:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800f16e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 800f172:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f176:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 800f17a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f17e:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 800f182:	6803      	ldr	r3, [r0, #0]
 800f184:	01da      	lsls	r2, r3, #7
 800f186:	680b      	ldr	r3, [r1, #0]
 800f188:	0e5b      	lsrs	r3, r3, #25
 800f18a:	4313      	orrs	r3, r2
 800f18c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f18e:	680b      	ldr	r3, [r1, #0]
 800f190:	01da      	lsls	r2, r3, #7
 800f192:	6803      	ldr	r3, [r0, #0]
 800f194:	0e5b      	lsrs	r3, r3, #25
 800f196:	4313      	orrs	r3, r2
 800f198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f19a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f19e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f1a2:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 800f1a6:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800f1aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1ae:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	ea80 0602 	eor.w	r6, r0, r2
 800f1ba:	643e      	str	r6, [r7, #64]	; 0x40
 800f1bc:	404b      	eors	r3, r1
 800f1be:	647b      	str	r3, [r7, #68]	; 0x44
 800f1c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f1c4:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800f1c8:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 800f1cc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f1d0:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800f1d4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f1d8:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 800f1dc:	6803      	ldr	r3, [r0, #0]
 800f1de:	025a      	lsls	r2, r3, #9
 800f1e0:	680b      	ldr	r3, [r1, #0]
 800f1e2:	0ddb      	lsrs	r3, r3, #23
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1e8:	680b      	ldr	r3, [r1, #0]
 800f1ea:	025a      	lsls	r2, r3, #9
 800f1ec:	6803      	ldr	r3, [r0, #0]
 800f1ee:	0ddb      	lsrs	r3, r3, #23
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f1f8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f1fc:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 800f200:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800f204:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f208:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f210:	ea80 0602 	eor.w	r6, r0, r2
 800f214:	633e      	str	r6, [r7, #48]	; 0x30
 800f216:	404b      	eors	r3, r1
 800f218:	637b      	str	r3, [r7, #52]	; 0x34
 800f21a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f21e:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 800f222:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 800f226:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f22a:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 800f22e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f232:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 800f236:	6803      	ldr	r3, [r0, #0]
 800f238:	0f9a      	lsrs	r2, r3, #30
 800f23a:	680b      	ldr	r3, [r1, #0]
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	4313      	orrs	r3, r2
 800f240:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f242:	680b      	ldr	r3, [r1, #0]
 800f244:	0f9a      	lsrs	r2, r3, #30
 800f246:	6803      	ldr	r3, [r0, #0]
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4313      	orrs	r3, r2
 800f24c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f24e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f252:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f256:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 800f25a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	43d1      	mvns	r1, r2
 800f264:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 800f268:	43db      	mvns	r3, r3
 800f26a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800f26e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 800f27a:	4011      	ands	r1, r2
 800f27c:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 800f280:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800f284:	400b      	ands	r3, r1
 800f286:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800f28a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f292:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800f296:	4051      	eors	r1, r2
 800f298:	6239      	str	r1, [r7, #32]
 800f29a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800f29e:	404b      	eors	r3, r1
 800f2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800f2a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f2a6:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800f2aa:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 800f2ae:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b6:	43d1      	mvns	r1, r2
 800f2b8:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 800f2bc:	43db      	mvns	r3, r3
 800f2be:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800f2c2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ca:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 800f2ce:	4011      	ands	r1, r2
 800f2d0:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 800f2d4:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800f2d8:	400b      	ands	r3, r1
 800f2da:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800f2de:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e6:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 800f2ea:	4051      	eors	r1, r2
 800f2ec:	61b9      	str	r1, [r7, #24]
 800f2ee:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 800f2f2:	404b      	eors	r3, r1
 800f2f4:	61fb      	str	r3, [r7, #28]
 800f2f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f2fa:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800f2fe:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 800f302:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30a:	43d1      	mvns	r1, r2
 800f30c:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800f310:	43db      	mvns	r3, r3
 800f312:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800f316:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31e:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800f322:	4011      	ands	r1, r2
 800f324:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 800f328:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 800f32c:	400b      	ands	r3, r1
 800f32e:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800f332:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33a:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 800f33e:	4051      	eors	r1, r2
 800f340:	6139      	str	r1, [r7, #16]
 800f342:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 800f346:	404b      	eors	r3, r1
 800f348:	617b      	str	r3, [r7, #20]
 800f34a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f34e:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800f352:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 800f356:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35e:	43d1      	mvns	r1, r2
 800f360:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 800f364:	43db      	mvns	r3, r3
 800f366:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800f36a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f372:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 800f376:	ea01 0a02 	and.w	sl, r1, r2
 800f37a:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 800f37e:	ea01 0b03 	and.w	fp, r1, r3
 800f382:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38a:	ea82 010a 	eor.w	r1, r2, sl
 800f38e:	60b9      	str	r1, [r7, #8]
 800f390:	ea83 030b 	eor.w	r3, r3, fp
 800f394:	60fb      	str	r3, [r7, #12]
 800f396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f39a:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800f39e:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 800f3a2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3aa:	ea6f 0802 	mvn.w	r8, r2
 800f3ae:	ea6f 0903 	mvn.w	r9, r3
 800f3b2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ba:	ea08 0402 	and.w	r4, r8, r2
 800f3be:	ea09 0503 	and.w	r5, r9, r3
 800f3c2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ca:	ea82 0104 	eor.w	r1, r2, r4
 800f3ce:	6039      	str	r1, [r7, #0]
 800f3d0:	406b      	eors	r3, r5
 800f3d2:	607b      	str	r3, [r7, #4]
 800f3d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3d8:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800f3dc:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 800f3e0:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800f3e4:	3302      	adds	r3, #2
 800f3e6:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800f3ea:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800f3ee:	2b17      	cmp	r3, #23
 800f3f0:	f77d aa04 	ble.w	800c7fc <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 800f3f4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f3f8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f3fc:	6819      	ldr	r1, [r3, #0]
 800f3fe:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f406:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 800f40a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f40e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f103 0108 	add.w	r1, r3, #8
 800f418:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 800f424:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f428:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f103 0110 	add.w	r1, r3, #16
 800f432:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800f436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 800f43e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f442:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f103 0118 	add.w	r1, r3, #24
 800f44c:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 800f458:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f45c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f103 0120 	add.w	r1, r3, #32
 800f466:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 800f472:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f476:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f480:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 800f48c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f490:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f49a:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 800f4a6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f4aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f4b4:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800f4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4bc:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 800f4c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f4c4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f4ce:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 800f4da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f4de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800f4e8:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f0:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 800f4f4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f4f8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800f502:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800f506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50a:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 800f50e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f512:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800f51c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f524:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 800f528:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f52c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800f536:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53e:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 800f542:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f546:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800f550:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800f554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f558:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 800f55c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f560:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800f56a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800f56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f572:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 800f576:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f57a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800f584:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800f588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58c:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 800f590:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f594:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800f59e:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 800f5aa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f5ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800f5b8:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800f5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c0:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 800f5c4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f5c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800f5d2:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5da:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 800f5de:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f5e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800f5ec:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800f5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f4:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 800f5f8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f5fc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800f606:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800f60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60e:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 800f612:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f616:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 800f620:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 800f62c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f630:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 800f63a:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800f63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f642:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 800f646:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f64a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800f654:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800f658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65c:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 800f660:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f664:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 800f66e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800f672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f676:	e9c1 2300 	strd	r2, r3, [r1]
}
 800f67a:	bf00      	nop
 800f67c:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 800f680:	46bd      	mov	sp, r7
 800f682:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f686:	4770      	bx	lr

0800f688 <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 800f690:	2300      	movs	r3, #0
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	e00c      	b.n	800f6b0 <keccak_init+0x28>
    state->s[i] = 0;
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	00db      	lsls	r3, r3, #3
 800f69c:	18d1      	adds	r1, r2, r3
 800f69e:	f04f 0200 	mov.w	r2, #0
 800f6a2:	f04f 0300 	mov.w	r3, #0
 800f6a6:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2b18      	cmp	r3, #24
 800f6b4:	d9ef      	bls.n	800f696 <keccak_init+0xe>
  state->pos = 0;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800f6be:	bf00      	nop
 800f6c0:	3714      	adds	r7, #20
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 800f6ca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f6ce:	b08e      	sub	sp, #56	; 0x38
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6278      	str	r0, [r7, #36]	; 0x24
 800f6d4:	6239      	str	r1, [r7, #32]
 800f6d6:	61fa      	str	r2, [r7, #28]
 800f6d8:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 800f6da:	2300      	movs	r3, #0
 800f6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6de:	2300      	movs	r3, #0
 800f6e0:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	f003 0307 	and.w	r3, r3, #7
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d03a      	beq.n	800f762 <keccak_absorb+0x98>
    i = pos & 7;
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	f003 0307 	and.w	r3, r3, #7
 800f6f2:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 800f6f4:	e012      	b.n	800f71c <keccak_absorb+0x52>
      t[i++] = *m++;
 800f6f6:	69ba      	ldr	r2, [r7, #24]
 800f6f8:	1c53      	adds	r3, r2, #1
 800f6fa:	61bb      	str	r3, [r7, #24]
 800f6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fe:	1c59      	adds	r1, r3, #1
 800f700:	6379      	str	r1, [r7, #52]	; 0x34
 800f702:	7812      	ldrb	r2, [r2, #0]
 800f704:	3320      	adds	r3, #32
 800f706:	f107 0118 	add.w	r1, r7, #24
 800f70a:	440b      	add	r3, r1
 800f70c:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 800f710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f712:	3b01      	subs	r3, #1
 800f714:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	3301      	adds	r3, #1
 800f71a:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 800f71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f71e:	2b07      	cmp	r3, #7
 800f720:	d802      	bhi.n	800f728 <keccak_absorb+0x5e>
 800f722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1e6      	bne.n	800f6f6 <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 800f728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fc fed9 	bl	800c4e4 <load64>
 800f732:	4604      	mov	r4, r0
 800f734:	460d      	mov	r5, r1
 800f736:	69fa      	ldr	r2, [r7, #28]
 800f738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	f023 0307 	bic.w	r3, r3, #7
 800f740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f742:	4413      	add	r3, r2
 800f744:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f748:	69fa      	ldr	r2, [r7, #28]
 800f74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	f023 0207 	bic.w	r2, r3, #7
 800f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f754:	4413      	add	r3, r2
 800f756:	ea84 0800 	eor.w	r8, r4, r0
 800f75a:	ea85 0901 	eor.w	r9, r5, r1
 800f75e:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d075      	beq.n	800f854 <keccak_absorb+0x18a>
 800f768:	6a3a      	ldr	r2, [r7, #32]
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f770:	429a      	cmp	r2, r3
 800f772:	d36f      	bcc.n	800f854 <keccak_absorb+0x18a>
    for(i=0;i<(r-pos)/8;i++)
 800f774:	2300      	movs	r3, #0
 800f776:	637b      	str	r3, [r7, #52]	; 0x34
 800f778:	e023      	b.n	800f7c2 <keccak_absorb+0xf8>
      s[pos/8+i] ^= load64(m+8*i);
 800f77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	69ba      	ldr	r2, [r7, #24]
 800f780:	4413      	add	r3, r2
 800f782:	4618      	mov	r0, r3
 800f784:	f7fc feae 	bl	800c4e4 <load64>
 800f788:	4680      	mov	r8, r0
 800f78a:	4689      	mov	r9, r1
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	08dc      	lsrs	r4, r3, #3
 800f790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f792:	4423      	add	r3, r4
 800f794:	00db      	lsls	r3, r3, #3
 800f796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f798:	4413      	add	r3, r2
 800f79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a0:	4423      	add	r3, r4
 800f7a2:	00db      	lsls	r3, r3, #3
 800f7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7a6:	4413      	add	r3, r2
 800f7a8:	ea88 0200 	eor.w	r2, r8, r0
 800f7ac:	613a      	str	r2, [r7, #16]
 800f7ae:	ea89 0201 	eor.w	r2, r9, r1
 800f7b2:	617a      	str	r2, [r7, #20]
 800f7b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f7b8:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 800f7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7be:	3301      	adds	r3, #1
 800f7c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f7c2:	6a3a      	ldr	r2, [r7, #32]
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	08db      	lsrs	r3, r3, #3
 800f7ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d3d4      	bcc.n	800f77a <keccak_absorb+0xb0>
    m += r-pos;
 800f7d0:	6a3a      	ldr	r2, [r7, #32]
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	69ba      	ldr	r2, [r7, #24]
 800f7d8:	4413      	add	r3, r2
 800f7da:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 800f7dc:	69fa      	ldr	r2, [r7, #28]
 800f7de:	6a3b      	ldr	r3, [r7, #32]
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7e4:	4413      	add	r3, r2
 800f7e6:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 800f7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7ee:	f7fc fee3 	bl	800c5b8 <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 800f7f2:	e02f      	b.n	800f854 <keccak_absorb+0x18a>
    for(i=0;i<r/8;i++)
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f8:	e01c      	b.n	800f834 <keccak_absorb+0x16a>
      s[i] ^= load64(m+8*i);
 800f7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	69ba      	ldr	r2, [r7, #24]
 800f800:	4413      	add	r3, r2
 800f802:	4618      	mov	r0, r3
 800f804:	f7fc fe6e 	bl	800c4e4 <load64>
 800f808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f80a:	00db      	lsls	r3, r3, #3
 800f80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80e:	4413      	add	r3, r2
 800f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f814:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800f816:	00e4      	lsls	r4, r4, #3
 800f818:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f81a:	442c      	add	r4, r5
 800f81c:	ea80 0502 	eor.w	r5, r0, r2
 800f820:	60bd      	str	r5, [r7, #8]
 800f822:	404b      	eors	r3, r1
 800f824:	60fb      	str	r3, [r7, #12]
 800f826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f82a:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 800f82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f830:	3301      	adds	r3, #1
 800f832:	637b      	str	r3, [r7, #52]	; 0x34
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	08db      	lsrs	r3, r3, #3
 800f838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d3dd      	bcc.n	800f7fa <keccak_absorb+0x130>
    m += r;
 800f83e:	69ba      	ldr	r2, [r7, #24]
 800f840:	6a3b      	ldr	r3, [r7, #32]
 800f842:	4413      	add	r3, r2
 800f844:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 800f846:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f848:	6a3b      	ldr	r3, [r7, #32]
 800f84a:	1ad3      	subs	r3, r2, r3
 800f84c:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 800f84e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f850:	f7fc feb2 	bl	800c5b8 <KeccakF1600_StatePermute>
  while(mlen >= r) {
 800f854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f856:	6a3b      	ldr	r3, [r7, #32]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d2cb      	bcs.n	800f7f4 <keccak_absorb+0x12a>
  }

  for(i=0;i<mlen/8;i++)
 800f85c:	2300      	movs	r3, #0
 800f85e:	637b      	str	r3, [r7, #52]	; 0x34
 800f860:	e020      	b.n	800f8a4 <keccak_absorb+0x1da>
    s[pos/8+i] ^= load64(m+8*i);
 800f862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f864:	00db      	lsls	r3, r3, #3
 800f866:	69ba      	ldr	r2, [r7, #24]
 800f868:	4413      	add	r3, r2
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fc fe3a 	bl	800c4e4 <load64>
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	08dc      	lsrs	r4, r3, #3
 800f874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f876:	4423      	add	r3, r4
 800f878:	00db      	lsls	r3, r3, #3
 800f87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f87c:	4413      	add	r3, r2
 800f87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f882:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800f884:	442c      	add	r4, r5
 800f886:	00e4      	lsls	r4, r4, #3
 800f888:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f88a:	442c      	add	r4, r5
 800f88c:	ea80 0502 	eor.w	r5, r0, r2
 800f890:	603d      	str	r5, [r7, #0]
 800f892:	404b      	eors	r3, r1
 800f894:	607b      	str	r3, [r7, #4]
 800f896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f89a:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 800f89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800f8a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8a6:	08db      	lsrs	r3, r3, #3
 800f8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d3d9      	bcc.n	800f862 <keccak_absorb+0x198>
  m += 8*i;
 800f8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b0:	00db      	lsls	r3, r3, #3
 800f8b2:	69ba      	ldr	r2, [r7, #24]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 800f8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ba:	00db      	lsls	r3, r3, #3
 800f8bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 800f8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c4:	00db      	lsls	r3, r3, #3
 800f8c6:	69fa      	ldr	r2, [r7, #28]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 800f8cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d03d      	beq.n	800f94e <keccak_absorb+0x284>
    for(i=0;i<8;i++)
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f8d6:	e008      	b.n	800f8ea <keccak_absorb+0x220>
      t[i] = 0;
 800f8d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8de:	4413      	add	r3, r2
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 800f8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ec:	2b07      	cmp	r3, #7
 800f8ee:	d9f3      	bls.n	800f8d8 <keccak_absorb+0x20e>
    for(i=0;i<mlen;i++)
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f8f4:	e00c      	b.n	800f910 <keccak_absorb+0x246>
      t[i] = m[i];
 800f8f6:	69ba      	ldr	r2, [r7, #24]
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8fa:	4413      	add	r3, r2
 800f8fc:	7819      	ldrb	r1, [r3, #0]
 800f8fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f904:	4413      	add	r3, r2
 800f906:	460a      	mov	r2, r1
 800f908:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 800f90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90c:	3301      	adds	r3, #1
 800f90e:	637b      	str	r3, [r7, #52]	; 0x34
 800f910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f914:	429a      	cmp	r2, r3
 800f916:	d3ee      	bcc.n	800f8f6 <keccak_absorb+0x22c>
    s[pos/8] ^= load64(t);
 800f918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fc fde1 	bl	800c4e4 <load64>
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	f023 0307 	bic.w	r3, r3, #7
 800f928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f92a:	4413      	add	r3, r2
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	69fc      	ldr	r4, [r7, #28]
 800f932:	f024 0407 	bic.w	r4, r4, #7
 800f936:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f938:	442c      	add	r4, r5
 800f93a:	ea80 0a02 	eor.w	sl, r0, r2
 800f93e:	ea81 0b03 	eor.w	fp, r1, r3
 800f942:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 800f946:	69fa      	ldr	r2, [r7, #28]
 800f948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f94a:	4413      	add	r3, r2
 800f94c:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 800f94e:	69fb      	ldr	r3, [r7, #28]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3738      	adds	r7, #56	; 0x38
 800f954:	46bd      	mov	sp, r7
 800f956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f95a <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 800f95a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f95e:	b088      	sub	sp, #32
 800f960:	af00      	add	r7, sp, #0
 800f962:	6178      	str	r0, [r7, #20]
 800f964:	6139      	str	r1, [r7, #16]
 800f966:	60fa      	str	r2, [r7, #12]
 800f968:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	08db      	lsrs	r3, r3, #3
 800f96e:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f003 0307 	and.w	r3, r3, #7
 800f976:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	00db      	lsls	r3, r3, #3
 800f97c:	697a      	ldr	r2, [r7, #20]
 800f97e:	4413      	add	r3, r2
 800f980:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f984:	7afb      	ldrb	r3, [r7, #11]
 800f986:	2200      	movs	r2, #0
 800f988:	4698      	mov	r8, r3
 800f98a:	4691      	mov	r9, r2
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	00db      	lsls	r3, r3, #3
 800f990:	f1a3 0620 	sub.w	r6, r3, #32
 800f994:	f1c3 0220 	rsb	r2, r3, #32
 800f998:	fa09 f503 	lsl.w	r5, r9, r3
 800f99c:	fa08 f606 	lsl.w	r6, r8, r6
 800f9a0:	4335      	orrs	r5, r6
 800f9a2:	fa28 f202 	lsr.w	r2, r8, r2
 800f9a6:	4315      	orrs	r5, r2
 800f9a8:	fa08 f403 	lsl.w	r4, r8, r3
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	00db      	lsls	r3, r3, #3
 800f9b0:	697a      	ldr	r2, [r7, #20]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	ea80 0a04 	eor.w	sl, r0, r4
 800f9b8:	ea81 0b05 	eor.w	fp, r1, r5
 800f9bc:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	f023 0307 	bic.w	r3, r3, #7
 800f9c6:	3b08      	subs	r3, #8
 800f9c8:	697a      	ldr	r2, [r7, #20]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d0:	6939      	ldr	r1, [r7, #16]
 800f9d2:	f021 0107 	bic.w	r1, r1, #7
 800f9d6:	3908      	subs	r1, #8
 800f9d8:	6978      	ldr	r0, [r7, #20]
 800f9da:	4401      	add	r1, r0
 800f9dc:	603a      	str	r2, [r7, #0]
 800f9de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f9e2:	607b      	str	r3, [r7, #4]
 800f9e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f9e8:	e9c1 3400 	strd	r3, r4, [r1]
}
 800f9ec:	bf00      	nop
 800f9ee:	3720      	adds	r7, #32
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f9f6:	4770      	bx	lr

0800f9f8 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b086      	sub	sp, #24
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
 800fa04:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 800fa06:	e021      	b.n	800fa4c <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7fc fdd5 	bl	800c5b8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 800fa0e:	2300      	movs	r3, #0
 800fa10:	617b      	str	r3, [r7, #20]
 800fa12:	e00f      	b.n	800fa34 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	00db      	lsls	r3, r3, #3
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	18d1      	adds	r1, r2, r3
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	00db      	lsls	r3, r3, #3
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	4413      	add	r3, r2
 800fa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa28:	4608      	mov	r0, r1
 800fa2a:	f7fc fd98 	bl	800c55e <store64>
    for(i=0;i<r/8;i++)
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	3301      	adds	r3, #1
 800fa32:	617b      	str	r3, [r7, #20]
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	08db      	lsrs	r3, r3, #3
 800fa38:	697a      	ldr	r2, [r7, #20]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d3ea      	bcc.n	800fa14 <keccak_squeezeblocks+0x1c>
    out += r;
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	4413      	add	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]
    nblocks--;
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d1da      	bne.n	800fa08 <keccak_squeezeblocks+0x10>
  }
}
 800fa52:	bf00      	nop
 800fa54:	bf00      	nop
 800fa56:	3718      	adds	r7, #24
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int r,
                                   unsigned int pos)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b088      	sub	sp, #32
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	607a      	str	r2, [r7, #4]
 800fa68:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t t[8];

  if(pos & 7) {
 800fa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6c:	f003 0307 	and.w	r3, r3, #7
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d027      	beq.n	800fac4 <keccak_squeeze+0x68>
    store64(t,s[pos/8]);
 800fa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa76:	f023 0307 	bic.w	r3, r3, #7
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa82:	f107 0114 	add.w	r1, r7, #20
 800fa86:	4608      	mov	r0, r1
 800fa88:	f7fc fd69 	bl	800c55e <store64>
    i = pos & 7;
 800fa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8e:	f003 0307 	and.w	r3, r3, #7
 800fa92:	61fb      	str	r3, [r7, #28]
    while(i < 8 && outlen > 0) {
 800fa94:	e010      	b.n	800fab8 <keccak_squeeze+0x5c>
      *out++ = t[i++];
 800fa96:	69fa      	ldr	r2, [r7, #28]
 800fa98:	1c53      	adds	r3, r2, #1
 800fa9a:	61fb      	str	r3, [r7, #28]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	1c59      	adds	r1, r3, #1
 800faa0:	60f9      	str	r1, [r7, #12]
 800faa2:	3220      	adds	r2, #32
 800faa4:	443a      	add	r2, r7
 800faa6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800faaa:	701a      	strb	r2, [r3, #0]
      outlen--;
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	3b01      	subs	r3, #1
 800fab0:	60bb      	str	r3, [r7, #8]
      pos++;
 800fab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab4:	3301      	adds	r3, #1
 800fab6:	62bb      	str	r3, [r7, #40]	; 0x28
    while(i < 8 && outlen > 0) {
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	2b07      	cmp	r3, #7
 800fabc:	d802      	bhi.n	800fac4 <keccak_squeeze+0x68>
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1e8      	bne.n	800fa96 <keccak_squeeze+0x3a>
    }
  }

  if(pos && outlen >= r-pos) {
 800fac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d054      	beq.n	800fb74 <keccak_squeeze+0x118>
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800face:	1ad3      	subs	r3, r2, r3
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d34e      	bcc.n	800fb74 <keccak_squeeze+0x118>
    for(i=0;i<(r-pos)/8;i++)
 800fad6:	2300      	movs	r3, #0
 800fad8:	61fb      	str	r3, [r7, #28]
 800fada:	e012      	b.n	800fb02 <keccak_squeeze+0xa6>
      store64(out+8*i,s[pos/8+i]);
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	00db      	lsls	r3, r3, #3
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	18d1      	adds	r1, r2, r3
 800fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae6:	08da      	lsrs	r2, r3, #3
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	4413      	add	r3, r2
 800faec:	00db      	lsls	r3, r3, #3
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	4413      	add	r3, r2
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	4608      	mov	r0, r1
 800faf8:	f7fc fd31 	bl	800c55e <store64>
    for(i=0;i<(r-pos)/8;i++)
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	3301      	adds	r3, #1
 800fb00:	61fb      	str	r3, [r7, #28]
 800fb02:	683a      	ldr	r2, [r7, #0]
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	1ad3      	subs	r3, r2, r3
 800fb08:	08db      	lsrs	r3, r3, #3
 800fb0a:	69fa      	ldr	r2, [r7, #28]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d3e5      	bcc.n	800fadc <keccak_squeeze+0x80>
    out += r-pos;
 800fb10:	683a      	ldr	r2, [r7, #0]
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	4413      	add	r3, r2
 800fb1a:	60fb      	str	r3, [r7, #12]
    outlen -= r-pos;
 800fb1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	4413      	add	r3, r2
 800fb26:	60bb      	str	r3, [r7, #8]
    pos = 0;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  while(outlen >= r) {
 800fb2c:	e022      	b.n	800fb74 <keccak_squeeze+0x118>
    KeccakF1600_StatePermute(s);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7fc fd42 	bl	800c5b8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 800fb34:	2300      	movs	r3, #0
 800fb36:	61fb      	str	r3, [r7, #28]
 800fb38:	e00f      	b.n	800fb5a <keccak_squeeze+0xfe>
      store64(out+8*i,s[i]);
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	00db      	lsls	r3, r3, #3
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	18d1      	adds	r1, r2, r3
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	4413      	add	r3, r2
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	4608      	mov	r0, r1
 800fb50:	f7fc fd05 	bl	800c55e <store64>
    for(i=0;i<r/8;i++)
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	3301      	adds	r3, #1
 800fb58:	61fb      	str	r3, [r7, #28]
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	08db      	lsrs	r3, r3, #3
 800fb5e:	69fa      	ldr	r2, [r7, #28]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d3ea      	bcc.n	800fb3a <keccak_squeeze+0xde>
    out += r;
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	4413      	add	r3, r2
 800fb6a:	60fb      	str	r3, [r7, #12]
    outlen -= r;
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	60bb      	str	r3, [r7, #8]
  while(outlen >= r) {
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d2d8      	bcs.n	800fb2e <keccak_squeeze+0xd2>
  }

  if(!outlen)
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d101      	bne.n	800fb86 <keccak_squeeze+0x12a>
    return pos;
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	e053      	b.n	800fc2e <keccak_squeeze+0x1d2>
  else if(!pos)
 800fb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d102      	bne.n	800fb92 <keccak_squeeze+0x136>
    KeccakF1600_StatePermute(s);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7fc fd13 	bl	800c5b8 <KeccakF1600_StatePermute>

  for(i=0;i<outlen/8;i++)
 800fb92:	2300      	movs	r3, #0
 800fb94:	61fb      	str	r3, [r7, #28]
 800fb96:	e012      	b.n	800fbbe <keccak_squeeze+0x162>
    store64(out+8*i,s[pos/8+i]);
 800fb98:	69fb      	ldr	r3, [r7, #28]
 800fb9a:	00db      	lsls	r3, r3, #3
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	18d1      	adds	r1, r2, r3
 800fba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba2:	08da      	lsrs	r2, r3, #3
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	4413      	add	r3, r2
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	4413      	add	r3, r2
 800fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb2:	4608      	mov	r0, r1
 800fbb4:	f7fc fcd3 	bl	800c55e <store64>
  for(i=0;i<outlen/8;i++)
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	61fb      	str	r3, [r7, #28]
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	08db      	lsrs	r3, r3, #3
 800fbc2:	69fa      	ldr	r2, [r7, #28]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d3e7      	bcc.n	800fb98 <keccak_squeeze+0x13c>
  out += 8*i;
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	00db      	lsls	r3, r3, #3
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	4413      	add	r3, r2
 800fbd0:	60fb      	str	r3, [r7, #12]
  outlen -= 8*i;
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	00db      	lsls	r3, r3, #3
 800fbd6:	68ba      	ldr	r2, [r7, #8]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	60bb      	str	r3, [r7, #8]
  pos += 8*i;
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	00db      	lsls	r3, r3, #3
 800fbe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbe2:	4413      	add	r3, r2
 800fbe4:	62bb      	str	r3, [r7, #40]	; 0x28

  store64(t,s[pos/8]);
 800fbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe8:	f023 0307 	bic.w	r3, r3, #7
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	4413      	add	r3, r2
 800fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf4:	f107 0114 	add.w	r1, r7, #20
 800fbf8:	4608      	mov	r0, r1
 800fbfa:	f7fc fcb0 	bl	800c55e <store64>
  for(i=0;i<outlen;i++)
 800fbfe:	2300      	movs	r3, #0
 800fc00:	61fb      	str	r3, [r7, #28]
 800fc02:	e00b      	b.n	800fc1c <keccak_squeeze+0x1c0>
    out[i] = t[i];
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	4413      	add	r3, r2
 800fc0a:	f107 0114 	add.w	r1, r7, #20
 800fc0e:	69fa      	ldr	r2, [r7, #28]
 800fc10:	440a      	add	r2, r1
 800fc12:	7812      	ldrb	r2, [r2, #0]
 800fc14:	701a      	strb	r2, [r3, #0]
  for(i=0;i<outlen;i++)
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	61fb      	str	r3, [r7, #28]
 800fc1c:	69fa      	ldr	r2, [r7, #28]
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d3ef      	bcc.n	800fc04 <keccak_squeeze+0x1a8>
  pos += outlen;
 800fc24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	4413      	add	r3, r2
 800fc2a:	62bb      	str	r3, [r7, #40]	; 0x28
  return pos;
 800fc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3720      	adds	r7, #32
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b082      	sub	sp, #8
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f7ff fd22 	bl	800f688 <keccak_init>
}
 800fc44:	bf00      	nop
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af02      	add	r7, sp, #8
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	2188      	movs	r1, #136	; 0x88
 800fc68:	f7ff fd2f 	bl	800f6ca <keccak_absorb>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800fc74:	bf00      	nop
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800fc8c:	231f      	movs	r3, #31
 800fc8e:	2188      	movs	r1, #136	; 0x88
 800fc90:	f7ff fe63 	bl	800f95a <keccak_finalize>
  state->pos = 0;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800fc9c:	bf00      	nop
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	2388      	movs	r3, #136	; 0x88
 800fcb4:	68b9      	ldr	r1, [r7, #8]
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f7ff fe9e 	bl	800f9f8 <keccak_squeezeblocks>
}
 800fcbc:	bf00      	nop
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <pqcrystals_fips202_ref_shake256_squeeze>:
*              - size_t outlen :  number of bytes to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af02      	add	r7, sp, #8
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	2388      	movs	r3, #136	; 0x88
 800fcdc:	68b9      	ldr	r1, [r7, #8]
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f7ff febc 	bl	800fa5c <keccak_squeeze>
 800fce4:	4602      	mov	r2, r0
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800fcec:	bf00      	nop
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <pqcrystals_fips202_ref_shake256>:
*              - size_t outlen:     requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen:      length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b0b8      	sub	sp, #224	; 0xe0
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
 800fd00:	603b      	str	r3, [r7, #0]
  keccak_state state;

  shake256_init(&state);
 800fd02:	f107 0310 	add.w	r3, r7, #16
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7ff ff95 	bl	800fc36 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, in, inlen);
 800fd0c:	f107 0310 	add.w	r3, r7, #16
 800fd10:	683a      	ldr	r2, [r7, #0]
 800fd12:	6879      	ldr	r1, [r7, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff ff99 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 800fd1a:	f107 0310 	add.w	r3, r7, #16
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff ffac 	bl	800fc7c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(out, outlen, &state);
 800fd24:	f107 0310 	add.w	r3, r7, #16
 800fd28:	461a      	mov	r2, r3
 800fd2a:	68b9      	ldr	r1, [r7, #8]
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f7ff ffc9 	bl	800fcc4 <pqcrystals_fips202_ref_shake256_squeeze>
}
 800fd32:	bf00      	nop
 800fd34:	37e0      	adds	r7, #224	; 0xe0
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
	...

0800fd3c <pqcrystals_dilithium2aes_r_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N_]) {
 800fd3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd40:	b088      	sub	sp, #32
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int32_t zeta, t;

  k = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	613b      	str	r3, [r7, #16]
  for(len = 128; len > 0; len >>= 1) {
 800fd4a:	2380      	movs	r3, #128	; 0x80
 800fd4c:	61fb      	str	r3, [r7, #28]
 800fd4e:	e056      	b.n	800fdfe <pqcrystals_dilithium2aes_r_ref_ntt+0xc2>
    for(start = 0; start < N_; start = j + len) {
 800fd50:	2300      	movs	r3, #0
 800fd52:	61bb      	str	r3, [r7, #24]
 800fd54:	e04d      	b.n	800fdf2 <pqcrystals_dilithium2aes_r_ref_ntt+0xb6>
      zeta = zetas[++k];
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	613b      	str	r3, [r7, #16]
 800fd5c:	4a2c      	ldr	r2, [pc, #176]	; (800fe10 <pqcrystals_dilithium2aes_r_ref_ntt+0xd4>)
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd64:	60fb      	str	r3, [r7, #12]
      for(j = start; j < start + len; ++j) {
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	617b      	str	r3, [r7, #20]
 800fd6a:	e038      	b.n	800fdde <pqcrystals_dilithium2aes_r_ref_ntt+0xa2>
        t = montgomery_reduce((int64_t)zeta * a[j + len]);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	17da      	asrs	r2, r3, #31
 800fd70:	4698      	mov	r8, r3
 800fd72:	4691      	mov	r9, r2
 800fd74:	697a      	ldr	r2, [r7, #20]
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	4413      	add	r3, r2
 800fd7a:	009b      	lsls	r3, r3, #2
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	4413      	add	r3, r2
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	17da      	asrs	r2, r3, #31
 800fd84:	469a      	mov	sl, r3
 800fd86:	4693      	mov	fp, r2
 800fd88:	fb0a f209 	mul.w	r2, sl, r9
 800fd8c:	fb08 f30b 	mul.w	r3, r8, fp
 800fd90:	4413      	add	r3, r2
 800fd92:	fba8 450a 	umull	r4, r5, r8, sl
 800fd96:	442b      	add	r3, r5
 800fd98:	461d      	mov	r5, r3
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	4629      	mov	r1, r5
 800fd9e:	f002 fe1c 	bl	80129da <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 800fda2:	60b8      	str	r0, [r7, #8]
        a[j + len] = a[j] - t;
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	4413      	add	r3, r2
 800fdac:	6819      	ldr	r1, [r3, #0]
 800fdae:	697a      	ldr	r2, [r7, #20]
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	009b      	lsls	r3, r3, #2
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	4413      	add	r3, r2
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	1a8a      	subs	r2, r1, r2
 800fdbe:	601a      	str	r2, [r3, #0]
        a[j] = a[j] + t;
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	009b      	lsls	r3, r3, #2
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	6819      	ldr	r1, [r3, #0]
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	440a      	add	r2, r1
 800fdd6:	601a      	str	r2, [r3, #0]
      for(j = start; j < start + len; ++j) {
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	3301      	adds	r3, #1
 800fddc:	617b      	str	r3, [r7, #20]
 800fdde:	69ba      	ldr	r2, [r7, #24]
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	4413      	add	r3, r2
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d3c0      	bcc.n	800fd6c <pqcrystals_dilithium2aes_r_ref_ntt+0x30>
    for(start = 0; start < N_; start = j + len) {
 800fdea:	697a      	ldr	r2, [r7, #20]
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	4413      	add	r3, r2
 800fdf0:	61bb      	str	r3, [r7, #24]
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	2bff      	cmp	r3, #255	; 0xff
 800fdf6:	d9ae      	bls.n	800fd56 <pqcrystals_dilithium2aes_r_ref_ntt+0x1a>
  for(len = 128; len > 0; len >>= 1) {
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	085b      	lsrs	r3, r3, #1
 800fdfc:	61fb      	str	r3, [r7, #28]
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1a5      	bne.n	800fd50 <pqcrystals_dilithium2aes_r_ref_ntt+0x14>
      }
    }
  }
}
 800fe04:	bf00      	nop
 800fe06:	bf00      	nop
 800fe08:	3720      	adds	r7, #32
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe10:	08014258 	.word	0x08014258

0800fe14 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N_]) {
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	b091      	sub	sp, #68	; 0x44
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	61f8      	str	r0, [r7, #28]
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
 800fe1e:	f24a 33fa 	movw	r3, #41978	; 0xa3fa
 800fe22:	62fb      	str	r3, [r7, #44]	; 0x2c

  k = 256;
 800fe24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe28:	633b      	str	r3, [r7, #48]	; 0x30
  for(len = 1; len < N_; len <<= 1) {
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe2e:	e072      	b.n	800ff16 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x102>
    for(start = 0; start < N_; start = j + len) {
 800fe30:	2300      	movs	r3, #0
 800fe32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe34:	e069      	b.n	800ff0a <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xf6>
      zeta = -zetas[--k];
 800fe36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe38:	3b01      	subs	r3, #1
 800fe3a:	633b      	str	r3, [r7, #48]	; 0x30
 800fe3c:	4a51      	ldr	r2, [pc, #324]	; (800ff84 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x170>)
 800fe3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe44:	425b      	negs	r3, r3
 800fe46:	62bb      	str	r3, [r7, #40]	; 0x28
      for(j = start; j < start + len; ++j) {
 800fe48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe4a:	637b      	str	r3, [r7, #52]	; 0x34
 800fe4c:	e053      	b.n	800fef6 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xe2>
        t = a[j];
 800fe4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	69fa      	ldr	r2, [r7, #28]
 800fe54:	4413      	add	r3, r2
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	627b      	str	r3, [r7, #36]	; 0x24
        a[j] = t + a[j + len];
 800fe5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	4413      	add	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	69fa      	ldr	r2, [r7, #28]
 800fe64:	4413      	add	r3, r2
 800fe66:	6819      	ldr	r1, [r3, #0]
 800fe68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe6a:	009a      	lsls	r2, r3, #2
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	441a      	add	r2, r3
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	440b      	add	r3, r1
 800fe74:	6013      	str	r3, [r2, #0]
        a[j + len] = t - a[j + len];
 800fe76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7a:	4413      	add	r3, r2
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	69fa      	ldr	r2, [r7, #28]
 800fe80:	4413      	add	r3, r2
 800fe82:	6819      	ldr	r1, [r3, #0]
 800fe84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe88:	4413      	add	r3, r2
 800fe8a:	009a      	lsls	r2, r3, #2
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	441a      	add	r2, r3
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	1a5b      	subs	r3, r3, r1
 800fe94:	6013      	str	r3, [r2, #0]
        a[j + len] = montgomery_reduce((int64_t)zeta * a[j + len]);
 800fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe98:	17da      	asrs	r2, r3, #31
 800fe9a:	613b      	str	r3, [r7, #16]
 800fe9c:	617a      	str	r2, [r7, #20]
 800fe9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	4413      	add	r3, r2
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	69fa      	ldr	r2, [r7, #28]
 800fea8:	4413      	add	r3, r2
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	17da      	asrs	r2, r3, #31
 800feae:	60bb      	str	r3, [r7, #8]
 800feb0:	60fa      	str	r2, [r7, #12]
 800feb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800feb6:	460b      	mov	r3, r1
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	fb02 f203 	mul.w	r2, r2, r3
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800fec4:	4601      	mov	r1, r0
 800fec6:	fb01 f303 	mul.w	r3, r1, r3
 800feca:	4413      	add	r3, r2
 800fecc:	693a      	ldr	r2, [r7, #16]
 800fece:	68b9      	ldr	r1, [r7, #8]
 800fed0:	fba2 ab01 	umull	sl, fp, r2, r1
 800fed4:	445b      	add	r3, fp
 800fed6:	469b      	mov	fp, r3
 800fed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	69fa      	ldr	r2, [r7, #28]
 800fee2:	18d4      	adds	r4, r2, r3
 800fee4:	4650      	mov	r0, sl
 800fee6:	4659      	mov	r1, fp
 800fee8:	f002 fd77 	bl	80129da <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 800feec:	4603      	mov	r3, r0
 800feee:	6023      	str	r3, [r4, #0]
      for(j = start; j < start + len; ++j) {
 800fef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef2:	3301      	adds	r3, #1
 800fef4:	637b      	str	r3, [r7, #52]	; 0x34
 800fef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	4413      	add	r3, r2
 800fefc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d3a5      	bcc.n	800fe4e <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x3a>
    for(start = 0; start < N_; start = j + len) {
 800ff02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff06:	4413      	add	r3, r2
 800ff08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff0c:	2bff      	cmp	r3, #255	; 0xff
 800ff0e:	d992      	bls.n	800fe36 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x22>
  for(len = 1; len < N_; len <<= 1) {
 800ff10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff18:	2bff      	cmp	r3, #255	; 0xff
 800ff1a:	d989      	bls.n	800fe30 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x1c>
      }
    }
  }

  for(j = 0; j < N_; ++j) {
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff20:	e026      	b.n	800ff70 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x15c>
    a[j] = montgomery_reduce((int64_t)f * a[j]);
 800ff22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff24:	17da      	asrs	r2, r3, #31
 800ff26:	461d      	mov	r5, r3
 800ff28:	4616      	mov	r6, r2
 800ff2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	69fa      	ldr	r2, [r7, #28]
 800ff30:	4413      	add	r3, r2
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	17da      	asrs	r2, r3, #31
 800ff36:	603b      	str	r3, [r7, #0]
 800ff38:	607a      	str	r2, [r7, #4]
 800ff3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff3e:	4603      	mov	r3, r0
 800ff40:	fb03 f206 	mul.w	r2, r3, r6
 800ff44:	460b      	mov	r3, r1
 800ff46:	fb05 f303 	mul.w	r3, r5, r3
 800ff4a:	4413      	add	r3, r2
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	fba5 8902 	umull	r8, r9, r5, r2
 800ff52:	444b      	add	r3, r9
 800ff54:	4699      	mov	r9, r3
 800ff56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	69fa      	ldr	r2, [r7, #28]
 800ff5c:	18d4      	adds	r4, r2, r3
 800ff5e:	4640      	mov	r0, r8
 800ff60:	4649      	mov	r1, r9
 800ff62:	f002 fd3a 	bl	80129da <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 800ff66:	4603      	mov	r3, r0
 800ff68:	6023      	str	r3, [r4, #0]
  for(j = 0; j < N_; ++j) {
 800ff6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff72:	2bff      	cmp	r3, #255	; 0xff
 800ff74:	d9d5      	bls.n	800ff22 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x10e>
  }
}
 800ff76:	bf00      	nop
 800ff78:	bf00      	nop
 800ff7a:	3744      	adds	r7, #68	; 0x44
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff82:	bf00      	nop
 800ff84:	08014258 	.word	0x08014258

0800ff88 <pqcrystals_dilithium2aes_r_ref_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 800ff94:	2300      	movs	r3, #0
 800ff96:	617b      	str	r3, [r7, #20]
 800ff98:	e00a      	b.n	800ffb0 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x28>
    pk[i] = rho[i];
 800ff9a:	68ba      	ldr	r2, [r7, #8]
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	441a      	add	r2, r3
 800ffa0:	68f9      	ldr	r1, [r7, #12]
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	440b      	add	r3, r1
 800ffa6:	7812      	ldrb	r2, [r2, #0]
 800ffa8:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	3301      	adds	r3, #1
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	2b1f      	cmp	r3, #31
 800ffb4:	d9f1      	bls.n	800ff9a <pqcrystals_dilithium2aes_r_ref_pack_pk+0x12>
  pk += SEEDBYTES;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	3320      	adds	r3, #32
 800ffba:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	617b      	str	r3, [r7, #20]
 800ffc0:	e011      	b.n	800ffe6 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x5e>
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 800ffc2:	697a      	ldr	r2, [r7, #20]
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	009b      	lsls	r3, r3, #2
 800ffc8:	4413      	add	r3, r2
 800ffca:	019b      	lsls	r3, r3, #6
 800ffcc:	461a      	mov	r2, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	1898      	adds	r0, r3, r2
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	029b      	lsls	r3, r3, #10
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	4413      	add	r3, r2
 800ffda:	4619      	mov	r1, r3
 800ffdc:	f000 ff21 	bl	8010e22 <pqcrystals_dilithium2aes_r_ref_polyt1_pack>
  for(i = 0; i < K; ++i)
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	617b      	str	r3, [r7, #20]
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2b03      	cmp	r3, #3
 800ffea:	d9ea      	bls.n	800ffc2 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x3a>
}
 800ffec:	bf00      	nop
 800ffee:	bf00      	nop
 800fff0:	3718      	adds	r7, #24
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <pqcrystals_dilithium2aes_r_ref_pack_sk_r>:
             const uint8_t rho[SEEDBYTES],
			 const uint8_t rhoprime[SEEDBYTES],
             const uint8_t tr[CRHBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0)
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b086      	sub	sp, #24
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	60f8      	str	r0, [r7, #12]
 800fffe:	60b9      	str	r1, [r7, #8]
 8010000:	607a      	str	r2, [r7, #4]
 8010002:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8010004:	2300      	movs	r3, #0
 8010006:	617b      	str	r3, [r7, #20]
 8010008:	e00a      	b.n	8010020 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x2a>
    sk[i] = rho[i];
 801000a:	68ba      	ldr	r2, [r7, #8]
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	441a      	add	r2, r3
 8010010:	68f9      	ldr	r1, [r7, #12]
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	440b      	add	r3, r1
 8010016:	7812      	ldrb	r2, [r2, #0]
 8010018:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	3301      	adds	r3, #1
 801001e:	617b      	str	r3, [r7, #20]
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	2b1f      	cmp	r3, #31
 8010024:	d9f1      	bls.n	801000a <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x14>
  sk += SEEDBYTES;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	3320      	adds	r3, #32
 801002a:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 801002c:	2300      	movs	r3, #0
 801002e:	617b      	str	r3, [r7, #20]
 8010030:	e00a      	b.n	8010048 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x52>
    sk[i] = rhoprime[i];
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	441a      	add	r2, r3
 8010038:	68f9      	ldr	r1, [r7, #12]
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	440b      	add	r3, r1
 801003e:	7812      	ldrb	r2, [r2, #0]
 8010040:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	3301      	adds	r3, #1
 8010046:	617b      	str	r3, [r7, #20]
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2b1f      	cmp	r3, #31
 801004c:	d9f1      	bls.n	8010032 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x3c>
  sk += SEEDBYTES;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	3320      	adds	r3, #32
 8010052:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 8010054:	2300      	movs	r3, #0
 8010056:	617b      	str	r3, [r7, #20]
 8010058:	e00a      	b.n	8010070 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x7a>
    sk[i] = key[i];
 801005a:	6a3a      	ldr	r2, [r7, #32]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	441a      	add	r2, r3
 8010060:	68f9      	ldr	r1, [r7, #12]
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	440b      	add	r3, r1
 8010066:	7812      	ldrb	r2, [r2, #0]
 8010068:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	3301      	adds	r3, #1
 801006e:	617b      	str	r3, [r7, #20]
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	2b1f      	cmp	r3, #31
 8010074:	d9f1      	bls.n	801005a <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x64>
  sk += SEEDBYTES;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3320      	adds	r3, #32
 801007a:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < CRHBYTES; ++i)
 801007c:	2300      	movs	r3, #0
 801007e:	617b      	str	r3, [r7, #20]
 8010080:	e00a      	b.n	8010098 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xa2>
    sk[i] = tr[i];
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	441a      	add	r2, r3
 8010088:	68f9      	ldr	r1, [r7, #12]
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	440b      	add	r3, r1
 801008e:	7812      	ldrb	r2, [r2, #0]
 8010090:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	3301      	adds	r3, #1
 8010096:	617b      	str	r3, [r7, #20]
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	2b2f      	cmp	r3, #47	; 0x2f
 801009c:	d9f1      	bls.n	8010082 <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0x8c>
  sk += CRHBYTES;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	3330      	adds	r3, #48	; 0x30
 80100a2:	60fb      	str	r3, [r7, #12]
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
  sk += K*POLYETA_PACKEDBYTES;
*/


  for(i = 0; i < K; ++i)
 80100a4:	2300      	movs	r3, #0
 80100a6:	617b      	str	r3, [r7, #20]
 80100a8:	e010      	b.n	80100cc <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xd6>
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80100b0:	fb02 f303 	mul.w	r3, r2, r3
 80100b4:	68fa      	ldr	r2, [r7, #12]
 80100b6:	18d0      	adds	r0, r2, r3
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	029b      	lsls	r3, r3, #10
 80100bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100be:	4413      	add	r3, r2
 80100c0:	4619      	mov	r1, r3
 80100c2:	f000 ffb9 	bl	8011038 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>
  for(i = 0; i < K; ++i)
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	3301      	adds	r3, #1
 80100ca:	617b      	str	r3, [r7, #20]
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	d9eb      	bls.n	80100aa <pqcrystals_dilithium2aes_r_ref_pack_sk_r+0xb4>
}
 80100d2:	bf00      	nop
 80100d4:	bf00      	nop
 80100d6:	3718      	adds	r7, #24
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <pqcrystals_dilithium2aes_r_ref_unpack_sk_r>:
			   uint8_t rhoprime[SEEDBYTES],
               uint8_t tr[CRHBYTES],
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b086      	sub	sp, #24
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	607a      	str	r2, [r7, #4]
 80100e8:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80100ea:	2300      	movs	r3, #0
 80100ec:	617b      	str	r3, [r7, #20]
 80100ee:	e00a      	b.n	8010106 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x2a>
    rho[i] = sk[i];
 80100f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	441a      	add	r2, r3
 80100f6:	68f9      	ldr	r1, [r7, #12]
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	440b      	add	r3, r1
 80100fc:	7812      	ldrb	r2, [r2, #0]
 80100fe:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	3301      	adds	r3, #1
 8010104:	617b      	str	r3, [r7, #20]
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	2b1f      	cmp	r3, #31
 801010a:	d9f1      	bls.n	80100f0 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x14>
  sk += SEEDBYTES;
 801010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010e:	3320      	adds	r3, #32
 8010110:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 8010112:	2300      	movs	r3, #0
 8010114:	617b      	str	r3, [r7, #20]
 8010116:	e00a      	b.n	801012e <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x52>
    rhoprime[i] = sk[i];
 8010118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	441a      	add	r2, r3
 801011e:	68b9      	ldr	r1, [r7, #8]
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	440b      	add	r3, r1
 8010124:	7812      	ldrb	r2, [r2, #0]
 8010126:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	3301      	adds	r3, #1
 801012c:	617b      	str	r3, [r7, #20]
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2b1f      	cmp	r3, #31
 8010132:	d9f1      	bls.n	8010118 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x3c>
  sk += SEEDBYTES;
 8010134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010136:	3320      	adds	r3, #32
 8010138:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < SEEDBYTES; ++i)
 801013a:	2300      	movs	r3, #0
 801013c:	617b      	str	r3, [r7, #20]
 801013e:	e00a      	b.n	8010156 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x7a>
    key[i] = sk[i];
 8010140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	441a      	add	r2, r3
 8010146:	6839      	ldr	r1, [r7, #0]
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	440b      	add	r3, r1
 801014c:	7812      	ldrb	r2, [r2, #0]
 801014e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	3301      	adds	r3, #1
 8010154:	617b      	str	r3, [r7, #20]
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	2b1f      	cmp	r3, #31
 801015a:	d9f1      	bls.n	8010140 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x64>
  sk += SEEDBYTES;
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	3320      	adds	r3, #32
 8010160:	627b      	str	r3, [r7, #36]	; 0x24

  for(i = 0; i < CRHBYTES; ++i)
 8010162:	2300      	movs	r3, #0
 8010164:	617b      	str	r3, [r7, #20]
 8010166:	e00a      	b.n	801017e <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xa2>
    tr[i] = sk[i];
 8010168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	441a      	add	r2, r3
 801016e:	6879      	ldr	r1, [r7, #4]
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	440b      	add	r3, r1
 8010174:	7812      	ldrb	r2, [r2, #0]
 8010176:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	3301      	adds	r3, #1
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	2b2f      	cmp	r3, #47	; 0x2f
 8010182:	d9f1      	bls.n	8010168 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0x8c>
  sk += CRHBYTES;
 8010184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010186:	3330      	adds	r3, #48	; 0x30
 8010188:	627b      	str	r3, [r7, #36]	; 0x24

  for(i=0; i < K; ++i)
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
  sk += K*POLYETA_PACKEDBYTES;
*/
  for(i=0; i < K; ++i)
 801018a:	2300      	movs	r3, #0
 801018c:	617b      	str	r3, [r7, #20]
 801018e:	e010      	b.n	80101b2 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xd6>
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	029b      	lsls	r3, r3, #10
 8010194:	6a3a      	ldr	r2, [r7, #32]
 8010196:	18d0      	adds	r0, r2, r3
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 801019e:	fb02 f303 	mul.w	r3, r2, r3
 80101a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101a4:	4413      	add	r3, r2
 80101a6:	4619      	mov	r1, r3
 80101a8:	f001 f907 	bl	80113ba <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>
  for(i=0; i < K; ++i)
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	3301      	adds	r3, #1
 80101b0:	617b      	str	r3, [r7, #20]
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	2b03      	cmp	r3, #3
 80101b6:	d9eb      	bls.n	8010190 <pqcrystals_dilithium2aes_r_ref_unpack_sk_r+0xb4>
}
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	3718      	adds	r7, #24
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <pqcrystals_dilithium2aes_r_ref_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b088      	sub	sp, #32
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	60f8      	str	r0, [r7, #12]
 80101ca:	60b9      	str	r1, [r7, #8]
 80101cc:	607a      	str	r2, [r7, #4]
 80101ce:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
 80101d0:	2300      	movs	r3, #0
 80101d2:	61fb      	str	r3, [r7, #28]
 80101d4:	e00a      	b.n	80101ec <pqcrystals_dilithium2aes_r_ref_pack_sig+0x2a>
    sig[i] = c[i];
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	441a      	add	r2, r3
 80101dc:	68f9      	ldr	r1, [r7, #12]
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	440b      	add	r3, r1
 80101e2:	7812      	ldrb	r2, [r2, #0]
 80101e4:	701a      	strb	r2, [r3, #0]
  for(i=0; i < SEEDBYTES; ++i)
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	3301      	adds	r3, #1
 80101ea:	61fb      	str	r3, [r7, #28]
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	2b1f      	cmp	r3, #31
 80101f0:	d9f1      	bls.n	80101d6 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x14>
  sig += SEEDBYTES;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	3320      	adds	r3, #32
 80101f6:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 80101f8:	2300      	movs	r3, #0
 80101fa:	61fb      	str	r3, [r7, #28]
 80101fc:	e011      	b.n	8010222 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x60>
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 80101fe:	69fa      	ldr	r2, [r7, #28]
 8010200:	4613      	mov	r3, r2
 8010202:	00db      	lsls	r3, r3, #3
 8010204:	4413      	add	r3, r2
 8010206:	019b      	lsls	r3, r3, #6
 8010208:	461a      	mov	r2, r3
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	1898      	adds	r0, r3, r2
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	029b      	lsls	r3, r3, #10
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	4413      	add	r3, r2
 8010216:	4619      	mov	r1, r3
 8010218:	f001 fb77 	bl	801190a <pqcrystals_dilithium2aes_r_ref_polyz_pack>
  for(i = 0; i < L; ++i)
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	3301      	adds	r3, #1
 8010220:	61fb      	str	r3, [r7, #28]
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	2b03      	cmp	r3, #3
 8010226:	d9ea      	bls.n	80101fe <pqcrystals_dilithium2aes_r_ref_pack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022e:	60fb      	str	r3, [r7, #12]

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
 8010230:	2300      	movs	r3, #0
 8010232:	61fb      	str	r3, [r7, #28]
 8010234:	e007      	b.n	8010246 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x84>
    sig[i] = 0;
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	4413      	add	r3, r2
 801023c:	2200      	movs	r2, #0
 801023e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < OMEGA + K; ++i)
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	3301      	adds	r3, #1
 8010244:	61fb      	str	r3, [r7, #28]
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	2b53      	cmp	r3, #83	; 0x53
 801024a:	d9f4      	bls.n	8010236 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x74>

  k = 0;
 801024c:	2300      	movs	r3, #0
 801024e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 8010250:	2300      	movs	r3, #0
 8010252:	61fb      	str	r3, [r7, #28]
 8010254:	e023      	b.n	801029e <pqcrystals_dilithium2aes_r_ref_pack_sig+0xdc>
    for(j = 0; j < N_; ++j)
 8010256:	2300      	movs	r3, #0
 8010258:	61bb      	str	r3, [r7, #24]
 801025a:	e013      	b.n	8010284 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xc2>
      if(h->vec[i].coeffs[j] != 0)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	69fa      	ldr	r2, [r7, #28]
 8010260:	0211      	lsls	r1, r2, #8
 8010262:	69ba      	ldr	r2, [r7, #24]
 8010264:	440a      	add	r2, r1
 8010266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d007      	beq.n	801027e <pqcrystals_dilithium2aes_r_ref_pack_sig+0xbc>
        sig[k++] = j;
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	1c5a      	adds	r2, r3, #1
 8010272:	617a      	str	r2, [r7, #20]
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	4413      	add	r3, r2
 8010278:	69ba      	ldr	r2, [r7, #24]
 801027a:	b2d2      	uxtb	r2, r2
 801027c:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < N_; ++j)
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	3301      	adds	r3, #1
 8010282:	61bb      	str	r3, [r7, #24]
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	2bff      	cmp	r3, #255	; 0xff
 8010288:	d9e8      	bls.n	801025c <pqcrystals_dilithium2aes_r_ref_pack_sig+0x9a>

    sig[OMEGA + i] = k;
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	3350      	adds	r3, #80	; 0x50
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	4413      	add	r3, r2
 8010292:	697a      	ldr	r2, [r7, #20]
 8010294:	b2d2      	uxtb	r2, r2
 8010296:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < K; ++i) {
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	3301      	adds	r3, #1
 801029c:	61fb      	str	r3, [r7, #28]
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	2b03      	cmp	r3, #3
 80102a2:	d9d8      	bls.n	8010256 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x94>
  }
}
 80102a4:	bf00      	nop
 80102a6:	bf00      	nop
 80102a8:	3720      	adds	r7, #32
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <verify_sig_h_malform>:
*              return 0 if signature is ok
*              return 1 if an error found
*
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
static int verify_sig_h_malform(uint8_t h_buf[N_*K], const uint8_t sig[CRYPTO_BYTES]){
 80102ae:	b480      	push	{r7}
 80102b0:	b087      	sub	sp, #28
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	6078      	str	r0, [r7, #4]
 80102b6:	6039      	str	r1, [r7, #0]
    uint8_t* sig_ptr = sig + SEEDBYTES + L * POLYZ_PACKEDBYTES;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80102be:	60bb      	str	r3, [r7, #8]
    /* Decode h */
    unsigned int i, j, k = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < K; ++i) {
 80102c4:	2300      	movs	r3, #0
 80102c6:	617b      	str	r3, [r7, #20]
 80102c8:	e045      	b.n	8010356 <verify_sig_h_malform+0xa8>

        //for(j = 0; j < N_; ++j)
        //  h_buf[i*N_+j] = 0;

        if (sig_ptr[OMEGA + i] < k || sig_ptr[OMEGA + i] > OMEGA)
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	3350      	adds	r3, #80	; 0x50
 80102ce:	68ba      	ldr	r2, [r7, #8]
 80102d0:	4413      	add	r3, r2
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	461a      	mov	r2, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	4293      	cmp	r3, r2
 80102da:	d806      	bhi.n	80102ea <verify_sig_h_malform+0x3c>
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	3350      	adds	r3, #80	; 0x50
 80102e0:	68ba      	ldr	r2, [r7, #8]
 80102e2:	4413      	add	r3, r2
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b50      	cmp	r3, #80	; 0x50
 80102e8:	d901      	bls.n	80102ee <verify_sig_h_malform+0x40>
            return 3;
 80102ea:	2303      	movs	r3, #3
 80102ec:	e048      	b.n	8010380 <verify_sig_h_malform+0xd2>

        for (j = k; j < sig_ptr[OMEGA + i]; ++j) {
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	613b      	str	r3, [r7, #16]
 80102f2:	e01e      	b.n	8010332 <verify_sig_h_malform+0x84>
            /* Coefficients are ordered for strong unforgeability */
            if (j > k && sig_ptr[j] <= sig_ptr[j - 1])
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d90c      	bls.n	8010316 <verify_sig_h_malform+0x68>
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	4413      	add	r3, r2
 8010302:	781a      	ldrb	r2, [r3, #0]
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	3b01      	subs	r3, #1
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	440b      	add	r3, r1
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	429a      	cmp	r2, r3
 8010310:	d801      	bhi.n	8010316 <verify_sig_h_malform+0x68>
                return 4;
 8010312:	2304      	movs	r3, #4
 8010314:	e034      	b.n	8010380 <verify_sig_h_malform+0xd2>
            h_buf[i * N_ + sig_ptr[j]] = 1;
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	021b      	lsls	r3, r3, #8
 801031a:	68b9      	ldr	r1, [r7, #8]
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	440a      	add	r2, r1
 8010320:	7812      	ldrb	r2, [r2, #0]
 8010322:	4413      	add	r3, r2
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	4413      	add	r3, r2
 8010328:	2201      	movs	r2, #1
 801032a:	701a      	strb	r2, [r3, #0]
        for (j = k; j < sig_ptr[OMEGA + i]; ++j) {
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	3301      	adds	r3, #1
 8010330:	613b      	str	r3, [r7, #16]
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	3350      	adds	r3, #80	; 0x50
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	4413      	add	r3, r2
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	4293      	cmp	r3, r2
 8010342:	d3d7      	bcc.n	80102f4 <verify_sig_h_malform+0x46>
        }

        k = sig_ptr[OMEGA + i];
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	3350      	adds	r3, #80	; 0x50
 8010348:	68ba      	ldr	r2, [r7, #8]
 801034a:	4413      	add	r3, r2
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < K; ++i) {
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	3301      	adds	r3, #1
 8010354:	617b      	str	r3, [r7, #20]
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	2b03      	cmp	r3, #3
 801035a:	d9b6      	bls.n	80102ca <verify_sig_h_malform+0x1c>
    }

    /* Extra indices are zero for strong unforgeability */
    for (j = k; j < OMEGA; ++j)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	613b      	str	r3, [r7, #16]
 8010360:	e00a      	b.n	8010378 <verify_sig_h_malform+0xca>
        if (sig_ptr[j])
 8010362:	68ba      	ldr	r2, [r7, #8]
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	4413      	add	r3, r2
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <verify_sig_h_malform+0xc4>
            return 5;
 801036e:	2305      	movs	r3, #5
 8010370:	e006      	b.n	8010380 <verify_sig_h_malform+0xd2>
    for (j = k; j < OMEGA; ++j)
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	3301      	adds	r3, #1
 8010376:	613b      	str	r3, [r7, #16]
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	2b4f      	cmp	r3, #79	; 0x4f
 801037c:	d9f1      	bls.n	8010362 <verify_sig_h_malform+0xb4>

    return 0;
 801037e:	2300      	movs	r3, #0
}
 8010380:	4618      	mov	r0, r3
 8010382:	371c      	adds	r7, #28
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr

0801038c <verify_sig_z_h_malform>:
*              return 0 if signature is ok
*              return 1 if an error found
*
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
int verify_sig_z_h_malform(uint8_t h_buf[N_*K], const uint8_t sig[CRYPTO_BYTES]){
 801038c:	b580      	push	{r7, lr}
 801038e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8010392:	af00      	add	r7, sp, #0
 8010394:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010398:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 801039c:	6018      	str	r0, [r3, #0]
 801039e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80103a2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80103a6:	6019      	str	r1, [r3, #0]
	uint8_t *sig_ptr = sig + SEEDBYTES;// + L*POLYZ_PACKEDBYTES;
 80103a8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80103ac:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3320      	adds	r3, #32
 80103b4:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	unsigned int i = 0;
 80103b8:	2300      	movs	r3, #0
 80103ba:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	poly z_i;
	for(i = 0; i < L; ++i){
 80103be:	2300      	movs	r3, #0
 80103c0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80103c4:	e01f      	b.n	8010406 <verify_sig_z_h_malform+0x7a>
	    polyz_unpack(&z_i, sig_ptr + i*POLYZ_PACKEDBYTES);
 80103c6:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 80103ca:	4613      	mov	r3, r2
 80103cc:	00db      	lsls	r3, r3, #3
 80103ce:	4413      	add	r3, r2
 80103d0:	019b      	lsls	r3, r3, #6
 80103d2:	461a      	mov	r2, r3
 80103d4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80103d8:	441a      	add	r2, r3
 80103da:	f107 0308 	add.w	r3, r7, #8
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f001 fb71 	bl	8011ac8 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
		if(poly_chknorm(&z_i, GAMMA1 - BETA))
 80103e6:	f107 0308 	add.w	r3, r7, #8
 80103ea:	4912      	ldr	r1, [pc, #72]	; (8010434 <verify_sig_z_h_malform+0xa8>)
 80103ec:	4618      	mov	r0, r3
 80103ee:	f000 fa11 	bl	8010814 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d001      	beq.n	80103fc <verify_sig_z_h_malform+0x70>
	      return 2;
 80103f8:	2302      	movs	r3, #2
 80103fa:	e015      	b.n	8010428 <verify_sig_z_h_malform+0x9c>
	for(i = 0; i < L; ++i){
 80103fc:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8010400:	3301      	adds	r3, #1
 8010402:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8010406:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 801040a:	2b03      	cmp	r3, #3
 801040c:	d9db      	bls.n	80103c6 <verify_sig_z_h_malform+0x3a>
	}
	/* Decode h */
	return verify_sig_h_malform(h_buf, sig);
 801040e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8010412:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 8010416:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801041a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 801041e:	6811      	ldr	r1, [r2, #0]
 8010420:	6818      	ldr	r0, [r3, #0]
 8010422:	f7ff ff44 	bl	80102ae <verify_sig_h_malform>
 8010426:	4603      	mov	r3, r0
}
 8010428:	4618      	mov	r0, r3
 801042a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	0001ffb2 	.word	0x0001ffb2

08010438 <unpack_sig_c>:


void unpack_sig_c(uint8_t c[SEEDBYTES], const uint8_t sig[CRYPTO_BYTES]){
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
    unsigned int i;
	for(i = 0; i < SEEDBYTES; ++i)
 8010442:	2300      	movs	r3, #0
 8010444:	60fb      	str	r3, [r7, #12]
 8010446:	e00a      	b.n	801045e <unpack_sig_c+0x26>
	  c[i] = sig[i];
 8010448:	683a      	ldr	r2, [r7, #0]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	441a      	add	r2, r3
 801044e:	6879      	ldr	r1, [r7, #4]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	440b      	add	r3, r1
 8010454:	7812      	ldrb	r2, [r2, #0]
 8010456:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SEEDBYTES; ++i)
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	3301      	adds	r3, #1
 801045c:	60fb      	str	r3, [r7, #12]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2b1f      	cmp	r3, #31
 8010462:	d9f1      	bls.n	8010448 <unpack_sig_c+0x10>
}
 8010464:	bf00      	nop
 8010466:	bf00      	nop
 8010468:	3714      	adds	r7, #20
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr

08010472 <unpack_sig_z>:

void unpack_sig_z(poly *z_i, uint32_t i, const uint8_t sig[CRYPTO_BYTES]){
 8010472:	b580      	push	{r7, lr}
 8010474:	b084      	sub	sp, #16
 8010476:	af00      	add	r7, sp, #0
 8010478:	60f8      	str	r0, [r7, #12]
 801047a:	60b9      	str	r1, [r7, #8]
 801047c:	607a      	str	r2, [r7, #4]
	polyz_unpack(z_i, sig + SEEDBYTES + i*POLYZ_PACKEDBYTES);
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	4613      	mov	r3, r2
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	4413      	add	r3, r2
 8010486:	019b      	lsls	r3, r3, #6
 8010488:	3320      	adds	r3, #32
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	4413      	add	r3, r2
 801048e:	4619      	mov	r1, r3
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f001 fb19 	bl	8011ac8 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
}
 8010496:	bf00      	nop
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <unpack_pk_rho>:

void unpack_pk_rho(uint8_t rho[SEEDBYTES],
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 801049e:	b480      	push	{r7}
 80104a0:	b085      	sub	sp, #20
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 80104a8:	2300      	movs	r3, #0
 80104aa:	60fb      	str	r3, [r7, #12]
 80104ac:	e00a      	b.n	80104c4 <unpack_pk_rho+0x26>
    rho[i] = pk[i];
 80104ae:	683a      	ldr	r2, [r7, #0]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	441a      	add	r2, r3
 80104b4:	6879      	ldr	r1, [r7, #4]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	440b      	add	r3, r1
 80104ba:	7812      	ldrb	r2, [r2, #0]
 80104bc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	3301      	adds	r3, #1
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b1f      	cmp	r3, #31
 80104c8:	d9f1      	bls.n	80104ae <unpack_pk_rho+0x10>
}
 80104ca:	bf00      	nop
 80104cc:	bf00      	nop
 80104ce:	3714      	adds	r7, #20
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr

080104d8 <unpack_pk_t1>:

void unpack_pk_t1(poly *t1_i, uint32_t i,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	607a      	str	r2, [r7, #4]
   polyt1_unpack(t1_i, pk + SEEDBYTES + i*POLYT1_PACKEDBYTES);
 80104e4:	68ba      	ldr	r2, [r7, #8]
 80104e6:	4613      	mov	r3, r2
 80104e8:	009b      	lsls	r3, r3, #2
 80104ea:	4413      	add	r3, r2
 80104ec:	019b      	lsls	r3, r3, #6
 80104ee:	3320      	adds	r3, #32
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	4413      	add	r3, r2
 80104f4:	4619      	mov	r1, r3
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f000 fd15 	bl	8010f26 <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>
}
 80104fc:	bf00      	nop
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <pqcrystals_dilithium2aes_r_ref_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 801050c:	2300      	movs	r3, #0
 801050e:	60fb      	str	r3, [r7, #12]
 8010510:	e00e      	b.n	8010530 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0x2c>
    a->coeffs[i] = reduce32(a->coeffs[i]);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801051a:	4618      	mov	r0, r3
 801051c:	f002 faa3 	bl	8012a66 <pqcrystals_dilithium2aes_r_ref_reduce32>
 8010520:	4601      	mov	r1, r0
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	3301      	adds	r3, #1
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2bff      	cmp	r3, #255	; 0xff
 8010534:	d9ed      	bls.n	8010512 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0xe>

  DBENCH_STOP(*tred);
}
 8010536:	bf00      	nop
 8010538:	bf00      	nop
 801053a:	3710      	adds	r7, #16
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <pqcrystals_dilithium2aes_r_ref_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8010548:	2300      	movs	r3, #0
 801054a:	60fb      	str	r3, [r7, #12]
 801054c:	e00e      	b.n	801056c <pqcrystals_dilithium2aes_r_ref_poly_caddq+0x2c>
    a->coeffs[i] = caddq(a->coeffs[i]);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010556:	4618      	mov	r0, r3
 8010558:	f002 faa0 	bl	8012a9c <pqcrystals_dilithium2aes_r_ref_caddq>
 801055c:	4601      	mov	r1, r0
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	3301      	adds	r3, #1
 801056a:	60fb      	str	r3, [r7, #12]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2bff      	cmp	r3, #255	; 0xff
 8010570:	d9ed      	bls.n	801054e <pqcrystals_dilithium2aes_r_ref_poly_caddq+0xe>

  DBENCH_STOP(*tred);
}
 8010572:	bf00      	nop
 8010574:	bf00      	nop
 8010576:	3710      	adds	r7, #16
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <pqcrystals_dilithium2aes_r_ref_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
 801057c:	b480      	push	{r7}
 801057e:	b087      	sub	sp, #28
 8010580:	af00      	add	r7, sp, #0
 8010582:	60f8      	str	r0, [r7, #12]
 8010584:	60b9      	str	r1, [r7, #8]
 8010586:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8010588:	2300      	movs	r3, #0
 801058a:	617b      	str	r3, [r7, #20]
 801058c:	e00f      	b.n	80105ae <pqcrystals_dilithium2aes_r_ref_poly_add+0x32>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6979      	ldr	r1, [r7, #20]
 801059a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801059e:	18d1      	adds	r1, r2, r3
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	697a      	ldr	r2, [r7, #20]
 80105a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	3301      	adds	r3, #1
 80105ac:	617b      	str	r3, [r7, #20]
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	2bff      	cmp	r3, #255	; 0xff
 80105b2:	d9ec      	bls.n	801058e <pqcrystals_dilithium2aes_r_ref_poly_add+0x12>

  DBENCH_STOP(*tadd);
}
 80105b4:	bf00      	nop
 80105b6:	bf00      	nop
 80105b8:	371c      	adds	r7, #28
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr

080105c2 <pqcrystals_dilithium2aes_r_ref_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 80105c2:	b480      	push	{r7}
 80105c4:	b087      	sub	sp, #28
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	60f8      	str	r0, [r7, #12]
 80105ca:	60b9      	str	r1, [r7, #8]
 80105cc:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80105ce:	2300      	movs	r3, #0
 80105d0:	617b      	str	r3, [r7, #20]
 80105d2:	e00f      	b.n	80105f4 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x32>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6979      	ldr	r1, [r7, #20]
 80105e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80105e4:	1ad1      	subs	r1, r2, r3
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	697a      	ldr	r2, [r7, #20]
 80105ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	3301      	adds	r3, #1
 80105f2:	617b      	str	r3, [r7, #20]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	2bff      	cmp	r3, #255	; 0xff
 80105f8:	d9ec      	bls.n	80105d4 <pqcrystals_dilithium2aes_r_ref_poly_sub+0x12>

  DBENCH_STOP(*tadd);
}
 80105fa:	bf00      	nop
 80105fc:	bf00      	nop
 80105fe:	371c      	adds	r7, #28
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <pqcrystals_dilithium2aes_r_ref_poly_shiftl>:
* Description: Multiply polynomial by 2^D without modular reduction. Assumes
*              input coefficients to be less than 2^{31-D} in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_shiftl(poly *a) {
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8010610:	2300      	movs	r3, #0
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e00b      	b.n	801062e <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0x26>
    a->coeffs[i] <<= D;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801061e:	0359      	lsls	r1, r3, #13
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	3301      	adds	r3, #1
 801062c:	60fb      	str	r3, [r7, #12]
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2bff      	cmp	r3, #255	; 0xff
 8010632:	d9f0      	bls.n	8010616 <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0xe>

  DBENCH_STOP(*tmul);
}
 8010634:	bf00      	nop
 8010636:	bf00      	nop
 8010638:	3714      	adds	r7, #20
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>:
* Description: Inplace forward NTT. Coefficients can grow by
*              8*Q in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_ntt(poly *a) {
 8010642:	b580      	push	{r7, lr}
 8010644:	b082      	sub	sp, #8
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  ntt(a->coeffs);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	f7ff fb75 	bl	800fd3c <pqcrystals_dilithium2aes_r_ref_ntt>

  DBENCH_STOP(*tmul);
}
 8010652:	bf00      	nop
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>:
*              Input coefficients need to be less than Q in absolute
*              value and output coefficients are again bounded by Q.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_invntt_tomont(poly *a) {
 801065a:	b580      	push	{r7, lr}
 801065c:	b082      	sub	sp, #8
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  invntt_tomont(a->coeffs);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4618      	mov	r0, r3
 8010666:	f7ff fbd5 	bl	800fe14 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>

  DBENCH_STOP(*tmul);
}
 801066a:	bf00      	nop
 801066c:	3708      	adds	r7, #8
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 8010672:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8010680:	2300      	movs	r3, #0
 8010682:	617b      	str	r3, [r7, #20]
 8010684:	e022      	b.n	80106cc <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x5a>
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801068e:	17da      	asrs	r2, r3, #31
 8010690:	4698      	mov	r8, r3
 8010692:	4691      	mov	r9, r2
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	697a      	ldr	r2, [r7, #20]
 8010698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801069c:	17da      	asrs	r2, r3, #31
 801069e:	469a      	mov	sl, r3
 80106a0:	4693      	mov	fp, r2
 80106a2:	fb0a f209 	mul.w	r2, sl, r9
 80106a6:	fb08 f30b 	mul.w	r3, r8, fp
 80106aa:	4413      	add	r3, r2
 80106ac:	fba8 450a 	umull	r4, r5, r8, sl
 80106b0:	442b      	add	r3, r5
 80106b2:	461d      	mov	r5, r3
 80106b4:	4620      	mov	r0, r4
 80106b6:	4629      	mov	r1, r5
 80106b8:	f002 f98f 	bl	80129da <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 80106bc:	4601      	mov	r1, r0
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	697a      	ldr	r2, [r7, #20]
 80106c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	3301      	adds	r3, #1
 80106ca:	617b      	str	r3, [r7, #20]
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	2bff      	cmp	r3, #255	; 0xff
 80106d0:	d9d9      	bls.n	8010686 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x14>

  DBENCH_STOP(*tmul);
}
 80106d2:	bf00      	nop
 80106d4:	bf00      	nop
 80106d6:	3718      	adds	r7, #24
 80106d8:	46bd      	mov	sp, r7
 80106da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080106de <pqcrystals_dilithium2aes_r_ref_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 80106de:	b580      	push	{r7, lr}
 80106e0:	b086      	sub	sp, #24
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	60f8      	str	r0, [r7, #12]
 80106e6:	60b9      	str	r1, [r7, #8]
 80106e8:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80106ea:	2300      	movs	r3, #0
 80106ec:	617b      	str	r3, [r7, #20]
 80106ee:	e012      	b.n	8010716 <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x38>
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	18d0      	adds	r0, r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	697a      	ldr	r2, [r7, #20]
 80106fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010700:	4619      	mov	r1, r3
 8010702:	f002 f9df 	bl	8012ac4 <pqcrystals_dilithium2aes_r_ref_power2round>
 8010706:	4601      	mov	r1, r0
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	697a      	ldr	r2, [r7, #20]
 801070c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	3301      	adds	r3, #1
 8010714:	617b      	str	r3, [r7, #20]
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	2bff      	cmp	r3, #255	; 0xff
 801071a:	d9e9      	bls.n	80106f0 <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x12>

  DBENCH_STOP(*tround);
}
 801071c:	bf00      	nop
 801071e:	bf00      	nop
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <pqcrystals_dilithium2aes_r_ref_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 8010726:	b580      	push	{r7, lr}
 8010728:	b086      	sub	sp, #24
 801072a:	af00      	add	r7, sp, #0
 801072c:	60f8      	str	r0, [r7, #12]
 801072e:	60b9      	str	r1, [r7, #8]
 8010730:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8010732:	2300      	movs	r3, #0
 8010734:	617b      	str	r3, [r7, #20]
 8010736:	e012      	b.n	801075e <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x38>
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	18d0      	adds	r0, r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010748:	4619      	mov	r1, r3
 801074a:	f002 f9d3 	bl	8012af4 <pqcrystals_dilithium2aes_r_ref_decompose>
 801074e:	4601      	mov	r1, r0
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	697a      	ldr	r2, [r7, #20]
 8010754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	3301      	adds	r3, #1
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	2bff      	cmp	r3, #255	; 0xff
 8010762:	d9e9      	bls.n	8010738 <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x12>

  DBENCH_STOP(*tround);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop
 8010768:	3718      	adds	r7, #24
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <pqcrystals_dilithium2aes_r_ref_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 801076e:	b580      	push	{r7, lr}
 8010770:	b086      	sub	sp, #24
 8010772:	af00      	add	r7, sp, #0
 8010774:	60f8      	str	r0, [r7, #12]
 8010776:	60b9      	str	r1, [r7, #8]
 8010778:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 801077a:	2300      	movs	r3, #0
 801077c:	613b      	str	r3, [r7, #16]
  DBENCH_START();

  for(i = 0; i < N_; ++i) {
 801077e:	2300      	movs	r3, #0
 8010780:	617b      	str	r3, [r7, #20]
 8010782:	e01b      	b.n	80107bc <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x4e>
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010794:	4619      	mov	r1, r3
 8010796:	f002 f9e9 	bl	8012b6c <pqcrystals_dilithium2aes_r_ref_make_hint>
 801079a:	4603      	mov	r3, r0
 801079c:	4619      	mov	r1, r3
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	697a      	ldr	r2, [r7, #20]
 80107a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s += h->coeffs[i];
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	697a      	ldr	r2, [r7, #20]
 80107aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107ae:	461a      	mov	r2, r3
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	4413      	add	r3, r2
 80107b4:	613b      	str	r3, [r7, #16]
  for(i = 0; i < N_; ++i) {
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	3301      	adds	r3, #1
 80107ba:	617b      	str	r3, [r7, #20]
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	2bff      	cmp	r3, #255	; 0xff
 80107c0:	d9e0      	bls.n	8010784 <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x16>
  }

  DBENCH_STOP(*tround);
  return s;
 80107c2:	693b      	ldr	r3, [r7, #16]
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3718      	adds	r7, #24
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <poly_use_hint_r>:
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);

  DBENCH_STOP(*tround);
}

void poly_use_hint_r(poly *b, const poly *a, const uint8_t h[N_]) {
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b086      	sub	sp, #24
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 80107d8:	2300      	movs	r3, #0
 80107da:	617b      	str	r3, [r7, #20]
 80107dc:	e012      	b.n	8010804 <poly_use_hint_r+0x38>
    b->coeffs[i] = use_hint(a->coeffs[i], h[i]);
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	697a      	ldr	r2, [r7, #20]
 80107e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	4413      	add	r3, r2
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	4619      	mov	r1, r3
 80107f0:	f002 f9dc 	bl	8012bac <pqcrystals_dilithium2aes_r_ref_use_hint>
 80107f4:	4601      	mov	r1, r0
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	697a      	ldr	r2, [r7, #20]
 80107fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	3301      	adds	r3, #1
 8010802:	617b      	str	r3, [r7, #20]
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	2bff      	cmp	r3, #255	; 0xff
 8010808:	d9e9      	bls.n	80107de <poly_use_hint_r+0x12>

  DBENCH_STOP(*tround);
}
 801080a:	bf00      	nop
 801080c:	bf00      	nop
 801080e:	3718      	adds	r7, #24
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>:
* Arguments:   - const poly *a: pointer to polynomial
*              - int32_t B: norm bound
*
* Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
**************************************************/
int poly_chknorm(const poly *a, int32_t B) {
 8010814:	b480      	push	{r7}
 8010816:	b085      	sub	sp, #20
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q_-1)/8)
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	4a16      	ldr	r2, [pc, #88]	; (801087c <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x68>)
 8010822:	4293      	cmp	r3, r2
 8010824:	dd01      	ble.n	801082a <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x16>
    return 1;
 8010826:	2301      	movs	r3, #1
 8010828:	e022      	b.n	8010870 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N_; ++i) {
 801082a:	2300      	movs	r3, #0
 801082c:	60fb      	str	r3, [r7, #12]
 801082e:	e01b      	b.n	8010868 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x54>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010838:	17db      	asrs	r3, r3, #31
 801083a:	60bb      	str	r3, [r7, #8]
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	68f9      	ldr	r1, [r7, #12]
 8010848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801084c:	0059      	lsls	r1, r3, #1
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	400b      	ands	r3, r1
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	60bb      	str	r3, [r7, #8]

    if(t >= B) {
 8010856:	68ba      	ldr	r2, [r7, #8]
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	429a      	cmp	r2, r3
 801085c:	db01      	blt.n	8010862 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x4e>
      DBENCH_STOP(*tsample);
      return 1;
 801085e:	2301      	movs	r3, #1
 8010860:	e006      	b.n	8010870 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>
  for(i = 0; i < N_; ++i) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	3301      	adds	r3, #1
 8010866:	60fb      	str	r3, [r7, #12]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2bff      	cmp	r3, #255	; 0xff
 801086c:	d9e0      	bls.n	8010830 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x1c>
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	000ffc00 	.word	0x000ffc00

08010880 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8010880:	b480      	push	{r7}
 8010882:	b089      	sub	sp, #36	; 0x24
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
 801088c:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t;
  DBENCH_START();

  ctr = pos = 0;
 801088e:	2300      	movs	r3, #0
 8010890:	61bb      	str	r3, [r7, #24]
 8010892:	69bb      	ldr	r3, [r7, #24]
 8010894:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 8010896:	e02a      	b.n	80108ee <rej_uniform+0x6e>
    t  = buf[pos++];
 8010898:	69bb      	ldr	r3, [r7, #24]
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	61ba      	str	r2, [r7, #24]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	4413      	add	r3, r2
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 8;
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	1c5a      	adds	r2, r3, #1
 80108aa:	61ba      	str	r2, [r7, #24]
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	4413      	add	r3, r2
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	021b      	lsls	r3, r3, #8
 80108b4:	697a      	ldr	r2, [r7, #20]
 80108b6:	4313      	orrs	r3, r2
 80108b8:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 16;
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	61ba      	str	r2, [r7, #24]
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	4413      	add	r3, r2
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	041b      	lsls	r3, r3, #16
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	4313      	orrs	r3, r2
 80108cc:	617b      	str	r3, [r7, #20]
    t &= 0x7FFFFF;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80108d4:	617b      	str	r3, [r7, #20]

    if(t < Q_)
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	4a0d      	ldr	r2, [pc, #52]	; (8010910 <rej_uniform+0x90>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d807      	bhi.n	80108ee <rej_uniform+0x6e>
      a[ctr++] = t;
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	1c5a      	adds	r2, r3, #1
 80108e2:	61fa      	str	r2, [r7, #28]
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	4413      	add	r3, r2
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 80108ee:	69fa      	ldr	r2, [r7, #28]
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d204      	bcs.n	8010900 <rej_uniform+0x80>
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	3303      	adds	r3, #3
 80108fa:	683a      	ldr	r2, [r7, #0]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d2cb      	bcs.n	8010898 <rej_uniform+0x18>
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8010900:	69fb      	ldr	r3, [r7, #28]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3724      	adds	r7, #36	; 0x24
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr
 801090e:	bf00      	nop
 8010910:	007fe000 	.word	0x007fe000

08010914 <pqcrystals_dilithium2aes_r_ref_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 801091a:	af00      	add	r7, sp, #0
 801091c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010920:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8010924:	6018      	str	r0, [r3, #0]
 8010926:	f507 734e 	add.w	r3, r7, #824	; 0x338
 801092a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801092e:	6019      	str	r1, [r3, #0]
 8010930:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010934:	f2a3 3332 	subw	r3, r3, #818	; 0x332
 8010938:	801a      	strh	r2, [r3, #0]
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 801093a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801093e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2] = {0};
 8010942:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010946:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801094a:	2200      	movs	r2, #0
 801094c:	601a      	str	r2, [r3, #0]
 801094e:	3304      	adds	r3, #4
 8010950:	f240 22fe 	movw	r2, #766	; 0x2fe
 8010954:	2100      	movs	r1, #0
 8010956:	4618      	mov	r0, r3
 8010958:	f002 fe6a 	bl	8013630 <memset>
  stream128_state state;

  stream128_init(&state, seed, nonce);
 801095c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010960:	f2a3 3332 	subw	r3, r3, #818	; 0x332
 8010964:	881a      	ldrh	r2, [r3, #0]
 8010966:	f507 734e 	add.w	r3, r7, #824	; 0x338
 801096a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801096e:	f107 0014 	add.w	r0, r7, #20
 8010972:	6819      	ldr	r1, [r3, #0]
 8010974:	f002 fda8 	bl	80134c8 <dilithium_stm_stream_aes256ctr_init>
	  USB_DEBUG_MSG("%d ", buf[j]);
  }
  USB_DEBUG_MSG("\r\n");
#endif

  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8010978:	f107 0214 	add.w	r2, r7, #20
 801097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010980:	210c      	movs	r1, #12
 8010982:	4618      	mov	r0, r3
 8010984:	f002 fdee 	bl	8013564 <dilithium_stm_stream_aes256ctr_squeezeblocks>
	  USB_DEBUG_MSG("%d ", buf[j]);
  }
  USB_DEBUG_MSG("\r\n");
#endif

  ctr = rej_uniform(a->coeffs, N_, buf, buflen);
 8010988:	f507 734e 	add.w	r3, r7, #824	; 0x338
 801098c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8010990:	6818      	ldr	r0, [r3, #0]
 8010992:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010996:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801099e:	f7ff ff6f 	bl	8010880 <rej_uniform>
 80109a2:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330

  while(ctr < N_) {
 80109a6:	e059      	b.n	8010a5c <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x148>
    off = buflen % 3;
 80109a8:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80109ac:	4b30      	ldr	r3, [pc, #192]	; (8010a70 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x15c>)
 80109ae:	fba3 1302 	umull	r1, r3, r3, r2
 80109b2:	0859      	lsrs	r1, r3, #1
 80109b4:	460b      	mov	r3, r1
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	440b      	add	r3, r1
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
    for(i = 0; i < off; ++i)
 80109c0:	2300      	movs	r3, #0
 80109c2:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80109c6:	e01a      	b.n	80109fe <pqcrystals_dilithium2aes_r_ref_poly_uniform+0xea>
      buf[i] = buf[buflen - off + i];
 80109c8:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80109cc:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80109d0:	1ad2      	subs	r2, r2, r3
 80109d2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80109d6:	4413      	add	r3, r2
 80109d8:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80109dc:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80109e0:	5cd1      	ldrb	r1, [r2, r3]
 80109e2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80109e6:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 80109ea:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80109ee:	4413      	add	r3, r2
 80109f0:	460a      	mov	r2, r1
 80109f2:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < off; ++i)
 80109f4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80109f8:	3301      	adds	r3, #1
 80109fa:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80109fe:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8010a02:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d3de      	bcc.n	80109c8 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0xb4>

    stream128_squeezeblocks(buf + off, 1, &state);
 8010a0a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010a0e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8010a12:	4413      	add	r3, r2
 8010a14:	f107 0214 	add.w	r2, r7, #20
 8010a18:	2101      	movs	r1, #1
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f002 fda2 	bl	8013564 <dilithium_stm_stream_aes256ctr_squeezeblocks>
	  USB_DEBUG_MSG("%d ", buf[j]);
  }
  USB_DEBUG_MSG("\r\n");
#endif

    buflen = STREAM128_BLOCKBYTES + off;
 8010a20:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8010a24:	3340      	adds	r3, #64	; 0x40
 8010a26:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    ctr += rej_uniform(a->coeffs + ctr, N_ - ctr, buf, buflen);
 8010a2a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8010a2e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8010a38:	009b      	lsls	r3, r3, #2
 8010a3a:	18d0      	adds	r0, r2, r3
 8010a3c:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8010a40:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8010a44:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010a48:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8010a4c:	f7ff ff18 	bl	8010880 <rej_uniform>
 8010a50:	4602      	mov	r2, r0
 8010a52:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8010a56:	4413      	add	r3, r2
 8010a58:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
  while(ctr < N_) {
 8010a5c:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8010a60:	2bff      	cmp	r3, #255	; 0xff
 8010a62:	d9a1      	bls.n	80109a8 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x94>
  }
}
 8010a64:	bf00      	nop
 8010a66:	bf00      	nop
 8010a68:	f507 774e 	add.w	r7, r7, #824	; 0x338
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	aaaaaaab 	.word	0xaaaaaaab

08010a74 <rej_eta>:
**************************************************/
static unsigned int rej_eta(int32_t *a,
                            unsigned int len,
                            const uint8_t *buf,
                            unsigned int buflen)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b089      	sub	sp, #36	; 0x24
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	60b9      	str	r1, [r7, #8]
 8010a7e:	607a      	str	r2, [r7, #4]
 8010a80:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t0, t1;
  DBENCH_START();

  ctr = pos = 0;
 8010a82:	2300      	movs	r3, #0
 8010a84:	61bb      	str	r3, [r7, #24]
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos < buflen) {
 8010a8a:	e045      	b.n	8010b18 <rej_eta+0xa4>
    t0 = buf[pos] & 0x0F;
 8010a8c:	687a      	ldr	r2, [r7, #4]
 8010a8e:	69bb      	ldr	r3, [r7, #24]
 8010a90:	4413      	add	r3, r2
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	f003 030f 	and.w	r3, r3, #15
 8010a98:	617b      	str	r3, [r7, #20]
    t1 = buf[pos++] >> 4;
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	1c5a      	adds	r2, r3, #1
 8010a9e:	61ba      	str	r2, [r7, #24]
 8010aa0:	687a      	ldr	r2, [r7, #4]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	091b      	lsrs	r3, r3, #4
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	613b      	str	r3, [r7, #16]

#if ETA == 2
    if(t0 < 15) {
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	2b0e      	cmp	r3, #14
 8010ab0:	d815      	bhi.n	8010ade <rej_eta+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	22cd      	movs	r2, #205	; 0xcd
 8010ab6:	fb02 f303 	mul.w	r3, r2, r3
 8010aba:	0a9a      	lsrs	r2, r3, #10
 8010abc:	4613      	mov	r3, r2
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4413      	add	r3, r2
 8010ac2:	697a      	ldr	r2, [r7, #20]
 8010ac4:	1ad3      	subs	r3, r2, r3
 8010ac6:	617b      	str	r3, [r7, #20]
      a[ctr++] = 2 - t0;
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	f1c3 0102 	rsb	r1, r3, #2
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	1c5a      	adds	r2, r3, #1
 8010ad2:	61fa      	str	r2, [r7, #28]
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	4413      	add	r3, r2
 8010ada:	460a      	mov	r2, r1
 8010adc:	601a      	str	r2, [r3, #0]
    }
    if(t1 < 15 && ctr < len) {
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2b0e      	cmp	r3, #14
 8010ae2:	d819      	bhi.n	8010b18 <rej_eta+0xa4>
 8010ae4:	69fa      	ldr	r2, [r7, #28]
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d215      	bcs.n	8010b18 <rej_eta+0xa4>
      t1 = t1 - (205*t1 >> 10)*5;
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	22cd      	movs	r2, #205	; 0xcd
 8010af0:	fb02 f303 	mul.w	r3, r2, r3
 8010af4:	0a9a      	lsrs	r2, r3, #10
 8010af6:	4613      	mov	r3, r2
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4413      	add	r3, r2
 8010afc:	693a      	ldr	r2, [r7, #16]
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	613b      	str	r3, [r7, #16]
      a[ctr++] = 2 - t1;
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	f1c3 0102 	rsb	r1, r3, #2
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	61fa      	str	r2, [r7, #28]
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	4413      	add	r3, r2
 8010b14:	460a      	mov	r2, r1
 8010b16:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos < buflen) {
 8010b18:	69fa      	ldr	r2, [r7, #28]
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d203      	bcs.n	8010b28 <rej_eta+0xb4>
 8010b20:	69ba      	ldr	r2, [r7, #24]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d3b1      	bcc.n	8010a8c <rej_eta+0x18>
      a[ctr++] = 4 - t1;
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8010b28:	69fb      	ldr	r3, [r7, #28]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3724      	adds	r7, #36	; 0x24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr

08010b36 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[SEEDBYTES],
                      uint16_t nonce)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b0ba      	sub	sp, #232	; 0xe8
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	60f8      	str	r0, [r7, #12]
 8010b3e:	60b9      	str	r1, [r7, #8]
 8010b40:	4613      	mov	r3, r2
 8010b42:	80fb      	strh	r3, [r7, #6]
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES;
 8010b44:	23c0      	movs	r3, #192	; 0xc0
 8010b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES] = {0};
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	623b      	str	r3, [r7, #32]
 8010b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b52:	22bc      	movs	r2, #188	; 0xbc
 8010b54:	2100      	movs	r1, #0
 8010b56:	4618      	mov	r0, r3
 8010b58:	f002 fd6a 	bl	8013630 <memset>
  stream128_state state;

  stream128_init(&state, seed, nonce);
 8010b5c:	88fa      	ldrh	r2, [r7, #6]
 8010b5e:	f107 0310 	add.w	r3, r7, #16
 8010b62:	68b9      	ldr	r1, [r7, #8]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f002 fcaf 	bl	80134c8 <dilithium_stm_stream_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8010b6a:	f107 0210 	add.w	r2, r7, #16
 8010b6e:	f107 0320 	add.w	r3, r7, #32
 8010b72:	2103      	movs	r1, #3
 8010b74:	4618      	mov	r0, r3
 8010b76:	f002 fcf5 	bl	8013564 <dilithium_stm_stream_aes256ctr_squeezeblocks>

  ctr = rej_eta(a->coeffs, N_, buf, buflen);
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f107 0220 	add.w	r2, r7, #32
 8010b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010b88:	f7ff ff74 	bl	8010a74 <rej_eta>
 8010b8c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

  while(ctr < N_) {
 8010b90:	e01b      	b.n	8010bca <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0x94>
    stream128_squeezeblocks(buf, 1, &state);
 8010b92:	f107 0210 	add.w	r2, r7, #16
 8010b96:	f107 0320 	add.w	r3, r7, #32
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f002 fce1 	bl	8013564 <dilithium_stm_stream_aes256ctr_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N_ - ctr, buf, STREAM128_BLOCKBYTES);
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	18d0      	adds	r0, r2, r3
 8010bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bb0:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8010bb4:	f107 0220 	add.w	r2, r7, #32
 8010bb8:	2340      	movs	r3, #64	; 0x40
 8010bba:	f7ff ff5b 	bl	8010a74 <rej_eta>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bc4:	4413      	add	r3, r2
 8010bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  while(ctr < N_) {
 8010bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bce:	2bff      	cmp	r3, #255	; 0xff
 8010bd0:	d9df      	bls.n	8010b92 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0x5c>
  }
}
 8010bd2:	bf00      	nop
 8010bd4:	bf00      	nop
 8010bd6:	37e8      	adds	r7, #232	; 0xe8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8010be8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8010bec:	6018      	str	r0, [r3, #0]
 8010bee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8010bf2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010bf6:	6019      	str	r1, [r3, #0]
 8010bf8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8010bfc:	f2a3 235a 	subw	r3, r3, #602	; 0x25a
 8010c00:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES] = {0};
 8010c02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8010c06:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	601a      	str	r2, [r3, #0]
 8010c0e:	3304      	adds	r3, #4
 8010c10:	f44f 720f 	mov.w	r2, #572	; 0x23c
 8010c14:	2100      	movs	r1, #0
 8010c16:	4618      	mov	r0, r3
 8010c18:	f002 fd0a 	bl	8013630 <memset>
  stream256_state state;

  stream256_init(&state, seed, nonce);
 8010c1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8010c20:	f2a3 235a 	subw	r3, r3, #602	; 0x25a
 8010c24:	881a      	ldrh	r2, [r3, #0]
 8010c26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8010c2a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010c2e:	f107 0010 	add.w	r0, r7, #16
 8010c32:	6819      	ldr	r1, [r3, #0]
 8010c34:	f002 fc48 	bl	80134c8 <dilithium_stm_stream_aes256ctr_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8010c38:	f107 0210 	add.w	r2, r7, #16
 8010c3c:	f107 0320 	add.w	r3, r7, #32
 8010c40:	2109      	movs	r1, #9
 8010c42:	4618      	mov	r0, r3
 8010c44:	f002 fc8e 	bl	8013564 <dilithium_stm_stream_aes256ctr_squeezeblocks>
  polyz_unpack(a, buf);
 8010c48:	f107 0220 	add.w	r2, r7, #32
 8010c4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8010c50:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8010c54:	4611      	mov	r1, r2
 8010c56:	6818      	ldr	r0, [r3, #0]
 8010c58:	f000 ff36 	bl	8011ac8 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
}
 8010c5c:	bf00      	nop
 8010c5e:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <pqcrystals_dilithium2aes_r_ref_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 8010c66:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c6a:	b0de      	sub	sp, #376	; 0x178
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010c72:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010c76:	6018      	str	r0, [r3, #0]
 8010c78:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010c7c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8010c80:	6019      	str	r1, [r3, #0]
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
 8010c82:	f107 0308 	add.w	r3, r7, #8
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fe ffd5 	bl	800fc36 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
 8010c8c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010c90:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8010c94:	f107 0008 	add.w	r0, r7, #8
 8010c98:	2220      	movs	r2, #32
 8010c9a:	6819      	ldr	r1, [r3, #0]
 8010c9c:	f7fe ffd6 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8010ca0:	f107 0308 	add.w	r3, r7, #8
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fe ffe9 	bl	800fc7c <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
 8010caa:	f107 0208 	add.w	r2, r7, #8
 8010cae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fe fff5 	bl	800fca4 <pqcrystals_fips202_ref_shake256_squeezeblocks>

  signs = 0;
 8010cba:	f04f 0200 	mov.w	r2, #0
 8010cbe:	f04f 0300 	mov.w	r3, #0
 8010cc2:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010ccc:	e027      	b.n	8010d1e <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xb8>
    signs |= (uint64_t)buf[i] << 8*i;
 8010cce:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8010cd2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010cd6:	4413      	add	r3, r2
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2200      	movs	r2, #0
 8010cde:	4698      	mov	r8, r3
 8010ce0:	4691      	mov	r9, r2
 8010ce2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010ce6:	00db      	lsls	r3, r3, #3
 8010ce8:	f1a3 0120 	sub.w	r1, r3, #32
 8010cec:	f1c3 0220 	rsb	r2, r3, #32
 8010cf0:	fa09 f503 	lsl.w	r5, r9, r3
 8010cf4:	fa08 f101 	lsl.w	r1, r8, r1
 8010cf8:	430d      	orrs	r5, r1
 8010cfa:	fa28 f202 	lsr.w	r2, r8, r2
 8010cfe:	4315      	orrs	r5, r2
 8010d00:	fa08 f403 	lsl.w	r4, r8, r3
 8010d04:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8010d08:	ea42 0a04 	orr.w	sl, r2, r4
 8010d0c:	ea43 0b05 	orr.w	fp, r3, r5
 8010d10:	e9c7 ab5a 	strd	sl, fp, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 8010d14:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010d18:	3301      	adds	r3, #1
 8010d1a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d1e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010d22:	2b07      	cmp	r3, #7
 8010d24:	d9d3      	bls.n	8010cce <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x68>
  pos = 8;
 8010d26:	2308      	movs	r3, #8
 8010d28:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  for(i = 0; i < N_; ++i)
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d32:	e00e      	b.n	8010d52 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xec>
    c->coeffs[i] = 0;
 8010d34:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010d38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8010d42:	2100      	movs	r1, #0
 8010d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8010d48:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d52:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010d56:	2bff      	cmp	r3, #255	; 0xff
 8010d58:	d9ec      	bls.n	8010d34 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xce>
  for(i = N_-TAU; i < N_; ++i) {
 8010d5a:	23d9      	movs	r3, #217	; 0xd9
 8010d5c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d60:	e054      	b.n	8010e0c <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x1a6>
    do {
      if(pos >= SHAKE256_RATE) {
 8010d62:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8010d66:	2b87      	cmp	r3, #135	; 0x87
 8010d68:	d90a      	bls.n	8010d80 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x11a>
        shake256_squeezeblocks(buf, 1, &state);
 8010d6a:	f107 0208 	add.w	r2, r7, #8
 8010d6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010d72:	2101      	movs	r1, #1
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fe ff95 	bl	800fca4 <pqcrystals_fips202_ref_shake256_squeezeblocks>
        pos = 0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      }

      b = buf[pos++];
 8010d80:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8010d84:	1c5a      	adds	r2, r3, #1
 8010d86:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8010d8a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010d8e:	443b      	add	r3, r7
 8010d90:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8010d94:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    } while(b > i);
 8010d98:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8010d9c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d8de      	bhi.n	8010d62 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>

    c->coeffs[i] = c->coeffs[b];
 8010da4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010da8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8010db2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010db6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010dba:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8010dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 8010dc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8010dcc:	f003 0301 	and.w	r3, r3, #1
 8010dd0:	005b      	lsls	r3, r3, #1
 8010dd2:	f1c3 0301 	rsb	r3, r3, #1
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010ddc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8010de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    signs >>= 1;
 8010dea:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8010dee:	f04f 0200 	mov.w	r2, #0
 8010df2:	f04f 0300 	mov.w	r3, #0
 8010df6:	0842      	lsrs	r2, r0, #1
 8010df8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010dfc:	084b      	lsrs	r3, r1, #1
 8010dfe:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = N_-TAU; i < N_; ++i) {
 8010e02:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010e06:	3301      	adds	r3, #1
 8010e08:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010e0c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8010e10:	2bff      	cmp	r3, #255	; 0xff
 8010e12:	d9a6      	bls.n	8010d62 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>
  }
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop
 8010e18:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e22 <pqcrystals_dilithium2aes_r_ref_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 8010e22:	b480      	push	{r7}
 8010e24:	b085      	sub	sp, #20
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	60fb      	str	r3, [r7, #12]
 8010e30:	e06f      	b.n	8010f12 <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0xf0>
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	009a      	lsls	r2, r3, #2
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	009b      	lsls	r3, r3, #2
 8010e42:	4413      	add	r3, r2
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	4413      	add	r3, r2
 8010e48:	b2ca      	uxtb	r2, r1
 8010e4a:	701a      	strb	r2, [r3, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	009a      	lsls	r2, r3, #2
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e56:	121b      	asrs	r3, r3, #8
 8010e58:	b25a      	sxtb	r2, r3
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	1c59      	adds	r1, r3, #1
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	b25b      	sxtb	r3, r3
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	b259      	sxtb	r1, r3
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	4613      	mov	r3, r2
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	4413      	add	r3, r2
 8010e76:	3301      	adds	r3, #1
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	b2ca      	uxtb	r2, r1
 8010e7e:	701a      	strb	r2, [r3, #0]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	1c5a      	adds	r2, r3, #1
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e8c:	119b      	asrs	r3, r3, #6
 8010e8e:	b25a      	sxtb	r2, r3
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	1c99      	adds	r1, r3, #2
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e9c:	011b      	lsls	r3, r3, #4
 8010e9e:	b25b      	sxtb	r3, r3
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	b259      	sxtb	r1, r3
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	4613      	mov	r3, r2
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	4413      	add	r3, r2
 8010eac:	3302      	adds	r3, #2
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	b2ca      	uxtb	r2, r1
 8010eb4:	701a      	strb	r2, [r3, #0]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	1c9a      	adds	r2, r3, #2
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec2:	111b      	asrs	r3, r3, #4
 8010ec4:	b25a      	sxtb	r2, r3
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	1cd9      	adds	r1, r3, #3
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ed2:	019b      	lsls	r3, r3, #6
 8010ed4:	b25b      	sxtb	r3, r3
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	b259      	sxtb	r1, r3
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	4613      	mov	r3, r2
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	4413      	add	r3, r2
 8010ee2:	3303      	adds	r3, #3
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	b2ca      	uxtb	r2, r1
 8010eea:	701a      	strb	r2, [r3, #0]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	1cda      	adds	r2, r3, #3
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ef8:	1099      	asrs	r1, r3, #2
 8010efa:	68fa      	ldr	r2, [r7, #12]
 8010efc:	4613      	mov	r3, r2
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4413      	add	r3, r2
 8010f02:	3304      	adds	r3, #4
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	4413      	add	r3, r2
 8010f08:	b2ca      	uxtb	r2, r1
 8010f0a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	60fb      	str	r3, [r7, #12]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2b3f      	cmp	r3, #63	; 0x3f
 8010f16:	d98c      	bls.n	8010e32 <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8010f18:	bf00      	nop
 8010f1a:	bf00      	nop
 8010f1c:	3714      	adds	r7, #20
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr

08010f26 <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>:
*              Output coefficients are standard representatives.
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
 8010f26:	b480      	push	{r7}
 8010f28:	b085      	sub	sp, #20
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
 8010f2e:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8010f30:	2300      	movs	r3, #0
 8010f32:	60fb      	str	r3, [r7, #12]
 8010f34:	e076      	b.n	8011024 <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0xfe>
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	4613      	mov	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	683a      	ldr	r2, [r7, #0]
 8010f40:	4413      	add	r3, r2
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	4619      	mov	r1, r3
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	4613      	mov	r3, r2
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	4413      	add	r3, r2
 8010f4e:	3301      	adds	r3, #1
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	4413      	add	r3, r2
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	021b      	lsls	r3, r3, #8
 8010f58:	430b      	orrs	r3, r1
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	009a      	lsls	r2, r3, #2
 8010f60:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	4413      	add	r3, r2
 8010f72:	3301      	adds	r3, #1
 8010f74:	683a      	ldr	r2, [r7, #0]
 8010f76:	4413      	add	r3, r2
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	089b      	lsrs	r3, r3, #2
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	4619      	mov	r1, r3
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	4613      	mov	r3, r2
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	4413      	add	r3, r2
 8010f88:	3302      	adds	r3, #2
 8010f8a:	683a      	ldr	r2, [r7, #0]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	019b      	lsls	r3, r3, #6
 8010f92:	430b      	orrs	r3, r1
 8010f94:	4619      	mov	r1, r3
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	1c5a      	adds	r2, r3, #1
 8010f9c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	4613      	mov	r3, r2
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	4413      	add	r3, r2
 8010fae:	3302      	adds	r3, #2
 8010fb0:	683a      	ldr	r2, [r7, #0]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	091b      	lsrs	r3, r3, #4
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	4619      	mov	r1, r3
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	3303      	adds	r3, #3
 8010fc6:	683a      	ldr	r2, [r7, #0]
 8010fc8:	4413      	add	r3, r2
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	011b      	lsls	r3, r3, #4
 8010fce:	430b      	orrs	r3, r1
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	1c9a      	adds	r2, r3, #2
 8010fd8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 8010fe2:	68fa      	ldr	r2, [r7, #12]
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	4413      	add	r3, r2
 8010fea:	3303      	adds	r3, #3
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	4413      	add	r3, r2
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	099b      	lsrs	r3, r3, #6
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	009b      	lsls	r3, r3, #2
 8010ffe:	4413      	add	r3, r2
 8011000:	3304      	adds	r3, #4
 8011002:	683a      	ldr	r2, [r7, #0]
 8011004:	4413      	add	r3, r2
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	430b      	orrs	r3, r1
 801100c:	4619      	mov	r1, r3
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	1cda      	adds	r2, r3, #3
 8011014:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	3301      	adds	r3, #1
 8011022:	60fb      	str	r3, [r7, #12]
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2b3f      	cmp	r3, #63	; 0x3f
 8011028:	d985      	bls.n	8010f36 <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 801102a:	bf00      	nop
 801102c:	bf00      	nop
 801102e:	3714      	adds	r7, #20
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <pqcrystals_dilithium2aes_r_ref_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8011038:	b480      	push	{r7}
 801103a:	b08d      	sub	sp, #52	; 0x34
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 8011042:	2300      	movs	r3, #0
 8011044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011046:	e1ad      	b.n	80113a4 <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x36c>
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8011048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104a:	00da      	lsls	r2, r3, #3
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011052:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8011056:	60fb      	str	r3, [r7, #12]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	1c5a      	adds	r2, r3, #1
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011064:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8011068:	613b      	str	r3, [r7, #16]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 801106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106c:	00db      	lsls	r3, r3, #3
 801106e:	1c9a      	adds	r2, r3, #2
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011076:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801107a:	617b      	str	r3, [r7, #20]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	00db      	lsls	r3, r3, #3
 8011080:	1cda      	adds	r2, r3, #3
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011088:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801108c:	61bb      	str	r3, [r7, #24]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 801108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011090:	00db      	lsls	r3, r3, #3
 8011092:	1d1a      	adds	r2, r3, #4
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801109a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801109e:	61fb      	str	r3, [r7, #28]
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 80110a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a2:	00db      	lsls	r3, r3, #3
 80110a4:	1d5a      	adds	r2, r3, #5
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ac:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80110b0:	623b      	str	r3, [r7, #32]
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 80110b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b4:	00db      	lsls	r3, r3, #3
 80110b6:	1d9a      	adds	r2, r3, #6
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110be:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	00db      	lsls	r3, r3, #3
 80110c8:	1dda      	adds	r2, r3, #7
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110d0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80110d4:	62bb      	str	r3, [r7, #40]	; 0x28

    r[13*i+ 0]  =  t[0];
 80110d6:	68f9      	ldr	r1, [r7, #12]
 80110d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110da:	4613      	mov	r3, r2
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	4413      	add	r3, r2
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4413      	add	r3, r2
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	4413      	add	r3, r2
 80110e8:	b2ca      	uxtb	r2, r1
 80110ea:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1]  =  t[0] >>  8;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	0a19      	lsrs	r1, r3, #8
 80110f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110f2:	4613      	mov	r3, r2
 80110f4:	005b      	lsls	r3, r3, #1
 80110f6:	4413      	add	r3, r2
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	4413      	add	r3, r2
 80110fc:	3301      	adds	r3, #1
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	4413      	add	r3, r2
 8011102:	b2ca      	uxtb	r2, r1
 8011104:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 8011106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011108:	4613      	mov	r3, r2
 801110a:	005b      	lsls	r3, r3, #1
 801110c:	4413      	add	r3, r2
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	4413      	add	r3, r2
 8011112:	3301      	adds	r3, #1
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	4413      	add	r3, r2
 8011118:	7818      	ldrb	r0, [r3, #0]
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	b2db      	uxtb	r3, r3
 801111e:	015b      	lsls	r3, r3, #5
 8011120:	b2d9      	uxtb	r1, r3
 8011122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011124:	4613      	mov	r3, r2
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	4413      	add	r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	4413      	add	r3, r2
 801112e:	3301      	adds	r3, #1
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	4413      	add	r3, r2
 8011134:	ea40 0201 	orr.w	r2, r0, r1
 8011138:	b2d2      	uxtb	r2, r2
 801113a:	701a      	strb	r2, [r3, #0]
    r[13*i+ 2]  =  t[1] >>  3;
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	08d9      	lsrs	r1, r3, #3
 8011140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011142:	4613      	mov	r3, r2
 8011144:	005b      	lsls	r3, r3, #1
 8011146:	4413      	add	r3, r2
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4413      	add	r3, r2
 801114c:	3302      	adds	r3, #2
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	4413      	add	r3, r2
 8011152:	b2ca      	uxtb	r2, r1
 8011154:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3]  =  t[1] >> 11;
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	0ad9      	lsrs	r1, r3, #11
 801115a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801115c:	4613      	mov	r3, r2
 801115e:	005b      	lsls	r3, r3, #1
 8011160:	4413      	add	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	3303      	adds	r3, #3
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	4413      	add	r3, r2
 801116c:	b2ca      	uxtb	r2, r1
 801116e:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3] |=  t[2] <<  2;
 8011170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011172:	4613      	mov	r3, r2
 8011174:	005b      	lsls	r3, r3, #1
 8011176:	4413      	add	r3, r2
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	4413      	add	r3, r2
 801117c:	3303      	adds	r3, #3
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	4413      	add	r3, r2
 8011182:	7818      	ldrb	r0, [r3, #0]
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	b2db      	uxtb	r3, r3
 8011188:	009b      	lsls	r3, r3, #2
 801118a:	b2d9      	uxtb	r1, r3
 801118c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801118e:	4613      	mov	r3, r2
 8011190:	005b      	lsls	r3, r3, #1
 8011192:	4413      	add	r3, r2
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	4413      	add	r3, r2
 8011198:	3303      	adds	r3, #3
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	4413      	add	r3, r2
 801119e:	ea40 0201 	orr.w	r2, r0, r1
 80111a2:	b2d2      	uxtb	r2, r2
 80111a4:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4]  =  t[2] >>  6;
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	0999      	lsrs	r1, r3, #6
 80111aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ac:	4613      	mov	r3, r2
 80111ae:	005b      	lsls	r3, r3, #1
 80111b0:	4413      	add	r3, r2
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	4413      	add	r3, r2
 80111b6:	3304      	adds	r3, #4
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	4413      	add	r3, r2
 80111bc:	b2ca      	uxtb	r2, r1
 80111be:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4] |=  t[3] <<  7;
 80111c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111c2:	4613      	mov	r3, r2
 80111c4:	005b      	lsls	r3, r3, #1
 80111c6:	4413      	add	r3, r2
 80111c8:	009b      	lsls	r3, r3, #2
 80111ca:	4413      	add	r3, r2
 80111cc:	3304      	adds	r3, #4
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	4413      	add	r3, r2
 80111d2:	7818      	ldrb	r0, [r3, #0]
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	01db      	lsls	r3, r3, #7
 80111da:	b2d9      	uxtb	r1, r3
 80111dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111de:	4613      	mov	r3, r2
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	4413      	add	r3, r2
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	4413      	add	r3, r2
 80111e8:	3304      	adds	r3, #4
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	4413      	add	r3, r2
 80111ee:	ea40 0201 	orr.w	r2, r0, r1
 80111f2:	b2d2      	uxtb	r2, r2
 80111f4:	701a      	strb	r2, [r3, #0]
    r[13*i+ 5]  =  t[3] >>  1;
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	0859      	lsrs	r1, r3, #1
 80111fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	4413      	add	r3, r2
 8011206:	3305      	adds	r3, #5
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	4413      	add	r3, r2
 801120c:	b2ca      	uxtb	r2, r1
 801120e:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6]  =  t[3] >>  9;
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	0a59      	lsrs	r1, r3, #9
 8011214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011216:	4613      	mov	r3, r2
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	4413      	add	r3, r2
 801121c:	009b      	lsls	r3, r3, #2
 801121e:	4413      	add	r3, r2
 8011220:	3306      	adds	r3, #6
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	4413      	add	r3, r2
 8011226:	b2ca      	uxtb	r2, r1
 8011228:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6] |=  t[4] <<  4;
 801122a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801122c:	4613      	mov	r3, r2
 801122e:	005b      	lsls	r3, r3, #1
 8011230:	4413      	add	r3, r2
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	4413      	add	r3, r2
 8011236:	3306      	adds	r3, #6
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	4413      	add	r3, r2
 801123c:	7818      	ldrb	r0, [r3, #0]
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	b2db      	uxtb	r3, r3
 8011242:	011b      	lsls	r3, r3, #4
 8011244:	b2d9      	uxtb	r1, r3
 8011246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011248:	4613      	mov	r3, r2
 801124a:	005b      	lsls	r3, r3, #1
 801124c:	4413      	add	r3, r2
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	4413      	add	r3, r2
 8011252:	3306      	adds	r3, #6
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	4413      	add	r3, r2
 8011258:	ea40 0201 	orr.w	r2, r0, r1
 801125c:	b2d2      	uxtb	r2, r2
 801125e:	701a      	strb	r2, [r3, #0]
    r[13*i+ 7]  =  t[4] >>  4;
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	0919      	lsrs	r1, r3, #4
 8011264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011266:	4613      	mov	r3, r2
 8011268:	005b      	lsls	r3, r3, #1
 801126a:	4413      	add	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	4413      	add	r3, r2
 8011270:	3307      	adds	r3, #7
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	4413      	add	r3, r2
 8011276:	b2ca      	uxtb	r2, r1
 8011278:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8]  =  t[4] >> 12;
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	0b19      	lsrs	r1, r3, #12
 801127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011280:	4613      	mov	r3, r2
 8011282:	005b      	lsls	r3, r3, #1
 8011284:	4413      	add	r3, r2
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	4413      	add	r3, r2
 801128a:	3308      	adds	r3, #8
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	4413      	add	r3, r2
 8011290:	b2ca      	uxtb	r2, r1
 8011292:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8] |=  t[5] <<  1;
 8011294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011296:	4613      	mov	r3, r2
 8011298:	005b      	lsls	r3, r3, #1
 801129a:	4413      	add	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	3308      	adds	r3, #8
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	4413      	add	r3, r2
 80112a6:	7818      	ldrb	r0, [r3, #0]
 80112a8:	6a3b      	ldr	r3, [r7, #32]
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	005b      	lsls	r3, r3, #1
 80112ae:	b2d9      	uxtb	r1, r3
 80112b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112b2:	4613      	mov	r3, r2
 80112b4:	005b      	lsls	r3, r3, #1
 80112b6:	4413      	add	r3, r2
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	4413      	add	r3, r2
 80112bc:	3308      	adds	r3, #8
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	4413      	add	r3, r2
 80112c2:	ea40 0201 	orr.w	r2, r0, r1
 80112c6:	b2d2      	uxtb	r2, r2
 80112c8:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9]  =  t[5] >>  7;
 80112ca:	6a3b      	ldr	r3, [r7, #32]
 80112cc:	09d9      	lsrs	r1, r3, #7
 80112ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112d0:	4613      	mov	r3, r2
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	4413      	add	r3, r2
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	4413      	add	r3, r2
 80112da:	3309      	adds	r3, #9
 80112dc:	687a      	ldr	r2, [r7, #4]
 80112de:	4413      	add	r3, r2
 80112e0:	b2ca      	uxtb	r2, r1
 80112e2:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9] |=  t[6] <<  6;
 80112e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112e6:	4613      	mov	r3, r2
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	4413      	add	r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	4413      	add	r3, r2
 80112f0:	3309      	adds	r3, #9
 80112f2:	687a      	ldr	r2, [r7, #4]
 80112f4:	4413      	add	r3, r2
 80112f6:	7818      	ldrb	r0, [r3, #0]
 80112f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	019b      	lsls	r3, r3, #6
 80112fe:	b2d9      	uxtb	r1, r3
 8011300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011302:	4613      	mov	r3, r2
 8011304:	005b      	lsls	r3, r3, #1
 8011306:	4413      	add	r3, r2
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	4413      	add	r3, r2
 801130c:	3309      	adds	r3, #9
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	4413      	add	r3, r2
 8011312:	ea40 0201 	orr.w	r2, r0, r1
 8011316:	b2d2      	uxtb	r2, r2
 8011318:	701a      	strb	r2, [r3, #0]
    r[13*i+10]  =  t[6] >>  2;
 801131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131c:	0899      	lsrs	r1, r3, #2
 801131e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011320:	4613      	mov	r3, r2
 8011322:	005b      	lsls	r3, r3, #1
 8011324:	4413      	add	r3, r2
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	4413      	add	r3, r2
 801132a:	330a      	adds	r3, #10
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	4413      	add	r3, r2
 8011330:	b2ca      	uxtb	r2, r1
 8011332:	701a      	strb	r2, [r3, #0]
    r[13*i+11]  =  t[6] >> 10;
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	0a99      	lsrs	r1, r3, #10
 8011338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801133a:	4613      	mov	r3, r2
 801133c:	005b      	lsls	r3, r3, #1
 801133e:	4413      	add	r3, r2
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	4413      	add	r3, r2
 8011344:	330b      	adds	r3, #11
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	4413      	add	r3, r2
 801134a:	b2ca      	uxtb	r2, r1
 801134c:	701a      	strb	r2, [r3, #0]
    r[13*i+11] |=  t[7] <<  3;
 801134e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011350:	4613      	mov	r3, r2
 8011352:	005b      	lsls	r3, r3, #1
 8011354:	4413      	add	r3, r2
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	4413      	add	r3, r2
 801135a:	330b      	adds	r3, #11
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	4413      	add	r3, r2
 8011360:	7818      	ldrb	r0, [r3, #0]
 8011362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011364:	b2db      	uxtb	r3, r3
 8011366:	00db      	lsls	r3, r3, #3
 8011368:	b2d9      	uxtb	r1, r3
 801136a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801136c:	4613      	mov	r3, r2
 801136e:	005b      	lsls	r3, r3, #1
 8011370:	4413      	add	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	4413      	add	r3, r2
 8011376:	330b      	adds	r3, #11
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	4413      	add	r3, r2
 801137c:	ea40 0201 	orr.w	r2, r0, r1
 8011380:	b2d2      	uxtb	r2, r2
 8011382:	701a      	strb	r2, [r3, #0]
    r[13*i+12]  =  t[7] >>  5;
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	0959      	lsrs	r1, r3, #5
 8011388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801138a:	4613      	mov	r3, r2
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	4413      	add	r3, r2
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4413      	add	r3, r2
 8011394:	330c      	adds	r3, #12
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	4413      	add	r3, r2
 801139a:	b2ca      	uxtb	r2, r1
 801139c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/8; ++i) {
 801139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a0:	3301      	adds	r3, #1
 80113a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a6:	2b1f      	cmp	r3, #31
 80113a8:	f67f ae4e 	bls.w	8011048 <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 80113ac:	bf00      	nop
 80113ae:	bf00      	nop
 80113b0:	3734      	adds	r7, #52	; 0x34
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr

080113ba <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 80113ba:	b480      	push	{r7}
 80113bc:	b085      	sub	sp, #20
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 80113c4:	2300      	movs	r3, #0
 80113c6:	60fb      	str	r3, [r7, #12]
 80113c8:	e294      	b.n	80118f4 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x53a>
    r->coeffs[8*i+0]  = a[13*i+0];
 80113ca:	68fa      	ldr	r2, [r7, #12]
 80113cc:	4613      	mov	r3, r2
 80113ce:	005b      	lsls	r3, r3, #1
 80113d0:	4413      	add	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	4413      	add	r3, r2
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	4413      	add	r3, r2
 80113da:	7819      	ldrb	r1, [r3, #0]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	00da      	lsls	r2, r3, #3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	00da      	lsls	r2, r3, #3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113f0:	4619      	mov	r1, r3
 80113f2:	68fa      	ldr	r2, [r7, #12]
 80113f4:	4613      	mov	r3, r2
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	4413      	add	r3, r2
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	4413      	add	r3, r2
 80113fe:	3301      	adds	r3, #1
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	4413      	add	r3, r2
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	021b      	lsls	r3, r3, #8
 8011408:	4319      	orrs	r1, r3
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	00da      	lsls	r2, r3, #3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] &= 0x1FFF;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	00da      	lsls	r2, r3, #3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801141e:	68fa      	ldr	r2, [r7, #12]
 8011420:	00d2      	lsls	r2, r2, #3
 8011422:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	4613      	mov	r3, r2
 8011430:	005b      	lsls	r3, r3, #1
 8011432:	4413      	add	r3, r2
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	4413      	add	r3, r2
 8011438:	3301      	adds	r3, #1
 801143a:	683a      	ldr	r2, [r7, #0]
 801143c:	4413      	add	r3, r2
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	095b      	lsrs	r3, r3, #5
 8011442:	b2d9      	uxtb	r1, r3
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	00db      	lsls	r3, r3, #3
 8011448:	1c5a      	adds	r2, r3, #1
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	00db      	lsls	r3, r3, #3
 8011454:	1c5a      	adds	r2, r3, #1
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801145c:	4619      	mov	r1, r3
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	4613      	mov	r3, r2
 8011462:	005b      	lsls	r3, r3, #1
 8011464:	4413      	add	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	4413      	add	r3, r2
 801146a:	3302      	adds	r3, #2
 801146c:	683a      	ldr	r2, [r7, #0]
 801146e:	4413      	add	r3, r2
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	00db      	lsls	r3, r3, #3
 8011474:	4319      	orrs	r1, r3
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	00db      	lsls	r3, r3, #3
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	00db      	lsls	r3, r3, #3
 8011486:	1c5a      	adds	r2, r3, #1
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801148e:	4619      	mov	r1, r3
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	4613      	mov	r3, r2
 8011494:	005b      	lsls	r3, r3, #1
 8011496:	4413      	add	r3, r2
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	4413      	add	r3, r2
 801149c:	3303      	adds	r3, #3
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	4413      	add	r3, r2
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	02db      	lsls	r3, r3, #11
 80114a6:	4319      	orrs	r1, r3
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	00db      	lsls	r3, r3, #3
 80114ac:	1c5a      	adds	r2, r3, #1
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] &= 0x1FFF;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	00db      	lsls	r3, r3, #3
 80114b8:	1c5a      	adds	r2, r3, #1
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114c0:	68fa      	ldr	r2, [r7, #12]
 80114c2:	00d2      	lsls	r2, r2, #3
 80114c4:	3201      	adds	r2, #1
 80114c6:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 80114d0:	68fa      	ldr	r2, [r7, #12]
 80114d2:	4613      	mov	r3, r2
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	4413      	add	r3, r2
 80114d8:	009b      	lsls	r3, r3, #2
 80114da:	4413      	add	r3, r2
 80114dc:	3303      	adds	r3, #3
 80114de:	683a      	ldr	r2, [r7, #0]
 80114e0:	4413      	add	r3, r2
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	089b      	lsrs	r3, r3, #2
 80114e6:	b2d9      	uxtb	r1, r3
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	00db      	lsls	r3, r3, #3
 80114ec:	1c9a      	adds	r2, r3, #2
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	00db      	lsls	r3, r3, #3
 80114f8:	1c9a      	adds	r2, r3, #2
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011500:	4619      	mov	r1, r3
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	4613      	mov	r3, r2
 8011506:	005b      	lsls	r3, r3, #1
 8011508:	4413      	add	r3, r2
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	4413      	add	r3, r2
 801150e:	3304      	adds	r3, #4
 8011510:	683a      	ldr	r2, [r7, #0]
 8011512:	4413      	add	r3, r2
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	019b      	lsls	r3, r3, #6
 8011518:	4319      	orrs	r1, r3
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	00db      	lsls	r3, r3, #3
 801151e:	1c9a      	adds	r2, r3, #2
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] &= 0x1FFF;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	1c9a      	adds	r2, r3, #2
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011532:	68fa      	ldr	r2, [r7, #12]
 8011534:	00d2      	lsls	r2, r2, #3
 8011536:	3202      	adds	r2, #2
 8011538:	f3c3 010c 	ubfx	r1, r3, #0, #13
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	4613      	mov	r3, r2
 8011546:	005b      	lsls	r3, r3, #1
 8011548:	4413      	add	r3, r2
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	4413      	add	r3, r2
 801154e:	3304      	adds	r3, #4
 8011550:	683a      	ldr	r2, [r7, #0]
 8011552:	4413      	add	r3, r2
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	09db      	lsrs	r3, r3, #7
 8011558:	b2d9      	uxtb	r1, r3
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	00db      	lsls	r3, r3, #3
 801155e:	1cda      	adds	r2, r3, #3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	00db      	lsls	r3, r3, #3
 801156a:	1cda      	adds	r2, r3, #3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011572:	4619      	mov	r1, r3
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	4613      	mov	r3, r2
 8011578:	005b      	lsls	r3, r3, #1
 801157a:	4413      	add	r3, r2
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	4413      	add	r3, r2
 8011580:	3305      	adds	r3, #5
 8011582:	683a      	ldr	r2, [r7, #0]
 8011584:	4413      	add	r3, r2
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	005b      	lsls	r3, r3, #1
 801158a:	4319      	orrs	r1, r3
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	00db      	lsls	r3, r3, #3
 8011590:	1cda      	adds	r2, r3, #3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	1cda      	adds	r2, r3, #3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115a4:	4619      	mov	r1, r3
 80115a6:	68fa      	ldr	r2, [r7, #12]
 80115a8:	4613      	mov	r3, r2
 80115aa:	005b      	lsls	r3, r3, #1
 80115ac:	4413      	add	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	4413      	add	r3, r2
 80115b2:	3306      	adds	r3, #6
 80115b4:	683a      	ldr	r2, [r7, #0]
 80115b6:	4413      	add	r3, r2
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	025b      	lsls	r3, r3, #9
 80115bc:	4319      	orrs	r1, r3
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	00db      	lsls	r3, r3, #3
 80115c2:	1cda      	adds	r2, r3, #3
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] &= 0x1FFF;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	00db      	lsls	r3, r3, #3
 80115ce:	1cda      	adds	r2, r3, #3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	00d2      	lsls	r2, r2, #3
 80115da:	3203      	adds	r2, #3
 80115dc:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 80115e6:	68fa      	ldr	r2, [r7, #12]
 80115e8:	4613      	mov	r3, r2
 80115ea:	005b      	lsls	r3, r3, #1
 80115ec:	4413      	add	r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4413      	add	r3, r2
 80115f2:	3306      	adds	r3, #6
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	4413      	add	r3, r2
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	091b      	lsrs	r3, r3, #4
 80115fc:	b2d9      	uxtb	r1, r3
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	00db      	lsls	r3, r3, #3
 8011602:	1d1a      	adds	r2, r3, #4
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	00db      	lsls	r3, r3, #3
 801160e:	1d1a      	adds	r2, r3, #4
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011616:	4619      	mov	r1, r3
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	4613      	mov	r3, r2
 801161c:	005b      	lsls	r3, r3, #1
 801161e:	4413      	add	r3, r2
 8011620:	009b      	lsls	r3, r3, #2
 8011622:	4413      	add	r3, r2
 8011624:	3307      	adds	r3, #7
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	4413      	add	r3, r2
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	011b      	lsls	r3, r3, #4
 801162e:	4319      	orrs	r1, r3
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	00db      	lsls	r3, r3, #3
 8011634:	1d1a      	adds	r2, r3, #4
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	00db      	lsls	r3, r3, #3
 8011640:	1d1a      	adds	r2, r3, #4
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011648:	4619      	mov	r1, r3
 801164a:	68fa      	ldr	r2, [r7, #12]
 801164c:	4613      	mov	r3, r2
 801164e:	005b      	lsls	r3, r3, #1
 8011650:	4413      	add	r3, r2
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	4413      	add	r3, r2
 8011656:	3308      	adds	r3, #8
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	4413      	add	r3, r2
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	031b      	lsls	r3, r3, #12
 8011660:	4319      	orrs	r1, r3
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	00db      	lsls	r3, r3, #3
 8011666:	1d1a      	adds	r2, r3, #4
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] &= 0x1FFF;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	00db      	lsls	r3, r3, #3
 8011672:	1d1a      	adds	r2, r3, #4
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	00d2      	lsls	r2, r2, #3
 801167e:	3204      	adds	r2, #4
 8011680:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	4613      	mov	r3, r2
 801168e:	005b      	lsls	r3, r3, #1
 8011690:	4413      	add	r3, r2
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	3308      	adds	r3, #8
 8011698:	683a      	ldr	r2, [r7, #0]
 801169a:	4413      	add	r3, r2
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	085b      	lsrs	r3, r3, #1
 80116a0:	b2d9      	uxtb	r1, r3
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	00db      	lsls	r3, r3, #3
 80116a6:	1d5a      	adds	r2, r3, #5
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	00db      	lsls	r3, r3, #3
 80116b2:	1d5a      	adds	r2, r3, #5
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ba:	4619      	mov	r1, r3
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	4613      	mov	r3, r2
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	4413      	add	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4413      	add	r3, r2
 80116c8:	3309      	adds	r3, #9
 80116ca:	683a      	ldr	r2, [r7, #0]
 80116cc:	4413      	add	r3, r2
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	01db      	lsls	r3, r3, #7
 80116d2:	4319      	orrs	r1, r3
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	00db      	lsls	r3, r3, #3
 80116d8:	1d5a      	adds	r2, r3, #5
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] &= 0x1FFF;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	00db      	lsls	r3, r3, #3
 80116e4:	1d5a      	adds	r2, r3, #5
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	00d2      	lsls	r2, r2, #3
 80116f0:	3205      	adds	r2, #5
 80116f2:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	4613      	mov	r3, r2
 8011700:	005b      	lsls	r3, r3, #1
 8011702:	4413      	add	r3, r2
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	4413      	add	r3, r2
 8011708:	3309      	adds	r3, #9
 801170a:	683a      	ldr	r2, [r7, #0]
 801170c:	4413      	add	r3, r2
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	099b      	lsrs	r3, r3, #6
 8011712:	b2d9      	uxtb	r1, r3
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	00db      	lsls	r3, r3, #3
 8011718:	1d9a      	adds	r2, r3, #6
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	00db      	lsls	r3, r3, #3
 8011724:	1d9a      	adds	r2, r3, #6
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801172c:	4619      	mov	r1, r3
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	4613      	mov	r3, r2
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	4413      	add	r3, r2
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	4413      	add	r3, r2
 801173a:	330a      	adds	r3, #10
 801173c:	683a      	ldr	r2, [r7, #0]
 801173e:	4413      	add	r3, r2
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	4319      	orrs	r1, r3
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	00db      	lsls	r3, r3, #3
 801174a:	1d9a      	adds	r2, r3, #6
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	00db      	lsls	r3, r3, #3
 8011756:	1d9a      	adds	r2, r3, #6
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801175e:	4619      	mov	r1, r3
 8011760:	68fa      	ldr	r2, [r7, #12]
 8011762:	4613      	mov	r3, r2
 8011764:	005b      	lsls	r3, r3, #1
 8011766:	4413      	add	r3, r2
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	4413      	add	r3, r2
 801176c:	330b      	adds	r3, #11
 801176e:	683a      	ldr	r2, [r7, #0]
 8011770:	4413      	add	r3, r2
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	029b      	lsls	r3, r3, #10
 8011776:	4319      	orrs	r1, r3
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	00db      	lsls	r3, r3, #3
 801177c:	1d9a      	adds	r2, r3, #6
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] &= 0x1FFF;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	00db      	lsls	r3, r3, #3
 8011788:	1d9a      	adds	r2, r3, #6
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011790:	68fa      	ldr	r2, [r7, #12]
 8011792:	00d2      	lsls	r2, r2, #3
 8011794:	3206      	adds	r2, #6
 8011796:	f3c3 010c 	ubfx	r1, r3, #0, #13
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 80117a0:	68fa      	ldr	r2, [r7, #12]
 80117a2:	4613      	mov	r3, r2
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	4413      	add	r3, r2
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	4413      	add	r3, r2
 80117ac:	330b      	adds	r3, #11
 80117ae:	683a      	ldr	r2, [r7, #0]
 80117b0:	4413      	add	r3, r2
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	08db      	lsrs	r3, r3, #3
 80117b6:	b2d9      	uxtb	r1, r3
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	00db      	lsls	r3, r3, #3
 80117bc:	1dda      	adds	r2, r3, #7
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	00db      	lsls	r3, r3, #3
 80117c8:	1dda      	adds	r2, r3, #7
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117d0:	4619      	mov	r1, r3
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	4613      	mov	r3, r2
 80117d6:	005b      	lsls	r3, r3, #1
 80117d8:	4413      	add	r3, r2
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	330c      	adds	r3, #12
 80117e0:	683a      	ldr	r2, [r7, #0]
 80117e2:	4413      	add	r3, r2
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	015b      	lsls	r3, r3, #5
 80117e8:	4319      	orrs	r1, r3
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	00db      	lsls	r3, r3, #3
 80117ee:	1dda      	adds	r2, r3, #7
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] &= 0x1FFF;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	00db      	lsls	r3, r3, #3
 80117fa:	1dda      	adds	r2, r3, #7
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	00d2      	lsls	r2, r2, #3
 8011806:	3207      	adds	r2, #7
 8011808:	f3c3 010c 	ubfx	r1, r3, #0, #13
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	00da      	lsls	r2, r3, #3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	00d2      	lsls	r2, r2, #3
 8011820:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	00d2      	lsls	r2, r2, #3
 801183a:	3201      	adds	r2, #1
 801183c:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	1c9a      	adds	r2, r3, #2
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	00d2      	lsls	r2, r2, #3
 8011856:	3202      	adds	r2, #2
 8011858:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	1cda      	adds	r2, r3, #3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	00d2      	lsls	r2, r2, #3
 8011872:	3203      	adds	r2, #3
 8011874:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	00db      	lsls	r3, r3, #3
 8011882:	1d1a      	adds	r2, r3, #4
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	00d2      	lsls	r2, r2, #3
 801188e:	3204      	adds	r2, #4
 8011890:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	00db      	lsls	r3, r3, #3
 801189e:	1d5a      	adds	r2, r3, #5
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	00d2      	lsls	r2, r2, #3
 80118aa:	3205      	adds	r2, #5
 80118ac:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	00db      	lsls	r3, r3, #3
 80118ba:	1d9a      	adds	r2, r3, #6
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	00d2      	lsls	r2, r2, #3
 80118c6:	3206      	adds	r2, #6
 80118c8:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	00db      	lsls	r3, r3, #3
 80118d6:	1dda      	adds	r2, r3, #7
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	00d2      	lsls	r2, r2, #3
 80118e2:	3207      	adds	r2, #7
 80118e4:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/8; ++i) {
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	3301      	adds	r3, #1
 80118f2:	60fb      	str	r3, [r7, #12]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2b1f      	cmp	r3, #31
 80118f8:	f67f ad67 	bls.w	80113ca <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 80118fc:	bf00      	nop
 80118fe:	bf00      	nop
 8011900:	3714      	adds	r7, #20
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr

0801190a <pqcrystals_dilithium2aes_r_ref_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 801190a:	b480      	push	{r7}
 801190c:	b089      	sub	sp, #36	; 0x24
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
 8011912:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8011914:	2300      	movs	r3, #0
 8011916:	61fb      	str	r3, [r7, #28]
 8011918:	e0cb      	b.n	8011ab2 <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x1a8>
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	009a      	lsls	r2, r3, #2
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011924:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8011928:	60fb      	str	r3, [r7, #12]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011936:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 801193a:	613b      	str	r3, [r7, #16]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	1c9a      	adds	r2, r3, #2
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011948:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 801194c:	617b      	str	r3, [r7, #20]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 801194e:	69fb      	ldr	r3, [r7, #28]
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	1cda      	adds	r2, r3, #3
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801195a:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 801195e:	61bb      	str	r3, [r7, #24]

    r[9*i+0]  = t[0];
 8011960:	68f9      	ldr	r1, [r7, #12]
 8011962:	69fa      	ldr	r2, [r7, #28]
 8011964:	4613      	mov	r3, r2
 8011966:	00db      	lsls	r3, r3, #3
 8011968:	4413      	add	r3, r2
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	4413      	add	r3, r2
 801196e:	b2ca      	uxtb	r2, r1
 8011970:	701a      	strb	r2, [r3, #0]
    r[9*i+1]  = t[0] >> 8;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	0a19      	lsrs	r1, r3, #8
 8011976:	69fa      	ldr	r2, [r7, #28]
 8011978:	4613      	mov	r3, r2
 801197a:	00db      	lsls	r3, r3, #3
 801197c:	4413      	add	r3, r2
 801197e:	3301      	adds	r3, #1
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	4413      	add	r3, r2
 8011984:	b2ca      	uxtb	r2, r1
 8011986:	701a      	strb	r2, [r3, #0]
    r[9*i+2]  = t[0] >> 16;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	0c19      	lsrs	r1, r3, #16
 801198c:	69fa      	ldr	r2, [r7, #28]
 801198e:	4613      	mov	r3, r2
 8011990:	00db      	lsls	r3, r3, #3
 8011992:	4413      	add	r3, r2
 8011994:	3302      	adds	r3, #2
 8011996:	687a      	ldr	r2, [r7, #4]
 8011998:	4413      	add	r3, r2
 801199a:	b2ca      	uxtb	r2, r1
 801199c:	701a      	strb	r2, [r3, #0]
    r[9*i+2] |= t[1] << 2;
 801199e:	69fa      	ldr	r2, [r7, #28]
 80119a0:	4613      	mov	r3, r2
 80119a2:	00db      	lsls	r3, r3, #3
 80119a4:	4413      	add	r3, r2
 80119a6:	3302      	adds	r3, #2
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	4413      	add	r3, r2
 80119ac:	7818      	ldrb	r0, [r3, #0]
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	b2d9      	uxtb	r1, r3
 80119b6:	69fa      	ldr	r2, [r7, #28]
 80119b8:	4613      	mov	r3, r2
 80119ba:	00db      	lsls	r3, r3, #3
 80119bc:	4413      	add	r3, r2
 80119be:	3302      	adds	r3, #2
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	4413      	add	r3, r2
 80119c4:	ea40 0201 	orr.w	r2, r0, r1
 80119c8:	b2d2      	uxtb	r2, r2
 80119ca:	701a      	strb	r2, [r3, #0]
    r[9*i+3]  = t[1] >> 6;
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	0999      	lsrs	r1, r3, #6
 80119d0:	69fa      	ldr	r2, [r7, #28]
 80119d2:	4613      	mov	r3, r2
 80119d4:	00db      	lsls	r3, r3, #3
 80119d6:	4413      	add	r3, r2
 80119d8:	3303      	adds	r3, #3
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	4413      	add	r3, r2
 80119de:	b2ca      	uxtb	r2, r1
 80119e0:	701a      	strb	r2, [r3, #0]
    r[9*i+4]  = t[1] >> 14;
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	0b99      	lsrs	r1, r3, #14
 80119e6:	69fa      	ldr	r2, [r7, #28]
 80119e8:	4613      	mov	r3, r2
 80119ea:	00db      	lsls	r3, r3, #3
 80119ec:	4413      	add	r3, r2
 80119ee:	3304      	adds	r3, #4
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	4413      	add	r3, r2
 80119f4:	b2ca      	uxtb	r2, r1
 80119f6:	701a      	strb	r2, [r3, #0]
    r[9*i+4] |= t[2] << 4;
 80119f8:	69fa      	ldr	r2, [r7, #28]
 80119fa:	4613      	mov	r3, r2
 80119fc:	00db      	lsls	r3, r3, #3
 80119fe:	4413      	add	r3, r2
 8011a00:	3304      	adds	r3, #4
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	4413      	add	r3, r2
 8011a06:	7818      	ldrb	r0, [r3, #0]
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	011b      	lsls	r3, r3, #4
 8011a0e:	b2d9      	uxtb	r1, r3
 8011a10:	69fa      	ldr	r2, [r7, #28]
 8011a12:	4613      	mov	r3, r2
 8011a14:	00db      	lsls	r3, r3, #3
 8011a16:	4413      	add	r3, r2
 8011a18:	3304      	adds	r3, #4
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	ea40 0201 	orr.w	r2, r0, r1
 8011a22:	b2d2      	uxtb	r2, r2
 8011a24:	701a      	strb	r2, [r3, #0]
    r[9*i+5]  = t[2] >> 4;
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	0919      	lsrs	r1, r3, #4
 8011a2a:	69fa      	ldr	r2, [r7, #28]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	00db      	lsls	r3, r3, #3
 8011a30:	4413      	add	r3, r2
 8011a32:	3305      	adds	r3, #5
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	4413      	add	r3, r2
 8011a38:	b2ca      	uxtb	r2, r1
 8011a3a:	701a      	strb	r2, [r3, #0]
    r[9*i+6]  = t[2] >> 12;
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	0b19      	lsrs	r1, r3, #12
 8011a40:	69fa      	ldr	r2, [r7, #28]
 8011a42:	4613      	mov	r3, r2
 8011a44:	00db      	lsls	r3, r3, #3
 8011a46:	4413      	add	r3, r2
 8011a48:	3306      	adds	r3, #6
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	b2ca      	uxtb	r2, r1
 8011a50:	701a      	strb	r2, [r3, #0]
    r[9*i+6] |= t[3] << 6;
 8011a52:	69fa      	ldr	r2, [r7, #28]
 8011a54:	4613      	mov	r3, r2
 8011a56:	00db      	lsls	r3, r3, #3
 8011a58:	4413      	add	r3, r2
 8011a5a:	3306      	adds	r3, #6
 8011a5c:	687a      	ldr	r2, [r7, #4]
 8011a5e:	4413      	add	r3, r2
 8011a60:	7818      	ldrb	r0, [r3, #0]
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	019b      	lsls	r3, r3, #6
 8011a68:	b2d9      	uxtb	r1, r3
 8011a6a:	69fa      	ldr	r2, [r7, #28]
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	4413      	add	r3, r2
 8011a72:	3306      	adds	r3, #6
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	4413      	add	r3, r2
 8011a78:	ea40 0201 	orr.w	r2, r0, r1
 8011a7c:	b2d2      	uxtb	r2, r2
 8011a7e:	701a      	strb	r2, [r3, #0]
    r[9*i+7]  = t[3] >> 2;
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	0899      	lsrs	r1, r3, #2
 8011a84:	69fa      	ldr	r2, [r7, #28]
 8011a86:	4613      	mov	r3, r2
 8011a88:	00db      	lsls	r3, r3, #3
 8011a8a:	4413      	add	r3, r2
 8011a8c:	3307      	adds	r3, #7
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	4413      	add	r3, r2
 8011a92:	b2ca      	uxtb	r2, r1
 8011a94:	701a      	strb	r2, [r3, #0]
    r[9*i+8]  = t[3] >> 10;
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	0a99      	lsrs	r1, r3, #10
 8011a9a:	69fa      	ldr	r2, [r7, #28]
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	00db      	lsls	r3, r3, #3
 8011aa0:	4413      	add	r3, r2
 8011aa2:	3308      	adds	r3, #8
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	b2ca      	uxtb	r2, r1
 8011aaa:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	61fb      	str	r3, [r7, #28]
 8011ab2:	69fb      	ldr	r3, [r7, #28]
 8011ab4:	2b3f      	cmp	r3, #63	; 0x3f
 8011ab6:	f67f af30 	bls.w	801191a <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x10>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8011aba:	bf00      	nop
 8011abc:	bf00      	nop
 8011abe:	3724      	adds	r7, #36	; 0x24
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <pqcrystals_dilithium2aes_r_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 8011ac8:	b480      	push	{r7}
 8011aca:	b085      	sub	sp, #20
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	60fb      	str	r3, [r7, #12]
 8011ad6:	e15e      	b.n	8011d96 <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	4613      	mov	r3, r2
 8011adc:	00db      	lsls	r3, r3, #3
 8011ade:	4413      	add	r3, r2
 8011ae0:	683a      	ldr	r2, [r7, #0]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	7819      	ldrb	r1, [r3, #0]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	009a      	lsls	r2, r3, #2
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	009a      	lsls	r2, r3, #2
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011afa:	4619      	mov	r1, r3
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	4613      	mov	r3, r2
 8011b00:	00db      	lsls	r3, r3, #3
 8011b02:	4413      	add	r3, r2
 8011b04:	3301      	adds	r3, #1
 8011b06:	683a      	ldr	r2, [r7, #0]
 8011b08:	4413      	add	r3, r2
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	021b      	lsls	r3, r3, #8
 8011b0e:	4319      	orrs	r1, r3
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	009a      	lsls	r2, r3, #2
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	009a      	lsls	r2, r3, #2
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b24:	4619      	mov	r1, r3
 8011b26:	68fa      	ldr	r2, [r7, #12]
 8011b28:	4613      	mov	r3, r2
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	4413      	add	r3, r2
 8011b2e:	3302      	adds	r3, #2
 8011b30:	683a      	ldr	r2, [r7, #0]
 8011b32:	4413      	add	r3, r2
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	041b      	lsls	r3, r3, #16
 8011b38:	4319      	orrs	r1, r3
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	009a      	lsls	r2, r3, #2
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	009a      	lsls	r2, r3, #2
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b4e:	68fa      	ldr	r2, [r7, #12]
 8011b50:	0092      	lsls	r2, r2, #2
 8011b52:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	00db      	lsls	r3, r3, #3
 8011b62:	4413      	add	r3, r2
 8011b64:	3302      	adds	r3, #2
 8011b66:	683a      	ldr	r2, [r7, #0]
 8011b68:	4413      	add	r3, r2
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	089b      	lsrs	r3, r3, #2
 8011b6e:	b2d9      	uxtb	r1, r3
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	1c5a      	adds	r2, r3, #1
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	009b      	lsls	r3, r3, #2
 8011b80:	1c5a      	adds	r2, r3, #1
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b88:	4619      	mov	r1, r3
 8011b8a:	68fa      	ldr	r2, [r7, #12]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	00db      	lsls	r3, r3, #3
 8011b90:	4413      	add	r3, r2
 8011b92:	3303      	adds	r3, #3
 8011b94:	683a      	ldr	r2, [r7, #0]
 8011b96:	4413      	add	r3, r2
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	019b      	lsls	r3, r3, #6
 8011b9c:	4319      	orrs	r1, r3
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	1c5a      	adds	r2, r3, #1
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	1c5a      	adds	r2, r3, #1
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	00db      	lsls	r3, r3, #3
 8011bbe:	4413      	add	r3, r2
 8011bc0:	3304      	adds	r3, #4
 8011bc2:	683a      	ldr	r2, [r7, #0]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	039b      	lsls	r3, r3, #14
 8011bca:	4319      	orrs	r1, r3
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	1c5a      	adds	r2, r3, #1
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	1c5a      	adds	r2, r3, #1
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011be4:	68fa      	ldr	r2, [r7, #12]
 8011be6:	0092      	lsls	r2, r2, #2
 8011be8:	3201      	adds	r2, #1
 8011bea:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	00db      	lsls	r3, r3, #3
 8011bfa:	4413      	add	r3, r2
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	683a      	ldr	r2, [r7, #0]
 8011c00:	4413      	add	r3, r2
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	091b      	lsrs	r3, r3, #4
 8011c06:	b2d9      	uxtb	r1, r3
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	1c9a      	adds	r2, r3, #2
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	1c9a      	adds	r2, r3, #2
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c20:	4619      	mov	r1, r3
 8011c22:	68fa      	ldr	r2, [r7, #12]
 8011c24:	4613      	mov	r3, r2
 8011c26:	00db      	lsls	r3, r3, #3
 8011c28:	4413      	add	r3, r2
 8011c2a:	3305      	adds	r3, #5
 8011c2c:	683a      	ldr	r2, [r7, #0]
 8011c2e:	4413      	add	r3, r2
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	011b      	lsls	r3, r3, #4
 8011c34:	4319      	orrs	r1, r3
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	1c9a      	adds	r2, r3, #2
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	1c9a      	adds	r2, r3, #2
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c4e:	4619      	mov	r1, r3
 8011c50:	68fa      	ldr	r2, [r7, #12]
 8011c52:	4613      	mov	r3, r2
 8011c54:	00db      	lsls	r3, r3, #3
 8011c56:	4413      	add	r3, r2
 8011c58:	3306      	adds	r3, #6
 8011c5a:	683a      	ldr	r2, [r7, #0]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	031b      	lsls	r3, r3, #12
 8011c62:	4319      	orrs	r1, r3
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	009b      	lsls	r3, r3, #2
 8011c68:	1c9a      	adds	r2, r3, #2
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	1c9a      	adds	r2, r3, #2
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c7c:	68fa      	ldr	r2, [r7, #12]
 8011c7e:	0092      	lsls	r2, r2, #2
 8011c80:	3202      	adds	r2, #2
 8011c82:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	00db      	lsls	r3, r3, #3
 8011c92:	4413      	add	r3, r2
 8011c94:	3306      	adds	r3, #6
 8011c96:	683a      	ldr	r2, [r7, #0]
 8011c98:	4413      	add	r3, r2
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	099b      	lsrs	r3, r3, #6
 8011c9e:	b2d9      	uxtb	r1, r3
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	1cda      	adds	r2, r3, #3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	1cda      	adds	r2, r3, #3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cb8:	4619      	mov	r1, r3
 8011cba:	68fa      	ldr	r2, [r7, #12]
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	00db      	lsls	r3, r3, #3
 8011cc0:	4413      	add	r3, r2
 8011cc2:	3307      	adds	r3, #7
 8011cc4:	683a      	ldr	r2, [r7, #0]
 8011cc6:	4413      	add	r3, r2
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	4319      	orrs	r1, r3
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	1cda      	adds	r2, r3, #3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	1cda      	adds	r2, r3, #3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	4613      	mov	r3, r2
 8011cec:	00db      	lsls	r3, r3, #3
 8011cee:	4413      	add	r3, r2
 8011cf0:	3308      	adds	r3, #8
 8011cf2:	683a      	ldr	r2, [r7, #0]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	029b      	lsls	r3, r3, #10
 8011cfa:	4319      	orrs	r1, r3
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	009b      	lsls	r3, r3, #2
 8011d00:	1cda      	adds	r2, r3, #3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	1cda      	adds	r2, r3, #3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	0092      	lsls	r2, r2, #2
 8011d18:	3203      	adds	r2, #3
 8011d1a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	009a      	lsls	r2, r3, #2
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	0092      	lsls	r2, r2, #2
 8011d32:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	1c5a      	adds	r2, r3, #1
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	0092      	lsls	r2, r2, #2
 8011d4c:	3201      	adds	r2, #1
 8011d4e:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	1c9a      	adds	r2, r3, #2
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	0092      	lsls	r2, r2, #2
 8011d68:	3202      	adds	r2, #2
 8011d6a:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	1cda      	adds	r2, r3, #3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	0092      	lsls	r2, r2, #2
 8011d84:	3203      	adds	r2, #3
 8011d86:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	3301      	adds	r3, #1
 8011d94:	60fb      	str	r3, [r7, #12]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2b3f      	cmp	r3, #63	; 0x3f
 8011d9a:	f67f ae9d 	bls.w	8011ad8 <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8011d9e:	bf00      	nop
 8011da0:	bf00      	nop
 8011da2:	3714      	adds	r7, #20
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <pqcrystals_dilithium2aes_r_ref_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 8011dac:	b480      	push	{r7}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q_-1)/88
  for(i = 0; i < N_/4; ++i) {
 8011db6:	2300      	movs	r3, #0
 8011db8:	60fb      	str	r3, [r7, #12]
 8011dba:	e081      	b.n	8011ec0 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x114>
    r[3*i+0]  = a->coeffs[4*i+0];
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	009a      	lsls	r2, r3, #2
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011dc6:	68fa      	ldr	r2, [r7, #12]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	005b      	lsls	r3, r3, #1
 8011dcc:	4413      	add	r3, r2
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	b2ca      	uxtb	r2, r1
 8011dd4:	701a      	strb	r2, [r3, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	4613      	mov	r3, r2
 8011dda:	005b      	lsls	r3, r3, #1
 8011ddc:	4413      	add	r3, r2
 8011dde:	687a      	ldr	r2, [r7, #4]
 8011de0:	4413      	add	r3, r2
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	b25a      	sxtb	r2, r3
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	1c59      	adds	r1, r3, #1
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011df2:	019b      	lsls	r3, r3, #6
 8011df4:	b25b      	sxtb	r3, r3
 8011df6:	4313      	orrs	r3, r2
 8011df8:	b259      	sxtb	r1, r3
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	4413      	add	r3, r2
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	4413      	add	r3, r2
 8011e06:	b2ca      	uxtb	r2, r1
 8011e08:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	1c5a      	adds	r2, r3, #1
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e16:	1099      	asrs	r1, r3, #2
 8011e18:	68fa      	ldr	r2, [r7, #12]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	005b      	lsls	r3, r3, #1
 8011e1e:	4413      	add	r3, r2
 8011e20:	3301      	adds	r3, #1
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	4413      	add	r3, r2
 8011e26:	b2ca      	uxtb	r2, r1
 8011e28:	701a      	strb	r2, [r3, #0]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8011e2a:	68fa      	ldr	r2, [r7, #12]
 8011e2c:	4613      	mov	r3, r2
 8011e2e:	005b      	lsls	r3, r3, #1
 8011e30:	4413      	add	r3, r2
 8011e32:	3301      	adds	r3, #1
 8011e34:	687a      	ldr	r2, [r7, #4]
 8011e36:	4413      	add	r3, r2
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	b25a      	sxtb	r2, r3
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	009b      	lsls	r3, r3, #2
 8011e40:	1c99      	adds	r1, r3, #2
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e48:	011b      	lsls	r3, r3, #4
 8011e4a:	b25b      	sxtb	r3, r3
 8011e4c:	4313      	orrs	r3, r2
 8011e4e:	b259      	sxtb	r1, r3
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	4613      	mov	r3, r2
 8011e54:	005b      	lsls	r3, r3, #1
 8011e56:	4413      	add	r3, r2
 8011e58:	3301      	adds	r3, #1
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	b2ca      	uxtb	r2, r1
 8011e60:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	1c9a      	adds	r2, r3, #2
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e6e:	1119      	asrs	r1, r3, #4
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	4613      	mov	r3, r2
 8011e74:	005b      	lsls	r3, r3, #1
 8011e76:	4413      	add	r3, r2
 8011e78:	3302      	adds	r3, #2
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	b2ca      	uxtb	r2, r1
 8011e80:	701a      	strb	r2, [r3, #0]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	4613      	mov	r3, r2
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	4413      	add	r3, r2
 8011e8a:	3302      	adds	r3, #2
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	4413      	add	r3, r2
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	b25a      	sxtb	r2, r3
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	1cd9      	adds	r1, r3, #3
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	b25b      	sxtb	r3, r3
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	b259      	sxtb	r1, r3
 8011ea8:	68fa      	ldr	r2, [r7, #12]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	4413      	add	r3, r2
 8011eb0:	3302      	adds	r3, #2
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	b2ca      	uxtb	r2, r1
 8011eb8:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	60fb      	str	r3, [r7, #12]
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8011ec4:	f67f af7a 	bls.w	8011dbc <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x10>
  for(i = 0; i < N_/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 8011ec8:	bf00      	nop
 8011eca:	bf00      	nop
 8011ecc:	3714      	adds	r7, #20
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <polyvec_matrix_poly_smul_montgomery>:
*
* Arguments:   - polyveck t: output vector after multiplication of A*s1+s2
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors s1 and s2
**************************************************/
void polyvec_matrix_poly_smul_montgomery(polyveck* t, const uint8_t rho[], const uint8_t rhoprime[]) {
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8011edc:	b086      	sub	sp, #24
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	f107 0318 	add.w	r3, r7, #24
 8011ee4:	f843 0c0c 	str.w	r0, [r3, #-12]
 8011ee8:	f107 0318 	add.w	r3, r7, #24
 8011eec:	f843 1c10 	str.w	r1, [r3, #-16]
 8011ef0:	f107 0318 	add.w	r3, r7, #24
 8011ef4:	f843 2c14 	str.w	r2, [r3, #-20]
	poly acc;
	poly a_ij;
	poly s1_j;
	poly s2_j;

	for (i = 0; i < K; ++i) {
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011efe:	f102 0214 	add.w	r2, r2, #20
 8011f02:	6013      	str	r3, [r2, #0]
 8011f04:	e09d      	b.n	8012042 <polyvec_matrix_poly_smul_montgomery+0x16c>
		memset(&acc, 0, sizeof(acc));
 8011f06:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8011f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011f0e:	2100      	movs	r1, #0
 8011f10:	4618      	mov	r0, r3
 8011f12:	f001 fb8d 	bl	8013630 <memset>
		for (j = 0; j < L; ++j) {
 8011f16:	2300      	movs	r3, #0
 8011f18:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011f1c:	f102 0210 	add.w	r2, r2, #16
 8011f20:	6013      	str	r3, [r2, #0]
 8011f22:	e04b      	b.n	8011fbc <polyvec_matrix_poly_smul_montgomery+0xe6>
			poly_uniform(&a_ij, rho, (i << 8) + j); // generate A[i][j]
 8011f24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011f28:	f103 0314 	add.w	r3, r3, #20
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	021b      	lsls	r3, r3, #8
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011f38:	f103 0310 	add.w	r3, r3, #16
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	4413      	add	r3, r2
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	f107 0318 	add.w	r3, r7, #24
 8011f48:	4619      	mov	r1, r3
 8011f4a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8011f4e:	f851 1c10 	ldr.w	r1, [r1, #-16]
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fe fcde 	bl	8010914 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
		    for(int k = 0; k < N_; k++){
		    	USB_DEBUG_MSG("%d", a_ij.coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
			poly_uniform_eta(&s1_j, rhoprime, j);		// generate s1[j]
 8011f58:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011f5c:	f103 0310 	add.w	r3, r3, #16
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	b29a      	uxth	r2, r3
 8011f64:	f107 0318 	add.w	r3, r7, #24
 8011f68:	4619      	mov	r1, r3
 8011f6a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011f6e:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fe fddf 	bl	8010b36 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		    for(int k = 0; k < N_; k++){
		    	USB_DEBUG_MSG("%d", s1_j.coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
			poly_ntt(&s1_j);						// transform s1[j] to ntt
 8011f78:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fe fb60 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &s1_j); // multiply A[i][j] on s1[j]
 8011f82:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8011f86:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8011f8a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fe fb6f 	bl	8010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&acc, &acc, &a_ij);
 8011f94:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8011f98:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 8011f9c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fe faeb 	bl	801057c <pqcrystals_dilithium2aes_r_ref_poly_add>
		for (j = 0; j < L; ++j) {
 8011fa6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011faa:	f103 0310 	add.w	r3, r3, #16
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011fb6:	f102 0210 	add.w	r2, r2, #16
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011fc0:	f103 0310 	add.w	r3, r3, #16
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b03      	cmp	r3, #3
 8011fc8:	d9ac      	bls.n	8011f24 <polyvec_matrix_poly_smul_montgomery+0x4e>
		}
		poly_reduce(&acc);
 8011fca:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7fe fa98 	bl	8010504 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&acc); // invert accumulated result from ntt
 8011fd4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7fe fb3e 	bl	801065a <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
		poly_uniform_eta(&s2_j, rhoprime, L + i); // generate s2[j]
 8011fde:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011fe2:	f103 0314 	add.w	r3, r3, #20
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	3304      	adds	r3, #4
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	f107 0318 	add.w	r3, r7, #24
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	f107 0318 	add.w	r3, r7, #24
 8011ff8:	3b08      	subs	r3, #8
 8011ffa:	f851 1c14 	ldr.w	r1, [r1, #-20]
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7fe fd99 	bl	8010b36 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		    for(int k = 0; k < N_; k++){
		    	USB_DEBUG_MSG("%d", s2_j.coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
		poly_add(&t->vec[i], &acc, &s2_j);	// add accumulator and s2[j]
 8012004:	f107 0318 	add.w	r3, r7, #24
 8012008:	461a      	mov	r2, r3
 801200a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801200e:	f103 0314 	add.w	r3, r3, #20
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	029b      	lsls	r3, r3, #10
 8012016:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801201a:	18d0      	adds	r0, r2, r3
 801201c:	f107 0318 	add.w	r3, r7, #24
 8012020:	3b08      	subs	r3, #8
 8012022:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 8012026:	461a      	mov	r2, r3
 8012028:	f7fe faa8 	bl	801057c <pqcrystals_dilithium2aes_r_ref_poly_add>
	for (i = 0; i < K; ++i) {
 801202c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012030:	f103 0314 	add.w	r3, r3, #20
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	3301      	adds	r3, #1
 8012038:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801203c:	f102 0214 	add.w	r2, r2, #20
 8012040:	6013      	str	r3, [r2, #0]
 8012042:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012046:	f103 0314 	add.w	r3, r3, #20
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b03      	cmp	r3, #3
 801204e:	f67f af5a 	bls.w	8011f06 <polyvec_matrix_poly_smul_montgomery+0x30>
	}
}
 8012052:	bf00      	nop
 8012054:	bf00      	nop
 8012056:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 801205a:	3718      	adds	r7, #24
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <polyvec_matrix_poly_ymul_montgomery>:
*
* Arguments:   - polyveck w: output vector after multiplication of A*y
*              - const uint8_t rho[]: byte array containing seed rho for matrix
*              - const uint8_t rhoprime[]: byte array containing seed rhoprime for vectors y
**************************************************/
void polyvec_matrix_poly_ymul_montgomery(polyveck* w, const uint8_t rho[], const uint8_t rhoprime[], uint16_t nonce) {
 8012060:	b590      	push	{r4, r7, lr}
 8012062:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8012066:	af00      	add	r7, sp, #0
 8012068:	f607 0418 	addw	r4, r7, #2072	; 0x818
 801206c:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 8012070:	6020      	str	r0, [r4, #0]
 8012072:	f607 0018 	addw	r0, r7, #2072	; 0x818
 8012076:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 801207a:	6001      	str	r1, [r0, #0]
 801207c:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8012080:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 8012084:	600a      	str	r2, [r1, #0]
 8012086:	461a      	mov	r2, r3
 8012088:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801208c:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 8012090:	801a      	strh	r2, [r3, #0]
	unsigned int i, j;
	poly a_ij;
	poly y_j;
	for (i = 0; i < K; ++i) {
 8012092:	2300      	movs	r3, #0
 8012094:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8012098:	e085      	b.n	80121a6 <polyvec_matrix_poly_ymul_montgomery+0x146>
		memset(&w->vec[i], 0, sizeof(uint32_t) * N_);
 801209a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801209e:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 80120a2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80120a6:	029b      	lsls	r3, r3, #10
 80120a8:	6812      	ldr	r2, [r2, #0]
 80120aa:	4413      	add	r3, r2
 80120ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80120b0:	2100      	movs	r1, #0
 80120b2:	4618      	mov	r0, r3
 80120b4:	f001 fabc 	bl	8013630 <memset>
		for (j = 0; j < L; ++j) {
 80120b8:	2300      	movs	r3, #0
 80120ba:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 80120be:	e051      	b.n	8012164 <polyvec_matrix_poly_ymul_montgomery+0x104>
			poly_uniform(&a_ij, rho, (i << 8) + j); 		// generate A[i][j]
 80120c0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	021b      	lsls	r3, r3, #8
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	4413      	add	r3, r2
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80120d8:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 80120dc:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 80120e0:	6819      	ldr	r1, [r3, #0]
 80120e2:	f7fe fc17 	bl	8010914 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
		    for(int k = 0; k < N_; k++){
		    	USB_DEBUG_MSG("%d", a_ij.coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
			poly_uniform_gamma1(&y_j, rhoprime, L * nonce + j);	// generate y[j]
 80120e6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80120ea:	f6a3 0316 	subw	r3, r3, #2070	; 0x816
 80120ee:	881b      	ldrh	r3, [r3, #0]
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	4413      	add	r3, r2
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8012102:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8012106:	f107 0010 	add.w	r0, r7, #16
 801210a:	6819      	ldr	r1, [r3, #0]
 801210c:	f7fe fd66 	bl	8010bdc <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
		    for(int k = 0; k < N_; k++){
		    	USB_DEBUG_MSG("%d", y_j.coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
			poly_ntt(&y_j);										// transform y[j] to ntt
 8012110:	f107 0310 	add.w	r3, r7, #16
 8012114:	4618      	mov	r0, r3
 8012116:	f7fe fa94 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			poly_pointwise_montgomery(&a_ij, &a_ij, &y_j); // multiply A[i][j] on y[j]
 801211a:	f107 0210 	add.w	r2, r7, #16
 801211e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8012122:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012126:	4618      	mov	r0, r3
 8012128:	f7fe faa3 	bl	8010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&w->vec[i], &w->vec[i], &a_ij);
 801212c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8012130:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8012134:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8012138:	029b      	lsls	r3, r3, #10
 801213a:	6812      	ldr	r2, [r2, #0]
 801213c:	18d0      	adds	r0, r2, r3
 801213e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8012142:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8012146:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 801214a:	029b      	lsls	r3, r3, #10
 801214c:	6812      	ldr	r2, [r2, #0]
 801214e:	4413      	add	r3, r2
 8012150:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8012154:	4619      	mov	r1, r3
 8012156:	f7fe fa11 	bl	801057c <pqcrystals_dilithium2aes_r_ref_poly_add>
		for (j = 0; j < L; ++j) {
 801215a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 801215e:	3301      	adds	r3, #1
 8012160:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8012164:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8012168:	2b03      	cmp	r3, #3
 801216a:	d9a9      	bls.n	80120c0 <polyvec_matrix_poly_ymul_montgomery+0x60>
		}
		poly_reduce(&w->vec[i]);
 801216c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8012170:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8012174:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8012178:	029b      	lsls	r3, r3, #10
 801217a:	6812      	ldr	r2, [r2, #0]
 801217c:	4413      	add	r3, r2
 801217e:	4618      	mov	r0, r3
 8012180:	f7fe f9c0 	bl	8010504 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&w->vec[i]); // invert accumulated result from ntt
 8012184:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8012188:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 801218c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8012190:	029b      	lsls	r3, r3, #10
 8012192:	6812      	ldr	r2, [r2, #0]
 8012194:	4413      	add	r3, r2
 8012196:	4618      	mov	r0, r3
 8012198:	f7fe fa5f 	bl	801065a <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	for (i = 0; i < K; ++i) {
 801219c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80121a0:	3301      	adds	r3, #1
 80121a2:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80121a6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80121aa:	2b03      	cmp	r3, #3
 80121ac:	f67f af75 	bls.w	801209a <polyvec_matrix_poly_ymul_montgomery+0x3a>
		    	USB_DEBUG_MSG("%d", w->vec[i].coeffs[k]);
		    }
		    USB_DEBUG_MSG("\r\n");
#endif
	}
}
 80121b0:	bf00      	nop
 80121b2:	bf00      	nop
 80121b4:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd90      	pop	{r4, r7, pc}

080121bc <polyvec_compute_z_montgomery>:
* Arguments:   - polyvecl z: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s1
*              - const uint8_t y_rhoprime[]: byte array containing seed for vector y
**************************************************/
void polyvec_compute_z_montgomery(polyvecl* z, const poly* cp, const uint8_t s_rhoprime[], const uint8_t y_rhoprime[], uint16_t nonce) {
 80121bc:	b590      	push	{r4, r7, lr}
 80121be:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	f607 0418 	addw	r4, r7, #2072	; 0x818
 80121c8:	f6a4 040c 	subw	r4, r4, #2060	; 0x80c
 80121cc:	6020      	str	r0, [r4, #0]
 80121ce:	f607 0018 	addw	r0, r7, #2072	; 0x818
 80121d2:	f5a0 6001 	sub.w	r0, r0, #2064	; 0x810
 80121d6:	6001      	str	r1, [r0, #0]
 80121d8:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80121dc:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 80121e0:	600a      	str	r2, [r1, #0]
 80121e2:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80121e6:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 80121ea:	6013      	str	r3, [r2, #0]
	unsigned int j;
	poly s1_j;
	poly y_j;

	for (j = 0; j < L; ++j) {
 80121ec:	2300      	movs	r3, #0
 80121ee:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80121f2:	e053      	b.n	801229c <polyvec_compute_z_montgomery+0xe0>
		poly_uniform_eta(&s1_j, s_rhoprime, j);		// generate s1[j]
 80121f4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80121fe:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8012202:	f207 4014 	addw	r0, r7, #1044	; 0x414
 8012206:	6819      	ldr	r1, [r3, #0]
 8012208:	f7fe fc95 	bl	8010b36 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		for(int k = 0; k < N_; k++){
			USB_DEBUG_MSG("%d", s1_j.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_ntt(&s1_j);								// transform s1[j] to ntt
 801220c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8012210:	4618      	mov	r0, r3
 8012212:	f7fe fa16 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		poly_uniform_gamma1(&y_j, y_rhoprime, L * nonce + j);	// generate y[j]; nonce == j
 8012216:	f8b7 3828 	ldrh.w	r3, [r7, #2088]	; 0x828
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	b29a      	uxth	r2, r3
 801221e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8012222:	b29b      	uxth	r3, r3
 8012224:	4413      	add	r3, r2
 8012226:	b29a      	uxth	r2, r3
 8012228:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801222c:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8012230:	f107 0014 	add.w	r0, r7, #20
 8012234:	6819      	ldr	r1, [r3, #0]
 8012236:	f7fe fcd1 	bl	8010bdc <pqcrystals_dilithium2aes_r_ref_poly_uniform_gamma1>
		for(int k = 0; k < N_; k++){
			USB_DEBUG_MSG("%d", y_j.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_pointwise_montgomery(&s1_j, cp, &s1_j); // multiply cp on s1[j]
 801223a:	f207 4214 	addw	r2, r7, #1044	; 0x414
 801223e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8012242:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8012246:	f207 4014 	addw	r0, r7, #1044	; 0x414
 801224a:	6819      	ldr	r1, [r3, #0]
 801224c:	f7fe fa11 	bl	8010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		poly_invntt_tomont(&s1_j);					// invert multiplication result
 8012250:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8012254:	4618      	mov	r0, r3
 8012256:	f7fe fa00 	bl	801065a <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>

		poly_add(&z->vec[j], &y_j, &s1_j);			// z = y + cp*s1.
 801225a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801225e:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8012262:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8012266:	029b      	lsls	r3, r3, #10
 8012268:	6812      	ldr	r2, [r2, #0]
 801226a:	4413      	add	r3, r2
 801226c:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8012270:	f107 0114 	add.w	r1, r7, #20
 8012274:	4618      	mov	r0, r3
 8012276:	f7fe f981 	bl	801057c <pqcrystals_dilithium2aes_r_ref_poly_add>
		poly_reduce(&z->vec[j]);
 801227a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801227e:	f6a3 020c 	subw	r2, r3, #2060	; 0x80c
 8012282:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8012286:	029b      	lsls	r3, r3, #10
 8012288:	6812      	ldr	r2, [r2, #0]
 801228a:	4413      	add	r3, r2
 801228c:	4618      	mov	r0, r3
 801228e:	f7fe f939 	bl	8010504 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
	for (j = 0; j < L; ++j) {
 8012292:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8012296:	3301      	adds	r3, #1
 8012298:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 801229c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80122a0:	2b03      	cmp	r3, #3
 80122a2:	d9a7      	bls.n	80121f4 <polyvec_compute_z_montgomery+0x38>
			USB_DEBUG_MSG("%d", z->vec[j].coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
	}
}
 80122a4:	bf00      	nop
 80122a6:	bf00      	nop
 80122a8:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd90      	pop	{r4, r7, pc}

080122b0 <polyvec_compute_h_montgomery>:
*
* Arguments:   - polyveck h: output vector
* 			   - const poly *cp: challenge polynomial in ntt form
*              - const uint8_t s_rhoprime[]: byte array containing seed for vector s2
**************************************************/
void polyvec_compute_h_montgomery(polyveck* h, const poly* cp, const uint8_t s_rhoprime[]) {
 80122b0:	b580      	push	{r7, lr}
 80122b2:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80122bc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80122c0:	6018      	str	r0, [r3, #0]
 80122c2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80122c6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80122ca:	6019      	str	r1, [r3, #0]
 80122cc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80122d0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80122d4:	601a      	str	r2, [r3, #0]
	unsigned int j;
	poly s2_j;

	for (j = 0; j < K; ++j) {
 80122d6:	2300      	movs	r3, #0
 80122d8:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80122dc:	e035      	b.n	801234a <polyvec_compute_h_montgomery+0x9a>
		poly_uniform_eta(&s2_j, s_rhoprime, L + j);		// generate s2[j]
 80122de:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	3304      	adds	r3, #4
 80122e6:	b29a      	uxth	r2, r3
 80122e8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80122ec:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80122f0:	f107 0014 	add.w	r0, r7, #20
 80122f4:	6819      	ldr	r1, [r3, #0]
 80122f6:	f7fe fc1e 	bl	8010b36 <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
		for(int k = 0; k < N_; k++){
			USB_DEBUG_MSG("%d", s2_j.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_ntt(&s2_j);								// transform s2[j] to ntt
 80122fa:	f107 0314 	add.w	r3, r7, #20
 80122fe:	4618      	mov	r0, r3
 8012300:	f7fe f99f 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		poly_pointwise_montgomery(&h->vec[j], cp, &s2_j); // h_j = cp*s2_j
 8012304:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8012308:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 801230c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8012310:	029b      	lsls	r3, r3, #10
 8012312:	6812      	ldr	r2, [r2, #0]
 8012314:	18d0      	adds	r0, r2, r3
 8012316:	f107 0214 	add.w	r2, r7, #20
 801231a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801231e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8012322:	6819      	ldr	r1, [r3, #0]
 8012324:	f7fe f9a5 	bl	8010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
		poly_invntt_tomont(&h->vec[j]);					// invert multiplication result
 8012328:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801232c:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8012330:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8012334:	029b      	lsls	r3, r3, #10
 8012336:	6812      	ldr	r2, [r2, #0]
 8012338:	4413      	add	r3, r2
 801233a:	4618      	mov	r0, r3
 801233c:	f7fe f98d 	bl	801065a <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	for (j = 0; j < K; ++j) {
 8012340:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8012344:	3301      	adds	r3, #1
 8012346:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 801234a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801234e:	2b03      	cmp	r3, #3
 8012350:	d9c5      	bls.n	80122de <polyvec_compute_h_montgomery+0x2e>
			USB_DEBUG_MSG("%d", h->vec[j].coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
	}
}
 8012352:	bf00      	nop
 8012354:	bf00      	nop
 8012356:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <polyvec_reconstruct_w1_montgomery>:
* Arguments:   - polyveck *w: output vector
* 			   - const uint8_t sig[CRYPTO_BYTES]: signature
* 			   - const uint8_t pk[CRYPTO_PUBLICKEYBYTES]: public key
*
**************************************************/
void polyvec_reconstruct_w1_montgomery(polyveck* w, const uint8_t sig[CRYPTO_BYTES], const uint8_t pk[CRYPTO_PUBLICKEYBYTES]) {
 801235e:	b580      	push	{r7, lr}
 8012360:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8012364:	b086      	sub	sp, #24
 8012366:	af00      	add	r7, sp, #0
 8012368:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801236c:	f843 0c4c 	str.w	r0, [r3, #-76]
 8012370:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012374:	f843 1c50 	str.w	r1, [r3, #-80]
 8012378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801237c:	f843 2c54 	str.w	r2, [r3, #-84]
	poly cp;
	poly a_ij;
	poly z_j;
	poly t1_i;

	unpack_pk_rho(rho, pk);
 8012380:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012384:	461a      	mov	r2, r3
 8012386:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801238a:	f103 0310 	add.w	r3, r3, #16
 801238e:	f852 1c54 	ldr.w	r1, [r2, #-84]
 8012392:	4618      	mov	r0, r3
 8012394:	f7fe f883 	bl	801049e <unpack_pk_rho>
	unpack_sig_c(c, sig);
 8012398:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801239c:	461a      	mov	r2, r3
 801239e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123a2:	f103 0310 	add.w	r3, r3, #16
 80123a6:	f852 1c50 	ldr.w	r1, [r2, #-80]
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fe f844 	bl	8010438 <unpack_sig_c>
	poly_challenge(&cp, c);
 80123b0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80123b4:	f102 0210 	add.w	r2, r2, #16
 80123b8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fe fc51 	bl	8010c66 <pqcrystals_dilithium2aes_r_ref_poly_challenge>
	poly_ntt(&cp);
 80123c4:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fe f93a 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
        USB_DEBUG_MSG("%d",rho[k]);
    }
    USB_DEBUG_MSG("\r\n");
#endif

	for (i = 0; i < K; ++i) {
 80123ce:	2300      	movs	r3, #0
 80123d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80123d4:	f102 0214 	add.w	r2, r2, #20
 80123d8:	6013      	str	r3, [r2, #0]
 80123da:	e0eb      	b.n	80125b4 <polyvec_reconstruct_w1_montgomery+0x256>
		memset(&w->vec[i], 0, sizeof(uint32_t) * N_);
 80123dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80123e0:	461a      	mov	r2, r3
 80123e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80123e6:	f103 0314 	add.w	r3, r3, #20
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	029b      	lsls	r3, r3, #10
 80123ee:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80123f2:	4413      	add	r3, r2
 80123f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80123f8:	2100      	movs	r1, #0
 80123fa:	4618      	mov	r0, r3
 80123fc:	f001 f918 	bl	8013630 <memset>
		for (j = 0; j < L; ++j) {
 8012400:	2300      	movs	r3, #0
 8012402:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8012406:	f102 0210 	add.w	r2, r2, #16
 801240a:	6013      	str	r3, [r2, #0]
 801240c:	e05d      	b.n	80124ca <polyvec_reconstruct_w1_montgomery+0x16c>
			poly_uniform(&a_ij, rho, (i << 8) + j); 		// generate A[i][j]
 801240e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8012412:	f103 0314 	add.w	r3, r3, #20
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	b29b      	uxth	r3, r3
 801241a:	021b      	lsls	r3, r3, #8
 801241c:	b29a      	uxth	r2, r3
 801241e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8012422:	f103 0310 	add.w	r3, r3, #16
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	b29b      	uxth	r3, r3
 801242a:	4413      	add	r3, r2
 801242c:	b29a      	uxth	r2, r3
 801242e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8012432:	f101 0110 	add.w	r1, r1, #16
 8012436:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801243a:	4618      	mov	r0, r3
 801243c:	f7fe fa6a 	bl	8010914 <pqcrystals_dilithium2aes_r_ref_poly_uniform>
			unpack_sig_z(&z_j, j, sig);						// extract z_j from signature
 8012440:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012444:	461a      	mov	r2, r3
 8012446:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801244a:	f852 2c50 	ldr.w	r2, [r2, #-80]
 801244e:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8012452:	f101 0110 	add.w	r1, r1, #16
 8012456:	6809      	ldr	r1, [r1, #0]
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe f80a 	bl	8010472 <unpack_sig_z>
			poly_ntt(&z_j);									// transform z[j] to ntt
 801245e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8012462:	4618      	mov	r0, r3
 8012464:	f7fe f8ed 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
			for (int k = 0; k < N_; k++) {
				USB_DEBUG_MSG("%d", z_j.coeffs[k]);
			}
			USB_DEBUG_MSG("\r\n");
#endif
			poly_pointwise_montgomery(&a_ij, &a_ij, &z_j);  // multiply A[i][j] on z[j]
 8012468:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801246c:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8012470:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8012474:	4618      	mov	r0, r3
 8012476:	f7fe f8fc 	bl	8010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
			poly_add(&w->vec[i], &w->vec[i], &a_ij);		// accumulate result
 801247a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801247e:	461a      	mov	r2, r3
 8012480:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8012484:	f103 0314 	add.w	r3, r3, #20
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	029b      	lsls	r3, r3, #10
 801248c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8012490:	18d0      	adds	r0, r2, r3
 8012492:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012496:	461a      	mov	r2, r3
 8012498:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801249c:	f103 0314 	add.w	r3, r3, #20
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	029b      	lsls	r3, r3, #10
 80124a4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80124a8:	4413      	add	r3, r2
 80124aa:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80124ae:	4619      	mov	r1, r3
 80124b0:	f7fe f864 	bl	801057c <pqcrystals_dilithium2aes_r_ref_poly_add>
		for (j = 0; j < L; ++j) {
 80124b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80124b8:	f103 0310 	add.w	r3, r3, #16
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	3301      	adds	r3, #1
 80124c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80124c4:	f102 0210 	add.w	r2, r2, #16
 80124c8:	6013      	str	r3, [r2, #0]
 80124ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80124ce:	f103 0310 	add.w	r3, r3, #16
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b03      	cmp	r3, #3
 80124d6:	d99a      	bls.n	801240e <polyvec_reconstruct_w1_montgomery+0xb0>
		}
		// compute c*2^d*t1
		unpack_pk_t1(&t1_i, i, pk);
 80124d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80124dc:	461a      	mov	r2, r3
 80124de:	f107 0318 	add.w	r3, r7, #24
 80124e2:	3b08      	subs	r3, #8
 80124e4:	f852 2c54 	ldr.w	r2, [r2, #-84]
 80124e8:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80124ec:	f101 0114 	add.w	r1, r1, #20
 80124f0:	6809      	ldr	r1, [r1, #0]
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fd fff0 	bl	80104d8 <unpack_pk_t1>
		for (int k = 0; k < N_; k++) {
			USB_DEBUG_MSG("%d", t1_i.coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
		poly_shiftl(&t1_i);
 80124f8:	f107 0318 	add.w	r3, r7, #24
 80124fc:	3b08      	subs	r3, #8
 80124fe:	4618      	mov	r0, r3
 8012500:	f7fe f882 	bl	8010608 <pqcrystals_dilithium2aes_r_ref_poly_shiftl>
		poly_ntt(&t1_i);
 8012504:	f107 0318 	add.w	r3, r7, #24
 8012508:	3b08      	subs	r3, #8
 801250a:	4618      	mov	r0, r3
 801250c:	f7fe f899 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
		poly_pointwise_montgomery(&t1_i, &cp, &t1_i);
 8012510:	f107 0218 	add.w	r2, r7, #24
 8012514:	3a08      	subs	r2, #8
 8012516:	f507 6141 	add.w	r1, r7, #3088	; 0xc10
 801251a:	f107 0318 	add.w	r3, r7, #24
 801251e:	3b08      	subs	r3, #8
 8012520:	4618      	mov	r0, r3
 8012522:	f7fe f8a6 	bl	8010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>

		poly_sub(&w->vec[i], &w->vec[i], &t1_i);
 8012526:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801252a:	461a      	mov	r2, r3
 801252c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8012530:	f103 0314 	add.w	r3, r3, #20
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	029b      	lsls	r3, r3, #10
 8012538:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 801253c:	18d0      	adds	r0, r2, r3
 801253e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012542:	461a      	mov	r2, r3
 8012544:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8012548:	f103 0314 	add.w	r3, r3, #20
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	029b      	lsls	r3, r3, #10
 8012550:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8012554:	18d1      	adds	r1, r2, r3
 8012556:	f107 0318 	add.w	r3, r7, #24
 801255a:	3b08      	subs	r3, #8
 801255c:	461a      	mov	r2, r3
 801255e:	f7fe f830 	bl	80105c2 <pqcrystals_dilithium2aes_r_ref_poly_sub>
		poly_reduce(&w->vec[i]);
 8012562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012566:	461a      	mov	r2, r3
 8012568:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801256c:	f103 0314 	add.w	r3, r3, #20
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	029b      	lsls	r3, r3, #10
 8012574:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8012578:	4413      	add	r3, r2
 801257a:	4618      	mov	r0, r3
 801257c:	f7fd ffc2 	bl	8010504 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
		poly_invntt_tomont(&w->vec[i]); // invert accumulated result from ntt
 8012580:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012584:	461a      	mov	r2, r3
 8012586:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 801258a:	f103 0314 	add.w	r3, r3, #20
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	029b      	lsls	r3, r3, #10
 8012592:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8012596:	4413      	add	r3, r2
 8012598:	4618      	mov	r0, r3
 801259a:	f7fe f85e 	bl	801065a <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
	for (i = 0; i < K; ++i) {
 801259e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80125a2:	f103 0314 	add.w	r3, r3, #20
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	3301      	adds	r3, #1
 80125aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80125ae:	f102 0214 	add.w	r2, r2, #20
 80125b2:	6013      	str	r3, [r2, #0]
 80125b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80125b8:	f103 0314 	add.w	r3, r3, #20
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2b03      	cmp	r3, #3
 80125c0:	f67f af0c 	bls.w	80123dc <polyvec_reconstruct_w1_montgomery+0x7e>
			USB_DEBUG_MSG("%d", w->vec[i].coeffs[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif
	}
}
 80125c4:	bf00      	nop
 80125c6:	bf00      	nop
 80125c8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80125cc:	3718      	adds	r7, #24
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}

080125d2 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b084      	sub	sp, #16
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
 80125da:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < L; ++i)
 80125dc:	2300      	movs	r3, #0
 80125de:	60fb      	str	r3, [r7, #12]
 80125e0:	e00f      	b.n	8012602 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	029b      	lsls	r3, r3, #10
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	4413      	add	r3, r2
 80125ea:	6839      	ldr	r1, [r7, #0]
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7fe f911 	bl	8010814 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 80125f2:	4603      	mov	r3, r0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d001      	beq.n	80125fc <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x2a>
      return 1;
 80125f8:	2301      	movs	r3, #1
 80125fa:	e006      	b.n	801260a <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x38>
  for(i = 0; i < L; ++i)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	3301      	adds	r3, #1
 8012600:	60fb      	str	r3, [r7, #12]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2b03      	cmp	r3, #3
 8012606:	d9ec      	bls.n	80125e2 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x10>

  return 0;
 8012608:	2300      	movs	r3, #0
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 801261a:	2300      	movs	r3, #0
 801261c:	60fb      	str	r3, [r7, #12]
 801261e:	e009      	b.n	8012634 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0x22>
    poly_reduce(&v->vec[i]);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	029b      	lsls	r3, r3, #10
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	4413      	add	r3, r2
 8012628:	4618      	mov	r0, r3
 801262a:	f7fd ff6b 	bl	8010504 <pqcrystals_dilithium2aes_r_ref_poly_reduce>
  for(i = 0; i < K; ++i)
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3301      	adds	r3, #1
 8012632:	60fb      	str	r3, [r7, #12]
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2b03      	cmp	r3, #3
 8012638:	d9f2      	bls.n	8012620 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0xe>
}
 801263a:	bf00      	nop
 801263c:	bf00      	nop
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 801264c:	2300      	movs	r3, #0
 801264e:	60fb      	str	r3, [r7, #12]
 8012650:	e009      	b.n	8012666 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0x22>
    poly_caddq(&v->vec[i]);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	029b      	lsls	r3, r3, #10
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	4413      	add	r3, r2
 801265a:	4618      	mov	r0, r3
 801265c:	f7fd ff70 	bl	8010540 <pqcrystals_dilithium2aes_r_ref_poly_caddq>
  for(i = 0; i < K; ++i)
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	3301      	adds	r3, #1
 8012664:	60fb      	str	r3, [r7, #12]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2b03      	cmp	r3, #3
 801266a:	d9f2      	bls.n	8012652 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0xe>
}
 801266c:	bf00      	nop
 801266e:	bf00      	nop
 8012670:	3710      	adds	r7, #16
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}

08012676 <pqcrystals_dilithium2aes_r_ref_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8012676:	b580      	push	{r7, lr}
 8012678:	b086      	sub	sp, #24
 801267a:	af00      	add	r7, sp, #0
 801267c:	60f8      	str	r0, [r7, #12]
 801267e:	60b9      	str	r1, [r7, #8]
 8012680:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8012682:	2300      	movs	r3, #0
 8012684:	617b      	str	r3, [r7, #20]
 8012686:	e011      	b.n	80126ac <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	029b      	lsls	r3, r3, #10
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	18d0      	adds	r0, r2, r3
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	029b      	lsls	r3, r3, #10
 8012694:	68ba      	ldr	r2, [r7, #8]
 8012696:	18d1      	adds	r1, r2, r3
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	029b      	lsls	r3, r3, #10
 801269c:	687a      	ldr	r2, [r7, #4]
 801269e:	4413      	add	r3, r2
 80126a0:	461a      	mov	r2, r3
 80126a2:	f7fd ff6b 	bl	801057c <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 0; i < K; ++i)
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	3301      	adds	r3, #1
 80126aa:	617b      	str	r3, [r7, #20]
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	2b03      	cmp	r3, #3
 80126b0:	d9ea      	bls.n	8012688 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x12>
}
 80126b2:	bf00      	nop
 80126b4:	bf00      	nop
 80126b6:	3718      	adds	r7, #24
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <pqcrystals_dilithium2aes_r_ref_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 80126bc:	b580      	push	{r7, lr}
 80126be:	b086      	sub	sp, #24
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80126c8:	2300      	movs	r3, #0
 80126ca:	617b      	str	r3, [r7, #20]
 80126cc:	e011      	b.n	80126f2 <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x36>
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	029b      	lsls	r3, r3, #10
 80126d2:	68fa      	ldr	r2, [r7, #12]
 80126d4:	18d0      	adds	r0, r2, r3
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	029b      	lsls	r3, r3, #10
 80126da:	68ba      	ldr	r2, [r7, #8]
 80126dc:	18d1      	adds	r1, r2, r3
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	029b      	lsls	r3, r3, #10
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	4413      	add	r3, r2
 80126e6:	461a      	mov	r2, r3
 80126e8:	f7fd ff6b 	bl	80105c2 <pqcrystals_dilithium2aes_r_ref_poly_sub>
  for(i = 0; i < K; ++i)
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	3301      	adds	r3, #1
 80126f0:	617b      	str	r3, [r7, #20]
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	d9ea      	bls.n	80126ce <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x12>
}
 80126f8:	bf00      	nop
 80126fa:	bf00      	nop
 80126fc:	3718      	adds	r7, #24
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 8012702:	b580      	push	{r7, lr}
 8012704:	b084      	sub	sp, #16
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 801270a:	2300      	movs	r3, #0
 801270c:	60fb      	str	r3, [r7, #12]
 801270e:	e009      	b.n	8012724 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0x22>
    poly_ntt(&v->vec[i]);
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	029b      	lsls	r3, r3, #10
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	4413      	add	r3, r2
 8012718:	4618      	mov	r0, r3
 801271a:	f7fd ff92 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  for(i = 0; i < K; ++i)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	3301      	adds	r3, #1
 8012722:	60fb      	str	r3, [r7, #12]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2b03      	cmp	r3, #3
 8012728:	d9f2      	bls.n	8012710 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0xe>
}
 801272a:	bf00      	nop
 801272c:	bf00      	nop
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 801273c:	2300      	movs	r3, #0
 801273e:	60fb      	str	r3, [r7, #12]
 8012740:	e009      	b.n	8012756 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	029b      	lsls	r3, r3, #10
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	4413      	add	r3, r2
 801274a:	4618      	mov	r0, r3
 801274c:	f7fd ff85 	bl	801065a <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
  for(i = 0; i < K; ++i)
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	3301      	adds	r3, #1
 8012754:	60fb      	str	r3, [r7, #12]
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2b03      	cmp	r3, #3
 801275a:	d9f2      	bls.n	8012742 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0xe>
}
 801275c:	bf00      	nop
 801275e:	bf00      	nop
 8012760:	3710      	adds	r7, #16
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}

08012766 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>:

void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8012766:	b580      	push	{r7, lr}
 8012768:	b086      	sub	sp, #24
 801276a:	af00      	add	r7, sp, #0
 801276c:	60f8      	str	r0, [r7, #12]
 801276e:	60b9      	str	r1, [r7, #8]
 8012770:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8012772:	2300      	movs	r3, #0
 8012774:	617b      	str	r3, [r7, #20]
 8012776:	e00e      	b.n	8012796 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	029b      	lsls	r3, r3, #10
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	18d0      	adds	r0, r2, r3
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	029b      	lsls	r3, r3, #10
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	4413      	add	r3, r2
 8012788:	461a      	mov	r2, r3
 801278a:	68b9      	ldr	r1, [r7, #8]
 801278c:	f7fd ff71 	bl	8010672 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 0; i < K; ++i)
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	3301      	adds	r3, #1
 8012794:	617b      	str	r3, [r7, #20]
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	2b03      	cmp	r3, #3
 801279a:	d9ed      	bls.n	8012778 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x12>
}
 801279c:	bf00      	nop
 801279e:	bf00      	nop
 80127a0:	3718      	adds	r7, #24
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b084      	sub	sp, #16
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
 80127ae:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80127b0:	2300      	movs	r3, #0
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	e00f      	b.n	80127d6 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	029b      	lsls	r3, r3, #10
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	4413      	add	r3, r2
 80127be:	6839      	ldr	r1, [r7, #0]
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7fe f827 	bl	8010814 <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d001      	beq.n	80127d0 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x2a>
      return 1;
 80127cc:	2301      	movs	r3, #1
 80127ce:	e006      	b.n	80127de <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x38>
  for(i = 0; i < K; ++i)
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	3301      	adds	r3, #1
 80127d4:	60fb      	str	r3, [r7, #12]
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2b03      	cmp	r3, #3
 80127da:	d9ec      	bls.n	80127b6 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x10>

  return 0;
 80127dc:	2300      	movs	r3, #0
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3710      	adds	r7, #16
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}

080127e6 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 80127e6:	b580      	push	{r7, lr}
 80127e8:	b086      	sub	sp, #24
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	60f8      	str	r0, [r7, #12]
 80127ee:	60b9      	str	r1, [r7, #8]
 80127f0:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80127f2:	2300      	movs	r3, #0
 80127f4:	617b      	str	r3, [r7, #20]
 80127f6:	e011      	b.n	801281c <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x36>
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	029b      	lsls	r3, r3, #10
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	18d0      	adds	r0, r2, r3
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	029b      	lsls	r3, r3, #10
 8012804:	68ba      	ldr	r2, [r7, #8]
 8012806:	18d1      	adds	r1, r2, r3
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	029b      	lsls	r3, r3, #10
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	4413      	add	r3, r2
 8012810:	461a      	mov	r2, r3
 8012812:	f7fd ff64 	bl	80106de <pqcrystals_dilithium2aes_r_ref_poly_power2round>
  for(i = 0; i < K; ++i)
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	3301      	adds	r3, #1
 801281a:	617b      	str	r3, [r7, #20]
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	2b03      	cmp	r3, #3
 8012820:	d9ea      	bls.n	80127f8 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x12>
}
 8012822:	bf00      	nop
 8012824:	bf00      	nop
 8012826:	3718      	adds	r7, #24
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 801282c:	b580      	push	{r7, lr}
 801282e:	b086      	sub	sp, #24
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8012838:	2300      	movs	r3, #0
 801283a:	617b      	str	r3, [r7, #20]
 801283c:	e011      	b.n	8012862 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x36>
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	029b      	lsls	r3, r3, #10
 8012842:	68fa      	ldr	r2, [r7, #12]
 8012844:	18d0      	adds	r0, r2, r3
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	029b      	lsls	r3, r3, #10
 801284a:	68ba      	ldr	r2, [r7, #8]
 801284c:	18d1      	adds	r1, r2, r3
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	029b      	lsls	r3, r3, #10
 8012852:	687a      	ldr	r2, [r7, #4]
 8012854:	4413      	add	r3, r2
 8012856:	461a      	mov	r2, r3
 8012858:	f7fd ff65 	bl	8010726 <pqcrystals_dilithium2aes_r_ref_poly_decompose>
  for(i = 0; i < K; ++i)
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	3301      	adds	r3, #1
 8012860:	617b      	str	r3, [r7, #20]
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	2b03      	cmp	r3, #3
 8012866:	d9ea      	bls.n	801283e <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x12>
}
 8012868:	bf00      	nop
 801286a:	bf00      	nop
 801286c:	3718      	adds	r7, #24
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b086      	sub	sp, #24
 8012876:	af00      	add	r7, sp, #0
 8012878:	60f8      	str	r0, [r7, #12]
 801287a:	60b9      	str	r1, [r7, #8]
 801287c:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 801287e:	2300      	movs	r3, #0
 8012880:	613b      	str	r3, [r7, #16]

  for(i = 0; i < K; ++i)
 8012882:	2300      	movs	r3, #0
 8012884:	617b      	str	r3, [r7, #20]
 8012886:	e015      	b.n	80128b4 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x42>
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	029b      	lsls	r3, r3, #10
 801288c:	68fa      	ldr	r2, [r7, #12]
 801288e:	18d0      	adds	r0, r2, r3
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	029b      	lsls	r3, r3, #10
 8012894:	68ba      	ldr	r2, [r7, #8]
 8012896:	18d1      	adds	r1, r2, r3
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	029b      	lsls	r3, r3, #10
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	4413      	add	r3, r2
 80128a0:	461a      	mov	r2, r3
 80128a2:	f7fd ff64 	bl	801076e <pqcrystals_dilithium2aes_r_ref_poly_make_hint>
 80128a6:	4602      	mov	r2, r0
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	4413      	add	r3, r2
 80128ac:	613b      	str	r3, [r7, #16]
  for(i = 0; i < K; ++i)
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	3301      	adds	r3, #1
 80128b2:	617b      	str	r3, [r7, #20]
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2b03      	cmp	r3, #3
 80128b8:	d9e6      	bls.n	8012888 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x16>

  return s;
 80128ba:	693b      	ldr	r3, [r7, #16]
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3718      	adds	r7, #24
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <polyveck_use_hint_r>:

  for(i = 0; i < K; ++i)
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
}

void polyveck_use_hint_r(polyveck *w, const polyveck *u, const uint8_t h[N_*K]) {
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b086      	sub	sp, #24
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
  unsigned int i;

	for (i = 0; i < K; ++i)
 80128d0:	2300      	movs	r3, #0
 80128d2:	617b      	str	r3, [r7, #20]
 80128d4:	e011      	b.n	80128fa <polyveck_use_hint_r+0x36>
		poly_use_hint_r(&w->vec[i], &u->vec[i], &h[i*N_]);
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	029b      	lsls	r3, r3, #10
 80128da:	68fa      	ldr	r2, [r7, #12]
 80128dc:	18d0      	adds	r0, r2, r3
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	029b      	lsls	r3, r3, #10
 80128e2:	68ba      	ldr	r2, [r7, #8]
 80128e4:	18d1      	adds	r1, r2, r3
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	021b      	lsls	r3, r3, #8
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	4413      	add	r3, r2
 80128ee:	461a      	mov	r2, r3
 80128f0:	f7fd ff6c 	bl	80107cc <poly_use_hint_r>
	for (i = 0; i < K; ++i)
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	3301      	adds	r3, #1
 80128f8:	617b      	str	r3, [r7, #20]
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	2b03      	cmp	r3, #3
 80128fe:	d9ea      	bls.n	80128d6 <polyveck_use_hint_r+0x12>
}
 8012900:	bf00      	nop
 8012902:	bf00      	nop
 8012904:	3718      	adds	r7, #24
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 801290a:	b580      	push	{r7, lr}
 801290c:	b084      	sub	sp, #16
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
 8012912:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8012914:	2300      	movs	r3, #0
 8012916:	60fb      	str	r3, [r7, #12]
 8012918:	e011      	b.n	801293e <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x34>
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 801291a:	68fa      	ldr	r2, [r7, #12]
 801291c:	4613      	mov	r3, r2
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	019b      	lsls	r3, r3, #6
 8012924:	461a      	mov	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	1898      	adds	r0, r3, r2
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	029b      	lsls	r3, r3, #10
 801292e:	683a      	ldr	r2, [r7, #0]
 8012930:	4413      	add	r3, r2
 8012932:	4619      	mov	r1, r3
 8012934:	f7ff fa3a 	bl	8011dac <pqcrystals_dilithium2aes_r_ref_polyw1_pack>
  for(i = 0; i < K; ++i)
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	3301      	adds	r3, #1
 801293c:	60fb      	str	r3, [r7, #12]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2b03      	cmp	r3, #3
 8012942:	d9ea      	bls.n	801291a <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x10>
}
 8012944:	bf00      	nop
 8012946:	bf00      	nop
 8012948:	3710      	adds	r7, #16
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}

0801294e <randombytes>:
#include <stdint.h>
#include <stdlib.h>
#include "randombytes.h"


void randombytes(RNG_HandleTypeDef *hrng, uint8_t *out, size_t outlen) {
 801294e:	b580      	push	{r7, lr}
 8012950:	b08a      	sub	sp, #40	; 0x28
 8012952:	af00      	add	r7, sp, #0
 8012954:	60f8      	str	r0, [r7, #12]
 8012956:	60b9      	str	r1, [r7, #8]
 8012958:	607a      	str	r2, [r7, #4]
	uint32_t rand_int = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	613b      	str	r3, [r7, #16]
	uint8_t *rand_int_byte = (uint8_t*)&rand_int;
 801295e:	f107 0310 	add.w	r3, r7, #16
 8012962:	61fb      	str	r3, [r7, #28]
	uint32_t *int_out = (uint32_t*)out;
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	61bb      	str	r3, [r7, #24]
	int i = 0;
 8012968:	2300      	movs	r3, #0
 801296a:	627b      	str	r3, [r7, #36]	; 0x24
	int j = 0;
 801296c:	2300      	movs	r3, #0
 801296e:	623b      	str	r3, [r7, #32]

	for(; i < outlen/4; i++){
 8012970:	e00a      	b.n	8012988 <randombytes+0x3a>
		HAL_RNG_GenerateRandomNumber(hrng, &int_out[i]);
 8012972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	69ba      	ldr	r2, [r7, #24]
 8012978:	4413      	add	r3, r2
 801297a:	4619      	mov	r1, r3
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f7f3 fe3a 	bl	80065f6 <HAL_RNG_GenerateRandomNumber>
	for(; i < outlen/4; i++){
 8012982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012984:	3301      	adds	r3, #1
 8012986:	627b      	str	r3, [r7, #36]	; 0x24
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	089a      	lsrs	r2, r3, #2
 801298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298e:	429a      	cmp	r2, r3
 8012990:	d8ef      	bhi.n	8012972 <randombytes+0x24>
	}

	int rem = outlen % 4;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f003 0303 	and.w	r3, r3, #3
 8012998:	617b      	str	r3, [r7, #20]
	if (rem) {
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d018      	beq.n	80129d2 <randombytes+0x84>
		HAL_RNG_GenerateRandomNumber(hrng, &rand_int);
 80129a0:	f107 0310 	add.w	r3, r7, #16
 80129a4:	4619      	mov	r1, r3
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f7f3 fe25 	bl	80065f6 <HAL_RNG_GenerateRandomNumber>
		for(; j < rem; j++){
 80129ac:	e00d      	b.n	80129ca <randombytes+0x7c>
			out[i+j] = rand_int_byte[j];
 80129ae:	6a3b      	ldr	r3, [r7, #32]
 80129b0:	69fa      	ldr	r2, [r7, #28]
 80129b2:	441a      	add	r2, r3
 80129b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80129b6:	6a3b      	ldr	r3, [r7, #32]
 80129b8:	440b      	add	r3, r1
 80129ba:	4619      	mov	r1, r3
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	440b      	add	r3, r1
 80129c0:	7812      	ldrb	r2, [r2, #0]
 80129c2:	701a      	strb	r2, [r3, #0]
		for(; j < rem; j++){
 80129c4:	6a3b      	ldr	r3, [r7, #32]
 80129c6:	3301      	adds	r3, #1
 80129c8:	623b      	str	r3, [r7, #32]
 80129ca:	6a3a      	ldr	r2, [r7, #32]
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	dbed      	blt.n	80129ae <randombytes+0x60>
		}
	}
}
 80129d2:	bf00      	nop
 80129d4:	3728      	adds	r7, #40	; 0x28
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}

080129da <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>:
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
 80129da:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80129de:	b086      	sub	sp, #24
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int32_t t;

  t = (int32_t)a*QINV;
 80129e6:	68b8      	ldr	r0, [r7, #8]
 80129e8:	4601      	mov	r1, r0
 80129ea:	00c9      	lsls	r1, r1, #3
 80129ec:	1a09      	subs	r1, r1, r0
 80129ee:	0289      	lsls	r1, r1, #10
 80129f0:	4401      	add	r1, r0
 80129f2:	0349      	lsls	r1, r1, #13
 80129f4:	4401      	add	r1, r0
 80129f6:	6179      	str	r1, [r7, #20]
  t = (a - (int64_t)t*Q_) >> 32;
 80129f8:	6979      	ldr	r1, [r7, #20]
 80129fa:	17c8      	asrs	r0, r1, #31
 80129fc:	460c      	mov	r4, r1
 80129fe:	4605      	mov	r5, r0
 8012a00:	e9c7 4500 	strd	r4, r5, [r7]
 8012a04:	f04f 0000 	mov.w	r0, #0
 8012a08:	f04f 0100 	mov.w	r1, #0
 8012a0c:	02a9      	lsls	r1, r5, #10
 8012a0e:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8012a12:	02a0      	lsls	r0, r4, #10
 8012a14:	683e      	ldr	r6, [r7, #0]
 8012a16:	1a32      	subs	r2, r6, r0
 8012a18:	687e      	ldr	r6, [r7, #4]
 8012a1a:	eb66 0301 	sbc.w	r3, r6, r1
 8012a1e:	f04f 0000 	mov.w	r0, #0
 8012a22:	f04f 0100 	mov.w	r1, #0
 8012a26:	0359      	lsls	r1, r3, #13
 8012a28:	ea41 41d2 	orr.w	r1, r1, r2, lsr #19
 8012a2c:	0350      	lsls	r0, r2, #13
 8012a2e:	4602      	mov	r2, r0
 8012a30:	460b      	mov	r3, r1
 8012a32:	ebb2 0a04 	subs.w	sl, r2, r4
 8012a36:	eb63 0b05 	sbc.w	fp, r3, r5
 8012a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012a3e:	eb1a 0802 	adds.w	r8, sl, r2
 8012a42:	eb4b 0903 	adc.w	r9, fp, r3
 8012a46:	f04f 0200 	mov.w	r2, #0
 8012a4a:	f04f 0300 	mov.w	r3, #0
 8012a4e:	464a      	mov	r2, r9
 8012a50:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8012a54:	4613      	mov	r3, r2
 8012a56:	617b      	str	r3, [r7, #20]
  return t;
 8012a58:	697b      	ldr	r3, [r7, #20]
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3718      	adds	r7, #24
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012a64:	4770      	bx	lr

08012a66 <pqcrystals_dilithium2aes_r_ref_reduce32>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
 8012a66:	b480      	push	{r7}
 8012a68:	b085      	sub	sp, #20
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
  int32_t t;

  t = (a + (1 << 22)) >> 23;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 8012a74:	15db      	asrs	r3, r3, #23
 8012a76:	60fb      	str	r3, [r7, #12]
  t = a - t*Q_;
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	025b      	lsls	r3, r3, #9
 8012a7e:	1a9b      	subs	r3, r3, r2
 8012a80:	029b      	lsls	r3, r3, #10
 8012a82:	4413      	add	r3, r2
 8012a84:	035b      	lsls	r3, r3, #13
 8012a86:	1a9b      	subs	r3, r3, r2
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	60fb      	str	r3, [r7, #12]
  return t;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3714      	adds	r7, #20
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr

08012a9c <pqcrystals_dilithium2aes_r_ref_caddq>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
 8012a9c:	b480      	push	{r7}
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  a += (a >> 31) & Q_;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	17da      	asrs	r2, r3, #31
 8012aa8:	4b05      	ldr	r3, [pc, #20]	; (8012ac0 <pqcrystals_dilithium2aes_r_ref_caddq+0x24>)
 8012aaa:	4013      	ands	r3, r2
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	4413      	add	r3, r2
 8012ab0:	607b      	str	r3, [r7, #4]
  return a;
 8012ab2:	687b      	ldr	r3, [r7, #4]
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	370c      	adds	r7, #12
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr
 8012ac0:	007fe001 	.word	0x007fe001

08012ac4 <pqcrystals_dilithium2aes_r_ref_power2round>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
 8012ac4:	b480      	push	{r7}
 8012ac6:	b085      	sub	sp, #20
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8012ad4:	135b      	asrs	r3, r3, #13
 8012ad6:	60fb      	str	r3, [r7, #12]
  *a0 = a - (a1 << D);
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	035b      	lsls	r3, r3, #13
 8012adc:	683a      	ldr	r2, [r7, #0]
 8012ade:	1ad2      	subs	r2, r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	601a      	str	r2, [r3, #0]
  return a1;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3714      	adds	r7, #20
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr
	...

08012af4 <pqcrystals_dilithium2aes_r_ref_decompose>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1  = (a + 127) >> 7;
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	337f      	adds	r3, #127	; 0x7f
 8012b02:	11db      	asrs	r3, r3, #7
 8012b04:	60fb      	str	r3, [r7, #12]
#if GAMMA2 == (Q_-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q_-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	f642 420b 	movw	r2, #11275	; 0x2c0b
 8012b0c:	fb02 f303 	mul.w	r3, r2, r3
 8012b10:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8012b14:	161b      	asrs	r3, r3, #24
 8012b16:	60fb      	str	r3, [r7, #12]
  a1 ^= ((43 - a1) >> 31) & a1;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8012b1e:	17db      	asrs	r3, r3, #31
 8012b20:	43db      	mvns	r3, r3
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	4013      	ands	r3, r2
 8012b26:	60fb      	str	r3, [r7, #12]
#endif

  *a0  = a - a1*2*GAMMA2;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	4a0e      	ldr	r2, [pc, #56]	; (8012b64 <pqcrystals_dilithium2aes_r_ref_decompose+0x70>)
 8012b2c:	fb03 f202 	mul.w	r2, r3, r2
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	441a      	add	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	601a      	str	r2, [r3, #0]
  *a0 -= (((Q_-1)/2 - *a0) >> 31) & Q_;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f5c3 137f 	rsb	r3, r3, #4177920	; 0x3fc000
 8012b44:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012b48:	17d9      	asrs	r1, r3, #31
 8012b4a:	4b07      	ldr	r3, [pc, #28]	; (8012b68 <pqcrystals_dilithium2aes_r_ref_decompose+0x74>)
 8012b4c:	400b      	ands	r3, r1
 8012b4e:	1ad2      	subs	r2, r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	601a      	str	r2, [r3, #0]
  return a1;
 8012b54:	68fb      	ldr	r3, [r7, #12]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3714      	adds	r7, #20
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	fffd1800 	.word	0xfffd1800
 8012b68:	007fe001 	.word	0x007fe001

08012b6c <pqcrystals_dilithium2aes_r_ref_make_hint>:
* Arguments:   - int32_t a0: low bits of input element
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
  if(a0 <= GAMMA2 || a0 > Q_ - GAMMA2 || (a0 == Q_ - GAMMA2 && a1 == 0))
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f5b3 3fba 	cmp.w	r3, #95232	; 0x17400
 8012b7c:	dd0a      	ble.n	8012b94 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	4a09      	ldr	r2, [pc, #36]	; (8012ba8 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	dc06      	bgt.n	8012b94 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4a07      	ldr	r2, [pc, #28]	; (8012ba8 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 8012b8a:	4293      	cmp	r3, r2
 8012b8c:	d104      	bne.n	8012b98 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
    return 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	e000      	b.n	8012b9a <pqcrystals_dilithium2aes_r_ref_make_hint+0x2e>

  return 1;
 8012b98:	2301      	movs	r3, #1
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	370c      	adds	r7, #12
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	007e6c01 	.word	0x007e6c01

08012bac <pqcrystals_dilithium2aes_r_ref_use_hint>:
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  int32_t a0, a1;

  a1 = decompose(&a0, a);
 8012bb6:	f107 0308 	add.w	r3, r7, #8
 8012bba:	6879      	ldr	r1, [r7, #4]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7ff ff99 	bl	8012af4 <pqcrystals_dilithium2aes_r_ref_decompose>
 8012bc2:	60f8      	str	r0, [r7, #12]
  if(hint == 0)
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d101      	bne.n	8012bce <pqcrystals_dilithium2aes_r_ref_use_hint+0x22>
    return a1;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	e011      	b.n	8012bf2 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  if(a0 > 0)
    return (a1 + 1) & 15;
  else
    return (a1 - 1) & 15;
#elif GAMMA2 == (Q_-1)/88
  if(a0 > 0)
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	dd07      	ble.n	8012be4 <pqcrystals_dilithium2aes_r_ref_use_hint+0x38>
    return (a1 == 43) ?  0 : a1 + 1;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2b2b      	cmp	r3, #43	; 0x2b
 8012bd8:	d002      	beq.n	8012be0 <pqcrystals_dilithium2aes_r_ref_use_hint+0x34>
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	3301      	adds	r3, #1
 8012bde:	e008      	b.n	8012bf2 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 8012be0:	2300      	movs	r3, #0
 8012be2:	e006      	b.n	8012bf2 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  else
    return (a1 ==  0) ? 43 : a1 - 1;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d002      	beq.n	8012bf0 <pqcrystals_dilithium2aes_r_ref_use_hint+0x44>
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	3b01      	subs	r3, #1
 8012bee:	e000      	b.n	8012bf2 <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 8012bf0:	232b      	movs	r3, #43	; 0x2b
#endif
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}

08012bfa <pqcrystals_dilithium2aes_r_ref_keypair>:
#ifdef STM32WB55xx
int crypto_sign_keypair(RNG_HandleTypeDef * hrng, uint8_t * pk, uint8_t * sk)
#else
int crypto_sign_keypair(uint8_t * pk, uint8_t * sk)
#endif
{
 8012bfa:	b580      	push	{r7, lr}
 8012bfc:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8012c00:	b08e      	sub	sp, #56	; 0x38
 8012c02:	af02      	add	r7, sp, #8
 8012c04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012c08:	f843 0ca4 	str.w	r0, [r3, #-164]
 8012c0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012c10:	f843 1ca8 	str.w	r1, [r3, #-168]
 8012c14:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012c18:	f843 2cac 	str.w	r2, [r3, #-172]

    /* Get randomness for rho, rhoprime and key */
#if defined(CONST_RAND_SEED)
    randombytes2(seedbuf, SEEDBYTES);
#elif defined(STM32WB55xx)
    randombytes(hrng, seedbuf, SEEDBYTES);
 8012c1c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8012c20:	f103 0304 	add.w	r3, r3, #4
 8012c24:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8012c28:	4610      	mov	r0, r2
 8012c2a:	2220      	movs	r2, #32
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	f850 0ca4 	ldr.w	r0, [r0, #-164]
 8012c32:	f7ff fe8c 	bl	801294e <randombytes>

#ifdef DEBUG_LOG
    USB_DEBUG_MSG("\r\n KEYGEN \r\n");
#endif

    shake256(seedbuf, 3 * SEEDBYTES, seedbuf, SEEDBYTES);
 8012c36:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8012c3a:	f102 0204 	add.w	r2, r2, #4
 8012c3e:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 8012c42:	f100 0004 	add.w	r0, r0, #4
 8012c46:	2320      	movs	r3, #32
 8012c48:	2160      	movs	r1, #96	; 0x60
 8012c4a:	f7fd f853 	bl	800fcf4 <pqcrystals_fips202_ref_shake256>
    rho = seedbuf;
 8012c4e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8012c52:	f103 0304 	add.w	r3, r3, #4
 8012c56:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8012c5a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8012c5e:	6013      	str	r3, [r2, #0]
    rhoprime = seedbuf + SEEDBYTES;
 8012c60:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8012c64:	f103 0304 	add.w	r3, r3, #4
 8012c68:	3320      	adds	r3, #32
 8012c6a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8012c6e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8012c72:	6013      	str	r3, [r2, #0]
    key = seedbuf + 2 * SEEDBYTES;
 8012c74:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8012c78:	f103 0304 	add.w	r3, r3, #4
 8012c7c:	3340      	adds	r3, #64	; 0x40
 8012c7e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8012c82:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8012c86:	6013      	str	r3, [r2, #0]

#ifdef TIME_BENCHMARK
    elapsed_time_start(KEYS_SMUL_TIMESTAMP);
#endif

    polyvec_matrix_poly_smul_montgomery(&t1, rho, rhoprime);
 8012c88:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012c8c:	f103 0310 	add.w	r3, r3, #16
 8012c90:	3b1c      	subs	r3, #28
 8012c92:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8012c96:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8012c9a:	6812      	ldr	r2, [r2, #0]
 8012c9c:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8012ca0:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8012ca4:	6809      	ldr	r1, [r1, #0]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7ff f915 	bl	8011ed6 <polyvec_matrix_poly_smul_montgomery>
#ifdef TIME_BENCHMARK
    elapsed_time_stop(KEYS_SMUL_TIMESTAMP);
#endif

    /* Extract t1 and write public key */
    polyveck_caddq(&t1);
 8012cac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012cb0:	f103 0310 	add.w	r3, r3, #16
 8012cb4:	3b1c      	subs	r3, #28
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff fcc4 	bl	8012644 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
    polyveck_power2round(&t1, &t0, &t1);
 8012cbc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012cc0:	f102 0210 	add.w	r2, r2, #16
 8012cc4:	3a1c      	subs	r2, #28
 8012cc6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012cca:	391c      	subs	r1, #28
 8012ccc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012cd0:	f103 0310 	add.w	r3, r3, #16
 8012cd4:	3b1c      	subs	r3, #28
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7ff fd85 	bl	80127e6 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>
    pack_pk(pk, rho, &t1);
 8012cdc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012ce0:	f103 0310 	add.w	r3, r3, #16
 8012ce4:	3b1c      	subs	r3, #28
 8012ce6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8012cea:	4610      	mov	r0, r2
 8012cec:	461a      	mov	r2, r3
 8012cee:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8012cf2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8012cf6:	6819      	ldr	r1, [r3, #0]
 8012cf8:	f850 0ca8 	ldr.w	r0, [r0, #-168]
 8012cfc:	f7fd f944 	bl	800ff88 <pqcrystals_dilithium2aes_r_ref_pack_pk>

    /* Compute CRH(rho, t1) and write secret key */
    crh(tr, pk, CRYPTO_PUBLICKEYBYTES);
 8012d00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012d04:	461a      	mov	r2, r3
 8012d06:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8012d0a:	f100 0014 	add.w	r0, r0, #20
 8012d0e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8012d12:	f852 2ca8 	ldr.w	r2, [r2, #-168]
 8012d16:	2130      	movs	r1, #48	; 0x30
 8012d18:	f7fc ffec 	bl	800fcf4 <pqcrystals_fips202_ref_shake256>
    pack_sk_r(sk, rho, rhoprime, tr, key, &t0);
 8012d1c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8012d20:	f102 0214 	add.w	r2, r2, #20
 8012d24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d2e:	3b1c      	subs	r3, #28
 8012d30:	9301      	str	r3, [sp, #4]
 8012d32:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8012d36:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	4613      	mov	r3, r2
 8012d40:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8012d44:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8012d48:	6812      	ldr	r2, [r2, #0]
 8012d4a:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8012d4e:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 8012d52:	6809      	ldr	r1, [r1, #0]
 8012d54:	f850 0cac 	ldr.w	r0, [r0, #-172]
 8012d58:	f7fd f94d 	bl	800fff6 <pqcrystals_dilithium2aes_r_ref_pack_sk_r>
  crh(tr, pk, CRYPTO_PUBLICKEYBYTES);
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);

#endif

  return 0;
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8012d64:	3730      	adds	r7, #48	; 0x30
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <pqcrystals_dilithium2aes_r_ref_signature>:
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
#endif
{
 8012d6c:	b590      	push	{r4, r7, lr}
 8012d6e:	f5ad 4dac 	sub.w	sp, sp, #22016	; 0x5600
 8012d72:	b083      	sub	sp, #12
 8012d74:	af02      	add	r7, sp, #8
 8012d76:	f507 64c0 	add.w	r4, r7, #1536	; 0x600
 8012d7a:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
 8012d7e:	6020      	str	r0, [r4, #0]
 8012d80:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8012d84:	f5a0 60bf 	sub.w	r0, r0, #1528	; 0x5f8
 8012d88:	6001      	str	r1, [r0, #0]
 8012d8a:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8012d8e:	f2a1 51fc 	subw	r1, r1, #1532	; 0x5fc
 8012d92:	600a      	str	r2, [r1, #0]
 8012d94:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8012d98:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
 8012d9c:	6013      	str	r3, [r2, #0]

#ifdef CONSTRAINED_DEVICE
    unsigned int n;
    uint8_t seedbuf[2 * SEEDBYTES + 3 * CRHBYTES];
    uint8_t* rho, * s_rhoprime, * tr, * key, * mu;
    uint16_t nonce = 0;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012da4:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012da8:	8013      	strh	r3, [r2, #0]
    polyveck t0, w1, w0, h;
    poly cp;
    keccak_state state;
    uint8_t y_rhoprime[CRHBYTES];

    rho = seedbuf;
 8012daa:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8012dae:	f103 0314 	add.w	r3, r3, #20
 8012db2:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012db6:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8012dba:	6013      	str	r3, [r2, #0]
    tr = rho + SEEDBYTES;
 8012dbc:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012dc0:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	3320      	adds	r3, #32
 8012dc8:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012dcc:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8012dd0:	6013      	str	r3, [r2, #0]
    key = tr + CRHBYTES;
 8012dd2:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012dd6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	3330      	adds	r3, #48	; 0x30
 8012dde:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012de2:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012de6:	6013      	str	r3, [r2, #0]
    mu = key + SEEDBYTES;
 8012de8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012dec:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	3320      	adds	r3, #32
 8012df4:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012df8:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012dfc:	6013      	str	r3, [r2, #0]
    s_rhoprime = mu + CRHBYTES;
 8012dfe:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012e02:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	3330      	adds	r3, #48	; 0x30
 8012e0a:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012e0e:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8012e12:	6013      	str	r3, [r2, #0]

    unpack_sk_r(rho, s_rhoprime, tr, key, &t0, sk);
 8012e14:	f507 43ac 	add.w	r3, r7, #22016	; 0x5600
 8012e18:	f103 0314 	add.w	r3, r3, #20
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	9301      	str	r3, [sp, #4]
 8012e20:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 8012e24:	3b2c      	subs	r3, #44	; 0x2c
 8012e26:	9300      	str	r3, [sp, #0]
 8012e28:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012e2c:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012e36:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8012e3a:	6812      	ldr	r2, [r2, #0]
 8012e3c:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8012e40:	f101 0168 	add.w	r1, r1, #104	; 0x68
 8012e44:	6809      	ldr	r1, [r1, #0]
 8012e46:	f507 40ab 	add.w	r0, r7, #21888	; 0x5580
 8012e4a:	f100 0078 	add.w	r0, r0, #120	; 0x78
 8012e4e:	6800      	ldr	r0, [r0, #0]
 8012e50:	f7fd f944 	bl	80100dc <pqcrystals_dilithium2aes_r_ref_unpack_sk_r>


    /* Compute CRH(tr, msg) */
    shake256_init(&state);
 8012e54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e58:	3b40      	subs	r3, #64	; 0x40
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fc feeb 	bl	800fc36 <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, tr, CRHBYTES);
 8012e60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e64:	3b40      	subs	r3, #64	; 0x40
 8012e66:	2230      	movs	r2, #48	; 0x30
 8012e68:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8012e6c:	f101 0174 	add.w	r1, r1, #116	; 0x74
 8012e70:	6809      	ldr	r1, [r1, #0]
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7fc feea 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, m, mlen);
 8012e78:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012e7c:	f5a3 61c0 	sub.w	r1, r3, #1536	; 0x600
 8012e80:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e84:	3b40      	subs	r3, #64	; 0x40
 8012e86:	f507 42ac 	add.w	r2, r7, #22016	; 0x5600
 8012e8a:	f102 0210 	add.w	r2, r2, #16
 8012e8e:	6812      	ldr	r2, [r2, #0]
 8012e90:	6809      	ldr	r1, [r1, #0]
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fc feda 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 8012e98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e9c:	3b40      	subs	r3, #64	; 0x40
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fc feec 	bl	800fc7c <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(mu, CRHBYTES, &state);
 8012ea4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012ea8:	3b40      	subs	r3, #64	; 0x40
 8012eaa:	461a      	mov	r2, r3
 8012eac:	2130      	movs	r1, #48	; 0x30
 8012eae:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012eb2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012eb6:	6818      	ldr	r0, [r3, #0]
 8012eb8:	f7fc ff04 	bl	800fcc4 <pqcrystals_fips202_ref_shake256_squeeze>
    randombytes(hrng, y_rhoprime, CRHBYTES);
#else
    randombytes(y_rhoprime, CRHBYTES);
#endif
#else
    crh(y_rhoprime, key, SEEDBYTES + CRHBYTES);
 8012ebc:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8012ec0:	3870      	subs	r0, #112	; 0x70
 8012ec2:	2350      	movs	r3, #80	; 0x50
 8012ec4:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012ec8:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8012ecc:	6812      	ldr	r2, [r2, #0]
 8012ece:	2130      	movs	r1, #48	; 0x30
 8012ed0:	f7fc ff10 	bl	800fcf4 <pqcrystals_fips202_ref_shake256>
    	USB_DEBUG_MSG("%d", y_rhoprime[i]);
    }
    USB_DEBUG_MSG("\r\n");
#endif

    polyveck_ntt(&t0);
 8012ed4:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 8012ed8:	3b2c      	subs	r3, #44	; 0x2c
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7ff fc11 	bl	8012702 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>

#ifdef TIME_BENCHMARK
    elapsed_time_start(SIGN_YMUL_TIMESTAMP);
#endif

    polyvec_matrix_poly_ymul_montgomery(&w1, rho, y_rhoprime, nonce);
 8012ee0:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012ee4:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8012eee:	3a70      	subs	r2, #112	; 0x70
 8012ef0:	f507 5015 	add.w	r0, r7, #9536	; 0x2540
 8012ef4:	382c      	subs	r0, #44	; 0x2c
 8012ef6:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8012efa:	f101 0178 	add.w	r1, r1, #120	; 0x78
 8012efe:	6809      	ldr	r1, [r1, #0]
 8012f00:	f7ff f8ae 	bl	8012060 <polyvec_matrix_poly_ymul_montgomery>
#ifdef TIME_BENCHMARK
    elapsed_time_stop(SIGN_YMUL_TIMESTAMP);
#endif

    /* Decompose w and call the random oracle */
    polyveck_caddq(&w1);
 8012f04:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8012f08:	3b2c      	subs	r3, #44	; 0x2c
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff fb9a 	bl	8012644 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
    polyveck_decompose(&w1, &w0, &w1);
 8012f10:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 8012f14:	3a2c      	subs	r2, #44	; 0x2c
 8012f16:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 8012f1a:	396c      	subs	r1, #108	; 0x6c
 8012f1c:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8012f20:	3b2c      	subs	r3, #44	; 0x2c
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7ff fc82 	bl	801282c <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>
    polyveck_pack_w1(sig, &w1);
 8012f28:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8012f2c:	3b2c      	subs	r3, #44	; 0x2c
 8012f2e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8012f32:	f5a2 62bf 	sub.w	r2, r2, #1528	; 0x5f8
 8012f36:	4619      	mov	r1, r3
 8012f38:	6810      	ldr	r0, [r2, #0]
 8012f3a:	f7ff fce6 	bl	801290a <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>

    shake256_init(&state);
 8012f3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f42:	3b40      	subs	r3, #64	; 0x40
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fc fe76 	bl	800fc36 <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, mu, CRHBYTES);
 8012f4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f4e:	3b40      	subs	r3, #64	; 0x40
 8012f50:	2230      	movs	r2, #48	; 0x30
 8012f52:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8012f56:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012f5a:	6809      	ldr	r1, [r1, #0]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fc fe75 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, sig, K * POLYW1_PACKEDBYTES);
 8012f62:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012f66:	f5a3 61bf 	sub.w	r1, r3, #1528	; 0x5f8
 8012f6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f6e:	3b40      	subs	r3, #64	; 0x40
 8012f70:	f44f 7240 	mov.w	r2, #768	; 0x300
 8012f74:	6809      	ldr	r1, [r1, #0]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fc fe68 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 8012f7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f80:	3b40      	subs	r3, #64	; 0x40
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fc fe7a 	bl	800fc7c <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(sig, SEEDBYTES, &state);
 8012f88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f8c:	3b40      	subs	r3, #64	; 0x40
 8012f8e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8012f92:	f5a2 60bf 	sub.w	r0, r2, #1528	; 0x5f8
 8012f96:	461a      	mov	r2, r3
 8012f98:	2120      	movs	r1, #32
 8012f9a:	6800      	ldr	r0, [r0, #0]
 8012f9c:	f7fc fe92 	bl	800fcc4 <pqcrystals_fips202_ref_shake256_squeeze>
    poly_challenge(&cp, sig);
 8012fa0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012fa4:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 8012fa8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012fac:	3b6c      	subs	r3, #108	; 0x6c
 8012fae:	6811      	ldr	r1, [r2, #0]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7fd fe58 	bl	8010c66 <pqcrystals_dilithium2aes_r_ref_poly_challenge>
    poly_ntt(&cp);
 8012fb6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012fba:	3b6c      	subs	r3, #108	; 0x6c
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fd fb40 	bl	8010642 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
#ifdef TIME_BENCHMARK
    elapsed_time_start(SIGN_Z_COMPUTE_TIMESTAMP);
#endif

    /* Compute z, reject if it reveals secret */
    polyvec_compute_z_montgomery(&z, &cp, s_rhoprime, y_rhoprime, nonce++);
 8012fc2:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8012fc6:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012fca:	881a      	ldrh	r2, [r3, #0]
 8012fcc:	1c53      	adds	r3, r2, #1
 8012fce:	f507 41ab 	add.w	r1, r7, #21888	; 0x5580
 8012fd2:	f101 017e 	add.w	r1, r1, #126	; 0x7e
 8012fd6:	800b      	strh	r3, [r1, #0]
 8012fd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012fdc:	3b70      	subs	r3, #112	; 0x70
 8012fde:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8012fe2:	396c      	subs	r1, #108	; 0x6c
 8012fe4:	f507 408a 	add.w	r0, r7, #17664	; 0x4500
 8012fe8:	f100 0020 	add.w	r0, r0, #32
 8012fec:	380c      	subs	r0, #12
 8012fee:	9200      	str	r2, [sp, #0]
 8012ff0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8012ff4:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8012ff8:	6812      	ldr	r2, [r2, #0]
 8012ffa:	f7ff f8df 	bl	80121bc <polyvec_compute_z_montgomery>

#ifdef TIME_BENCHMARK
    elapsed_time_stop(SIGN_Z_COMPUTE_TIMESTAMP);
#endif

    if (polyvecl_chknorm(&z, GAMMA1 - BETA))
 8012ffe:	f507 438a 	add.w	r3, r7, #17664	; 0x4500
 8013002:	f103 0320 	add.w	r3, r3, #32
 8013006:	3b0c      	subs	r3, #12
 8013008:	4952      	ldr	r1, [pc, #328]	; (8013154 <pqcrystals_dilithium2aes_r_ref_signature+0x3e8>)
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff fae1 	bl	80125d2 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d000      	beq.n	8013018 <pqcrystals_dilithium2aes_r_ref_signature+0x2ac>
        goto rej;
 8013016:	e763      	b.n	8012ee0 <pqcrystals_dilithium2aes_r_ref_signature+0x174>
    * do not reveal secret information */
#ifdef TIME_BENCHMARK
    elapsed_time_start(SIGN_H_COMPUTE_TIMESTAMP);
#endif

    polyvec_compute_h_montgomery(&h, &cp, s_rhoprime);
 8013018:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 801301c:	396c      	subs	r1, #108	; 0x6c
 801301e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013022:	3b6c      	subs	r3, #108	; 0x6c
 8013024:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8013028:	f102 0268 	add.w	r2, r2, #104	; 0x68
 801302c:	6812      	ldr	r2, [r2, #0]
 801302e:	4618      	mov	r0, r3
 8013030:	f7ff f93e 	bl	80122b0 <polyvec_compute_h_montgomery>

#ifdef TIME_BENCHMARK
    elapsed_time_stop(SIGN_H_COMPUTE_TIMESTAMP);
#endif

    polyveck_sub(&w0, &w0, &h);
 8013034:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8013038:	3a6c      	subs	r2, #108	; 0x6c
 801303a:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 801303e:	396c      	subs	r1, #108	; 0x6c
 8013040:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8013044:	3b6c      	subs	r3, #108	; 0x6c
 8013046:	4618      	mov	r0, r3
 8013048:	f7ff fb38 	bl	80126bc <pqcrystals_dilithium2aes_r_ref_polyveck_sub>
    polyveck_reduce(&w0);
 801304c:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8013050:	3b6c      	subs	r3, #108	; 0x6c
 8013052:	4618      	mov	r0, r3
 8013054:	f7ff fadd 	bl	8012612 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
    if (polyveck_chknorm(&w0, GAMMA2 - BETA))
 8013058:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 801305c:	3b6c      	subs	r3, #108	; 0x6c
 801305e:	493e      	ldr	r1, [pc, #248]	; (8013158 <pqcrystals_dilithium2aes_r_ref_signature+0x3ec>)
 8013060:	4618      	mov	r0, r3
 8013062:	f7ff fba0 	bl	80127a6 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d000      	beq.n	801306e <pqcrystals_dilithium2aes_r_ref_signature+0x302>
        goto rej;
 801306c:	e738      	b.n	8012ee0 <pqcrystals_dilithium2aes_r_ref_signature+0x174>

    /* Compute hints for w1 */
    polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 801306e:	f507 5255 	add.w	r2, r7, #13632	; 0x3540
 8013072:	3a2c      	subs	r2, #44	; 0x2c
 8013074:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8013078:	396c      	subs	r1, #108	; 0x6c
 801307a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801307e:	3b6c      	subs	r3, #108	; 0x6c
 8013080:	4618      	mov	r0, r3
 8013082:	f7ff fb70 	bl	8012766 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>
    polyveck_invntt_tomont(&h);
 8013086:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801308a:	3b6c      	subs	r3, #108	; 0x6c
 801308c:	4618      	mov	r0, r3
 801308e:	f7ff fb51 	bl	8012734 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>
    polyveck_reduce(&h);
 8013092:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013096:	3b6c      	subs	r3, #108	; 0x6c
 8013098:	4618      	mov	r0, r3
 801309a:	f7ff faba 	bl	8012612 <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
		}
	}
	USB_DEBUG_MSG("\r\n");
#endif

    if (polyveck_chknorm(&h, GAMMA2))
 801309e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130a2:	3b6c      	subs	r3, #108	; 0x6c
 80130a4:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7ff fb7c 	bl	80127a6 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d000      	beq.n	80130b6 <pqcrystals_dilithium2aes_r_ref_signature+0x34a>
        goto rej;
 80130b4:	e714      	b.n	8012ee0 <pqcrystals_dilithium2aes_r_ref_signature+0x174>

    polyveck_add(&w0, &w0, &h);
 80130b6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80130ba:	3a6c      	subs	r2, #108	; 0x6c
 80130bc:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 80130c0:	396c      	subs	r1, #108	; 0x6c
 80130c2:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80130c6:	3b6c      	subs	r3, #108	; 0x6c
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7ff fad4 	bl	8012676 <pqcrystals_dilithium2aes_r_ref_polyveck_add>
    polyveck_caddq(&w0);
 80130ce:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80130d2:	3b6c      	subs	r3, #108	; 0x6c
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7ff fab5 	bl	8012644 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
		}
	}
	USB_DEBUG_MSG("\r\n");
#endif

    n = polyveck_make_hint(&h, &w0, &w1);
 80130da:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 80130de:	3a2c      	subs	r2, #44	; 0x2c
 80130e0:	f507 51ac 	add.w	r1, r7, #5504	; 0x1580
 80130e4:	396c      	subs	r1, #108	; 0x6c
 80130e6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80130ea:	3b6c      	subs	r3, #108	; 0x6c
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7ff fbc0 	bl	8012872 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>
 80130f2:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80130f6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80130fa:	6018      	str	r0, [r3, #0]

#ifdef DEBUG_LOG
    USB_DEBUG_MSG("n = %d\r\n", n);
#endif

    if (n > OMEGA)
 80130fc:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8013100:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	2b50      	cmp	r3, #80	; 0x50
 8013108:	d900      	bls.n	801310c <pqcrystals_dilithium2aes_r_ref_signature+0x3a0>
        goto rej;
 801310a:	e6e9      	b.n	8012ee0 <pqcrystals_dilithium2aes_r_ref_signature+0x174>

    /* Write signature */
    pack_sig(sig, sig, &z, &h);
 801310c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013110:	3b6c      	subs	r3, #108	; 0x6c
 8013112:	f507 428a 	add.w	r2, r7, #17664	; 0x4500
 8013116:	f102 0220 	add.w	r2, r2, #32
 801311a:	3a0c      	subs	r2, #12
 801311c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8013120:	f5a1 61bf 	sub.w	r1, r1, #1528	; 0x5f8
 8013124:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8013128:	f5a0 60bf 	sub.w	r0, r0, #1528	; 0x5f8
 801312c:	6809      	ldr	r1, [r1, #0]
 801312e:	6800      	ldr	r0, [r0, #0]
 8013130:	f7fd f847 	bl	80101c2 <pqcrystals_dilithium2aes_r_ref_pack_sig>
    *siglen = CRYPTO_BYTES;
 8013134:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8013138:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f640 1274 	movw	r2, #2420	; 0x974
 8013142:	601a      	str	r2, [r3, #0]

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
  *siglen = CRYPTO_BYTES;
#endif
	return 0;
 8013144:	2300      	movs	r3, #0
}
 8013146:	4618      	mov	r0, r3
 8013148:	f507 47ac 	add.w	r7, r7, #22016	; 0x5600
 801314c:	3704      	adds	r7, #4
 801314e:	46bd      	mov	sp, r7
 8013150:	bd90      	pop	{r4, r7, pc}
 8013152:	bf00      	nop
 8013154:	0001ffb2 	.word	0x0001ffb2
 8013158:	000173b2 	.word	0x000173b2

0801315c <pqcrystals_dilithium2aes_r_ref>:
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
#endif
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b088      	sub	sp, #32
 8013160:	af02      	add	r7, sp, #8
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
 8013168:	603b      	str	r3, [r7, #0]
  size_t i;

  for(i = 0; i < mlen; ++i)
 801316a:	2300      	movs	r3, #0
 801316c:	617b      	str	r3, [r7, #20]
 801316e:	e011      	b.n	8013194 <pqcrystals_dilithium2aes_r_ref+0x38>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8013170:	6a3a      	ldr	r2, [r7, #32]
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	1ad3      	subs	r3, r2, r3
 8013176:	3b01      	subs	r3, #1
 8013178:	683a      	ldr	r2, [r7, #0]
 801317a:	441a      	add	r2, r3
 801317c:	6a39      	ldr	r1, [r7, #32]
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	1acb      	subs	r3, r1, r3
 8013182:	f603 1373 	addw	r3, r3, #2419	; 0x973
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	440b      	add	r3, r1
 801318a:	7812      	ldrb	r2, [r2, #0]
 801318c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < mlen; ++i)
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	3301      	adds	r3, #1
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	697a      	ldr	r2, [r7, #20]
 8013196:	6a3b      	ldr	r3, [r7, #32]
 8013198:	429a      	cmp	r2, r3
 801319a:	d3e9      	bcc.n	8013170 <pqcrystals_dilithium2aes_r_ref+0x14>
#ifdef STM32WB55xx
  crypto_sign_signature(hrng, sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	f603 1274 	addw	r2, r3, #2420	; 0x974
 80131a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a4:	9301      	str	r3, [sp, #4]
 80131a6:	6a3b      	ldr	r3, [r7, #32]
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	4613      	mov	r3, r2
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	68b9      	ldr	r1, [r7, #8]
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f7ff fddb 	bl	8012d6c <pqcrystals_dilithium2aes_r_ref_signature>
#else
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
#endif
  *smlen += mlen;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	6a3b      	ldr	r3, [r7, #32]
 80131bc:	441a      	add	r2, r3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	601a      	str	r2, [r3, #0]
  return 0;
 80131c2:	2300      	movs	r3, #0
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3718      	adds	r7, #24
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <pqcrystals_dilithium2aes_r_ref_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
 80131cc:	b590      	push	{r4, r7, lr}
 80131ce:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 80131d2:	b087      	sub	sp, #28
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	f607 0458 	addw	r4, r7, #2136	; 0x858
 80131da:	f6a4 044c 	subw	r4, r4, #2124	; 0x84c
 80131de:	6020      	str	r0, [r4, #0]
 80131e0:	f607 0058 	addw	r0, r7, #2136	; 0x858
 80131e4:	f5a0 6005 	sub.w	r0, r0, #2128	; 0x850
 80131e8:	6001      	str	r1, [r0, #0]
 80131ea:	f607 0158 	addw	r1, r7, #2136	; 0x858
 80131ee:	f6a1 0154 	subw	r1, r1, #2132	; 0x854
 80131f2:	600a      	str	r2, [r1, #0]
 80131f4:	f607 0258 	addw	r2, r7, #2136	; 0x858
 80131f8:	f6a2 0258 	subw	r2, r2, #2136	; 0x858
 80131fc:	6013      	str	r3, [r2, #0]
    uint8_t buf[K * POLYW1_PACKEDBYTES];
    uint8_t mu[CRHBYTES];
    uint8_t c2[SEEDBYTES];
    uint8_t c[SEEDBYTES];
    polyveck w1;
    uint8_t h[N_ * K] = { 0 };
 80131fe:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8013202:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 8013206:	2200      	movs	r2, #0
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	3304      	adds	r3, #4
 801320c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8013210:	2100      	movs	r1, #0
 8013212:	4618      	mov	r0, r3
 8013214:	f000 fa0c 	bl	8013630 <memset>

#ifdef DEBUG_LOG
    USB_DEBUG_MSG("\r\n VERIFY \r\n");
#endif

    if (siglen != CRYPTO_BYTES)
 8013218:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801321c:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	f640 1274 	movw	r2, #2420	; 0x974
 8013226:	4293      	cmp	r3, r2
 8013228:	d001      	beq.n	801322e <pqcrystals_dilithium2aes_r_ref_verify+0x62>
        return 1;
 801322a:	2301      	movs	r3, #1
 801322c:	e0ef      	b.n	801340e <pqcrystals_dilithium2aes_r_ref_verify+0x242>

    //if signature OK - the h part will be unpacked - else - error
    int err_code = verify_sig_z_h_malform(h, sig);
 801322e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8013232:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 8013236:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801323a:	3b18      	subs	r3, #24
 801323c:	6811      	ldr	r1, [r2, #0]
 801323e:	4618      	mov	r0, r3
 8013240:	f7fd f8a4 	bl	801038c <verify_sig_z_h_malform>
 8013244:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8013248:	f103 0310 	add.w	r3, r3, #16
 801324c:	6018      	str	r0, [r3, #0]
    if (err_code)
 801324e:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8013252:	f103 0310 	add.w	r3, r3, #16
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d005      	beq.n	8013268 <pqcrystals_dilithium2aes_r_ref_verify+0x9c>
        return err_code;
 801325c:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8013260:	f103 0310 	add.w	r3, r3, #16
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	e0d2      	b.n	801340e <pqcrystals_dilithium2aes_r_ref_verify+0x242>
			USB_DEBUG_MSG("%d", h[k]);
		}
		USB_DEBUG_MSG("\r\n");
#endif

    unpack_sig_c(c, sig);
 8013268:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801326c:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8013270:	f507 52a7 	add.w	r2, r7, #5344	; 0x14e0
 8013274:	6819      	ldr	r1, [r3, #0]
 8013276:	4610      	mov	r0, r2
 8013278:	f7fd f8de 	bl	8010438 <unpack_sig_c>
    }
    USB_DEBUG_MSG("\r\n");
#endif

    /* Compute CRH(CRH(rho, t1), msg) */
    crh(mu, pk, CRYPTO_PUBLICKEYBYTES);
 801327c:	f507 50a9 	add.w	r0, r7, #5408	; 0x1520
 8013280:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8013284:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8013288:	f102 0208 	add.w	r2, r2, #8
 801328c:	6812      	ldr	r2, [r2, #0]
 801328e:	2130      	movs	r1, #48	; 0x30
 8013290:	f7fc fd30 	bl	800fcf4 <pqcrystals_fips202_ref_shake256>
    shake256_init(&state);
 8013294:	f107 0318 	add.w	r3, r7, #24
 8013298:	3b08      	subs	r3, #8
 801329a:	4618      	mov	r0, r3
 801329c:	f7fc fccb 	bl	800fc36 <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, mu, CRHBYTES);
 80132a0:	f507 51a9 	add.w	r1, r7, #5408	; 0x1520
 80132a4:	f107 0318 	add.w	r3, r7, #24
 80132a8:	3b08      	subs	r3, #8
 80132aa:	2230      	movs	r2, #48	; 0x30
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fc fccd 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, m, mlen);
 80132b2:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80132b6:	f6a3 0258 	subw	r2, r3, #2136	; 0x858
 80132ba:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80132be:	f6a3 0154 	subw	r1, r3, #2132	; 0x854
 80132c2:	f107 0318 	add.w	r3, r7, #24
 80132c6:	3b08      	subs	r3, #8
 80132c8:	6812      	ldr	r2, [r2, #0]
 80132ca:	6809      	ldr	r1, [r1, #0]
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fc fcbd 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 80132d2:	f107 0318 	add.w	r3, r7, #24
 80132d6:	3b08      	subs	r3, #8
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fc fccf 	bl	800fc7c <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(mu, CRHBYTES, &state);
 80132de:	f107 0318 	add.w	r3, r7, #24
 80132e2:	3b08      	subs	r3, #8
 80132e4:	f507 50a9 	add.w	r0, r7, #5408	; 0x1520
 80132e8:	461a      	mov	r2, r3
 80132ea:	2130      	movs	r1, #48	; 0x30
 80132ec:	f7fc fcea 	bl	800fcc4 <pqcrystals_fips202_ref_shake256_squeeze>
#ifdef TIME_BENCHMARK
    elapsed_time_start(VERIFY_RECONSTRUC_W1_TIMESTAMP);
#endif

    /* Matrix-vector multiplication; compute Az - c2^dt1 */
    polyvec_reconstruct_w1_montgomery(&w1, sig, pk);
 80132f0:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80132f4:	f6a3 014c 	subw	r1, r3, #2124	; 0x84c
 80132f8:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80132fc:	3b18      	subs	r3, #24
 80132fe:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8013302:	f102 0208 	add.w	r2, r2, #8
 8013306:	6812      	ldr	r2, [r2, #0]
 8013308:	6809      	ldr	r1, [r1, #0]
 801330a:	4618      	mov	r0, r3
 801330c:	f7ff f827 	bl	801235e <polyvec_reconstruct_w1_montgomery>

    /* Reconstruct w1 */
    polyveck_caddq(&w1);
 8013310:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8013314:	3b18      	subs	r3, #24
 8013316:	4618      	mov	r0, r3
 8013318:	f7ff f994 	bl	8012644 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
    polyveck_use_hint_r(&w1, &w1, h);
 801331c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8013320:	3a18      	subs	r2, #24
 8013322:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8013326:	3918      	subs	r1, #24
 8013328:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801332c:	3b18      	subs	r3, #24
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff fac8 	bl	80128c4 <polyveck_use_hint_r>
    polyveck_pack_w1(buf, &w1);
 8013334:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8013338:	3b18      	subs	r3, #24
 801333a:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 801333e:	f102 0210 	add.w	r2, r2, #16
 8013342:	4619      	mov	r1, r3
 8013344:	4610      	mov	r0, r2
 8013346:	f7ff fae0 	bl	801290a <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>
    }
    USB_DEBUG_MSG("\r\n");
#endif

    /* Call random oracle and verify challenge */
    shake256_init(&state);
 801334a:	f107 0318 	add.w	r3, r7, #24
 801334e:	3b08      	subs	r3, #8
 8013350:	4618      	mov	r0, r3
 8013352:	f7fc fc70 	bl	800fc36 <pqcrystals_fips202_ref_shake256_init>
    shake256_absorb(&state, mu, CRHBYTES);
 8013356:	f507 51a9 	add.w	r1, r7, #5408	; 0x1520
 801335a:	f107 0318 	add.w	r3, r7, #24
 801335e:	3b08      	subs	r3, #8
 8013360:	2230      	movs	r2, #48	; 0x30
 8013362:	4618      	mov	r0, r3
 8013364:	f7fc fc72 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_absorb(&state, buf, K * POLYW1_PACKEDBYTES);
 8013368:	f507 51aa 	add.w	r1, r7, #5440	; 0x1540
 801336c:	f101 0110 	add.w	r1, r1, #16
 8013370:	f107 0318 	add.w	r3, r7, #24
 8013374:	3b08      	subs	r3, #8
 8013376:	f44f 7240 	mov.w	r2, #768	; 0x300
 801337a:	4618      	mov	r0, r3
 801337c:	f7fc fc66 	bl	800fc4c <pqcrystals_fips202_ref_shake256_absorb>
    shake256_finalize(&state);
 8013380:	f107 0318 	add.w	r3, r7, #24
 8013384:	3b08      	subs	r3, #8
 8013386:	4618      	mov	r0, r3
 8013388:	f7fc fc78 	bl	800fc7c <pqcrystals_fips202_ref_shake256_finalize>
    shake256_squeeze(c2, SEEDBYTES, &state);
 801338c:	f107 0318 	add.w	r3, r7, #24
 8013390:	3b08      	subs	r3, #8
 8013392:	f507 50a8 	add.w	r0, r7, #5376	; 0x1500
 8013396:	461a      	mov	r2, r3
 8013398:	2120      	movs	r1, #32
 801339a:	f7fc fc93 	bl	800fcc4 <pqcrystals_fips202_ref_shake256_squeeze>
        USB_DEBUG_MSG("%d", c2[k]);
    }
    USB_DEBUG_MSG("\r\n");
#endif

    for (i = 0; i < SEEDBYTES; ++i) {
 801339e:	2300      	movs	r3, #0
 80133a0:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80133a4:	f102 0214 	add.w	r2, r2, #20
 80133a8:	6013      	str	r3, [r2, #0]
 80133aa:	e028      	b.n	80133fe <pqcrystals_dilithium2aes_r_ref_verify+0x232>
        if (c[i] != c2[i])
 80133ac:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80133b0:	f103 0318 	add.w	r3, r3, #24
 80133b4:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 80133b8:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80133bc:	f103 0314 	add.w	r3, r3, #20
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	4413      	add	r3, r2
 80133c4:	781a      	ldrb	r2, [r3, #0]
 80133c6:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80133ca:	f103 0318 	add.w	r3, r3, #24
 80133ce:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 80133d2:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80133d6:	f103 0314 	add.w	r3, r3, #20
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	440b      	add	r3, r1
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d001      	beq.n	80133e8 <pqcrystals_dilithium2aes_r_ref_verify+0x21c>
            return 6;
 80133e4:	2306      	movs	r3, #6
 80133e6:	e012      	b.n	801340e <pqcrystals_dilithium2aes_r_ref_verify+0x242>
    for (i = 0; i < SEEDBYTES; ++i) {
 80133e8:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80133ec:	f103 0314 	add.w	r3, r3, #20
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	3301      	adds	r3, #1
 80133f4:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80133f8:	f102 0214 	add.w	r2, r2, #20
 80133fc:	6013      	str	r3, [r2, #0]
 80133fe:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8013402:	f103 0314 	add.w	r3, r3, #20
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b1f      	cmp	r3, #31
 801340a:	d9cf      	bls.n	80133ac <pqcrystals_dilithium2aes_r_ref_verify+0x1e0>
          return -1;
  }

#endif

  return 0;
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	f507 57c2 	add.w	r7, r7, #6208	; 0x1840
 8013414:	371c      	adds	r7, #28
 8013416:	46bd      	mov	sp, r7
 8013418:	bd90      	pop	{r4, r7, pc}

0801341a <pqcrystals_dilithium2aes_r_ref_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
 801341a:	b580      	push	{r7, lr}
 801341c:	b088      	sub	sp, #32
 801341e:	af02      	add	r7, sp, #8
 8013420:	60f8      	str	r0, [r7, #12]
 8013422:	60b9      	str	r1, [r7, #8]
 8013424:	607a      	str	r2, [r7, #4]
 8013426:	603b      	str	r3, [r7, #0]
  size_t i;
  int err_code = -1;
 8013428:	f04f 33ff 	mov.w	r3, #4294967295
 801342c:	613b      	str	r3, [r7, #16]

  if(smlen < CRYPTO_BYTES)
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	f640 1273 	movw	r2, #2419	; 0x973
 8013434:	4293      	cmp	r3, r2
 8013436:	d92c      	bls.n	8013492 <pqcrystals_dilithium2aes_r_ref_open+0x78>
    goto badsig;

  *mlen = smlen - CRYPTO_BYTES;
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	f6a3 1274 	subw	r2, r3, #2420	; 0x974
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	601a      	str	r2, [r3, #0]
  err_code = crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	6819      	ldr	r1, [r3, #0]
 801344c:	6a3b      	ldr	r3, [r7, #32]
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	460b      	mov	r3, r1
 8013452:	f640 1174 	movw	r1, #2420	; 0x974
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f7ff feb8 	bl	80131cc <pqcrystals_dilithium2aes_r_ref_verify>
 801345c:	6138      	str	r0, [r7, #16]
  if(err_code)
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d118      	bne.n	8013496 <pqcrystals_dilithium2aes_r_ref_open+0x7c>
    goto badsig;
  else {
    /* All good, copy msg, return 0 */
    for(i = 0; i < *mlen; ++i)
 8013464:	2300      	movs	r3, #0
 8013466:	617b      	str	r3, [r7, #20]
 8013468:	e00c      	b.n	8013484 <pqcrystals_dilithium2aes_r_ref_open+0x6a>
      m[i] = sm[CRYPTO_BYTES + i];
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	f603 1374 	addw	r3, r3, #2420	; 0x974
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	441a      	add	r2, r3
 8013474:	68f9      	ldr	r1, [r7, #12]
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	440b      	add	r3, r1
 801347a:	7812      	ldrb	r2, [r2, #0]
 801347c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < *mlen; ++i)
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	3301      	adds	r3, #1
 8013482:	617b      	str	r3, [r7, #20]
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	697a      	ldr	r2, [r7, #20]
 801348a:	429a      	cmp	r2, r3
 801348c:	d3ed      	bcc.n	801346a <pqcrystals_dilithium2aes_r_ref_open+0x50>
    return 0;
 801348e:	2300      	movs	r3, #0
 8013490:	e016      	b.n	80134c0 <pqcrystals_dilithium2aes_r_ref_open+0xa6>
    goto badsig;
 8013492:	bf00      	nop
 8013494:	e000      	b.n	8013498 <pqcrystals_dilithium2aes_r_ref_open+0x7e>
    goto badsig;
 8013496:	bf00      	nop
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	f04f 32ff 	mov.w	r2, #4294967295
 801349e:	601a      	str	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 80134a0:	2300      	movs	r3, #0
 80134a2:	617b      	str	r3, [r7, #20]
 80134a4:	e007      	b.n	80134b6 <pqcrystals_dilithium2aes_r_ref_open+0x9c>
    m[i] = 0;
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	4413      	add	r3, r2
 80134ac:	2200      	movs	r2, #0
 80134ae:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	3301      	adds	r3, #1
 80134b4:	617b      	str	r3, [r7, #20]
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d3f3      	bcc.n	80134a6 <pqcrystals_dilithium2aes_r_ref_open+0x8c>

  return err_code;
 80134be:	693b      	ldr	r3, [r7, #16]
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3718      	adds	r7, #24
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <dilithium_stm_stream_aes256ctr_init>:
CRYP_HandleTypeDef hcryp_state;

HAL_StatusTypeDef dilithium_stm_stream_aes256ctr_init(stm_aes256ctr_ctx* state,
										const uint8_t key[32],
										uint16_t nonce)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	4613      	mov	r3, r2
 80134d4:	80fb      	strh	r3, [r7, #6]
	uint32_t n = nonce;
 80134d6:	88fb      	ldrh	r3, [r7, #6]
 80134d8:	617b      	str	r3, [r7, #20]
	state->ivw[0] = n;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	697a      	ldr	r2, [r7, #20]
 80134de:	601a      	str	r2, [r3, #0]
	state->ivw[1] = n << 8;
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	021a      	lsls	r2, r3, #8
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	605a      	str	r2, [r3, #4]
	state->ivw[2] = n << 16;
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	041a      	lsls	r2, r3, #16
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	609a      	str	r2, [r3, #8]
	state->ivw[3] = (n << 24 )| (n >> 8 );
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	ea4f 2233 	mov.w	r2, r3, ror #8
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	60da      	str	r2, [r3, #12]

	uint32_t error = 0;
 80134fa:	2300      	movs	r3, #0
 80134fc:	613b      	str	r3, [r7, #16]
	if ((error = HAL_CRYP_DeInit(&hcryp_state)) != HAL_OK)
 80134fe:	4818      	ldr	r0, [pc, #96]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 8013500:	f7ee f8ca 	bl	8001698 <HAL_CRYP_DeInit>
 8013504:	4603      	mov	r3, r0
 8013506:	613b      	str	r3, [r7, #16]
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d002      	beq.n	8013514 <dilithium_stm_stream_aes256ctr_init+0x4c>
		return error;
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	b2db      	uxtb	r3, r3
 8013512:	e021      	b.n	8013558 <dilithium_stm_stream_aes256ctr_init+0x90>

	hcryp_state.Init.DataType  = CRYP_DATATYPE_1B;
 8013514:	4b12      	ldr	r3, [pc, #72]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 8013516:	2206      	movs	r2, #6
 8013518:	605a      	str	r2, [r3, #4]
	hcryp_state.Init.KeySize   = CRYP_KEYSIZE_256B;
 801351a:	4b11      	ldr	r3, [pc, #68]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 801351c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8013520:	609a      	str	r2, [r3, #8]
	hcryp_state.Init.Algorithm = CRYP_AES_CTR;
 8013522:	4b0f      	ldr	r3, [pc, #60]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 8013524:	2240      	movs	r2, #64	; 0x40
 8013526:	615a      	str	r2, [r3, #20]
	hcryp_state.Init.pKey      = (uint32_t *)key;
 8013528:	4a0d      	ldr	r2, [pc, #52]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	60d3      	str	r3, [r2, #12]
	hcryp_state.Init.pInitVect =  state->ivw;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	4a0b      	ldr	r2, [pc, #44]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 8013532:	6113      	str	r3, [r2, #16]
	hcryp_state.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8013534:	4b0a      	ldr	r3, [pc, #40]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 8013536:	2200      	movs	r2, #0
 8013538:	625a      	str	r2, [r3, #36]	; 0x24
	hcryp_state.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 801353a:	4b09      	ldr	r3, [pc, #36]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 801353c:	2201      	movs	r2, #1
 801353e:	62da      	str	r2, [r3, #44]	; 0x2c

	if ((error = HAL_CRYP_Init(&hcryp_state)) != HAL_OK)
 8013540:	4807      	ldr	r0, [pc, #28]	; (8013560 <dilithium_stm_stream_aes256ctr_init+0x98>)
 8013542:	f7ee f86e 	bl	8001622 <HAL_CRYP_Init>
 8013546:	4603      	mov	r3, r0
 8013548:	613b      	str	r3, [r7, #16]
 801354a:	693b      	ldr	r3, [r7, #16]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d002      	beq.n	8013556 <dilithium_stm_stream_aes256ctr_init+0x8e>
		return error;
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	b2db      	uxtb	r3, r3
 8013554:	e000      	b.n	8013558 <dilithium_stm_stream_aes256ctr_init+0x90>

	return HAL_OK;
 8013556:	2300      	movs	r3, #0
}
 8013558:	4618      	mov	r0, r3
 801355a:	3718      	adds	r7, #24
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	20001cec 	.word	0x20001cec

08013564 <dilithium_stm_stream_aes256ctr_squeezeblocks>:


void dilithium_stm_stream_aes256ctr_squeezeblocks(uint8_t *out,
        										size_t nblocks,
												stm_aes256ctr_ctx* state)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b086      	sub	sp, #24
 8013568:	af02      	add	r7, sp, #8
 801356a:	60f8      	str	r0, [r7, #12]
 801356c:	60b9      	str	r1, [r7, #8]
 801356e:	607a      	str	r2, [r7, #4]
	HAL_CRYP_Encrypt(&hcryp_state, (uint32_t *)out, nblocks*BLOCKBYTES/4, (uint32_t *)out, TIMEOUT_VALUE);
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	019b      	lsls	r3, r3, #6
 8013574:	089b      	lsrs	r3, r3, #2
 8013576:	b29a      	uxth	r2, r3
 8013578:	23ff      	movs	r3, #255	; 0xff
 801357a:	9300      	str	r3, [sp, #0]
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	68f9      	ldr	r1, [r7, #12]
 8013580:	4803      	ldr	r0, [pc, #12]	; (8013590 <dilithium_stm_stream_aes256ctr_squeezeblocks+0x2c>)
 8013582:	f7ee f8b7 	bl	80016f4 <HAL_CRYP_Encrypt>
}
 8013586:	bf00      	nop
 8013588:	3710      	adds	r7, #16
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	20001cec 	.word	0x20001cec

08013594 <Delay_94ns>:
Delay approx. 100 ns (93.75) at 64 MHz
Error is -6.25%
Test for 20 ms, takes 18.7 ms at 64 MHz
*/
void Delay_94ns(uint32_t lulDelay)
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
	while(lulDelay) // 2 cycles
 801359c:	e005      	b.n	80135aa <Delay_94ns+0x16>
	{
		--lulDelay; // 1 cycle
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	3b01      	subs	r3, #1
 80135a2:	607b      	str	r3, [r7, #4]
		asm("NOP"); // 1 cycles
 80135a4:	bf00      	nop
		asm("NOP"); // 1 cycle
 80135a6:	bf00      	nop
		asm("NOP"); // 1 cycle
 80135a8:	bf00      	nop
	while(lulDelay) // 2 cycles
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d1f6      	bne.n	801359e <Delay_94ns+0xa>
	}
}
 80135b0:	bf00      	nop
 80135b2:	bf00      	nop
 80135b4:	370c      	adds	r7, #12
 80135b6:	46bd      	mov	sp, r7
 80135b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135bc:	4770      	bx	lr
	...

080135c0 <__errno>:
 80135c0:	4b01      	ldr	r3, [pc, #4]	; (80135c8 <__errno+0x8>)
 80135c2:	6818      	ldr	r0, [r3, #0]
 80135c4:	4770      	bx	lr
 80135c6:	bf00      	nop
 80135c8:	20000108 	.word	0x20000108

080135cc <__libc_init_array>:
 80135cc:	b570      	push	{r4, r5, r6, lr}
 80135ce:	4d0d      	ldr	r5, [pc, #52]	; (8013604 <__libc_init_array+0x38>)
 80135d0:	4c0d      	ldr	r4, [pc, #52]	; (8013608 <__libc_init_array+0x3c>)
 80135d2:	1b64      	subs	r4, r4, r5
 80135d4:	10a4      	asrs	r4, r4, #2
 80135d6:	2600      	movs	r6, #0
 80135d8:	42a6      	cmp	r6, r4
 80135da:	d109      	bne.n	80135f0 <__libc_init_array+0x24>
 80135dc:	4d0b      	ldr	r5, [pc, #44]	; (801360c <__libc_init_array+0x40>)
 80135de:	4c0c      	ldr	r4, [pc, #48]	; (8013610 <__libc_init_array+0x44>)
 80135e0:	f000 fc8e 	bl	8013f00 <_init>
 80135e4:	1b64      	subs	r4, r4, r5
 80135e6:	10a4      	asrs	r4, r4, #2
 80135e8:	2600      	movs	r6, #0
 80135ea:	42a6      	cmp	r6, r4
 80135ec:	d105      	bne.n	80135fa <__libc_init_array+0x2e>
 80135ee:	bd70      	pop	{r4, r5, r6, pc}
 80135f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80135f4:	4798      	blx	r3
 80135f6:	3601      	adds	r6, #1
 80135f8:	e7ee      	b.n	80135d8 <__libc_init_array+0xc>
 80135fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80135fe:	4798      	blx	r3
 8013600:	3601      	adds	r6, #1
 8013602:	e7f2      	b.n	80135ea <__libc_init_array+0x1e>
 8013604:	08014694 	.word	0x08014694
 8013608:	08014694 	.word	0x08014694
 801360c:	08014694 	.word	0x08014694
 8013610:	08014698 	.word	0x08014698

08013614 <memcpy>:
 8013614:	440a      	add	r2, r1
 8013616:	4291      	cmp	r1, r2
 8013618:	f100 33ff 	add.w	r3, r0, #4294967295
 801361c:	d100      	bne.n	8013620 <memcpy+0xc>
 801361e:	4770      	bx	lr
 8013620:	b510      	push	{r4, lr}
 8013622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013626:	f803 4f01 	strb.w	r4, [r3, #1]!
 801362a:	4291      	cmp	r1, r2
 801362c:	d1f9      	bne.n	8013622 <memcpy+0xe>
 801362e:	bd10      	pop	{r4, pc}

08013630 <memset>:
 8013630:	4402      	add	r2, r0
 8013632:	4603      	mov	r3, r0
 8013634:	4293      	cmp	r3, r2
 8013636:	d100      	bne.n	801363a <memset+0xa>
 8013638:	4770      	bx	lr
 801363a:	f803 1b01 	strb.w	r1, [r3], #1
 801363e:	e7f9      	b.n	8013634 <memset+0x4>

08013640 <siprintf>:
 8013640:	b40e      	push	{r1, r2, r3}
 8013642:	b500      	push	{lr}
 8013644:	b09c      	sub	sp, #112	; 0x70
 8013646:	ab1d      	add	r3, sp, #116	; 0x74
 8013648:	9002      	str	r0, [sp, #8]
 801364a:	9006      	str	r0, [sp, #24]
 801364c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013650:	4809      	ldr	r0, [pc, #36]	; (8013678 <siprintf+0x38>)
 8013652:	9107      	str	r1, [sp, #28]
 8013654:	9104      	str	r1, [sp, #16]
 8013656:	4909      	ldr	r1, [pc, #36]	; (801367c <siprintf+0x3c>)
 8013658:	f853 2b04 	ldr.w	r2, [r3], #4
 801365c:	9105      	str	r1, [sp, #20]
 801365e:	6800      	ldr	r0, [r0, #0]
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	a902      	add	r1, sp, #8
 8013664:	f000 f868 	bl	8013738 <_svfiprintf_r>
 8013668:	9b02      	ldr	r3, [sp, #8]
 801366a:	2200      	movs	r2, #0
 801366c:	701a      	strb	r2, [r3, #0]
 801366e:	b01c      	add	sp, #112	; 0x70
 8013670:	f85d eb04 	ldr.w	lr, [sp], #4
 8013674:	b003      	add	sp, #12
 8013676:	4770      	bx	lr
 8013678:	20000108 	.word	0x20000108
 801367c:	ffff0208 	.word	0xffff0208

08013680 <__ssputs_r>:
 8013680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013684:	688e      	ldr	r6, [r1, #8]
 8013686:	429e      	cmp	r6, r3
 8013688:	4682      	mov	sl, r0
 801368a:	460c      	mov	r4, r1
 801368c:	4690      	mov	r8, r2
 801368e:	461f      	mov	r7, r3
 8013690:	d838      	bhi.n	8013704 <__ssputs_r+0x84>
 8013692:	898a      	ldrh	r2, [r1, #12]
 8013694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013698:	d032      	beq.n	8013700 <__ssputs_r+0x80>
 801369a:	6825      	ldr	r5, [r4, #0]
 801369c:	6909      	ldr	r1, [r1, #16]
 801369e:	eba5 0901 	sub.w	r9, r5, r1
 80136a2:	6965      	ldr	r5, [r4, #20]
 80136a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80136ac:	3301      	adds	r3, #1
 80136ae:	444b      	add	r3, r9
 80136b0:	106d      	asrs	r5, r5, #1
 80136b2:	429d      	cmp	r5, r3
 80136b4:	bf38      	it	cc
 80136b6:	461d      	movcc	r5, r3
 80136b8:	0553      	lsls	r3, r2, #21
 80136ba:	d531      	bpl.n	8013720 <__ssputs_r+0xa0>
 80136bc:	4629      	mov	r1, r5
 80136be:	f000 fb55 	bl	8013d6c <_malloc_r>
 80136c2:	4606      	mov	r6, r0
 80136c4:	b950      	cbnz	r0, 80136dc <__ssputs_r+0x5c>
 80136c6:	230c      	movs	r3, #12
 80136c8:	f8ca 3000 	str.w	r3, [sl]
 80136cc:	89a3      	ldrh	r3, [r4, #12]
 80136ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136d2:	81a3      	strh	r3, [r4, #12]
 80136d4:	f04f 30ff 	mov.w	r0, #4294967295
 80136d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136dc:	6921      	ldr	r1, [r4, #16]
 80136de:	464a      	mov	r2, r9
 80136e0:	f7ff ff98 	bl	8013614 <memcpy>
 80136e4:	89a3      	ldrh	r3, [r4, #12]
 80136e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80136ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136ee:	81a3      	strh	r3, [r4, #12]
 80136f0:	6126      	str	r6, [r4, #16]
 80136f2:	6165      	str	r5, [r4, #20]
 80136f4:	444e      	add	r6, r9
 80136f6:	eba5 0509 	sub.w	r5, r5, r9
 80136fa:	6026      	str	r6, [r4, #0]
 80136fc:	60a5      	str	r5, [r4, #8]
 80136fe:	463e      	mov	r6, r7
 8013700:	42be      	cmp	r6, r7
 8013702:	d900      	bls.n	8013706 <__ssputs_r+0x86>
 8013704:	463e      	mov	r6, r7
 8013706:	6820      	ldr	r0, [r4, #0]
 8013708:	4632      	mov	r2, r6
 801370a:	4641      	mov	r1, r8
 801370c:	f000 faa8 	bl	8013c60 <memmove>
 8013710:	68a3      	ldr	r3, [r4, #8]
 8013712:	1b9b      	subs	r3, r3, r6
 8013714:	60a3      	str	r3, [r4, #8]
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	4433      	add	r3, r6
 801371a:	6023      	str	r3, [r4, #0]
 801371c:	2000      	movs	r0, #0
 801371e:	e7db      	b.n	80136d8 <__ssputs_r+0x58>
 8013720:	462a      	mov	r2, r5
 8013722:	f000 fb97 	bl	8013e54 <_realloc_r>
 8013726:	4606      	mov	r6, r0
 8013728:	2800      	cmp	r0, #0
 801372a:	d1e1      	bne.n	80136f0 <__ssputs_r+0x70>
 801372c:	6921      	ldr	r1, [r4, #16]
 801372e:	4650      	mov	r0, sl
 8013730:	f000 fab0 	bl	8013c94 <_free_r>
 8013734:	e7c7      	b.n	80136c6 <__ssputs_r+0x46>
	...

08013738 <_svfiprintf_r>:
 8013738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801373c:	4698      	mov	r8, r3
 801373e:	898b      	ldrh	r3, [r1, #12]
 8013740:	061b      	lsls	r3, r3, #24
 8013742:	b09d      	sub	sp, #116	; 0x74
 8013744:	4607      	mov	r7, r0
 8013746:	460d      	mov	r5, r1
 8013748:	4614      	mov	r4, r2
 801374a:	d50e      	bpl.n	801376a <_svfiprintf_r+0x32>
 801374c:	690b      	ldr	r3, [r1, #16]
 801374e:	b963      	cbnz	r3, 801376a <_svfiprintf_r+0x32>
 8013750:	2140      	movs	r1, #64	; 0x40
 8013752:	f000 fb0b 	bl	8013d6c <_malloc_r>
 8013756:	6028      	str	r0, [r5, #0]
 8013758:	6128      	str	r0, [r5, #16]
 801375a:	b920      	cbnz	r0, 8013766 <_svfiprintf_r+0x2e>
 801375c:	230c      	movs	r3, #12
 801375e:	603b      	str	r3, [r7, #0]
 8013760:	f04f 30ff 	mov.w	r0, #4294967295
 8013764:	e0d1      	b.n	801390a <_svfiprintf_r+0x1d2>
 8013766:	2340      	movs	r3, #64	; 0x40
 8013768:	616b      	str	r3, [r5, #20]
 801376a:	2300      	movs	r3, #0
 801376c:	9309      	str	r3, [sp, #36]	; 0x24
 801376e:	2320      	movs	r3, #32
 8013770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013774:	f8cd 800c 	str.w	r8, [sp, #12]
 8013778:	2330      	movs	r3, #48	; 0x30
 801377a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013924 <_svfiprintf_r+0x1ec>
 801377e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013782:	f04f 0901 	mov.w	r9, #1
 8013786:	4623      	mov	r3, r4
 8013788:	469a      	mov	sl, r3
 801378a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801378e:	b10a      	cbz	r2, 8013794 <_svfiprintf_r+0x5c>
 8013790:	2a25      	cmp	r2, #37	; 0x25
 8013792:	d1f9      	bne.n	8013788 <_svfiprintf_r+0x50>
 8013794:	ebba 0b04 	subs.w	fp, sl, r4
 8013798:	d00b      	beq.n	80137b2 <_svfiprintf_r+0x7a>
 801379a:	465b      	mov	r3, fp
 801379c:	4622      	mov	r2, r4
 801379e:	4629      	mov	r1, r5
 80137a0:	4638      	mov	r0, r7
 80137a2:	f7ff ff6d 	bl	8013680 <__ssputs_r>
 80137a6:	3001      	adds	r0, #1
 80137a8:	f000 80aa 	beq.w	8013900 <_svfiprintf_r+0x1c8>
 80137ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137ae:	445a      	add	r2, fp
 80137b0:	9209      	str	r2, [sp, #36]	; 0x24
 80137b2:	f89a 3000 	ldrb.w	r3, [sl]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 80a2 	beq.w	8013900 <_svfiprintf_r+0x1c8>
 80137bc:	2300      	movs	r3, #0
 80137be:	f04f 32ff 	mov.w	r2, #4294967295
 80137c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137c6:	f10a 0a01 	add.w	sl, sl, #1
 80137ca:	9304      	str	r3, [sp, #16]
 80137cc:	9307      	str	r3, [sp, #28]
 80137ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137d2:	931a      	str	r3, [sp, #104]	; 0x68
 80137d4:	4654      	mov	r4, sl
 80137d6:	2205      	movs	r2, #5
 80137d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137dc:	4851      	ldr	r0, [pc, #324]	; (8013924 <_svfiprintf_r+0x1ec>)
 80137de:	f7ec fcd7 	bl	8000190 <memchr>
 80137e2:	9a04      	ldr	r2, [sp, #16]
 80137e4:	b9d8      	cbnz	r0, 801381e <_svfiprintf_r+0xe6>
 80137e6:	06d0      	lsls	r0, r2, #27
 80137e8:	bf44      	itt	mi
 80137ea:	2320      	movmi	r3, #32
 80137ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137f0:	0711      	lsls	r1, r2, #28
 80137f2:	bf44      	itt	mi
 80137f4:	232b      	movmi	r3, #43	; 0x2b
 80137f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137fa:	f89a 3000 	ldrb.w	r3, [sl]
 80137fe:	2b2a      	cmp	r3, #42	; 0x2a
 8013800:	d015      	beq.n	801382e <_svfiprintf_r+0xf6>
 8013802:	9a07      	ldr	r2, [sp, #28]
 8013804:	4654      	mov	r4, sl
 8013806:	2000      	movs	r0, #0
 8013808:	f04f 0c0a 	mov.w	ip, #10
 801380c:	4621      	mov	r1, r4
 801380e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013812:	3b30      	subs	r3, #48	; 0x30
 8013814:	2b09      	cmp	r3, #9
 8013816:	d94e      	bls.n	80138b6 <_svfiprintf_r+0x17e>
 8013818:	b1b0      	cbz	r0, 8013848 <_svfiprintf_r+0x110>
 801381a:	9207      	str	r2, [sp, #28]
 801381c:	e014      	b.n	8013848 <_svfiprintf_r+0x110>
 801381e:	eba0 0308 	sub.w	r3, r0, r8
 8013822:	fa09 f303 	lsl.w	r3, r9, r3
 8013826:	4313      	orrs	r3, r2
 8013828:	9304      	str	r3, [sp, #16]
 801382a:	46a2      	mov	sl, r4
 801382c:	e7d2      	b.n	80137d4 <_svfiprintf_r+0x9c>
 801382e:	9b03      	ldr	r3, [sp, #12]
 8013830:	1d19      	adds	r1, r3, #4
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	9103      	str	r1, [sp, #12]
 8013836:	2b00      	cmp	r3, #0
 8013838:	bfbb      	ittet	lt
 801383a:	425b      	neglt	r3, r3
 801383c:	f042 0202 	orrlt.w	r2, r2, #2
 8013840:	9307      	strge	r3, [sp, #28]
 8013842:	9307      	strlt	r3, [sp, #28]
 8013844:	bfb8      	it	lt
 8013846:	9204      	strlt	r2, [sp, #16]
 8013848:	7823      	ldrb	r3, [r4, #0]
 801384a:	2b2e      	cmp	r3, #46	; 0x2e
 801384c:	d10c      	bne.n	8013868 <_svfiprintf_r+0x130>
 801384e:	7863      	ldrb	r3, [r4, #1]
 8013850:	2b2a      	cmp	r3, #42	; 0x2a
 8013852:	d135      	bne.n	80138c0 <_svfiprintf_r+0x188>
 8013854:	9b03      	ldr	r3, [sp, #12]
 8013856:	1d1a      	adds	r2, r3, #4
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	9203      	str	r2, [sp, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	bfb8      	it	lt
 8013860:	f04f 33ff 	movlt.w	r3, #4294967295
 8013864:	3402      	adds	r4, #2
 8013866:	9305      	str	r3, [sp, #20]
 8013868:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013934 <_svfiprintf_r+0x1fc>
 801386c:	7821      	ldrb	r1, [r4, #0]
 801386e:	2203      	movs	r2, #3
 8013870:	4650      	mov	r0, sl
 8013872:	f7ec fc8d 	bl	8000190 <memchr>
 8013876:	b140      	cbz	r0, 801388a <_svfiprintf_r+0x152>
 8013878:	2340      	movs	r3, #64	; 0x40
 801387a:	eba0 000a 	sub.w	r0, r0, sl
 801387e:	fa03 f000 	lsl.w	r0, r3, r0
 8013882:	9b04      	ldr	r3, [sp, #16]
 8013884:	4303      	orrs	r3, r0
 8013886:	3401      	adds	r4, #1
 8013888:	9304      	str	r3, [sp, #16]
 801388a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801388e:	4826      	ldr	r0, [pc, #152]	; (8013928 <_svfiprintf_r+0x1f0>)
 8013890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013894:	2206      	movs	r2, #6
 8013896:	f7ec fc7b 	bl	8000190 <memchr>
 801389a:	2800      	cmp	r0, #0
 801389c:	d038      	beq.n	8013910 <_svfiprintf_r+0x1d8>
 801389e:	4b23      	ldr	r3, [pc, #140]	; (801392c <_svfiprintf_r+0x1f4>)
 80138a0:	bb1b      	cbnz	r3, 80138ea <_svfiprintf_r+0x1b2>
 80138a2:	9b03      	ldr	r3, [sp, #12]
 80138a4:	3307      	adds	r3, #7
 80138a6:	f023 0307 	bic.w	r3, r3, #7
 80138aa:	3308      	adds	r3, #8
 80138ac:	9303      	str	r3, [sp, #12]
 80138ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138b0:	4433      	add	r3, r6
 80138b2:	9309      	str	r3, [sp, #36]	; 0x24
 80138b4:	e767      	b.n	8013786 <_svfiprintf_r+0x4e>
 80138b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80138ba:	460c      	mov	r4, r1
 80138bc:	2001      	movs	r0, #1
 80138be:	e7a5      	b.n	801380c <_svfiprintf_r+0xd4>
 80138c0:	2300      	movs	r3, #0
 80138c2:	3401      	adds	r4, #1
 80138c4:	9305      	str	r3, [sp, #20]
 80138c6:	4619      	mov	r1, r3
 80138c8:	f04f 0c0a 	mov.w	ip, #10
 80138cc:	4620      	mov	r0, r4
 80138ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138d2:	3a30      	subs	r2, #48	; 0x30
 80138d4:	2a09      	cmp	r2, #9
 80138d6:	d903      	bls.n	80138e0 <_svfiprintf_r+0x1a8>
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d0c5      	beq.n	8013868 <_svfiprintf_r+0x130>
 80138dc:	9105      	str	r1, [sp, #20]
 80138de:	e7c3      	b.n	8013868 <_svfiprintf_r+0x130>
 80138e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80138e4:	4604      	mov	r4, r0
 80138e6:	2301      	movs	r3, #1
 80138e8:	e7f0      	b.n	80138cc <_svfiprintf_r+0x194>
 80138ea:	ab03      	add	r3, sp, #12
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	462a      	mov	r2, r5
 80138f0:	4b0f      	ldr	r3, [pc, #60]	; (8013930 <_svfiprintf_r+0x1f8>)
 80138f2:	a904      	add	r1, sp, #16
 80138f4:	4638      	mov	r0, r7
 80138f6:	f3af 8000 	nop.w
 80138fa:	1c42      	adds	r2, r0, #1
 80138fc:	4606      	mov	r6, r0
 80138fe:	d1d6      	bne.n	80138ae <_svfiprintf_r+0x176>
 8013900:	89ab      	ldrh	r3, [r5, #12]
 8013902:	065b      	lsls	r3, r3, #25
 8013904:	f53f af2c 	bmi.w	8013760 <_svfiprintf_r+0x28>
 8013908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801390a:	b01d      	add	sp, #116	; 0x74
 801390c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013910:	ab03      	add	r3, sp, #12
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	462a      	mov	r2, r5
 8013916:	4b06      	ldr	r3, [pc, #24]	; (8013930 <_svfiprintf_r+0x1f8>)
 8013918:	a904      	add	r1, sp, #16
 801391a:	4638      	mov	r0, r7
 801391c:	f000 f87a 	bl	8013a14 <_printf_i>
 8013920:	e7eb      	b.n	80138fa <_svfiprintf_r+0x1c2>
 8013922:	bf00      	nop
 8013924:	08014658 	.word	0x08014658
 8013928:	08014662 	.word	0x08014662
 801392c:	00000000 	.word	0x00000000
 8013930:	08013681 	.word	0x08013681
 8013934:	0801465e 	.word	0x0801465e

08013938 <_printf_common>:
 8013938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801393c:	4616      	mov	r6, r2
 801393e:	4699      	mov	r9, r3
 8013940:	688a      	ldr	r2, [r1, #8]
 8013942:	690b      	ldr	r3, [r1, #16]
 8013944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013948:	4293      	cmp	r3, r2
 801394a:	bfb8      	it	lt
 801394c:	4613      	movlt	r3, r2
 801394e:	6033      	str	r3, [r6, #0]
 8013950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013954:	4607      	mov	r7, r0
 8013956:	460c      	mov	r4, r1
 8013958:	b10a      	cbz	r2, 801395e <_printf_common+0x26>
 801395a:	3301      	adds	r3, #1
 801395c:	6033      	str	r3, [r6, #0]
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	0699      	lsls	r1, r3, #26
 8013962:	bf42      	ittt	mi
 8013964:	6833      	ldrmi	r3, [r6, #0]
 8013966:	3302      	addmi	r3, #2
 8013968:	6033      	strmi	r3, [r6, #0]
 801396a:	6825      	ldr	r5, [r4, #0]
 801396c:	f015 0506 	ands.w	r5, r5, #6
 8013970:	d106      	bne.n	8013980 <_printf_common+0x48>
 8013972:	f104 0a19 	add.w	sl, r4, #25
 8013976:	68e3      	ldr	r3, [r4, #12]
 8013978:	6832      	ldr	r2, [r6, #0]
 801397a:	1a9b      	subs	r3, r3, r2
 801397c:	42ab      	cmp	r3, r5
 801397e:	dc26      	bgt.n	80139ce <_printf_common+0x96>
 8013980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013984:	1e13      	subs	r3, r2, #0
 8013986:	6822      	ldr	r2, [r4, #0]
 8013988:	bf18      	it	ne
 801398a:	2301      	movne	r3, #1
 801398c:	0692      	lsls	r2, r2, #26
 801398e:	d42b      	bmi.n	80139e8 <_printf_common+0xb0>
 8013990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013994:	4649      	mov	r1, r9
 8013996:	4638      	mov	r0, r7
 8013998:	47c0      	blx	r8
 801399a:	3001      	adds	r0, #1
 801399c:	d01e      	beq.n	80139dc <_printf_common+0xa4>
 801399e:	6823      	ldr	r3, [r4, #0]
 80139a0:	68e5      	ldr	r5, [r4, #12]
 80139a2:	6832      	ldr	r2, [r6, #0]
 80139a4:	f003 0306 	and.w	r3, r3, #6
 80139a8:	2b04      	cmp	r3, #4
 80139aa:	bf08      	it	eq
 80139ac:	1aad      	subeq	r5, r5, r2
 80139ae:	68a3      	ldr	r3, [r4, #8]
 80139b0:	6922      	ldr	r2, [r4, #16]
 80139b2:	bf0c      	ite	eq
 80139b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139b8:	2500      	movne	r5, #0
 80139ba:	4293      	cmp	r3, r2
 80139bc:	bfc4      	itt	gt
 80139be:	1a9b      	subgt	r3, r3, r2
 80139c0:	18ed      	addgt	r5, r5, r3
 80139c2:	2600      	movs	r6, #0
 80139c4:	341a      	adds	r4, #26
 80139c6:	42b5      	cmp	r5, r6
 80139c8:	d11a      	bne.n	8013a00 <_printf_common+0xc8>
 80139ca:	2000      	movs	r0, #0
 80139cc:	e008      	b.n	80139e0 <_printf_common+0xa8>
 80139ce:	2301      	movs	r3, #1
 80139d0:	4652      	mov	r2, sl
 80139d2:	4649      	mov	r1, r9
 80139d4:	4638      	mov	r0, r7
 80139d6:	47c0      	blx	r8
 80139d8:	3001      	adds	r0, #1
 80139da:	d103      	bne.n	80139e4 <_printf_common+0xac>
 80139dc:	f04f 30ff 	mov.w	r0, #4294967295
 80139e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139e4:	3501      	adds	r5, #1
 80139e6:	e7c6      	b.n	8013976 <_printf_common+0x3e>
 80139e8:	18e1      	adds	r1, r4, r3
 80139ea:	1c5a      	adds	r2, r3, #1
 80139ec:	2030      	movs	r0, #48	; 0x30
 80139ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80139f2:	4422      	add	r2, r4
 80139f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139fc:	3302      	adds	r3, #2
 80139fe:	e7c7      	b.n	8013990 <_printf_common+0x58>
 8013a00:	2301      	movs	r3, #1
 8013a02:	4622      	mov	r2, r4
 8013a04:	4649      	mov	r1, r9
 8013a06:	4638      	mov	r0, r7
 8013a08:	47c0      	blx	r8
 8013a0a:	3001      	adds	r0, #1
 8013a0c:	d0e6      	beq.n	80139dc <_printf_common+0xa4>
 8013a0e:	3601      	adds	r6, #1
 8013a10:	e7d9      	b.n	80139c6 <_printf_common+0x8e>
	...

08013a14 <_printf_i>:
 8013a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a18:	7e0f      	ldrb	r7, [r1, #24]
 8013a1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013a1c:	2f78      	cmp	r7, #120	; 0x78
 8013a1e:	4691      	mov	r9, r2
 8013a20:	4680      	mov	r8, r0
 8013a22:	460c      	mov	r4, r1
 8013a24:	469a      	mov	sl, r3
 8013a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013a2a:	d807      	bhi.n	8013a3c <_printf_i+0x28>
 8013a2c:	2f62      	cmp	r7, #98	; 0x62
 8013a2e:	d80a      	bhi.n	8013a46 <_printf_i+0x32>
 8013a30:	2f00      	cmp	r7, #0
 8013a32:	f000 80d8 	beq.w	8013be6 <_printf_i+0x1d2>
 8013a36:	2f58      	cmp	r7, #88	; 0x58
 8013a38:	f000 80a3 	beq.w	8013b82 <_printf_i+0x16e>
 8013a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a44:	e03a      	b.n	8013abc <_printf_i+0xa8>
 8013a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a4a:	2b15      	cmp	r3, #21
 8013a4c:	d8f6      	bhi.n	8013a3c <_printf_i+0x28>
 8013a4e:	a101      	add	r1, pc, #4	; (adr r1, 8013a54 <_printf_i+0x40>)
 8013a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a54:	08013aad 	.word	0x08013aad
 8013a58:	08013ac1 	.word	0x08013ac1
 8013a5c:	08013a3d 	.word	0x08013a3d
 8013a60:	08013a3d 	.word	0x08013a3d
 8013a64:	08013a3d 	.word	0x08013a3d
 8013a68:	08013a3d 	.word	0x08013a3d
 8013a6c:	08013ac1 	.word	0x08013ac1
 8013a70:	08013a3d 	.word	0x08013a3d
 8013a74:	08013a3d 	.word	0x08013a3d
 8013a78:	08013a3d 	.word	0x08013a3d
 8013a7c:	08013a3d 	.word	0x08013a3d
 8013a80:	08013bcd 	.word	0x08013bcd
 8013a84:	08013af1 	.word	0x08013af1
 8013a88:	08013baf 	.word	0x08013baf
 8013a8c:	08013a3d 	.word	0x08013a3d
 8013a90:	08013a3d 	.word	0x08013a3d
 8013a94:	08013bef 	.word	0x08013bef
 8013a98:	08013a3d 	.word	0x08013a3d
 8013a9c:	08013af1 	.word	0x08013af1
 8013aa0:	08013a3d 	.word	0x08013a3d
 8013aa4:	08013a3d 	.word	0x08013a3d
 8013aa8:	08013bb7 	.word	0x08013bb7
 8013aac:	682b      	ldr	r3, [r5, #0]
 8013aae:	1d1a      	adds	r2, r3, #4
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	602a      	str	r2, [r5, #0]
 8013ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013abc:	2301      	movs	r3, #1
 8013abe:	e0a3      	b.n	8013c08 <_printf_i+0x1f4>
 8013ac0:	6820      	ldr	r0, [r4, #0]
 8013ac2:	6829      	ldr	r1, [r5, #0]
 8013ac4:	0606      	lsls	r6, r0, #24
 8013ac6:	f101 0304 	add.w	r3, r1, #4
 8013aca:	d50a      	bpl.n	8013ae2 <_printf_i+0xce>
 8013acc:	680e      	ldr	r6, [r1, #0]
 8013ace:	602b      	str	r3, [r5, #0]
 8013ad0:	2e00      	cmp	r6, #0
 8013ad2:	da03      	bge.n	8013adc <_printf_i+0xc8>
 8013ad4:	232d      	movs	r3, #45	; 0x2d
 8013ad6:	4276      	negs	r6, r6
 8013ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013adc:	485e      	ldr	r0, [pc, #376]	; (8013c58 <_printf_i+0x244>)
 8013ade:	230a      	movs	r3, #10
 8013ae0:	e019      	b.n	8013b16 <_printf_i+0x102>
 8013ae2:	680e      	ldr	r6, [r1, #0]
 8013ae4:	602b      	str	r3, [r5, #0]
 8013ae6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013aea:	bf18      	it	ne
 8013aec:	b236      	sxthne	r6, r6
 8013aee:	e7ef      	b.n	8013ad0 <_printf_i+0xbc>
 8013af0:	682b      	ldr	r3, [r5, #0]
 8013af2:	6820      	ldr	r0, [r4, #0]
 8013af4:	1d19      	adds	r1, r3, #4
 8013af6:	6029      	str	r1, [r5, #0]
 8013af8:	0601      	lsls	r1, r0, #24
 8013afa:	d501      	bpl.n	8013b00 <_printf_i+0xec>
 8013afc:	681e      	ldr	r6, [r3, #0]
 8013afe:	e002      	b.n	8013b06 <_printf_i+0xf2>
 8013b00:	0646      	lsls	r6, r0, #25
 8013b02:	d5fb      	bpl.n	8013afc <_printf_i+0xe8>
 8013b04:	881e      	ldrh	r6, [r3, #0]
 8013b06:	4854      	ldr	r0, [pc, #336]	; (8013c58 <_printf_i+0x244>)
 8013b08:	2f6f      	cmp	r7, #111	; 0x6f
 8013b0a:	bf0c      	ite	eq
 8013b0c:	2308      	moveq	r3, #8
 8013b0e:	230a      	movne	r3, #10
 8013b10:	2100      	movs	r1, #0
 8013b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b16:	6865      	ldr	r5, [r4, #4]
 8013b18:	60a5      	str	r5, [r4, #8]
 8013b1a:	2d00      	cmp	r5, #0
 8013b1c:	bfa2      	ittt	ge
 8013b1e:	6821      	ldrge	r1, [r4, #0]
 8013b20:	f021 0104 	bicge.w	r1, r1, #4
 8013b24:	6021      	strge	r1, [r4, #0]
 8013b26:	b90e      	cbnz	r6, 8013b2c <_printf_i+0x118>
 8013b28:	2d00      	cmp	r5, #0
 8013b2a:	d04d      	beq.n	8013bc8 <_printf_i+0x1b4>
 8013b2c:	4615      	mov	r5, r2
 8013b2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013b32:	fb03 6711 	mls	r7, r3, r1, r6
 8013b36:	5dc7      	ldrb	r7, [r0, r7]
 8013b38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013b3c:	4637      	mov	r7, r6
 8013b3e:	42bb      	cmp	r3, r7
 8013b40:	460e      	mov	r6, r1
 8013b42:	d9f4      	bls.n	8013b2e <_printf_i+0x11a>
 8013b44:	2b08      	cmp	r3, #8
 8013b46:	d10b      	bne.n	8013b60 <_printf_i+0x14c>
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	07de      	lsls	r6, r3, #31
 8013b4c:	d508      	bpl.n	8013b60 <_printf_i+0x14c>
 8013b4e:	6923      	ldr	r3, [r4, #16]
 8013b50:	6861      	ldr	r1, [r4, #4]
 8013b52:	4299      	cmp	r1, r3
 8013b54:	bfde      	ittt	le
 8013b56:	2330      	movle	r3, #48	; 0x30
 8013b58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b60:	1b52      	subs	r2, r2, r5
 8013b62:	6122      	str	r2, [r4, #16]
 8013b64:	f8cd a000 	str.w	sl, [sp]
 8013b68:	464b      	mov	r3, r9
 8013b6a:	aa03      	add	r2, sp, #12
 8013b6c:	4621      	mov	r1, r4
 8013b6e:	4640      	mov	r0, r8
 8013b70:	f7ff fee2 	bl	8013938 <_printf_common>
 8013b74:	3001      	adds	r0, #1
 8013b76:	d14c      	bne.n	8013c12 <_printf_i+0x1fe>
 8013b78:	f04f 30ff 	mov.w	r0, #4294967295
 8013b7c:	b004      	add	sp, #16
 8013b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b82:	4835      	ldr	r0, [pc, #212]	; (8013c58 <_printf_i+0x244>)
 8013b84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013b88:	6829      	ldr	r1, [r5, #0]
 8013b8a:	6823      	ldr	r3, [r4, #0]
 8013b8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013b90:	6029      	str	r1, [r5, #0]
 8013b92:	061d      	lsls	r5, r3, #24
 8013b94:	d514      	bpl.n	8013bc0 <_printf_i+0x1ac>
 8013b96:	07df      	lsls	r7, r3, #31
 8013b98:	bf44      	itt	mi
 8013b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8013b9e:	6023      	strmi	r3, [r4, #0]
 8013ba0:	b91e      	cbnz	r6, 8013baa <_printf_i+0x196>
 8013ba2:	6823      	ldr	r3, [r4, #0]
 8013ba4:	f023 0320 	bic.w	r3, r3, #32
 8013ba8:	6023      	str	r3, [r4, #0]
 8013baa:	2310      	movs	r3, #16
 8013bac:	e7b0      	b.n	8013b10 <_printf_i+0xfc>
 8013bae:	6823      	ldr	r3, [r4, #0]
 8013bb0:	f043 0320 	orr.w	r3, r3, #32
 8013bb4:	6023      	str	r3, [r4, #0]
 8013bb6:	2378      	movs	r3, #120	; 0x78
 8013bb8:	4828      	ldr	r0, [pc, #160]	; (8013c5c <_printf_i+0x248>)
 8013bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013bbe:	e7e3      	b.n	8013b88 <_printf_i+0x174>
 8013bc0:	0659      	lsls	r1, r3, #25
 8013bc2:	bf48      	it	mi
 8013bc4:	b2b6      	uxthmi	r6, r6
 8013bc6:	e7e6      	b.n	8013b96 <_printf_i+0x182>
 8013bc8:	4615      	mov	r5, r2
 8013bca:	e7bb      	b.n	8013b44 <_printf_i+0x130>
 8013bcc:	682b      	ldr	r3, [r5, #0]
 8013bce:	6826      	ldr	r6, [r4, #0]
 8013bd0:	6961      	ldr	r1, [r4, #20]
 8013bd2:	1d18      	adds	r0, r3, #4
 8013bd4:	6028      	str	r0, [r5, #0]
 8013bd6:	0635      	lsls	r5, r6, #24
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	d501      	bpl.n	8013be0 <_printf_i+0x1cc>
 8013bdc:	6019      	str	r1, [r3, #0]
 8013bde:	e002      	b.n	8013be6 <_printf_i+0x1d2>
 8013be0:	0670      	lsls	r0, r6, #25
 8013be2:	d5fb      	bpl.n	8013bdc <_printf_i+0x1c8>
 8013be4:	8019      	strh	r1, [r3, #0]
 8013be6:	2300      	movs	r3, #0
 8013be8:	6123      	str	r3, [r4, #16]
 8013bea:	4615      	mov	r5, r2
 8013bec:	e7ba      	b.n	8013b64 <_printf_i+0x150>
 8013bee:	682b      	ldr	r3, [r5, #0]
 8013bf0:	1d1a      	adds	r2, r3, #4
 8013bf2:	602a      	str	r2, [r5, #0]
 8013bf4:	681d      	ldr	r5, [r3, #0]
 8013bf6:	6862      	ldr	r2, [r4, #4]
 8013bf8:	2100      	movs	r1, #0
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f7ec fac8 	bl	8000190 <memchr>
 8013c00:	b108      	cbz	r0, 8013c06 <_printf_i+0x1f2>
 8013c02:	1b40      	subs	r0, r0, r5
 8013c04:	6060      	str	r0, [r4, #4]
 8013c06:	6863      	ldr	r3, [r4, #4]
 8013c08:	6123      	str	r3, [r4, #16]
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c10:	e7a8      	b.n	8013b64 <_printf_i+0x150>
 8013c12:	6923      	ldr	r3, [r4, #16]
 8013c14:	462a      	mov	r2, r5
 8013c16:	4649      	mov	r1, r9
 8013c18:	4640      	mov	r0, r8
 8013c1a:	47d0      	blx	sl
 8013c1c:	3001      	adds	r0, #1
 8013c1e:	d0ab      	beq.n	8013b78 <_printf_i+0x164>
 8013c20:	6823      	ldr	r3, [r4, #0]
 8013c22:	079b      	lsls	r3, r3, #30
 8013c24:	d413      	bmi.n	8013c4e <_printf_i+0x23a>
 8013c26:	68e0      	ldr	r0, [r4, #12]
 8013c28:	9b03      	ldr	r3, [sp, #12]
 8013c2a:	4298      	cmp	r0, r3
 8013c2c:	bfb8      	it	lt
 8013c2e:	4618      	movlt	r0, r3
 8013c30:	e7a4      	b.n	8013b7c <_printf_i+0x168>
 8013c32:	2301      	movs	r3, #1
 8013c34:	4632      	mov	r2, r6
 8013c36:	4649      	mov	r1, r9
 8013c38:	4640      	mov	r0, r8
 8013c3a:	47d0      	blx	sl
 8013c3c:	3001      	adds	r0, #1
 8013c3e:	d09b      	beq.n	8013b78 <_printf_i+0x164>
 8013c40:	3501      	adds	r5, #1
 8013c42:	68e3      	ldr	r3, [r4, #12]
 8013c44:	9903      	ldr	r1, [sp, #12]
 8013c46:	1a5b      	subs	r3, r3, r1
 8013c48:	42ab      	cmp	r3, r5
 8013c4a:	dcf2      	bgt.n	8013c32 <_printf_i+0x21e>
 8013c4c:	e7eb      	b.n	8013c26 <_printf_i+0x212>
 8013c4e:	2500      	movs	r5, #0
 8013c50:	f104 0619 	add.w	r6, r4, #25
 8013c54:	e7f5      	b.n	8013c42 <_printf_i+0x22e>
 8013c56:	bf00      	nop
 8013c58:	08014669 	.word	0x08014669
 8013c5c:	0801467a 	.word	0x0801467a

08013c60 <memmove>:
 8013c60:	4288      	cmp	r0, r1
 8013c62:	b510      	push	{r4, lr}
 8013c64:	eb01 0402 	add.w	r4, r1, r2
 8013c68:	d902      	bls.n	8013c70 <memmove+0x10>
 8013c6a:	4284      	cmp	r4, r0
 8013c6c:	4623      	mov	r3, r4
 8013c6e:	d807      	bhi.n	8013c80 <memmove+0x20>
 8013c70:	1e43      	subs	r3, r0, #1
 8013c72:	42a1      	cmp	r1, r4
 8013c74:	d008      	beq.n	8013c88 <memmove+0x28>
 8013c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c7e:	e7f8      	b.n	8013c72 <memmove+0x12>
 8013c80:	4402      	add	r2, r0
 8013c82:	4601      	mov	r1, r0
 8013c84:	428a      	cmp	r2, r1
 8013c86:	d100      	bne.n	8013c8a <memmove+0x2a>
 8013c88:	bd10      	pop	{r4, pc}
 8013c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013c92:	e7f7      	b.n	8013c84 <memmove+0x24>

08013c94 <_free_r>:
 8013c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c96:	2900      	cmp	r1, #0
 8013c98:	d044      	beq.n	8013d24 <_free_r+0x90>
 8013c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c9e:	9001      	str	r0, [sp, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8013ca6:	bfb8      	it	lt
 8013ca8:	18e4      	addlt	r4, r4, r3
 8013caa:	f000 f913 	bl	8013ed4 <__malloc_lock>
 8013cae:	4a1e      	ldr	r2, [pc, #120]	; (8013d28 <_free_r+0x94>)
 8013cb0:	9801      	ldr	r0, [sp, #4]
 8013cb2:	6813      	ldr	r3, [r2, #0]
 8013cb4:	b933      	cbnz	r3, 8013cc4 <_free_r+0x30>
 8013cb6:	6063      	str	r3, [r4, #4]
 8013cb8:	6014      	str	r4, [r2, #0]
 8013cba:	b003      	add	sp, #12
 8013cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cc0:	f000 b90e 	b.w	8013ee0 <__malloc_unlock>
 8013cc4:	42a3      	cmp	r3, r4
 8013cc6:	d908      	bls.n	8013cda <_free_r+0x46>
 8013cc8:	6825      	ldr	r5, [r4, #0]
 8013cca:	1961      	adds	r1, r4, r5
 8013ccc:	428b      	cmp	r3, r1
 8013cce:	bf01      	itttt	eq
 8013cd0:	6819      	ldreq	r1, [r3, #0]
 8013cd2:	685b      	ldreq	r3, [r3, #4]
 8013cd4:	1949      	addeq	r1, r1, r5
 8013cd6:	6021      	streq	r1, [r4, #0]
 8013cd8:	e7ed      	b.n	8013cb6 <_free_r+0x22>
 8013cda:	461a      	mov	r2, r3
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	b10b      	cbz	r3, 8013ce4 <_free_r+0x50>
 8013ce0:	42a3      	cmp	r3, r4
 8013ce2:	d9fa      	bls.n	8013cda <_free_r+0x46>
 8013ce4:	6811      	ldr	r1, [r2, #0]
 8013ce6:	1855      	adds	r5, r2, r1
 8013ce8:	42a5      	cmp	r5, r4
 8013cea:	d10b      	bne.n	8013d04 <_free_r+0x70>
 8013cec:	6824      	ldr	r4, [r4, #0]
 8013cee:	4421      	add	r1, r4
 8013cf0:	1854      	adds	r4, r2, r1
 8013cf2:	42a3      	cmp	r3, r4
 8013cf4:	6011      	str	r1, [r2, #0]
 8013cf6:	d1e0      	bne.n	8013cba <_free_r+0x26>
 8013cf8:	681c      	ldr	r4, [r3, #0]
 8013cfa:	685b      	ldr	r3, [r3, #4]
 8013cfc:	6053      	str	r3, [r2, #4]
 8013cfe:	4421      	add	r1, r4
 8013d00:	6011      	str	r1, [r2, #0]
 8013d02:	e7da      	b.n	8013cba <_free_r+0x26>
 8013d04:	d902      	bls.n	8013d0c <_free_r+0x78>
 8013d06:	230c      	movs	r3, #12
 8013d08:	6003      	str	r3, [r0, #0]
 8013d0a:	e7d6      	b.n	8013cba <_free_r+0x26>
 8013d0c:	6825      	ldr	r5, [r4, #0]
 8013d0e:	1961      	adds	r1, r4, r5
 8013d10:	428b      	cmp	r3, r1
 8013d12:	bf04      	itt	eq
 8013d14:	6819      	ldreq	r1, [r3, #0]
 8013d16:	685b      	ldreq	r3, [r3, #4]
 8013d18:	6063      	str	r3, [r4, #4]
 8013d1a:	bf04      	itt	eq
 8013d1c:	1949      	addeq	r1, r1, r5
 8013d1e:	6021      	streq	r1, [r4, #0]
 8013d20:	6054      	str	r4, [r2, #4]
 8013d22:	e7ca      	b.n	8013cba <_free_r+0x26>
 8013d24:	b003      	add	sp, #12
 8013d26:	bd30      	pop	{r4, r5, pc}
 8013d28:	20001d9c 	.word	0x20001d9c

08013d2c <sbrk_aligned>:
 8013d2c:	b570      	push	{r4, r5, r6, lr}
 8013d2e:	4e0e      	ldr	r6, [pc, #56]	; (8013d68 <sbrk_aligned+0x3c>)
 8013d30:	460c      	mov	r4, r1
 8013d32:	6831      	ldr	r1, [r6, #0]
 8013d34:	4605      	mov	r5, r0
 8013d36:	b911      	cbnz	r1, 8013d3e <sbrk_aligned+0x12>
 8013d38:	f000 f8bc 	bl	8013eb4 <_sbrk_r>
 8013d3c:	6030      	str	r0, [r6, #0]
 8013d3e:	4621      	mov	r1, r4
 8013d40:	4628      	mov	r0, r5
 8013d42:	f000 f8b7 	bl	8013eb4 <_sbrk_r>
 8013d46:	1c43      	adds	r3, r0, #1
 8013d48:	d00a      	beq.n	8013d60 <sbrk_aligned+0x34>
 8013d4a:	1cc4      	adds	r4, r0, #3
 8013d4c:	f024 0403 	bic.w	r4, r4, #3
 8013d50:	42a0      	cmp	r0, r4
 8013d52:	d007      	beq.n	8013d64 <sbrk_aligned+0x38>
 8013d54:	1a21      	subs	r1, r4, r0
 8013d56:	4628      	mov	r0, r5
 8013d58:	f000 f8ac 	bl	8013eb4 <_sbrk_r>
 8013d5c:	3001      	adds	r0, #1
 8013d5e:	d101      	bne.n	8013d64 <sbrk_aligned+0x38>
 8013d60:	f04f 34ff 	mov.w	r4, #4294967295
 8013d64:	4620      	mov	r0, r4
 8013d66:	bd70      	pop	{r4, r5, r6, pc}
 8013d68:	20001da0 	.word	0x20001da0

08013d6c <_malloc_r>:
 8013d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d70:	1ccd      	adds	r5, r1, #3
 8013d72:	f025 0503 	bic.w	r5, r5, #3
 8013d76:	3508      	adds	r5, #8
 8013d78:	2d0c      	cmp	r5, #12
 8013d7a:	bf38      	it	cc
 8013d7c:	250c      	movcc	r5, #12
 8013d7e:	2d00      	cmp	r5, #0
 8013d80:	4607      	mov	r7, r0
 8013d82:	db01      	blt.n	8013d88 <_malloc_r+0x1c>
 8013d84:	42a9      	cmp	r1, r5
 8013d86:	d905      	bls.n	8013d94 <_malloc_r+0x28>
 8013d88:	230c      	movs	r3, #12
 8013d8a:	603b      	str	r3, [r7, #0]
 8013d8c:	2600      	movs	r6, #0
 8013d8e:	4630      	mov	r0, r6
 8013d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d94:	4e2e      	ldr	r6, [pc, #184]	; (8013e50 <_malloc_r+0xe4>)
 8013d96:	f000 f89d 	bl	8013ed4 <__malloc_lock>
 8013d9a:	6833      	ldr	r3, [r6, #0]
 8013d9c:	461c      	mov	r4, r3
 8013d9e:	bb34      	cbnz	r4, 8013dee <_malloc_r+0x82>
 8013da0:	4629      	mov	r1, r5
 8013da2:	4638      	mov	r0, r7
 8013da4:	f7ff ffc2 	bl	8013d2c <sbrk_aligned>
 8013da8:	1c43      	adds	r3, r0, #1
 8013daa:	4604      	mov	r4, r0
 8013dac:	d14d      	bne.n	8013e4a <_malloc_r+0xde>
 8013dae:	6834      	ldr	r4, [r6, #0]
 8013db0:	4626      	mov	r6, r4
 8013db2:	2e00      	cmp	r6, #0
 8013db4:	d140      	bne.n	8013e38 <_malloc_r+0xcc>
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	4631      	mov	r1, r6
 8013dba:	4638      	mov	r0, r7
 8013dbc:	eb04 0803 	add.w	r8, r4, r3
 8013dc0:	f000 f878 	bl	8013eb4 <_sbrk_r>
 8013dc4:	4580      	cmp	r8, r0
 8013dc6:	d13a      	bne.n	8013e3e <_malloc_r+0xd2>
 8013dc8:	6821      	ldr	r1, [r4, #0]
 8013dca:	3503      	adds	r5, #3
 8013dcc:	1a6d      	subs	r5, r5, r1
 8013dce:	f025 0503 	bic.w	r5, r5, #3
 8013dd2:	3508      	adds	r5, #8
 8013dd4:	2d0c      	cmp	r5, #12
 8013dd6:	bf38      	it	cc
 8013dd8:	250c      	movcc	r5, #12
 8013dda:	4629      	mov	r1, r5
 8013ddc:	4638      	mov	r0, r7
 8013dde:	f7ff ffa5 	bl	8013d2c <sbrk_aligned>
 8013de2:	3001      	adds	r0, #1
 8013de4:	d02b      	beq.n	8013e3e <_malloc_r+0xd2>
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	442b      	add	r3, r5
 8013dea:	6023      	str	r3, [r4, #0]
 8013dec:	e00e      	b.n	8013e0c <_malloc_r+0xa0>
 8013dee:	6822      	ldr	r2, [r4, #0]
 8013df0:	1b52      	subs	r2, r2, r5
 8013df2:	d41e      	bmi.n	8013e32 <_malloc_r+0xc6>
 8013df4:	2a0b      	cmp	r2, #11
 8013df6:	d916      	bls.n	8013e26 <_malloc_r+0xba>
 8013df8:	1961      	adds	r1, r4, r5
 8013dfa:	42a3      	cmp	r3, r4
 8013dfc:	6025      	str	r5, [r4, #0]
 8013dfe:	bf18      	it	ne
 8013e00:	6059      	strne	r1, [r3, #4]
 8013e02:	6863      	ldr	r3, [r4, #4]
 8013e04:	bf08      	it	eq
 8013e06:	6031      	streq	r1, [r6, #0]
 8013e08:	5162      	str	r2, [r4, r5]
 8013e0a:	604b      	str	r3, [r1, #4]
 8013e0c:	4638      	mov	r0, r7
 8013e0e:	f104 060b 	add.w	r6, r4, #11
 8013e12:	f000 f865 	bl	8013ee0 <__malloc_unlock>
 8013e16:	f026 0607 	bic.w	r6, r6, #7
 8013e1a:	1d23      	adds	r3, r4, #4
 8013e1c:	1af2      	subs	r2, r6, r3
 8013e1e:	d0b6      	beq.n	8013d8e <_malloc_r+0x22>
 8013e20:	1b9b      	subs	r3, r3, r6
 8013e22:	50a3      	str	r3, [r4, r2]
 8013e24:	e7b3      	b.n	8013d8e <_malloc_r+0x22>
 8013e26:	6862      	ldr	r2, [r4, #4]
 8013e28:	42a3      	cmp	r3, r4
 8013e2a:	bf0c      	ite	eq
 8013e2c:	6032      	streq	r2, [r6, #0]
 8013e2e:	605a      	strne	r2, [r3, #4]
 8013e30:	e7ec      	b.n	8013e0c <_malloc_r+0xa0>
 8013e32:	4623      	mov	r3, r4
 8013e34:	6864      	ldr	r4, [r4, #4]
 8013e36:	e7b2      	b.n	8013d9e <_malloc_r+0x32>
 8013e38:	4634      	mov	r4, r6
 8013e3a:	6876      	ldr	r6, [r6, #4]
 8013e3c:	e7b9      	b.n	8013db2 <_malloc_r+0x46>
 8013e3e:	230c      	movs	r3, #12
 8013e40:	603b      	str	r3, [r7, #0]
 8013e42:	4638      	mov	r0, r7
 8013e44:	f000 f84c 	bl	8013ee0 <__malloc_unlock>
 8013e48:	e7a1      	b.n	8013d8e <_malloc_r+0x22>
 8013e4a:	6025      	str	r5, [r4, #0]
 8013e4c:	e7de      	b.n	8013e0c <_malloc_r+0xa0>
 8013e4e:	bf00      	nop
 8013e50:	20001d9c 	.word	0x20001d9c

08013e54 <_realloc_r>:
 8013e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e58:	4680      	mov	r8, r0
 8013e5a:	4614      	mov	r4, r2
 8013e5c:	460e      	mov	r6, r1
 8013e5e:	b921      	cbnz	r1, 8013e6a <_realloc_r+0x16>
 8013e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e64:	4611      	mov	r1, r2
 8013e66:	f7ff bf81 	b.w	8013d6c <_malloc_r>
 8013e6a:	b92a      	cbnz	r2, 8013e78 <_realloc_r+0x24>
 8013e6c:	f7ff ff12 	bl	8013c94 <_free_r>
 8013e70:	4625      	mov	r5, r4
 8013e72:	4628      	mov	r0, r5
 8013e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e78:	f000 f838 	bl	8013eec <_malloc_usable_size_r>
 8013e7c:	4284      	cmp	r4, r0
 8013e7e:	4607      	mov	r7, r0
 8013e80:	d802      	bhi.n	8013e88 <_realloc_r+0x34>
 8013e82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e86:	d812      	bhi.n	8013eae <_realloc_r+0x5a>
 8013e88:	4621      	mov	r1, r4
 8013e8a:	4640      	mov	r0, r8
 8013e8c:	f7ff ff6e 	bl	8013d6c <_malloc_r>
 8013e90:	4605      	mov	r5, r0
 8013e92:	2800      	cmp	r0, #0
 8013e94:	d0ed      	beq.n	8013e72 <_realloc_r+0x1e>
 8013e96:	42bc      	cmp	r4, r7
 8013e98:	4622      	mov	r2, r4
 8013e9a:	4631      	mov	r1, r6
 8013e9c:	bf28      	it	cs
 8013e9e:	463a      	movcs	r2, r7
 8013ea0:	f7ff fbb8 	bl	8013614 <memcpy>
 8013ea4:	4631      	mov	r1, r6
 8013ea6:	4640      	mov	r0, r8
 8013ea8:	f7ff fef4 	bl	8013c94 <_free_r>
 8013eac:	e7e1      	b.n	8013e72 <_realloc_r+0x1e>
 8013eae:	4635      	mov	r5, r6
 8013eb0:	e7df      	b.n	8013e72 <_realloc_r+0x1e>
	...

08013eb4 <_sbrk_r>:
 8013eb4:	b538      	push	{r3, r4, r5, lr}
 8013eb6:	4d06      	ldr	r5, [pc, #24]	; (8013ed0 <_sbrk_r+0x1c>)
 8013eb8:	2300      	movs	r3, #0
 8013eba:	4604      	mov	r4, r0
 8013ebc:	4608      	mov	r0, r1
 8013ebe:	602b      	str	r3, [r5, #0]
 8013ec0:	f7ed f934 	bl	800112c <_sbrk>
 8013ec4:	1c43      	adds	r3, r0, #1
 8013ec6:	d102      	bne.n	8013ece <_sbrk_r+0x1a>
 8013ec8:	682b      	ldr	r3, [r5, #0]
 8013eca:	b103      	cbz	r3, 8013ece <_sbrk_r+0x1a>
 8013ecc:	6023      	str	r3, [r4, #0]
 8013ece:	bd38      	pop	{r3, r4, r5, pc}
 8013ed0:	20001da4 	.word	0x20001da4

08013ed4 <__malloc_lock>:
 8013ed4:	4801      	ldr	r0, [pc, #4]	; (8013edc <__malloc_lock+0x8>)
 8013ed6:	f000 b811 	b.w	8013efc <__retarget_lock_acquire_recursive>
 8013eda:	bf00      	nop
 8013edc:	20001da8 	.word	0x20001da8

08013ee0 <__malloc_unlock>:
 8013ee0:	4801      	ldr	r0, [pc, #4]	; (8013ee8 <__malloc_unlock+0x8>)
 8013ee2:	f000 b80c 	b.w	8013efe <__retarget_lock_release_recursive>
 8013ee6:	bf00      	nop
 8013ee8:	20001da8 	.word	0x20001da8

08013eec <_malloc_usable_size_r>:
 8013eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ef0:	1f18      	subs	r0, r3, #4
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	bfbc      	itt	lt
 8013ef6:	580b      	ldrlt	r3, [r1, r0]
 8013ef8:	18c0      	addlt	r0, r0, r3
 8013efa:	4770      	bx	lr

08013efc <__retarget_lock_acquire_recursive>:
 8013efc:	4770      	bx	lr

08013efe <__retarget_lock_release_recursive>:
 8013efe:	4770      	bx	lr

08013f00 <_init>:
 8013f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f02:	bf00      	nop
 8013f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f06:	bc08      	pop	{r3}
 8013f08:	469e      	mov	lr, r3
 8013f0a:	4770      	bx	lr

08013f0c <_fini>:
 8013f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f0e:	bf00      	nop
 8013f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f12:	bc08      	pop	{r3}
 8013f14:	469e      	mov	lr, r3
 8013f16:	4770      	bx	lr
