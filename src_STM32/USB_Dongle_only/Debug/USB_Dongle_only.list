
USB_Dongle_only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fb8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  080170f8  080170f8  000270f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017a18  08017a18  00027a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017a20  08017a20  00027a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017a24  08017a24  00027a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000e16c  20000008  08017a28  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c30  2000e174  08025b94  0003e174  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000fda4  08025b94  0003fda4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003e174  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002653b  00000000  00000000  0003e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005bea  00000000  00000000  000646df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023d0  00000000  00000000  0006a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002120  00000000  00000000  0006c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000291f4  00000000  00000000  0006e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ae3d  00000000  00000000  000979b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ea23c  00000000  00000000  000c27f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001aca2d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009c68  00000000  00000000  001aca80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000e174 	.word	0x2000e174
 800015c:	00000000 	.word	0x00000000
 8000160:	080170e0 	.word	0x080170e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000e178 	.word	0x2000e178
 800017c:	080170e0 	.word	0x080170e0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4013      	ands	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	f5ad 5d0b 	sub.w	sp, sp, #8896	; 0x22c0
 800058e:	b085      	sub	sp, #20
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fea9 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f971 	bl	800087c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059a:	f000 f9d7 	bl	800094c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800059e:	f000 f9f5 	bl	800098c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fab5 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 faa1 	bl	8000aec <MX_DMA_Init>
  MX_RF_Init();
 80005aa:	f000 fa03 	bl	80009b4 <MX_RF_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 fa51 	bl	8000a54 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005b2:	f000 fa1d 	bl	80009f0 <MX_RTC_Init>
  MX_USB_Device_Init();
 80005b6:	f00a fb77 	bl	800aca8 <MX_USB_Device_Init>
  MX_RNG_Init();
 80005ba:	f000 fa03 	bl	80009c4 <MX_RNG_Init>
#ifdef HARDWARE_AES
  MX_AES1_Init();
#endif
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin); // BLUE LED
 80005be:	2101      	movs	r1, #1
 80005c0:	489a      	ldr	r0, [pc, #616]	; (800082c <main+0x2a4>)
 80005c2:	f001 fb8f 	bl	8001ce4 <HAL_GPIO_TogglePin>
  HAL_Delay(3000);
 80005c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005ca:	f000 ff13 	bl	80013f4 <HAL_Delay>
  USB_DEBUG_MSG("Program Compilation Date: %s %s\n", __DATE__, __TIME__);
 80005ce:	4a98      	ldr	r2, [pc, #608]	; (8000830 <main+0x2a8>)
 80005d0:	4998      	ldr	r1, [pc, #608]	; (8000834 <main+0x2ac>)
 80005d2:	4899      	ldr	r0, [pc, #612]	; (8000838 <main+0x2b0>)
 80005d4:	f015 fd80 	bl	80160d8 <iprintf>
  USB_DEBUG_MSG("Dilithium Signature Test Start\n");
 80005d8:	4898      	ldr	r0, [pc, #608]	; (800083c <main+0x2b4>)
 80005da:	f015 fe03 	bl	80161e4 <puts>

  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80005de:	2101      	movs	r1, #1
 80005e0:	4892      	ldr	r0, [pc, #584]	; (800082c <main+0x2a4>)
 80005e2:	f001 fb7f 	bl	8001ce4 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80005e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ea:	4895      	ldr	r0, [pc, #596]	; (8000840 <main+0x2b8>)
 80005ec:	f001 fb7a 	bl	8001ce4 <HAL_GPIO_TogglePin>
#elif defined SIGN_VERIFY_TEST

  unsigned int i;
  int ret;
  size_t mlen, smlen;
  uint8_t m[MLEN] = { 0x55 };
 80005f0:	2355      	movs	r3, #85	; 0x55
 80005f2:	f507 5209 	add.w	r2, r7, #8768	; 0x2240
 80005f6:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 8000600:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000604:	2237      	movs	r2, #55	; 0x37
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f015 fd5d 	bl	80160c8 <memset>
  uint8_t sm[MLEN + CRYPTO_BYTES];
  uint8_t m2[MLEN + CRYPTO_BYTES];
  uint8_t test_ok = 1;
 800060e:	2301      	movs	r3, #1
 8000610:	f507 520a 	add.w	r2, r7, #8832	; 0x2280
 8000614:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000618:	7013      	strb	r3, [r2, #0]

#define TIME_STAMP_SIGN 0
#define TIME_STAMP_VERF 1
#define TIME_STAMP_INDEX 2

  elapsed_time_init();
 800061a:	f00e faf7 	bl	800ec0c <elapsed_time_init>

  for (i = 0; i < NTESTS; ++i) {
 800061e:	2300      	movs	r3, #0
 8000620:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8000624:	f102 0204 	add.w	r2, r2, #4
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e0c7      	b.n	80007bc <main+0x234>
	  //
	  USB_DEBUG_MSG("Test %d\r\n", i);
 800062c:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8000630:	f103 0304 	add.w	r3, r3, #4
 8000634:	6819      	ldr	r1, [r3, #0]
 8000636:	4883      	ldr	r0, [pc, #524]	; (8000844 <main+0x2bc>)
 8000638:	f015 fd4e 	bl	80160d8 <iprintf>

	  elapsed_time_start(TIME_STAMP_INDEX);
 800063c:	2002      	movs	r0, #2
 800063e:	f00e fb13 	bl	800ec68 <elapsed_time_start>

	  crypto_sign_keypair(&hrng, pk, sk);
 8000642:	f107 0208 	add.w	r2, r7, #8
 8000646:	3a04      	subs	r2, #4
 8000648:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800064c:	3b14      	subs	r3, #20
 800064e:	4619      	mov	r1, r3
 8000650:	487d      	ldr	r0, [pc, #500]	; (8000848 <main+0x2c0>)
 8000652:	f014 fee8 	bl	8015426 <pqcrystals_dilithium2aes_r_ref_keypair>

	  elapsed_time_stop(TIME_STAMP_INDEX);
 8000656:	2002      	movs	r0, #2
 8000658:	f00e fb1c 	bl	800ec94 <elapsed_time_stop>

	  elapsed_time_start(TIME_STAMP_SIGN );
 800065c:	2000      	movs	r0, #0
 800065e:	f00e fb03 	bl	800ec68 <elapsed_time_start>

	  int nonce = crypto_sign(&hrng, sm, &smlen, m, MLEN, sk);
 8000662:	f507 5009 	add.w	r0, r7, #8768	; 0x2240
 8000666:	f100 0034 	add.w	r0, r0, #52	; 0x34
 800066a:	f507 520a 	add.w	r2, r7, #8832	; 0x2280
 800066e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000672:	f507 51c6 	add.w	r1, r7, #6336	; 0x18c0
 8000676:	f101 0104 	add.w	r1, r1, #4
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	3b04      	subs	r3, #4
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	233b      	movs	r3, #59	; 0x3b
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	4603      	mov	r3, r0
 8000688:	486f      	ldr	r0, [pc, #444]	; (8000848 <main+0x2c0>)
 800068a:	f015 fa81 	bl	8015b90 <pqcrystals_dilithium2aes_r_ref>
 800068e:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000692:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000696:	6018      	str	r0, [r3, #0]

	  elapsed_time_stop(TIME_STAMP_SIGN );
 8000698:	2000      	movs	r0, #0
 800069a:	f00e fafb 	bl	800ec94 <elapsed_time_stop>

	  USB_DEBUG_MSG("nonce = %d\r\n", nonce);
 800069e:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80006a2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006a6:	6819      	ldr	r1, [r3, #0]
 80006a8:	4868      	ldr	r0, [pc, #416]	; (800084c <main+0x2c4>)
 80006aa:	f015 fd15 	bl	80160d8 <iprintf>
//#define CONST_Y_NUM 15
	  if(nonce <= CONST_Y_NUM)
 80006ae:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80006b2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	dc1f      	bgt.n	80006fc <main+0x174>
	  {
		  elapsed_time_start(TIME_STAMP_VERF);
 80006bc:	2001      	movs	r0, #1
 80006be:	f00e fad3 	bl	800ec68 <elapsed_time_start>

		  ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
 80006c2:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80006c6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	f507 52c6 	add.w	r2, r7, #6336	; 0x18c0
 80006d0:	f102 0204 	add.w	r2, r2, #4
 80006d4:	f507 510a 	add.w	r1, r7, #8832	; 0x2280
 80006d8:	f101 0134 	add.w	r1, r1, #52	; 0x34
 80006dc:	f607 7028 	addw	r0, r7, #3880	; 0xf28
 80006e0:	3814      	subs	r0, #20
 80006e2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80006e6:	3b14      	subs	r3, #20
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4623      	mov	r3, r4
 80006ec:	f015 fc3c 	bl	8015f68 <pqcrystals_dilithium2aes_r_ref_open>
 80006f0:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80006f4:	6018      	str	r0, [r3, #0]

		  elapsed_time_stop(TIME_STAMP_VERF);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f00e facc 	bl	800ec94 <elapsed_time_stop>
	  }

	  if(sign_verify_test_assert(ret, mlen, m, m2)){
 80006fc:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8000700:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	f607 7328 	addw	r3, r7, #3880	; 0xf28
 800070c:	3b14      	subs	r3, #20
 800070e:	f507 5209 	add.w	r2, r7, #8768	; 0x2240
 8000712:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000716:	f507 500b 	add.w	r0, r7, #8896	; 0x22c0
 800071a:	6800      	ldr	r0, [r0, #0]
 800071c:	f000 fa4a 	bl	8000bb4 <sign_verify_test_assert>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <main+0x1ac>
		  test_ok = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	f507 520a 	add.w	r2, r7, #8832	; 0x2280
 800072c:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000730:	7013      	strb	r3, [r2, #0]
		  break;
 8000732:	e04b      	b.n	80007cc <main+0x244>
	  }

	  USB_DEBUG_MSG("Cycles for keys generation max = %ld\r\n", elapsed_time_max(TIME_STAMP_INDEX));
 8000734:	2002      	movs	r0, #2
 8000736:	f00e fafb 	bl	800ed30 <elapsed_time_max>
 800073a:	4603      	mov	r3, r0
 800073c:	4619      	mov	r1, r3
 800073e:	4844      	ldr	r0, [pc, #272]	; (8000850 <main+0x2c8>)
 8000740:	f015 fcca 	bl	80160d8 <iprintf>
	  USB_DEBUG_MSG("Cycles for keys generation min = %ld\r\n", elapsed_time_min(TIME_STAMP_INDEX));
 8000744:	2002      	movs	r0, #2
 8000746:	f00e fb05 	bl	800ed54 <elapsed_time_min>
 800074a:	4603      	mov	r3, r0
 800074c:	4619      	mov	r1, r3
 800074e:	4841      	ldr	r0, [pc, #260]	; (8000854 <main+0x2cc>)
 8000750:	f015 fcc2 	bl	80160d8 <iprintf>
	  USB_DEBUG_MSG("Cycles for full signature generation max = %ld\r\n", elapsed_time_max(TIME_STAMP_SIGN));
 8000754:	2000      	movs	r0, #0
 8000756:	f00e faeb 	bl	800ed30 <elapsed_time_max>
 800075a:	4603      	mov	r3, r0
 800075c:	4619      	mov	r1, r3
 800075e:	483e      	ldr	r0, [pc, #248]	; (8000858 <main+0x2d0>)
 8000760:	f015 fcba 	bl	80160d8 <iprintf>
	  USB_DEBUG_MSG("Cycles for full signature generation min = %ld\r\n", elapsed_time_min(TIME_STAMP_SIGN));
 8000764:	2000      	movs	r0, #0
 8000766:	f00e faf5 	bl	800ed54 <elapsed_time_min>
 800076a:	4603      	mov	r3, r0
 800076c:	4619      	mov	r1, r3
 800076e:	483b      	ldr	r0, [pc, #236]	; (800085c <main+0x2d4>)
 8000770:	f015 fcb2 	bl	80160d8 <iprintf>
	  USB_DEBUG_MSG("Cycles for full signature verification max = %ld\r\n", elapsed_time_max(TIME_STAMP_VERF));
 8000774:	2001      	movs	r0, #1
 8000776:	f00e fadb 	bl	800ed30 <elapsed_time_max>
 800077a:	4603      	mov	r3, r0
 800077c:	4619      	mov	r1, r3
 800077e:	4838      	ldr	r0, [pc, #224]	; (8000860 <main+0x2d8>)
 8000780:	f015 fcaa 	bl	80160d8 <iprintf>
	  USB_DEBUG_MSG("Cycles for full signature verification min = %ld\r\n", elapsed_time_min(TIME_STAMP_VERF));
 8000784:	2001      	movs	r0, #1
 8000786:	f00e fae5 	bl	800ed54 <elapsed_time_min>
 800078a:	4603      	mov	r3, r0
 800078c:	4619      	mov	r1, r3
 800078e:	4835      	ldr	r0, [pc, #212]	; (8000864 <main+0x2dc>)
 8000790:	f015 fca2 	bl	80160d8 <iprintf>

	  elapsed_time_clr(TIME_STAMP_INDEX);
 8000794:	2002      	movs	r0, #2
 8000796:	f00e faad 	bl	800ecf4 <elapsed_time_clr>
	  elapsed_time_clr(TIME_STAMP_SIGN);
 800079a:	2000      	movs	r0, #0
 800079c:	f00e faaa 	bl	800ecf4 <elapsed_time_clr>
	  elapsed_time_clr(TIME_STAMP_VERF);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f00e faa7 	bl	800ecf4 <elapsed_time_clr>
  for (i = 0; i < NTESTS; ++i) {
 80007a6:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80007aa:	f103 0304 	add.w	r3, r3, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80007b6:	f102 0204 	add.w	r2, r2, #4
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80007c0:	f103 0304 	add.w	r3, r3, #4
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b31      	cmp	r3, #49	; 0x31
 80007c8:	f67f af30 	bls.w	800062c <main+0xa4>

  }

  if (test_ok){
 80007cc:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80007d0:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d008      	beq.n	80007ec <main+0x264>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // GREEN LED
 80007da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <main+0x2b8>)
 80007e0:	f001 fa80 	bl	8001ce4 <HAL_GPIO_TogglePin>
	  USB_DEBUG_MSG("New Dilithium - OK\r\n");
 80007e4:	4820      	ldr	r0, [pc, #128]	; (8000868 <main+0x2e0>)
 80007e6:	f015 fcfd 	bl	80161e4 <puts>
 80007ea:	e005      	b.n	80007f8 <main+0x270>
  }
  else {
	  USB_DEBUG_MSG("New Dilithium - err_code = %d\r\n", ret);
 80007ec:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80007f0:	6819      	ldr	r1, [r3, #0]
 80007f2:	481e      	ldr	r0, [pc, #120]	; (800086c <main+0x2e4>)
 80007f4:	f015 fc70 	bl	80160d8 <iprintf>
  }

  USB_DEBUG_MSG("CRYPTO_PUBLICKEYBYTES = %d\r\n", CRYPTO_PUBLICKEYBYTES);
 80007f8:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80007fc:	481c      	ldr	r0, [pc, #112]	; (8000870 <main+0x2e8>)
 80007fe:	f015 fc6b 	bl	80160d8 <iprintf>
  USB_DEBUG_MSG("CRYPTO_SECRETKEYBYTES = %d\r\n", CRYPTO_SECRETKEYBYTES);
 8000802:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8000806:	481b      	ldr	r0, [pc, #108]	; (8000874 <main+0x2ec>)
 8000808:	f015 fc66 	bl	80160d8 <iprintf>
  USB_DEBUG_MSG("CRYPTO_BYTES = %d\r\n", CRYPTO_BYTES);
 800080c:	f640 1174 	movw	r1, #2420	; 0x974
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <main+0x2f0>)
 8000812:	f015 fc61 	bl	80160d8 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081a:	f000 fdeb 	bl	80013f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // YELLOW LED
 800081e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000822:	4807      	ldr	r0, [pc, #28]	; (8000840 <main+0x2b8>)
 8000824:	f001 fa5e 	bl	8001ce4 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000828:	e7f5      	b.n	8000816 <main+0x28e>
 800082a:	bf00      	nop
 800082c:	48000c00 	.word	0x48000c00
 8000830:	080170f8 	.word	0x080170f8
 8000834:	08017104 	.word	0x08017104
 8000838:	08017110 	.word	0x08017110
 800083c:	08017134 	.word	0x08017134
 8000840:	48000800 	.word	0x48000800
 8000844:	08017154 	.word	0x08017154
 8000848:	2000e1cc 	.word	0x2000e1cc
 800084c:	08017160 	.word	0x08017160
 8000850:	08017170 	.word	0x08017170
 8000854:	08017198 	.word	0x08017198
 8000858:	080171c0 	.word	0x080171c0
 800085c:	080171f4 	.word	0x080171f4
 8000860:	08017228 	.word	0x08017228
 8000864:	0801725c 	.word	0x0801725c
 8000868:	08017290 	.word	0x08017290
 800086c:	080172a4 	.word	0x080172a4
 8000870:	080172c4 	.word	0x080172c4
 8000874:	080172e4 	.word	0x080172e4
 8000878:	08017304 	.word	0x08017304

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09a      	sub	sp, #104	; 0x68
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2248      	movs	r2, #72	; 0x48
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f015 fc1c 	bl	80160c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <SystemClock_Config+0xcc>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008aa:	4a27      	ldr	r2, [pc, #156]	; (8000948 <SystemClock_Config+0xcc>)
 80008ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <SystemClock_Config+0xcc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80008be:	234b      	movs	r3, #75	; 0x4b
 80008c0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI1|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008ce:	2301      	movs	r3, #1
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d2:	2340      	movs	r3, #64	; 0x40
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d6:	2305      	movs	r3, #5
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	2303      	movs	r3, #3
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008e2:	2330      	movs	r3, #48	; 0x30
 80008e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008e6:	2310      	movs	r3, #16
 80008e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f003 fc35 	bl	8004170 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800090c:	f000 f9d2 	bl	8000cb4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000910:	236f      	movs	r3, #111	; 0x6f
 8000912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2303      	movs	r3, #3
 8000916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2103      	movs	r1, #3
 8000930:	4618      	mov	r0, r3
 8000932:	f003 ff91 	bl	8004858 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800093c:	f000 f9ba 	bl	8000cb4 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3768      	adds	r7, #104	; 0x68
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400

0800094c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2250      	movs	r2, #80	; 0x50
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f015 fbb5 	bl	80160c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800095e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000962:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000964:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800096a:	2300      	movs	r3, #0
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800096e:	2310      	movs	r3, #16
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4618      	mov	r0, r3
 8000976:	f004 fbac 	bl	80050d2 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000980:	f000 f998 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	; 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_IPCC_Init+0x20>)
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <MX_IPCC_Init+0x24>)
 8000994:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_IPCC_Init+0x20>)
 8000998:	f001 f9e2 	bl	8001d60 <HAL_IPCC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80009a2:	f000 f987 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000e190 	.word	0x2000e190
 80009b0:	58000c00 	.word	0x58000c00

080009b4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_RNG_Init+0x24>)
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <MX_RNG_Init+0x28>)
 80009cc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_RNG_Init+0x24>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_RNG_Init+0x24>)
 80009d6:	f004 fe03 	bl	80055e0 <HAL_RNG_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80009e0:	f000 f968 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000e1cc 	.word	0x2000e1cc
 80009ec:	58001000 	.word	0x58001000

080009f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_RTC_Init+0x5c>)
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <MX_RTC_Init+0x60>)
 80009f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_RTC_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a02:	227f      	movs	r2, #127	; 0x7f
 8000a04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a08:	22ff      	movs	r2, #255	; 0xff
 8000a0a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a26:	f004 fe67 	bl	80056f8 <HAL_RTC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a30:	f000 f940 	bl	8000cb4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_RTC_Init+0x5c>)
 8000a3a:	f004 ff5d 	bl	80058f8 <HAL_RTCEx_SetWakeUpTimer>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f936 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000e1e0 	.word	0x2000e1e0
 8000a50:	40002800 	.word	0x40002800

08000a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000a9e:	f004 ffe6 	bl	8005a6e <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f904 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000ab0:	f005 fd91 	bl	80065d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f8fb 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000ac2:	f005 fdc6 	bl	8006652 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f8f2 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART1_UART_Init+0x90>)
 8000ad2:	f005 fd47 	bl	8006564 <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f8ea 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000e204 	.word	0x2000e204
 8000ae8:	40013800 	.word	0x40013800

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000af0:	2004      	movs	r0, #4
 8000af2:	f7ff fd17 	bl	8000524 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fd14 	bl	8000524 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	200b      	movs	r0, #11
 8000b02:	f000 fd76 	bl	80015f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b06:	200b      	movs	r0, #11
 8000b08:	f000 fd8d 	bl	8001626 <HAL_NVIC_EnableIRQ>

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b24:	2004      	movs	r0, #4
 8000b26:	f7ff fd16 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fd13 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	2008      	movs	r0, #8
 8000b32:	f7ff fd10 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff fd0d 	bl	8000556 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000b42:	481a      	ldr	r0, [pc, #104]	; (8000bac <MX_GPIO_Init+0x9c>)
 8000b44:	f001 f8b6 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <MX_GPIO_Init+0xa0>)
 8000b4e:	f001 f8b1 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTI10_Pin */
  GPIO_InitStruct.Pin = EXTI10_Pin;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXTI10_GPIO_Port, &GPIO_InitStruct);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 ff33 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000b6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <MX_GPIO_Init+0x9c>)
 8000b86:	f000 ff25 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_GPIO_Init+0xa0>)
 8000ba0:	f000 ff18 	bl	80019d4 <HAL_GPIO_Init>

}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	48000800 	.word	0x48000800
 8000bb0:	48000c00 	.word	0x48000c00

08000bb4 <sign_verify_test_assert>:

/* USER CODE BEGIN 4 */
static int sign_verify_test_assert(int ret, int mlen, uint8_t ref_m[MLEN], uint8_t new_m[MLEN]){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
	  if (ret) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00b      	beq.n	8000be0 <sign_verify_test_assert+0x2c>
	 		  USB_DEBUG_MSG("Verification failed - err_code = %d\r\n", ret);
 8000bc8:	68f9      	ldr	r1, [r7, #12]
 8000bca:	481e      	ldr	r0, [pc, #120]	; (8000c44 <sign_verify_test_assert+0x90>)
 8000bcc:	f015 fa84 	bl	80160d8 <iprintf>
	 		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd6:	481c      	ldr	r0, [pc, #112]	; (8000c48 <sign_verify_test_assert+0x94>)
 8000bd8:	f001 f86c 	bl	8001cb4 <HAL_GPIO_WritePin>
	 		 return 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e02d      	b.n	8000c3c <sign_verify_test_assert+0x88>
	 }

	  if (mlen != MLEN) {
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b3b      	cmp	r3, #59	; 0x3b
 8000be4:	d00a      	beq.n	8000bfc <sign_verify_test_assert+0x48>
		  USB_DEBUG_MSG("Message lengths don't match\r\n");
 8000be6:	4819      	ldr	r0, [pc, #100]	; (8000c4c <sign_verify_test_assert+0x98>)
 8000be8:	f015 fafc 	bl	80161e4 <puts>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <sign_verify_test_assert+0x94>)
 8000bf4:	f001 f85e 	bl	8001cb4 <HAL_GPIO_WritePin>
		  return 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e01f      	b.n	8000c3c <sign_verify_test_assert+0x88>
	  }

	  for (int j = 0; j < mlen; ++j) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e017      	b.n	8000c32 <sign_verify_test_assert+0x7e>
		  if (ref_m[j] != new_m[j]) {
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	6839      	ldr	r1, [r7, #0]
 8000c0e:	440b      	add	r3, r1
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d00a      	beq.n	8000c2c <sign_verify_test_assert+0x78>
			  USB_DEBUG_MSG("Messages don't match\r\n");
 8000c16:	480e      	ldr	r0, [pc, #56]	; (8000c50 <sign_verify_test_assert+0x9c>)
 8000c18:	f015 fae4 	bl	80161e4 <puts>
			  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // RED LED
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c22:	4809      	ldr	r0, [pc, #36]	; (8000c48 <sign_verify_test_assert+0x94>)
 8000c24:	f001 f846 	bl	8001cb4 <HAL_GPIO_WritePin>
			  return 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e007      	b.n	8000c3c <sign_verify_test_assert+0x88>
	  for (int j = 0; j < mlen; ++j) {
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dbe3      	blt.n	8000c02 <sign_verify_test_assert+0x4e>
		  }
	  }
	  return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08017318 	.word	0x08017318
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	08017340 	.word	0x08017340
 8000c50:	08017360 	.word	0x08017360

08000c54 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c5c:	1d39      	adds	r1, r7, #4
 8000c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c62:	2201      	movs	r2, #1
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <__io_putchar+0x20>)
 8000c66:	f004 ff52 	bl	8005b0e <HAL_UART_Transmit>

  return ch;
 8000c6a:	687b      	ldr	r3, [r7, #4]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000e204 	.word	0x2000e204

08000c78 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]
  /* Place your implementation of fgetc here */

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <__io_getchar+0x38>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2208      	movs	r2, #8
 8000c88:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART1 RX line
     and echo this character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c8a:	1df9      	adds	r1, r7, #7
 8000c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c90:	2201      	movs	r2, #1
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <__io_getchar+0x38>)
 8000c94:	f004 ffc1 	bl	8005c1a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c98:	1df9      	adds	r1, r7, #7
 8000c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <__io_getchar+0x38>)
 8000ca2:	f004 ff34 	bl	8005b0e <HAL_UART_Transmit>
  return ch;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000e204 	.word	0x2000e204

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <Error_Handler+0x38>)
 8000cc2:	f001 f80f 	bl	8001ce4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <Error_Handler+0x38>)
 8000ccc:	f001 f80a 	bl	8001ce4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <Error_Handler+0x38>)
 8000cd6:	f001 f805 	bl	8001ce4 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <Error_Handler+0x3c>)
 8000cde:	f001 f801 	bl	8001ce4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce6:	f000 fb85 	bl	80013f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cea:	e7e7      	b.n	8000cbc <Error_Handler+0x8>
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00

08000cf4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <LL_AHB2_GRP1_EnableClock>:
{
 8000d16:	b480      	push	{r7}
 8000d18:	b085      	sub	sp, #20
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4013      	ands	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b085      	sub	sp, #20
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000de2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000de6:	f7ff ffaf 	bl	8000d48 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	202e      	movs	r0, #46	; 0x2e
 8000df0:	f000 fbff 	bl	80015f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000df4:	202e      	movs	r0, #46	; 0x2e
 8000df6:	f000 fc16 	bl	8001626 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_IPCC_MspInit+0x44>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d113      	bne.n	8000e3a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000e12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e16:	f7ff ff97 	bl	8000d48 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f000 fbe7 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000e24:	202c      	movs	r0, #44	; 0x2c
 8000e26:	f000 fbfe 	bl	8001626 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	202d      	movs	r0, #45	; 0x2d
 8000e30:	f000 fbdf 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000e34:	202d      	movs	r0, #45	; 0x2d
 8000e36:	f000 fbf6 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	58000c00 	.word	0x58000c00

08000e48 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b096      	sub	sp, #88	; 0x58
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	2250      	movs	r2, #80	; 0x50
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f015 f935 	bl	80160c8 <memset>
  if(hrng->Instance==RNG)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_RNG_MspInit+0x50>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d113      	bne.n	8000e90 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 f92a 	bl	80050d2 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000e84:	f7ff ff16 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e88:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e8c:	f7ff ff5c 	bl	8000d48 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3758      	adds	r7, #88	; 0x58
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58001000 	.word	0x58001000

08000e9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b096      	sub	sp, #88	; 0x58
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2250      	movs	r2, #80	; 0x50
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f015 f90b 	bl	80160c8 <memset>
  if(hrtc->Instance==RTC)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_RTC_MspInit+0x54>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d115      	bne.n	8000ee8 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ec0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 f900 	bl	80050d2 <HAL_RCCEx_PeriphCLKConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ed8:	f7ff feec 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000edc:	f7ff ff0a 	bl	8000cf4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ee0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ee4:	f7ff ff49 	bl	8000d7a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3758      	adds	r7, #88	; 0x58
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40002800 	.word	0x40002800

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b09c      	sub	sp, #112	; 0x70
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2250      	movs	r2, #80	; 0x50
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f015 f8d7 	bl	80160c8 <memset>
  if(huart->Instance==USART1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <HAL_UART_MspInit+0xd4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d14d      	bne.n	8000fc0 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 f8ce 	bl	80050d2 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f3c:	f7ff feba 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f44:	f7ff ff32 	bl	8000dac <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff fee4 	bl	8000d16 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4e:	23c0      	movs	r3, #192	; 0xc0
 8000f50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f66:	4619      	mov	r1, r3
 8000f68:	4818      	ldr	r0, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0xd8>)
 8000f6a:	f000 fd33 	bl	80019d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0xe0>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f76:	220f      	movs	r2, #15
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000fa6:	f000 fb59 	bl	800165c <HAL_DMA_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000fb0:	f7ff fe80 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000fb8:	67da      	str	r2, [r3, #124]	; 0x7c
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_UART_MspInit+0xdc>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3770      	adds	r7, #112	; 0x70
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	2000e298 	.word	0x2000e298
 8000fd4:	40020008 	.word	0x40020008

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f9ba 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA1_Channel1_IRQHandler+0x10>)
 8001032:	f000 fbbb 	bl	80017ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000e298 	.word	0x2000e298

08001040 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <USB_LP_IRQHandler+0x10>)
 8001046:	f001 f8a6 	bl	8002196 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000f7e0 	.word	0x2000f7e0

08001054 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <IPCC_C1_RX_IRQHandler+0x10>)
 800105a:	f000 ff01 	bl	8001e60 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000e190 	.word	0x2000e190

08001068 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <IPCC_C1_TX_IRQHandler+0x10>)
 800106e:	f000 fea9 	bl	8001dc4 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000e190 	.word	0x2000e190

0800107c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001080:	f000 fe4a 	bl	8001d18 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109a:	f7ff fded 	bl	8000c78 <__io_getchar>
 800109e:	4601      	mov	r1, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf0      	blt.n	800109a <_read+0x12>
  }

  return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e009      	b.n	80010e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fdb9 	bl	8000c54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf1      	blt.n	80010d4 <_write+0x12>
  }
  return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_close>:

int _close(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001122:	605a      	str	r2, [r3, #4]
  return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_isatty>:

int _isatty(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f014 ff60 	bl	8016058 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20030000 	.word	0x20030000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	2000e2f8 	.word	0x2000e2f8
 80011cc:	2000fda8 	.word	0x2000fda8

080011d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <SystemInit+0x98>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a23      	ldr	r2, [pc, #140]	; (8001268 <SystemInit+0x98>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80011fc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80011fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <SystemInit+0x9c>)
 800120a:	4013      	ands	r3, r2
 800120c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121a:	f023 0305 	bic.w	r3, r3, #5
 800121e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800122a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <SystemInit+0xa0>)
 800123c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800123e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <SystemInit+0xa0>)
 8001244:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00
 800126c:	faf6fefb 	.word	0xfaf6fefb
 8001270:	22041000 	.word	0x22041000

08001274 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001274:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001276:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001278:	3304      	adds	r3, #4

0800127a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800127e:	d3f9      	bcc.n	8001274 <CopyDataInit>
  bx lr
 8001280:	4770      	bx	lr

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001282:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001284:	3004      	adds	r0, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001286:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>
  bx lr
 800128a:	4770      	bx	lr

0800128c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800128e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001290:	f7ff ff9e 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <LoopForever+0x6>)
 8001296:	490c      	ldr	r1, [pc, #48]	; (80012c8 <LoopForever+0xa>)
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <LoopForever+0xe>)
 800129a:	2300      	movs	r3, #0
 800129c:	f7ff ffed 	bl	800127a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <LoopForever+0x12>)
 80012a2:	490c      	ldr	r1, [pc, #48]	; (80012d4 <LoopForever+0x16>)
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <LoopForever+0x1a>)
 80012a6:	2300      	movs	r3, #0
 80012a8:	f7ff ffe7 	bl	800127a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <LoopForever+0x1e>)
 80012ae:	490c      	ldr	r1, [pc, #48]	; (80012e0 <LoopForever+0x22>)
 80012b0:	2300      	movs	r3, #0
 80012b2:	f7ff ffe8 	bl	8001286 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012b6:	f014 fed5 	bl	8016064 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80012ba:	f7ff f965 	bl	8000588 <main>

080012be <LoopForever>:

LoopForever:
  b LoopForever
 80012be:	e7fe      	b.n	80012be <LoopForever>
  ldr   r0, =_estack
 80012c0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80012c4:	20000008 	.word	0x20000008
 80012c8:	2000e174 	.word	0x2000e174
 80012cc:	08017a28 	.word	0x08017a28
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80012d0:	20030000 	.word	0x20030000
 80012d4:	20030000 	.word	0x20030000
 80012d8:	08025b94 	.word	0x08025b94
  INIT_BSS _sbss, _ebss
 80012dc:	2000e174 	.word	0x2000e174
 80012e0:	2000fda4 	.word	0x2000fda4

080012e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_Init+0x3c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_Init+0x3c>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fe:	2003      	movs	r0, #3
 8001300:	f000 f96c 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001304:	200f      	movs	r0, #15
 8001306:	f000 f80f 	bl	8001328 <HAL_InitTick>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	e001      	b.n	800131a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001316:	f7ff fd62 	bl	8000dde <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800131a:	79fb      	ldrb	r3, [r7, #7]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58004000 	.word	0x58004000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_InitTick+0x6c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d024      	beq.n	8001386 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800133c:	f003 fc38 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8001340:	4602      	mov	r2, r0
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_InitTick+0x6c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f974 	bl	8001642 <HAL_SYSTICK_Config>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10f      	bne.n	8001380 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	d809      	bhi.n	800137a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001366:	2200      	movs	r2, #0
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	f04f 30ff 	mov.w	r0, #4294967295
 800136e:	f000 f940 	bl	80015f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_InitTick+0x70>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e007      	b.n	800138a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e004      	b.n	800138a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e001      	b.n	800138a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000010 	.word	0x20000010
 8001398:	2000000c 	.word	0x2000000c

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000010 	.word	0x20000010
 80013c0:	2000e2fc 	.word	0x2000e2fc

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000e2fc 	.word	0x2000e2fc

080013dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetTickPrio+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	2000000c 	.word	0x2000000c

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff ffe2 	bl	80013c4 <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffd2 	bl	80013c4 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000010 	.word	0x20000010

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff40 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff33 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa4 	bl	8001598 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e08e      	b.n	800178c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_DMA_Init+0x138>)
 8001676:	429a      	cmp	r2, r3
 8001678:	d80f      	bhi.n	800169a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_DMA_Init+0x13c>)
 8001682:	4413      	add	r3, r2
 8001684:	4a45      	ldr	r2, [pc, #276]	; (800179c <HAL_DMA_Init+0x140>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	009a      	lsls	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <HAL_DMA_Init+0x144>)
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
 8001698:	e00e      	b.n	80016b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <HAL_DMA_Init+0x148>)
 80016a2:	4413      	add	r3, r2
 80016a4:	4a3d      	ldr	r2, [pc, #244]	; (800179c <HAL_DMA_Init+0x140>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	009a      	lsls	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a3c      	ldr	r2, [pc, #240]	; (80017a8 <HAL_DMA_Init+0x14c>)
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8fe 	bl	800190c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001718:	d102      	bne.n	8001720 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800172c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001736:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d010      	beq.n	8001762 <HAL_DMA_Init+0x106>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d80c      	bhi.n	8001762 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f91d 	bl	8001988 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	e008      	b.n	8001774 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40020407 	.word	0x40020407
 8001798:	bffdfff8 	.word	0xbffdfff8
 800179c:	cccccccd 	.word	0xcccccccd
 80017a0:	40020000 	.word	0x40020000
 80017a4:	bffdfbf8 	.word	0xbffdfbf8
 80017a8:	40020400 	.word	0x40020400

080017ac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f003 031c 	and.w	r3, r3, #28
 80017cc:	2204      	movs	r2, #4
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d026      	beq.n	8001826 <HAL_DMA_IRQHandler+0x7a>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d021      	beq.n	8001826 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d107      	bne.n	8001800 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0204 	bic.w	r2, r2, #4
 80017fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f003 021c 	and.w	r2, r3, #28
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	2104      	movs	r1, #4
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	2b00      	cmp	r3, #0
 800181a:	d071      	beq.n	8001900 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001824:	e06c      	b.n	8001900 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f003 031c 	and.w	r3, r3, #28
 800182e:	2202      	movs	r2, #2
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d02e      	beq.n	8001898 <HAL_DMA_IRQHandler+0xec>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d029      	beq.n	8001898 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10b      	bne.n	800186a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 020a 	bic.w	r2, r2, #10
 8001860:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 021c 	and.w	r2, r3, #28
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2102      	movs	r1, #2
 8001878:	fa01 f202 	lsl.w	r2, r1, r2
 800187c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d038      	beq.n	8001900 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001896:	e033      	b.n	8001900 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f003 031c 	and.w	r3, r3, #28
 80018a0:	2208      	movs	r2, #8
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d02a      	beq.n	8001902 <HAL_DMA_IRQHandler+0x156>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d025      	beq.n	8001902 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 020e 	bic.w	r2, r2, #14
 80018c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f003 021c 	and.w	r2, r3, #28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001900:	bf00      	nop
 8001902:	bf00      	nop
}
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800191c:	429a      	cmp	r2, r3
 800191e:	d80a      	bhi.n	8001936 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800192c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6493      	str	r3, [r2, #72]	; 0x48
 8001934:	e007      	b.n	8001946 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	009a      	lsls	r2, r3, #2
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001940:	4413      	add	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	3b08      	subs	r3, #8
 800194e:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800195c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	2201      	movs	r2, #1
 8001966:	409a      	lsls	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40020407 	.word	0x40020407
 800197c:	4002081c 	.word	0x4002081c
 8001980:	cccccccd 	.word	0xcccccccd
 8001984:	40020880 	.word	0x40020880

08001988 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001998:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80019ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2201      	movs	r2, #1
 80019b8:	409a      	lsls	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	1000823f 	.word	0x1000823f
 80019d0:	40020940 	.word	0x40020940

080019d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e14c      	b.n	8001c7e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 813e 	beq.w	8001c78 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d005      	beq.n	8001a14 <HAL_GPIO_Init+0x40>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d130      	bne.n	8001a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 0201 	and.w	r2, r3, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d017      	beq.n	8001ab2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d123      	bne.n	8001b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8098 	beq.w	8001c78 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_GPIO_Init+0x2c8>)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b72:	d019      	beq.n	8001ba8 <HAL_GPIO_Init+0x1d4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x2cc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_GPIO_Init+0x1d0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00d      	beq.n	8001ba0 <HAL_GPIO_Init+0x1cc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x2d4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <HAL_GPIO_Init+0x1c8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_GPIO_Init+0x2d8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_GPIO_Init+0x1c4>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e008      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001b98:	2307      	movs	r3, #7
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x1d6>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bba:	4938      	ldr	r1, [pc, #224]	; (8001c9c <HAL_GPIO_Init+0x2c8>)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc8:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c16:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f47f aeab 	bne.w	80019e4 <HAL_GPIO_Init+0x10>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	48001000 	.word	0x48001000
 8001cb0:	58000800 	.word	0x58000800

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43d9      	mvns	r1, r3
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	400b      	ands	r3, r1
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_HSEM_IRQHandler+0x30>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_HSEM_IRQHandler+0x30>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4906      	ldr	r1, [pc, #24]	; (8001d48 <HAL_HSEM_IRQHandler+0x30>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_HSEM_IRQHandler+0x30>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f807 	bl	8001d4c <HAL_HSEM_FreeCallback>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	58001500 	.word	0x58001500

08001d4c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01e      	beq.n	8001db0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_IPCC_Init+0x60>)
 8001d74:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff f83c 	bl	8000e00 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001d88:	68b8      	ldr	r0, [r7, #8]
 8001d8a:	f000 f8f5 	bl	8001f78 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8c6 	bl	8001f2c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001dae:	e001      	b.n	8001db4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	58000c00 	.word	0x58000c00

08001dc4 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_IPCC_TX_IRQHandler+0x98>)
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001dde:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	43db      	mvns	r3, r3
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4013      	ands	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001dee:	e02c      	b.n	8001e4a <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3310      	adds	r3, #16
 8001df8:	2201      	movs	r2, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01c      	beq.n	8001e44 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	3306      	adds	r3, #6
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	3306      	adds	r3, #6
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	3301      	adds	r3, #1
 8001e48:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1cf      	bne.n	8001df0 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	58000c00 	.word	0x58000c00

08001e60 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_IPCC_RX_IRQHandler+0x90>)
 8001e6e:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_IPCC_RX_IRQHandler+0x94>)
 8001e72:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e7e:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001e8a:	e029      	b.n	8001ee0 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	2201      	movs	r2, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01a      	beq.n	8001eda <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	3301      	adds	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d2      	bne.n	8001e8c <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58000c00 	.word	0x58000c00
 8001ef4:	58000c10 	.word	0x58000c10

08001ef8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e00f      	b.n	8001f5a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <IPCC_SetDefaultCallbacks+0x44>)
 8001f44:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3306      	adds	r3, #6
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <IPCC_SetDefaultCallbacks+0x48>)
 8001f52:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d9ec      	bls.n	8001f3a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	08001ef9 	.word	0x08001ef9
 8001f74:	08001f13 	.word	0x08001f13

08001f78 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001f8c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	223f      	movs	r2, #63	; 0x3f
 8001f92:	609a      	str	r2, [r3, #8]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	b08b      	sub	sp, #44	; 0x2c
 8001fa4:	af06      	add	r7, sp, #24
 8001fa6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0cb      	b.n	800214a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f009 f880 	bl	800b0cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 fbde 	bl	800679a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e040      	b.n	8002066 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	3303      	adds	r3, #3
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3338      	adds	r3, #56	; 0x38
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	333c      	adds	r3, #60	; 0x3c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3340      	adds	r3, #64	; 0x40
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	3301      	adds	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	d3b9      	bcc.n	8001fe4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e044      	b.n	8002100 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3b5      	bcc.n	8002076 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	687e      	ldr	r6, [r7, #4]
 8002112:	466d      	mov	r5, sp
 8002114:	f106 0410 	add.w	r4, r6, #16
 8002118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	602b      	str	r3, [r5, #0]
 8002120:	1d33      	adds	r3, r6, #4
 8002122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002124:	6838      	ldr	r0, [r7, #0]
 8002126:	f004 fb53 	bl	80067d0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 fc45 	bl	80039d2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002152 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_PCD_Start+0x16>
 8002164:	2302      	movs	r3, #2
 8002166:	e012      	b.n	800218e <HAL_PCD_Start+0x3c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f004 faf9 	bl	800676c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f006 fdbd 	bl	8008cfe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f006 fdc2 	bl	8008d2c <USB_ReadInterrupts>
 80021a8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fb05 	bl	80027c4 <PCD_EP_ISR_Handler>

    return;
 80021ba:	e110      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d013      	beq.n	80021ee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d8:	b292      	uxth	r2, r2
 80021da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f009 f817 	bl	800b212 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8fc 	bl	80023e4 <HAL_PCD_SetAddress>

    return;
 80021ec:	e0f7      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00c      	beq.n	8002212 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800220a:	b292      	uxth	r2, r2
 800220c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002210:	e0e5      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00c      	beq.n	8002236 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800222e:	b292      	uxth	r2, r2
 8002230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002234:	e0d3      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d034      	beq.n	80022aa <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	b292      	uxth	r2, r2
 8002254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0208 	bic.w	r2, r2, #8
 800226a:	b292      	uxth	r2, r2
 800226c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002282:	2100      	movs	r1, #0
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f009 f9bb 	bl	800b600 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f008 fffa 	bl	800b284 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002298:	b29a      	uxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022a2:	b292      	uxth	r2, r2
 80022a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80022a8:	e099      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d027      	beq.n	8002304 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0208 	orr.w	r2, r2, #8
 80022c6:	b292      	uxth	r2, r2
 80022c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022de:	b292      	uxth	r2, r2
 80022e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0204 	orr.w	r2, r2, #4
 80022f6:	b292      	uxth	r2, r2
 80022f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f008 ffa7 	bl	800b250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002302:	e06c      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d040      	beq.n	8002390 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002320:	b292      	uxth	r2, r2
 8002322:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d12b      	bne.n	8002388 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0204 	orr.w	r2, r2, #4
 8002342:	b292      	uxth	r2, r2
 8002344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	b292      	uxth	r2, r2
 800235c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002370:	b29b      	uxth	r3, r3
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800237e:	2101      	movs	r1, #1
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f009 f93d 	bl	800b600 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002386:	e02a      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f008 ff61 	bl	800b250 <HAL_PCD_SuspendCallback>
    return;
 800238e:	e026      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00f      	beq.n	80023ba <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023ac:	b292      	uxth	r2, r2
 80023ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f008 ff1f 	bl	800b1f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80023b8:	e011      	b.n	80023de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d6:	b292      	uxth	r2, r2
 80023d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023dc:	bf00      	nop
  }
}
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_PCD_SetAddress+0x1a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e013      	b.n	8002426 <HAL_PCD_SetAddress+0x42>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f006 fc5d 	bl	8008cd6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	4608      	mov	r0, r1
 8002438:	4611      	mov	r1, r2
 800243a:	461a      	mov	r2, r3
 800243c:	4603      	mov	r3, r0
 800243e:	70fb      	strb	r3, [r7, #3]
 8002440:	460b      	mov	r3, r1
 8002442:	803b      	strh	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800244c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002450:	2b00      	cmp	r3, #0
 8002452:	da0e      	bge.n	8002472 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	705a      	strb	r2, [r3, #1]
 8002470:	e00e      	b.n	8002490 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 0207 	and.w	r2, r3, #7
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800249c:	883a      	ldrh	r2, [r7, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	78ba      	ldrb	r2, [r7, #2]
 80024a6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024a8:	78bb      	ldrb	r3, [r7, #2]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d102      	bne.n	80024b4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_PCD_EP_Open+0x94>
 80024be:	2302      	movs	r3, #2
 80024c0:	e00e      	b.n	80024e0 <HAL_PCD_EP_Open+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68f9      	ldr	r1, [r7, #12]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 f99f 	bl	8006814 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80024de:	7afb      	ldrb	r3, [r7, #11]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da0e      	bge.n	800251a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	705a      	strb	r2, [r3, #1]
 8002518:	e00e      	b.n	8002538 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 0207 	and.w	r2, r3, #7
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_PCD_EP_Close+0x6a>
 800254e:	2302      	movs	r3, #2
 8002550:	e00e      	b.n	8002570 <HAL_PCD_EP_Close+0x88>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68f9      	ldr	r1, [r7, #12]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 fd1b 	bl	8006f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	460b      	mov	r3, r1
 8002586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	f003 0207 	and.w	r2, r3, #7
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4413      	add	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2200      	movs	r2, #0
 80025b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b8:	7afb      	ldrb	r3, [r7, #11]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6979      	ldr	r1, [r7, #20]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 fed3 	bl	8007376 <USB_EPStartXfer>

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 0207 	and.w	r2, r3, #7
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	440b      	add	r3, r1
 80025f8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80025fc:	681b      	ldr	r3, [r3, #0]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	460b      	mov	r3, r1
 8002618:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4413      	add	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2201      	movs	r2, #1
 8002654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	b2da      	uxtb	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6979      	ldr	r1, [r7, #20]
 8002668:	4618      	mov	r0, r3
 800266a:	f004 fe84 	bl	8007376 <USB_EPStartXfer>

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	f003 0207 	and.w	r2, r3, #7
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d901      	bls.n	8002696 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e03e      	b.n	8002714 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800269a:	2b00      	cmp	r3, #0
 800269c:	da0e      	bge.n	80026bc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	705a      	strb	r2, [r3, #1]
 80026ba:	e00c      	b.n	80026d6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_EP_SetStall+0x7e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e00e      	b.n	8002714 <HAL_PCD_EP_SetStall+0x9c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f006 f9e7 	bl	8008ad8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 020f 	and.w	r2, r3, #15
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d901      	bls.n	800273a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e040      	b.n	80027bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800273a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273e:	2b00      	cmp	r3, #0
 8002740:	da0e      	bge.n	8002760 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	705a      	strb	r2, [r3, #1]
 800275e:	e00e      	b.n	800277e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 0207 	and.w	r2, r3, #7
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_PCD_EP_ClrStall+0x82>
 800279a:	2302      	movs	r3, #2
 800279c:	e00e      	b.n	80027bc <HAL_PCD_EP_ClrStall+0xa0>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f006 f9e4 	bl	8008b7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b096      	sub	sp, #88	; 0x58
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027cc:	e3b1      	b.n	8002f32 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80027e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 8173 	bne.w	8002ad8 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d150      	bne.n	80028a0 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	81fb      	strh	r3, [r7, #14]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	89fb      	ldrh	r3, [r7, #14]
 8002816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281e:	b29b      	uxth	r3, r3
 8002820:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3328      	adds	r3, #40	; 0x28
 8002826:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4413      	add	r3, r2
 8002842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	441a      	add	r2, r3
 800285a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800285e:	2100      	movs	r1, #0
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f008 fcae 	bl	800b1c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 835f 	beq.w	8002f32 <PCD_EP_ISR_Handler+0x76e>
 8002874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 835a 	bne.w	8002f32 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800288a:	b2da      	uxtb	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b292      	uxth	r2, r2
 8002892:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800289e:	e348      	b.n	8002f32 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028a6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d032      	beq.n	8002924 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f006 fa69 	bl	8008dd0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29a      	uxth	r2, r3
 8002906:	f640 738f 	movw	r3, #3983	; 0xf8f
 800290a:	4013      	ands	r3, r2
 800290c:	823b      	strh	r3, [r7, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	8a3a      	ldrh	r2, [r7, #16]
 8002914:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002918:	b292      	uxth	r2, r2
 800291a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f008 fc23 	bl	800b168 <HAL_PCD_SetupStageCallback>
 8002922:	e306      	b.n	8002f32 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002924:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002928:	2b00      	cmp	r3, #0
 800292a:	f280 8302 	bge.w	8002f32 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29a      	uxth	r2, r3
 8002936:	f640 738f 	movw	r3, #3983	; 0xf8f
 800293a:	4013      	ands	r3, r2
 800293c:	83fb      	strh	r3, [r7, #30]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	8bfa      	ldrh	r2, [r7, #30]
 8002944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002948:	b292      	uxth	r2, r2
 800294a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	4413      	add	r3, r2
 8002966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002972:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d019      	beq.n	80029b0 <PCD_EP_ISR_Handler+0x1ec>
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298a:	6959      	ldr	r1, [r3, #20]
 800298c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002992:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002994:	b29b      	uxth	r3, r3
 8002996:	f006 fa1b 	bl	8008dd0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	441a      	add	r2, r3
 80029a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029a8:	2100      	movs	r1, #0
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f008 fbee 	bl	800b18c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80029ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 82b5 	bne.w	8002f32 <PCD_EP_ISR_Handler+0x76e>
 80029c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029d4:	f000 82ad 	beq.w	8002f32 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	801a      	strh	r2, [r3, #0]
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a0e:	d91d      	bls.n	8002a4c <PCD_EP_ISR_Handler+0x288>
 8002a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	647b      	str	r3, [r7, #68]	; 0x44
 8002a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <PCD_EP_ISR_Handler+0x266>
 8002a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a26:	3b01      	subs	r3, #1
 8002a28:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	029b      	lsls	r3, r3, #10
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	e026      	b.n	8002a9a <PCD_EP_ISR_Handler+0x2d6>
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <PCD_EP_ISR_Handler+0x2a6>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	e017      	b.n	8002a9a <PCD_EP_ISR_Handler+0x2d6>
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <PCD_EP_ISR_Handler+0x2c0>
 8002a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a80:	3301      	adds	r3, #1
 8002a82:	647b      	str	r3, [r7, #68]	; 0x44
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	029b      	lsls	r3, r3, #10
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4313      	orrs	r3, r2
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	827b      	strh	r3, [r7, #18]
 8002aac:	8a7b      	ldrh	r3, [r7, #18]
 8002aae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ab2:	827b      	strh	r3, [r7, #18]
 8002ab4:	8a7b      	ldrh	r3, [r7, #18]
 8002ab6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002aba:	827b      	strh	r3, [r7, #18]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	8a7b      	ldrh	r3, [r7, #18]
 8002ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	8013      	strh	r3, [r2, #0]
 8002ad6:	e22c      	b.n	8002f32 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002aec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f280 80f6 	bge.w	8002ce2 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002b24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b2c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b44:	7b1b      	ldrb	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d123      	bne.n	8002b92 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002b72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 808e 	beq.w	8002c98 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	6959      	ldr	r1, [r3, #20]
 8002b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b86:	88da      	ldrh	r2, [r3, #6]
 8002b88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b8c:	f006 f920 	bl	8008dd0 <USB_ReadPMA>
 8002b90:	e082      	b.n	8002c98 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	78db      	ldrb	r3, [r3, #3]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d10a      	bne.n	8002bb0 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9d3 	bl	8002f4e <HAL_PCD_EP_DB_Receive>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002bae:	e073      	b.n	8002c98 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	441a      	add	r2, r3
 8002bdc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d022      	beq.n	8002c54 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002c36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02c      	beq.n	8002c98 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c44:	6959      	ldr	r1, [r3, #20]
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	891a      	ldrh	r2, [r3, #8]
 8002c4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c4e:	f006 f8bf 	bl	8008dd0 <USB_ReadPMA>
 8002c52:	e021      	b.n	8002c98 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002c7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8a:	6959      	ldr	r1, [r3, #20]
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8e:	895a      	ldrh	r2, [r3, #10]
 8002c90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c94:	f006 f89c 	bl	8008dd0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ca0:	441a      	add	r2, r3
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002cae:	441a      	add	r2, r3
 8002cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <PCD_EP_ISR_Handler+0x504>
 8002cbc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d206      	bcs.n	8002cd6 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f008 fa5c 	bl	800b18c <HAL_PCD_DataOutStageCallback>
 8002cd4:	e005      	b.n	8002ce2 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 fb4a 	bl	8007376 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ce2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8121 	beq.w	8002f32 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	441a      	add	r2, r3
 8002d30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d42:	78db      	ldrb	r3, [r3, #3]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	f040 80a2 	bne.w	8002e8e <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d52:	7b1b      	ldrb	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8093 	beq.w	8002e80 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d046      	beq.n	8002df4 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d126      	bne.n	8002dbc <PCD_EP_ISR_Handler+0x5f8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	4413      	add	r3, r2
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	00da      	lsls	r2, r3, #3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	4413      	add	r3, r2
 8002d90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	e061      	b.n	8002e80 <PCD_EP_ISR_Handler+0x6bc>
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d15d      	bne.n	8002e80 <PCD_EP_ISR_Handler+0x6bc>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	4413      	add	r3, r2
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	00da      	lsls	r2, r3, #3
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2200      	movs	r2, #0
 8002df0:	801a      	strh	r2, [r3, #0]
 8002df2:	e045      	b.n	8002e80 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d126      	bne.n	8002e50 <PCD_EP_ISR_Handler+0x68c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	4413      	add	r3, r2
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	00da      	lsls	r2, r3, #3
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	4413      	add	r3, r2
 8002e24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e017      	b.n	8002e80 <PCD_EP_ISR_Handler+0x6bc>
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d113      	bne.n	8002e80 <PCD_EP_ISR_Handler+0x6bc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	4413      	add	r3, r2
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	00da      	lsls	r2, r3, #3
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	4413      	add	r3, r2
 8002e74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f008 f99b 	bl	800b1c2 <HAL_PCD_DataInStageCallback>
 8002e8c:	e051      	b.n	8002f32 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d144      	bne.n	8002f24 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d907      	bls.n	8002ede <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ed6:	1ad2      	subs	r2, r2, r3
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	e002      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f008 f965 	bl	800b1c2 <HAL_PCD_DataInStageCallback>
 8002ef8:	e01b      	b.n	8002f32 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f02:	441a      	add	r2, r3
 8002f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f06:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f10:	441a      	add	r2, r3
 8002f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f14:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f004 fa2a 	bl	8007376 <USB_EPStartXfer>
 8002f22:	e006      	b.n	8002f32 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f917 	bl	8003160 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f6ff ac45 	blt.w	80027ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3758      	adds	r7, #88	; 0x58
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b088      	sub	sp, #32
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d07c      	beq.n	8003060 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	8b7b      	ldrh	r3, [r7, #26]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d306      	bcc.n	8002fa4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	8b7b      	ldrh	r3, [r7, #26]
 8002f9c:	1ad2      	subs	r2, r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	619a      	str	r2, [r3, #24]
 8002fa2:	e002      	b.n	8002faa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d123      	bne.n	8002ffa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fcc:	833b      	strh	r3, [r7, #24]
 8002fce:	8b3b      	ldrh	r3, [r7, #24]
 8002fd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fd4:	833b      	strh	r3, [r7, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	441a      	add	r2, r3
 8002fe4:	8b3b      	ldrh	r3, [r7, #24]
 8002fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01f      	beq.n	8003044 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	82fb      	strh	r3, [r7, #22]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	441a      	add	r2, r3
 800302e:	8afb      	ldrh	r3, [r7, #22]
 8003030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003040:	b29b      	uxth	r3, r3
 8003042:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003044:	8b7b      	ldrh	r3, [r7, #26]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8085 	beq.w	8003156 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6959      	ldr	r1, [r3, #20]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	891a      	ldrh	r2, [r3, #8]
 8003058:	8b7b      	ldrh	r3, [r7, #26]
 800305a:	f005 feb9 	bl	8008dd0 <USB_ReadPMA>
 800305e:	e07a      	b.n	8003156 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	4413      	add	r3, r2
 800307a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003084:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	8b7b      	ldrh	r3, [r7, #26]
 800308c:	429a      	cmp	r2, r3
 800308e:	d306      	bcc.n	800309e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	8b7b      	ldrh	r3, [r7, #26]
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	619a      	str	r2, [r3, #24]
 800309c:	e002      	b.n	80030a4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d123      	bne.n	80030f4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	83fb      	strh	r3, [r7, #30]
 80030c8:	8bfb      	ldrh	r3, [r7, #30]
 80030ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030ce:	83fb      	strh	r3, [r7, #30]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	8bfb      	ldrh	r3, [r7, #30]
 80030e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11f      	bne.n	800313e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	83bb      	strh	r3, [r7, #28]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	8bbb      	ldrh	r3, [r7, #28]
 800312a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800313a:	b29b      	uxth	r3, r3
 800313c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800313e:	8b7b      	ldrh	r3, [r7, #26]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6959      	ldr	r1, [r3, #20]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	895a      	ldrh	r2, [r3, #10]
 8003150:	8b7b      	ldrh	r3, [r7, #26]
 8003152:	f005 fe3d 	bl	8008dd0 <USB_ReadPMA>
    }
  }

  return count;
 8003156:	8b7b      	ldrh	r3, [r7, #26]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0a4      	sub	sp, #144	; 0x90
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 81db 	beq.w	8003530 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4413      	add	r3, r2
 8003194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d907      	bls.n	80031be <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	619a      	str	r2, [r3, #24]
 80031bc:	e002      	b.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 80b9 	bne.w	8003340 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d126      	bne.n	8003224 <HAL_PCD_EP_DB_Transmit+0xc4>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	4413      	add	r3, r2
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	00da      	lsls	r2, r3, #3
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	4413      	add	r3, r2
 80031f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003208:	b29a      	uxth	r2, r3
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321c:	b29a      	uxth	r2, r3
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	801a      	strh	r2, [r3, #0]
 8003222:	e01a      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0xfa>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	785b      	ldrb	r3, [r3, #1]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d116      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0xfa>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	4413      	add	r3, r2
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	00da      	lsls	r2, r3, #3
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	4413      	add	r3, r2
 800324e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003252:	633b      	str	r3, [r7, #48]	; 0x30
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	2200      	movs	r2, #0
 8003258:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d126      	bne.n	80032b6 <HAL_PCD_EP_DB_Transmit+0x156>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00da      	lsls	r2, r3, #3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800329a:	b29a      	uxth	r2, r3
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	801a      	strh	r2, [r3, #0]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	e017      	b.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d113      	bne.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	4413      	add	r3, r2
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	00da      	lsls	r2, r3, #3
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	4413      	add	r3, r2
 80032da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2200      	movs	r2, #0
 80032e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f007 ff68 	bl	800b1c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 82fa 	beq.w	80038f2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003318:	82fb      	strh	r3, [r7, #22]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	8afb      	ldrh	r3, [r7, #22]
 800332a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333a:	b29b      	uxth	r3, r3
 800333c:	8013      	strh	r3, [r2, #0]
 800333e:	e2d8      	b.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d021      	beq.n	800338e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003364:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	441a      	add	r2, r3
 8003376:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800337a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800337e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338a:	b29b      	uxth	r3, r3
 800338c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003394:	2b01      	cmp	r3, #1
 8003396:	f040 82ac 	bne.w	80038f2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033a2:	441a      	add	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033b0:	441a      	add	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d30b      	bcc.n	80033da <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d2:	1ad2      	subs	r2, r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	621a      	str	r2, [r3, #32]
 80033d8:	e017      	b.n	800340a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80033e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033f2:	e00a      	b.n	800340a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2200      	movs	r2, #0
 8003408:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d165      	bne.n	80034de <HAL_PCD_EP_DB_Transmit+0x37e>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003426:	4413      	add	r3, r2
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	00da      	lsls	r2, r3, #3
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	4413      	add	r3, r2
 8003434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003444:	b29a      	uxth	r2, r3
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344e:	2b3e      	cmp	r3, #62	; 0x3e
 8003450:	d91d      	bls.n	800348e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
 800345a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003468:	3b01      	subs	r3, #1
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29a      	uxth	r2, r3
 8003472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003474:	b29b      	uxth	r3, r3
 8003476:	029b      	lsls	r3, r3, #10
 8003478:	b29b      	uxth	r3, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	b29b      	uxth	r3, r3
 800347e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003486:	b29a      	uxth	r2, r3
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	e044      	b.n	8003518 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800348e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <HAL_PCD_EP_DB_Transmit+0x34c>
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	801a      	strh	r2, [r3, #0]
 80034aa:	e035      	b.n	8003518 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_PCD_EP_DB_Transmit+0x366>
 80034c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c2:	3301      	adds	r3, #1
 80034c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	029b      	lsls	r3, r3, #10
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	801a      	strh	r2, [r3, #0]
 80034dc:	e01c      	b.n	8003518 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d118      	bne.n	8003518 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	647b      	str	r3, [r7, #68]	; 0x44
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fa:	4413      	add	r3, r2
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00da      	lsls	r2, r3, #3
 8003504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003506:	4413      	add	r3, r2
 8003508:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800350c:	643b      	str	r3, [r7, #64]	; 0x40
 800350e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003512:	b29a      	uxth	r2, r3
 8003514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003516:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6959      	ldr	r1, [r3, #20]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	891a      	ldrh	r2, [r3, #8]
 8003524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003528:	b29b      	uxth	r3, r3
 800352a:	f005 fc0f 	bl	8008d4c <USB_WritePMA>
 800352e:	e1e0      	b.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	4413      	add	r3, r2
 800354a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003554:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003560:	429a      	cmp	r2, r3
 8003562:	d307      	bcc.n	8003574 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	619a      	str	r2, [r3, #24]
 8003572:	e002      	b.n	800357a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2200      	movs	r2, #0
 8003578:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 80c0 	bne.w	8003704 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d126      	bne.n	80035da <HAL_PCD_EP_DB_Transmit+0x47a>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800359a:	b29b      	uxth	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035a0:	4413      	add	r3, r2
 80035a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	00da      	lsls	r2, r3, #3
 80035aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035ac:	4413      	add	r3, r2
 80035ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80035b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035be:	b29a      	uxth	r2, r3
 80035c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c2:	801a      	strh	r2, [r3, #0]
 80035c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	e01a      	b.n	8003610 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d116      	bne.n	8003610 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	667b      	str	r3, [r7, #100]	; 0x64
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f6:	4413      	add	r3, r2
 80035f8:	667b      	str	r3, [r7, #100]	; 0x64
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	00da      	lsls	r2, r3, #3
 8003600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003602:	4413      	add	r3, r2
 8003604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003608:	663b      	str	r3, [r7, #96]	; 0x60
 800360a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800360c:	2200      	movs	r2, #0
 800360e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	677b      	str	r3, [r7, #116]	; 0x74
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d12b      	bne.n	8003676 <HAL_PCD_EP_DB_Transmit+0x516>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003632:	4413      	add	r3, r2
 8003634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	00da      	lsls	r2, r3, #3
 800363c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363e:	4413      	add	r3, r2
 8003640:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003654:	b29a      	uxth	r2, r3
 8003656:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366c:	b29a      	uxth	r2, r3
 800366e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e017      	b.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x546>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d113      	bne.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x546>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	4413      	add	r3, r2
 800368e:	677b      	str	r3, [r7, #116]	; 0x74
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00da      	lsls	r2, r3, #3
 8003696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003698:	4413      	add	r3, r2
 800369a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800369e:	673b      	str	r3, [r7, #112]	; 0x70
 80036a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a2:	2200      	movs	r2, #0
 80036a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f007 fd88 	bl	800b1c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 811a 	bne.w	80038f2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80036ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	b29b      	uxth	r3, r3
 8003700:	8013      	strh	r3, [r2, #0]
 8003702:	e0f6      	b.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d121      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003728:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800373e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	b29b      	uxth	r3, r3
 8003750:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 80ca 	bne.w	80038f2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003766:	441a      	add	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003774:	441a      	add	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	429a      	cmp	r2, r3
 8003784:	d30b      	bcc.n	800379e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003796:	1ad2      	subs	r2, r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	621a      	str	r2, [r3, #32]
 800379c:	e017      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80037a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037b6:	e00a      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	657b      	str	r3, [r7, #84]	; 0x54
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	785b      	ldrb	r3, [r3, #1]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d165      	bne.n	80038a8 <HAL_PCD_EP_DB_Transmit+0x748>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f0:	4413      	add	r3, r2
 80037f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	00da      	lsls	r2, r3, #3
 80037fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fc:	4413      	add	r3, r2
 80037fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003802:	65bb      	str	r3, [r7, #88]	; 0x58
 8003804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380e:	b29a      	uxth	r2, r3
 8003810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003818:	2b3e      	cmp	r3, #62	; 0x3e
 800381a:	d91d      	bls.n	8003858 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800381c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	66bb      	str	r3, [r7, #104]	; 0x68
 8003824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003832:	3b01      	subs	r3, #1
 8003834:	66bb      	str	r3, [r7, #104]	; 0x68
 8003836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29a      	uxth	r2, r3
 800383c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800383e:	b29b      	uxth	r3, r3
 8003840:	029b      	lsls	r3, r3, #10
 8003842:	b29b      	uxth	r3, r3
 8003844:	4313      	orrs	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003850:	b29a      	uxth	r2, r3
 8003852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	e041      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_PCD_EP_DB_Transmit+0x716>
 8003860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386e:	b29a      	uxth	r2, r3
 8003870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	e032      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x77c>
 8003876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	66bb      	str	r3, [r7, #104]	; 0x68
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_PCD_EP_DB_Transmit+0x730>
 800388a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388c:	3301      	adds	r3, #1
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29a      	uxth	r2, r3
 8003896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003898:	b29b      	uxth	r3, r3
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	b29b      	uxth	r3, r3
 800389e:	4313      	orrs	r3, r2
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e019      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x77c>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d115      	bne.n	80038dc <HAL_PCD_EP_DB_Transmit+0x77c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	4413      	add	r3, r2
 80038c0:	657b      	str	r3, [r7, #84]	; 0x54
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	00da      	lsls	r2, r3, #3
 80038c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ca:	4413      	add	r3, r2
 80038cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038d0:	653b      	str	r3, [r7, #80]	; 0x50
 80038d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038da:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6959      	ldr	r1, [r3, #20]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	895a      	ldrh	r2, [r3, #10]
 80038e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f005 fa2d 	bl	8008d4c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800390c:	82bb      	strh	r3, [r7, #20]
 800390e:	8abb      	ldrh	r3, [r7, #20]
 8003910:	f083 0310 	eor.w	r3, r3, #16
 8003914:	82bb      	strh	r3, [r7, #20]
 8003916:	8abb      	ldrh	r3, [r7, #20]
 8003918:	f083 0320 	eor.w	r3, r3, #32
 800391c:	82bb      	strh	r3, [r7, #20]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	441a      	add	r2, r3
 800392c:	8abb      	ldrh	r3, [r7, #20]
 800392e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393e:	b29b      	uxth	r3, r3
 8003940:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3790      	adds	r7, #144	; 0x90
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	4613      	mov	r3, r2
 800395c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e009      	b.n	8003996 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003982:	897a      	ldrh	r2, [r7, #10]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003996:	893b      	ldrh	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2200      	movs	r2, #0
 80039a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	80da      	strh	r2, [r3, #6]
 80039aa:	e00b      	b.n	80039c4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2201      	movs	r2, #1
 80039b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	b29a      	uxth	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	6013      	str	r3, [r2, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	58000400 	.word	0x58000400

08003a48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	58000400 	.word	0x58000400

08003a64 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a72:	6053      	str	r3, [r2, #4]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	58000400 	.word	0x58000400

08003a84 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a96:	d101      	bne.n	8003a9c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_RCC_HSE_Enable>:
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_RCC_HSE_Disable>:
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_RCC_HSE_IsReady>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af6:	d101      	bne.n	8003afc <LL_RCC_HSE_IsReady+0x18>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <LL_RCC_HSE_IsReady+0x1a>
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_RCC_HSI_Enable>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <LL_RCC_HSI_Disable>:
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b38:	6013      	str	r3, [r2, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_RCC_HSI_IsReady>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d101      	bne.n	8003b5c <LL_RCC_HSI_IsReady+0x18>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <LL_RCC_HSI_IsReady+0x1a>
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <LL_RCC_HSI48_Enable>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_RCC_HSI48_Disable>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_RCC_HSI48_IsReady>:
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d101      	bne.n	8003bee <LL_RCC_HSI48_IsReady+0x18>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <LL_RCC_HSI48_IsReady+0x1a>
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_RCC_LSE_Enable>:
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c12:	bf00      	nop
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_RCC_LSE_Disable>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_RCC_LSE_EnableBypass>:
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c4e:	f043 0304 	orr.w	r3, r3, #4
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_LSE_DisableBypass>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_RCC_LSE_IsReady>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d101      	bne.n	8003c9a <LL_RCC_LSE_IsReady+0x18>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <LL_RCC_LSE_IsReady+0x1a>
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_RCC_LSI1_Enable>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_LSI1_Disable>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_LSI1_IsReady>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d101      	bne.n	8003d02 <LL_RCC_LSI1_IsReady+0x18>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <LL_RCC_LSI1_IsReady+0x1a>
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_LSI2_Enable>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_RCC_LSI2_Disable>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_LSI2_IsReady>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d101      	bne.n	8003d6a <LL_RCC_LSI2_IsReady+0x18>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <LL_RCC_LSI2_IsReady+0x1a>
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_RCC_LSI2_SetTrimming>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_RCC_MSI_Enable>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_RCC_MSI_Disable>:
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_RCC_MSI_IsReady>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d101      	bne.n	8003df6 <LL_RCC_MSI_IsReady+0x16>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <LL_RCC_MSI_IsReady+0x18>
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <LL_RCC_MSI_SetRange>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_MSI_GetRange>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2bb0      	cmp	r3, #176	; 0xb0
 8003e40:	d901      	bls.n	8003e46 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003e42:	23b0      	movs	r3, #176	; 0xb0
 8003e44:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003e46:	687b      	ldr	r3, [r7, #4]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_SetSysClkSource>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f023 0203 	bic.w	r2, r3, #3
 8003e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_RCC_GetSysClkSource>:
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_RCC_SetAHBPrescaler>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <LL_RCC_SetAHB4Prescaler>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f22:	f023 020f 	bic.w	r2, r3, #15
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_RCC_SetAPB1Prescaler>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_SetAPB2Prescaler>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_GetAHBPrescaler>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_RCC_GetAHB4Prescaler>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_GetAPB1Prescaler>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_GetAPB2Prescaler>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004024:	6013      	str	r3, [r2, #0]
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004042:	d101      	bne.n	8004048 <LL_RCC_PLL_IsReady+0x18>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <LL_RCC_PLL_IsReady+0x1a>
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0303 	and.w	r3, r3, #3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d101      	bne.n	80040ce <LL_RCC_IsActiveFlag_HPRE+0x18>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80040de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ee:	d101      	bne.n	80040f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800410c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d101      	bne.n	800411a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004138:	d101      	bne.n	800413e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800414e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004158:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800415c:	d101      	bne.n	8004162 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b08d      	sub	sp, #52	; 0x34
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e363      	b.n	800484a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 808d 	beq.w	80042aa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004190:	f7ff fe89 	bl	8003ea6 <LL_RCC_GetSysClkSource>
 8004194:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004196:	f7ff ff82 	bl	800409e <LL_RCC_PLL_GetMainSource>
 800419a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x3e>
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d147      	bne.n	8004238 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d144      	bne.n	8004238 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e347      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80041be:	f7ff fe34 	bl	8003e2a <LL_RCC_MSI_GetRange>
 80041c2:	4603      	mov	r3, r0
 80041c4:	429c      	cmp	r4, r3
 80041c6:	d914      	bls.n	80041f2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd2f 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e336      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fe0e 	bl	8003e02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fe32 	bl	8003e54 <LL_RCC_MSI_SetCalibTrimming>
 80041f0:	e013      	b.n	800421a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fe03 	bl	8003e02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fe27 	bl	8003e54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fd10 	bl	8004c30 <RCC_SetFlashLatencyFromMSIRange>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e317      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800421a:	f000 fcc9 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 800421e:	4603      	mov	r3, r0
 8004220:	4aa4      	ldr	r2, [pc, #656]	; (80044b4 <HAL_RCC_OscConfig+0x344>)
 8004222:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004224:	4ba4      	ldr	r3, [pc, #656]	; (80044b8 <HAL_RCC_OscConfig+0x348>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd f87d 	bl	8001328 <HAL_InitTick>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d039      	beq.n	80042a8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e308      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01e      	beq.n	800427e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004240:	f7ff fdb0 	bl	8003da4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004244:	f7fd f8be 	bl	80013c4 <HAL_GetTick>
 8004248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800424c:	f7fd f8ba 	bl	80013c4 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e2f5      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800425e:	f7ff fdbf 	bl	8003de0 <LL_RCC_MSI_IsReady>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f1      	beq.n	800424c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fdc8 	bl	8003e02 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fdec 	bl	8003e54 <LL_RCC_MSI_SetCalibTrimming>
 800427c:	e015      	b.n	80042aa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800427e:	f7ff fda0 	bl	8003dc2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004282:	f7fd f89f 	bl	80013c4 <HAL_GetTick>
 8004286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800428a:	f7fd f89b 	bl	80013c4 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e2d6      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800429c:	f7ff fda0 	bl	8003de0 <LL_RCC_MSI_IsReady>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f1      	bne.n	800428a <HAL_RCC_OscConfig+0x11a>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042a8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d047      	beq.n	8004346 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b6:	f7ff fdf6 	bl	8003ea6 <LL_RCC_GetSysClkSource>
 80042ba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042bc:	f7ff feef 	bl	800409e <LL_RCC_PLL_GetMainSource>
 80042c0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_OscConfig+0x164>
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d108      	bne.n	80042e0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d134      	bne.n	8004346 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e2b4      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d102      	bne.n	80042f0 <HAL_RCC_OscConfig+0x180>
 80042ea:	f7ff fbdd 	bl	8003aa8 <LL_RCC_HSE_Enable>
 80042ee:	e001      	b.n	80042f4 <HAL_RCC_OscConfig+0x184>
 80042f0:	f7ff fbe9 	bl	8003ac6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d012      	beq.n	8004322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd f862 	bl	80013c4 <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fd f85e 	bl	80013c4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e299      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004316:	f7ff fbe5 	bl	8003ae4 <LL_RCC_HSE_IsReady>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f1      	beq.n	8004304 <HAL_RCC_OscConfig+0x194>
 8004320:	e011      	b.n	8004346 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7fd f84f 	bl	80013c4 <HAL_GetTick>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432a:	f7fd f84b 	bl	80013c4 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	; 0x64
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e286      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800433c:	f7ff fbd2 	bl	8003ae4 <LL_RCC_HSE_IsReady>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f1      	bne.n	800432a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d04c      	beq.n	80043ec <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004352:	f7ff fda8 	bl	8003ea6 <LL_RCC_GetSysClkSource>
 8004356:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004358:	f7ff fea1 	bl	800409e <LL_RCC_PLL_GetMainSource>
 800435c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d005      	beq.n	8004370 <HAL_RCC_OscConfig+0x200>
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d10e      	bne.n	8004388 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d10b      	bne.n	8004388 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e266      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fbf1 	bl	8003b68 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004386:	e031      	b.n	80043ec <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d019      	beq.n	80043c4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004390:	f7ff fbba 	bl	8003b08 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd f816 	bl	80013c4 <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439c:	f7fd f812 	bl	80013c4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e24d      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80043ae:	f7ff fbc9 	bl	8003b44 <LL_RCC_HSI_IsReady>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f1      	beq.n	800439c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fbd3 	bl	8003b68 <LL_RCC_HSI_SetCalibTrimming>
 80043c2:	e013      	b.n	80043ec <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c4:	f7ff fbaf 	bl	8003b26 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fc fffc 	bl	80013c4 <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7fc fff8 	bl	80013c4 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e233      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80043e2:	f7ff fbaf 	bl	8003b44 <LL_RCC_HSI_IsReady>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f1      	bne.n	80043d0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80a3 	beq.w	800454c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d076      	beq.n	80044fc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d046      	beq.n	80044a8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800441a:	f7ff fc66 	bl	8003cea <LL_RCC_LSI1_IsReady>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d113      	bne.n	800444c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004424:	f7ff fc3f 	bl	8003ca6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004428:	f7fc ffcc 	bl	80013c4 <HAL_GetTick>
 800442c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004430:	f7fc ffc8 	bl	80013c4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e203      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004442:	f7ff fc52 	bl	8003cea <LL_RCC_LSI1_IsReady>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f1      	beq.n	8004430 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800444c:	f7ff fc5f 	bl	8003d0e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fc ffb8 	bl	80013c4 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004458:	f7fc ffb4 	bl	80013c4 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b03      	cmp	r3, #3
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1ef      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800446a:	f7ff fc72 	bl	8003d52 <LL_RCC_LSI2_IsReady>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f1      	beq.n	8004458 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fc7c 	bl	8003d76 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800447e:	f7ff fc23 	bl	8003cc8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fc ff9f 	bl	80013c4 <HAL_GetTick>
 8004486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800448a:	f7fc ff9b 	bl	80013c4 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e1d6      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800449c:	f7ff fc25 	bl	8003cea <LL_RCC_LSI1_IsReady>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f1      	bne.n	800448a <HAL_RCC_OscConfig+0x31a>
 80044a6:	e051      	b.n	800454c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80044a8:	f7ff fbfd 	bl	8003ca6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fc ff8a 	bl	80013c4 <HAL_GetTick>
 80044b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044b2:	e00c      	b.n	80044ce <HAL_RCC_OscConfig+0x35e>
 80044b4:	20000008 	.word	0x20000008
 80044b8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044bc:	f7fc ff82 	bl	80013c4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1bd      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044ce:	f7ff fc0c 	bl	8003cea <LL_RCC_LSI1_IsReady>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f1      	beq.n	80044bc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80044d8:	f7ff fc2a 	bl	8003d30 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044de:	f7fc ff71 	bl	80013c4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e1ac      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044f0:	f7ff fc2f 	bl	8003d52 <LL_RCC_LSI2_IsReady>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f1      	bne.n	80044de <HAL_RCC_OscConfig+0x36e>
 80044fa:	e027      	b.n	800454c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044fc:	f7ff fc18 	bl	8003d30 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fc ff60 	bl	80013c4 <HAL_GetTick>
 8004504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004508:	f7fc ff5c 	bl	80013c4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b03      	cmp	r3, #3
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e197      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800451a:	f7ff fc1a 	bl	8003d52 <LL_RCC_LSI2_IsReady>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f1      	bne.n	8004508 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004524:	f7ff fbd0 	bl	8003cc8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc ff4c 	bl	80013c4 <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004530:	f7fc ff48 	bl	80013c4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e183      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004542:	f7ff fbd2 	bl	8003cea <LL_RCC_LSI1_IsReady>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f1      	bne.n	8004530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d05b      	beq.n	8004610 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004558:	4ba7      	ldr	r3, [pc, #668]	; (80047f8 <HAL_RCC_OscConfig+0x688>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d114      	bne.n	800458e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004564:	f7ff fa60 	bl	8003a28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004568:	f7fc ff2c 	bl	80013c4 <HAL_GetTick>
 800456c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004570:	f7fc ff28 	bl	80013c4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e163      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004582:	4b9d      	ldr	r3, [pc, #628]	; (80047f8 <HAL_RCC_OscConfig+0x688>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d102      	bne.n	800459c <HAL_RCC_OscConfig+0x42c>
 8004596:	f7ff fb30 	bl	8003bfa <LL_RCC_LSE_Enable>
 800459a:	e00c      	b.n	80045b6 <HAL_RCC_OscConfig+0x446>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d104      	bne.n	80045ae <HAL_RCC_OscConfig+0x43e>
 80045a4:	f7ff fb4b 	bl	8003c3e <LL_RCC_LSE_EnableBypass>
 80045a8:	f7ff fb27 	bl	8003bfa <LL_RCC_LSE_Enable>
 80045ac:	e003      	b.n	80045b6 <HAL_RCC_OscConfig+0x446>
 80045ae:	f7ff fb35 	bl	8003c1c <LL_RCC_LSE_Disable>
 80045b2:	f7ff fb55 	bl	8003c60 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d014      	beq.n	80045e8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fc ff01 	bl	80013c4 <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fc fefd 	bl	80013c4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e136      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80045dc:	f7ff fb51 	bl	8003c82 <LL_RCC_LSE_IsReady>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ef      	beq.n	80045c6 <HAL_RCC_OscConfig+0x456>
 80045e6:	e013      	b.n	8004610 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fc feec 	bl	80013c4 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fc fee8 	bl	80013c4 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e121      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004606:	f7ff fb3c 	bl	8003c82 <LL_RCC_LSE_IsReady>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ef      	bne.n	80045f0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02c      	beq.n	8004676 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	d014      	beq.n	800464e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004624:	f7ff fab5 	bl	8003b92 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fc fecc 	bl	80013c4 <HAL_GetTick>
 800462c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004630:	f7fc fec8 	bl	80013c4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e103      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004642:	f7ff fac8 	bl	8003bd6 <LL_RCC_HSI48_IsReady>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f1      	beq.n	8004630 <HAL_RCC_OscConfig+0x4c0>
 800464c:	e013      	b.n	8004676 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800464e:	f7ff fab1 	bl	8003bb4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fc feb7 	bl	80013c4 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800465a:	f7fc feb3 	bl	80013c4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0ee      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800466c:	f7ff fab3 	bl	8003bd6 <LL_RCC_HSI48_IsReady>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f1      	bne.n	800465a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 80e4 	beq.w	8004848 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004680:	f7ff fc11 	bl	8003ea6 <LL_RCC_GetSysClkSource>
 8004684:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	2b02      	cmp	r3, #2
 8004694:	f040 80b4 	bne.w	8004800 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d123      	bne.n	80046ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d11c      	bne.n	80046ee <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d114      	bne.n	80046ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d10d      	bne.n	80046ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d05d      	beq.n	80047aa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d058      	beq.n	80047a6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0a1      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004706:	f7ff fc84 	bl	8004012 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800470a:	f7fc fe5b 	bl	80013c4 <HAL_GetTick>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7fc fe57 	bl	80013c4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e092      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1ef      	bne.n	8004712 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_RCC_OscConfig+0x68c>)
 800473a:	4013      	ands	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004744:	4311      	orrs	r1, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800474a:	0212      	lsls	r2, r2, #8
 800474c:	4311      	orrs	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004758:	4311      	orrs	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800475e:	430a      	orrs	r2, r1
 8004760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004764:	4313      	orrs	r3, r2
 8004766:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004768:	f7ff fc44 	bl	8003ff4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800477c:	f7fc fe22 	bl	80013c4 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fc fe1e 	bl	80013c4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e059      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a4:	e050      	b.n	8004848 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e04f      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d147      	bne.n	8004848 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047b8:	f7ff fc1c 	bl	8003ff4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047cc:	f7fc fdfa 	bl	80013c4 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fc fdf6 	bl	80013c4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e031      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ef      	beq.n	80047d4 <HAL_RCC_OscConfig+0x664>
 80047f4:	e028      	b.n	8004848 <HAL_RCC_OscConfig+0x6d8>
 80047f6:	bf00      	nop
 80047f8:	58000400 	.word	0x58000400
 80047fc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d01e      	beq.n	8004844 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004806:	f7ff fc04 	bl	8004012 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fc fddb 	bl	80013c4 <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fc fdd7 	bl	80013c4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e012      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1ef      	bne.n	8004812 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_RCC_OscConfig+0x6e4>)
 800483e:	4013      	ands	r3, r2
 8004840:	60cb      	str	r3, [r1, #12]
 8004842:	e001      	b.n	8004848 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3734      	adds	r7, #52	; 0x34
 800484e:	46bd      	mov	sp, r7
 8004850:	bd90      	pop	{r4, r7, pc}
 8004852:	bf00      	nop
 8004854:	eefefffc 	.word	0xeefefffc

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e12d      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800486c:	4b98      	ldr	r3, [pc, #608]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d91b      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b95      	ldr	r3, [pc, #596]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 0207 	bic.w	r2, r3, #7
 8004882:	4993      	ldr	r1, [pc, #588]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fc fd9b 	bl	80013c4 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004892:	f7fc fd97 	bl	80013c4 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e111      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a4:	4b8a      	ldr	r3, [pc, #552]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d1ef      	bne.n	8004892 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fafb 	bl	8003ebe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048c8:	f7fc fd7c 	bl	80013c4 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048d0:	f7fc fd78 	bl	80013c4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0f2      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048e2:	f7ff fbe8 	bl	80040b6 <LL_RCC_IsActiveFlag_HPRE>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f1      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff faf2 	bl	8003ee6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004902:	f7fc fd5f 	bl	80013c4 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800490a:	f7fc fd5b 	bl	80013c4 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0d5      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800491c:	f7ff fbdd 	bl	80040da <LL_RCC_IsActiveFlag_C2HPRE>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f1      	beq.n	800490a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff faeb 	bl	8003f12 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800493c:	f7fc fd42 	bl	80013c4 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004944:	f7fc fd3e 	bl	80013c4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0b8      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004956:	f7ff fbd3 	bl	8004100 <LL_RCC_IsActiveFlag_SHDHPRE>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f1      	beq.n	8004944 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d016      	beq.n	800499a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fae5 	bl	8003f40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004976:	f7fc fd25 	bl	80013c4 <HAL_GetTick>
 800497a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800497e:	f7fc fd21 	bl	80013c4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e09b      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004990:	f7ff fbc9 	bl	8004126 <LL_RCC_IsActiveFlag_PPRE1>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f1      	beq.n	800497e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d017      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fadb 	bl	8003f68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049b2:	f7fc fd07 	bl	80013c4 <HAL_GetTick>
 80049b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049ba:	f7fc fd03 	bl	80013c4 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e07d      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049cc:	f7ff fbbd 	bl	800414a <LL_RCC_IsActiveFlag_PPRE2>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f1      	beq.n	80049ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d043      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80049ea:	f7ff f87b 	bl	8003ae4 <LL_RCC_HSE_IsReady>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11e      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e067      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d106      	bne.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a00:	f7ff fb16 	bl	8004030 <LL_RCC_PLL_IsReady>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d113      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e05c      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a16:	f7ff f9e3 	bl	8003de0 <LL_RCC_MSI_IsReady>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d108      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e051      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a24:	f7ff f88e 	bl	8003b44 <LL_RCC_HSI_IsReady>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e04a      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fa21 	bl	8003e7e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fc fcc2 	bl	80013c4 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fc fcbe 	bl	80013c4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e036      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	f7ff fa24 	bl	8003ea6 <LL_RCC_GetSysClkSource>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d1ec      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6a:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d21b      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 0207 	bic.w	r2, r3, #7
 8004a80:	4913      	ldr	r1, [pc, #76]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fc fc9c 	bl	80013c4 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a90:	f7fc fc98 	bl	80013c4 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e012      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_ClockConfig+0x278>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1ef      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ab0:	f000 f87e 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <HAL_RCC_ClockConfig+0x27c>)
 8004ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004aba:	f7fc fc8f 	bl	80013dc <HAL_GetTickPrio>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fc fc31 	bl	8001328 <HAL_InitTick>
 8004ac6:	4603      	mov	r3, r0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	58004000 	.word	0x58004000
 8004ad4:	20000008 	.word	0x20000008

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ade:	f7ff f9e2 	bl	8003ea6 <LL_RCC_GetSysClkSource>
 8004ae2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004aea:	f7ff f99e 	bl	8003e2a <LL_RCC_MSI_GetRange>
 8004aee:	4603      	mov	r3, r0
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	4a2b      	ldr	r2, [pc, #172]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	e04b      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d102      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b06:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e045      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d10a      	bne.n	8004b28 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b12:	f7fe ffb7 	bl	8003a84 <LL_RCC_HSE_IsEnabledDiv2>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d102      	bne.n	8004b22 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b1c:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e03a      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e037      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b28:	f7ff fab9 	bl	800409e <LL_RCC_PLL_GetMainSource>
 8004b2c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d003      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x64>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d003      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x6a>
 8004b3a:	e00d      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b3e:	60bb      	str	r3, [r7, #8]
        break;
 8004b40:	e015      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b42:	f7fe ff9f 	bl	8003a84 <LL_RCC_HSE_IsEnabledDiv2>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b4c:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b4e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b50:	e00d      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b54:	60bb      	str	r3, [r7, #8]
        break;
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b58:	f7ff f967 	bl	8003e2a <LL_RCC_MSI_GetRange>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	4a0f      	ldr	r2, [pc, #60]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	60bb      	str	r3, [r7, #8]
        break;
 8004b6c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004b6e:	f7ff fa71 	bl	8004054 <LL_RCC_PLL_GetN>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	fb03 f402 	mul.w	r4, r3, r2
 8004b7a:	f7ff fa84 	bl	8004086 <LL_RCC_PLL_GetDivider>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	3301      	adds	r3, #1
 8004b84:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b88:	f7ff fa71 	bl	800406e <LL_RCC_PLL_GetR>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	0f5b      	lsrs	r3, r3, #29
 8004b90:	3301      	adds	r3, #1
 8004b92:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b96:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b98:	68fb      	ldr	r3, [r7, #12]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	0801744c 	.word	0x0801744c
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	01e84800 	.word	0x01e84800

08004bb0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb0:	b598      	push	{r3, r4, r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004bb4:	f7ff ff90 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	f7ff f9e9 	bl	8003f90 <LL_RCC_GetAHBPrescaler>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	4a03      	ldr	r2, [pc, #12]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bcc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd98      	pop	{r3, r4, r7, pc}
 8004bd4:	080173ec 	.word	0x080173ec

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd8:	b598      	push	{r3, r4, r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bdc:	f7ff ffe8 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004be0:	4604      	mov	r4, r0
 8004be2:	f7ff f9ef 	bl	8003fc4 <LL_RCC_GetAPB1Prescaler>
 8004be6:	4603      	mov	r3, r0
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd98      	pop	{r3, r4, r7, pc}
 8004c00:	0801742c 	.word	0x0801742c

08004c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c04:	b598      	push	{r3, r4, r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c08:	f7ff ffd2 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	f7ff f9e5 	bl	8003fdc <LL_RCC_GetAPB2Prescaler>
 8004c12:	4603      	mov	r3, r0
 8004c14:	0adb      	lsrs	r3, r3, #11
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd98      	pop	{r3, r4, r7, pc}
 8004c2c:	0801742c 	.word	0x0801742c

08004c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2bb0      	cmp	r3, #176	; 0xb0
 8004c3c:	d903      	bls.n	8004c46 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e007      	b.n	8004c56 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c56:	f7ff f9a7 	bl	8003fa8 <LL_RCC_GetAHB4Prescaler>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	4a0d      	ldr	r2, [pc, #52]	; (8004c98 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	0c9c      	lsrs	r4, r3, #18
 8004c7a:	f7fe fee5 	bl	8003a48 <HAL_PWREx_GetVoltageRange>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4619      	mov	r1, r3
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f80c 	bl	8004ca0 <RCC_SetFlashLatency>
 8004c88:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd90      	pop	{r4, r7, pc}
 8004c92:	bf00      	nop
 8004c94:	0801744c 	.word	0x0801744c
 8004c98:	080173ec 	.word	0x080173ec
 8004c9c:	431bde83 	.word	0x431bde83

08004ca0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b093      	sub	sp, #76	; 0x4c
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004caa:	4b37      	ldr	r3, [pc, #220]	; (8004d88 <RCC_SetFlashLatency+0xe8>)
 8004cac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004cb6:	4a35      	ldr	r2, [pc, #212]	; (8004d8c <RCC_SetFlashLatency+0xec>)
 8004cb8:	f107 031c 	add.w	r3, r7, #28
 8004cbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004cc2:	4b33      	ldr	r3, [pc, #204]	; (8004d90 <RCC_SetFlashLatency+0xf0>)
 8004cc4:	f107 040c 	add.w	r4, r7, #12
 8004cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004cce:	2300      	movs	r3, #0
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd8:	d11a      	bne.n	8004d10 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004cde:	e013      	b.n	8004d08 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	3348      	adds	r3, #72	; 0x48
 8004ce6:	443b      	add	r3, r7
 8004ce8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d807      	bhi.n	8004d02 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	3348      	adds	r3, #72	; 0x48
 8004cf8:	443b      	add	r3, r7
 8004cfa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cfe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004d00:	e020      	b.n	8004d44 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d04:	3301      	adds	r3, #1
 8004d06:	643b      	str	r3, [r7, #64]	; 0x40
 8004d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d9e8      	bls.n	8004ce0 <RCC_SetFlashLatency+0x40>
 8004d0e:	e019      	b.n	8004d44 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	e013      	b.n	8004d3e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	3348      	adds	r3, #72	; 0x48
 8004d1c:	443b      	add	r3, r7
 8004d1e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d807      	bhi.n	8004d38 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	3348      	adds	r3, #72	; 0x48
 8004d2e:	443b      	add	r3, r7
 8004d30:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004d36:	e005      	b.n	8004d44 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d9e8      	bls.n	8004d16 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <RCC_SetFlashLatency+0xf4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 0207 	bic.w	r2, r3, #7
 8004d4c:	4911      	ldr	r1, [pc, #68]	; (8004d94 <RCC_SetFlashLatency+0xf4>)
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d54:	f7fc fb36 	bl	80013c4 <HAL_GetTick>
 8004d58:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d5a:	e008      	b.n	8004d6e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d5c:	f7fc fb32 	bl	80013c4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e007      	b.n	8004d7e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <RCC_SetFlashLatency+0xf4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d1ef      	bne.n	8004d5c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	374c      	adds	r7, #76	; 0x4c
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd90      	pop	{r4, r7, pc}
 8004d86:	bf00      	nop
 8004d88:	08017378 	.word	0x08017378
 8004d8c:	08017388 	.word	0x08017388
 8004d90:	08017394 	.word	0x08017394
 8004d94:	58004000 	.word	0x58004000

08004d98 <LL_RCC_LSE_IsEnabled>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <LL_RCC_LSE_IsEnabled+0x18>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <LL_RCC_LSE_IsEnabled+0x1a>
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_LSE_IsReady>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d101      	bne.n	8004dd4 <LL_RCC_LSE_IsReady+0x18>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <LL_RCC_LSE_IsReady+0x1a>
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_SetRFWKPClockSource>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <LL_RCC_SetSMPSClockSource>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f023 0203 	bic.w	r2, r3, #3
 8004e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_RCC_SetSMPSPrescaler>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <LL_RCC_SetUSARTClockSource>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f023 0203 	bic.w	r2, r3, #3
 8004e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <LL_RCC_SetLPUARTClockSource>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_SetI2CClockSource>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	401a      	ands	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <LL_RCC_SetLPTIMClockSource>:
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <LL_RCC_SetSAIClockSource>:
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_SetRNGClockSource>:
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_SetCLK48ClockSource>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <LL_RCC_SetUSBClockSource>:
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ffe3 	bl	8004f7a <LL_RCC_SetCLK48ClockSource>
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <LL_RCC_SetADCClockSource>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <LL_RCC_SetRTCClockSource>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_RCC_GetRTCClockSource>:
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_ForceBackupDomainReset>:
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005046:	bf00      	nop
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <LL_RCC_PLLSAI1_Enable>:
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005084:	6013      	str	r3, [r2, #0]
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <LL_RCC_PLLSAI1_Disable>:
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800509e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a2:	6013      	str	r3, [r2, #0]
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <LL_RCC_PLLSAI1_IsReady>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80050b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c0:	d101      	bne.n	80050c6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b088      	sub	sp, #32
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80050da:	2300      	movs	r3, #0
 80050dc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80050de:	2300      	movs	r3, #0
 80050e0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d034      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050f6:	d021      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80050f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050fc:	d81b      	bhi.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005102:	d01d      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005104:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005108:	d815      	bhi.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800510e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005112:	d110      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005122:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005124:	e00d      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f947 	bl	80053be <RCCEx_PLLSAI1_ConfigNP>
 8005130:	4603      	mov	r3, r0
 8005132:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005134:	e005      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	77fb      	strb	r3, [r7, #31]
        break;
 800513a:	e002      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fee8 	bl	8004f22 <LL_RCC_SetSAIClockSource>
 8005152:	e001      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7ffb      	ldrb	r3, [r7, #31]
 8005156:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005160:	2b00      	cmp	r3, #0
 8005162:	d046      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005164:	f7ff ff56 	bl	8005014 <LL_RCC_GetRTCClockSource>
 8005168:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	429a      	cmp	r2, r3
 8005172:	d03c      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005174:	f7fe fc58 	bl	8003a28 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d105      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ff30 	bl	8004fe8 <LL_RCC_SetRTCClockSource>
 8005188:	e02e      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800518a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005194:	f7ff ff4b 	bl	800502e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005198:	f7ff ff5a 	bl	8005050 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80051aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80051b4:	f7ff fdf0 	bl	8004d98 <LL_RCC_LSE_IsEnabled>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d114      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051be:	f7fc f901 	bl	80013c4 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80051c4:	e00b      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fc f8fd 	bl	80013c4 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d902      	bls.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	77fb      	strb	r3, [r7, #31]
              break;
 80051dc:	e004      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80051de:	f7ff fded 	bl	8004dbc <LL_RCC_LSE_IsReady>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80051e8:	7ffb      	ldrb	r3, [r7, #31]
 80051ea:	77bb      	strb	r3, [r7, #30]
 80051ec:	e001      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	7ffb      	ldrb	r3, [r7, #31]
 80051f0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fe2a 	bl	8004e5c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fe35 	bl	8004e88 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fe5d 	bl	8004eee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fe52 	bl	8004eee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fe2a 	bl	8004eb4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fe1f 	bl	8004eb4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d022      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fe8d 	bl	8004fa6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005294:	d107      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ae:	d10b      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f8dd 	bl	8005474 <RCCEx_PLLSAI1_ConfigNQ>
 80052ba:	4603      	mov	r3, r0
 80052bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052be:	7ffb      	ldrb	r3, [r7, #31]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
 80052c6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d008      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e6:	d003      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fe2a 	bl	8004f4e <LL_RCC_SetRNGClockSource>
 80052fa:	e00a      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	2000      	movs	r0, #0
 8005308:	f7ff fe21 	bl	8004f4e <LL_RCC_SetRNGClockSource>
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff fe34 	bl	8004f7a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800531a:	d107      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800531c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800532a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005334:	2b00      	cmp	r3, #0
 8005336:	d022      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fe3d 	bl	8004fbc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534a:	d107      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800534c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005364:	d10b      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f8dd 	bl	800552a <RCCEx_PLLSAI1_ConfigNR>
 8005370:	4603      	mov	r3, r0
 8005372:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005374:	7ffb      	ldrb	r3, [r7, #31]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800537a:	7ffb      	ldrb	r3, [r7, #31]
 800537c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fd26 	bl	8004de0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fd45 	bl	8004e34 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fd2c 	bl	8004e0c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80053b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053ca:	f7ff fe61 	bl	8005090 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ce:	f7fb fff9 	bl	80013c4 <HAL_GetTick>
 80053d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053d4:	e009      	b.n	80053ea <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d6:	f7fb fff5 	bl	80013c4 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d902      	bls.n	80053ea <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	73fb      	strb	r3, [r7, #15]
      break;
 80053e8:	e004      	b.n	80053f4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053ea:	f7ff fe60 	bl	80050ae <LL_RCC_PLLSAI1_IsReady>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d137      	bne.n	800546a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800540e:	4313      	orrs	r3, r2
 8005410:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005424:	4313      	orrs	r3, r2
 8005426:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005428:	f7ff fe23 	bl	8005072 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800542c:	f7fb ffca 	bl	80013c4 <HAL_GetTick>
 8005430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005432:	e009      	b.n	8005448 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005434:	f7fb ffc6 	bl	80013c4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d902      	bls.n	8005448 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	73fb      	strb	r3, [r7, #15]
        break;
 8005446:	e004      	b.n	8005452 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005448:	f7ff fe31 	bl	80050ae <LL_RCC_PLLSAI1_IsReady>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d1f0      	bne.n	8005434 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005466:	4313      	orrs	r3, r2
 8005468:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800546a:	7bfb      	ldrb	r3, [r7, #15]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005480:	f7ff fe06 	bl	8005090 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005484:	f7fb ff9e 	bl	80013c4 <HAL_GetTick>
 8005488:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800548a:	e009      	b.n	80054a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800548c:	f7fb ff9a 	bl	80013c4 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d902      	bls.n	80054a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	73fb      	strb	r3, [r7, #15]
      break;
 800549e:	e004      	b.n	80054aa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054a0:	f7ff fe05 	bl	80050ae <LL_RCC_PLLSAI1_IsReady>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d137      	bne.n	8005520 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c4:	4313      	orrs	r3, r2
 80054c6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80054c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054da:	4313      	orrs	r3, r2
 80054dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054de:	f7ff fdc8 	bl	8005072 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e2:	f7fb ff6f 	bl	80013c4 <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054e8:	e009      	b.n	80054fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ea:	f7fb ff6b 	bl	80013c4 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d902      	bls.n	80054fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	73fb      	strb	r3, [r7, #15]
        break;
 80054fc:	e004      	b.n	8005508 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054fe:	f7ff fdd6 	bl	80050ae <LL_RCC_PLLSAI1_IsReady>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	d1f0      	bne.n	80054ea <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d108      	bne.n	8005520 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800550e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800551c:	4313      	orrs	r3, r2
 800551e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005536:	f7ff fdab 	bl	8005090 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800553a:	f7fb ff43 	bl	80013c4 <HAL_GetTick>
 800553e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005540:	e009      	b.n	8005556 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005542:	f7fb ff3f 	bl	80013c4 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d902      	bls.n	8005556 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e004      	b.n	8005560 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005556:	f7ff fdaa 	bl	80050ae <LL_RCC_PLLSAI1_IsReady>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d137      	bne.n	80055d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005590:	4313      	orrs	r3, r2
 8005592:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005594:	f7ff fd6d 	bl	8005072 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005598:	f7fb ff14 	bl	80013c4 <HAL_GetTick>
 800559c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800559e:	e009      	b.n	80055b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055a0:	f7fb ff10 	bl	80013c4 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d902      	bls.n	80055b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	73fb      	strb	r3, [r7, #15]
        break;
 80055b2:	e004      	b.n	80055be <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055b4:	f7ff fd7b 	bl	80050ae <LL_RCC_PLLSAI1_IsReady>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d1f0      	bne.n	80055a0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e027      	b.n	8005642 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7a5b      	ldrb	r3, [r3, #9]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d105      	bne.n	8005608 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fb fc20 	bl	8000e48 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 0120 	bic.w	r1, r3, #32
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0204 	orr.w	r2, r2, #4
 8005632:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7a1b      	ldrb	r3, [r3, #8]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005660:	2302      	movs	r3, #2
 8005662:	e044      	b.n	80056ee <HAL_RNG_GenerateRandomNumber+0xa4>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7a5b      	ldrb	r3, [r3, #9]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d133      	bne.n	80056dc <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800567a:	f7fb fea3 	bl	80013c4 <HAL_GetTick>
 800567e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005680:	e018      	b.n	80056b4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005682:	f7fb fe9f 	bl	80013c4 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d911      	bls.n	80056b4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b01      	cmp	r3, #1
 800569c:	d00a      	beq.n	80056b4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e01c      	b.n	80056ee <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d1df      	bne.n	8005682 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	725a      	strb	r2, [r3, #9]
 80056da:	e004      	b.n	80056e6 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	721a      	strb	r2, [r3, #8]

  return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e09f      	b.n	800584a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fb fbbc 	bl	8000e9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800572c:	4b49      	ldr	r3, [pc, #292]	; (8005854 <HAL_RTC_Init+0x15c>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b10      	cmp	r3, #16
 8005736:	d07e      	beq.n	8005836 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	22ca      	movs	r2, #202	; 0xca
 800573e:	625a      	str	r2, [r3, #36]	; 0x24
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2253      	movs	r2, #83	; 0x53
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8ab 	bl	80058a4 <RTC_EnterInitMode>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	22ff      	movs	r2, #255	; 0xff
 800575a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2204      	movs	r2, #4
 8005760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e067      	b.n	800583a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68d2      	ldr	r2, [r2, #12]
 80057a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6919      	ldr	r1, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	041a      	lsls	r2, r3, #16
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0203 	bic.w	r2, r2, #3
 80057d8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d113      	bne.n	8005828 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f829 	bl	8005858 <HAL_RTC_WaitForSynchro>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2204      	movs	r2, #4
 8005818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e010      	b.n	800584a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e001      	b.n	800583a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40002800 	.word	0x40002800

08005858 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800586e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005870:	f7fb fda8 	bl	80013c4 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005876:	e009      	b.n	800588c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005878:	f7fb fda4 	bl	80013c4 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005886:	d901      	bls.n	800588c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e007      	b.n	800589c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0ee      	beq.n	8005878 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d119      	bne.n	80058ee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f04f 32ff 	mov.w	r2, #4294967295
 80058c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058c4:	f7fb fd7e 	bl	80013c4 <HAL_GetTick>
 80058c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058ca:	e009      	b.n	80058e0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058cc:	f7fb fd7a 	bl	80013c4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058da:	d901      	bls.n	80058e0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e007      	b.n	80058f0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ee      	beq.n	80058cc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800590e:	2302      	movs	r3, #2
 8005910:	e089      	b.n	8005a26 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	22ca      	movs	r2, #202	; 0xca
 8005928:	625a      	str	r2, [r3, #36]	; 0x24
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2253      	movs	r2, #83	; 0x53
 8005930:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d020      	beq.n	8005982 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8005940:	f7fb fd40 	bl	80013c4 <HAL_GetTick>
 8005944:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005946:	e015      	b.n	8005974 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005948:	f7fb fd3c 	bl	80013c4 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005956:	d90d      	bls.n	8005974 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2203      	movs	r2, #3
 8005964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e058      	b.n	8005a26 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e2      	bne.n	8005948 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005990:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005992:	f7fb fd17 	bl	80013c4 <HAL_GetTick>
 8005996:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005998:	e015      	b.n	80059c6 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800599a:	f7fb fd13 	bl	80013c4 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059a8:	d90d      	bls.n	80059c6 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	22ff      	movs	r2, #255	; 0xff
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2203      	movs	r2, #3
 80059b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e02f      	b.n	8005a26 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0e2      	beq.n	800599a <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0207 	bic.w	r2, r2, #7
 80059e2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a0a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	22ff      	movs	r2, #255	; 0xff
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <LL_RCC_GetUSARTClockSource>:
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4013      	ands	r3, r2
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <LL_RCC_GetLPUARTClockSource>:
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4013      	ands	r3, r2
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e042      	b.n	8005b06 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb fa2e 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2224      	movs	r2, #36	; 0x24
 8005a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f977 	bl	8005da4 <UART_SetConfig>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e022      	b.n	8005b06 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fb93 	bl	80061f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005adc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0201 	orr.w	r2, r2, #1
 8005afc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fc1a 	bl	8006338 <UART_CheckIdleState>
 8005b04:	4603      	mov	r3, r0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b08a      	sub	sp, #40	; 0x28
 8005b12:	af02      	add	r7, sp, #8
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d173      	bne.n	8005c10 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_UART_Transmit+0x26>
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e06c      	b.n	8005c12 <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2221      	movs	r2, #33	; 0x21
 8005b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b48:	f7fb fc3c 	bl	80013c4 <HAL_GetTick>
 8005b4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b66:	d108      	bne.n	8005b7a <HAL_UART_Transmit+0x6c>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e003      	b.n	8005b82 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b82:	e02c      	b.n	8005bde <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2180      	movs	r1, #128	; 0x80
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fc20 	bl	80063d4 <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e039      	b.n	8005c12 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10b      	bne.n	8005bbc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e007      	b.n	8005bcc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	781a      	ldrb	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1cc      	bne.n	8005b84 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2140      	movs	r1, #64	; 0x40
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fbed 	bl	80063d4 <UART_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e006      	b.n	8005c12 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b08a      	sub	sp, #40	; 0x28
 8005c1e:	af02      	add	r7, sp, #8
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	f040 80b1 	bne.w	8005d98 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_Receive+0x28>
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0a9      	b.n	8005d9a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2222      	movs	r2, #34	; 0x22
 8005c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c5c:	f7fb fbb2 	bl	80013c4 <HAL_GetTick>
 8005c60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	d10e      	bne.n	8005c9a <HAL_UART_Receive+0x80>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <HAL_UART_Receive+0x76>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c8e:	e02d      	b.n	8005cec <HAL_UART_Receive+0xd2>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c98:	e028      	b.n	8005cec <HAL_UART_Receive+0xd2>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10d      	bne.n	8005cbe <HAL_UART_Receive+0xa4>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d104      	bne.n	8005cb4 <HAL_UART_Receive+0x9a>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	22ff      	movs	r2, #255	; 0xff
 8005cae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cb2:	e01b      	b.n	8005cec <HAL_UART_Receive+0xd2>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	227f      	movs	r2, #127	; 0x7f
 8005cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cbc:	e016      	b.n	8005cec <HAL_UART_Receive+0xd2>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_UART_Receive+0xca>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <HAL_UART_Receive+0xc0>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	227f      	movs	r2, #127	; 0x7f
 8005cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cd8:	e008      	b.n	8005cec <HAL_UART_Receive+0xd2>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	223f      	movs	r2, #63	; 0x3f
 8005cde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ce2:	e003      	b.n	8005cec <HAL_UART_Receive+0xd2>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005cf2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfc:	d108      	bne.n	8005d10 <HAL_UART_Receive+0xf6>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e003      	b.n	8005d18 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d18:	e032      	b.n	8005d80 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2120      	movs	r1, #32
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fb55 	bl	80063d4 <UART_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e032      	b.n	8005d9a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10c      	bne.n	8005d54 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	8a7b      	ldrh	r3, [r7, #18]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	3302      	adds	r3, #2
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	e00c      	b.n	8005d6e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	8a7b      	ldrh	r3, [r7, #18]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	4013      	ands	r3, r2
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1c6      	bne.n	8005d1a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e000      	b.n	8005d9a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
  }
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da8:	b08c      	sub	sp, #48	; 0x30
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4baf      	ldr	r3, [pc, #700]	; (8006090 <UART_SetConfig+0x2ec>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4aa4      	ldr	r2, [pc, #656]	; (8006094 <UART_SetConfig+0x2f0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	f023 010f 	bic.w	r1, r3, #15
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a95      	ldr	r2, [pc, #596]	; (8006098 <UART_SetConfig+0x2f4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d125      	bne.n	8005e94 <UART_SetConfig+0xf0>
 8005e48:	2003      	movs	r0, #3
 8005e4a:	f7ff fdf0 	bl	8005a2e <LL_RCC_GetUSARTClockSource>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d81b      	bhi.n	8005e8c <UART_SetConfig+0xe8>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <UART_SetConfig+0xb8>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e6d 	.word	0x08005e6d
 8005e60:	08005e7d 	.word	0x08005e7d
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e85 	.word	0x08005e85
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e72:	e042      	b.n	8005efa <UART_SetConfig+0x156>
 8005e74:	2302      	movs	r3, #2
 8005e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7a:	e03e      	b.n	8005efa <UART_SetConfig+0x156>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e82:	e03a      	b.n	8005efa <UART_SetConfig+0x156>
 8005e84:	2308      	movs	r3, #8
 8005e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e8a:	e036      	b.n	8005efa <UART_SetConfig+0x156>
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e92:	e032      	b.n	8005efa <UART_SetConfig+0x156>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a7e      	ldr	r2, [pc, #504]	; (8006094 <UART_SetConfig+0x2f0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d12a      	bne.n	8005ef4 <UART_SetConfig+0x150>
 8005e9e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005ea2:	f7ff fdd4 	bl	8005a4e <LL_RCC_GetLPUARTClockSource>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eac:	d01a      	beq.n	8005ee4 <UART_SetConfig+0x140>
 8005eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eb2:	d81b      	bhi.n	8005eec <UART_SetConfig+0x148>
 8005eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb8:	d00c      	beq.n	8005ed4 <UART_SetConfig+0x130>
 8005eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ebe:	d815      	bhi.n	8005eec <UART_SetConfig+0x148>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <UART_SetConfig+0x128>
 8005ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec8:	d008      	beq.n	8005edc <UART_SetConfig+0x138>
 8005eca:	e00f      	b.n	8005eec <UART_SetConfig+0x148>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ed2:	e012      	b.n	8005efa <UART_SetConfig+0x156>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eda:	e00e      	b.n	8005efa <UART_SetConfig+0x156>
 8005edc:	2304      	movs	r3, #4
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee2:	e00a      	b.n	8005efa <UART_SetConfig+0x156>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eea:	e006      	b.n	8005efa <UART_SetConfig+0x156>
 8005eec:	2310      	movs	r3, #16
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef2:	e002      	b.n	8005efa <UART_SetConfig+0x156>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a65      	ldr	r2, [pc, #404]	; (8006094 <UART_SetConfig+0x2f0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	f040 8097 	bne.w	8006034 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d823      	bhi.n	8005f56 <UART_SetConfig+0x1b2>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <UART_SetConfig+0x170>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f57 	.word	0x08005f57
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08005f57 	.word	0x08005f57
 8005f24:	08005f47 	.word	0x08005f47
 8005f28:	08005f57 	.word	0x08005f57
 8005f2c:	08005f57 	.word	0x08005f57
 8005f30:	08005f57 	.word	0x08005f57
 8005f34:	08005f4f 	.word	0x08005f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f38:	f7fe fe4e 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f3e:	e010      	b.n	8005f62 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f40:	4b56      	ldr	r3, [pc, #344]	; (800609c <UART_SetConfig+0x2f8>)
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f44:	e00d      	b.n	8005f62 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f46:	f7fe fdc7 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f4c:	e009      	b.n	8005f62 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f54:	e005      	b.n	8005f62 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 812b 	beq.w	80061c0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	4a4c      	ldr	r2, [pc, #304]	; (80060a0 <UART_SetConfig+0x2fc>)
 8005f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d305      	bcc.n	8005f9a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d903      	bls.n	8005fa2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fa0:	e10e      	b.n	80061c0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	60fa      	str	r2, [r7, #12]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	4a3c      	ldr	r2, [pc, #240]	; (80060a0 <UART_SetConfig+0x2fc>)
 8005fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fc4:	f7fa f92c 	bl	8000220 <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	020b      	lsls	r3, r1, #8
 8005fda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fde:	0202      	lsls	r2, r0, #8
 8005fe0:	6979      	ldr	r1, [r7, #20]
 8005fe2:	6849      	ldr	r1, [r1, #4]
 8005fe4:	0849      	lsrs	r1, r1, #1
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	460c      	mov	r4, r1
 8005fea:	4605      	mov	r5, r0
 8005fec:	eb12 0804 	adds.w	r8, r2, r4
 8005ff0:	eb43 0905 	adc.w	r9, r3, r5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	469a      	mov	sl, r3
 8005ffc:	4693      	mov	fp, r2
 8005ffe:	4652      	mov	r2, sl
 8006000:	465b      	mov	r3, fp
 8006002:	4640      	mov	r0, r8
 8006004:	4649      	mov	r1, r9
 8006006:	f7fa f90b 	bl	8000220 <__aeabi_uldivmod>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4613      	mov	r3, r2
 8006010:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006018:	d308      	bcc.n	800602c <UART_SetConfig+0x288>
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006020:	d204      	bcs.n	800602c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	e0c9      	b.n	80061c0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006032:	e0c5      	b.n	80061c0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	d16d      	bne.n	800611a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800603e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006042:	3b01      	subs	r3, #1
 8006044:	2b07      	cmp	r3, #7
 8006046:	d82d      	bhi.n	80060a4 <UART_SetConfig+0x300>
 8006048:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <UART_SetConfig+0x2ac>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006071 	.word	0x08006071
 8006054:	08006079 	.word	0x08006079
 8006058:	080060a5 	.word	0x080060a5
 800605c:	0800607f 	.word	0x0800607f
 8006060:	080060a5 	.word	0x080060a5
 8006064:	080060a5 	.word	0x080060a5
 8006068:	080060a5 	.word	0x080060a5
 800606c:	08006087 	.word	0x08006087
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7fe fdc8 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 8006074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006076:	e01b      	b.n	80060b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006078:	4b08      	ldr	r3, [pc, #32]	; (800609c <UART_SetConfig+0x2f8>)
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800607c:	e018      	b.n	80060b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607e:	f7fe fd2b 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006084:	e014      	b.n	80060b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800608c:	e010      	b.n	80060b0 <UART_SetConfig+0x30c>
 800608e:	bf00      	nop
 8006090:	cfff69f3 	.word	0xcfff69f3
 8006094:	40008000 	.word	0x40008000
 8006098:	40013800 	.word	0x40013800
 800609c:	00f42400 	.word	0x00f42400
 80060a0:	0801748c 	.word	0x0801748c
      default:
        pclk = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8084 	beq.w	80061c0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	4a4b      	ldr	r2, [pc, #300]	; (80061ec <UART_SetConfig+0x448>)
 80060be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ca:	005a      	lsls	r2, r3, #1
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	441a      	add	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2b0f      	cmp	r3, #15
 80060e2:	d916      	bls.n	8006112 <UART_SetConfig+0x36e>
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ea:	d212      	bcs.n	8006112 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f023 030f 	bic.w	r3, r3, #15
 80060f4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	b29a      	uxth	r2, r3
 8006102:	8bfb      	ldrh	r3, [r7, #30]
 8006104:	4313      	orrs	r3, r2
 8006106:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	8bfa      	ldrh	r2, [r7, #30]
 800610e:	60da      	str	r2, [r3, #12]
 8006110:	e056      	b.n	80061c0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006118:	e052      	b.n	80061c0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800611a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800611e:	3b01      	subs	r3, #1
 8006120:	2b07      	cmp	r3, #7
 8006122:	d822      	bhi.n	800616a <UART_SetConfig+0x3c6>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <UART_SetConfig+0x388>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	0800614d 	.word	0x0800614d
 8006130:	08006155 	.word	0x08006155
 8006134:	0800616b 	.word	0x0800616b
 8006138:	0800615b 	.word	0x0800615b
 800613c:	0800616b 	.word	0x0800616b
 8006140:	0800616b 	.word	0x0800616b
 8006144:	0800616b 	.word	0x0800616b
 8006148:	08006163 	.word	0x08006163
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe fd5a 	bl	8004c04 <HAL_RCC_GetPCLK2Freq>
 8006150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006152:	e010      	b.n	8006176 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006154:	4b26      	ldr	r3, [pc, #152]	; (80061f0 <UART_SetConfig+0x44c>)
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006158:	e00d      	b.n	8006176 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fe fcbd 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 800615e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006160:	e009      	b.n	8006176 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006168:	e005      	b.n	8006176 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006174:	bf00      	nop
    }

    if (pclk != 0U)
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d021      	beq.n	80061c0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	4a1a      	ldr	r2, [pc, #104]	; (80061ec <UART_SetConfig+0x448>)
 8006182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006186:	461a      	mov	r2, r3
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	fbb3 f2f2 	udiv	r2, r3, r2
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	441a      	add	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	2b0f      	cmp	r3, #15
 80061a4:	d909      	bls.n	80061ba <UART_SetConfig+0x416>
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ac:	d205      	bcs.n	80061ba <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60da      	str	r2, [r3, #12]
 80061b8:	e002      	b.n	80061c0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2200      	movs	r2, #0
 80061d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80061dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3730      	adds	r7, #48	; 0x30
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ea:	bf00      	nop
 80061ec:	0801748c 	.word	0x0801748c
 80061f0:	00f42400 	.word	0x00f42400

080061f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01a      	beq.n	800630a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062f2:	d10a      	bne.n	800630a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	605a      	str	r2, [r3, #4]
  }
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af02      	add	r7, sp, #8
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006348:	f7fb f83c 	bl	80013c4 <HAL_GetTick>
 800634c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b08      	cmp	r3, #8
 800635a:	d10e      	bne.n	800637a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800635c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f832 	bl	80063d4 <UART_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e028      	b.n	80063cc <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d10e      	bne.n	80063a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f81c 	bl	80063d4 <UART_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e012      	b.n	80063cc <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b09c      	sub	sp, #112	; 0x70
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e4:	e0a9      	b.n	800653a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	f000 80a5 	beq.w	800653a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f0:	f7fa ffe8 	bl	80013c4 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <UART_WaitOnFlagUntilTimeout+0x32>
 8006400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006402:	2b00      	cmp	r3, #0
 8006404:	d140      	bne.n	8006488 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800641a:	667b      	str	r3, [r7, #100]	; 0x64
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006426:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800642a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	663b      	str	r3, [r7, #96]	; 0x60
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006458:	64ba      	str	r2, [r7, #72]	; 0x48
 800645a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800645e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e069      	b.n	800655c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d051      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a4:	d149      	bne.n	800653a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
 80064d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e6      	bne.n	80064b0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	613b      	str	r3, [r7, #16]
   return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006502:	623a      	str	r2, [r7, #32]
 8006504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	69f9      	ldr	r1, [r7, #28]
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e5      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e010      	b.n	800655c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4013      	ands	r3, r2
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	429a      	cmp	r2, r3
 8006556:	f43f af46 	beq.w	80063e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3770      	adds	r7, #112	; 0x70
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_UARTEx_DisableFifoMode+0x16>
 8006576:	2302      	movs	r3, #2
 8006578:	e027      	b.n	80065ca <HAL_UARTEx_DisableFifoMode+0x66>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	; 0x24
 8006586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0201 	bic.w	r2, r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e02d      	b.n	800664a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2224      	movs	r2, #36	; 0x24
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0201 	bic.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f850 	bl	80066d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006666:	2302      	movs	r3, #2
 8006668:	e02d      	b.n	80066c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2224      	movs	r2, #36	; 0x24
 8006676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f812 	bl	80066d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d108      	bne.n	80066f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066f0:	e031      	b.n	8006756 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066f2:	2308      	movs	r3, #8
 80066f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066f6:	2308      	movs	r3, #8
 80066f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	0e5b      	lsrs	r3, r3, #25
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	0f5b      	lsrs	r3, r3, #29
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	7b3a      	ldrb	r2, [r7, #12]
 800671e:	4911      	ldr	r1, [pc, #68]	; (8006764 <UARTEx_SetNbDataToProcess+0x94>)
 8006720:	5c8a      	ldrb	r2, [r1, r2]
 8006722:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006726:	7b3a      	ldrb	r2, [r7, #12]
 8006728:	490f      	ldr	r1, [pc, #60]	; (8006768 <UARTEx_SetNbDataToProcess+0x98>)
 800672a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800672c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006730:	b29a      	uxth	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	7b7a      	ldrb	r2, [r7, #13]
 800673c:	4909      	ldr	r1, [pc, #36]	; (8006764 <UARTEx_SetNbDataToProcess+0x94>)
 800673e:	5c8a      	ldrb	r2, [r1, r2]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006744:	7b7a      	ldrb	r2, [r7, #13]
 8006746:	4908      	ldr	r1, [pc, #32]	; (8006768 <UARTEx_SetNbDataToProcess+0x98>)
 8006748:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800674a:	fb93 f3f2 	sdiv	r3, r3, r2
 800674e:	b29a      	uxth	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	080174a4 	.word	0x080174a4
 8006768:	080174ac 	.word	0x080174ac

0800676c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800677c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006780:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	b29a      	uxth	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067a2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80067a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	43db      	mvns	r3, r3
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	4013      	ands	r3, r2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067d0:	b084      	sub	sp, #16
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	f107 0014 	add.w	r0, r7, #20
 80067de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	b004      	add	sp, #16
 8006810:	4770      	bx	lr
	...

08006814 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006814:	b480      	push	{r7}
 8006816:	b09d      	sub	sp, #116	; 0x74
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	78db      	ldrb	r3, [r3, #3]
 8006842:	2b03      	cmp	r3, #3
 8006844:	d81f      	bhi.n	8006886 <USB_ActivateEndpoint+0x72>
 8006846:	a201      	add	r2, pc, #4	; (adr r2, 800684c <USB_ActivateEndpoint+0x38>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	0800685d 	.word	0x0800685d
 8006850:	08006879 	.word	0x08006879
 8006854:	0800688f 	.word	0x0800688f
 8006858:	0800686b 	.word	0x0800686b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800685c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006860:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006864:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006868:	e012      	b.n	8006890 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800686a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800686e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006872:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006876:	e00b      	b.n	8006890 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800687c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006884:	e004      	b.n	8006890 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800688c:	e000      	b.n	8006890 <USB_ActivateEndpoint+0x7c>
      break;
 800688e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	b21b      	sxth	r3, r3
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	b21a      	sxth	r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	b21b      	sxth	r3, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	b21b      	sxth	r3, r3
 80068d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	7b1b      	ldrb	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 8178 	bne.w	8006bf6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8084 	beq.w	8006a18 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691a:	b29b      	uxth	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4413      	add	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	00da      	lsls	r2, r3, #3
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	b29b      	uxth	r3, r3
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	827b      	strh	r3, [r7, #18]
 8006952:	8a7b      	ldrh	r3, [r7, #18]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01b      	beq.n	8006994 <USB_ActivateEndpoint+0x180>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	823b      	strh	r3, [r7, #16]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	8a3b      	ldrh	r3, [r7, #16]
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d020      	beq.n	80069de <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b2:	81bb      	strh	r3, [r7, #12]
 80069b4:	89bb      	ldrh	r3, [r7, #12]
 80069b6:	f083 0320 	eor.w	r3, r3, #32
 80069ba:	81bb      	strh	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	89bb      	ldrh	r3, [r7, #12]
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]
 80069dc:	e2d5      	b.n	8006f8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f4:	81fb      	strh	r3, [r7, #14]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	89fb      	ldrh	r3, [r7, #14]
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]
 8006a16:	e2b8      	b.n	8006f8a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	4413      	add	r3, r2
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	00da      	lsls	r2, r3, #3
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	88db      	ldrh	r3, [r3, #6]
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	4413      	add	r3, r2
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	00da      	lsls	r2, r3, #3
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	4413      	add	r3, r2
 8006a6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b3e      	cmp	r3, #62	; 0x3e
 8006a86:	d91d      	bls.n	8006ac4 <USB_ActivateEndpoint+0x2b0>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <USB_ActivateEndpoint+0x28e>
 8006a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	801a      	strh	r2, [r3, #0]
 8006ac2:	e026      	b.n	8006b12 <USB_ActivateEndpoint+0x2fe>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <USB_ActivateEndpoint+0x2ce>
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	e017      	b.n	8006b12 <USB_ActivateEndpoint+0x2fe>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <USB_ActivateEndpoint+0x2e8>
 8006af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006af8:	3301      	adds	r3, #1
 8006afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	029b      	lsls	r3, r3, #10
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d01b      	beq.n	8006b62 <USB_ActivateEndpoint+0x34e>
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b40:	843b      	strh	r3, [r7, #32]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	8c3b      	ldrh	r3, [r7, #32]
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d124      	bne.n	8006bb4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b80:	83bb      	strh	r3, [r7, #28]
 8006b82:	8bbb      	ldrh	r3, [r7, #28]
 8006b84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b88:	83bb      	strh	r3, [r7, #28]
 8006b8a:	8bbb      	ldrh	r3, [r7, #28]
 8006b8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b90:	83bb      	strh	r3, [r7, #28]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	8bbb      	ldrh	r3, [r7, #28]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
 8006bb2:	e1ea      	b.n	8006f8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	83fb      	strh	r3, [r7, #30]
 8006bcc:	8bfb      	ldrh	r3, [r7, #30]
 8006bce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bd2:	83fb      	strh	r3, [r7, #30]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	8bfb      	ldrh	r3, [r7, #30]
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]
 8006bf4:	e1c9      	b.n	8006f8a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	78db      	ldrb	r3, [r3, #3]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d11e      	bne.n	8006c3c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	8013      	strh	r3, [r2, #0]
 8006c3a:	e01d      	b.n	8006c78 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c88:	4413      	add	r3, r2
 8006c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	00da      	lsls	r2, r3, #3
 8006c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	891b      	ldrh	r3, [r3, #8]
 8006ca0:	085b      	lsrs	r3, r3, #1
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	657b      	str	r3, [r7, #84]	; 0x54
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cbc:	4413      	add	r3, r2
 8006cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	00da      	lsls	r2, r3, #3
 8006cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc8:	4413      	add	r3, r2
 8006cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cce:	653b      	str	r3, [r7, #80]	; 0x50
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	895b      	ldrh	r3, [r3, #10]
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cde:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f040 8093 	bne.w	8006e10 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006cfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01b      	beq.n	8006d3e <USB_ActivateEndpoint+0x52a>
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	441a      	add	r2, r3
 8006d28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01b      	beq.n	8006d8e <USB_ActivateEndpoint+0x57a>
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	441a      	add	r2, r3
 8006d78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da4:	873b      	strh	r3, [r7, #56]	; 0x38
 8006da6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006da8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dac:	873b      	strh	r3, [r7, #56]	; 0x38
 8006dae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006db0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006db4:	873b      	strh	r3, [r7, #56]	; 0x38
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	441a      	add	r2, r3
 8006df8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]
 8006e0e:	e0bc      	b.n	8006f8a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01d      	beq.n	8006e68 <USB_ActivateEndpoint+0x654>
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	441a      	add	r2, r3
 8006e50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006e78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01d      	beq.n	8006ec0 <USB_ActivateEndpoint+0x6ac>
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	441a      	add	r2, r3
 8006ea8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d024      	beq.n	8006f12 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ede:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ee2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ee6:	f083 0320 	eor.w	r3, r3, #32
 8006eea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	441a      	add	r2, r3
 8006ef8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	8013      	strh	r3, [r2, #0]
 8006f10:	e01d      	b.n	8006f4e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006f8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3774      	adds	r7, #116	; 0x74
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b08d      	sub	sp, #52	; 0x34
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	7b1b      	ldrb	r3, [r3, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 808e 	bne.w	80070cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d044      	beq.n	8007042 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	81bb      	strh	r3, [r7, #12]
 8006fc6:	89bb      	ldrh	r3, [r7, #12]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01b      	beq.n	8007008 <USB_DeactivateEndpoint+0x6c>
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe6:	817b      	strh	r3, [r7, #10]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	897b      	ldrh	r3, [r7, #10]
 8006ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007004:	b29b      	uxth	r3, r3
 8007006:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701e:	813b      	strh	r3, [r7, #8]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	893b      	ldrh	r3, [r7, #8]
 800702c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703c:	b29b      	uxth	r3, r3
 800703e:	8013      	strh	r3, [r2, #0]
 8007040:	e192      	b.n	8007368 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	827b      	strh	r3, [r7, #18]
 8007050:	8a7b      	ldrh	r3, [r7, #18]
 8007052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d01b      	beq.n	8007092 <USB_DeactivateEndpoint+0xf6>
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007070:	823b      	strh	r3, [r7, #16]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	441a      	add	r2, r3
 800707c:	8a3b      	ldrh	r3, [r7, #16]
 800707e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800708a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708e:	b29b      	uxth	r3, r3
 8007090:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	81fb      	strh	r3, [r7, #14]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	441a      	add	r2, r3
 80070b4:	89fb      	ldrh	r3, [r7, #14]
 80070b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	8013      	strh	r3, [r2, #0]
 80070ca:	e14d      	b.n	8007368 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 80a5 	bne.w	8007220 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	843b      	strh	r3, [r7, #32]
 80070e4:	8c3b      	ldrh	r3, [r7, #32]
 80070e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d01b      	beq.n	8007126 <USB_DeactivateEndpoint+0x18a>
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007104:	83fb      	strh	r3, [r7, #30]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	441a      	add	r2, r3
 8007110:	8bfb      	ldrh	r3, [r7, #30]
 8007112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800711e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007122:	b29b      	uxth	r3, r3
 8007124:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	83bb      	strh	r3, [r7, #28]
 8007134:	8bbb      	ldrh	r3, [r7, #28]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01b      	beq.n	8007176 <USB_DeactivateEndpoint+0x1da>
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	837b      	strh	r3, [r7, #26]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	441a      	add	r2, r3
 8007160:	8b7b      	ldrh	r3, [r7, #26]
 8007162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800716e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007172:	b29b      	uxth	r3, r3
 8007174:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	833b      	strh	r3, [r7, #24]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	8b3b      	ldrh	r3, [r7, #24]
 800719a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800719e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c4:	82fb      	strh	r3, [r7, #22]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	441a      	add	r2, r3
 80071d0:	8afb      	ldrh	r3, [r7, #22]
 80071d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fc:	82bb      	strh	r3, [r7, #20]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	441a      	add	r2, r3
 8007208:	8abb      	ldrh	r3, [r7, #20]
 800720a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721a:	b29b      	uxth	r3, r3
 800721c:	8013      	strh	r3, [r2, #0]
 800721e:	e0a3      	b.n	8007368 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800722e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01b      	beq.n	8007270 <USB_DeactivateEndpoint+0x2d4>
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800725c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	b29b      	uxth	r3, r3
 800726e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800727e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01b      	beq.n	80072c0 <USB_DeactivateEndpoint+0x324>
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	853b      	strh	r3, [r7, #40]	; 0x28
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	441a      	add	r2, r3
 80072aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	441a      	add	r2, r3
 800731a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800731c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732c:	b29b      	uxth	r3, r3
 800732e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007346:	847b      	strh	r3, [r7, #34]	; 0x22
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	441a      	add	r2, r3
 8007352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007364:	b29b      	uxth	r3, r3
 8007366:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3734      	adds	r7, #52	; 0x34
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b0c2      	sub	sp, #264	; 0x108
 800737a:	af00      	add	r7, sp, #0
 800737c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007384:	6018      	str	r0, [r3, #0]
 8007386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b01      	cmp	r3, #1
 800739e:	f040 86b7 	bne.w	8008110 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d908      	bls.n	80073d0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073ce:	e007      	b.n	80073e0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	7b1b      	ldrb	r3, [r3, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d13a      	bne.n	8007466 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80073f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6959      	ldr	r1, [r3, #20]
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	88da      	ldrh	r2, [r3, #6]
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740c:	b29b      	uxth	r3, r3
 800740e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007412:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007416:	6800      	ldr	r0, [r0, #0]
 8007418:	f001 fc98 	bl	8008d4c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4413      	add	r3, r2
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	00da      	lsls	r2, r3, #3
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	f000 be1f 	b.w	80080a4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	78db      	ldrb	r3, [r3, #3]
 8007472:	2b02      	cmp	r3, #2
 8007474:	f040 8462 	bne.w	8007d3c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a1a      	ldr	r2, [r3, #32]
 8007484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	429a      	cmp	r2, r3
 8007492:	f240 83df 	bls.w	8007c54 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	441a      	add	r2, r3
 80074da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80074f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a1a      	ldr	r2, [r3, #32]
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007502:	1ad2      	subs	r2, r2, r3
 8007504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 81c7 	beq.w	80078c6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d177      	bne.n	8007644 <USB_EPStartXfer+0x2ce>
 8007554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756e:	b29b      	uxth	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	4413      	add	r3, r2
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28
 8007578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	00da      	lsls	r2, r3, #3
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	4413      	add	r3, r2
 800758a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800759a:	b29a      	uxth	r2, r3
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a4:	2b3e      	cmp	r3, #62	; 0x3e
 80075a6:	d921      	bls.n	80075ec <USB_EPStartXfer+0x276>
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <USB_EPStartXfer+0x252>
 80075be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075c2:	3b01      	subs	r3, #1
 80075c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	029b      	lsls	r3, r3, #10
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	4313      	orrs	r3, r2
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	e050      	b.n	800768e <USB_EPStartXfer+0x318>
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <USB_EPStartXfer+0x294>
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007602:	b29a      	uxth	r2, r3
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	e041      	b.n	800768e <USB_EPStartXfer+0x318>
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <USB_EPStartXfer+0x2b4>
 8007620:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007624:	3301      	adds	r3, #1
 8007626:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29a      	uxth	r2, r3
 8007630:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007634:	b29b      	uxth	r3, r3
 8007636:	029b      	lsls	r3, r3, #10
 8007638:	b29b      	uxth	r3, r3
 800763a:	4313      	orrs	r3, r2
 800763c:	b29a      	uxth	r2, r3
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	e024      	b.n	800768e <USB_EPStartXfer+0x318>
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d11c      	bne.n	800768e <USB_EPStartXfer+0x318>
 8007654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007662:	b29b      	uxth	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	4413      	add	r3, r2
 800766a:	633b      	str	r3, [r7, #48]	; 0x30
 800766c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	00da      	lsls	r2, r3, #3
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	4413      	add	r3, r2
 800767e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007688:	b29a      	uxth	r2, r3
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800768e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	895b      	ldrh	r3, [r3, #10]
 800769a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6959      	ldr	r1, [r3, #20]
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f001 fb45 	bl	8008d4c <USB_WritePMA>
            ep->xfer_buff += len;
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695a      	ldr	r2, [r3, #20]
 80076ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d2:	441a      	add	r2, r3
 80076d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6a1a      	ldr	r2, [r3, #32]
 80076ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d90f      	bls.n	800771c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80076fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770c:	1ad2      	subs	r2, r2, r3
 800770e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	621a      	str	r2, [r3, #32]
 800771a:	e00e      	b.n	800773a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800771c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800773a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d177      	bne.n	800783a <USB_EPStartXfer+0x4c4>
 800774a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	61bb      	str	r3, [r7, #24]
 8007756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007764:	b29b      	uxth	r3, r3
 8007766:	461a      	mov	r2, r3
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	4413      	add	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	00da      	lsls	r2, r3, #3
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	4413      	add	r3, r2
 8007780:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007790:	b29a      	uxth	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	801a      	strh	r2, [r3, #0]
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779a:	2b3e      	cmp	r3, #62	; 0x3e
 800779c:	d921      	bls.n	80077e2 <USB_EPStartXfer+0x46c>
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <USB_EPStartXfer+0x448>
 80077b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b8:	3b01      	subs	r3, #1
 80077ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	029b      	lsls	r3, r3, #10
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077da:	b29a      	uxth	r2, r3
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	e056      	b.n	8007890 <USB_EPStartXfer+0x51a>
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <USB_EPStartXfer+0x48a>
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	801a      	strh	r2, [r3, #0]
 80077fe:	e047      	b.n	8007890 <USB_EPStartXfer+0x51a>
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007804:	085b      	lsrs	r3, r3, #1
 8007806:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <USB_EPStartXfer+0x4aa>
 8007816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800781a:	3301      	adds	r3, #1
 800781c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29a      	uxth	r2, r3
 8007826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800782a:	b29b      	uxth	r3, r3
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	b29b      	uxth	r3, r3
 8007830:	4313      	orrs	r3, r2
 8007832:	b29a      	uxth	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	e02a      	b.n	8007890 <USB_EPStartXfer+0x51a>
 800783a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d122      	bne.n	8007890 <USB_EPStartXfer+0x51a>
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	623b      	str	r3, [r7, #32]
 8007856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007864:	b29b      	uxth	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	4413      	add	r3, r2
 800786c:	623b      	str	r3, [r7, #32]
 800786e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	00da      	lsls	r2, r3, #3
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	4413      	add	r3, r2
 8007880:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788a:	b29a      	uxth	r2, r3
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	891b      	ldrh	r3, [r3, #8]
 800789c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6959      	ldr	r1, [r3, #20]
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078be:	6800      	ldr	r0, [r0, #0]
 80078c0:	f001 fa44 	bl	8008d4c <USB_WritePMA>
 80078c4:	e3ee      	b.n	80080a4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d177      	bne.n	80079c6 <USB_EPStartXfer+0x650>
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f6:	4413      	add	r3, r2
 80078f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80078fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	00da      	lsls	r2, r3, #3
 8007908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800790a:	4413      	add	r3, r2
 800790c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007910:	647b      	str	r3, [r7, #68]	; 0x44
 8007912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800791c:	b29a      	uxth	r2, r3
 800791e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007920:	801a      	strh	r2, [r3, #0]
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007926:	2b3e      	cmp	r3, #62	; 0x3e
 8007928:	d921      	bls.n	800796e <USB_EPStartXfer+0x5f8>
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <USB_EPStartXfer+0x5d4>
 8007940:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007944:	3b01      	subs	r3, #1
 8007946:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800794a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29a      	uxth	r2, r3
 8007950:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007954:	b29b      	uxth	r3, r3
 8007956:	029b      	lsls	r3, r3, #10
 8007958:	b29b      	uxth	r3, r3
 800795a:	4313      	orrs	r3, r2
 800795c:	b29b      	uxth	r3, r3
 800795e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007966:	b29a      	uxth	r2, r3
 8007968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	e056      	b.n	8007a1c <USB_EPStartXfer+0x6a6>
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <USB_EPStartXfer+0x616>
 8007976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007984:	b29a      	uxth	r2, r3
 8007986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e047      	b.n	8007a1c <USB_EPStartXfer+0x6a6>
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <USB_EPStartXfer+0x636>
 80079a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079a6:	3301      	adds	r3, #1
 80079a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	029b      	lsls	r3, r3, #10
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	e02a      	b.n	8007a1c <USB_EPStartXfer+0x6a6>
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d122      	bne.n	8007a1c <USB_EPStartXfer+0x6a6>
 80079d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	653b      	str	r3, [r7, #80]	; 0x50
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f6:	4413      	add	r3, r2
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
 80079fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	00da      	lsls	r2, r3, #3
 8007a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	891b      	ldrh	r3, [r3, #8]
 8007a28:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6959      	ldr	r1, [r3, #20]
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a46:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	f001 f97e 	bl	8008d4c <USB_WritePMA>
            ep->xfer_buff += len;
 8007a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a60:	441a      	add	r2, r3
 8007a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6a1a      	ldr	r2, [r3, #32]
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d90f      	bls.n	8007aaa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6a1a      	ldr	r2, [r3, #32]
 8007a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	621a      	str	r2, [r3, #32]
 8007aa8:	e00e      	b.n	8007ac8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d177      	bne.n	8007bd4 <USB_EPStartXfer+0x85e>
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8007af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	4413      	add	r3, r2
 8007b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	00da      	lsls	r2, r3, #3
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	4413      	add	r3, r2
 8007b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b34:	2b3e      	cmp	r3, #62	; 0x3e
 8007b36:	d921      	bls.n	8007b7c <USB_EPStartXfer+0x806>
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <USB_EPStartXfer+0x7e2>
 8007b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b52:	3b01      	subs	r3, #1
 8007b54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	029b      	lsls	r3, r3, #10
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	e050      	b.n	8007c1e <USB_EPStartXfer+0x8a8>
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <USB_EPStartXfer+0x824>
 8007b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	e041      	b.n	8007c1e <USB_EPStartXfer+0x8a8>
 8007b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d004      	beq.n	8007bba <USB_EPStartXfer+0x844>
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e024      	b.n	8007c1e <USB_EPStartXfer+0x8a8>
 8007bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d11c      	bne.n	8007c1e <USB_EPStartXfer+0x8a8>
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf8:	4413      	add	r3, r2
 8007bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8007bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	00da      	lsls	r2, r3, #3
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	895b      	ldrh	r3, [r3, #10]
 8007c2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6959      	ldr	r1, [r3, #20]
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f001 f87d 	bl	8008d4c <USB_WritePMA>
 8007c52:	e227      	b.n	80080a4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	441a      	add	r2, r3
 8007ca8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce0:	4413      	add	r3, r2
 8007ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	00da      	lsls	r2, r3, #3
 8007cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	891b      	ldrh	r3, [r3, #8]
 8007d12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6959      	ldr	r1, [r3, #20]
 8007d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d34:	6800      	ldr	r0, [r0, #0]
 8007d36:	f001 f809 	bl	8008d4c <USB_WritePMA>
 8007d3a:	e1b3      	b.n	80080a4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a1a      	ldr	r2, [r3, #32]
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80c6 	beq.w	8007f0e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	673b      	str	r3, [r7, #112]	; 0x70
 8007d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d177      	bne.n	8007e8e <USB_EPStartXfer+0xb18>
 8007d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dbe:	4413      	add	r3, r2
 8007dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	00da      	lsls	r2, r3, #3
 8007dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8007dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dee:	2b3e      	cmp	r3, #62	; 0x3e
 8007df0:	d921      	bls.n	8007e36 <USB_EPStartXfer+0xac0>
 8007df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <USB_EPStartXfer+0xa9c>
 8007e08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	029b      	lsls	r3, r3, #10
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	4313      	orrs	r3, r2
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	e050      	b.n	8007ed8 <USB_EPStartXfer+0xb62>
 8007e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <USB_EPStartXfer+0xade>
 8007e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	e041      	b.n	8007ed8 <USB_EPStartXfer+0xb62>
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <USB_EPStartXfer+0xafe>
 8007e6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	029b      	lsls	r3, r3, #10
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	4313      	orrs	r3, r2
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	e024      	b.n	8007ed8 <USB_EPStartXfer+0xb62>
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d11c      	bne.n	8007ed8 <USB_EPStartXfer+0xb62>
 8007e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb2:	4413      	add	r3, r2
 8007eb4:	673b      	str	r3, [r7, #112]	; 0x70
 8007eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	00da      	lsls	r2, r3, #3
 8007ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	895b      	ldrh	r3, [r3, #10]
 8007ee4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6959      	ldr	r1, [r3, #20]
 8007ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007efe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f06:	6800      	ldr	r0, [r0, #0]
 8007f08:	f000 ff20 	bl	8008d4c <USB_WritePMA>
 8007f0c:	e0ca      	b.n	80080a4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d177      	bne.n	800800e <USB_EPStartXfer+0xc98>
 8007f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f3e:	4413      	add	r3, r2
 8007f40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	00da      	lsls	r2, r3, #3
 8007f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f52:	4413      	add	r3, r2
 8007f54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007f70:	d921      	bls.n	8007fb6 <USB_EPStartXfer+0xc40>
 8007f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f80:	f003 031f 	and.w	r3, r3, #31
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <USB_EPStartXfer+0xc1c>
 8007f88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	029b      	lsls	r3, r3, #10
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	e05c      	b.n	8008070 <USB_EPStartXfer+0xcfa>
 8007fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <USB_EPStartXfer+0xc5e>
 8007fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd0:	801a      	strh	r2, [r3, #0]
 8007fd2:	e04d      	b.n	8008070 <USB_EPStartXfer+0xcfa>
 8007fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <USB_EPStartXfer+0xc7e>
 8007fea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fee:	3301      	adds	r3, #1
 8007ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	029b      	lsls	r3, r3, #10
 8008002:	b29b      	uxth	r3, r3
 8008004:	4313      	orrs	r3, r2
 8008006:	b29a      	uxth	r2, r3
 8008008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	e030      	b.n	8008070 <USB_EPStartXfer+0xcfa>
 800800e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d128      	bne.n	8008070 <USB_EPStartXfer+0xcfa>
 800801e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800802c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800803a:	b29b      	uxth	r3, r3
 800803c:	461a      	mov	r2, r3
 800803e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008042:	4413      	add	r3, r2
 8008044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	00da      	lsls	r2, r3, #3
 8008056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800805a:	4413      	add	r3, r2
 800805c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800806e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	891b      	ldrh	r3, [r3, #8]
 800807c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6959      	ldr	r1, [r3, #20]
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008090:	b29b      	uxth	r3, r3
 8008092:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008096:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800809a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800809e:	6800      	ldr	r0, [r0, #0]
 80080a0:	f000 fe54 	bl	8008d4c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ca:	817b      	strh	r3, [r7, #10]
 80080cc:	897b      	ldrh	r3, [r7, #10]
 80080ce:	f083 0310 	eor.w	r3, r3, #16
 80080d2:	817b      	strh	r3, [r7, #10]
 80080d4:	897b      	ldrh	r3, [r7, #10]
 80080d6:	f083 0320 	eor.w	r3, r3, #32
 80080da:	817b      	strh	r3, [r7, #10]
 80080dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	897b      	ldrh	r3, [r7, #10]
 80080f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008108:	b29b      	uxth	r3, r3
 800810a:	8013      	strh	r3, [r2, #0]
 800810c:	f000 bcde 	b.w	8008acc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	7b1b      	ldrb	r3, [r3, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f040 80bb 	bne.w	8008298 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	429a      	cmp	r2, r3
 800813c:	d917      	bls.n	800816e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800813e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800814e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815e:	1ad2      	subs	r2, r2, r3
 8008160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	619a      	str	r2, [r3, #24]
 800816c:	e00e      	b.n	800818c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800817e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2200      	movs	r2, #0
 800818a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800819a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081b0:	4413      	add	r3, r2
 80081b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	00da      	lsls	r2, r3, #3
 80081c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081c8:	4413      	add	r3, r2
 80081ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081de:	b29a      	uxth	r2, r3
 80081e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081e4:	801a      	strh	r2, [r3, #0]
 80081e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ea:	2b3e      	cmp	r3, #62	; 0x3e
 80081ec:	d924      	bls.n	8008238 <USB_EPStartXfer+0xec2>
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <USB_EPStartXfer+0xe98>
 8008204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008208:	3b01      	subs	r3, #1
 800820a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800820e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800821a:	b29b      	uxth	r3, r3
 800821c:	029b      	lsls	r3, r3, #10
 800821e:	b29b      	uxth	r3, r3
 8008220:	4313      	orrs	r3, r2
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822c:	b29a      	uxth	r2, r3
 800822e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	f000 bc10 	b.w	8008a58 <USB_EPStartXfer+0x16e2>
 8008238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10c      	bne.n	800825a <USB_EPStartXfer+0xee4>
 8008240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008250:	b29a      	uxth	r2, r3
 8008252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e3fe      	b.n	8008a58 <USB_EPStartXfer+0x16e2>
 800825a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <USB_EPStartXfer+0xf04>
 8008270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008274:	3301      	adds	r3, #1
 8008276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800827a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29a      	uxth	r2, r3
 8008282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008286:	b29b      	uxth	r3, r3
 8008288:	029b      	lsls	r3, r3, #10
 800828a:	b29b      	uxth	r3, r3
 800828c:	4313      	orrs	r3, r2
 800828e:	b29a      	uxth	r2, r3
 8008290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	e3df      	b.n	8008a58 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	78db      	ldrb	r3, [r3, #3]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	f040 8218 	bne.w	80086da <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f040 809d 	bne.w	80083f6 <USB_EPStartXfer+0x1080>
 80082bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d8:	b29b      	uxth	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082e0:	4413      	add	r3, r2
 80082e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	00da      	lsls	r2, r3, #3
 80082f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082f8:	4413      	add	r3, r2
 80082fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	b29b      	uxth	r3, r3
 800830a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b3e      	cmp	r3, #62	; 0x3e
 8008324:	d92b      	bls.n	800837e <USB_EPStartXfer+0x1008>
 8008326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <USB_EPStartXfer+0xfe0>
 800834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008350:	3b01      	subs	r3, #1
 8008352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	b29a      	uxth	r2, r3
 800835e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008362:	b29b      	uxth	r3, r3
 8008364:	029b      	lsls	r3, r3, #10
 8008366:	b29b      	uxth	r3, r3
 8008368:	4313      	orrs	r3, r2
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e070      	b.n	8008460 <USB_EPStartXfer+0x10ea>
 800837e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10c      	bne.n	80083a8 <USB_EPStartXfer+0x1032>
 800838e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800839a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839e:	b29a      	uxth	r2, r3
 80083a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083a4:	801a      	strh	r2, [r3, #0]
 80083a6:	e05b      	b.n	8008460 <USB_EPStartXfer+0x10ea>
 80083a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <USB_EPStartXfer+0x1062>
 80083ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d2:	3301      	adds	r3, #1
 80083d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	b29a      	uxth	r2, r3
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	029b      	lsls	r3, r3, #10
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4313      	orrs	r3, r2
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e034      	b.n	8008460 <USB_EPStartXfer+0x10ea>
 80083f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d12c      	bne.n	8008460 <USB_EPStartXfer+0x10ea>
 8008406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008422:	b29b      	uxth	r3, r3
 8008424:	461a      	mov	r2, r3
 8008426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800842a:	4413      	add	r3, r2
 800842c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	00da      	lsls	r2, r3, #3
 800843e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008442:	4413      	add	r3, r2
 8008444:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800844c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	b29a      	uxth	r2, r3
 800845a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800845e:	801a      	strh	r2, [r3, #0]
 8008460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800846e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 809d 	bne.w	80085ba <USB_EPStartXfer+0x1244>
 8008480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800848e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849c:	b29b      	uxth	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084a4:	4413      	add	r3, r2
 80084a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	00da      	lsls	r2, r3, #3
 80084b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084bc:	4413      	add	r3, r2
 80084be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b3e      	cmp	r3, #62	; 0x3e
 80084e8:	d92b      	bls.n	8008542 <USB_EPStartXfer+0x11cc>
 80084ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <USB_EPStartXfer+0x11a4>
 8008510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008514:	3b01      	subs	r3, #1
 8008516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800851a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	b29a      	uxth	r2, r3
 8008522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008526:	b29b      	uxth	r3, r3
 8008528:	029b      	lsls	r3, r3, #10
 800852a:	b29b      	uxth	r3, r3
 800852c:	4313      	orrs	r3, r2
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008538:	b29a      	uxth	r2, r3
 800853a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e069      	b.n	8008616 <USB_EPStartXfer+0x12a0>
 8008542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10c      	bne.n	800856c <USB_EPStartXfer+0x11f6>
 8008552:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008562:	b29a      	uxth	r2, r3
 8008564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	e054      	b.n	8008616 <USB_EPStartXfer+0x12a0>
 800856c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	085b      	lsrs	r3, r3, #1
 800857a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800857e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <USB_EPStartXfer+0x1226>
 8008592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008596:	3301      	adds	r3, #1
 8008598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800859c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	029b      	lsls	r3, r3, #10
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	4313      	orrs	r3, r2
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	e02d      	b.n	8008616 <USB_EPStartXfer+0x12a0>
 80085ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d125      	bne.n	8008616 <USB_EPStartXfer+0x12a0>
 80085ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d8:	b29b      	uxth	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085e0:	4413      	add	r3, r2
 80085e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80085e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	00da      	lsls	r2, r3, #3
 80085f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085f8:	4413      	add	r3, r2
 80085fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008614:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 8218 	beq.w	8008a58 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008648:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800864c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <USB_EPStartXfer+0x12ea>
 8008654:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10d      	bne.n	800867c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008660:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008668:	2b00      	cmp	r3, #0
 800866a:	f040 81f5 	bne.w	8008a58 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800866e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 81ee 	bne.w	8008a58 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800867c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	b29b      	uxth	r3, r3
 800869a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80086a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	441a      	add	r2, r3
 80086c0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80086c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	8013      	strh	r3, [r2, #0]
 80086d8:	e1be      	b.n	8008a58 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	78db      	ldrb	r3, [r3, #3]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	f040 81b4 	bne.w	8008a54 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80086ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699a      	ldr	r2, [r3, #24]
 80086f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	429a      	cmp	r2, r3
 8008706:	d917      	bls.n	8008738 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699a      	ldr	r2, [r3, #24]
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008728:	1ad2      	subs	r2, r2, r3
 800872a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	619a      	str	r2, [r3, #24]
 8008736:	e00e      	b.n	8008756 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f040 8085 	bne.w	8008872 <USB_EPStartXfer+0x14fc>
 8008768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008784:	b29b      	uxth	r3, r3
 8008786:	461a      	mov	r2, r3
 8008788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800878c:	4413      	add	r3, r2
 800878e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	00da      	lsls	r2, r3, #3
 80087a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087a4:	4413      	add	r3, r2
 80087a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087c0:	801a      	strh	r2, [r3, #0]
 80087c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c6:	2b3e      	cmp	r3, #62	; 0x3e
 80087c8:	d923      	bls.n	8008812 <USB_EPStartXfer+0x149c>
 80087ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ce:	095b      	lsrs	r3, r3, #5
 80087d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d8:	f003 031f 	and.w	r3, r3, #31
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <USB_EPStartXfer+0x1474>
 80087e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087e4:	3b01      	subs	r3, #1
 80087e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	029b      	lsls	r3, r3, #10
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	4313      	orrs	r3, r2
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e060      	b.n	80088d4 <USB_EPStartXfer+0x155e>
 8008812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10c      	bne.n	8008834 <USB_EPStartXfer+0x14be>
 800881a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800882a:	b29a      	uxth	r2, r3
 800882c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008830:	801a      	strh	r2, [r3, #0]
 8008832:	e04f      	b.n	80088d4 <USB_EPStartXfer+0x155e>
 8008834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800883e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d004      	beq.n	8008854 <USB_EPStartXfer+0x14de>
 800884a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800884e:	3301      	adds	r3, #1
 8008850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29a      	uxth	r2, r3
 800885c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008860:	b29b      	uxth	r3, r3
 8008862:	029b      	lsls	r3, r3, #10
 8008864:	b29b      	uxth	r3, r3
 8008866:	4313      	orrs	r3, r2
 8008868:	b29a      	uxth	r2, r3
 800886a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	e030      	b.n	80088d4 <USB_EPStartXfer+0x155e>
 8008872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d128      	bne.n	80088d4 <USB_EPStartXfer+0x155e>
 8008882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800889e:	b29b      	uxth	r3, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088a6:	4413      	add	r3, r2
 80088a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	00da      	lsls	r2, r3, #3
 80088ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088be:	4413      	add	r3, r2
 80088c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f040 8085 	bne.w	80089fe <USB_EPStartXfer+0x1688>
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008910:	b29b      	uxth	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008918:	4413      	add	r3, r2
 800891a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800891e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	00da      	lsls	r2, r3, #3
 800892c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008930:	4413      	add	r3, r2
 8008932:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800893a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008946:	b29a      	uxth	r2, r3
 8008948:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008952:	2b3e      	cmp	r3, #62	; 0x3e
 8008954:	d923      	bls.n	800899e <USB_EPStartXfer+0x1628>
 8008956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800895a:	095b      	lsrs	r3, r3, #5
 800895c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008964:	f003 031f 	and.w	r3, r3, #31
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <USB_EPStartXfer+0x1600>
 800896c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008970:	3b01      	subs	r3, #1
 8008972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	b29a      	uxth	r2, r3
 800897e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008982:	b29b      	uxth	r3, r3
 8008984:	029b      	lsls	r3, r3, #10
 8008986:	b29b      	uxth	r3, r3
 8008988:	4313      	orrs	r3, r2
 800898a:	b29b      	uxth	r3, r3
 800898c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008994:	b29a      	uxth	r2, r3
 8008996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	e05c      	b.n	8008a58 <USB_EPStartXfer+0x16e2>
 800899e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10c      	bne.n	80089c0 <USB_EPStartXfer+0x164a>
 80089a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089bc:	801a      	strh	r2, [r3, #0]
 80089be:	e04b      	b.n	8008a58 <USB_EPStartXfer+0x16e2>
 80089c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d004      	beq.n	80089e0 <USB_EPStartXfer+0x166a>
 80089d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089da:	3301      	adds	r3, #1
 80089dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	029b      	lsls	r3, r3, #10
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4313      	orrs	r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	e02c      	b.n	8008a58 <USB_EPStartXfer+0x16e2>
 80089fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d124      	bne.n	8008a58 <USB_EPStartXfer+0x16e2>
 8008a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a24:	4413      	add	r3, r2
 8008a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	00da      	lsls	r2, r3, #3
 8008a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	e001      	b.n	8008a58 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e03a      	b.n	8008ace <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a8e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a96:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	441a      	add	r2, r3
 8008ab4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d020      	beq.n	8008b2c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b00:	81bb      	strh	r3, [r7, #12]
 8008b02:	89bb      	ldrh	r3, [r7, #12]
 8008b04:	f083 0310 	eor.w	r3, r3, #16
 8008b08:	81bb      	strh	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	441a      	add	r2, r3
 8008b14:	89bb      	ldrh	r3, [r7, #12]
 8008b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	8013      	strh	r3, [r2, #0]
 8008b2a:	e01f      	b.n	8008b6c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	81fb      	strh	r3, [r7, #14]
 8008b44:	89fb      	ldrh	r3, [r7, #14]
 8008b46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b4a:	81fb      	strh	r3, [r7, #14]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	441a      	add	r2, r3
 8008b56:	89fb      	ldrh	r3, [r7, #14]
 8008b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b087      	sub	sp, #28
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	7b1b      	ldrb	r3, [r3, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f040 809d 	bne.w	8008cc8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	785b      	ldrb	r3, [r3, #1]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d04c      	beq.n	8008c30 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	823b      	strh	r3, [r7, #16]
 8008ba4:	8a3b      	ldrh	r3, [r7, #16]
 8008ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01b      	beq.n	8008be6 <USB_EPClearStall+0x6c>
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc4:	81fb      	strh	r3, [r7, #14]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	89fb      	ldrh	r3, [r7, #14]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	78db      	ldrb	r3, [r3, #3]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d06c      	beq.n	8008cc8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c04:	81bb      	strh	r3, [r7, #12]
 8008c06:	89bb      	ldrh	r3, [r7, #12]
 8008c08:	f083 0320 	eor.w	r3, r3, #32
 8008c0c:	81bb      	strh	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	441a      	add	r2, r3
 8008c18:	89bb      	ldrh	r3, [r7, #12]
 8008c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	8013      	strh	r3, [r2, #0]
 8008c2e:	e04b      	b.n	8008cc8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	82fb      	strh	r3, [r7, #22]
 8008c3e:	8afb      	ldrh	r3, [r7, #22]
 8008c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01b      	beq.n	8008c80 <USB_EPClearStall+0x106>
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5e:	82bb      	strh	r3, [r7, #20]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	441a      	add	r2, r3
 8008c6a:	8abb      	ldrh	r3, [r7, #20]
 8008c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c96:	827b      	strh	r3, [r7, #18]
 8008c98:	8a7b      	ldrh	r3, [r7, #18]
 8008c9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c9e:	827b      	strh	r3, [r7, #18]
 8008ca0:	8a7b      	ldrh	r3, [r7, #18]
 8008ca2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ca6:	827b      	strh	r3, [r7, #18]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	441a      	add	r2, r3
 8008cb2:	8a7b      	ldrh	r3, [r7, #18]
 8008cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2280      	movs	r2, #128	; 0x80
 8008cec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b08b      	sub	sp, #44	; 0x2c
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	4611      	mov	r1, r2
 8008d58:	461a      	mov	r2, r3
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	80fb      	strh	r3, [r7, #6]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d62:	88bb      	ldrh	r3, [r7, #4]
 8008d64:	3301      	adds	r3, #1
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d72:	88fa      	ldrh	r2, [r7, #6]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
 8008d82:	e01b      	b.n	8008dbc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	b21a      	sxth	r2, r3
 8008d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	b21b      	sxth	r3, r3
 8008d9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	8a7a      	ldrh	r2, [r7, #18]
 8008da2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	3302      	adds	r3, #2
 8008da8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	3301      	adds	r3, #1
 8008dae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	3301      	adds	r3, #1
 8008db4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	3b01      	subs	r3, #1
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1e0      	bne.n	8008d84 <USB_WritePMA+0x38>
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	372c      	adds	r7, #44	; 0x2c
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b08b      	sub	sp, #44	; 0x2c
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4611      	mov	r1, r2
 8008ddc:	461a      	mov	r2, r3
 8008dde:	460b      	mov	r3, r1
 8008de0:	80fb      	strh	r3, [r7, #6]
 8008de2:	4613      	mov	r3, r2
 8008de4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008de6:	88bb      	ldrh	r3, [r7, #4]
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008df6:	88fa      	ldrh	r2, [r7, #6]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e00:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
 8008e06:	e018      	b.n	8008e3a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	3302      	adds	r3, #2
 8008e14:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	3301      	adds	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	3301      	adds	r3, #1
 8008e32:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	3b01      	subs	r3, #1
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e3      	bne.n	8008e08 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008e40:	88bb      	ldrh	r3, [r7, #4]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d007      	beq.n	8008e5c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	701a      	strb	r2, [r3, #0]
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	372c      	adds	r7, #44	; 0x2c
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008e78:	f002 fbf8 	bl	800b66c <USBD_static_malloc>
 8008e7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d109      	bne.n	8008e98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	32b0      	adds	r2, #176	; 0xb0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008e94:	2302      	movs	r3, #2
 8008e96:	e0d4      	b.n	8009042 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008e98:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f00d f912 	bl	80160c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	32b0      	adds	r2, #176	; 0xb0
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	32b0      	adds	r2, #176	; 0xb0
 8008ebe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	7c1b      	ldrb	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d138      	bne.n	8008f42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008ed0:	4b5e      	ldr	r3, [pc, #376]	; (800904c <USBD_CDC_Init+0x1e4>)
 8008ed2:	7819      	ldrb	r1, [r3, #0]
 8008ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ed8:	2202      	movs	r2, #2
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f002 fa6b 	bl	800b3b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ee0:	4b5a      	ldr	r3, [pc, #360]	; (800904c <USBD_CDC_Init+0x1e4>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	f003 020f 	and.w	r2, r3, #15
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	3324      	adds	r3, #36	; 0x24
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008efa:	4b55      	ldr	r3, [pc, #340]	; (8009050 <USBD_CDC_Init+0x1e8>)
 8008efc:	7819      	ldrb	r1, [r3, #0]
 8008efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f02:	2202      	movs	r2, #2
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f002 fa56 	bl	800b3b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f0a:	4b51      	ldr	r3, [pc, #324]	; (8009050 <USBD_CDC_Init+0x1e8>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	f003 020f 	and.w	r2, r3, #15
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f22:	2201      	movs	r2, #1
 8008f24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f26:	4b4b      	ldr	r3, [pc, #300]	; (8009054 <USBD_CDC_Init+0x1ec>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	f003 020f 	and.w	r2, r3, #15
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	3326      	adds	r3, #38	; 0x26
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	801a      	strh	r2, [r3, #0]
 8008f40:	e035      	b.n	8008fae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f42:	4b42      	ldr	r3, [pc, #264]	; (800904c <USBD_CDC_Init+0x1e4>)
 8008f44:	7819      	ldrb	r1, [r3, #0]
 8008f46:	2340      	movs	r3, #64	; 0x40
 8008f48:	2202      	movs	r2, #2
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f002 fa33 	bl	800b3b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f50:	4b3e      	ldr	r3, [pc, #248]	; (800904c <USBD_CDC_Init+0x1e4>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	3324      	adds	r3, #36	; 0x24
 8008f66:	2201      	movs	r2, #1
 8008f68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f6a:	4b39      	ldr	r3, [pc, #228]	; (8009050 <USBD_CDC_Init+0x1e8>)
 8008f6c:	7819      	ldrb	r1, [r3, #0]
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	2202      	movs	r2, #2
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f002 fa1f 	bl	800b3b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f78:	4b35      	ldr	r3, [pc, #212]	; (8009050 <USBD_CDC_Init+0x1e8>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 020f 	and.w	r2, r3, #15
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f90:	2201      	movs	r2, #1
 8008f92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008f94:	4b2f      	ldr	r3, [pc, #188]	; (8009054 <USBD_CDC_Init+0x1ec>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	f003 020f 	and.w	r2, r3, #15
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	3326      	adds	r3, #38	; 0x26
 8008faa:	2210      	movs	r2, #16
 8008fac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008fae:	4b29      	ldr	r3, [pc, #164]	; (8009054 <USBD_CDC_Init+0x1ec>)
 8008fb0:	7819      	ldrb	r1, [r3, #0]
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	2203      	movs	r2, #3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f002 f9fd 	bl	800b3b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008fbc:	4b25      	ldr	r3, [pc, #148]	; (8009054 <USBD_CDC_Init+0x1ec>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 020f 	and.w	r2, r3, #15
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	3324      	adds	r3, #36	; 0x24
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	33b0      	adds	r3, #176	; 0xb0
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800900c:	2302      	movs	r3, #2
 800900e:	e018      	b.n	8009042 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7c1b      	ldrb	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009018:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <USBD_CDC_Init+0x1e8>)
 800901a:	7819      	ldrb	r1, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f002 fab5 	bl	800b596 <USBD_LL_PrepareReceive>
 800902c:	e008      	b.n	8009040 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800902e:	4b08      	ldr	r3, [pc, #32]	; (8009050 <USBD_CDC_Init+0x1e8>)
 8009030:	7819      	ldrb	r1, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009038:	2340      	movs	r3, #64	; 0x40
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f002 faab 	bl	800b596 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	2000009b 	.word	0x2000009b
 8009050:	2000009c 	.word	0x2000009c
 8009054:	2000009d 	.word	0x2000009d

08009058 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009064:	4b3a      	ldr	r3, [pc, #232]	; (8009150 <USBD_CDC_DeInit+0xf8>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f002 f9c9 	bl	800b402 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009070:	4b37      	ldr	r3, [pc, #220]	; (8009150 <USBD_CDC_DeInit+0xf8>)
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	f003 020f 	and.w	r2, r3, #15
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	440b      	add	r3, r1
 8009084:	3324      	adds	r3, #36	; 0x24
 8009086:	2200      	movs	r2, #0
 8009088:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800908a:	4b32      	ldr	r3, [pc, #200]	; (8009154 <USBD_CDC_DeInit+0xfc>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f002 f9b6 	bl	800b402 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009096:	4b2f      	ldr	r3, [pc, #188]	; (8009154 <USBD_CDC_DeInit+0xfc>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	f003 020f 	and.w	r2, r3, #15
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	440b      	add	r3, r1
 80090aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090ae:	2200      	movs	r2, #0
 80090b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80090b2:	4b29      	ldr	r3, [pc, #164]	; (8009158 <USBD_CDC_DeInit+0x100>)
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f002 f9a2 	bl	800b402 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80090be:	4b26      	ldr	r3, [pc, #152]	; (8009158 <USBD_CDC_DeInit+0x100>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	f003 020f 	and.w	r2, r3, #15
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	3324      	adds	r3, #36	; 0x24
 80090d4:	2200      	movs	r2, #0
 80090d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80090d8:	4b1f      	ldr	r3, [pc, #124]	; (8009158 <USBD_CDC_DeInit+0x100>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	f003 020f 	and.w	r2, r3, #15
 80090e0:	6879      	ldr	r1, [r7, #4]
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	440b      	add	r3, r1
 80090ec:	3326      	adds	r3, #38	; 0x26
 80090ee:	2200      	movs	r2, #0
 80090f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	32b0      	adds	r2, #176	; 0xb0
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01f      	beq.n	8009144 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	33b0      	adds	r3, #176	; 0xb0
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32b0      	adds	r2, #176	; 0xb0
 8009122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009126:	4618      	mov	r0, r3
 8009128:	f002 faae 	bl	800b688 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	32b0      	adds	r2, #176	; 0xb0
 8009136:	2100      	movs	r1, #0
 8009138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	2000009b 	.word	0x2000009b
 8009154:	2000009c 	.word	0x2000009c
 8009158:	2000009d 	.word	0x2000009d

0800915c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	32b0      	adds	r2, #176	; 0xb0
 8009170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009174:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009176:	2300      	movs	r3, #0
 8009178:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009188:	2303      	movs	r3, #3
 800918a:	e0bf      	b.n	800930c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009194:	2b00      	cmp	r3, #0
 8009196:	d050      	beq.n	800923a <USBD_CDC_Setup+0xde>
 8009198:	2b20      	cmp	r3, #32
 800919a:	f040 80af 	bne.w	80092fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	88db      	ldrh	r3, [r3, #6]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d03a      	beq.n	800921c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da1b      	bge.n	80091e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	33b0      	adds	r3, #176	; 0xb0
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80091c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	88d2      	ldrh	r2, [r2, #6]
 80091cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	88db      	ldrh	r3, [r3, #6]
 80091d2:	2b07      	cmp	r3, #7
 80091d4:	bf28      	it	cs
 80091d6:	2307      	movcs	r3, #7
 80091d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	89fa      	ldrh	r2, [r7, #14]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 fce1 	bl	800aba8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80091e6:	e090      	b.n	800930a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	785a      	ldrb	r2, [r3, #1]
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	2b3f      	cmp	r3, #63	; 0x3f
 80091f8:	d803      	bhi.n	8009202 <USBD_CDC_Setup+0xa6>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	e000      	b.n	8009204 <USBD_CDC_Setup+0xa8>
 8009202:	2240      	movs	r2, #64	; 0x40
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800920a:	6939      	ldr	r1, [r7, #16]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009212:	461a      	mov	r2, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 fcf3 	bl	800ac00 <USBD_CtlPrepareRx>
      break;
 800921a:	e076      	b.n	800930a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	33b0      	adds	r3, #176	; 0xb0
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	7850      	ldrb	r0, [r2, #1]
 8009232:	2200      	movs	r2, #0
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	4798      	blx	r3
      break;
 8009238:	e067      	b.n	800930a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	785b      	ldrb	r3, [r3, #1]
 800923e:	2b0b      	cmp	r3, #11
 8009240:	d851      	bhi.n	80092e6 <USBD_CDC_Setup+0x18a>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <USBD_CDC_Setup+0xec>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	08009279 	.word	0x08009279
 800924c:	080092f5 	.word	0x080092f5
 8009250:	080092e7 	.word	0x080092e7
 8009254:	080092e7 	.word	0x080092e7
 8009258:	080092e7 	.word	0x080092e7
 800925c:	080092e7 	.word	0x080092e7
 8009260:	080092e7 	.word	0x080092e7
 8009264:	080092e7 	.word	0x080092e7
 8009268:	080092e7 	.word	0x080092e7
 800926c:	080092e7 	.word	0x080092e7
 8009270:	080092a3 	.word	0x080092a3
 8009274:	080092cd 	.word	0x080092cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b03      	cmp	r3, #3
 8009282:	d107      	bne.n	8009294 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009284:	f107 030a 	add.w	r3, r7, #10
 8009288:	2202      	movs	r2, #2
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f001 fc8b 	bl	800aba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009292:	e032      	b.n	80092fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fc15 	bl	800aac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	75fb      	strb	r3, [r7, #23]
          break;
 80092a0:	e02b      	b.n	80092fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d107      	bne.n	80092be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092ae:	f107 030d 	add.w	r3, r7, #13
 80092b2:	2201      	movs	r2, #1
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 fc76 	bl	800aba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092bc:	e01d      	b.n	80092fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 fc00 	bl	800aac6 <USBD_CtlError>
            ret = USBD_FAIL;
 80092c6:	2303      	movs	r3, #3
 80092c8:	75fb      	strb	r3, [r7, #23]
          break;
 80092ca:	e016      	b.n	80092fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d00f      	beq.n	80092f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f001 fbf3 	bl	800aac6 <USBD_CtlError>
            ret = USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092e4:	e008      	b.n	80092f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fbec 	bl	800aac6 <USBD_CtlError>
          ret = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	75fb      	strb	r3, [r7, #23]
          break;
 80092f2:	e002      	b.n	80092fa <USBD_CDC_Setup+0x19e>
          break;
 80092f4:	bf00      	nop
 80092f6:	e008      	b.n	800930a <USBD_CDC_Setup+0x1ae>
          break;
 80092f8:	bf00      	nop
      }
      break;
 80092fa:	e006      	b.n	800930a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 fbe1 	bl	800aac6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009304:	2303      	movs	r3, #3
 8009306:	75fb      	strb	r3, [r7, #23]
      break;
 8009308:	bf00      	nop
  }

  return (uint8_t)ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009326:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	32b0      	adds	r2, #176	; 0xb0
 8009332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800933a:	2303      	movs	r3, #3
 800933c:	e065      	b.n	800940a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32b0      	adds	r2, #176	; 0xb0
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	f003 020f 	and.w	r2, r3, #15
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	3318      	adds	r3, #24
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d02f      	beq.n	80093c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	f003 020f 	and.w	r2, r3, #15
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	3318      	adds	r3, #24
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	f003 010f 	and.w	r1, r3, #15
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	460b      	mov	r3, r1
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	00db      	lsls	r3, r3, #3
 800938e:	4403      	add	r3, r0
 8009390:	3338      	adds	r3, #56	; 0x38
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	fbb2 f1f3 	udiv	r1, r2, r3
 8009398:	fb01 f303 	mul.w	r3, r1, r3
 800939c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d112      	bne.n	80093c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	f003 020f 	and.w	r2, r3, #15
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	3318      	adds	r3, #24
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093ba:	78f9      	ldrb	r1, [r7, #3]
 80093bc:	2300      	movs	r3, #0
 80093be:	2200      	movs	r2, #0
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f002 f8c7 	bl	800b554 <USBD_LL_Transmit>
 80093c6:	e01f      	b.n	8009408 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	33b0      	adds	r3, #176	; 0xb0
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d010      	beq.n	8009408 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	33b0      	adds	r3, #176	; 0xb0
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	460b      	mov	r3, r1
 800941c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	32b0      	adds	r2, #176	; 0xb0
 8009428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	32b0      	adds	r2, #176	; 0xb0
 8009438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e01a      	b.n	800947a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f002 f8c5 	bl	800b5d8 <USBD_LL_GetRxDataSize>
 800944e:	4602      	mov	r2, r0
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	33b0      	adds	r3, #176	; 0xb0
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009474:	4611      	mov	r1, r2
 8009476:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	32b0      	adds	r2, #176	; 0xb0
 8009494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e025      	b.n	80094f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	33b0      	adds	r3, #176	; 0xb0
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01a      	beq.n	80094ee <USBD_CDC_EP0_RxReady+0x6c>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80094be:	2bff      	cmp	r3, #255	; 0xff
 80094c0:	d015      	beq.n	80094ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	33b0      	adds	r3, #176	; 0xb0
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80094da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80094e2:	b292      	uxth	r2, r2
 80094e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	22ff      	movs	r2, #255	; 0xff
 80094ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009500:	2182      	movs	r1, #130	; 0x82
 8009502:	4818      	ldr	r0, [pc, #96]	; (8009564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009504:	f000 fc7d 	bl	8009e02 <USBD_GetEpDesc>
 8009508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800950a:	2101      	movs	r1, #1
 800950c:	4815      	ldr	r0, [pc, #84]	; (8009564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800950e:	f000 fc78 	bl	8009e02 <USBD_GetEpDesc>
 8009512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009514:	2181      	movs	r1, #129	; 0x81
 8009516:	4813      	ldr	r0, [pc, #76]	; (8009564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009518:	f000 fc73 	bl	8009e02 <USBD_GetEpDesc>
 800951c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2210      	movs	r2, #16
 8009528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d006      	beq.n	800953e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2200      	movs	r2, #0
 8009534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009538:	711a      	strb	r2, [r3, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d006      	beq.n	8009552 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800954c:	711a      	strb	r2, [r3, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2243      	movs	r2, #67	; 0x43
 8009556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009558:	4b02      	ldr	r3, [pc, #8]	; (8009564 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20000058 	.word	0x20000058

08009568 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009570:	2182      	movs	r1, #130	; 0x82
 8009572:	4818      	ldr	r0, [pc, #96]	; (80095d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009574:	f000 fc45 	bl	8009e02 <USBD_GetEpDesc>
 8009578:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800957a:	2101      	movs	r1, #1
 800957c:	4815      	ldr	r0, [pc, #84]	; (80095d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800957e:	f000 fc40 	bl	8009e02 <USBD_GetEpDesc>
 8009582:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009584:	2181      	movs	r1, #129	; 0x81
 8009586:	4813      	ldr	r0, [pc, #76]	; (80095d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009588:	f000 fc3b 	bl	8009e02 <USBD_GetEpDesc>
 800958c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2210      	movs	r2, #16
 8009598:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d006      	beq.n	80095ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	2200      	movs	r2, #0
 80095a4:	711a      	strb	r2, [r3, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f042 0202 	orr.w	r2, r2, #2
 80095ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d006      	beq.n	80095c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	711a      	strb	r2, [r3, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f042 0202 	orr.w	r2, r2, #2
 80095c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2243      	movs	r2, #67	; 0x43
 80095c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095c8:	4b02      	ldr	r3, [pc, #8]	; (80095d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000058 	.word	0x20000058

080095d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095e0:	2182      	movs	r1, #130	; 0x82
 80095e2:	4818      	ldr	r0, [pc, #96]	; (8009644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80095e4:	f000 fc0d 	bl	8009e02 <USBD_GetEpDesc>
 80095e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095ea:	2101      	movs	r1, #1
 80095ec:	4815      	ldr	r0, [pc, #84]	; (8009644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80095ee:	f000 fc08 	bl	8009e02 <USBD_GetEpDesc>
 80095f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095f4:	2181      	movs	r1, #129	; 0x81
 80095f6:	4813      	ldr	r0, [pc, #76]	; (8009644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80095f8:	f000 fc03 	bl	8009e02 <USBD_GetEpDesc>
 80095fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2210      	movs	r2, #16
 8009608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d006      	beq.n	800961e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	2200      	movs	r2, #0
 8009614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009618:	711a      	strb	r2, [r3, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d006      	beq.n	8009632 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800962c:	711a      	strb	r2, [r3, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2243      	movs	r2, #67	; 0x43
 8009636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000058 	.word	0x20000058

08009648 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	220a      	movs	r2, #10
 8009654:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009656:	4b03      	ldr	r3, [pc, #12]	; (8009664 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	20000014 	.word	0x20000014

08009668 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009678:	2303      	movs	r3, #3
 800967a:	e009      	b.n	8009690 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	33b0      	adds	r3, #176	; 0xb0
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	32b0      	adds	r2, #176	; 0xb0
 80096b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80096be:	2303      	movs	r3, #3
 80096c0:	e008      	b.n	80096d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	371c      	adds	r7, #28
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	32b0      	adds	r2, #176	; 0xb0
 80096f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009700:	2303      	movs	r3, #3
 8009702:	e004      	b.n	800970e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
	...

0800971c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	32b0      	adds	r2, #176	; 0xb0
 800972e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009732:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	32b0      	adds	r2, #176	; 0xb0
 800973e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009746:	2303      	movs	r3, #3
 8009748:	e018      	b.n	800977c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	7c1b      	ldrb	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009752:	4b0c      	ldr	r3, [pc, #48]	; (8009784 <USBD_CDC_ReceivePacket+0x68>)
 8009754:	7819      	ldrb	r1, [r3, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800975c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 ff18 	bl	800b596 <USBD_LL_PrepareReceive>
 8009766:	e008      	b.n	800977a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009768:	4b06      	ldr	r3, [pc, #24]	; (8009784 <USBD_CDC_ReceivePacket+0x68>)
 800976a:	7819      	ldrb	r1, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009772:	2340      	movs	r3, #64	; 0x40
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 ff0e 	bl	800b596 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	2000009c 	.word	0x2000009c

08009788 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	4613      	mov	r3, r2
 8009794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e01f      	b.n	80097e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	79fa      	ldrb	r2, [r7, #7]
 80097d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f001 fd71 	bl	800b2bc <USBD_LL_Init>
 80097da:	4603      	mov	r3, r0
 80097dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e025      	b.n	800984c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	32ae      	adds	r2, #174	; 0xae
 8009812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00f      	beq.n	800983c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32ae      	adds	r2, #174	; 0xae
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	f107 020e 	add.w	r2, r7, #14
 8009830:	4610      	mov	r0, r2
 8009832:	4798      	blx	r3
 8009834:	4602      	mov	r2, r0
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 fd8f 	bl	800b380 <USBD_LL_Start>
 8009862:	4603      	mov	r3, r0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009874:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d009      	beq.n	80098b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4611      	mov	r1, r2
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	460b      	mov	r3, r1
 80098c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	4611      	mov	r1, r2
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4798      	blx	r3
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80098e0:	2303      	movs	r3, #3
 80098e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	4618      	mov	r0, r3
 8009902:	f001 f8a6 	bl	800aa52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009914:	461a      	mov	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009922:	f003 031f 	and.w	r3, r3, #31
 8009926:	2b02      	cmp	r3, #2
 8009928:	d01a      	beq.n	8009960 <USBD_LL_SetupStage+0x72>
 800992a:	2b02      	cmp	r3, #2
 800992c:	d822      	bhi.n	8009974 <USBD_LL_SetupStage+0x86>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <USBD_LL_SetupStage+0x4a>
 8009932:	2b01      	cmp	r3, #1
 8009934:	d00a      	beq.n	800994c <USBD_LL_SetupStage+0x5e>
 8009936:	e01d      	b.n	8009974 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fad3 	bl	8009eec <USBD_StdDevReq>
 8009946:	4603      	mov	r3, r0
 8009948:	73fb      	strb	r3, [r7, #15]
      break;
 800994a:	e020      	b.n	800998e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fb3b 	bl	8009fd0 <USBD_StdItfReq>
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]
      break;
 800995e:	e016      	b.n	800998e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fb9d 	bl	800a0a8 <USBD_StdEPReq>
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
      break;
 8009972:	e00c      	b.n	800998e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800997a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800997e:	b2db      	uxtb	r3, r3
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 fd5c 	bl	800b440 <USBD_LL_StallEP>
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]
      break;
 800998c:	bf00      	nop
  }

  return ret;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	460b      	mov	r3, r1
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80099aa:	7afb      	ldrb	r3, [r7, #11]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d16e      	bne.n	8009a8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80099b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099be:	2b03      	cmp	r3, #3
 80099c0:	f040 8098 	bne.w	8009af4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d913      	bls.n	80099f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	1ad2      	subs	r2, r2, r3
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	bf28      	it	cs
 80099ea:	4613      	movcs	r3, r2
 80099ec:	461a      	mov	r2, r3
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f001 f922 	bl	800ac3a <USBD_CtlContinueRx>
 80099f6:	e07d      	b.n	8009af4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80099fe:	f003 031f 	and.w	r3, r3, #31
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d014      	beq.n	8009a30 <USBD_LL_DataOutStage+0x98>
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d81d      	bhi.n	8009a46 <USBD_LL_DataOutStage+0xae>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <USBD_LL_DataOutStage+0x7c>
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d003      	beq.n	8009a1a <USBD_LL_DataOutStage+0x82>
 8009a12:	e018      	b.n	8009a46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	75bb      	strb	r3, [r7, #22]
            break;
 8009a18:	e018      	b.n	8009a4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	4619      	mov	r1, r3
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 f9d2 	bl	8009dce <USBD_CoreFindIF>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	75bb      	strb	r3, [r7, #22]
            break;
 8009a2e:	e00d      	b.n	8009a4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	4619      	mov	r1, r3
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 f9d4 	bl	8009de8 <USBD_CoreFindEP>
 8009a40:	4603      	mov	r3, r0
 8009a42:	75bb      	strb	r3, [r7, #22]
            break;
 8009a44:	e002      	b.n	8009a4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75bb      	strb	r3, [r7, #22]
            break;
 8009a4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009a4c:	7dbb      	ldrb	r3, [r7, #22]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d119      	bne.n	8009a86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d113      	bne.n	8009a86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009a5e:	7dba      	ldrb	r2, [r7, #22]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	32ae      	adds	r2, #174	; 0xae
 8009a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009a6e:	7dba      	ldrb	r2, [r7, #22]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009a76:	7dba      	ldrb	r2, [r7, #22]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	32ae      	adds	r2, #174	; 0xae
 8009a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f001 f8e8 	bl	800ac5c <USBD_CtlSendStatus>
 8009a8c:	e032      	b.n	8009af4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009a8e:	7afb      	ldrb	r3, [r7, #11]
 8009a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	4619      	mov	r1, r3
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f9a5 	bl	8009de8 <USBD_CoreFindEP>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aa2:	7dbb      	ldrb	r3, [r7, #22]
 8009aa4:	2bff      	cmp	r3, #255	; 0xff
 8009aa6:	d025      	beq.n	8009af4 <USBD_LL_DataOutStage+0x15c>
 8009aa8:	7dbb      	ldrb	r3, [r7, #22]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d122      	bne.n	8009af4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d117      	bne.n	8009aea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009aba:	7dba      	ldrb	r2, [r7, #22]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	32ae      	adds	r2, #174	; 0xae
 8009ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00f      	beq.n	8009aea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009aca:	7dba      	ldrb	r2, [r7, #22]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009ad2:	7dba      	ldrb	r2, [r7, #22]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	32ae      	adds	r2, #174	; 0xae
 8009ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	7afa      	ldrb	r2, [r7, #11]
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	4798      	blx	r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009af0:	7dfb      	ldrb	r3, [r7, #23]
 8009af2:	e000      	b.n	8009af6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b086      	sub	sp, #24
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	460b      	mov	r3, r1
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d16f      	bne.n	8009bf2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3314      	adds	r3, #20
 8009b16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d15a      	bne.n	8009bd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d914      	bls.n	8009b58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	1ad2      	subs	r2, r2, r3
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f001 f84a 	bl	800abde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2100      	movs	r1, #0
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f001 fd20 	bl	800b596 <USBD_LL_PrepareReceive>
 8009b56:	e03f      	b.n	8009bd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	68da      	ldr	r2, [r3, #12]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d11c      	bne.n	8009b9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d316      	bcc.n	8009b9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d20f      	bcs.n	8009b9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2100      	movs	r1, #0
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f001 f82b 	bl	800abde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b90:	2300      	movs	r3, #0
 8009b92:	2200      	movs	r2, #0
 8009b94:	2100      	movs	r1, #0
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f001 fcfd 	bl	800b596 <USBD_LL_PrepareReceive>
 8009b9c:	e01c      	b.n	8009bd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d10f      	bne.n	8009bca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f001 fc37 	bl	800b440 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f001 f855 	bl	800ac82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d03a      	beq.n	8009c58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff fe42 	bl	800986c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009bf0:	e032      	b.n	8009c58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009bf2:	7afb      	ldrb	r3, [r7, #11]
 8009bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f8f3 	bl	8009de8 <USBD_CoreFindEP>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	2bff      	cmp	r3, #255	; 0xff
 8009c0a:	d025      	beq.n	8009c58 <USBD_LL_DataInStage+0x15a>
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d122      	bne.n	8009c58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d11c      	bne.n	8009c58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009c1e:	7dfa      	ldrb	r2, [r7, #23]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	32ae      	adds	r2, #174	; 0xae
 8009c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d014      	beq.n	8009c58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009c2e:	7dfa      	ldrb	r2, [r7, #23]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009c36:	7dfa      	ldrb	r2, [r7, #23]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	32ae      	adds	r2, #174	; 0xae
 8009c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	7afa      	ldrb	r2, [r7, #11]
 8009c44:	4611      	mov	r1, r2
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	4798      	blx	r3
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009c4e:	7dbb      	ldrb	r3, [r7, #22]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009c54:	7dbb      	ldrb	r3, [r7, #22]
 8009c56:	e000      	b.n	8009c5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d014      	beq.n	8009cc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00e      	beq.n	8009cc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6852      	ldr	r2, [r2, #4]
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	4611      	mov	r1, r2
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4798      	blx	r3
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cc8:	2340      	movs	r3, #64	; 0x40
 8009cca:	2200      	movs	r2, #0
 8009ccc:	2100      	movs	r1, #0
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 fb71 	bl	800b3b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2240      	movs	r2, #64	; 0x40
 8009ce0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ce4:	2340      	movs	r3, #64	; 0x40
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2180      	movs	r1, #128	; 0x80
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 fb63 	bl	800b3b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2240      	movs	r2, #64	; 0x40
 8009cfa:	621a      	str	r2, [r3, #32]

  return ret;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d006      	beq.n	8009d48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2204      	movs	r2, #4
 8009d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d106      	bne.n	8009d80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d110      	bne.n	8009dc4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d005      	beq.n	8009dc4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009dda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009df4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d920      	bls.n	8009e6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e32:	e013      	b.n	8009e5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e34:	f107 030a 	add.w	r3, r7, #10
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6978      	ldr	r0, [r7, #20]
 8009e3c:	f000 f81b 	bl	8009e76 <USBD_GetNextDesc>
 8009e40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b05      	cmp	r3, #5
 8009e48:	d108      	bne.n	8009e5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	789b      	ldrb	r3, [r3, #2]
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d008      	beq.n	8009e6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	885b      	ldrh	r3, [r3, #2]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	897b      	ldrh	r3, [r7, #10]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d8e5      	bhi.n	8009e34 <USBD_GetEpDesc+0x32>
 8009e68:	e000      	b.n	8009e6c <USBD_GetEpDesc+0x6a>
          break;
 8009e6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e6c:	693b      	ldr	r3, [r7, #16]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	881a      	ldrh	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4413      	add	r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ece:	8a3b      	ldrh	r3, [r7, #16]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b21a      	sxth	r2, r3
 8009ed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	b21b      	sxth	r3, r3
 8009edc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ede:	89fb      	ldrh	r3, [r7, #14]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f02:	2b40      	cmp	r3, #64	; 0x40
 8009f04:	d005      	beq.n	8009f12 <USBD_StdDevReq+0x26>
 8009f06:	2b40      	cmp	r3, #64	; 0x40
 8009f08:	d857      	bhi.n	8009fba <USBD_StdDevReq+0xce>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00f      	beq.n	8009f2e <USBD_StdDevReq+0x42>
 8009f0e:	2b20      	cmp	r3, #32
 8009f10:	d153      	bne.n	8009fba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	32ae      	adds	r2, #174	; 0xae
 8009f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2c:	e04a      	b.n	8009fc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	785b      	ldrb	r3, [r3, #1]
 8009f32:	2b09      	cmp	r3, #9
 8009f34:	d83b      	bhi.n	8009fae <USBD_StdDevReq+0xc2>
 8009f36:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <USBD_StdDevReq+0x50>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009fa5 	.word	0x08009fa5
 8009f44:	08009faf 	.word	0x08009faf
 8009f48:	08009f9b 	.word	0x08009f9b
 8009f4c:	08009faf 	.word	0x08009faf
 8009f50:	08009f6f 	.word	0x08009f6f
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009faf 	.word	0x08009faf
 8009f5c:	08009f87 	.word	0x08009f87
 8009f60:	08009f79 	.word	0x08009f79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa3c 	bl	800a3e4 <USBD_GetDescriptor>
          break;
 8009f6c:	e024      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fbcb 	bl	800a70c <USBD_SetAddress>
          break;
 8009f76:	e01f      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fc0a 	bl	800a794 <USBD_SetConfig>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
          break;
 8009f84:	e018      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fcad 	bl	800a8e8 <USBD_GetConfig>
          break;
 8009f8e:	e013      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fcde 	bl	800a954 <USBD_GetStatus>
          break;
 8009f98:	e00e      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fd0d 	bl	800a9bc <USBD_SetFeature>
          break;
 8009fa2:	e009      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fd31 	bl	800aa0e <USBD_ClrFeature>
          break;
 8009fac:	e004      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fd88 	bl	800aac6 <USBD_CtlError>
          break;
 8009fb6:	bf00      	nop
      }
      break;
 8009fb8:	e004      	b.n	8009fc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fd82 	bl	800aac6 <USBD_CtlError>
      break;
 8009fc2:	bf00      	nop
  }

  return ret;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop

08009fd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fe6:	2b40      	cmp	r3, #64	; 0x40
 8009fe8:	d005      	beq.n	8009ff6 <USBD_StdItfReq+0x26>
 8009fea:	2b40      	cmp	r3, #64	; 0x40
 8009fec:	d852      	bhi.n	800a094 <USBD_StdItfReq+0xc4>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <USBD_StdItfReq+0x26>
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d14e      	bne.n	800a094 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	2b02      	cmp	r3, #2
 800a002:	d840      	bhi.n	800a086 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	889b      	ldrh	r3, [r3, #4]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d836      	bhi.n	800a07c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	889b      	ldrh	r3, [r3, #4]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff fed9 	bl	8009dce <USBD_CoreFindIF>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2bff      	cmp	r3, #255	; 0xff
 800a024:	d01d      	beq.n	800a062 <USBD_StdItfReq+0x92>
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d11a      	bne.n	800a062 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a02c:	7bba      	ldrb	r2, [r7, #14]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32ae      	adds	r2, #174	; 0xae
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00f      	beq.n	800a05c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a03c:	7bba      	ldrb	r2, [r7, #14]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a044:	7bba      	ldrb	r2, [r7, #14]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	32ae      	adds	r2, #174	; 0xae
 800a04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	4798      	blx	r3
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a05a:	e004      	b.n	800a066 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a05c:	2303      	movs	r3, #3
 800a05e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a060:	e001      	b.n	800a066 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a062:	2303      	movs	r3, #3
 800a064:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88db      	ldrh	r3, [r3, #6]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d110      	bne.n	800a090 <USBD_StdItfReq+0xc0>
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10d      	bne.n	800a090 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fdf1 	bl	800ac5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a07a:	e009      	b.n	800a090 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fd21 	bl	800aac6 <USBD_CtlError>
          break;
 800a084:	e004      	b.n	800a090 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fd1c 	bl	800aac6 <USBD_CtlError>
          break;
 800a08e:	e000      	b.n	800a092 <USBD_StdItfReq+0xc2>
          break;
 800a090:	bf00      	nop
      }
      break;
 800a092:	e004      	b.n	800a09e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fd15 	bl	800aac6 <USBD_CtlError>
      break;
 800a09c:	bf00      	nop
  }

  return ret;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	889b      	ldrh	r3, [r3, #4]
 800a0ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0c4:	2b40      	cmp	r3, #64	; 0x40
 800a0c6:	d007      	beq.n	800a0d8 <USBD_StdEPReq+0x30>
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	f200 817f 	bhi.w	800a3cc <USBD_StdEPReq+0x324>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d02a      	beq.n	800a128 <USBD_StdEPReq+0x80>
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	f040 817a 	bne.w	800a3cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff fe83 	bl	8009de8 <USBD_CoreFindEP>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0e6:	7b7b      	ldrb	r3, [r7, #13]
 800a0e8:	2bff      	cmp	r3, #255	; 0xff
 800a0ea:	f000 8174 	beq.w	800a3d6 <USBD_StdEPReq+0x32e>
 800a0ee:	7b7b      	ldrb	r3, [r7, #13]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f040 8170 	bne.w	800a3d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a0f6:	7b7a      	ldrb	r2, [r7, #13]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a0fe:	7b7a      	ldrb	r2, [r7, #13]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32ae      	adds	r2, #174	; 0xae
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 8163 	beq.w	800a3d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a110:	7b7a      	ldrb	r2, [r7, #13]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	32ae      	adds	r2, #174	; 0xae
 800a116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a126:	e156      	b.n	800a3d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	785b      	ldrb	r3, [r3, #1]
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d008      	beq.n	800a142 <USBD_StdEPReq+0x9a>
 800a130:	2b03      	cmp	r3, #3
 800a132:	f300 8145 	bgt.w	800a3c0 <USBD_StdEPReq+0x318>
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 809b 	beq.w	800a272 <USBD_StdEPReq+0x1ca>
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d03c      	beq.n	800a1ba <USBD_StdEPReq+0x112>
 800a140:	e13e      	b.n	800a3c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d002      	beq.n	800a154 <USBD_StdEPReq+0xac>
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d016      	beq.n	800a180 <USBD_StdEPReq+0xd8>
 800a152:	e02c      	b.n	800a1ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00d      	beq.n	800a176 <USBD_StdEPReq+0xce>
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b80      	cmp	r3, #128	; 0x80
 800a15e:	d00a      	beq.n	800a176 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 f96b 	bl	800b440 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a16a:	2180      	movs	r1, #128	; 0x80
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f967 	bl	800b440 <USBD_LL_StallEP>
 800a172:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a174:	e020      	b.n	800a1b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fca4 	bl	800aac6 <USBD_CtlError>
              break;
 800a17e:	e01b      	b.n	800a1b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	885b      	ldrh	r3, [r3, #2]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10e      	bne.n	800a1a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <USBD_StdEPReq+0xfe>
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	2b80      	cmp	r3, #128	; 0x80
 800a192:	d008      	beq.n	800a1a6 <USBD_StdEPReq+0xfe>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	88db      	ldrh	r3, [r3, #6]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f001 f94d 	bl	800b440 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fd58 	bl	800ac5c <USBD_CtlSendStatus>

              break;
 800a1ac:	e004      	b.n	800a1b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fc88 	bl	800aac6 <USBD_CtlError>
              break;
 800a1b6:	bf00      	nop
          }
          break;
 800a1b8:	e107      	b.n	800a3ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d002      	beq.n	800a1cc <USBD_StdEPReq+0x124>
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d016      	beq.n	800a1f8 <USBD_StdEPReq+0x150>
 800a1ca:	e04b      	b.n	800a264 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <USBD_StdEPReq+0x146>
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	2b80      	cmp	r3, #128	; 0x80
 800a1d6:	d00a      	beq.n	800a1ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 f92f 	bl	800b440 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1e2:	2180      	movs	r1, #128	; 0x80
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f92b 	bl	800b440 <USBD_LL_StallEP>
 800a1ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1ec:	e040      	b.n	800a270 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fc68 	bl	800aac6 <USBD_CtlError>
              break;
 800a1f6:	e03b      	b.n	800a270 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	885b      	ldrh	r3, [r3, #2]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d136      	bne.n	800a26e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 f935 	bl	800b47e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fd21 	bl	800ac5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff fde2 	bl	8009de8 <USBD_CoreFindEP>
 800a224:	4603      	mov	r3, r0
 800a226:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a228:	7b7b      	ldrb	r3, [r7, #13]
 800a22a:	2bff      	cmp	r3, #255	; 0xff
 800a22c:	d01f      	beq.n	800a26e <USBD_StdEPReq+0x1c6>
 800a22e:	7b7b      	ldrb	r3, [r7, #13]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d11c      	bne.n	800a26e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a234:	7b7a      	ldrb	r2, [r7, #13]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a23c:	7b7a      	ldrb	r2, [r7, #13]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32ae      	adds	r2, #174	; 0xae
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d010      	beq.n	800a26e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a24c:	7b7a      	ldrb	r2, [r7, #13]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32ae      	adds	r2, #174	; 0xae
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a262:	e004      	b.n	800a26e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fc2d 	bl	800aac6 <USBD_CtlError>
              break;
 800a26c:	e000      	b.n	800a270 <USBD_StdEPReq+0x1c8>
              break;
 800a26e:	bf00      	nop
          }
          break;
 800a270:	e0ab      	b.n	800a3ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d002      	beq.n	800a284 <USBD_StdEPReq+0x1dc>
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d032      	beq.n	800a2e8 <USBD_StdEPReq+0x240>
 800a282:	e097      	b.n	800a3b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <USBD_StdEPReq+0x1f2>
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
 800a28c:	2b80      	cmp	r3, #128	; 0x80
 800a28e:	d004      	beq.n	800a29a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fc17 	bl	800aac6 <USBD_CtlError>
                break;
 800a298:	e091      	b.n	800a3be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a29a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	da0b      	bge.n	800a2ba <USBD_StdEPReq+0x212>
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	e00b      	b.n	800a2d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2ba:	7bbb      	ldrb	r3, [r7, #14]
 800a2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fc61 	bl	800aba8 <USBD_CtlSendData>
              break;
 800a2e6:	e06a      	b.n	800a3be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	da11      	bge.n	800a314 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
 800a2f2:	f003 020f 	and.w	r2, r3, #15
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	440b      	add	r3, r1
 800a302:	3324      	adds	r3, #36	; 0x24
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d117      	bne.n	800a33a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fbda 	bl	800aac6 <USBD_CtlError>
                  break;
 800a312:	e054      	b.n	800a3be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	f003 020f 	and.w	r2, r3, #15
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d104      	bne.n	800a33a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fbc7 	bl	800aac6 <USBD_CtlError>
                  break;
 800a338:	e041      	b.n	800a3be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	da0b      	bge.n	800a35a <USBD_StdEPReq+0x2b2>
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	3310      	adds	r3, #16
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4413      	add	r3, r2
 800a356:	3304      	adds	r3, #4
 800a358:	e00b      	b.n	800a372 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	3304      	adds	r3, #4
 800a372:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a374:	7bbb      	ldrb	r3, [r7, #14]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <USBD_StdEPReq+0x2d8>
 800a37a:	7bbb      	ldrb	r3, [r7, #14]
 800a37c:	2b80      	cmp	r3, #128	; 0x80
 800a37e:	d103      	bne.n	800a388 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e00e      	b.n	800a3a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 f895 	bl	800b4bc <USBD_LL_IsStallEP>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2201      	movs	r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	e002      	b.n	800a3a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fbfb 	bl	800aba8 <USBD_CtlSendData>
              break;
 800a3b2:	e004      	b.n	800a3be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fb85 	bl	800aac6 <USBD_CtlError>
              break;
 800a3bc:	bf00      	nop
          }
          break;
 800a3be:	e004      	b.n	800a3ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fb7f 	bl	800aac6 <USBD_CtlError>
          break;
 800a3c8:	bf00      	nop
      }
      break;
 800a3ca:	e005      	b.n	800a3d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fb79 	bl	800aac6 <USBD_CtlError>
      break;
 800a3d4:	e000      	b.n	800a3d8 <USBD_StdEPReq+0x330>
      break;
 800a3d6:	bf00      	nop
  }

  return ret;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	0a1b      	lsrs	r3, r3, #8
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	2b0e      	cmp	r3, #14
 800a406:	f200 8152 	bhi.w	800a6ae <USBD_GetDescriptor+0x2ca>
 800a40a:	a201      	add	r2, pc, #4	; (adr r2, 800a410 <USBD_GetDescriptor+0x2c>)
 800a40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a410:	0800a481 	.word	0x0800a481
 800a414:	0800a499 	.word	0x0800a499
 800a418:	0800a4d9 	.word	0x0800a4d9
 800a41c:	0800a6af 	.word	0x0800a6af
 800a420:	0800a6af 	.word	0x0800a6af
 800a424:	0800a64f 	.word	0x0800a64f
 800a428:	0800a67b 	.word	0x0800a67b
 800a42c:	0800a6af 	.word	0x0800a6af
 800a430:	0800a6af 	.word	0x0800a6af
 800a434:	0800a6af 	.word	0x0800a6af
 800a438:	0800a6af 	.word	0x0800a6af
 800a43c:	0800a6af 	.word	0x0800a6af
 800a440:	0800a6af 	.word	0x0800a6af
 800a444:	0800a6af 	.word	0x0800a6af
 800a448:	0800a44d 	.word	0x0800a44d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00b      	beq.n	800a470 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	7c12      	ldrb	r2, [r2, #16]
 800a464:	f107 0108 	add.w	r1, r7, #8
 800a468:	4610      	mov	r0, r2
 800a46a:	4798      	blx	r3
 800a46c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a46e:	e126      	b.n	800a6be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fb27 	bl	800aac6 <USBD_CtlError>
        err++;
 800a478:	7afb      	ldrb	r3, [r7, #11]
 800a47a:	3301      	adds	r3, #1
 800a47c:	72fb      	strb	r3, [r7, #11]
      break;
 800a47e:	e11e      	b.n	800a6be <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	7c12      	ldrb	r2, [r2, #16]
 800a48c:	f107 0108 	add.w	r1, r7, #8
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
 800a494:	60f8      	str	r0, [r7, #12]
      break;
 800a496:	e112      	b.n	800a6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	7c1b      	ldrb	r3, [r3, #16]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10d      	bne.n	800a4bc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a8:	f107 0208 	add.w	r2, r7, #8
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	4798      	blx	r3
 800a4b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4ba:	e100      	b.n	800a6be <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	f107 0208 	add.w	r2, r7, #8
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	4798      	blx	r3
 800a4cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	701a      	strb	r2, [r3, #0]
      break;
 800a4d6:	e0f2      	b.n	800a6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	885b      	ldrh	r3, [r3, #2]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	f200 80ac 	bhi.w	800a63c <USBD_GetDescriptor+0x258>
 800a4e4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <USBD_GetDescriptor+0x108>)
 800a4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ea:	bf00      	nop
 800a4ec:	0800a505 	.word	0x0800a505
 800a4f0:	0800a539 	.word	0x0800a539
 800a4f4:	0800a56d 	.word	0x0800a56d
 800a4f8:	0800a5a1 	.word	0x0800a5a1
 800a4fc:	0800a5d5 	.word	0x0800a5d5
 800a500:	0800a609 	.word	0x0800a609
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	7c12      	ldrb	r2, [r2, #16]
 800a51c:	f107 0108 	add.w	r1, r7, #8
 800a520:	4610      	mov	r0, r2
 800a522:	4798      	blx	r3
 800a524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a526:	e091      	b.n	800a64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 facb 	bl	800aac6 <USBD_CtlError>
            err++;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	3301      	adds	r3, #1
 800a534:	72fb      	strb	r3, [r7, #11]
          break;
 800a536:	e089      	b.n	800a64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	7c12      	ldrb	r2, [r2, #16]
 800a550:	f107 0108 	add.w	r1, r7, #8
 800a554:	4610      	mov	r0, r2
 800a556:	4798      	blx	r3
 800a558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55a:	e077      	b.n	800a64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fab1 	bl	800aac6 <USBD_CtlError>
            err++;
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	3301      	adds	r3, #1
 800a568:	72fb      	strb	r3, [r7, #11]
          break;
 800a56a:	e06f      	b.n	800a64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	7c12      	ldrb	r2, [r2, #16]
 800a584:	f107 0108 	add.w	r1, r7, #8
 800a588:	4610      	mov	r0, r2
 800a58a:	4798      	blx	r3
 800a58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58e:	e05d      	b.n	800a64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa97 	bl	800aac6 <USBD_CtlError>
            err++;
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	3301      	adds	r3, #1
 800a59c:	72fb      	strb	r3, [r7, #11]
          break;
 800a59e:	e055      	b.n	800a64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7c12      	ldrb	r2, [r2, #16]
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c2:	e043      	b.n	800a64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa7d 	bl	800aac6 <USBD_CtlError>
            err++;
 800a5cc:	7afb      	ldrb	r3, [r7, #11]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d2:	e03b      	b.n	800a64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	7c12      	ldrb	r2, [r2, #16]
 800a5ec:	f107 0108 	add.w	r1, r7, #8
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4798      	blx	r3
 800a5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5f6:	e029      	b.n	800a64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fa63 	bl	800aac6 <USBD_CtlError>
            err++;
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	3301      	adds	r3, #1
 800a604:	72fb      	strb	r3, [r7, #11]
          break;
 800a606:	e021      	b.n	800a64c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00b      	beq.n	800a62c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	7c12      	ldrb	r2, [r2, #16]
 800a620:	f107 0108 	add.w	r1, r7, #8
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
 800a628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62a:	e00f      	b.n	800a64c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fa49 	bl	800aac6 <USBD_CtlError>
            err++;
 800a634:	7afb      	ldrb	r3, [r7, #11]
 800a636:	3301      	adds	r3, #1
 800a638:	72fb      	strb	r3, [r7, #11]
          break;
 800a63a:	e007      	b.n	800a64c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fa41 	bl	800aac6 <USBD_CtlError>
          err++;
 800a644:	7afb      	ldrb	r3, [r7, #11]
 800a646:	3301      	adds	r3, #1
 800a648:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a64a:	bf00      	nop
      }
      break;
 800a64c:	e037      	b.n	800a6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	7c1b      	ldrb	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d109      	bne.n	800a66a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65e:	f107 0208 	add.w	r2, r7, #8
 800a662:	4610      	mov	r0, r2
 800a664:	4798      	blx	r3
 800a666:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a668:	e029      	b.n	800a6be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa2a 	bl	800aac6 <USBD_CtlError>
        err++;
 800a672:	7afb      	ldrb	r3, [r7, #11]
 800a674:	3301      	adds	r3, #1
 800a676:	72fb      	strb	r3, [r7, #11]
      break;
 800a678:	e021      	b.n	800a6be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	7c1b      	ldrb	r3, [r3, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10d      	bne.n	800a69e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68a:	f107 0208 	add.w	r2, r7, #8
 800a68e:	4610      	mov	r0, r2
 800a690:	4798      	blx	r3
 800a692:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3301      	adds	r3, #1
 800a698:	2207      	movs	r2, #7
 800a69a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a69c:	e00f      	b.n	800a6be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fa10 	bl	800aac6 <USBD_CtlError>
        err++;
 800a6a6:	7afb      	ldrb	r3, [r7, #11]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a6ac:	e007      	b.n	800a6be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fa08 	bl	800aac6 <USBD_CtlError>
      err++;
 800a6b6:	7afb      	ldrb	r3, [r7, #11]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a6bc:	bf00      	nop
  }

  if (err != 0U)
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d11e      	bne.n	800a702 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	88db      	ldrh	r3, [r3, #6]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d016      	beq.n	800a6fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a6cc:	893b      	ldrh	r3, [r7, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00e      	beq.n	800a6f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	88da      	ldrh	r2, [r3, #6]
 800a6d6:	893b      	ldrh	r3, [r7, #8]
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	bf28      	it	cs
 800a6dc:	4613      	movcs	r3, r2
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6e2:	893b      	ldrh	r3, [r7, #8]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fa5d 	bl	800aba8 <USBD_CtlSendData>
 800a6ee:	e009      	b.n	800a704 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f9e7 	bl	800aac6 <USBD_CtlError>
 800a6f8:	e004      	b.n	800a704 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 faae 	bl	800ac5c <USBD_CtlSendStatus>
 800a700:	e000      	b.n	800a704 <USBD_GetDescriptor+0x320>
    return;
 800a702:	bf00      	nop
  }
}
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop

0800a70c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	889b      	ldrh	r3, [r3, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d131      	bne.n	800a782 <USBD_SetAddress+0x76>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	88db      	ldrh	r3, [r3, #6]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d12d      	bne.n	800a782 <USBD_SetAddress+0x76>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	885b      	ldrh	r3, [r3, #2]
 800a72a:	2b7f      	cmp	r3, #127	; 0x7f
 800a72c:	d829      	bhi.n	800a782 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	885b      	ldrh	r3, [r3, #2]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b03      	cmp	r3, #3
 800a744:	d104      	bne.n	800a750 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9bc 	bl	800aac6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74e:	e01d      	b.n	800a78c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7bfa      	ldrb	r2, [r7, #15]
 800a754:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 feda 	bl	800b516 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fa7a 	bl	800ac5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2202      	movs	r2, #2
 800a772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a776:	e009      	b.n	800a78c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a780:	e004      	b.n	800a78c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f99e 	bl	800aac6 <USBD_CtlError>
  }
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	885b      	ldrh	r3, [r3, #2]
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	4b4e      	ldr	r3, [pc, #312]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a7aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7ac:	4b4d      	ldr	r3, [pc, #308]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d905      	bls.n	800a7c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f985 	bl	800aac6 <USBD_CtlError>
    return USBD_FAIL;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e08c      	b.n	800a8da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d002      	beq.n	800a7d2 <USBD_SetConfig+0x3e>
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d029      	beq.n	800a824 <USBD_SetConfig+0x90>
 800a7d0:	e075      	b.n	800a8be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7d2:	4b44      	ldr	r3, [pc, #272]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d020      	beq.n	800a81c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a7da:	4b42      	ldr	r3, [pc, #264]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7e4:	4b3f      	ldr	r3, [pc, #252]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff f849 	bl	8009882 <USBD_SetClassConfig>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d008      	beq.n	800a80c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f962 	bl	800aac6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a80a:	e065      	b.n	800a8d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fa25 	bl	800ac5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2203      	movs	r2, #3
 800a816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a81a:	e05d      	b.n	800a8d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fa1d 	bl	800ac5c <USBD_CtlSendStatus>
      break;
 800a822:	e059      	b.n	800a8d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a824:	4b2f      	ldr	r3, [pc, #188]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d112      	bne.n	800a852 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a834:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a83e:	4b29      	ldr	r3, [pc, #164]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff f838 	bl	80098ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa06 	bl	800ac5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a850:	e042      	b.n	800a8d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a852:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d02a      	beq.n	800a8b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7ff f826 	bl	80098ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a86e:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a878:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7fe ffff 	bl	8009882 <USBD_SetClassConfig>
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00f      	beq.n	800a8ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f918 	bl	800aac6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff f80b 	bl	80098ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a8ac:	e014      	b.n	800a8d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f9d4 	bl	800ac5c <USBD_CtlSendStatus>
      break;
 800a8b4:	e010      	b.n	800a8d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f9d0 	bl	800ac5c <USBD_CtlSendStatus>
      break;
 800a8bc:	e00c      	b.n	800a8d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f900 	bl	800aac6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8c6:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <USBD_SetConfig+0x150>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7fe fff4 	bl	80098ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d6:	bf00      	nop
  }

  return ret;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000e300 	.word	0x2000e300

0800a8e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	88db      	ldrh	r3, [r3, #6]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d004      	beq.n	800a904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f8e2 	bl	800aac6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a902:	e023      	b.n	800a94c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	dc02      	bgt.n	800a916 <USBD_GetConfig+0x2e>
 800a910:	2b00      	cmp	r3, #0
 800a912:	dc03      	bgt.n	800a91c <USBD_GetConfig+0x34>
 800a914:	e015      	b.n	800a942 <USBD_GetConfig+0x5a>
 800a916:	2b03      	cmp	r3, #3
 800a918:	d00b      	beq.n	800a932 <USBD_GetConfig+0x4a>
 800a91a:	e012      	b.n	800a942 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3308      	adds	r3, #8
 800a926:	2201      	movs	r2, #1
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f93c 	bl	800aba8 <USBD_CtlSendData>
        break;
 800a930:	e00c      	b.n	800a94c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3304      	adds	r3, #4
 800a936:	2201      	movs	r2, #1
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f934 	bl	800aba8 <USBD_CtlSendData>
        break;
 800a940:	e004      	b.n	800a94c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f8be 	bl	800aac6 <USBD_CtlError>
        break;
 800a94a:	bf00      	nop
}
 800a94c:	bf00      	nop
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a964:	b2db      	uxtb	r3, r3
 800a966:	3b01      	subs	r3, #1
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d81e      	bhi.n	800a9aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	88db      	ldrh	r3, [r3, #6]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d004      	beq.n	800a97e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f8a5 	bl	800aac6 <USBD_CtlError>
        break;
 800a97c:	e01a      	b.n	800a9b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d005      	beq.n	800a99a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f043 0202 	orr.w	r2, r3, #2
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	330c      	adds	r3, #12
 800a99e:	2202      	movs	r2, #2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f900 	bl	800aba8 <USBD_CtlSendData>
      break;
 800a9a8:	e004      	b.n	800a9b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f88a 	bl	800aac6 <USBD_CtlError>
      break;
 800a9b2:	bf00      	nop
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	885b      	ldrh	r3, [r3, #2]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d107      	bne.n	800a9de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f940 	bl	800ac5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a9dc:	e013      	b.n	800aa06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	885b      	ldrh	r3, [r3, #2]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d10b      	bne.n	800a9fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	889b      	ldrh	r3, [r3, #4]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f930 	bl	800ac5c <USBD_CtlSendStatus>
}
 800a9fc:	e003      	b.n	800aa06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f860 	bl	800aac6 <USBD_CtlError>
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	3b01      	subs	r3, #1
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d80b      	bhi.n	800aa3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	885b      	ldrh	r3, [r3, #2]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d10c      	bne.n	800aa48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f910 	bl	800ac5c <USBD_CtlSendStatus>
      }
      break;
 800aa3c:	e004      	b.n	800aa48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f840 	bl	800aac6 <USBD_CtlError>
      break;
 800aa46:	e000      	b.n	800aa4a <USBD_ClrFeature+0x3c>
      break;
 800aa48:	bf00      	nop
  }
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fa17 	bl	8009eb0 <SWAPBYTE>
 800aa82:	4603      	mov	r3, r0
 800aa84:	461a      	mov	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3301      	adds	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f7ff fa0a 	bl	8009eb0 <SWAPBYTE>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3301      	adds	r3, #1
 800aaae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff f9fd 	bl	8009eb0 <SWAPBYTE>
 800aab6:	4603      	mov	r3, r0
 800aab8:	461a      	mov	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	80da      	strh	r2, [r3, #6]
}
 800aabe:	bf00      	nop
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aad0:	2180      	movs	r1, #128	; 0x80
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fcb4 	bl	800b440 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aad8:	2100      	movs	r1, #0
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fcb0 	bl	800b440 <USBD_LL_StallEP>
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d036      	beq.n	800ab6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ab02:	6938      	ldr	r0, [r7, #16]
 800ab04:	f000 f836 	bl	800ab74 <USBD_GetLen>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	7812      	ldrb	r2, [r2, #0]
 800ab20:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	3301      	adds	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	2203      	movs	r2, #3
 800ab30:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	3301      	adds	r3, #1
 800ab36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab38:	e013      	b.n	800ab62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	4413      	add	r3, r2
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	7812      	ldrb	r2, [r2, #0]
 800ab44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	613b      	str	r3, [r7, #16]
    idx++;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	4413      	add	r3, r2
 800ab58:	2200      	movs	r2, #0
 800ab5a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e7      	bne.n	800ab3a <USBD_GetString+0x52>
 800ab6a:	e000      	b.n	800ab6e <USBD_GetString+0x86>
    return;
 800ab6c:	bf00      	nop
  }
}
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab84:	e005      	b.n	800ab92 <USBD_GetLen+0x1e>
  {
    len++;
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1f5      	bne.n	800ab86 <USBD_GetLen+0x12>
  }

  return len;
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	2100      	movs	r1, #0
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 fcc0 	bl	800b554 <USBD_LL_Transmit>

  return USBD_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	2100      	movs	r1, #0
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fcaf 	bl	800b554 <USBD_LL_Transmit>

  return USBD_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2203      	movs	r2, #3
 800ac10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	2100      	movs	r1, #0
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f000 fcb3 	bl	800b596 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 fca2 	bl	800b596 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2204      	movs	r2, #4
 800ac68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	2200      	movs	r2, #0
 800ac70:	2100      	movs	r1, #0
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fc6e 	bl	800b554 <USBD_LL_Transmit>

  return USBD_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2205      	movs	r2, #5
 800ac8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac92:	2300      	movs	r3, #0
 800ac94:	2200      	movs	r2, #0
 800ac96:	2100      	movs	r1, #0
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fc7c 	bl	800b596 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800acac:	2200      	movs	r2, #0
 800acae:	4912      	ldr	r1, [pc, #72]	; (800acf8 <MX_USB_Device_Init+0x50>)
 800acb0:	4812      	ldr	r0, [pc, #72]	; (800acfc <MX_USB_Device_Init+0x54>)
 800acb2:	f7fe fd69 	bl	8009788 <USBD_Init>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800acbc:	f7f5 fffa 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800acc0:	490f      	ldr	r1, [pc, #60]	; (800ad00 <MX_USB_Device_Init+0x58>)
 800acc2:	480e      	ldr	r0, [pc, #56]	; (800acfc <MX_USB_Device_Init+0x54>)
 800acc4:	f7fe fd90 	bl	80097e8 <USBD_RegisterClass>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800acce:	f7f5 fff1 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800acd2:	490c      	ldr	r1, [pc, #48]	; (800ad04 <MX_USB_Device_Init+0x5c>)
 800acd4:	4809      	ldr	r0, [pc, #36]	; (800acfc <MX_USB_Device_Init+0x54>)
 800acd6:	f7fe fcc7 	bl	8009668 <USBD_CDC_RegisterInterface>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ace0:	f7f5 ffe8 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ace4:	4805      	ldr	r0, [pc, #20]	; (800acfc <MX_USB_Device_Init+0x54>)
 800ace6:	f7fe fdb5 	bl	8009854 <USBD_Start>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800acf0:	f7f5 ffe0 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800acf4:	bf00      	nop
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	200000b4 	.word	0x200000b4
 800acfc:	2000e304 	.word	0x2000e304
 800ad00:	20000020 	.word	0x20000020
 800ad04:	200000a0 	.word	0x200000a0

0800ad08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4905      	ldr	r1, [pc, #20]	; (800ad24 <CDC_Init_FS+0x1c>)
 800ad10:	4805      	ldr	r0, [pc, #20]	; (800ad28 <CDC_Init_FS+0x20>)
 800ad12:	f7fe fcc3 	bl	800969c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad16:	4905      	ldr	r1, [pc, #20]	; (800ad2c <CDC_Init_FS+0x24>)
 800ad18:	4803      	ldr	r0, [pc, #12]	; (800ad28 <CDC_Init_FS+0x20>)
 800ad1a:	f7fe fce1 	bl	80096e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	2000ede0 	.word	0x2000ede0
 800ad28:	2000e304 	.word	0x2000e304
 800ad2c:	2000e5e0 	.word	0x2000e5e0

0800ad30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	6039      	str	r1, [r7, #0]
 800ad4a:	71fb      	strb	r3, [r7, #7]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad50:	79fb      	ldrb	r3, [r7, #7]
 800ad52:	2b23      	cmp	r3, #35	; 0x23
 800ad54:	d84a      	bhi.n	800adec <CDC_Control_FS+0xac>
 800ad56:	a201      	add	r2, pc, #4	; (adr r2, 800ad5c <CDC_Control_FS+0x1c>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800aded 	.word	0x0800aded
 800ad60:	0800aded 	.word	0x0800aded
 800ad64:	0800aded 	.word	0x0800aded
 800ad68:	0800aded 	.word	0x0800aded
 800ad6c:	0800aded 	.word	0x0800aded
 800ad70:	0800aded 	.word	0x0800aded
 800ad74:	0800aded 	.word	0x0800aded
 800ad78:	0800aded 	.word	0x0800aded
 800ad7c:	0800aded 	.word	0x0800aded
 800ad80:	0800aded 	.word	0x0800aded
 800ad84:	0800aded 	.word	0x0800aded
 800ad88:	0800aded 	.word	0x0800aded
 800ad8c:	0800aded 	.word	0x0800aded
 800ad90:	0800aded 	.word	0x0800aded
 800ad94:	0800aded 	.word	0x0800aded
 800ad98:	0800aded 	.word	0x0800aded
 800ad9c:	0800aded 	.word	0x0800aded
 800ada0:	0800aded 	.word	0x0800aded
 800ada4:	0800aded 	.word	0x0800aded
 800ada8:	0800aded 	.word	0x0800aded
 800adac:	0800aded 	.word	0x0800aded
 800adb0:	0800aded 	.word	0x0800aded
 800adb4:	0800aded 	.word	0x0800aded
 800adb8:	0800aded 	.word	0x0800aded
 800adbc:	0800aded 	.word	0x0800aded
 800adc0:	0800aded 	.word	0x0800aded
 800adc4:	0800aded 	.word	0x0800aded
 800adc8:	0800aded 	.word	0x0800aded
 800adcc:	0800aded 	.word	0x0800aded
 800add0:	0800aded 	.word	0x0800aded
 800add4:	0800aded 	.word	0x0800aded
 800add8:	0800aded 	.word	0x0800aded
 800addc:	0800aded 	.word	0x0800aded
 800ade0:	0800aded 	.word	0x0800aded
 800ade4:	0800aded 	.word	0x0800aded
 800ade8:	0800aded 	.word	0x0800aded
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800adec:	bf00      	nop
  }

  return (USBD_OK);
 800adee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	4805      	ldr	r0, [pc, #20]	; (800ae20 <CDC_Receive_FS+0x24>)
 800ae0a:	f7fe fc69 	bl	80096e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae0e:	4804      	ldr	r0, [pc, #16]	; (800ae20 <CDC_Receive_FS+0x24>)
 800ae10:	f7fe fc84 	bl	800971c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ae14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	2000e304 	.word	0x2000e304

0800ae24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ae36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
	...

0800ae48 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	6039      	str	r1, [r7, #0]
 800ae52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2212      	movs	r2, #18
 800ae58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ae5a:	4b03      	ldr	r3, [pc, #12]	; (800ae68 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	200000d4 	.word	0x200000d4

0800ae6c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	2204      	movs	r2, #4
 800ae7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	200000e8 	.word	0x200000e8

0800ae90 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d105      	bne.n	800aeae <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	4907      	ldr	r1, [pc, #28]	; (800aec4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800aea6:	4808      	ldr	r0, [pc, #32]	; (800aec8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aea8:	f7ff fe1e 	bl	800aae8 <USBD_GetString>
 800aeac:	e004      	b.n	800aeb8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	4904      	ldr	r1, [pc, #16]	; (800aec4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800aeb2:	4805      	ldr	r0, [pc, #20]	; (800aec8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aeb4:	f7ff fe18 	bl	800aae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aeb8:	4b02      	ldr	r3, [pc, #8]	; (800aec4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	2000f5e0 	.word	0x2000f5e0
 800aec8:	080173a4 	.word	0x080173a4

0800aecc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	6039      	str	r1, [r7, #0]
 800aed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	4904      	ldr	r1, [pc, #16]	; (800aeec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800aedc:	4804      	ldr	r0, [pc, #16]	; (800aef0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800aede:	f7ff fe03 	bl	800aae8 <USBD_GetString>
  return USBD_StrDesc;
 800aee2:	4b02      	ldr	r3, [pc, #8]	; (800aeec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	2000f5e0 	.word	0x2000f5e0
 800aef0:	080173bc 	.word	0x080173bc

0800aef4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	6039      	str	r1, [r7, #0]
 800aefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	221a      	movs	r2, #26
 800af04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af06:	f000 f843 	bl	800af90 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800af0a:	4b02      	ldr	r3, [pc, #8]	; (800af14 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	200000ec 	.word	0x200000ec

0800af18 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	4907      	ldr	r1, [pc, #28]	; (800af4c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800af2e:	4808      	ldr	r0, [pc, #32]	; (800af50 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800af30:	f7ff fdda 	bl	800aae8 <USBD_GetString>
 800af34:	e004      	b.n	800af40 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	4904      	ldr	r1, [pc, #16]	; (800af4c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800af3a:	4805      	ldr	r0, [pc, #20]	; (800af50 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800af3c:	f7ff fdd4 	bl	800aae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af40:	4b02      	ldr	r3, [pc, #8]	; (800af4c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	2000f5e0 	.word	0x2000f5e0
 800af50:	080173d0 	.word	0x080173d0

0800af54 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af60:	79fb      	ldrb	r3, [r7, #7]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d105      	bne.n	800af72 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	4907      	ldr	r1, [pc, #28]	; (800af88 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800af6a:	4808      	ldr	r0, [pc, #32]	; (800af8c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800af6c:	f7ff fdbc 	bl	800aae8 <USBD_GetString>
 800af70:	e004      	b.n	800af7c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	4904      	ldr	r1, [pc, #16]	; (800af88 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800af76:	4805      	ldr	r0, [pc, #20]	; (800af8c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800af78:	f7ff fdb6 	bl	800aae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af7c:	4b02      	ldr	r3, [pc, #8]	; (800af88 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	2000f5e0 	.word	0x2000f5e0
 800af8c:	080173dc 	.word	0x080173dc

0800af90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af96:	4b0f      	ldr	r3, [pc, #60]	; (800afd4 <Get_SerialNum+0x44>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af9c:	4b0e      	ldr	r3, [pc, #56]	; (800afd8 <Get_SerialNum+0x48>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800afa2:	4b0e      	ldr	r3, [pc, #56]	; (800afdc <Get_SerialNum+0x4c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4413      	add	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800afb6:	2208      	movs	r2, #8
 800afb8:	4909      	ldr	r1, [pc, #36]	; (800afe0 <Get_SerialNum+0x50>)
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f000 f814 	bl	800afe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800afc0:	2204      	movs	r2, #4
 800afc2:	4908      	ldr	r1, [pc, #32]	; (800afe4 <Get_SerialNum+0x54>)
 800afc4:	68b8      	ldr	r0, [r7, #8]
 800afc6:	f000 f80f 	bl	800afe8 <IntToUnicode>
  }
}
 800afca:	bf00      	nop
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	1fff7590 	.word	0x1fff7590
 800afd8:	1fff7594 	.word	0x1fff7594
 800afdc:	1fff7598 	.word	0x1fff7598
 800afe0:	200000ee 	.word	0x200000ee
 800afe4:	200000fe 	.word	0x200000fe

0800afe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800afe8:	b480      	push	{r7}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800affa:	2300      	movs	r3, #0
 800affc:	75fb      	strb	r3, [r7, #23]
 800affe:	e027      	b.n	800b050 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	0f1b      	lsrs	r3, r3, #28
 800b004:	2b09      	cmp	r3, #9
 800b006:	d80b      	bhi.n	800b020 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	0f1b      	lsrs	r3, r3, #28
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	4619      	mov	r1, r3
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	440b      	add	r3, r1
 800b018:	3230      	adds	r2, #48	; 0x30
 800b01a:	b2d2      	uxtb	r2, r2
 800b01c:	701a      	strb	r2, [r3, #0]
 800b01e:	e00a      	b.n	800b036 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	0f1b      	lsrs	r3, r3, #28
 800b024:	b2da      	uxtb	r2, r3
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	4619      	mov	r1, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	440b      	add	r3, r1
 800b030:	3237      	adds	r2, #55	; 0x37
 800b032:	b2d2      	uxtb	r2, r2
 800b034:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	3301      	adds	r3, #1
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	4413      	add	r3, r2
 800b046:	2200      	movs	r2, #0
 800b048:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	3301      	adds	r3, #1
 800b04e:	75fb      	strb	r3, [r7, #23]
 800b050:	7dfa      	ldrb	r2, [r7, #23]
 800b052:	79fb      	ldrb	r3, [r7, #7]
 800b054:	429a      	cmp	r2, r3
 800b056:	d3d3      	bcc.n	800b000 <IntToUnicode+0x18>
  }
}
 800b058:	bf00      	nop
 800b05a:	bf00      	nop
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <LL_AHB2_GRP1_EnableClock>:
{
 800b066:	b480      	push	{r7}
 800b068:	b085      	sub	sp, #20
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b07e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4013      	ands	r3, r2
 800b088:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	bf00      	nop
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <LL_APB1_GRP1_EnableClock>:
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b0a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b0b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
}
 800b0be:	bf00      	nop
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
	...

0800b0cc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b09c      	sub	sp, #112	; 0x70
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	609a      	str	r2, [r3, #8]
 800b0e0:	60da      	str	r2, [r3, #12]
 800b0e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b0e4:	f107 030c 	add.w	r3, r7, #12
 800b0e8:	2250      	movs	r2, #80	; 0x50
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f00a ffeb 	bl	80160c8 <memset>
  if(pcdHandle->Instance==USB)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a1b      	ldr	r2, [pc, #108]	; (800b164 <HAL_PCD_MspInit+0x98>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d12f      	bne.n	800b15c <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b0fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b100:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b102:	2300      	movs	r3, #0
 800b104:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b106:	f107 030c 	add.w	r3, r7, #12
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f9 ffe1 	bl	80050d2 <HAL_RCCEx_PeriphCLKConfig>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b116:	f7f5 fdcd 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b11a:	2001      	movs	r0, #1
 800b11c:	f7ff ffa3 	bl	800b066 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b120:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b124:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b126:	2302      	movs	r3, #2
 800b128:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b12e:	2300      	movs	r3, #0
 800b130:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800b132:	230a      	movs	r3, #10
 800b134:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b136:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b13a:	4619      	mov	r1, r3
 800b13c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b140:	f7f6 fc48 	bl	80019d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b144:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b148:	f7ff ffa6 	bl	800b098 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b14c:	2200      	movs	r2, #0
 800b14e:	2100      	movs	r1, #0
 800b150:	2014      	movs	r0, #20
 800b152:	f7f6 fa4e 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b156:	2014      	movs	r0, #20
 800b158:	f7f6 fa65 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b15c:	bf00      	nop
 800b15e:	3770      	adds	r7, #112	; 0x70
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	40006800 	.word	0x40006800

0800b168 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b17c:	4619      	mov	r1, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	f7fe fbb5 	bl	80098ee <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b19e:	78fa      	ldrb	r2, [r7, #3]
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	440b      	add	r3, r1
 800b1ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	78fb      	ldrb	r3, [r7, #3]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	f7fe fbef 	bl	8009998 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	440b      	add	r3, r1
 800b1e2:	333c      	adds	r3, #60	; 0x3c
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	78fb      	ldrb	r3, [r7, #3]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	f7fe fc88 	bl	8009afe <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b1ee:	bf00      	nop
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b204:	4618      	mov	r0, r3
 800b206:	f7fe fdc2 	bl	8009d8e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b21a:	2301      	movs	r3, #1
 800b21c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	2b02      	cmp	r3, #2
 800b224:	d001      	beq.n	800b22a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b226:	f7f5 fd45 	bl	8000cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b230:	7bfa      	ldrb	r2, [r7, #15]
 800b232:	4611      	mov	r1, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe fd66 	bl	8009d06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b240:	4618      	mov	r0, r3
 800b242:	f7fe fd0e 	bl	8009c62 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b246:	bf00      	nop
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fd61 	bl	8009d26 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d005      	beq.n	800b278 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b26c:	4b04      	ldr	r3, [pc, #16]	; (800b280 <HAL_PCD_SuspendCallback+0x30>)
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	4a03      	ldr	r2, [pc, #12]	; (800b280 <HAL_PCD_SuspendCallback+0x30>)
 800b272:	f043 0306 	orr.w	r3, r3, #6
 800b276:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	e000ed00 	.word	0xe000ed00

0800b284 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b294:	4b08      	ldr	r3, [pc, #32]	; (800b2b8 <HAL_PCD_ResumeCallback+0x34>)
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	4a07      	ldr	r2, [pc, #28]	; (800b2b8 <HAL_PCD_ResumeCallback+0x34>)
 800b29a:	f023 0306 	bic.w	r3, r3, #6
 800b29e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b2a0:	f000 f9fc 	bl	800b69c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe fd57 	bl	8009d5e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed00 	.word	0xe000ed00

0800b2bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b2c4:	4a2c      	ldr	r2, [pc, #176]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a2a      	ldr	r2, [pc, #168]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b2d4:	f7f8 fbc6 	bl	8003a64 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800b2d8:	4b27      	ldr	r3, [pc, #156]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2da:	4a28      	ldr	r2, [pc, #160]	; (800b37c <USBD_LL_Init+0xc0>)
 800b2dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b2de:	4b26      	ldr	r3, [pc, #152]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b2e4:	4b24      	ldr	r3, [pc, #144]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2ea:	4b23      	ldr	r3, [pc, #140]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b2f0:	4b21      	ldr	r3, [pc, #132]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b2f6:	4b20      	ldr	r3, [pc, #128]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b2fc:	4b1e      	ldr	r3, [pc, #120]	; (800b378 <USBD_LL_Init+0xbc>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b302:	4b1d      	ldr	r3, [pc, #116]	; (800b378 <USBD_LL_Init+0xbc>)
 800b304:	2200      	movs	r2, #0
 800b306:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b308:	481b      	ldr	r0, [pc, #108]	; (800b378 <USBD_LL_Init+0xbc>)
 800b30a:	f7f6 fe49 	bl	8001fa0 <HAL_PCD_Init>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b314:	f7f5 fcce 	bl	8000cb4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b31e:	2318      	movs	r3, #24
 800b320:	2200      	movs	r2, #0
 800b322:	2100      	movs	r1, #0
 800b324:	f7f8 fb12 	bl	800394c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b32e:	2358      	movs	r3, #88	; 0x58
 800b330:	2200      	movs	r2, #0
 800b332:	2180      	movs	r1, #128	; 0x80
 800b334:	f7f8 fb0a 	bl	800394c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b33e:	23c0      	movs	r3, #192	; 0xc0
 800b340:	2200      	movs	r2, #0
 800b342:	2181      	movs	r1, #129	; 0x81
 800b344:	f7f8 fb02 	bl	800394c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b34e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b352:	2200      	movs	r2, #0
 800b354:	2101      	movs	r1, #1
 800b356:	f7f8 faf9 	bl	800394c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b360:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b364:	2200      	movs	r2, #0
 800b366:	2182      	movs	r1, #130	; 0x82
 800b368:	f7f8 faf0 	bl	800394c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	2000f7e0 	.word	0x2000f7e0
 800b37c:	40006800 	.word	0x40006800

0800b380 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b396:	4618      	mov	r0, r3
 800b398:	f7f6 fedb 	bl	8002152 <HAL_PCD_Start>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f000 f980 	bl	800b6a8 <USBD_Get_USB_Status>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	4608      	mov	r0, r1
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	70fb      	strb	r3, [r7, #3]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	70bb      	strb	r3, [r7, #2]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3de:	78bb      	ldrb	r3, [r7, #2]
 800b3e0:	883a      	ldrh	r2, [r7, #0]
 800b3e2:	78f9      	ldrb	r1, [r7, #3]
 800b3e4:	f7f7 f823 	bl	800242e <HAL_PCD_EP_Open>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 f95a 	bl	800b6a8 <USBD_Get_USB_Status>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	460b      	mov	r3, r1
 800b40c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b41c:	78fa      	ldrb	r2, [r7, #3]
 800b41e:	4611      	mov	r1, r2
 800b420:	4618      	mov	r0, r3
 800b422:	f7f7 f861 	bl	80024e8 <HAL_PCD_EP_Close>
 800b426:	4603      	mov	r3, r0
 800b428:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 f93b 	bl	800b6a8 <USBD_Get_USB_Status>
 800b432:	4603      	mov	r3, r0
 800b434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b436:	7bbb      	ldrb	r3, [r7, #14]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b45a:	78fa      	ldrb	r2, [r7, #3]
 800b45c:	4611      	mov	r1, r2
 800b45e:	4618      	mov	r0, r3
 800b460:	f7f7 f90a 	bl	8002678 <HAL_PCD_EP_SetStall>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 f91c 	bl	800b6a8 <USBD_Get_USB_Status>
 800b470:	4603      	mov	r3, r0
 800b472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b474:	7bbb      	ldrb	r3, [r7, #14]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	4611      	mov	r1, r2
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7f7 f93d 	bl	800271c <HAL_PCD_EP_ClrStall>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 f8fd 	bl	800b6a8 <USBD_Get_USB_Status>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	da0c      	bge.n	800b4f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4d8:	78fb      	ldrb	r3, [r7, #3]
 800b4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4de:	68f9      	ldr	r1, [r7, #12]
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	440b      	add	r3, r1
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	e00b      	b.n	800b50a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4f2:	78fb      	ldrb	r3, [r7, #3]
 800b4f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4f8:	68f9      	ldr	r1, [r7, #12]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	440b      	add	r3, r1
 800b504:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b508:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b530:	78fa      	ldrb	r2, [r7, #3]
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f7f6 ff55 	bl	80023e4 <HAL_PCD_SetAddress>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	4618      	mov	r0, r3
 800b542:	f000 f8b1 	bl	800b6a8 <USBD_Get_USB_Status>
 800b546:	4603      	mov	r3, r0
 800b548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	607a      	str	r2, [r7, #4]
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	460b      	mov	r3, r1
 800b562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b572:	7af9      	ldrb	r1, [r7, #11]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	f7f7 f847 	bl	800260a <HAL_PCD_EP_Transmit>
 800b57c:	4603      	mov	r3, r0
 800b57e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b580:	7dfb      	ldrb	r3, [r7, #23]
 800b582:	4618      	mov	r0, r3
 800b584:	f000 f890 	bl	800b6a8 <USBD_Get_USB_Status>
 800b588:	4603      	mov	r3, r0
 800b58a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b58c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b086      	sub	sp, #24
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	60f8      	str	r0, [r7, #12]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5b4:	7af9      	ldrb	r1, [r7, #11]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	f7f6 ffdd 	bl	8002578 <HAL_PCD_EP_Receive>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 f86f 	bl	800b6a8 <USBD_Get_USB_Status>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5ce:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3718      	adds	r7, #24
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5ea:	78fa      	ldrb	r2, [r7, #3]
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f6 fff3 	bl	80025da <HAL_PCD_EP_GetRxCount>
 800b5f4:	4603      	mov	r3, r0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
	...

0800b600 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	460b      	mov	r3, r1
 800b60a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d002      	beq.n	800b618 <HAL_PCDEx_LPM_Callback+0x18>
 800b612:	2b01      	cmp	r3, #1
 800b614:	d013      	beq.n	800b63e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b616:	e023      	b.n	800b660 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d007      	beq.n	800b630 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b620:	f000 f83c 	bl	800b69c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b624:	4b10      	ldr	r3, [pc, #64]	; (800b668 <HAL_PCDEx_LPM_Callback+0x68>)
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	4a0f      	ldr	r2, [pc, #60]	; (800b668 <HAL_PCDEx_LPM_Callback+0x68>)
 800b62a:	f023 0306 	bic.w	r3, r3, #6
 800b62e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fb91 	bl	8009d5e <USBD_LL_Resume>
    break;
 800b63c:	e010      	b.n	800b660 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b644:	4618      	mov	r0, r3
 800b646:	f7fe fb6e 	bl	8009d26 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b652:	4b05      	ldr	r3, [pc, #20]	; (800b668 <HAL_PCDEx_LPM_Callback+0x68>)
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	4a04      	ldr	r2, [pc, #16]	; (800b668 <HAL_PCDEx_LPM_Callback+0x68>)
 800b658:	f043 0306 	orr.w	r3, r3, #6
 800b65c:	6113      	str	r3, [r2, #16]
    break;
 800b65e:	bf00      	nop
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	e000ed00 	.word	0xe000ed00

0800b66c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b674:	4b03      	ldr	r3, [pc, #12]	; (800b684 <USBD_static_malloc+0x18>)
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	2000fad4 	.word	0x2000fad4

0800b688 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b6a0:	f7f5 f8ec 	bl	800087c <SystemClock_Config>
}
 800b6a4:	bf00      	nop
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d817      	bhi.n	800b6ec <USBD_Get_USB_Status+0x44>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <USBD_Get_USB_Status+0x1c>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b6db 	.word	0x0800b6db
 800b6cc:	0800b6e1 	.word	0x0800b6e1
 800b6d0:	0800b6e7 	.word	0x0800b6e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d8:	e00b      	b.n	800b6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b6de:	e008      	b.n	800b6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e4:	e005      	b.n	800b6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ea:	e002      	b.n	800b6f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b6f0:	bf00      	nop
  }
  return usb_status;
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <br_dec32le>:
#include <stdint.h>
#include <string.h>
#include "aes256ctr.h"

static inline uint32_t br_dec32le(const uint8_t *src)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	return (uint32_t)src[0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
		| ((uint32_t)src[1] << 8)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3301      	adds	r3, #1
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	021b      	lsls	r3, r3, #8
 800b716:	431a      	orrs	r2, r3
		| ((uint32_t)src[2] << 16)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	3302      	adds	r3, #2
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	041b      	lsls	r3, r3, #16
 800b720:	431a      	orrs	r2, r3
		| ((uint32_t)src[3] << 24);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3303      	adds	r3, #3
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	061b      	lsls	r3, r3, #24
 800b72a:	4313      	orrs	r3, r2
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <br_range_dec32le>:

static void br_range_dec32le(uint32_t *v, size_t num, const uint8_t *src)
{
 800b738:	b590      	push	{r4, r7, lr}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b744:	e00a      	b.n	800b75c <br_range_dec32le+0x24>
		*v ++ = br_dec32le(src);
 800b746:	68fc      	ldr	r4, [r7, #12]
 800b748:	1d23      	adds	r3, r4, #4
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ffd7 	bl	800b700 <br_dec32le>
 800b752:	4603      	mov	r3, r0
 800b754:	6023      	str	r3, [r4, #0]
		src += 4;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3304      	adds	r3, #4
 800b75a:	607b      	str	r3, [r7, #4]
	while (num-- > 0) {
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	1e5a      	subs	r2, r3, #1
 800b760:	60ba      	str	r2, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1ef      	bne.n	800b746 <br_range_dec32le+0xe>
	}
}
 800b766:	bf00      	nop
 800b768:	bf00      	nop
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd90      	pop	{r4, r7, pc}

0800b770 <br_swap32>:

static inline uint32_t br_swap32(uint32_t x)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	021b      	lsls	r3, r3, #8
 800b77c:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
		| ((x >> 8) & (uint32_t)0x00FF00FF);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
	x = ((x & (uint32_t)0x00FF00FF) << 8)
 800b788:	4313      	orrs	r3, r2
 800b78a:	607b      	str	r3, [r7, #4]
	return (x << 16) | (x >> 16);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	ea4f 4333 	mov.w	r3, r3, ror #16
}
 800b792:	4618      	mov	r0, r3
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <br_enc32le>:

static inline void br_enc32le(uint8_t *dst, uint32_t x)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	6039      	str	r1, [r7, #0]
	dst[0] = (uint8_t)x;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	701a      	strb	r2, [r3, #0]
	dst[1] = (uint8_t)(x >> 8);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	0a1a      	lsrs	r2, r3, #8
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	b2d2      	uxtb	r2, r2
 800b7ba:	701a      	strb	r2, [r3, #0]
	dst[2] = (uint8_t)(x >> 16);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	0c1a      	lsrs	r2, r3, #16
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	b2d2      	uxtb	r2, r2
 800b7c6:	701a      	strb	r2, [r3, #0]
	dst[3] = (uint8_t)(x >> 24);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	0e1a      	lsrs	r2, r3, #24
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3303      	adds	r3, #3
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	701a      	strb	r2, [r3, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <br_range_enc32le>:

static void br_range_enc32le(uint8_t *dst, const uint32_t *v, size_t num)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
	while (num-- > 0) {
 800b7ec:	e00a      	b.n	800b804 <br_range_enc32le+0x24>
		br_enc32le(dst, *v ++);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	1d1a      	adds	r2, r3, #4
 800b7f2:	60ba      	str	r2, [r7, #8]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7ff ffd0 	bl	800b79e <br_enc32le>
		dst += 4;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3304      	adds	r3, #4
 800b802:	60fb      	str	r3, [r7, #12]
	while (num-- > 0) {
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	1e5a      	subs	r2, r3, #1
 800b808:	607a      	str	r2, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1ef      	bne.n	800b7ee <br_range_enc32le+0xe>
	}
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <br_aes_ct64_bitslice_Sbox>:

static void br_aes_ct64_bitslice_Sbox(uint64_t *q)
{
 800b818:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b81c:	f2ad 7d84 	subw	sp, sp, #1924	; 0x784
 800b820:	af00      	add	r7, sp, #0
 800b822:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b826:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b82a:	6018      	str	r0, [r3, #0]
	uint64_t t40, t41, t42, t43, t44, t45, t46, t47, t48, t49;
	uint64_t t50, t51, t52, t53, t54, t55, t56, t57, t58, t59;
	uint64_t t60, t61, t62, t63, t64, t65, t66, t67;
	uint64_t s0, s1, s2, s3, s4, s5, s6, s7;

	x0 = q[7];
 800b82c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b830:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b83a:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 800b83e:	e9c1 2300 	strd	r2, r3, [r1]
	x1 = q[6];
 800b842:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b846:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b850:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 800b854:	e9c1 2300 	strd	r2, r3, [r1]
	x2 = q[5];
 800b858:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b85c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800b866:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800b86a:	e9c1 2300 	strd	r2, r3, [r1]
	x3 = q[4];
 800b86e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b872:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b87c:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800b880:	e9c1 2300 	strd	r2, r3, [r1]
	x4 = q[3];
 800b884:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b888:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b892:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800b896:	e9c1 2300 	strd	r2, r3, [r1]
	x5 = q[2];
 800b89a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b89e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b8a8:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800b8ac:	e9c1 2300 	strd	r2, r3, [r1]
	x6 = q[1];
 800b8b0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b8b4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b8be:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800b8c2:	e9c1 2300 	strd	r2, r3, [r1]
	x7 = q[0];
 800b8c6:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800b8ca:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800b8d8:	e9c1 2300 	strd	r2, r3, [r1]

	/*
	 * Top linear transformation.
	 */
	y14 = x3 ^ x5;
 800b8dc:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b8e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8e4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	ea80 0402 	eor.w	r4, r0, r2
 800b8f0:	ea81 0503 	eor.w	r5, r1, r3
 800b8f4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b8f8:	e9c3 4500 	strd	r4, r5, [r3]
	y13 = x0 ^ x6;
 800b8fc:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b900:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b904:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	ea80 0802 	eor.w	r8, r0, r2
 800b910:	ea81 0903 	eor.w	r9, r1, r3
 800b914:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b918:	e9c3 8900 	strd	r8, r9, [r3]
	y9 = x0 ^ x3;
 800b91c:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b920:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b924:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	ea80 0a02 	eor.w	sl, r0, r2
 800b930:	ea81 0b03 	eor.w	fp, r1, r3
 800b934:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800b938:	e9c3 ab00 	strd	sl, fp, [r3]
	y8 = x0 ^ x5;
 800b93c:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800b940:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b944:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	ea80 0402 	eor.w	r4, r0, r2
 800b950:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 800b954:	404b      	eors	r3, r1
 800b956:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800b95a:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 800b95e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800b962:	e9c2 3400 	strd	r3, r4, [r2]
	t0 = x1 ^ x2;
 800b966:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800b96a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b96e:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	ea80 0402 	eor.w	r4, r0, r2
 800b97a:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800b97e:	404b      	eors	r3, r1
 800b980:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800b984:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 800b988:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800b98c:	e9c2 3400 	strd	r3, r4, [r2]
	y1 = t0 ^ x7;
 800b990:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800b994:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b998:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	ea80 0402 	eor.w	r4, r0, r2
 800b9a4:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 800b9a8:	404b      	eors	r3, r1
 800b9aa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800b9ae:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 800b9b2:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 800b9b6:	e9c2 3400 	strd	r3, r4, [r2]
	y4 = y1 ^ x3;
 800b9ba:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800b9be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9c2:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	ea80 0402 	eor.w	r4, r0, r2
 800b9ce:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800b9d2:	404b      	eors	r3, r1
 800b9d4:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b9d8:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 800b9dc:	f507 62e1 	add.w	r2, r7, #1800	; 0x708
 800b9e0:	e9c2 3400 	strd	r3, r4, [r2]
	y12 = y13 ^ y14;
 800b9e4:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b9e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9ec:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	ea80 0402 	eor.w	r4, r0, r2
 800b9f8:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 800b9fc:	404b      	eors	r3, r1
 800b9fe:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800ba02:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 800ba06:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 800ba0a:	e9c2 3400 	strd	r3, r4, [r2]
	y2 = y1 ^ x0;
 800ba0e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800ba12:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba16:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	ea80 0402 	eor.w	r4, r0, r2
 800ba22:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800ba26:	404b      	eors	r3, r1
 800ba28:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800ba2c:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800ba30:	f507 62df 	add.w	r2, r7, #1784	; 0x6f8
 800ba34:	e9c2 3400 	strd	r3, r4, [r2]
	y5 = y1 ^ x6;
 800ba38:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800ba3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba40:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	ea80 0402 	eor.w	r4, r0, r2
 800ba4c:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800ba50:	404b      	eors	r3, r1
 800ba52:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800ba56:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800ba5a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800ba5e:	e9c2 3400 	strd	r3, r4, [r2]
	y3 = y5 ^ y8;
 800ba62:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800ba66:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba6a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	ea80 0402 	eor.w	r4, r0, r2
 800ba76:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 800ba7a:	404b      	eors	r3, r1
 800ba7c:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800ba80:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 800ba84:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 800ba88:	e9c2 3400 	strd	r3, r4, [r2]
	t1 = x4 ^ y12;
 800ba8c:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800ba90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba94:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9c:	ea80 0402 	eor.w	r4, r0, r2
 800baa0:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800baa4:	404b      	eors	r3, r1
 800baa6:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800baaa:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 800baae:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 800bab2:	e9c2 3400 	strd	r3, r4, [r2]
	y15 = t1 ^ x5;
 800bab6:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800baba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800babe:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	ea80 0402 	eor.w	r4, r0, r2
 800baca:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 800bace:	404b      	eors	r3, r1
 800bad0:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800bad4:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800bad8:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800badc:	e9c2 3400 	strd	r3, r4, [r2]
	y20 = t1 ^ x1;
 800bae0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800bae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bae8:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	ea80 0402 	eor.w	r4, r0, r2
 800baf4:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 800baf8:	404b      	eors	r3, r1
 800bafa:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800bafe:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800bb02:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 800bb06:	e9c2 3400 	strd	r3, r4, [r2]
	y6 = y15 ^ x7;
 800bb0a:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800bb0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb12:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	ea80 0402 	eor.w	r4, r0, r2
 800bb1e:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 800bb22:	404b      	eors	r3, r1
 800bb24:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800bb28:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 800bb2c:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 800bb30:	e9c2 3400 	strd	r3, r4, [r2]
	y10 = y15 ^ t0;
 800bb34:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800bb38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb3c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	ea80 0402 	eor.w	r4, r0, r2
 800bb48:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 800bb4c:	404b      	eors	r3, r1
 800bb4e:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800bb52:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800bb56:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800bb5a:	e9c2 3400 	strd	r3, r4, [r2]
	y11 = y20 ^ y9;
 800bb5e:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800bb62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb66:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	ea80 0402 	eor.w	r4, r0, r2
 800bb72:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 800bb76:	404b      	eors	r3, r1
 800bb78:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800bb7c:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800bb80:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800bb84:	e9c2 3400 	strd	r3, r4, [r2]
	y7 = x7 ^ y11;
 800bb88:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800bb8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb90:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	ea80 0402 	eor.w	r4, r0, r2
 800bb9c:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 800bba0:	404b      	eors	r3, r1
 800bba2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800bba6:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 800bbaa:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 800bbae:	e9c2 3400 	strd	r3, r4, [r2]
	y17 = y10 ^ y11;
 800bbb2:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bbb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbba:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	ea80 0402 	eor.w	r4, r0, r2
 800bbc6:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 800bbca:	404b      	eors	r3, r1
 800bbcc:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800bbd0:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800bbd4:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
 800bbd8:	e9c2 3400 	strd	r3, r4, [r2]
	y19 = y10 ^ y8;
 800bbdc:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800bbe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbe4:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	ea80 0402 	eor.w	r4, r0, r2
 800bbf0:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 800bbf4:	404b      	eors	r3, r1
 800bbf6:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800bbfa:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800bbfe:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800bc02:	e9c2 3400 	strd	r3, r4, [r2]
	y16 = t0 ^ y11;
 800bc06:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800bc0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc0e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	ea80 0402 	eor.w	r4, r0, r2
 800bc1a:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 800bc1e:	404b      	eors	r3, r1
 800bc20:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800bc24:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 800bc28:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800bc2c:	e9c2 3400 	strd	r3, r4, [r2]
	y21 = y13 ^ y16;
 800bc30:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800bc34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc38:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	ea80 0402 	eor.w	r4, r0, r2
 800bc44:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 800bc48:	404b      	eors	r3, r1
 800bc4a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800bc4e:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 800bc52:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 800bc56:	e9c2 3400 	strd	r3, r4, [r2]
	y18 = x0 ^ y16;
 800bc5a:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 800bc5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc62:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	ea80 0402 	eor.w	r4, r0, r2
 800bc6e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 800bc72:	404b      	eors	r3, r1
 800bc74:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800bc78:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 800bc7c:	f507 62d1 	add.w	r2, r7, #1672	; 0x688
 800bc80:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Non-linear section.
	 */
	t2 = y12 & y15;
 800bc84:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800bc88:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc8c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	ea00 0402 	and.w	r4, r0, r2
 800bc98:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 800bc9c:	400b      	ands	r3, r1
 800bc9e:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800bca2:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 800bca6:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 800bcaa:	e9c2 3400 	strd	r3, r4, [r2]
	t3 = y3 & y6;
 800bcae:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800bcb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcb6:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	ea00 0402 	and.w	r4, r0, r2
 800bcc2:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 800bcc6:	400b      	ands	r3, r1
 800bcc8:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800bccc:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800bcd0:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 800bcd4:	e9c2 3400 	strd	r3, r4, [r2]
	t4 = t3 ^ t2;
 800bcd8:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800bcdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bce0:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	ea80 0402 	eor.w	r4, r0, r2
 800bcec:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 800bcf0:	404b      	eors	r3, r1
 800bcf2:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800bcf6:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800bcfa:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800bcfe:	e9c2 3400 	strd	r3, r4, [r2]
	t5 = y4 & x7;
 800bd02:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800bd06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd0a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	ea00 0402 	and.w	r4, r0, r2
 800bd16:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 800bd1a:	400b      	ands	r3, r1
 800bd1c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800bd20:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 800bd24:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 800bd28:	e9c2 3400 	strd	r3, r4, [r2]
	t6 = t5 ^ t2;
 800bd2c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800bd30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd34:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	ea80 0402 	eor.w	r4, r0, r2
 800bd40:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 800bd44:	404b      	eors	r3, r1
 800bd46:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800bd4a:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800bd4e:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800bd52:	e9c2 3400 	strd	r3, r4, [r2]
	t7 = y13 & y16;
 800bd56:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800bd5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd5e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	ea00 0402 	and.w	r4, r0, r2
 800bd6a:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 800bd6e:	400b      	ands	r3, r1
 800bd70:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800bd74:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800bd78:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 800bd7c:	e9c2 3400 	strd	r3, r4, [r2]
	t8 = y5 & y1;
 800bd80:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800bd84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd88:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	ea00 0402 	and.w	r4, r0, r2
 800bd94:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 800bd98:	400b      	ands	r3, r1
 800bd9a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800bd9e:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 800bda2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800bda6:	e9c2 3400 	strd	r3, r4, [r2]
	t9 = t8 ^ t7;
 800bdaa:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800bdae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdb2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	ea80 0402 	eor.w	r4, r0, r2
 800bdbe:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 800bdc2:	404b      	eors	r3, r1
 800bdc4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800bdc8:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800bdcc:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
 800bdd0:	e9c2 3400 	strd	r3, r4, [r2]
	t10 = y2 & y7;
 800bdd4:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800bdd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bddc:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	ea00 0402 	and.w	r4, r0, r2
 800bde8:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 800bdec:	400b      	ands	r3, r1
 800bdee:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800bdf2:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800bdf6:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800bdfa:	e9c2 3400 	strd	r3, r4, [r2]
	t11 = t10 ^ t7;
 800bdfe:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800be02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be06:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	ea80 0402 	eor.w	r4, r0, r2
 800be12:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 800be16:	404b      	eors	r3, r1
 800be18:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800be1c:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 800be20:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 800be24:	e9c2 3400 	strd	r3, r4, [r2]
	t12 = y9 & y11;
 800be28:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800be2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be30:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	ea00 0402 	and.w	r4, r0, r2
 800be3c:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 800be40:	400b      	ands	r3, r1
 800be42:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800be46:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800be4a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800be4e:	e9c2 3400 	strd	r3, r4, [r2]
	t13 = y14 & y17;
 800be52:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800be56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be5a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	ea00 0402 	and.w	r4, r0, r2
 800be66:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 800be6a:	400b      	ands	r3, r1
 800be6c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800be70:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800be74:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 800be78:	e9c2 3400 	strd	r3, r4, [r2]
	t14 = t13 ^ t12;
 800be7c:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800be80:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	ea80 0402 	eor.w	r4, r0, r2
 800be90:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 800be94:	404b      	eors	r3, r1
 800be96:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800be9a:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 800be9e:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 800bea2:	e9c2 3400 	strd	r3, r4, [r2]
	t15 = y8 & y10;
 800bea6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800beaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800beae:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	ea00 0402 	and.w	r4, r0, r2
 800beba:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 800bebe:	400b      	ands	r3, r1
 800bec0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800bec4:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800bec8:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800becc:	e9c2 3400 	strd	r3, r4, [r2]
	t16 = t15 ^ t12;
 800bed0:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800bed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	ea80 0402 	eor.w	r4, r0, r2
 800bee4:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 800bee8:	404b      	eors	r3, r1
 800beea:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800beee:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800bef2:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 800bef6:	e9c2 3400 	strd	r3, r4, [r2]
	t17 = t4 ^ t14;
 800befa:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800befe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf02:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0a:	ea80 0402 	eor.w	r4, r0, r2
 800bf0e:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 800bf12:	404b      	eors	r3, r1
 800bf14:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800bf18:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 800bf1c:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 800bf20:	e9c2 3400 	strd	r3, r4, [r2]
	t18 = t6 ^ t16;
 800bf24:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800bf28:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf2c:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	ea80 0402 	eor.w	r4, r0, r2
 800bf38:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 800bf3c:	404b      	eors	r3, r1
 800bf3e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800bf42:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800bf46:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800bf4a:	e9c2 3400 	strd	r3, r4, [r2]
	t19 = t9 ^ t14;
 800bf4e:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800bf52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf56:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	ea80 0402 	eor.w	r4, r0, r2
 800bf62:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 800bf66:	404b      	eors	r3, r1
 800bf68:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800bf6c:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800bf70:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800bf74:	e9c2 3400 	strd	r3, r4, [r2]
	t20 = t11 ^ t16;
 800bf78:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800bf7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf80:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	ea80 0402 	eor.w	r4, r0, r2
 800bf8c:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 800bf90:	404b      	eors	r3, r1
 800bf92:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800bf96:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800bf9a:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 800bf9e:	e9c2 3400 	strd	r3, r4, [r2]
	t21 = t17 ^ y20;
 800bfa2:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800bfa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfaa:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	ea80 0402 	eor.w	r4, r0, r2
 800bfb6:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 800bfba:	404b      	eors	r3, r1
 800bfbc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800bfc0:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800bfc4:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800bfc8:	e9c2 3400 	strd	r3, r4, [r2]
	t22 = t18 ^ y19;
 800bfcc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800bfd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfd4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	ea80 0402 	eor.w	r4, r0, r2
 800bfe0:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 800bfe4:	404b      	eors	r3, r1
 800bfe6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800bfea:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800bfee:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800bff2:	e9c2 3400 	strd	r3, r4, [r2]
	t23 = t19 ^ y21;
 800bff6:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800bffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bffe:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	ea80 0402 	eor.w	r4, r0, r2
 800c00a:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 800c00e:	404b      	eors	r3, r1
 800c010:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800c014:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800c018:	f507 62bb 	add.w	r2, r7, #1496	; 0x5d8
 800c01c:	e9c2 3400 	strd	r3, r4, [r2]
	t24 = t20 ^ y18;
 800c020:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800c024:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c028:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	ea80 0402 	eor.w	r4, r0, r2
 800c034:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 800c038:	404b      	eors	r3, r1
 800c03a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800c03e:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800c042:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 800c046:	e9c2 3400 	strd	r3, r4, [r2]

	t25 = t21 ^ t22;
 800c04a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800c04e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c052:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	ea80 0402 	eor.w	r4, r0, r2
 800c05e:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 800c062:	404b      	eors	r3, r1
 800c064:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c068:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800c06c:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800c070:	e9c2 3400 	strd	r3, r4, [r2]
	t26 = t21 & t23;
 800c074:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800c078:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c07c:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	ea00 0402 	and.w	r4, r0, r2
 800c088:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 800c08c:	400b      	ands	r3, r1
 800c08e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800c092:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 800c096:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800c09a:	e9c2 3400 	strd	r3, r4, [r2]
	t27 = t24 ^ t26;
 800c09e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800c0a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0a6:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	ea80 0402 	eor.w	r4, r0, r2
 800c0b2:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800c0b6:	404b      	eors	r3, r1
 800c0b8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800c0bc:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800c0c0:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 800c0c4:	e9c2 3400 	strd	r3, r4, [r2]
	t28 = t25 & t27;
 800c0c8:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800c0cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0d0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	ea00 0402 	and.w	r4, r0, r2
 800c0dc:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 800c0e0:	400b      	ands	r3, r1
 800c0e2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800c0e6:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800c0ea:	f507 62b6 	add.w	r2, r7, #1456	; 0x5b0
 800c0ee:	e9c2 3400 	strd	r3, r4, [r2]
	t29 = t28 ^ t22;
 800c0f2:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800c0f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0fa:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	ea80 0402 	eor.w	r4, r0, r2
 800c106:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800c10a:	404b      	eors	r3, r1
 800c10c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800c110:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800c114:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800c118:	e9c2 3400 	strd	r3, r4, [r2]
	t30 = t23 ^ t24;
 800c11c:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800c120:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c124:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	ea80 0402 	eor.w	r4, r0, r2
 800c130:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 800c134:	404b      	eors	r3, r1
 800c136:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800c13a:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800c13e:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 800c142:	e9c2 3400 	strd	r3, r4, [r2]
	t31 = t22 ^ t26;
 800c146:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800c14a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c14e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	ea80 0402 	eor.w	r4, r0, r2
 800c15a:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800c15e:	404b      	eors	r3, r1
 800c160:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800c164:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800c168:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800c16c:	e9c2 3400 	strd	r3, r4, [r2]
	t32 = t31 & t30;
 800c170:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800c174:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c178:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	ea00 0402 	and.w	r4, r0, r2
 800c184:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800c188:	400b      	ands	r3, r1
 800c18a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800c18e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800c192:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800c196:	e9c2 3400 	strd	r3, r4, [r2]
	t33 = t32 ^ t24;
 800c19a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800c19e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1a2:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	ea80 0402 	eor.w	r4, r0, r2
 800c1ae:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800c1b2:	404b      	eors	r3, r1
 800c1b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800c1b8:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800c1bc:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 800c1c0:	e9c2 3400 	strd	r3, r4, [r2]
	t34 = t23 ^ t33;
 800c1c4:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800c1c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1cc:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	ea80 0402 	eor.w	r4, r0, r2
 800c1d8:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800c1dc:	404b      	eors	r3, r1
 800c1de:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800c1e2:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800c1e6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800c1ea:	e9c2 3400 	strd	r3, r4, [r2]
	t35 = t27 ^ t33;
 800c1ee:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800c1f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1f6:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	ea80 0402 	eor.w	r4, r0, r2
 800c202:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800c206:	404b      	eors	r3, r1
 800c208:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800c20c:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800c210:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 800c214:	e9c2 3400 	strd	r3, r4, [r2]
	t36 = t24 & t35;
 800c218:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800c21c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c220:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	ea00 0402 	and.w	r4, r0, r2
 800c22c:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800c230:	400b      	ands	r3, r1
 800c232:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800c236:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800c23a:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 800c23e:	e9c2 3400 	strd	r3, r4, [r2]
	t37 = t36 ^ t34;
 800c242:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800c246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c24a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	ea80 0402 	eor.w	r4, r0, r2
 800c256:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 800c25a:	404b      	eors	r3, r1
 800c25c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800c260:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800c264:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800c268:	e9c2 3400 	strd	r3, r4, [r2]
	t38 = t27 ^ t36;
 800c26c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800c270:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c274:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	ea80 0402 	eor.w	r4, r0, r2
 800c280:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800c284:	404b      	eors	r3, r1
 800c286:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800c28a:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800c28e:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800c292:	e9c2 3400 	strd	r3, r4, [r2]
	t39 = t29 & t38;
 800c296:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c29a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c29e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	ea00 0402 	and.w	r4, r0, r2
 800c2aa:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800c2ae:	400b      	ands	r3, r1
 800c2b0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800c2b4:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 800c2b8:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800c2bc:	e9c2 3400 	strd	r3, r4, [r2]
	t40 = t25 ^ t39;
 800c2c0:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800c2c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2c8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	ea80 0402 	eor.w	r4, r0, r2
 800c2d4:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800c2d8:	404b      	eors	r3, r1
 800c2da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800c2de:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800c2e2:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800c2e6:	e9c2 3400 	strd	r3, r4, [r2]

	t41 = t40 ^ t37;
 800c2ea:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c2ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2f2:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	ea80 0402 	eor.w	r4, r0, r2
 800c2fe:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800c302:	404b      	eors	r3, r1
 800c304:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800c308:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800c30c:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800c310:	e9c2 3400 	strd	r3, r4, [r2]
	t42 = t29 ^ t33;
 800c314:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c31c:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	ea80 0402 	eor.w	r4, r0, r2
 800c328:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800c32c:	404b      	eors	r3, r1
 800c32e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800c332:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800c336:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800c33a:	e9c2 3400 	strd	r3, r4, [r2]
	t43 = t29 ^ t40;
 800c33e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c342:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c346:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	ea80 0402 	eor.w	r4, r0, r2
 800c352:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 800c356:	404b      	eors	r3, r1
 800c358:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800c35c:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800c360:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800c364:	e9c2 3400 	strd	r3, r4, [r2]
	t44 = t33 ^ t37;
 800c368:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c36c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c370:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	ea80 0402 	eor.w	r4, r0, r2
 800c37c:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800c380:	404b      	eors	r3, r1
 800c382:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800c386:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800c38a:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 800c38e:	e9c2 3400 	strd	r3, r4, [r2]
	t45 = t42 ^ t41;
 800c392:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c39a:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	ea80 0402 	eor.w	r4, r0, r2
 800c3a6:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800c3aa:	404b      	eors	r3, r1
 800c3ac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800c3b0:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800c3b4:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 800c3b8:	e9c2 3400 	strd	r3, r4, [r2]
	z0 = t44 & y15;
 800c3bc:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c3c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3c4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	ea00 0402 	and.w	r4, r0, r2
 800c3d0:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800c3d4:	400b      	ands	r3, r1
 800c3d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c3da:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800c3de:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800c3e2:	e9c2 3400 	strd	r3, r4, [r2]
	z1 = t37 & y6;
 800c3e6:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c3ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3ee:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	ea00 0402 	and.w	r4, r0, r2
 800c3fa:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 800c3fe:	400b      	ands	r3, r1
 800c400:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800c404:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800c408:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800c40c:	e9c2 3400 	strd	r3, r4, [r2]
	z2 = t33 & x7;
 800c410:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c414:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c418:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	ea00 0402 	and.w	r4, r0, r2
 800c424:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800c428:	400b      	ands	r3, r1
 800c42a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800c42e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800c432:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 800c436:	e9c2 3400 	strd	r3, r4, [r2]
	z3 = t43 & y16;
 800c43a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c43e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c442:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	ea00 0402 	and.w	r4, r0, r2
 800c44e:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800c452:	400b      	ands	r3, r1
 800c454:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800c458:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800c45c:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800c460:	e9c2 3400 	strd	r3, r4, [r2]
	z4 = t40 & y1;
 800c464:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c46c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	ea00 0402 	and.w	r4, r0, r2
 800c478:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 800c47c:	400b      	ands	r3, r1
 800c47e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800c482:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800c486:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800c48a:	e9c2 3400 	strd	r3, r4, [r2]
	z5 = t29 & y7;
 800c48e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c492:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c496:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	ea00 0402 	and.w	r4, r0, r2
 800c4a2:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800c4a6:	400b      	ands	r3, r1
 800c4a8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c4ac:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800c4b0:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800c4b4:	e9c2 3400 	strd	r3, r4, [r2]
	z6 = t42 & y11;
 800c4b8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c4bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4c0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	ea00 0402 	and.w	r4, r0, r2
 800c4cc:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800c4d0:	400b      	ands	r3, r1
 800c4d2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c4d6:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800c4da:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800c4de:	e9c2 3400 	strd	r3, r4, [r2]
	z7 = t45 & y17;
 800c4e2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c4e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4ea:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	ea00 0402 	and.w	r4, r0, r2
 800c4f6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800c4fa:	400b      	ands	r3, r1
 800c4fc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800c500:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800c504:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800c508:	e9c2 3400 	strd	r3, r4, [r2]
	z8 = t41 & y10;
 800c50c:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c510:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c514:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	ea00 0402 	and.w	r4, r0, r2
 800c520:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800c524:	400b      	ands	r3, r1
 800c526:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800c52a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800c52e:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800c532:	e9c2 3400 	strd	r3, r4, [r2]
	z9 = t44 & y12;
 800c536:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800c53a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c53e:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	ea00 0402 	and.w	r4, r0, r2
 800c54a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800c54e:	400b      	ands	r3, r1
 800c550:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800c554:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800c558:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800c55c:	e9c2 3400 	strd	r3, r4, [r2]
	z10 = t37 & y3;
 800c560:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800c564:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c568:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	ea00 0402 	and.w	r4, r0, r2
 800c574:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800c578:	400b      	ands	r3, r1
 800c57a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c57e:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800c582:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800c586:	e9c2 3400 	strd	r3, r4, [r2]
	z11 = t33 & y4;
 800c58a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800c58e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c592:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	ea00 0402 	and.w	r4, r0, r2
 800c59e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800c5a2:	400b      	ands	r3, r1
 800c5a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c5a8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800c5ac:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800c5b0:	e9c2 3400 	strd	r3, r4, [r2]
	z12 = t43 & y13;
 800c5b4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800c5b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5bc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c4:	ea00 0402 	and.w	r4, r0, r2
 800c5c8:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800c5cc:	400b      	ands	r3, r1
 800c5ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c5d2:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800c5d6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800c5da:	e9c2 3400 	strd	r3, r4, [r2]
	z13 = t40 & y5;
 800c5de:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800c5e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5e6:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	ea00 0402 	and.w	r4, r0, r2
 800c5f2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800c5f6:	400b      	ands	r3, r1
 800c5f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c5fc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800c600:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800c604:	e9c2 3400 	strd	r3, r4, [r2]
	z14 = t29 & y2;
 800c608:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800c60c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c610:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c618:	ea00 0402 	and.w	r4, r0, r2
 800c61c:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800c620:	400b      	ands	r3, r1
 800c622:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c626:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800c62a:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800c62e:	e9c2 3400 	strd	r3, r4, [r2]
	z15 = t42 & y9;
 800c632:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800c636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c63a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	ea00 0402 	and.w	r4, r0, r2
 800c646:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 800c64a:	400b      	ands	r3, r1
 800c64c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c650:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800c654:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800c658:	e9c2 3400 	strd	r3, r4, [r2]
	z16 = t45 & y14;
 800c65c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800c660:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c664:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	ea00 0402 	and.w	r4, r0, r2
 800c670:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800c674:	400b      	ands	r3, r1
 800c676:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c67a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800c67e:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800c682:	e9c2 3400 	strd	r3, r4, [r2]
	z17 = t41 & y8;
 800c686:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800c68a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c68e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	ea00 0402 	and.w	r4, r0, r2
 800c69a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800c69e:	400b      	ands	r3, r1
 800c6a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c6a4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800c6a8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800c6ac:	e9c2 3400 	strd	r3, r4, [r2]

	/*
	 * Bottom linear transformation.
	 */
	t46 = z15 ^ z16;
 800c6b0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800c6b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6b8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	ea80 0402 	eor.w	r4, r0, r2
 800c6c4:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800c6c8:	404b      	eors	r3, r1
 800c6ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c6ce:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c6d2:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800c6d6:	e9c2 3400 	strd	r3, r4, [r2]
	t47 = z10 ^ z11;
 800c6da:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c6de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6e2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	ea80 0402 	eor.w	r4, r0, r2
 800c6ee:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800c6f2:	404b      	eors	r3, r1
 800c6f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c6f8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c6fc:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800c700:	e9c2 3400 	strd	r3, r4, [r2]
	t48 = z5 ^ z13;
 800c704:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c70c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	ea80 0402 	eor.w	r4, r0, r2
 800c718:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800c71c:	404b      	eors	r3, r1
 800c71e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c722:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c726:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800c72a:	e9c2 3400 	strd	r3, r4, [r2]
	t49 = z9 ^ z10;
 800c72e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800c732:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c736:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	ea80 0402 	eor.w	r4, r0, r2
 800c742:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800c746:	404b      	eors	r3, r1
 800c748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c74c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c750:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800c754:	e9c2 3400 	strd	r3, r4, [r2]
	t50 = z2 ^ z12;
 800c758:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c75c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c760:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	ea80 0402 	eor.w	r4, r0, r2
 800c76c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c770:	404b      	eors	r3, r1
 800c772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c776:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800c77a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800c77e:	e9c2 3400 	strd	r3, r4, [r2]
	t51 = z2 ^ z5;
 800c782:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800c786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c78a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	ea80 0402 	eor.w	r4, r0, r2
 800c796:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800c79a:	404b      	eors	r3, r1
 800c79c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7a0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800c7a4:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800c7a8:	e9c2 3400 	strd	r3, r4, [r2]
	t52 = z7 ^ z8;
 800c7ac:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c7b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7b4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	ea80 0402 	eor.w	r4, r0, r2
 800c7c0:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800c7c4:	404b      	eors	r3, r1
 800c7c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c7ca:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800c7ce:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800c7d2:	e9c2 3400 	strd	r3, r4, [r2]
	t53 = z0 ^ z3;
 800c7d6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800c7da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7de:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	ea80 0402 	eor.w	r4, r0, r2
 800c7ea:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800c7ee:	404b      	eors	r3, r1
 800c7f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c7f4:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800c7f8:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800c7fc:	e9c2 3400 	strd	r3, r4, [r2]
	t54 = z6 ^ z7;
 800c800:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800c804:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c808:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	ea80 0402 	eor.w	r4, r0, r2
 800c814:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c818:	404b      	eors	r3, r1
 800c81a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c81e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800c822:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800c826:	e9c2 3400 	strd	r3, r4, [r2]
	t55 = z16 ^ z17;
 800c82a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c82e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c832:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	ea80 0402 	eor.w	r4, r0, r2
 800c83e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c842:	404b      	eors	r3, r1
 800c844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c848:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800c84c:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800c850:	e9c2 3400 	strd	r3, r4, [r2]
	t56 = z12 ^ t48;
 800c854:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800c858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c85c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c864:	ea80 0402 	eor.w	r4, r0, r2
 800c868:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800c86c:	404b      	eors	r3, r1
 800c86e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c872:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800c876:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800c87a:	e9c2 3400 	strd	r3, r4, [r2]
	t57 = t50 ^ t53;
 800c87e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800c882:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c886:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	ea80 0402 	eor.w	r4, r0, r2
 800c892:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c896:	404b      	eors	r3, r1
 800c898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c89c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c8a0:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800c8a4:	e9c2 3400 	strd	r3, r4, [r2]
	t58 = z4 ^ t46;
 800c8a8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c8ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8b0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	ea80 0402 	eor.w	r4, r0, r2
 800c8bc:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800c8c0:	404b      	eors	r3, r1
 800c8c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8c6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800c8ca:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800c8ce:	e9c2 3400 	strd	r3, r4, [r2]
	t59 = z3 ^ t54;
 800c8d2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800c8d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8da:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	ea80 0402 	eor.w	r4, r0, r2
 800c8e6:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800c8ea:	404b      	eors	r3, r1
 800c8ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8f0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800c8f4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800c8f8:	e9c2 3400 	strd	r3, r4, [r2]
	t60 = t46 ^ t57;
 800c8fc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c900:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c904:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	ea80 0402 	eor.w	r4, r0, r2
 800c910:	67bc      	str	r4, [r7, #120]	; 0x78
 800c912:	404b      	eors	r3, r1
 800c914:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c916:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c91a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800c91e:	e9c2 3400 	strd	r3, r4, [r2]
	t61 = z14 ^ t57;
 800c922:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800c926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c92a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	ea80 0402 	eor.w	r4, r0, r2
 800c936:	673c      	str	r4, [r7, #112]	; 0x70
 800c938:	404b      	eors	r3, r1
 800c93a:	677b      	str	r3, [r7, #116]	; 0x74
 800c93c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c940:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800c944:	e9c2 3400 	strd	r3, r4, [r2]
	t62 = t52 ^ t58;
 800c948:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800c94c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c950:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	ea80 0402 	eor.w	r4, r0, r2
 800c95c:	66bc      	str	r4, [r7, #104]	; 0x68
 800c95e:	404b      	eors	r3, r1
 800c960:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c962:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800c966:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800c96a:	e9c2 3400 	strd	r3, r4, [r2]
	t63 = t49 ^ t58;
 800c96e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800c972:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c976:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	ea80 0402 	eor.w	r4, r0, r2
 800c982:	663c      	str	r4, [r7, #96]	; 0x60
 800c984:	404b      	eors	r3, r1
 800c986:	667b      	str	r3, [r7, #100]	; 0x64
 800c988:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c98c:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800c990:	e9c2 3400 	strd	r3, r4, [r2]
	t64 = z4 ^ t59;
 800c994:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800c998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c99c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	ea80 0402 	eor.w	r4, r0, r2
 800c9a8:	65bc      	str	r4, [r7, #88]	; 0x58
 800c9aa:	404b      	eors	r3, r1
 800c9ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9ae:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c9b2:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800c9b6:	e9c2 3400 	strd	r3, r4, [r2]
	t65 = t61 ^ t62;
 800c9ba:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800c9be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9c2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	ea80 0402 	eor.w	r4, r0, r2
 800c9ce:	653c      	str	r4, [r7, #80]	; 0x50
 800c9d0:	404b      	eors	r3, r1
 800c9d2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9d4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c9d8:	e9c7 34fe 	strd	r3, r4, [r7, #1016]	; 0x3f8
	t66 = z1 ^ t63;
 800c9dc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800c9e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9e4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	ea80 0402 	eor.w	r4, r0, r2
 800c9f0:	64bc      	str	r4, [r7, #72]	; 0x48
 800c9f2:	404b      	eors	r3, r1
 800c9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9f6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800c9fa:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
	s0 = t59 ^ t63;
 800c9fe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800ca02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca06:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	ea80 0402 	eor.w	r4, r0, r2
 800ca12:	643c      	str	r4, [r7, #64]	; 0x40
 800ca14:	404b      	eors	r3, r1
 800ca16:	647b      	str	r3, [r7, #68]	; 0x44
 800ca18:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800ca1c:	e9c7 34fa 	strd	r3, r4, [r7, #1000]	; 0x3e8
	s6 = t56 ^ ~t62;
 800ca20:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800ca24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca28:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	ea80 0402 	eor.w	r4, r0, r2
 800ca34:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 800ca38:	404b      	eors	r3, r1
 800ca3a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800ca3e:	e9d7 12e6 	ldrd	r1, r2, [r7, #920]	; 0x398
 800ca42:	460b      	mov	r3, r1
 800ca44:	43db      	mvns	r3, r3
 800ca46:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca48:	4613      	mov	r3, r2
 800ca4a:	43db      	mvns	r3, r3
 800ca4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca4e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800ca52:	e9c7 34f8 	strd	r3, r4, [r7, #992]	; 0x3e0
	s7 = t48 ^ ~t60;
 800ca56:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800ca5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca5e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	ea80 0402 	eor.w	r4, r0, r2
 800ca6a:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 800ca6e:	404b      	eors	r3, r1
 800ca70:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800ca74:	e9d7 12e4 	ldrd	r1, r2, [r7, #912]	; 0x390
 800ca78:	460b      	mov	r3, r1
 800ca7a:	43db      	mvns	r3, r3
 800ca7c:	633b      	str	r3, [r7, #48]	; 0x30
 800ca7e:	4613      	mov	r3, r2
 800ca80:	43db      	mvns	r3, r3
 800ca82:	637b      	str	r3, [r7, #52]	; 0x34
 800ca84:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ca88:	e9c7 34f6 	strd	r3, r4, [r7, #984]	; 0x3d8
	t67 = t64 ^ t65;
 800ca8c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800ca90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca94:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800ca98:	ea80 0402 	eor.w	r4, r0, r2
 800ca9c:	62bc      	str	r4, [r7, #40]	; 0x28
 800ca9e:	404b      	eors	r3, r1
 800caa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caa2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800caa6:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
	s3 = t53 ^ t66;
 800caaa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800caae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cab2:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800cab6:	ea80 0402 	eor.w	r4, r0, r2
 800caba:	623c      	str	r4, [r7, #32]
 800cabc:	404b      	eors	r3, r1
 800cabe:	627b      	str	r3, [r7, #36]	; 0x24
 800cac0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cac4:	e9c7 34f2 	strd	r3, r4, [r7, #968]	; 0x3c8
	s4 = t51 ^ t66;
 800cac8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800cacc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cad0:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800cad4:	ea80 0402 	eor.w	r4, r0, r2
 800cad8:	61bc      	str	r4, [r7, #24]
 800cada:	404b      	eors	r3, r1
 800cadc:	61fb      	str	r3, [r7, #28]
 800cade:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cae2:	e9c7 34f0 	strd	r3, r4, [r7, #960]	; 0x3c0
	s5 = t47 ^ t65;
 800cae6:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800caea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800caee:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800caf2:	ea80 0402 	eor.w	r4, r0, r2
 800caf6:	613c      	str	r4, [r7, #16]
 800caf8:	404b      	eors	r3, r1
 800cafa:	617b      	str	r3, [r7, #20]
 800cafc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cb00:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
	s1 = t64 ^ ~s3;
 800cb04:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800cb08:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb10:	ea80 0402 	eor.w	r4, r0, r2
 800cb14:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800cb18:	404b      	eors	r3, r1
 800cb1a:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800cb1e:	e9d7 12e2 	ldrd	r1, r2, [r7, #904]	; 0x388
 800cb22:	460b      	mov	r3, r1
 800cb24:	43db      	mvns	r3, r3
 800cb26:	60bb      	str	r3, [r7, #8]
 800cb28:	4613      	mov	r3, r2
 800cb2a:	43db      	mvns	r3, r3
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cb32:	e9c7 34ec 	strd	r3, r4, [r7, #944]	; 0x3b0
	s2 = t55 ^ ~t67;
 800cb36:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 800cb3a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800cb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb42:	ea80 0402 	eor.w	r4, r0, r2
 800cb46:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 800cb4a:	404b      	eors	r3, r1
 800cb4c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800cb50:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	; 0x380
 800cb54:	460b      	mov	r3, r1
 800cb56:	43db      	mvns	r3, r3
 800cb58:	603b      	str	r3, [r7, #0]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	43db      	mvns	r3, r3
 800cb5e:	607b      	str	r3, [r7, #4]
 800cb60:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cb64:	e9c7 34ea 	strd	r3, r4, [r7, #936]	; 0x3a8

	q[7] = s0;
 800cb68:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cb6c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb76:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800cb7a:	e9c1 2300 	strd	r2, r3, [r1]
	q[6] = s1;
 800cb7e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cb82:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb8c:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800cb90:	e9c1 2300 	strd	r2, r3, [r1]
	q[5] = s2;
 800cb94:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cb98:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800cba2:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800cba6:	e9c1 2300 	strd	r2, r3, [r1]
	q[4] = s3;
 800cbaa:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cbae:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f103 0120 	add.w	r1, r3, #32
 800cbb8:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800cbbc:	e9c1 2300 	strd	r2, r3, [r1]
	q[3] = s4;
 800cbc0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cbc4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f103 0118 	add.w	r1, r3, #24
 800cbce:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800cbd2:	e9c1 2300 	strd	r2, r3, [r1]
	q[2] = s5;
 800cbd6:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cbda:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f103 0110 	add.w	r1, r3, #16
 800cbe4:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800cbe8:	e9c1 2300 	strd	r2, r3, [r1]
	q[1] = s6;
 800cbec:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cbf0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f103 0108 	add.w	r1, r3, #8
 800cbfa:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800cbfe:	e9c1 2300 	strd	r2, r3, [r1]
	q[0] = s7;
 800cc02:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800cc06:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cc0a:	6819      	ldr	r1, [r3, #0]
 800cc0c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800cc10:	e9c1 2300 	strd	r2, r3, [r1]
}
 800cc14:	bf00      	nop
 800cc16:	f207 7784 	addw	r7, r7, #1924	; 0x784
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cc20:	4770      	bx	lr

0800cc22 <br_aes_ct64_ortho>:

static void br_aes_ct64_ortho(uint64_t *q)
{
 800cc22:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cc26:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c

#define SWAP2(x, y)    SWAPN(0x5555555555555555, 0xAAAAAAAAAAAAAAAA,  1, x, y)
#define SWAP4(x, y)    SWAPN(0x3333333333333333, 0xCCCCCCCCCCCCCCCC,  2, x, y)
#define SWAP8(x, y)    SWAPN(0x0F0F0F0F0F0F0F0F, 0xF0F0F0F0F0F0F0F0,  4, x, y)

	SWAP2(q[0], q[1]);
 800cc30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
 800cc3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cc44:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
 800cc48:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800cc4c:	f002 3855 	and.w	r8, r2, #1431655765	; 0x55555555
 800cc50:	f003 3955 	and.w	r9, r3, #1431655765	; 0x55555555
 800cc54:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800cc58:	1891      	adds	r1, r2, r2
 800cc5a:	61b9      	str	r1, [r7, #24]
 800cc5c:	415b      	adcs	r3, r3
 800cc5e:	61fb      	str	r3, [r7, #28]
 800cc60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc64:	f002 34aa 	and.w	r4, r2, #2863311530	; 0xaaaaaaaa
 800cc68:	f003 35aa 	and.w	r5, r3, #2863311530	; 0xaaaaaaaa
 800cc6c:	ea48 0304 	orr.w	r3, r8, r4
 800cc70:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800cc74:	ea49 0305 	orr.w	r3, r9, r5
 800cc78:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800cc7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cc80:	e9d7 1290 	ldrd	r1, r2, [r7, #576]	; 0x240
 800cc84:	e9c3 1200 	strd	r1, r2, [r3]
 800cc88:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800cc8c:	f04f 0000 	mov.w	r0, #0
 800cc90:	f04f 0100 	mov.w	r1, #0
 800cc94:	0850      	lsrs	r0, r2, #1
 800cc96:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cc9a:	0859      	lsrs	r1, r3, #1
 800cc9c:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cca0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800cca4:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cca8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800ccac:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800ccb0:	f002 3aaa 	and.w	sl, r2, #2863311530	; 0xaaaaaaaa
 800ccb4:	f003 3baa 	and.w	fp, r3, #2863311530	; 0xaaaaaaaa
 800ccb8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	ea42 020a 	orr.w	r2, r2, sl
 800ccc8:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 800cccc:	460a      	mov	r2, r1
 800ccce:	ea42 020b 	orr.w	r2, r2, fp
 800ccd2:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 800ccd6:	e9d7 128c 	ldrd	r1, r2, [r7, #560]	; 0x230
 800ccda:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[2], q[3]);
 800ccde:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cce2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cce6:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
 800ccea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ccee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ccf2:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
 800ccf6:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800ccfa:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800ccfe:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 800cd02:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800cd06:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800cd0a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800cd0e:	1891      	adds	r1, r2, r2
 800cd10:	6139      	str	r1, [r7, #16]
 800cd12:	415b      	adcs	r3, r3
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd1a:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cd1e:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800cd22:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cd26:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800cd2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd2e:	3310      	adds	r3, #16
 800cd30:	e9d7 898a 	ldrd	r8, r9, [r7, #552]	; 0x228
 800cd34:	4642      	mov	r2, r8
 800cd36:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	430a      	orrs	r2, r1
 800cd3e:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 800cd42:	464a      	mov	r2, r9
 800cd44:	4629      	mov	r1, r5
 800cd46:	430a      	orrs	r2, r1
 800cd48:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800cd4c:	e9d7 1286 	ldrd	r1, r2, [r7, #536]	; 0x218
 800cd50:	e9c3 1200 	strd	r1, r2, [r3]
 800cd54:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800cd58:	f04f 0000 	mov.w	r0, #0
 800cd5c:	f04f 0100 	mov.w	r1, #0
 800cd60:	0850      	lsrs	r0, r2, #1
 800cd62:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cd66:	0859      	lsrs	r1, r3, #1
 800cd68:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cd6c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800cd70:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cd74:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800cd78:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800cd7c:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cd80:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800cd84:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cd88:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800cd8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cd90:	3318      	adds	r3, #24
 800cd92:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 800cd96:	4642      	mov	r2, r8
 800cd98:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 800cda4:	464a      	mov	r2, r9
 800cda6:	4629      	mov	r1, r5
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 800cdae:	e9d7 1280 	ldrd	r1, r2, [r7, #512]	; 0x200
 800cdb2:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[4], q[5]);
 800cdb6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cdba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdbe:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
 800cdc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cdc6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800cdca:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
 800cdce:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800cdd2:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800cdd6:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 800cdda:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800cdde:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cde2:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800cde6:	1891      	adds	r1, r2, r2
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	415b      	adcs	r3, r3
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdf2:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cdf6:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800cdfa:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cdfe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800ce02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce06:	3320      	adds	r3, #32
 800ce08:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800ce12:	4621      	mov	r1, r4
 800ce14:	430a      	orrs	r2, r1
 800ce16:	f8c7 21e8 	str.w	r2, [r7, #488]	; 0x1e8
 800ce1a:	464a      	mov	r2, r9
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	430a      	orrs	r2, r1
 800ce20:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800ce24:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 800ce28:	e9c3 1200 	strd	r1, r2, [r3]
 800ce2c:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800ce30:	f04f 0000 	mov.w	r0, #0
 800ce34:	f04f 0100 	mov.w	r1, #0
 800ce38:	0850      	lsrs	r0, r2, #1
 800ce3a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800ce3e:	0859      	lsrs	r1, r3, #1
 800ce40:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800ce44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800ce48:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800ce4c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800ce50:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800ce54:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800ce58:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 800ce5c:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ce60:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800ce64:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce68:	3328      	adds	r3, #40	; 0x28
 800ce6a:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 800ce6e:	4642      	mov	r2, r8
 800ce70:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800ce74:	4621      	mov	r1, r4
 800ce76:	430a      	orrs	r2, r1
 800ce78:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	4629      	mov	r1, r5
 800ce80:	430a      	orrs	r2, r1
 800ce82:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 800ce86:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 800ce8a:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP2(q[6], q[7]);
 800ce8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800ce96:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
 800ce9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cea2:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
 800cea6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800ceaa:	f002 3155 	and.w	r1, r2, #1431655765	; 0x55555555
 800ceae:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800ceb2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800ceb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800ceba:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cebe:	1891      	adds	r1, r2, r2
 800cec0:	6039      	str	r1, [r7, #0]
 800cec2:	415b      	adcs	r3, r3
 800cec4:	607b      	str	r3, [r7, #4]
 800cec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceca:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cece:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 800ced2:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800ced6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800ceda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cede:	3330      	adds	r3, #48	; 0x30
 800cee0:	e9d7 8972 	ldrd	r8, r9, [r7, #456]	; 0x1c8
 800cee4:	4642      	mov	r2, r8
 800cee6:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 800ceea:	4621      	mov	r1, r4
 800ceec:	430a      	orrs	r2, r1
 800ceee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800cef2:	464a      	mov	r2, r9
 800cef4:	4629      	mov	r1, r5
 800cef6:	430a      	orrs	r2, r1
 800cef8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800cefc:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	; 0x1b8
 800cf00:	e9c3 1200 	strd	r1, r2, [r3]
 800cf04:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800cf08:	f04f 0000 	mov.w	r0, #0
 800cf0c:	f04f 0100 	mov.w	r1, #0
 800cf10:	0850      	lsrs	r0, r2, #1
 800cf12:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800cf16:	0859      	lsrs	r1, r3, #1
 800cf18:	f000 3355 	and.w	r3, r0, #1431655765	; 0x55555555
 800cf1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800cf20:	f001 3355 	and.w	r3, r1, #1431655765	; 0x55555555
 800cf24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800cf28:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800cf2c:	f002 31aa 	and.w	r1, r2, #2863311530	; 0xaaaaaaaa
 800cf30:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 800cf34:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cf38:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800cf3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf40:	3338      	adds	r3, #56	; 0x38
 800cf42:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 800cf46:	4642      	mov	r2, r8
 800cf48:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	430a      	orrs	r2, r1
 800cf50:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
 800cf54:	464a      	mov	r2, r9
 800cf56:	4629      	mov	r1, r5
 800cf58:	430a      	orrs	r2, r1
 800cf5a:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800cf5e:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	; 0x1a0
 800cf62:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP4(q[0], q[2]);
 800cf66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
 800cf72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cf7a:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
 800cf7e:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800cf82:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800cf86:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800cf8a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cf8e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800cf92:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800cf96:	f04f 0000 	mov.w	r0, #0
 800cf9a:	f04f 0100 	mov.w	r1, #0
 800cf9e:	0099      	lsls	r1, r3, #2
 800cfa0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cfa4:	0090      	lsls	r0, r2, #2
 800cfa6:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800cfaa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800cfae:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800cfb2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800cfb6:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800cfba:	4623      	mov	r3, r4
 800cfbc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800cfc8:	462b      	mov	r3, r5
 800cfca:	460a      	mov	r2, r1
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800cfd2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cfd6:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 800cfda:	e9c3 1200 	strd	r1, r2, [r3]
 800cfde:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800cfe2:	f04f 0000 	mov.w	r0, #0
 800cfe6:	f04f 0100 	mov.w	r1, #0
 800cfea:	0890      	lsrs	r0, r2, #2
 800cfec:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800cff0:	0899      	lsrs	r1, r3, #2
 800cff2:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800cff6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800cffa:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800cffe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800d002:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800d006:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800d00a:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800d00e:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800d012:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800d016:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d01a:	3310      	adds	r3, #16
 800d01c:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 800d020:	4642      	mov	r2, r8
 800d022:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800d026:	4621      	mov	r1, r4
 800d028:	430a      	orrs	r2, r1
 800d02a:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800d02e:	464a      	mov	r2, r9
 800d030:	4629      	mov	r1, r5
 800d032:	430a      	orrs	r2, r1
 800d034:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800d038:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	; 0x170
 800d03c:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[1], q[3]);
 800d040:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d044:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d048:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
 800d04c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d050:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d054:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
 800d058:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800d05c:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800d060:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800d064:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800d068:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800d06c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800d070:	f04f 0000 	mov.w	r0, #0
 800d074:	f04f 0100 	mov.w	r1, #0
 800d078:	0099      	lsls	r1, r3, #2
 800d07a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800d07e:	0090      	lsls	r0, r2, #2
 800d080:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800d084:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800d088:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800d08c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800d090:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d094:	3308      	adds	r3, #8
 800d096:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 800d09a:	4642      	mov	r2, r8
 800d09c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 800d0a8:	464a      	mov	r2, r9
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800d0b2:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800d0b6:	e9c3 1200 	strd	r1, r2, [r3]
 800d0ba:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800d0be:	f04f 0000 	mov.w	r0, #0
 800d0c2:	f04f 0100 	mov.w	r1, #0
 800d0c6:	0890      	lsrs	r0, r2, #2
 800d0c8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d0cc:	0899      	lsrs	r1, r3, #2
 800d0ce:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800d0d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d0d6:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800d0da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800d0de:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800d0e2:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800d0e6:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800d0ea:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800d0ee:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d0f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d0f6:	3318      	adds	r3, #24
 800d0f8:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 800d0fc:	4642      	mov	r2, r8
 800d0fe:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 800d102:	4621      	mov	r1, r4
 800d104:	430a      	orrs	r2, r1
 800d106:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800d10a:	464a      	mov	r2, r9
 800d10c:	4629      	mov	r1, r5
 800d10e:	430a      	orrs	r2, r1
 800d110:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800d114:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800d118:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[4], q[6]);
 800d11c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d124:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
 800d128:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d12c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800d130:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
 800d134:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800d138:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800d13c:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800d140:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800d144:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800d148:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800d14c:	f04f 0000 	mov.w	r0, #0
 800d150:	f04f 0100 	mov.w	r1, #0
 800d154:	0099      	lsls	r1, r3, #2
 800d156:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800d15a:	0090      	lsls	r0, r2, #2
 800d15c:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800d160:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800d164:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800d168:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800d16c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d170:	3320      	adds	r3, #32
 800d172:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800d176:	4642      	mov	r2, r8
 800d178:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800d17c:	4621      	mov	r1, r4
 800d17e:	430a      	orrs	r2, r1
 800d180:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800d184:	464a      	mov	r2, r9
 800d186:	4629      	mov	r1, r5
 800d188:	430a      	orrs	r2, r1
 800d18a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d18e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800d192:	e9c3 1200 	strd	r1, r2, [r3]
 800d196:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800d19a:	f04f 0000 	mov.w	r0, #0
 800d19e:	f04f 0100 	mov.w	r1, #0
 800d1a2:	0890      	lsrs	r0, r2, #2
 800d1a4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d1a8:	0899      	lsrs	r1, r3, #2
 800d1aa:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800d1ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800d1b2:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800d1b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d1ba:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800d1be:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800d1c2:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800d1c6:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800d1ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d1ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d1d2:	3330      	adds	r3, #48	; 0x30
 800d1d4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800d1d8:	4642      	mov	r2, r8
 800d1da:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800d1de:	4621      	mov	r1, r4
 800d1e0:	430a      	orrs	r2, r1
 800d1e2:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800d1e6:	464a      	mov	r2, r9
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800d1f0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800d1f4:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP4(q[5], q[7]);
 800d1f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d1fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d200:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
 800d204:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d208:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d20c:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
 800d210:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800d214:	f002 3133 	and.w	r1, r2, #858993459	; 0x33333333
 800d218:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800d21c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800d220:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d224:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800d228:	f04f 0000 	mov.w	r0, #0
 800d22c:	f04f 0100 	mov.w	r1, #0
 800d230:	0099      	lsls	r1, r3, #2
 800d232:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800d236:	0090      	lsls	r0, r2, #2
 800d238:	f000 33cc 	and.w	r3, r0, #3435973836	; 0xcccccccc
 800d23c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d240:	f001 33cc 	and.w	r3, r1, #3435973836	; 0xcccccccc
 800d244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d248:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d24c:	3328      	adds	r3, #40	; 0x28
 800d24e:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 800d252:	4642      	mov	r2, r8
 800d254:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800d258:	4621      	mov	r1, r4
 800d25a:	430a      	orrs	r2, r1
 800d25c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d260:	464a      	mov	r2, r9
 800d262:	4629      	mov	r1, r5
 800d264:	430a      	orrs	r2, r1
 800d266:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800d26a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d26e:	e9c3 1200 	strd	r1, r2, [r3]
 800d272:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800d276:	f04f 0000 	mov.w	r0, #0
 800d27a:	f04f 0100 	mov.w	r1, #0
 800d27e:	0890      	lsrs	r0, r2, #2
 800d280:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800d284:	0899      	lsrs	r1, r3, #2
 800d286:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
 800d28a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d28e:	f001 3333 	and.w	r3, r1, #858993459	; 0x33333333
 800d292:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d296:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800d29a:	f002 31cc 	and.w	r1, r2, #3435973836	; 0xcccccccc
 800d29e:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800d2a2:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 800d2a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d2aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d2ae:	3338      	adds	r3, #56	; 0x38
 800d2b0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d2b4:	4642      	mov	r2, r8
 800d2b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d2ba:	4621      	mov	r1, r4
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800d2c2:	464a      	mov	r2, r9
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800d2cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d2d0:	e9c3 1200 	strd	r1, r2, [r3]

	SWAP8(q[0], q[4]);
 800d2d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	e9c7 23a2 	strd	r2, r3, [r7, #648]	; 0x288
 800d2e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d2e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2e8:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
 800d2ec:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800d2f0:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d2f4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800d2f8:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d2fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d300:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800d304:	f04f 0000 	mov.w	r0, #0
 800d308:	f04f 0100 	mov.w	r1, #0
 800d30c:	0119      	lsls	r1, r3, #4
 800d30e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d312:	0110      	lsls	r0, r2, #4
 800d314:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d31c:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d324:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800d328:	4623      	mov	r3, r4
 800d32a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d32e:	4602      	mov	r2, r0
 800d330:	4313      	orrs	r3, r2
 800d332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d336:	462b      	mov	r3, r5
 800d338:	460a      	mov	r2, r1
 800d33a:	4313      	orrs	r3, r2
 800d33c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d340:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d344:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d348:	e9c3 1200 	strd	r1, r2, [r3]
 800d34c:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800d350:	f04f 0000 	mov.w	r0, #0
 800d354:	f04f 0100 	mov.w	r1, #0
 800d358:	0910      	lsrs	r0, r2, #4
 800d35a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d35e:	0919      	lsrs	r1, r3, #4
 800d360:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d368:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d36c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d370:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800d374:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d378:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800d37c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d384:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d388:	3320      	adds	r3, #32
 800d38a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800d38e:	4642      	mov	r2, r8
 800d390:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800d394:	4621      	mov	r1, r4
 800d396:	430a      	orrs	r2, r1
 800d398:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800d39c:	464a      	mov	r2, r9
 800d39e:	4629      	mov	r1, r5
 800d3a0:	430a      	orrs	r2, r1
 800d3a2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d3a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d3aa:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[1], q[5]);
 800d3ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d3b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d3b6:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 800d3ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d3be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800d3c2:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
 800d3c6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d3ca:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d3ce:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800d3d2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d3d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3da:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d3de:	f04f 0000 	mov.w	r0, #0
 800d3e2:	f04f 0100 	mov.w	r1, #0
 800d3e6:	0119      	lsls	r1, r3, #4
 800d3e8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d3ec:	0110      	lsls	r0, r2, #4
 800d3ee:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d3f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d3f6:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d3fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d402:	3308      	adds	r3, #8
 800d404:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800d408:	4642      	mov	r2, r8
 800d40a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d40e:	4621      	mov	r1, r4
 800d410:	430a      	orrs	r2, r1
 800d412:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800d416:	464a      	mov	r2, r9
 800d418:	4629      	mov	r1, r5
 800d41a:	430a      	orrs	r2, r1
 800d41c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d420:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d424:	e9c3 1200 	strd	r1, r2, [r3]
 800d428:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800d42c:	f04f 0000 	mov.w	r0, #0
 800d430:	f04f 0100 	mov.w	r1, #0
 800d434:	0910      	lsrs	r0, r2, #4
 800d436:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d43a:	0919      	lsrs	r1, r3, #4
 800d43c:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d444:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d44c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800d450:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d454:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d458:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d45c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d460:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d464:	3328      	adds	r3, #40	; 0x28
 800d466:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800d46a:	4642      	mov	r2, r8
 800d46c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800d470:	4621      	mov	r1, r4
 800d472:	430a      	orrs	r2, r1
 800d474:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d478:	464a      	mov	r2, r9
 800d47a:	4629      	mov	r1, r5
 800d47c:	430a      	orrs	r2, r1
 800d47e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d486:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[2], q[6]);
 800d48a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d48e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d492:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
 800d496:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d49a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800d49e:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
 800d4a2:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d4a6:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d4aa:	67b9      	str	r1, [r7, #120]	; 0x78
 800d4ac:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d4b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d4b2:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d4b6:	f04f 0000 	mov.w	r0, #0
 800d4ba:	f04f 0100 	mov.w	r1, #0
 800d4be:	0119      	lsls	r1, r3, #4
 800d4c0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d4c4:	0110      	lsls	r0, r2, #4
 800d4c6:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d4ca:	673b      	str	r3, [r7, #112]	; 0x70
 800d4cc:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d4d0:	677b      	str	r3, [r7, #116]	; 0x74
 800d4d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d4d6:	3310      	adds	r3, #16
 800d4d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d4dc:	4642      	mov	r2, r8
 800d4de:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	430a      	orrs	r2, r1
 800d4e6:	66ba      	str	r2, [r7, #104]	; 0x68
 800d4e8:	464a      	mov	r2, r9
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	430a      	orrs	r2, r1
 800d4ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d4f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d4f4:	e9c3 1200 	strd	r1, r2, [r3]
 800d4f8:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800d4fc:	f04f 0000 	mov.w	r0, #0
 800d500:	f04f 0100 	mov.w	r1, #0
 800d504:	0910      	lsrs	r0, r2, #4
 800d506:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800d50a:	0919      	lsrs	r1, r3, #4
 800d50c:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
 800d510:	663b      	str	r3, [r7, #96]	; 0x60
 800d512:	f001 330f 	and.w	r3, r1, #252645135	; 0xf0f0f0f
 800d516:	667b      	str	r3, [r7, #100]	; 0x64
 800d518:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800d51c:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d520:	65b9      	str	r1, [r7, #88]	; 0x58
 800d522:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d526:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d528:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d52c:	3330      	adds	r3, #48	; 0x30
 800d52e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d532:	4642      	mov	r2, r8
 800d534:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d538:	4621      	mov	r1, r4
 800d53a:	430a      	orrs	r2, r1
 800d53c:	653a      	str	r2, [r7, #80]	; 0x50
 800d53e:	464a      	mov	r2, r9
 800d540:	4629      	mov	r1, r5
 800d542:	430a      	orrs	r2, r1
 800d544:	657a      	str	r2, [r7, #84]	; 0x54
 800d546:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d54a:	e9c3 1200 	strd	r1, r2, [r3]
	SWAP8(q[3], q[7]);
 800d54e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d552:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d556:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
 800d55a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d55e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d562:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 800d566:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800d56a:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d56e:	64b9      	str	r1, [r7, #72]	; 0x48
 800d570:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d574:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d576:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d57a:	f04f 0000 	mov.w	r0, #0
 800d57e:	f04f 0100 	mov.w	r1, #0
 800d582:	0119      	lsls	r1, r3, #4
 800d584:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800d588:	0110      	lsls	r0, r2, #4
 800d58a:	f000 33f0 	and.w	r3, r0, #4042322160	; 0xf0f0f0f0
 800d58e:	643b      	str	r3, [r7, #64]	; 0x40
 800d590:	f001 33f0 	and.w	r3, r1, #4042322160	; 0xf0f0f0f0
 800d594:	647b      	str	r3, [r7, #68]	; 0x44
 800d596:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d59a:	3318      	adds	r3, #24
 800d59c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800d5a0:	4642      	mov	r2, r8
 800d5a2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	430a      	orrs	r2, r1
 800d5aa:	63ba      	str	r2, [r7, #56]	; 0x38
 800d5ac:	464a      	mov	r2, r9
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	430a      	orrs	r2, r1
 800d5b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d5b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d5b8:	e9c3 1200 	strd	r1, r2, [r3]
 800d5bc:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800d5c0:	f04f 0200 	mov.w	r2, #0
 800d5c4:	f04f 0300 	mov.w	r3, #0
 800d5c8:	0902      	lsrs	r2, r0, #4
 800d5ca:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d5ce:	090b      	lsrs	r3, r1, #4
 800d5d0:	f002 310f 	and.w	r1, r2, #252645135	; 0xf0f0f0f
 800d5d4:	6339      	str	r1, [r7, #48]	; 0x30
 800d5d6:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d5da:	637b      	str	r3, [r7, #52]	; 0x34
 800d5dc:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800d5e0:	f002 31f0 	and.w	r1, r2, #4042322160	; 0xf0f0f0f0
 800d5e4:	62b9      	str	r1, [r7, #40]	; 0x28
 800d5e6:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 800d5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d5f0:	3338      	adds	r3, #56	; 0x38
 800d5f2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d5f6:	4642      	mov	r2, r8
 800d5f8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	430a      	orrs	r2, r1
 800d600:	623a      	str	r2, [r7, #32]
 800d602:	464a      	mov	r2, r9
 800d604:	4629      	mov	r1, r5
 800d606:	430a      	orrs	r2, r1
 800d608:	627a      	str	r2, [r7, #36]	; 0x24
 800d60a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d60e:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d612:	bf00      	nop
 800d614:	f507 7745 	add.w	r7, r7, #788	; 0x314
 800d618:	46bd      	mov	sp, r7
 800d61a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d61e:	4770      	bx	lr

0800d620 <br_aes_ct64_interleave_in>:

static void br_aes_ct64_interleave_in(uint64_t *q0, uint64_t *q1, const uint32_t *w)
{
 800d620:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d624:	b0bb      	sub	sp, #236	; 0xec
 800d626:	af00      	add	r7, sp, #0
 800d628:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d62c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d630:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
	uint64_t x0, x1, x2, x3;

	x0 = w[0];
 800d634:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2200      	movs	r2, #0
 800d63c:	469a      	mov	sl, r3
 800d63e:	4693      	mov	fp, r2
 800d640:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
	x1 = w[1];
 800d644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d648:	3304      	adds	r3, #4
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2200      	movs	r2, #0
 800d64e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d652:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d656:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d65a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	x2 = w[2];
 800d65e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d662:	3308      	adds	r3, #8
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2200      	movs	r2, #0
 800d668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d66c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d674:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	x3 = w[3];
 800d678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d67c:	330c      	adds	r3, #12
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2200      	movs	r2, #0
 800d682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d686:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800d68a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d68e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	x0 |= (x0 << 16);
 800d692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d696:	0c1d      	lsrs	r5, r3, #16
 800d698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d69c:	041c      	lsls	r4, r3, #16
 800d69e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d6a2:	ea42 0104 	orr.w	r1, r2, r4
 800d6a6:	67b9      	str	r1, [r7, #120]	; 0x78
 800d6a8:	432b      	orrs	r3, r5
 800d6aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d6ac:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d6b0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 16);
 800d6b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800d6bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d6c0:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800d6c4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d6c8:	ea42 0108 	orr.w	r1, r2, r8
 800d6cc:	6739      	str	r1, [r7, #112]	; 0x70
 800d6ce:	ea43 0309 	orr.w	r3, r3, r9
 800d6d2:	677b      	str	r3, [r7, #116]	; 0x74
 800d6d4:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d6d8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 16);
 800d6dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d6e0:	0c1b      	lsrs	r3, r3, #16
 800d6e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d6ea:	041b      	lsls	r3, r3, #16
 800d6ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d6f0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d6f4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	4311      	orrs	r1, r2
 800d6fc:	66b9      	str	r1, [r7, #104]	; 0x68
 800d6fe:	4629      	mov	r1, r5
 800d700:	4319      	orrs	r1, r3
 800d702:	66f9      	str	r1, [r7, #108]	; 0x6c
 800d704:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d708:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 16);
 800d70c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d710:	0c1b      	lsrs	r3, r3, #16
 800d712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d71a:	041b      	lsls	r3, r3, #16
 800d71c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d720:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d724:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d728:	4621      	mov	r1, r4
 800d72a:	4311      	orrs	r1, r2
 800d72c:	6639      	str	r1, [r7, #96]	; 0x60
 800d72e:	4629      	mov	r1, r5
 800d730:	4319      	orrs	r1, r3
 800d732:	6679      	str	r1, [r7, #100]	; 0x64
 800d734:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d738:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800d73c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d748:	ea00 0402 	and.w	r4, r0, r2
 800d74c:	65bc      	str	r4, [r7, #88]	; 0x58
 800d74e:	400b      	ands	r3, r1
 800d750:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d752:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d756:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800d75a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d766:	ea00 0402 	and.w	r4, r0, r2
 800d76a:	653c      	str	r4, [r7, #80]	; 0x50
 800d76c:	400b      	ands	r3, r1
 800d76e:	657b      	str	r3, [r7, #84]	; 0x54
 800d770:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d774:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800d778:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d77c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d784:	ea00 0402 	and.w	r4, r0, r2
 800d788:	64bc      	str	r4, [r7, #72]	; 0x48
 800d78a:	400b      	ands	r3, r1
 800d78c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d78e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d792:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800d796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d79a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d79e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7a2:	ea00 0402 	and.w	r4, r0, r2
 800d7a6:	643c      	str	r4, [r7, #64]	; 0x40
 800d7a8:	400b      	ands	r3, r1
 800d7aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d7ac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d7b0:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 |= (x0 << 8);
 800d7b4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d7b8:	f04f 0000 	mov.w	r0, #0
 800d7bc:	f04f 0100 	mov.w	r1, #0
 800d7c0:	0219      	lsls	r1, r3, #8
 800d7c2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d7c6:	0210      	lsls	r0, r2, #8
 800d7c8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d7cc:	ea42 0400 	orr.w	r4, r2, r0
 800d7d0:	63bc      	str	r4, [r7, #56]	; 0x38
 800d7d2:	430b      	orrs	r3, r1
 800d7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d7da:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 |= (x1 << 8);
 800d7de:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d7e2:	f04f 0000 	mov.w	r0, #0
 800d7e6:	f04f 0100 	mov.w	r1, #0
 800d7ea:	0219      	lsls	r1, r3, #8
 800d7ec:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d7f0:	0210      	lsls	r0, r2, #8
 800d7f2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d7f6:	ea42 0400 	orr.w	r4, r2, r0
 800d7fa:	633c      	str	r4, [r7, #48]	; 0x30
 800d7fc:	430b      	orrs	r3, r1
 800d7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d800:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d804:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 |= (x2 << 8);
 800d808:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d80c:	f04f 0000 	mov.w	r0, #0
 800d810:	f04f 0100 	mov.w	r1, #0
 800d814:	0219      	lsls	r1, r3, #8
 800d816:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d81a:	0210      	lsls	r0, r2, #8
 800d81c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d820:	ea42 0400 	orr.w	r4, r2, r0
 800d824:	62bc      	str	r4, [r7, #40]	; 0x28
 800d826:	430b      	orrs	r3, r1
 800d828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d82a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d82e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 |= (x3 << 8);
 800d832:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d836:	f04f 0000 	mov.w	r0, #0
 800d83a:	f04f 0100 	mov.w	r1, #0
 800d83e:	0219      	lsls	r1, r3, #8
 800d840:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d844:	0210      	lsls	r0, r2, #8
 800d846:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d84a:	ea42 0400 	orr.w	r4, r2, r0
 800d84e:	623c      	str	r4, [r7, #32]
 800d850:	430b      	orrs	r3, r1
 800d852:	627b      	str	r3, [r7, #36]	; 0x24
 800d854:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d858:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	x0 &= (uint64_t)0x00FF00FF00FF00FF;
 800d85c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d860:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d864:	61b9      	str	r1, [r7, #24]
 800d866:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d86a:	61fb      	str	r3, [r7, #28]
 800d86c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d870:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	x1 &= (uint64_t)0x00FF00FF00FF00FF;
 800d874:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800d878:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d87c:	6139      	str	r1, [r7, #16]
 800d87e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d888:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	x2 &= (uint64_t)0x00FF00FF00FF00FF;
 800d88c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d890:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d8a0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	x3 &= (uint64_t)0x00FF00FF00FF00FF;
 800d8a4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d8a8:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800d8ac:	6039      	str	r1, [r7, #0]
 800d8ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d8b2:	607b      	str	r3, [r7, #4]
 800d8b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d8b8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	*q0 = x0 | (x2 << 8);
 800d8bc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d8c0:	f04f 0200 	mov.w	r2, #0
 800d8c4:	f04f 0300 	mov.w	r3, #0
 800d8c8:	020b      	lsls	r3, r1, #8
 800d8ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d8ce:	0202      	lsls	r2, r0, #8
 800d8d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d8d4:	ea42 0400 	orr.w	r4, r2, r0
 800d8d8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800d8dc:	430b      	orrs	r3, r1
 800d8de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d8e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d8e6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d8ea:	e9c3 1200 	strd	r1, r2, [r3]
	*q1 = x1 | (x3 << 8);
 800d8ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d8f2:	f04f 0200 	mov.w	r2, #0
 800d8f6:	f04f 0300 	mov.w	r3, #0
 800d8fa:	020b      	lsls	r3, r1, #8
 800d8fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d900:	0202      	lsls	r2, r0, #8
 800d902:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800d906:	ea42 0400 	orr.w	r4, r2, r0
 800d90a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800d90e:	430b      	orrs	r3, r1
 800d910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d918:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d91c:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d920:	bf00      	nop
 800d922:	37ec      	adds	r7, #236	; 0xec
 800d924:	46bd      	mov	sp, r7
 800d926:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d92a:	4770      	bx	lr

0800d92c <br_aes_ct64_interleave_out>:

static void br_aes_ct64_interleave_out(uint32_t *w, uint64_t q0, uint64_t q1)
{
 800d92c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d930:	b09f      	sub	sp, #124	; 0x7c
 800d932:	af00      	add	r7, sp, #0
 800d934:	6578      	str	r0, [r7, #84]	; 0x54
 800d936:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint64_t x0, x1, x2, x3;

	x0 = q0 & (uint64_t)0x00FF00FF00FF00FF;
 800d93a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d93e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 800d942:	f003 15ff 	and.w	r5, r3, #16711935	; 0xff00ff
 800d946:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
	x1 = q1 & (uint64_t)0x00FF00FF00FF00FF;
 800d94a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d94e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 800d952:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 800d956:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	x2 = (q0 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d95a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d95e:	f04f 0000 	mov.w	r0, #0
 800d962:	f04f 0100 	mov.w	r1, #0
 800d966:	0a10      	lsrs	r0, r2, #8
 800d968:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d96c:	0a19      	lsrs	r1, r3, #8
 800d96e:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 800d972:	f001 1bff 	and.w	fp, r1, #16711935	; 0xff00ff
 800d976:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	x3 = (q1 >> 8) & (uint64_t)0x00FF00FF00FF00FF;
 800d97a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d97e:	f04f 0000 	mov.w	r0, #0
 800d982:	f04f 0100 	mov.w	r1, #0
 800d986:	0a10      	lsrs	r0, r2, #8
 800d988:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d98c:	0a19      	lsrs	r1, r3, #8
 800d98e:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 800d992:	643b      	str	r3, [r7, #64]	; 0x40
 800d994:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800d998:	647b      	str	r3, [r7, #68]	; 0x44
 800d99a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d99e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 |= (x0 >> 8);
 800d9a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d9a6:	f04f 0000 	mov.w	r0, #0
 800d9aa:	f04f 0100 	mov.w	r1, #0
 800d9ae:	0a10      	lsrs	r0, r2, #8
 800d9b0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d9b4:	0a19      	lsrs	r1, r3, #8
 800d9b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d9ba:	ea42 0400 	orr.w	r4, r2, r0
 800d9be:	63bc      	str	r4, [r7, #56]	; 0x38
 800d9c0:	430b      	orrs	r3, r1
 800d9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9c4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d9c8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 |= (x1 >> 8);
 800d9cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d9d0:	f04f 0000 	mov.w	r0, #0
 800d9d4:	f04f 0100 	mov.w	r1, #0
 800d9d8:	0a10      	lsrs	r0, r2, #8
 800d9da:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d9de:	0a19      	lsrs	r1, r3, #8
 800d9e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d9e4:	ea42 0400 	orr.w	r4, r2, r0
 800d9e8:	633c      	str	r4, [r7, #48]	; 0x30
 800d9ea:	430b      	orrs	r3, r1
 800d9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d9f2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 |= (x2 >> 8);
 800d9f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d9fa:	f04f 0000 	mov.w	r0, #0
 800d9fe:	f04f 0100 	mov.w	r1, #0
 800da02:	0a10      	lsrs	r0, r2, #8
 800da04:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800da08:	0a19      	lsrs	r1, r3, #8
 800da0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800da0e:	ea42 0400 	orr.w	r4, r2, r0
 800da12:	62bc      	str	r4, [r7, #40]	; 0x28
 800da14:	430b      	orrs	r3, r1
 800da16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da18:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800da1c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 |= (x3 >> 8);
 800da20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800da24:	f04f 0000 	mov.w	r0, #0
 800da28:	f04f 0100 	mov.w	r1, #0
 800da2c:	0a10      	lsrs	r0, r2, #8
 800da2e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800da32:	0a19      	lsrs	r1, r3, #8
 800da34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800da38:	ea42 0400 	orr.w	r4, r2, r0
 800da3c:	623c      	str	r4, [r7, #32]
 800da3e:	430b      	orrs	r3, r1
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
 800da42:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800da46:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	x0 &= (uint64_t)0x0000FFFF0000FFFF;
 800da4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800da4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800da52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da56:	ea02 0400 	and.w	r4, r2, r0
 800da5a:	61bc      	str	r4, [r7, #24]
 800da5c:	400b      	ands	r3, r1
 800da5e:	61fb      	str	r3, [r7, #28]
 800da60:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800da64:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x1 &= (uint64_t)0x0000FFFF0000FFFF;
 800da68:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800da6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800da70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da74:	ea02 0400 	and.w	r4, r2, r0
 800da78:	613c      	str	r4, [r7, #16]
 800da7a:	400b      	ands	r3, r1
 800da7c:	617b      	str	r3, [r7, #20]
 800da7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800da82:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	x2 &= (uint64_t)0x0000FFFF0000FFFF;
 800da86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800da8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800da8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da92:	ea02 0400 	and.w	r4, r2, r0
 800da96:	60bc      	str	r4, [r7, #8]
 800da98:	400b      	ands	r3, r1
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800daa0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	x3 &= (uint64_t)0x0000FFFF0000FFFF;
 800daa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800daa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800daac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dab0:	ea02 0400 	and.w	r4, r2, r0
 800dab4:	603c      	str	r4, [r7, #0]
 800dab6:	400b      	ands	r3, r1
 800dab8:	607b      	str	r3, [r7, #4]
 800daba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dabe:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	w[0] = (uint32_t)x0 | (uint32_t)(x0 >> 16);
 800dac2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800dac4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800dac8:	f04f 0200 	mov.w	r2, #0
 800dacc:	f04f 0300 	mov.w	r3, #0
 800dad0:	0c02      	lsrs	r2, r0, #16
 800dad2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dad6:	0c0b      	lsrs	r3, r1, #16
 800dad8:	4613      	mov	r3, r2
 800dada:	ea44 0203 	orr.w	r2, r4, r3
 800dade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dae0:	601a      	str	r2, [r3, #0]
	w[1] = (uint32_t)x1 | (uint32_t)(x1 >> 16);
 800dae2:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800dae4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dae8:	f04f 0200 	mov.w	r2, #0
 800daec:	f04f 0300 	mov.w	r3, #0
 800daf0:	0c02      	lsrs	r2, r0, #16
 800daf2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800daf6:	0c0b      	lsrs	r3, r1, #16
 800daf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dafa:	3304      	adds	r3, #4
 800dafc:	4322      	orrs	r2, r4
 800dafe:	601a      	str	r2, [r3, #0]
	w[2] = (uint32_t)x2 | (uint32_t)(x2 >> 16);
 800db00:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800db02:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800db06:	f04f 0200 	mov.w	r2, #0
 800db0a:	f04f 0300 	mov.w	r3, #0
 800db0e:	0c02      	lsrs	r2, r0, #16
 800db10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800db14:	0c0b      	lsrs	r3, r1, #16
 800db16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db18:	3308      	adds	r3, #8
 800db1a:	4322      	orrs	r2, r4
 800db1c:	601a      	str	r2, [r3, #0]
	w[3] = (uint32_t)x3 | (uint32_t)(x3 >> 16);
 800db1e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800db20:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800db24:	f04f 0200 	mov.w	r2, #0
 800db28:	f04f 0300 	mov.w	r3, #0
 800db2c:	0c02      	lsrs	r2, r0, #16
 800db2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800db32:	0c0b      	lsrs	r3, r1, #16
 800db34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db36:	330c      	adds	r3, #12
 800db38:	4322      	orrs	r2, r4
 800db3a:	601a      	str	r2, [r3, #0]
}
 800db3c:	bf00      	nop
 800db3e:	377c      	adds	r7, #124	; 0x7c
 800db40:	46bd      	mov	sp, r7
 800db42:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800db46:	4770      	bx	lr

0800db48 <sub_word>:
static const uint8_t Rcon[] = {
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

static uint32_t sub_word(uint32_t x)
{
 800db48:	b5b0      	push	{r4, r5, r7, lr}
 800db4a:	b092      	sub	sp, #72	; 0x48
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	uint64_t q[8];

	memset(q, 0, sizeof q);
 800db50:	f107 0308 	add.w	r3, r7, #8
 800db54:	2240      	movs	r2, #64	; 0x40
 800db56:	2100      	movs	r1, #0
 800db58:	4618      	mov	r0, r3
 800db5a:	f008 fab5 	bl	80160c8 <memset>
	q[0] = x;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	461c      	mov	r4, r3
 800db64:	4615      	mov	r5, r2
 800db66:	e9c7 4502 	strd	r4, r5, [r7, #8]
	br_aes_ct64_ortho(q);
 800db6a:	f107 0308 	add.w	r3, r7, #8
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff f857 	bl	800cc22 <br_aes_ct64_ortho>
	br_aes_ct64_bitslice_Sbox(q);
 800db74:	f107 0308 	add.w	r3, r7, #8
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd fe4d 	bl	800b818 <br_aes_ct64_bitslice_Sbox>
	br_aes_ct64_ortho(q);
 800db7e:	f107 0308 	add.w	r3, r7, #8
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff f84d 	bl	800cc22 <br_aes_ct64_ortho>
	return (uint32_t)q[0];
 800db88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db8c:	4613      	mov	r3, r2
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3748      	adds	r7, #72	; 0x48
 800db92:	46bd      	mov	sp, r7
 800db94:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800db98 <br_aes_ct64_keysched>:

static void br_aes_ct64_keysched(uint64_t *comp_skey, const uint8_t *key)
{
 800db98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db9c:	b0ec      	sub	sp, #432	; 0x1b0
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dba4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800dba8:	6018      	str	r0, [r3, #0]
 800dbaa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbae:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800dbb2:	6019      	str	r1, [r3, #0]
	int i, j, k, nk, nkf;
	uint32_t tmp;
	uint32_t skey[60];

	int key_len = 32;
 800dbb4:	2320      	movs	r3, #32
 800dbb6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	nk = (int)(key_len >> 2);
 800dbba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbbe:	109b      	asrs	r3, r3, #2
 800dbc0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	nkf = (int)((14 + 1) << 2);
 800dbc4:	233c      	movs	r3, #60	; 0x3c
 800dbc6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	br_range_dec32le(skey, (key_len >> 2), key);
 800dbca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbce:	109b      	asrs	r3, r3, #2
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbd6:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800dbda:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	f7fd fdaa 	bl	800b738 <br_range_dec32le>
	tmp = skey[(key_len >> 2) - 1];
 800dbe4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800dbe8:	109b      	asrs	r3, r3, #2
 800dbea:	1e5a      	subs	r2, r3, #1
 800dbec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800dbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800dbfc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800dc00:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800dc04:	2300      	movs	r3, #0
 800dc06:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800dc10:	e057      	b.n	800dcc2 <br_aes_ct64_keysched+0x12a>
		if (j == 0) {
 800dc12:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d113      	bne.n	800dc42 <br_aes_ct64_keysched+0xaa>
			tmp = (tmp << 24) | (tmp >> 8);
 800dc1a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800dc1e:	ea4f 2333 	mov.w	r3, r3, ror #8
 800dc22:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			tmp = sub_word(tmp) ^ Rcon[k];
 800dc26:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800dc2a:	f7ff ff8d 	bl	800db48 <sub_word>
 800dc2e:	4601      	mov	r1, r0
 800dc30:	4aba      	ldr	r2, [pc, #744]	; (800df1c <br_aes_ct64_keysched+0x384>)
 800dc32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800dc36:	4413      	add	r3, r2
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	404b      	eors	r3, r1
 800dc3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800dc40:	e00d      	b.n	800dc5e <br_aes_ct64_keysched+0xc6>
		} else if (nk > 6 && j == 4) {
 800dc42:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800dc46:	2b06      	cmp	r3, #6
 800dc48:	dd09      	ble.n	800dc5e <br_aes_ct64_keysched+0xc6>
 800dc4a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dc4e:	2b04      	cmp	r3, #4
 800dc50:	d105      	bne.n	800dc5e <br_aes_ct64_keysched+0xc6>
			tmp = sub_word(tmp);
 800dc52:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800dc56:	f7ff ff77 	bl	800db48 <sub_word>
 800dc5a:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		}
		tmp ^= skey[i - nk];
 800dc5e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dc62:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800dc66:	1ad2      	subs	r2, r2, r3
 800dc68:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800dc70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800dc78:	4053      	eors	r3, r2
 800dc7a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		skey[i] = tmp;
 800dc7e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc82:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 800dc86:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dc8a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800dc8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		if (++ j == nk) {
 800dc92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dc96:	3301      	adds	r3, #1
 800dc98:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800dc9c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800dca0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d107      	bne.n	800dcb8 <br_aes_ct64_keysched+0x120>
			j = 0;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
			k ++;
 800dcae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	for (i = nk, j = 0, k = 0; i < nkf; i ++) {
 800dcb8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800dcc2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800dcc6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800dcca:	429a      	cmp	r2, r3
 800dccc:	dba1      	blt.n	800dc12 <br_aes_ct64_keysched+0x7a>
		}
	}

	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800dcda:	e110      	b.n	800defe <br_aes_ct64_keysched+0x366>
		uint64_t q[8];

		br_aes_ct64_interleave_in(&q[0], &q[4], skey + i);
 800dcdc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800dce0:	009a      	lsls	r2, r3, #2
 800dce2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dce6:	441a      	add	r2, r3
 800dce8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dcec:	f103 0120 	add.w	r1, r3, #32
 800dcf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff fc93 	bl	800d620 <br_aes_ct64_interleave_in>
		q[1] = q[0];
 800dcfa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dcfe:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd06:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd0a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd0e:	e9c3 0102 	strd	r0, r1, [r3, #8]
		q[2] = q[0];
 800dd12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd16:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd1e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd22:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd26:	e9c3 0104 	strd	r0, r1, [r3, #16]
		q[3] = q[0];
 800dd2a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd3a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd3e:	e9c3 0106 	strd	r0, r1, [r3, #24]
		q[5] = q[4];
 800dd42:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd46:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd4a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800dd4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd52:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd56:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
		q[6] = q[4];
 800dd5a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd5e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd62:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800dd66:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd6a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd6e:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
		q[7] = q[4];
 800dd72:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd76:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd7a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800dd7e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd82:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd86:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
		br_aes_ct64_ortho(q);
 800dd8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe ff47 	bl	800cc22 <br_aes_ct64_ortho>
		comp_skey[j + 0] =
			  (q[0] & (uint64_t)0x1111111111111111)
 800dd94:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dd98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda0:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800dda4:	6539      	str	r1, [r7, #80]	; 0x50
 800dda6:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800ddaa:	657b      	str	r3, [r7, #84]	; 0x54
			| (q[1] & (uint64_t)0x2222222222222222)
 800ddac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ddb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ddb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ddb8:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800ddbc:	62b9      	str	r1, [r7, #40]	; 0x28
 800ddbe:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800ddc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ddca:	4602      	mov	r2, r0
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddd2:	460a      	mov	r2, r1
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	64fb      	str	r3, [r7, #76]	; 0x4c
			| (q[2] & (uint64_t)0x4444444444444444)
 800ddd8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dddc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800dde0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dde4:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800dde8:	6239      	str	r1, [r7, #32]
 800ddea:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800ddee:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddf2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	643b      	str	r3, [r7, #64]	; 0x40
 800ddfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddfe:	460a      	mov	r2, r1
 800de00:	4313      	orrs	r3, r2
 800de02:	647b      	str	r3, [r7, #68]	; 0x44
			| (q[3] & (uint64_t)0x8888888888888888);
 800de04:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800de0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800de10:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800de14:	63b9      	str	r1, [r7, #56]	; 0x38
 800de16:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
		comp_skey[j + 0] =
 800de1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800de20:	00da      	lsls	r2, r3, #3
 800de22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de26:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4413      	add	r3, r2
			| (q[3] & (uint64_t)0x8888888888888888);
 800de2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de32:	430a      	orrs	r2, r1
 800de34:	61ba      	str	r2, [r7, #24]
 800de36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de3a:	430a      	orrs	r2, r1
 800de3c:	61fa      	str	r2, [r7, #28]
		comp_skey[j + 0] =
 800de3e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800de42:	e9c3 1200 	strd	r1, r2, [r3]
		comp_skey[j + 1] =
			  (q[4] & (uint64_t)0x1111111111111111)
 800de46:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800de4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de52:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800de56:	6339      	str	r1, [r7, #48]	; 0x30
 800de58:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34
			| (q[5] & (uint64_t)0x2222222222222222)
 800de5e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de62:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800de66:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800de6a:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800de6e:	6139      	str	r1, [r7, #16]
 800de70:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800de74:	617b      	str	r3, [r7, #20]
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800de7c:	4602      	mov	r2, r0
 800de7e:	4313      	orrs	r3, r2
 800de80:	60bb      	str	r3, [r7, #8]
 800de82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de84:	460a      	mov	r2, r1
 800de86:	4313      	orrs	r3, r2
 800de88:	60fb      	str	r3, [r7, #12]
			| (q[6] & (uint64_t)0x4444444444444444)
 800de8a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de8e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800de92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800de96:	f002 3a44 	and.w	sl, r2, #1145324612	; 0x44444444
 800de9a:	f003 3b44 	and.w	fp, r3, #1145324612	; 0x44444444
 800de9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dea2:	460b      	mov	r3, r1
 800dea4:	ea43 080a 	orr.w	r8, r3, sl
 800dea8:	4613      	mov	r3, r2
 800deaa:	ea43 090b 	orr.w	r9, r3, fp
			| (q[7] & (uint64_t)0x8888888888888888);
 800deae:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800deb2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800deb6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800deba:	f002 3488 	and.w	r4, r2, #2290649224	; 0x88888888
 800debe:	f003 3588 	and.w	r5, r3, #2290649224	; 0x88888888
		comp_skey[j + 1] =
 800dec2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800dec6:	3301      	adds	r3, #1
 800dec8:	00da      	lsls	r2, r3, #3
 800deca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dece:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4413      	add	r3, r2
			| (q[7] & (uint64_t)0x8888888888888888);
 800ded6:	ea48 0204 	orr.w	r2, r8, r4
 800deda:	603a      	str	r2, [r7, #0]
 800dedc:	ea49 0205 	orr.w	r2, r9, r5
 800dee0:	607a      	str	r2, [r7, #4]
		comp_skey[j + 1] =
 800dee2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dee6:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0, j = 0; i < nkf; i += 4, j += 2) {
 800deea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800deee:	3304      	adds	r3, #4
 800def0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800def4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800def8:	3302      	adds	r3, #2
 800defa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800defe:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800df02:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800df06:	429a      	cmp	r2, r3
 800df08:	f6ff aee8 	blt.w	800dcdc <br_aes_ct64_keysched+0x144>
	}
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800df14:	46bd      	mov	sp, r7
 800df16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df1a:	bf00      	nop
 800df1c:	080174b4 	.word	0x080174b4

0800df20 <br_aes_ct64_skey_expand>:

static void br_aes_ct64_skey_expand(uint64_t *skey, const uint64_t *comp_skey)
{
 800df20:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800df24:	b098      	sub	sp, #96	; 0x60
 800df26:	af00      	add	r7, sp, #0
 800df28:	62f8      	str	r0, [r7, #44]	; 0x2c
 800df2a:	62b9      	str	r1, [r7, #40]	; 0x28
	unsigned u, v, n;

	n = (14 + 1) << 1;
 800df2c:	231e      	movs	r3, #30
 800df2e:	657b      	str	r3, [r7, #84]	; 0x54
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800df30:	2300      	movs	r3, #0
 800df32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df34:	2300      	movs	r3, #0
 800df36:	65bb      	str	r3, [r7, #88]	; 0x58
 800df38:	e0cb      	b.n	800e0d2 <br_aes_ct64_skey_expand+0x1b2>
		uint64_t x0, x1, x2, x3;

		x0 = x1 = x2 = x3 = comp_skey[u];
 800df3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df3c:	00da      	lsls	r2, r3, #3
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	4413      	add	r3, r2
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800df4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800df4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800df52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800df5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800df5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		x0 &= (uint64_t)0x1111111111111111;
 800df62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800df66:	f002 3111 	and.w	r1, r2, #286331153	; 0x11111111
 800df6a:	61b9      	str	r1, [r7, #24]
 800df6c:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800df76:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		x1 &= (uint64_t)0x2222222222222222;
 800df7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800df7e:	f002 3122 	and.w	r1, r2, #572662306	; 0x22222222
 800df82:	6139      	str	r1, [r7, #16]
 800df84:	f003 3322 	and.w	r3, r3, #572662306	; 0x22222222
 800df88:	617b      	str	r3, [r7, #20]
 800df8a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800df8e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		x2 &= (uint64_t)0x4444444444444444;
 800df92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df96:	f002 3144 	and.w	r1, r2, #1145324612	; 0x44444444
 800df9a:	60b9      	str	r1, [r7, #8]
 800df9c:	f003 3344 	and.w	r3, r3, #1145324612	; 0x44444444
 800dfa0:	60fb      	str	r3, [r7, #12]
 800dfa2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dfa6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		x3 &= (uint64_t)0x8888888888888888;
 800dfaa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dfae:	f002 3188 	and.w	r1, r2, #2290649224	; 0x88888888
 800dfb2:	6039      	str	r1, [r7, #0]
 800dfb4:	f003 3388 	and.w	r3, r3, #2290649224	; 0x88888888
 800dfb8:	607b      	str	r3, [r7, #4]
 800dfba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dfbe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		x1 >>= 1;
 800dfc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dfc6:	f04f 0000 	mov.w	r0, #0
 800dfca:	f04f 0100 	mov.w	r1, #0
 800dfce:	0850      	lsrs	r0, r2, #1
 800dfd0:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800dfd4:	0859      	lsrs	r1, r3, #1
 800dfd6:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
		x2 >>= 2;
 800dfda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dfde:	f04f 0000 	mov.w	r0, #0
 800dfe2:	f04f 0100 	mov.w	r1, #0
 800dfe6:	0890      	lsrs	r0, r2, #2
 800dfe8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800dfec:	0899      	lsrs	r1, r3, #2
 800dfee:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
		x3 >>= 3;
 800dff2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dff6:	f04f 0000 	mov.w	r0, #0
 800dffa:	f04f 0100 	mov.w	r1, #0
 800dffe:	08d0      	lsrs	r0, r2, #3
 800e000:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800e004:	08d9      	lsrs	r1, r3, #3
 800e006:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		skey[v + 0] = (x0 << 4) - x0;
 800e00a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e00e:	f04f 0000 	mov.w	r0, #0
 800e012:	f04f 0100 	mov.w	r1, #0
 800e016:	0119      	lsls	r1, r3, #4
 800e018:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e01c:	0110      	lsls	r0, r2, #4
 800e01e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e020:	00da      	lsls	r2, r3, #3
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	eb03 0c02 	add.w	ip, r3, r2
 800e028:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e02c:	1a84      	subs	r4, r0, r2
 800e02e:	623c      	str	r4, [r7, #32]
 800e030:	eb61 0303 	sbc.w	r3, r1, r3
 800e034:	627b      	str	r3, [r7, #36]	; 0x24
 800e036:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e03a:	e9cc 3400 	strd	r3, r4, [ip]
		skey[v + 1] = (x1 << 4) - x1;
 800e03e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e042:	f04f 0000 	mov.w	r0, #0
 800e046:	f04f 0100 	mov.w	r1, #0
 800e04a:	0119      	lsls	r1, r3, #4
 800e04c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e050:	0110      	lsls	r0, r2, #4
 800e052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e054:	3301      	adds	r3, #1
 800e056:	00da      	lsls	r2, r3, #3
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	189c      	adds	r4, r3, r2
 800e05c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e060:	1a85      	subs	r5, r0, r2
 800e062:	eb61 0603 	sbc.w	r6, r1, r3
 800e066:	e9c4 5600 	strd	r5, r6, [r4]
		skey[v + 2] = (x2 << 4) - x2;
 800e06a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e06e:	f04f 0000 	mov.w	r0, #0
 800e072:	f04f 0100 	mov.w	r1, #0
 800e076:	0119      	lsls	r1, r3, #4
 800e078:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e07c:	0110      	lsls	r0, r2, #4
 800e07e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e080:	3302      	adds	r3, #2
 800e082:	00da      	lsls	r2, r3, #3
 800e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e086:	189c      	adds	r4, r3, r2
 800e088:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e08c:	ebb0 0a02 	subs.w	sl, r0, r2
 800e090:	eb61 0b03 	sbc.w	fp, r1, r3
 800e094:	e9c4 ab00 	strd	sl, fp, [r4]
		skey[v + 3] = (x3 << 4) - x3;
 800e098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e09c:	f04f 0000 	mov.w	r0, #0
 800e0a0:	f04f 0100 	mov.w	r1, #0
 800e0a4:	0119      	lsls	r1, r3, #4
 800e0a6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e0aa:	0110      	lsls	r0, r2, #4
 800e0ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0ae:	3303      	adds	r3, #3
 800e0b0:	00da      	lsls	r2, r3, #3
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	189c      	adds	r4, r3, r2
 800e0b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e0ba:	ebb0 0802 	subs.w	r8, r0, r2
 800e0be:	eb61 0903 	sbc.w	r9, r1, r3
 800e0c2:	e9c4 8900 	strd	r8, r9, [r4]
	for (u = 0, v = 0; u < n; u ++, v += 4) {
 800e0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	f4ff af2f 	bcc.w	800df3a <br_aes_ct64_skey_expand+0x1a>
	}
}
 800e0dc:	bf00      	nop
 800e0de:	bf00      	nop
 800e0e0:	3760      	adds	r7, #96	; 0x60
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e0e8:	4770      	bx	lr

0800e0ea <add_round_key>:

static inline void add_round_key(uint64_t *q, const uint64_t *sk)
{
 800e0ea:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e0ee:	b08d      	sub	sp, #52	; 0x34
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e0f4:	62b9      	str	r1, [r7, #40]	; 0x28
	q[0] ^= sk[0];
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	ea80 0402 	eor.w	r4, r0, r2
 800e106:	ea81 0503 	eor.w	r5, r1, r3
 800e10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10c:	e9c3 4500 	strd	r4, r5, [r3]
	q[1] ^= sk[1];
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	3308      	adds	r3, #8
 800e114:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	3308      	adds	r3, #8
 800e11c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e122:	3308      	adds	r3, #8
 800e124:	ea84 0800 	eor.w	r8, r4, r0
 800e128:	ea85 0901 	eor.w	r9, r5, r1
 800e12c:	e9c3 8900 	strd	r8, r9, [r3]
	q[2] ^= sk[2];
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	3310      	adds	r3, #16
 800e134:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13a:	3310      	adds	r3, #16
 800e13c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e142:	3310      	adds	r3, #16
 800e144:	ea84 0a00 	eor.w	sl, r4, r0
 800e148:	ea85 0b01 	eor.w	fp, r5, r1
 800e14c:	e9c3 ab00 	strd	sl, fp, [r3]
	q[3] ^= sk[3];
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	3318      	adds	r3, #24
 800e154:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	3318      	adds	r3, #24
 800e15c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	3318      	adds	r3, #24
 800e164:	ea84 0200 	eor.w	r2, r4, r0
 800e168:	623a      	str	r2, [r7, #32]
 800e16a:	ea85 0201 	eor.w	r2, r5, r1
 800e16e:	627a      	str	r2, [r7, #36]	; 0x24
 800e170:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e174:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] ^= sk[4];
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	3320      	adds	r3, #32
 800e17c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e182:	3320      	adds	r3, #32
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800e18a:	3420      	adds	r4, #32
 800e18c:	ea80 0502 	eor.w	r5, r0, r2
 800e190:	61bd      	str	r5, [r7, #24]
 800e192:	404b      	eors	r3, r1
 800e194:	61fb      	str	r3, [r7, #28]
 800e196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e19a:	e9c4 2300 	strd	r2, r3, [r4]
	q[5] ^= sk[5];
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	3328      	adds	r3, #40	; 0x28
 800e1a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	3328      	adds	r3, #40	; 0x28
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800e1b0:	3428      	adds	r4, #40	; 0x28
 800e1b2:	ea80 0502 	eor.w	r5, r0, r2
 800e1b6:	613d      	str	r5, [r7, #16]
 800e1b8:	404b      	eors	r3, r1
 800e1ba:	617b      	str	r3, [r7, #20]
 800e1bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e1c0:	e9c4 2300 	strd	r2, r3, [r4]
	q[6] ^= sk[6];
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	3330      	adds	r3, #48	; 0x30
 800e1c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ce:	3330      	adds	r3, #48	; 0x30
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800e1d6:	3430      	adds	r4, #48	; 0x30
 800e1d8:	ea80 0502 	eor.w	r5, r0, r2
 800e1dc:	60bd      	str	r5, [r7, #8]
 800e1de:	404b      	eors	r3, r1
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e1e6:	e9c4 2300 	strd	r2, r3, [r4]
	q[7] ^= sk[7];
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	3338      	adds	r3, #56	; 0x38
 800e1ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f4:	3338      	adds	r3, #56	; 0x38
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800e1fc:	3438      	adds	r4, #56	; 0x38
 800e1fe:	ea80 0502 	eor.w	r5, r0, r2
 800e202:	603d      	str	r5, [r7, #0]
 800e204:	404b      	eors	r3, r1
 800e206:	607b      	str	r3, [r7, #4]
 800e208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e20c:	e9c4 2300 	strd	r2, r3, [r4]
}
 800e210:	bf00      	nop
 800e212:	3734      	adds	r7, #52	; 0x34
 800e214:	46bd      	mov	sp, r7
 800e216:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e21a:	4770      	bx	lr

0800e21c <shift_rows>:

static inline void shift_rows(uint64_t *q)
{
 800e21c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e220:	b09b      	sub	sp, #108	; 0x6c
 800e222:	af00      	add	r7, sp, #0
 800e224:	6578      	str	r0, [r7, #84]	; 0x54
	int i;

	for (i = 0; i < 8; i ++) {
 800e226:	2300      	movs	r3, #0
 800e228:	667b      	str	r3, [r7, #100]	; 0x64
 800e22a:	e0ab      	b.n	800e384 <shift_rows+0x168>
		uint64_t x;

		x = q[i];
 800e22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e22e:	00da      	lsls	r2, r3, #3
 800e230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e232:	4413      	add	r3, r2
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e23c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e240:	b293      	uxth	r3, r2
 800e242:	62bb      	str	r3, [r7, #40]	; 0x28
 800e244:	2300      	movs	r3, #0
 800e246:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ((x & (uint64_t)0x00000000FFF00000) >> 4)
 800e248:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e24c:	f04f 0000 	mov.w	r0, #0
 800e250:	f04f 0100 	mov.w	r1, #0
 800e254:	0910      	lsrs	r0, r2, #4
 800e256:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800e25a:	0919      	lsrs	r1, r3, #4
 800e25c:	f020 4870 	bic.w	r8, r0, #4026531840	; 0xf0000000
 800e260:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800e264:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800e268:	f04f 0900 	mov.w	r9, #0
 800e26c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e270:	460b      	mov	r3, r1
 800e272:	ea43 0308 	orr.w	r3, r3, r8
 800e276:	64bb      	str	r3, [r7, #72]	; 0x48
 800e278:	4613      	mov	r3, r2
 800e27a:	ea43 0309 	orr.w	r3, r3, r9
 800e27e:	64fb      	str	r3, [r7, #76]	; 0x4c
			| ((x & (uint64_t)0x00000000000F0000) << 12)
 800e280:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e284:	f04f 0000 	mov.w	r0, #0
 800e288:	f04f 0100 	mov.w	r1, #0
 800e28c:	0319      	lsls	r1, r3, #12
 800e28e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e292:	0310      	lsls	r0, r2, #12
 800e294:	f000 4370 	and.w	r3, r0, #4026531840	; 0xf0000000
 800e298:	623b      	str	r3, [r7, #32]
 800e29a:	2300      	movs	r3, #0
 800e29c:	627b      	str	r3, [r7, #36]	; 0x24
 800e29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	643b      	str	r3, [r7, #64]	; 0x40
 800e2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ac:	460a      	mov	r2, r1
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	647b      	str	r3, [r7, #68]	; 0x44
			| ((x & (uint64_t)0x0000FF0000000000) >> 8)
 800e2b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e2b6:	f04f 0000 	mov.w	r0, #0
 800e2ba:	f04f 0100 	mov.w	r1, #0
 800e2be:	0a10      	lsrs	r0, r2, #8
 800e2c0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800e2c4:	0a19      	lsrs	r1, r3, #8
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	61bb      	str	r3, [r7, #24]
 800e2ca:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800e2ce:	61fb      	str	r3, [r7, #28]
 800e2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2de:	460a      	mov	r2, r1
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
			| ((x & (uint64_t)0x000000FF00000000) << 8)
 800e2e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e2e8:	f04f 0000 	mov.w	r0, #0
 800e2ec:	f04f 0100 	mov.w	r1, #0
 800e2f0:	0219      	lsls	r1, r3, #8
 800e2f2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e2f6:	0210      	lsls	r0, r2, #8
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	613b      	str	r3, [r7, #16]
 800e2fc:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 800e300:	617b      	str	r3, [r7, #20]
 800e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e304:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e308:	4602      	mov	r2, r0
 800e30a:	4313      	orrs	r3, r2
 800e30c:	633b      	str	r3, [r7, #48]	; 0x30
 800e30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e310:	460a      	mov	r2, r1
 800e312:	4313      	orrs	r3, r2
 800e314:	637b      	str	r3, [r7, #52]	; 0x34
			| ((x & (uint64_t)0xF000000000000000) >> 12)
 800e316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e31a:	f04f 0000 	mov.w	r0, #0
 800e31e:	f04f 0100 	mov.w	r1, #0
 800e322:	0b10      	lsrs	r0, r2, #12
 800e324:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800e328:	0b19      	lsrs	r1, r3, #12
 800e32a:	2300      	movs	r3, #0
 800e32c:	60bb      	str	r3, [r7, #8]
 800e32e:	f401 2370 	and.w	r3, r1, #983040	; 0xf0000
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e33a:	4602      	mov	r2, r0
 800e33c:	ea43 0a02 	orr.w	sl, r3, r2
 800e340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e342:	460a      	mov	r2, r1
 800e344:	ea43 0b02 	orr.w	fp, r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e348:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e34c:	f04f 0000 	mov.w	r0, #0
 800e350:	f04f 0100 	mov.w	r1, #0
 800e354:	0119      	lsls	r1, r3, #4
 800e356:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800e35a:	0110      	lsls	r0, r2, #4
 800e35c:	2400      	movs	r4, #0
 800e35e:	0d0d      	lsrs	r5, r1, #20
 800e360:	052d      	lsls	r5, r5, #20
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e364:	00da      	lsls	r2, r3, #3
 800e366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e368:	4413      	add	r3, r2
			| ((x & (uint64_t)0x0FFF000000000000) << 4);
 800e36a:	ea4a 0204 	orr.w	r2, sl, r4
 800e36e:	603a      	str	r2, [r7, #0]
 800e370:	ea4b 0205 	orr.w	r2, fp, r5
 800e374:	607a      	str	r2, [r7, #4]
		q[i] = (x & (uint64_t)0x000000000000FFFF)
 800e376:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e37a:	e9c3 1200 	strd	r1, r2, [r3]
	for (i = 0; i < 8; i ++) {
 800e37e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e380:	3301      	adds	r3, #1
 800e382:	667b      	str	r3, [r7, #100]	; 0x64
 800e384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e386:	2b07      	cmp	r3, #7
 800e388:	f77f af50 	ble.w	800e22c <shift_rows+0x10>
	}
}
 800e38c:	bf00      	nop
 800e38e:	bf00      	nop
 800e390:	376c      	adds	r7, #108	; 0x6c
 800e392:	46bd      	mov	sp, r7
 800e394:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e398:	4770      	bx	lr

0800e39a <rotr32>:

static inline uint64_t rotr32(uint64_t x)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b083      	sub	sp, #12
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	e9c7 0100 	strd	r0, r1, [r7]
	return (x << 32) | (x >> 32);
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	683b      	ldr	r3, [r7, #0]
}
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <mix_columns>:

static inline void mix_columns(uint64_t *q)
{
 800e3b6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3ba:	b0f8      	sub	sp, #480	; 0x1e0
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	uint64_t q0, q1, q2, q3, q4, q5, q6, q7;
	uint64_t r0, r1, r2, r3, r4, r5, r6, r7;

	q0 = q[0];
 800e3c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ca:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	q1 = q[1];
 800e3ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e3d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e3d6:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	q2 = q[2];
 800e3da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e3de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e3e2:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
	q3 = q[3];
 800e3e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e3ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e3ee:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
	q4 = q[4];
 800e3f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e3f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e3fa:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
	q5 = q[5];
 800e3fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e402:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e406:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
	q6 = q[6];
 800e40a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e40e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800e412:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
	q7 = q[7];
 800e416:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e41a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e41e:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	r0 = (q0 >> 16) | (q0 << 48);
 800e422:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e426:	041a      	lsls	r2, r3, #16
 800e428:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e42c:	0c1b      	lsrs	r3, r3, #16
 800e42e:	ea42 0403 	orr.w	r4, r2, r3
 800e432:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e436:	041a      	lsls	r2, r3, #16
 800e438:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e43c:	0c1b      	lsrs	r3, r3, #16
 800e43e:	ea42 0503 	orr.w	r5, r2, r3
 800e442:	e9c7 4566 	strd	r4, r5, [r7, #408]	; 0x198
	r1 = (q1 >> 16) | (q1 << 48);
 800e446:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e44a:	041a      	lsls	r2, r3, #16
 800e44c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e450:	0c1b      	lsrs	r3, r3, #16
 800e452:	ea42 0803 	orr.w	r8, r2, r3
 800e456:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e45a:	041a      	lsls	r2, r3, #16
 800e45c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e460:	0c1b      	lsrs	r3, r3, #16
 800e462:	ea42 0903 	orr.w	r9, r2, r3
 800e466:	e9c7 8964 	strd	r8, r9, [r7, #400]	; 0x190
	r2 = (q2 >> 16) | (q2 << 48);
 800e46a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e46e:	041a      	lsls	r2, r3, #16
 800e470:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e474:	0c1b      	lsrs	r3, r3, #16
 800e476:	4313      	orrs	r3, r2
 800e478:	62bb      	str	r3, [r7, #40]	; 0x28
 800e47a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e47e:	041a      	lsls	r2, r3, #16
 800e480:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e484:	0c1b      	lsrs	r3, r3, #16
 800e486:	4313      	orrs	r3, r2
 800e488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e48a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e48e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	r3 = (q3 >> 16) | (q3 << 48);
 800e492:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e496:	041a      	lsls	r2, r3, #16
 800e498:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e49c:	0c1b      	lsrs	r3, r3, #16
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	623b      	str	r3, [r7, #32]
 800e4a2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e4a6:	041a      	lsls	r2, r3, #16
 800e4a8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e4ac:	0c1b      	lsrs	r3, r3, #16
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e4b2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e4b6:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	r4 = (q4 >> 16) | (q4 << 48);
 800e4ba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e4be:	041a      	lsls	r2, r3, #16
 800e4c0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e4c4:	0c1b      	lsrs	r3, r3, #16
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	61bb      	str	r3, [r7, #24]
 800e4ca:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e4ce:	041a      	lsls	r2, r3, #16
 800e4d0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e4d4:	0c1b      	lsrs	r3, r3, #16
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	61fb      	str	r3, [r7, #28]
 800e4da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e4de:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
	r5 = (q5 >> 16) | (q5 << 48);
 800e4e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e4e6:	041a      	lsls	r2, r3, #16
 800e4e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e4ec:	0c1b      	lsrs	r3, r3, #16
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	613b      	str	r3, [r7, #16]
 800e4f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800e4f6:	041a      	lsls	r2, r3, #16
 800e4f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e4fc:	0c1b      	lsrs	r3, r3, #16
 800e4fe:	4313      	orrs	r3, r2
 800e500:	617b      	str	r3, [r7, #20]
 800e502:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e506:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
	r6 = (q6 >> 16) | (q6 << 48);
 800e50a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e50e:	041a      	lsls	r2, r3, #16
 800e510:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e514:	0c1b      	lsrs	r3, r3, #16
 800e516:	4313      	orrs	r3, r2
 800e518:	60bb      	str	r3, [r7, #8]
 800e51a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e51e:	041a      	lsls	r2, r3, #16
 800e520:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e524:	0c1b      	lsrs	r3, r3, #16
 800e526:	4313      	orrs	r3, r2
 800e528:	60fb      	str	r3, [r7, #12]
 800e52a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e52e:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
	r7 = (q7 >> 16) | (q7 << 48);
 800e532:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e536:	041a      	lsls	r2, r3, #16
 800e538:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e53c:	0c1b      	lsrs	r3, r3, #16
 800e53e:	4313      	orrs	r3, r2
 800e540:	603b      	str	r3, [r7, #0]
 800e542:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e546:	041a      	lsls	r2, r3, #16
 800e548:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e54c:	0c1b      	lsrs	r3, r3, #16
 800e54e:	4313      	orrs	r3, r2
 800e550:	607b      	str	r3, [r7, #4]
 800e552:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e556:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160

	q[0] = q7 ^ r7 ^ r0 ^ rotr32(q0 ^ r0);
 800e55a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e55e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e562:	ea80 0a02 	eor.w	sl, r0, r2
 800e566:	ea81 0b03 	eor.w	fp, r1, r3
 800e56a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e56e:	ea8a 0102 	eor.w	r1, sl, r2
 800e572:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800e576:	ea8b 0303 	eor.w	r3, fp, r3
 800e57a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800e57e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e582:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e586:	ea80 0402 	eor.w	r4, r0, r2
 800e58a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800e58e:	404b      	eors	r3, r1
 800e590:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800e594:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e598:	f7ff feff 	bl	800e39a <rotr32>
 800e59c:	4602      	mov	r2, r0
 800e59e:	460b      	mov	r3, r1
 800e5a0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	4051      	eors	r1, r2
 800e5a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4059      	eors	r1, r3
 800e5b0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800e5b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e5b8:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800e5bc:	e9c3 1200 	strd	r1, r2, [r3]
	q[1] = q0 ^ r0 ^ q7 ^ r7 ^ r1 ^ rotr32(q1 ^ r1);
 800e5c0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800e5c4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e5c8:	ea80 0402 	eor.w	r4, r0, r2
 800e5cc:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800e5d0:	404b      	eors	r3, r1
 800e5d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800e5d6:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e5da:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800e5de:	4621      	mov	r1, r4
 800e5e0:	4051      	eors	r1, r2
 800e5e2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	4059      	eors	r1, r3
 800e5ea:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800e5ee:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e5f2:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	4051      	eors	r1, r2
 800e5fa:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800e5fe:	4629      	mov	r1, r5
 800e600:	4059      	eors	r1, r3
 800e602:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800e606:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e60a:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800e60e:	4621      	mov	r1, r4
 800e610:	4051      	eors	r1, r2
 800e612:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800e616:	4629      	mov	r1, r5
 800e618:	4059      	eors	r1, r3
 800e61a:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800e61e:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e622:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e626:	ea80 0402 	eor.w	r4, r0, r2
 800e62a:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800e62e:	404b      	eors	r3, r1
 800e630:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e634:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800e638:	f7ff feaf 	bl	800e39a <rotr32>
 800e63c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e640:	3308      	adds	r3, #8
 800e642:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800e646:	4622      	mov	r2, r4
 800e648:	4042      	eors	r2, r0
 800e64a:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800e64e:	462a      	mov	r2, r5
 800e650:	404a      	eors	r2, r1
 800e652:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800e656:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800e65a:	e9c3 1200 	strd	r1, r2, [r3]
	q[2] = q1 ^ r1 ^ r2 ^ rotr32(q2 ^ r2);
 800e65e:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800e662:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e666:	ea80 0402 	eor.w	r4, r0, r2
 800e66a:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800e66e:	404b      	eors	r3, r1
 800e670:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e674:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e678:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800e67c:	4621      	mov	r1, r4
 800e67e:	4051      	eors	r1, r2
 800e680:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800e684:	4629      	mov	r1, r5
 800e686:	4059      	eors	r1, r3
 800e688:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800e68c:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e690:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e694:	ea80 0402 	eor.w	r4, r0, r2
 800e698:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800e69c:	404b      	eors	r3, r1
 800e69e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e6a2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800e6a6:	f7ff fe78 	bl	800e39a <rotr32>
 800e6aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e6ae:	3310      	adds	r3, #16
 800e6b0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800e6b4:	4622      	mov	r2, r4
 800e6b6:	4042      	eors	r2, r0
 800e6b8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800e6bc:	462a      	mov	r2, r5
 800e6be:	404a      	eors	r2, r1
 800e6c0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800e6c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e6c8:	e9c3 1200 	strd	r1, r2, [r3]
	q[3] = q2 ^ r2 ^ q7 ^ r7 ^ r3 ^ rotr32(q3 ^ r3);
 800e6cc:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800e6d0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800e6d4:	ea80 0402 	eor.w	r4, r0, r2
 800e6d8:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800e6dc:	404b      	eors	r3, r1
 800e6de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e6e2:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e6e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4051      	eors	r1, r2
 800e6ee:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	4059      	eors	r1, r3
 800e6f6:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800e6fa:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e6fe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800e702:	4621      	mov	r1, r4
 800e704:	4051      	eors	r1, r2
 800e706:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800e70a:	4629      	mov	r1, r5
 800e70c:	4059      	eors	r1, r3
 800e70e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800e712:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e716:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800e71a:	4621      	mov	r1, r4
 800e71c:	4051      	eors	r1, r2
 800e71e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800e722:	4629      	mov	r1, r5
 800e724:	4059      	eors	r1, r3
 800e726:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800e72a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e72e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e732:	ea80 0402 	eor.w	r4, r0, r2
 800e736:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e73a:	404b      	eors	r3, r1
 800e73c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e740:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e744:	f7ff fe29 	bl	800e39a <rotr32>
 800e748:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e74c:	3318      	adds	r3, #24
 800e74e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800e752:	4622      	mov	r2, r4
 800e754:	4042      	eors	r2, r0
 800e756:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800e75a:	462a      	mov	r2, r5
 800e75c:	404a      	eors	r2, r1
 800e75e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e762:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e766:	e9c3 1200 	strd	r1, r2, [r3]
	q[4] = q3 ^ r3 ^ q7 ^ r7 ^ r4 ^ rotr32(q4 ^ r4);
 800e76a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800e76e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800e772:	ea80 0402 	eor.w	r4, r0, r2
 800e776:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800e77a:	404b      	eors	r3, r1
 800e77c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e780:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800e784:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800e788:	4621      	mov	r1, r4
 800e78a:	4051      	eors	r1, r2
 800e78c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800e790:	4629      	mov	r1, r5
 800e792:	4059      	eors	r1, r3
 800e794:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800e798:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e79c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	4051      	eors	r1, r2
 800e7a4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	4059      	eors	r1, r3
 800e7ac:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800e7b0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e7b4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4051      	eors	r1, r2
 800e7bc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	4059      	eors	r1, r3
 800e7c4:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800e7c8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e7cc:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e7d0:	ea80 0402 	eor.w	r4, r0, r2
 800e7d4:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800e7d8:	404b      	eors	r3, r1
 800e7da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e7de:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e7e2:	f7ff fdda 	bl	800e39a <rotr32>
 800e7e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e7ea:	3320      	adds	r3, #32
 800e7ec:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800e7f0:	4622      	mov	r2, r4
 800e7f2:	4042      	eors	r2, r0
 800e7f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e7f8:	462a      	mov	r2, r5
 800e7fa:	404a      	eors	r2, r1
 800e7fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e800:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e804:	e9c3 1200 	strd	r1, r2, [r3]
	q[5] = q4 ^ r4 ^ r5 ^ rotr32(q5 ^ r5);
 800e808:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800e80c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800e810:	ea80 0402 	eor.w	r4, r0, r2
 800e814:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800e818:	404b      	eors	r3, r1
 800e81a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e81e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e822:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800e826:	4621      	mov	r1, r4
 800e828:	4051      	eors	r1, r2
 800e82a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e82e:	4629      	mov	r1, r5
 800e830:	4059      	eors	r1, r3
 800e832:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800e836:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e83a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e83e:	ea80 0402 	eor.w	r4, r0, r2
 800e842:	67bc      	str	r4, [r7, #120]	; 0x78
 800e844:	404b      	eors	r3, r1
 800e846:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e848:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800e84c:	f7ff fda5 	bl	800e39a <rotr32>
 800e850:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e854:	3328      	adds	r3, #40	; 0x28
 800e856:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800e85a:	4622      	mov	r2, r4
 800e85c:	4042      	eors	r2, r0
 800e85e:	673a      	str	r2, [r7, #112]	; 0x70
 800e860:	462a      	mov	r2, r5
 800e862:	404a      	eors	r2, r1
 800e864:	677a      	str	r2, [r7, #116]	; 0x74
 800e866:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e86a:	e9c3 1200 	strd	r1, r2, [r3]
	q[6] = q5 ^ r5 ^ r6 ^ rotr32(q6 ^ r6);
 800e86e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 800e872:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800e876:	ea80 0402 	eor.w	r4, r0, r2
 800e87a:	66bc      	str	r4, [r7, #104]	; 0x68
 800e87c:	404b      	eors	r3, r1
 800e87e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e880:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e884:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800e888:	4621      	mov	r1, r4
 800e88a:	4051      	eors	r1, r2
 800e88c:	6639      	str	r1, [r7, #96]	; 0x60
 800e88e:	4629      	mov	r1, r5
 800e890:	4059      	eors	r1, r3
 800e892:	6679      	str	r1, [r7, #100]	; 0x64
 800e894:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e898:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e89c:	ea80 0402 	eor.w	r4, r0, r2
 800e8a0:	65bc      	str	r4, [r7, #88]	; 0x58
 800e8a2:	404b      	eors	r3, r1
 800e8a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e8aa:	f7ff fd76 	bl	800e39a <rotr32>
 800e8ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800e8b2:	3330      	adds	r3, #48	; 0x30
 800e8b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	4042      	eors	r2, r0
 800e8bc:	653a      	str	r2, [r7, #80]	; 0x50
 800e8be:	462a      	mov	r2, r5
 800e8c0:	404a      	eors	r2, r1
 800e8c2:	657a      	str	r2, [r7, #84]	; 0x54
 800e8c4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e8c8:	e9c3 1200 	strd	r1, r2, [r3]
	q[7] = q6 ^ r6 ^ r7 ^ rotr32(q7 ^ r7);
 800e8cc:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 800e8d0:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800e8d4:	ea80 0402 	eor.w	r4, r0, r2
 800e8d8:	64bc      	str	r4, [r7, #72]	; 0x48
 800e8da:	404b      	eors	r3, r1
 800e8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8de:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e8e2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	4051      	eors	r1, r2
 800e8ea:	6439      	str	r1, [r7, #64]	; 0x40
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4059      	eors	r1, r3
 800e8f0:	6479      	str	r1, [r7, #68]	; 0x44
 800e8f2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800e8f6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800e8fa:	ea80 0402 	eor.w	r4, r0, r2
 800e8fe:	63bc      	str	r4, [r7, #56]	; 0x38
 800e900:	404b      	eors	r3, r1
 800e902:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e904:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e908:	f7ff fd47 	bl	800e39a <rotr32>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800e914:	3138      	adds	r1, #56	; 0x38
 800e916:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e91a:	4620      	mov	r0, r4
 800e91c:	4050      	eors	r0, r2
 800e91e:	6338      	str	r0, [r7, #48]	; 0x30
 800e920:	4628      	mov	r0, r5
 800e922:	4058      	eors	r0, r3
 800e924:	6378      	str	r0, [r7, #52]	; 0x34
 800e926:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e92a:	e9c1 3400 	strd	r3, r4, [r1]
}
 800e92e:	bf00      	nop
 800e930:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800e934:	46bd      	mov	sp, r7
 800e936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e93a <inc4_be>:

static void inc4_be(uint32_t *x)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b082      	sub	sp, #8
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  *x = br_swap32(*x)+4;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4618      	mov	r0, r3
 800e948:	f7fc ff12 	bl	800b770 <br_swap32>
 800e94c:	4603      	mov	r3, r0
 800e94e:	1d1a      	adds	r2, r3, #4
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	601a      	str	r2, [r3, #0]
  *x = br_swap32(*x);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fc ff09 	bl	800b770 <br_swap32>
 800e95e:	4602      	mov	r2, r0
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	601a      	str	r2, [r3, #0]
}
 800e964:	bf00      	nop
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <aes_ctr4x>:

static void aes_ctr4x(uint8_t out[64], uint32_t ivw[16], uint64_t sk_exp[64])
{
 800e96c:	b590      	push	{r4, r7, lr}
 800e96e:	b0a9      	sub	sp, #164	; 0xa4
 800e970:	af02      	add	r7, sp, #8
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
  uint32_t w[16];
  uint64_t q[8];
  int i;

  memcpy(w, ivw, sizeof(w));
 800e978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e97c:	2240      	movs	r2, #64	; 0x40
 800e97e:	68b9      	ldr	r1, [r7, #8]
 800e980:	4618      	mov	r0, r3
 800e982:	f007 fb93 	bl	80160ac <memcpy>
  for (i = 0; i < 4; i++) {
 800e986:	2300      	movs	r3, #0
 800e988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e98c:	e01b      	b.n	800e9c6 <aes_ctr4x+0x5a>
    br_aes_ct64_interleave_in(&q[i], &q[i + 4], w + (i << 2));
 800e98e:	f107 0210 	add.w	r2, r7, #16
 800e992:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e996:	00db      	lsls	r3, r3, #3
 800e998:	18d0      	adds	r0, r2, r3
 800e99a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e99e:	3304      	adds	r3, #4
 800e9a0:	f107 0210 	add.w	r2, r7, #16
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	18d1      	adds	r1, r2, r3
 800e9a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e9b4:	4413      	add	r3, r2
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	f7fe fe32 	bl	800d620 <br_aes_ct64_interleave_in>
  for (i = 0; i < 4; i++) {
 800e9bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e9c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9ca:	2b03      	cmp	r3, #3
 800e9cc:	dddf      	ble.n	800e98e <aes_ctr4x+0x22>
  }
  br_aes_ct64_ortho(q);
 800e9ce:	f107 0310 	add.w	r3, r7, #16
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe f925 	bl	800cc22 <br_aes_ct64_ortho>

  add_round_key(q, sk_exp);
 800e9d8:	f107 0310 	add.w	r3, r7, #16
 800e9dc:	6879      	ldr	r1, [r7, #4]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff fb83 	bl	800e0ea <add_round_key>
  for (i = 1; i < 14; i++) {
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e9ea:	e01f      	b.n	800ea2c <aes_ctr4x+0xc0>
    br_aes_ct64_bitslice_Sbox(q);
 800e9ec:	f107 0310 	add.w	r3, r7, #16
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fc ff11 	bl	800b818 <br_aes_ct64_bitslice_Sbox>
    shift_rows(q);
 800e9f6:	f107 0310 	add.w	r3, r7, #16
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7ff fc0e 	bl	800e21c <shift_rows>
    mix_columns(q);
 800ea00:	f107 0310 	add.w	r3, r7, #16
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7ff fcd6 	bl	800e3b6 <mix_columns>
    add_round_key(q, sk_exp + (i << 3));
 800ea0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	00db      	lsls	r3, r3, #3
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	441a      	add	r2, r3
 800ea16:	f107 0310 	add.w	r3, r7, #16
 800ea1a:	4611      	mov	r1, r2
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7ff fb64 	bl	800e0ea <add_round_key>
  for (i = 1; i < 14; i++) {
 800ea22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea26:	3301      	adds	r3, #1
 800ea28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea30:	2b0d      	cmp	r3, #13
 800ea32:	dddb      	ble.n	800e9ec <aes_ctr4x+0x80>
  }
  br_aes_ct64_bitslice_Sbox(q);
 800ea34:	f107 0310 	add.w	r3, r7, #16
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fc feed 	bl	800b818 <br_aes_ct64_bitslice_Sbox>
  shift_rows(q);
 800ea3e:	f107 0310 	add.w	r3, r7, #16
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff fbea 	bl	800e21c <shift_rows>
  add_round_key(q, sk_exp + 112);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f503 7260 	add.w	r2, r3, #896	; 0x380
 800ea4e:	f107 0310 	add.w	r3, r7, #16
 800ea52:	4611      	mov	r1, r2
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7ff fb48 	bl	800e0ea <add_round_key>

  br_aes_ct64_ortho(q);
 800ea5a:	f107 0310 	add.w	r3, r7, #16
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fe f8df 	bl	800cc22 <br_aes_ct64_ortho>
  for (i = 0; i < 4; i ++) {
 800ea64:	2300      	movs	r3, #0
 800ea66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea6a:	e023      	b.n	800eab4 <aes_ctr4x+0x148>
    br_aes_ct64_interleave_out(w + (i << 2), q[i], q[i + 4]);
 800ea6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ea78:	18d4      	adds	r4, r2, r3
 800ea7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	3398      	adds	r3, #152	; 0x98
 800ea82:	443b      	add	r3, r7
 800ea84:	3b88      	subs	r3, #136	; 0x88
 800ea86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea8e:	3304      	adds	r3, #4
 800ea90:	00db      	lsls	r3, r3, #3
 800ea92:	3398      	adds	r3, #152	; 0x98
 800ea94:	443b      	add	r3, r7
 800ea96:	3b88      	subs	r3, #136	; 0x88
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	e9cd 2300 	strd	r2, r3, [sp]
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f7fe ff41 	bl	800d92c <br_aes_ct64_interleave_out>
  for (i = 0; i < 4; i ++) {
 800eaaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eaae:	3301      	adds	r3, #1
 800eab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800eab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eab8:	2b03      	cmp	r3, #3
 800eaba:	ddd7      	ble.n	800ea6c <aes_ctr4x+0x100>
  }
  br_range_enc32le(out, w, 16);
 800eabc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800eac0:	2210      	movs	r2, #16
 800eac2:	4619      	mov	r1, r3
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	f7fc fe8b 	bl	800b7e0 <br_range_enc32le>

  /* Increase counter for next 4 blocks */
  inc4_be(ivw+3);
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	330c      	adds	r3, #12
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff ff33 	bl	800e93a <inc4_be>
  inc4_be(ivw+7);
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	331c      	adds	r3, #28
 800ead8:	4618      	mov	r0, r3
 800eada:	f7ff ff2e 	bl	800e93a <inc4_be>
  inc4_be(ivw+11);
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	332c      	adds	r3, #44	; 0x2c
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff ff29 	bl	800e93a <inc4_be>
  inc4_be(ivw+15);
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	333c      	adds	r3, #60	; 0x3c
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff ff24 	bl	800e93a <inc4_be>
}
 800eaf2:	bf00      	nop
 800eaf4:	379c      	adds	r7, #156	; 0x9c
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd90      	pop	{r4, r7, pc}

0800eafa <br_aes_ct64_ctr_init>:

static void br_aes_ct64_ctr_init(uint64_t sk_exp[120], const uint8_t *key)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b0be      	sub	sp, #248	; 0xf8
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
 800eb02:	6039      	str	r1, [r7, #0]
	uint64_t skey[30];

	br_aes_ct64_keysched(skey, key);
 800eb04:	f107 0308 	add.w	r3, r7, #8
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7ff f844 	bl	800db98 <br_aes_ct64_keysched>
	br_aes_ct64_skey_expand(sk_exp, skey);
 800eb10:	f107 0308 	add.w	r3, r7, #8
 800eb14:	4619      	mov	r1, r3
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff fa02 	bl	800df20 <br_aes_ct64_skey_expand>
}
 800eb1c:	bf00      	nop
 800eb1e:	37f8      	adds	r7, #248	; 0xf8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <pqcrystals_aes256ctr_ref_init>:
  br_aes_ct64_ctr_init(sk_exp, key);
  br_aes_ct64_ctr_run(sk_exp, nonce, 0, out, outlen);
}

void aes256ctr_init(aes256ctr_ctx *s, const uint8_t *key, const uint8_t *nonce)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  br_aes_ct64_ctr_init(s->sk_exp, key);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	68b9      	ldr	r1, [r7, #8]
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7ff ffe0 	bl	800eafa <br_aes_ct64_ctr_init>

  br_range_dec32le(s->ivw, 3, nonce);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	2103      	movs	r1, #3
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fc fdf7 	bl	800b738 <br_range_dec32le>
  memcpy(s->ivw +  4, s->ivw, 3 * sizeof(uint32_t));
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800eb50:	f103 0010 	add.w	r0, r3, #16
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800eb5a:	220c      	movs	r2, #12
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	f007 faa5 	bl	80160ac <memcpy>
  memcpy(s->ivw +  8, s->ivw, 3 * sizeof(uint32_t));
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800eb68:	f103 0020 	add.w	r0, r3, #32
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800eb72:	220c      	movs	r2, #12
 800eb74:	4619      	mov	r1, r3
 800eb76:	f007 fa99 	bl	80160ac <memcpy>
  memcpy(s->ivw + 12, s->ivw, 3 * sizeof(uint32_t));
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800eb80:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800eb8a:	220c      	movs	r2, #12
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	f007 fa8d 	bl	80160ac <memcpy>
  s->ivw[ 3] = br_swap32(0);
 800eb92:	2000      	movs	r0, #0
 800eb94:	f7fc fdec 	bl	800b770 <br_swap32>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  s->ivw[ 7] = br_swap32(1);
 800eba0:	2001      	movs	r0, #1
 800eba2:	f7fc fde5 	bl	800b770 <br_swap32>
 800eba6:	4602      	mov	r2, r0
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
  s->ivw[11] = br_swap32(2);
 800ebae:	2002      	movs	r0, #2
 800ebb0:	f7fc fdde 	bl	800b770 <br_swap32>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
  s->ivw[15] = br_swap32(3);
 800ebbc:	2003      	movs	r0, #3
 800ebbe:	f7fc fdd7 	bl	800b770 <br_swap32>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <pqcrystals_aes256ctr_ref_squeezeblocks>:

void aes256ctr_squeezeblocks(uint8_t *out, size_t nblocks, aes256ctr_ctx *s)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b084      	sub	sp, #16
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	60f8      	str	r0, [r7, #12]
 800ebda:	60b9      	str	r1, [r7, #8]
 800ebdc:	607a      	str	r2, [r7, #4]
  while (nblocks > 0) {
 800ebde:	e00d      	b.n	800ebfc <pqcrystals_aes256ctr_ref_squeezeblocks+0x2a>
    aes_ctr4x(out, s->ivw, s->sk_exp);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	4619      	mov	r1, r3
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f7ff febe 	bl	800e96c <aes_ctr4x>
    out += 64;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	3340      	adds	r3, #64	; 0x40
 800ebf4:	60fb      	str	r3, [r7, #12]
    nblocks--;
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	60bb      	str	r3, [r7, #8]
  while (nblocks > 0) {
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1ee      	bne.n	800ebe0 <pqcrystals_aes256ctr_ref_squeezeblocks+0xe>
  }
}
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <elapsed_time_init>:
* Note(s): Must be called before any of the other functions in this module
********************************************************************************
*/

void  elapsed_time_init (void)         
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
    uint32_t  i;
    
    
    if (ARM_CM_DWT_CTRL != 0) {                  // See if DWT is available
 800ec12:	4b12      	ldr	r3, [pc, #72]	; (800ec5c <elapsed_time_init+0x50>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00e      	beq.n	800ec38 <elapsed_time_init+0x2c>
        ARM_CM_DEMCR      |= 1 << 24;            // Set bit 24
 800ec1a:	4b11      	ldr	r3, [pc, #68]	; (800ec60 <elapsed_time_init+0x54>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a10      	ldr	r2, [pc, #64]	; (800ec60 <elapsed_time_init+0x54>)
 800ec20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ec24:	6013      	str	r3, [r2, #0]
        ARM_CM_DWT_CYCCNT  = 0;                
 800ec26:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <elapsed_time_init+0x58>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	601a      	str	r2, [r3, #0]
        ARM_CM_DWT_CTRL   |= 1 << 0;             // Set bit 0
 800ec2c:	4b0b      	ldr	r3, [pc, #44]	; (800ec5c <elapsed_time_init+0x50>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a0a      	ldr	r2, [pc, #40]	; (800ec5c <elapsed_time_init+0x50>)
 800ec32:	f043 0301 	orr.w	r3, r3, #1
 800ec36:	6013      	str	r3, [r2, #0]
    }
    for (i = 0; i < ELAPSED_TIME_MAX_SECTIONS; i++) {
 800ec38:	2300      	movs	r3, #0
 800ec3a:	607b      	str	r3, [r7, #4]
 800ec3c:	e005      	b.n	800ec4a <elapsed_time_init+0x3e>
        elapsed_time_clr(i);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 f858 	bl	800ecf4 <elapsed_time_clr>
    for (i = 0; i < ELAPSED_TIME_MAX_SECTIONS; i++) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3301      	adds	r3, #1
 800ec48:	607b      	str	r3, [r7, #4]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b09      	cmp	r3, #9
 800ec4e:	d9f6      	bls.n	800ec3e <elapsed_time_init+0x32>
    }
}
 800ec50:	bf00      	nop
 800ec52:	bf00      	nop
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	e0001000 	.word	0xe0001000
 800ec60:	e000edfc 	.word	0xe000edfc
 800ec64:	e0001004 	.word	0xe0001004

0800ec68 <elapsed_time_start>:
*                  START THE MEASUREMENT OF A CODE SECTION
********************************************************************************
*/

void  elapsed_time_start (uint32_t  i)  
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
    elapsed_time_tbl[i].start = ARM_CM_DWT_CYCCNT;
 800ec70:	4b06      	ldr	r3, [pc, #24]	; (800ec8c <elapsed_time_start+0x24>)
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	4906      	ldr	r1, [pc, #24]	; (800ec90 <elapsed_time_start+0x28>)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	011b      	lsls	r3, r3, #4
 800ec7a:	440b      	add	r3, r1
 800ec7c:	601a      	str	r2, [r3, #0]
}
 800ec7e:	bf00      	nop
 800ec80:	370c      	adds	r7, #12
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	e0001004 	.word	0xe0001004
 800ec90:	2000fcf4 	.word	0x2000fcf4

0800ec94 <elapsed_time_stop>:
*           STOP THE MEASUREMENT OF A CODE SECTION AND COMPUTE STATS
********************************************************************************
*/

void  elapsed_time_stop (uint32_t  i)  
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
    uint32_t       stop; 
    ELAPSED_TIME  *p_tbl;
    

    stop           = ARM_CM_DWT_CYCCNT;   
 800ec9c:	4b13      	ldr	r3, [pc, #76]	; (800ecec <elapsed_time_stop+0x58>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	60fb      	str	r3, [r7, #12]
    p_tbl          = &elapsed_time_tbl[i];
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	011b      	lsls	r3, r3, #4
 800eca6:	4a12      	ldr	r2, [pc, #72]	; (800ecf0 <elapsed_time_stop+0x5c>)
 800eca8:	4413      	add	r3, r2
 800ecaa:	60bb      	str	r3, [r7, #8]
    p_tbl->current = stop - p_tbl->start;
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	1ad2      	subs	r2, r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	605a      	str	r2, [r3, #4]
    if (p_tbl->max < p_tbl->current) {
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	689a      	ldr	r2, [r3, #8]
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d203      	bcs.n	800eccc <elapsed_time_stop+0x38>
        p_tbl->max = p_tbl->current;
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	685a      	ldr	r2, [r3, #4]
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	609a      	str	r2, [r3, #8]
    }
    if (p_tbl->min > p_tbl->current) {
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	68da      	ldr	r2, [r3, #12]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d903      	bls.n	800ece0 <elapsed_time_stop+0x4c>
        p_tbl->min = p_tbl->current;
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	685a      	ldr	r2, [r3, #4]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	60da      	str	r2, [r3, #12]
    }
}
 800ece0:	bf00      	nop
 800ece2:	3714      	adds	r7, #20
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr
 800ecec:	e0001004 	.word	0xe0001004
 800ecf0:	2000fcf4 	.word	0x2000fcf4

0800ecf4 <elapsed_time_clr>:
*                      CLEAR THE MEASUREMENTS STATS
********************************************************************************
*/

void  elapsed_time_clr (uint32_t  i)         
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
    ELAPSED_TIME  *p_tbl;
    
    
    p_tbl          = &elapsed_time_tbl[i];
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	011b      	lsls	r3, r3, #4
 800ed00:	4a0a      	ldr	r2, [pc, #40]	; (800ed2c <elapsed_time_clr+0x38>)
 800ed02:	4413      	add	r3, r2
 800ed04:	60fb      	str	r3, [r7, #12]
    p_tbl->start   = 0;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	601a      	str	r2, [r3, #0]
    p_tbl->current = 0;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	605a      	str	r2, [r3, #4]
    p_tbl->min     = 0xFFFFFFFF;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f04f 32ff 	mov.w	r2, #4294967295
 800ed18:	60da      	str	r2, [r3, #12]
    p_tbl->max     = 0;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	609a      	str	r2, [r3, #8]
}
 800ed20:	bf00      	nop
 800ed22:	3714      	adds	r7, #20
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr
 800ed2c:	2000fcf4 	.word	0x2000fcf4

0800ed30 <elapsed_time_max>:

uint32_t elapsed_time_max(uint32_t  i){
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
	return elapsed_time_tbl[i].max;
 800ed38:	4a05      	ldr	r2, [pc, #20]	; (800ed50 <elapsed_time_max+0x20>)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	011b      	lsls	r3, r3, #4
 800ed3e:	4413      	add	r3, r2
 800ed40:	3308      	adds	r3, #8
 800ed42:	681b      	ldr	r3, [r3, #0]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr
 800ed50:	2000fcf4 	.word	0x2000fcf4

0800ed54 <elapsed_time_min>:
uint32_t elapsed_time_min(uint32_t  i){
 800ed54:	b480      	push	{r7}
 800ed56:	b083      	sub	sp, #12
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
	return elapsed_time_tbl[i].min;
 800ed5c:	4a05      	ldr	r2, [pc, #20]	; (800ed74 <elapsed_time_min+0x20>)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	011b      	lsls	r3, r3, #4
 800ed62:	4413      	add	r3, r2
 800ed64:	330c      	adds	r3, #12
 800ed66:	681b      	ldr	r3, [r3, #0]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	2000fcf4 	.word	0x2000fcf4

0800ed78 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 800ed78:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800ed7c:	b086      	sub	sp, #24
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800ed82:	f04f 0000 	mov.w	r0, #0
 800ed86:	f04f 0100 	mov.w	r1, #0
 800ed8a:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 800ed8e:	2100      	movs	r1, #0
 800ed90:	6179      	str	r1, [r7, #20]
 800ed92:	e022      	b.n	800edda <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	6979      	ldr	r1, [r7, #20]
 800ed98:	4401      	add	r1, r0
 800ed9a:	7809      	ldrb	r1, [r1, #0]
 800ed9c:	b2c9      	uxtb	r1, r1
 800ed9e:	2000      	movs	r0, #0
 800eda0:	460c      	mov	r4, r1
 800eda2:	4605      	mov	r5, r0
 800eda4:	6979      	ldr	r1, [r7, #20]
 800eda6:	00c9      	lsls	r1, r1, #3
 800eda8:	f1a1 0620 	sub.w	r6, r1, #32
 800edac:	f1c1 0020 	rsb	r0, r1, #32
 800edb0:	fa05 f301 	lsl.w	r3, r5, r1
 800edb4:	fa04 f606 	lsl.w	r6, r4, r6
 800edb8:	4333      	orrs	r3, r6
 800edba:	fa24 f000 	lsr.w	r0, r4, r0
 800edbe:	4303      	orrs	r3, r0
 800edc0:	fa04 f201 	lsl.w	r2, r4, r1
 800edc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800edc8:	ea40 0802 	orr.w	r8, r0, r2
 800edcc:	ea41 0903 	orr.w	r9, r1, r3
 800edd0:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 800edd4:	6979      	ldr	r1, [r7, #20]
 800edd6:	3101      	adds	r1, #1
 800edd8:	6179      	str	r1, [r7, #20]
 800edda:	6979      	ldr	r1, [r7, #20]
 800eddc:	2907      	cmp	r1, #7
 800edde:	d9d9      	bls.n	800ed94 <load64+0x1c>

  return r;
 800ede0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800ede4:	4610      	mov	r0, r2
 800ede6:	4619      	mov	r1, r3
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800edf0:	4770      	bx	lr

0800edf2 <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800edf2:	b4f0      	push	{r4, r5, r6, r7}
 800edf4:	b086      	sub	sp, #24
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 800edfe:	2300      	movs	r3, #0
 800ee00:	617b      	str	r3, [r7, #20]
 800ee02:	e019      	b.n	800ee38 <store64+0x46>
    x[i] = u >> 8*i;
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	00d9      	lsls	r1, r3, #3
 800ee08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee0c:	f1c1 0620 	rsb	r6, r1, #32
 800ee10:	f1a1 0020 	sub.w	r0, r1, #32
 800ee14:	fa22 f401 	lsr.w	r4, r2, r1
 800ee18:	fa03 f606 	lsl.w	r6, r3, r6
 800ee1c:	4334      	orrs	r4, r6
 800ee1e:	fa23 f000 	lsr.w	r0, r3, r0
 800ee22:	4304      	orrs	r4, r0
 800ee24:	fa23 f501 	lsr.w	r5, r3, r1
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	b2e2      	uxtb	r2, r4
 800ee30:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	3301      	adds	r3, #1
 800ee36:	617b      	str	r3, [r7, #20]
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	2b07      	cmp	r3, #7
 800ee3c:	d9e2      	bls.n	800ee04 <store64+0x12>
}
 800ee3e:	bf00      	nop
 800ee40:	bf00      	nop
 800ee42:	3718      	adds	r7, #24
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bcf0      	pop	{r4, r5, r6, r7}
 800ee48:	4770      	bx	lr
	...

0800ee4c <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 800ee4c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ee50:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ee5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ee5e:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800ee60:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ee64:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6e:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800ee72:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 800ee76:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ee7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ee84:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800ee88:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 800ee8c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ee90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee9a:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800ee9e:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 800eea2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eea6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800eeb0:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800eeb4:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 800eeb8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eebc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eec6:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800eeca:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 800eece:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eed2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800eedc:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800eee0:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 800eee4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eee8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800eef2:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800eef6:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800eefa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eefe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ef08:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800ef0c:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800ef10:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ef14:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ef1e:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800ef22:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800ef26:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ef2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ef34:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800ef38:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 800ef3c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ef40:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800ef4a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800ef4e:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800ef52:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ef56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800ef60:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800ef64:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 800ef68:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ef6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800ef76:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800ef7a:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 800ef7e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ef82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800ef8c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800ef90:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 800ef94:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800ef98:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800efa2:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800efa6:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 800efaa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800efae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800efb8:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800efbc:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 800efc0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800efc4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800efce:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800efd2:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 800efd6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800efda:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800efe4:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800efe8:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 800efec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800eff0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800effa:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800effe:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 800f002:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f006:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800f010:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800f014:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 800f018:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f01c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800f026:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800f02a:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 800f02e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f032:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800f03c:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800f040:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 800f044:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f048:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800f052:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800f056:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 800f05a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f05e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 800f068:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800f06c:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 800f070:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800f074:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800f07e:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800f082:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 800f086:	2300      	movs	r3, #0
 800f088:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800f08c:	f002 bdf7 	b.w	8011c7e <KeccakF1600_StatePermute+0x2e32>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 800f090:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f094:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f098:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	ea80 0602 	eor.w	r6, r0, r2
 800f0a4:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 800f0a8:	404b      	eors	r3, r1
 800f0aa:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 800f0ae:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b6:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 800f0ba:	4051      	eors	r1, r2
 800f0bc:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 800f0c0:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 800f0c4:	404b      	eors	r3, r1
 800f0c6:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 800f0ca:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800f0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d2:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 800f0d6:	4051      	eors	r1, r2
 800f0d8:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 800f0dc:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 800f0e0:	404b      	eors	r3, r1
 800f0e2:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 800f0e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800f0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ee:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 800f0f2:	4051      	eors	r1, r2
 800f0f4:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800f0f8:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 800f0fc:	404b      	eors	r3, r1
 800f0fe:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800f102:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f10e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 800f112:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800f116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f11a:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800f11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f122:	ea80 0602 	eor.w	r6, r0, r2
 800f126:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 800f12a:	404b      	eors	r3, r1
 800f12c:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 800f130:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 800f13c:	4051      	eors	r1, r2
 800f13e:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 800f142:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 800f146:	404b      	eors	r3, r1
 800f148:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 800f14c:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800f150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f154:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 800f158:	4051      	eors	r1, r2
 800f15a:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 800f15e:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 800f162:	404b      	eors	r3, r1
 800f164:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800f168:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800f16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f170:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 800f174:	4051      	eors	r1, r2
 800f176:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 800f17a:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 800f17e:	404b      	eors	r3, r1
 800f180:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800f184:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f190:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 800f194:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800f198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f19c:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a4:	ea80 0602 	eor.w	r6, r0, r2
 800f1a8:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 800f1ac:	404b      	eors	r3, r1
 800f1ae:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f1b2:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800f1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ba:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 800f1be:	4051      	eors	r1, r2
 800f1c0:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 800f1c4:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 800f1c8:	404b      	eors	r3, r1
 800f1ca:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 800f1ce:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800f1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d6:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 800f1da:	4051      	eors	r1, r2
 800f1dc:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 800f1e0:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 800f1e4:	404b      	eors	r3, r1
 800f1e6:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800f1ea:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800f1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f2:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 800f1f6:	4051      	eors	r1, r2
 800f1f8:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 800f1fc:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 800f200:	404b      	eors	r3, r1
 800f202:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800f206:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f212:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 800f216:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800f21a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f21e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	ea80 0602 	eor.w	r6, r0, r2
 800f22a:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 800f22e:	404b      	eors	r3, r1
 800f230:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 800f234:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800f238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23c:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 800f240:	4051      	eors	r1, r2
 800f242:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 800f246:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 800f24a:	404b      	eors	r3, r1
 800f24c:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 800f250:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 800f25c:	4051      	eors	r1, r2
 800f25e:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 800f262:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 800f266:	404b      	eors	r3, r1
 800f268:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800f26c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800f270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f274:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 800f278:	4051      	eors	r1, r2
 800f27a:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 800f27e:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 800f282:	404b      	eors	r3, r1
 800f284:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800f288:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f294:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 800f298:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800f29c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2a0:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a8:	ea80 0602 	eor.w	r6, r0, r2
 800f2ac:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 800f2b0:	404b      	eors	r3, r1
 800f2b2:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 800f2b6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2be:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 800f2c2:	4051      	eors	r1, r2
 800f2c4:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 800f2c8:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 800f2cc:	404b      	eors	r3, r1
 800f2ce:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 800f2d2:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800f2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2da:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 800f2de:	4051      	eors	r1, r2
 800f2e0:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 800f2e4:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 800f2e8:	404b      	eors	r3, r1
 800f2ea:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 800f2ee:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800f2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f6:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800f2fa:	4051      	eors	r1, r2
 800f2fc:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 800f300:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 800f304:	404b      	eors	r3, r1
 800f306:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800f30a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f312:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f316:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 800f31a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800f31e:	0fda      	lsrs	r2, r3, #31
 800f320:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800f324:	005b      	lsls	r3, r3, #1
 800f326:	4313      	orrs	r3, r2
 800f328:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800f32c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800f330:	0fda      	lsrs	r2, r3, #31
 800f332:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	4313      	orrs	r3, r2
 800f33a:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 800f33e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 800f34a:	4051      	eors	r1, r2
 800f34c:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 800f350:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 800f354:	404b      	eors	r3, r1
 800f356:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800f35a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f362:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800f366:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800f36a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800f36e:	0fda      	lsrs	r2, r3, #31
 800f370:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	4313      	orrs	r3, r2
 800f378:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 800f37c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800f380:	0fda      	lsrs	r2, r3, #31
 800f382:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800f386:	005b      	lsls	r3, r3, #1
 800f388:	4313      	orrs	r3, r2
 800f38a:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800f38e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f396:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 800f39a:	4051      	eors	r1, r2
 800f39c:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 800f3a0:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 800f3a4:	404b      	eors	r3, r1
 800f3a6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800f3aa:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b2:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800f3b6:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800f3ba:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800f3be:	0fda      	lsrs	r2, r3, #31
 800f3c0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 800f3cc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800f3d0:	0fda      	lsrs	r2, r3, #31
 800f3d2:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800f3d6:	005b      	lsls	r3, r3, #1
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800f3de:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e6:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800f3ea:	4051      	eors	r1, r2
 800f3ec:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 800f3f0:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 800f3f4:	404b      	eors	r3, r1
 800f3f6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800f3fa:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800f3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f402:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800f406:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800f40a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800f40e:	0fda      	lsrs	r2, r3, #31
 800f410:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	4313      	orrs	r3, r2
 800f418:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 800f41c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800f420:	0fda      	lsrs	r2, r3, #31
 800f422:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	4313      	orrs	r3, r2
 800f42a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800f42e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 800f43a:	4051      	eors	r1, r2
 800f43c:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 800f440:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 800f444:	404b      	eors	r3, r1
 800f446:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800f44a:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800f44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f452:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800f456:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800f45a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800f45e:	0fda      	lsrs	r2, r3, #31
 800f460:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	4313      	orrs	r3, r2
 800f468:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 800f46c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800f470:	0fda      	lsrs	r2, r3, #31
 800f472:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	4313      	orrs	r3, r2
 800f47a:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800f47e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f486:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 800f48a:	4051      	eors	r1, r2
 800f48c:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800f490:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 800f494:	404b      	eors	r3, r1
 800f496:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800f49a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800f4a6:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 800f4aa:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f4ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4b2:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ba:	ea80 0602 	eor.w	r6, r0, r2
 800f4be:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 800f4c2:	404b      	eors	r3, r1
 800f4c4:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800f4c8:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d0:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800f4d4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 800f4d8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800f4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e0:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f4e4:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 800f4e8:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800f4ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4f0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f8:	ea80 0602 	eor.w	r6, r0, r2
 800f4fc:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 800f500:	404b      	eors	r3, r1
 800f502:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800f506:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800f512:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 800f516:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f51a:	031a      	lsls	r2, r3, #12
 800f51c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f520:	0d1b      	lsrs	r3, r3, #20
 800f522:	4313      	orrs	r3, r2
 800f524:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800f528:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800f52c:	031a      	lsls	r2, r3, #12
 800f52e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800f532:	0d1b      	lsrs	r3, r3, #20
 800f534:	4313      	orrs	r3, r2
 800f536:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800f53a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f546:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 800f54a:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800f54e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f552:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55a:	ea80 0602 	eor.w	r6, r0, r2
 800f55e:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 800f562:	404b      	eors	r3, r1
 800f564:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800f568:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800f56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f570:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800f574:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 800f578:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f57c:	02da      	lsls	r2, r3, #11
 800f57e:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f582:	0d5b      	lsrs	r3, r3, #21
 800f584:	4313      	orrs	r3, r2
 800f586:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800f58a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800f58e:	02da      	lsls	r2, r3, #11
 800f590:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800f594:	0d5b      	lsrs	r3, r3, #21
 800f596:	4313      	orrs	r3, r2
 800f598:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800f59c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a4:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f5a8:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 800f5ac:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800f5b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5b4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	ea80 0602 	eor.w	r6, r0, r2
 800f5c0:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 800f5c4:	404b      	eors	r3, r1
 800f5c6:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800f5ca:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800f5d6:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 800f5da:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f5de:	0ada      	lsrs	r2, r3, #11
 800f5e0:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f5e4:	055b      	lsls	r3, r3, #21
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800f5ec:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800f5f0:	0ada      	lsrs	r2, r3, #11
 800f5f2:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800f5f6:	055b      	lsls	r3, r3, #21
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800f5fe:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f606:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f60a:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800f60e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800f612:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f616:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	ea80 0602 	eor.w	r6, r0, r2
 800f622:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 800f626:	404b      	eors	r3, r1
 800f628:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800f62c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800f630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f634:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800f638:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 800f63c:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f640:	0c9a      	lsrs	r2, r3, #18
 800f642:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f646:	039b      	lsls	r3, r3, #14
 800f648:	4313      	orrs	r3, r2
 800f64a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800f64e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800f652:	0c9a      	lsrs	r2, r3, #18
 800f654:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800f658:	039b      	lsls	r3, r3, #14
 800f65a:	4313      	orrs	r3, r2
 800f65c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f660:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800f664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f668:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800f66c:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800f670:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	43d1      	mvns	r1, r2
 800f67a:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 800f67e:	43db      	mvns	r3, r3
 800f680:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800f684:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68c:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 800f690:	4011      	ands	r1, r2
 800f692:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 800f696:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 800f69a:	400b      	ands	r3, r1
 800f69c:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800f6a0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a8:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 800f6ac:	4051      	eors	r1, r2
 800f6ae:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 800f6b2:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 800f6b6:	404b      	eors	r3, r1
 800f6b8:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800f6bc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c4:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f6c8:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800f6cc:	4afd      	ldr	r2, [pc, #1012]	; (800fac4 <KeccakF1600_StatePermute+0xc78>)
 800f6ce:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800f6d2:	00db      	lsls	r3, r3, #3
 800f6d4:	4413      	add	r3, r2
 800f6d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6da:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800f6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e2:	ea82 0600 	eor.w	r6, r2, r0
 800f6e6:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 800f6ea:	404b      	eors	r3, r1
 800f6ec:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800f6f0:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800f6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f8:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800f6fc:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 800f700:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	43d1      	mvns	r1, r2
 800f70a:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800f70e:	43db      	mvns	r3, r3
 800f710:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800f714:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71c:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 800f720:	4011      	ands	r1, r2
 800f722:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 800f726:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 800f72a:	400b      	ands	r3, r1
 800f72c:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 800f730:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f738:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 800f73c:	4051      	eors	r1, r2
 800f73e:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800f742:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 800f746:	404b      	eors	r3, r1
 800f748:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800f74c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800f750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f754:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800f758:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 800f75c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f764:	43d1      	mvns	r1, r2
 800f766:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 800f76a:	43db      	mvns	r3, r3
 800f76c:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800f770:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 800f77c:	4011      	ands	r1, r2
 800f77e:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 800f782:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 800f786:	400b      	ands	r3, r1
 800f788:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 800f78c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800f790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f794:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 800f798:	4051      	eors	r1, r2
 800f79a:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800f79e:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 800f7a2:	404b      	eors	r3, r1
 800f7a4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800f7a8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800f7b4:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 800f7b8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c0:	43d1      	mvns	r1, r2
 800f7c2:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 800f7c6:	43db      	mvns	r3, r3
 800f7c8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800f7cc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d4:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 800f7d8:	4011      	ands	r1, r2
 800f7da:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 800f7de:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800f7e2:	400b      	ands	r3, r1
 800f7e4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800f7e8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 800f7f4:	4051      	eors	r1, r2
 800f7f6:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 800f7fa:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800f7fe:	404b      	eors	r3, r1
 800f800:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800f804:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80c:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800f810:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 800f814:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800f818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81c:	43d1      	mvns	r1, r2
 800f81e:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800f822:	43db      	mvns	r3, r3
 800f824:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 800f828:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800f834:	4011      	ands	r1, r2
 800f836:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 800f83a:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 800f83e:	400b      	ands	r3, r1
 800f840:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800f844:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800f848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84c:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 800f850:	4051      	eors	r1, r2
 800f852:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 800f856:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 800f85a:	404b      	eors	r3, r1
 800f85c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800f860:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800f864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f868:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800f86c:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800f870:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800f874:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f878:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	ea80 0602 	eor.w	r6, r0, r2
 800f884:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 800f888:	404b      	eors	r3, r1
 800f88a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800f88e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f896:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800f89a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800f89e:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f8a2:	091a      	lsrs	r2, r3, #4
 800f8a4:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f8a8:	071b      	lsls	r3, r3, #28
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800f8b0:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800f8b4:	091a      	lsrs	r2, r3, #4
 800f8b6:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800f8ba:	071b      	lsls	r3, r3, #28
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800f8c2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ca:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800f8ce:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 800f8d2:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800f8d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8da:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800f8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e2:	ea80 0602 	eor.w	r6, r0, r2
 800f8e6:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800f8ea:	404b      	eors	r3, r1
 800f8ec:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800f8f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f8:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800f8fc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 800f900:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f904:	0b1a      	lsrs	r2, r3, #12
 800f906:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f90a:	051b      	lsls	r3, r3, #20
 800f90c:	4313      	orrs	r3, r2
 800f90e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800f912:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800f916:	0b1a      	lsrs	r2, r3, #12
 800f918:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800f91c:	051b      	lsls	r3, r3, #20
 800f91e:	4313      	orrs	r3, r2
 800f920:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800f924:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800f928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800f930:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 800f934:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800f938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f93c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800f940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f944:	ea80 0602 	eor.w	r6, r0, r2
 800f948:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 800f94c:	404b      	eors	r3, r1
 800f94e:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800f952:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800f95e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800f962:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f966:	0f5a      	lsrs	r2, r3, #29
 800f968:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f96c:	00db      	lsls	r3, r3, #3
 800f96e:	4313      	orrs	r3, r2
 800f970:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800f974:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800f978:	0f5a      	lsrs	r2, r3, #29
 800f97a:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800f97e:	00db      	lsls	r3, r3, #3
 800f980:	4313      	orrs	r3, r2
 800f982:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800f986:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800f98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800f992:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 800f996:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800f99a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f99e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800f9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a6:	ea80 0602 	eor.w	r6, r0, r2
 800f9aa:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 800f9ae:	404b      	eors	r3, r1
 800f9b0:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800f9b4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800f9c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 800f9c4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f9c8:	035a      	lsls	r2, r3, #13
 800f9ca:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f9ce:	0cdb      	lsrs	r3, r3, #19
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800f9d6:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800f9da:	035a      	lsls	r2, r3, #13
 800f9dc:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800f9e0:	0cdb      	lsrs	r3, r3, #19
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800f9e8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f0:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800f9f4:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 800f9f8:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800f9fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa00:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	ea80 0602 	eor.w	r6, r0, r2
 800fa0c:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 800fa10:	404b      	eors	r3, r1
 800fa12:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800fa16:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800fa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1e:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800fa22:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 800fa26:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800fa2a:	075a      	lsls	r2, r3, #29
 800fa2c:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800fa30:	08db      	lsrs	r3, r3, #3
 800fa32:	4313      	orrs	r3, r2
 800fa34:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800fa38:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800fa3c:	075a      	lsls	r2, r3, #29
 800fa3e:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800fa42:	08db      	lsrs	r3, r3, #3
 800fa44:	4313      	orrs	r3, r2
 800fa46:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800fa4a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa52:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800fa56:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800fa5a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	43d1      	mvns	r1, r2
 800fa64:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800fa68:	43db      	mvns	r3, r3
 800fa6a:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 800fa6e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 800fa7a:	4011      	ands	r1, r2
 800fa7c:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 800fa80:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800fa84:	400b      	ands	r3, r1
 800fa86:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 800fa8a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 800fa96:	4051      	eors	r1, r2
 800fa98:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800fa9c:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 800faa0:	404b      	eors	r3, r1
 800faa2:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800faa6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800fab2:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 800fab6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800faba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabe:	43d1      	mvns	r1, r2
 800fac0:	e002      	b.n	800fac8 <KeccakF1600_StatePermute+0xc7c>
 800fac2:	bf00      	nop
 800fac4:	080174c0 	.word	0x080174c0
 800fac8:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 800facc:	43db      	mvns	r3, r3
 800face:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 800fad2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 800fade:	4011      	ands	r1, r2
 800fae0:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 800fae4:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 800fae8:	400b      	ands	r3, r1
 800faea:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800faee:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800fafa:	4051      	eors	r1, r2
 800fafc:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 800fb00:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 800fb04:	404b      	eors	r3, r1
 800fb06:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800fb0a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800fb16:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800fb1a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb22:	43d1      	mvns	r1, r2
 800fb24:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 800fb28:	43db      	mvns	r3, r3
 800fb2a:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 800fb2e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb36:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 800fb3a:	4011      	ands	r1, r2
 800fb3c:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 800fb40:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800fb44:	400b      	ands	r3, r1
 800fb46:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 800fb4a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb52:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 800fb56:	4051      	eors	r1, r2
 800fb58:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 800fb5c:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 800fb60:	404b      	eors	r3, r1
 800fb62:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800fb66:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800fb72:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800fb76:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	43d1      	mvns	r1, r2
 800fb80:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800fb84:	43db      	mvns	r3, r3
 800fb86:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800fb8a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb92:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 800fb96:	4011      	ands	r1, r2
 800fb98:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 800fb9c:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 800fba0:	400b      	ands	r3, r1
 800fba2:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800fba6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 800fbb2:	4051      	eors	r1, r2
 800fbb4:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800fbb8:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 800fbbc:	404b      	eors	r3, r1
 800fbbe:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800fbc2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800fbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbca:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800fbce:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 800fbd2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbda:	43d1      	mvns	r1, r2
 800fbdc:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 800fbe0:	43db      	mvns	r3, r3
 800fbe2:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800fbe6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbee:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 800fbf2:	4011      	ands	r1, r2
 800fbf4:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 800fbf8:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 800fbfc:	400b      	ands	r3, r1
 800fbfe:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 800fc02:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0a:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 800fc0e:	4051      	eors	r1, r2
 800fc10:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 800fc14:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 800fc18:	404b      	eors	r3, r1
 800fc1a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800fc1e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800fc2a:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 800fc2e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800fc32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc36:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800fc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3e:	ea80 0602 	eor.w	r6, r0, r2
 800fc42:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 800fc46:	404b      	eors	r3, r1
 800fc48:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800fc4c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800fc58:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 800fc5c:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800fc60:	0fda      	lsrs	r2, r3, #31
 800fc62:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800fc66:	005b      	lsls	r3, r3, #1
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800fc6e:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800fc72:	0fda      	lsrs	r2, r3, #31
 800fc74:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800fc78:	005b      	lsls	r3, r3, #1
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800fc80:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800fc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc88:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800fc8c:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 800fc90:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800fc94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc98:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	ea80 0602 	eor.w	r6, r0, r2
 800fca4:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 800fca8:	404b      	eors	r3, r1
 800fcaa:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800fcae:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800fcb2:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800fcb6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 800fcba:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800fcbe:	0e9a      	lsrs	r2, r3, #26
 800fcc0:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800fcc4:	019b      	lsls	r3, r3, #6
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800fccc:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800fcd0:	0e9a      	lsrs	r2, r3, #26
 800fcd2:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800fcd6:	019b      	lsls	r3, r3, #6
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800fcde:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800fce2:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800fce6:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 800fcea:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800fcee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fcf2:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	ea80 0602 	eor.w	r6, r0, r2
 800fcfe:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 800fd02:	404b      	eors	r3, r1
 800fd04:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800fd08:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800fd0c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800fd10:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 800fd14:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800fd18:	09da      	lsrs	r2, r3, #7
 800fd1a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800fd1e:	065b      	lsls	r3, r3, #25
 800fd20:	4313      	orrs	r3, r2
 800fd22:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800fd26:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800fd2a:	09da      	lsrs	r2, r3, #7
 800fd2c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800fd30:	065b      	lsls	r3, r3, #25
 800fd32:	4313      	orrs	r3, r2
 800fd34:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800fd38:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800fd3c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800fd40:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800fd44:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800fd48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd4c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800fd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd54:	ea80 0602 	eor.w	r6, r0, r2
 800fd58:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 800fd5c:	404b      	eors	r3, r1
 800fd5e:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800fd62:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800fd66:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800fd6a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 800fd6e:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800fd72:	0e1a      	lsrs	r2, r3, #24
 800fd74:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800fd78:	021b      	lsls	r3, r3, #8
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800fd80:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800fd84:	0e1a      	lsrs	r2, r3, #24
 800fd86:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800fd8a:	021b      	lsls	r3, r3, #8
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800fd92:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800fd96:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800fd9a:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 800fd9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800fda2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fda6:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800fdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdae:	ea80 0602 	eor.w	r6, r0, r2
 800fdb2:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 800fdb6:	404b      	eors	r3, r1
 800fdb8:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800fdbc:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800fdc0:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800fdc4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 800fdc8:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800fdcc:	0b9a      	lsrs	r2, r3, #14
 800fdce:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800fdd2:	049b      	lsls	r3, r3, #18
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800fdda:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800fdde:	0b9a      	lsrs	r2, r3, #14
 800fde0:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800fde4:	049b      	lsls	r3, r3, #18
 800fde6:	4313      	orrs	r3, r2
 800fde8:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800fdec:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800fdf0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800fdf4:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 800fdf8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe00:	43d1      	mvns	r1, r2
 800fe02:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 800fe06:	43db      	mvns	r3, r3
 800fe08:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800fe0c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 800fe18:	4011      	ands	r1, r2
 800fe1a:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 800fe1e:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 800fe22:	400b      	ands	r3, r1
 800fe24:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800fe28:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe30:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 800fe34:	4051      	eors	r1, r2
 800fe36:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 800fe3a:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 800fe3e:	404b      	eors	r3, r1
 800fe40:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800fe44:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800fe48:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800fe4c:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800fe50:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fe54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe58:	43d1      	mvns	r1, r2
 800fe5a:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 800fe5e:	43db      	mvns	r3, r3
 800fe60:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800fe64:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6c:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 800fe70:	4011      	ands	r1, r2
 800fe72:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 800fe76:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 800fe7a:	400b      	ands	r3, r1
 800fe7c:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 800fe80:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe88:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 800fe8c:	4051      	eors	r1, r2
 800fe8e:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800fe92:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 800fe96:	404b      	eors	r3, r1
 800fe98:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800fe9c:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800fea0:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800fea4:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 800fea8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	43d1      	mvns	r1, r2
 800feb2:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800feb6:	43db      	mvns	r3, r3
 800feb8:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800febc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800fec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec4:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 800fec8:	4011      	ands	r1, r2
 800feca:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 800fece:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 800fed2:	400b      	ands	r3, r1
 800fed4:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800fed8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800fedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee0:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 800fee4:	4051      	eors	r1, r2
 800fee6:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 800feea:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 800feee:	404b      	eors	r3, r1
 800fef0:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800fef4:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800fef8:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800fefc:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 800ff00:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ff04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff08:	43d1      	mvns	r1, r2
 800ff0a:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 800ff0e:	43db      	mvns	r3, r3
 800ff10:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800ff14:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ff18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1c:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 800ff20:	4011      	ands	r1, r2
 800ff22:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 800ff26:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 800ff2a:	400b      	ands	r3, r1
 800ff2c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800ff30:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff38:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 800ff3c:	4051      	eors	r1, r2
 800ff3e:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800ff42:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800ff46:	404b      	eors	r3, r1
 800ff48:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800ff4c:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 800ff50:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800ff54:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 800ff58:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	43d1      	mvns	r1, r2
 800ff62:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 800ff66:	43db      	mvns	r3, r3
 800ff68:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800ff6c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff74:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 800ff78:	4011      	ands	r1, r2
 800ff7a:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 800ff7e:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 800ff82:	400b      	ands	r3, r1
 800ff84:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800ff88:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800ff94:	4051      	eors	r1, r2
 800ff96:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800ff9a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 800ff9e:	404b      	eors	r3, r1
 800ffa0:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800ffa4:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 800ffa8:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800ffac:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 800ffb0:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800ffb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffb8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800ffbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc0:	ea80 0602 	eor.w	r6, r0, r2
 800ffc4:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 800ffc8:	404b      	eors	r3, r1
 800ffca:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800ffce:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 800ffd2:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800ffd6:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 800ffda:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800ffde:	095a      	lsrs	r2, r3, #5
 800ffe0:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800ffe4:	06db      	lsls	r3, r3, #27
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800ffec:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800fff0:	095a      	lsrs	r2, r3, #5
 800fff2:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800fff6:	06db      	lsls	r3, r3, #27
 800fff8:	4313      	orrs	r3, r2
 800fffa:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800fffe:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8010002:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010006:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 801000a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 801000e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010012:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001a:	ea80 0602 	eor.w	r6, r0, r2
 801001e:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 8010022:	404b      	eors	r3, r1
 8010024:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8010028:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 801002c:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8010030:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8010034:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8010038:	011a      	lsls	r2, r3, #4
 801003a:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 801003e:	0f1b      	lsrs	r3, r3, #28
 8010040:	4313      	orrs	r3, r2
 8010042:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8010046:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 801004a:	011a      	lsls	r2, r3, #4
 801004c:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8010050:	0f1b      	lsrs	r3, r3, #28
 8010052:	4313      	orrs	r3, r2
 8010054:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8010058:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 801005c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010060:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8010064:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8010068:	e9d3 0100 	ldrd	r0, r1, [r3]
 801006c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	ea80 0602 	eor.w	r6, r0, r2
 8010078:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 801007c:	404b      	eors	r3, r1
 801007e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8010082:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8010086:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 801008a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 801008e:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8010092:	0d9a      	lsrs	r2, r3, #22
 8010094:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8010098:	029b      	lsls	r3, r3, #10
 801009a:	4313      	orrs	r3, r2
 801009c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80100a0:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 80100a4:	0d9a      	lsrs	r2, r3, #22
 80100a6:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 80100aa:	029b      	lsls	r3, r3, #10
 80100ac:	4313      	orrs	r3, r2
 80100ae:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80100b2:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80100b6:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80100ba:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 80100be:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80100c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100c6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80100ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ce:	ea80 0602 	eor.w	r6, r0, r2
 80100d2:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 80100d6:	404b      	eors	r3, r1
 80100d8:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80100dc:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 80100e0:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80100e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 80100e8:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 80100ec:	0c5a      	lsrs	r2, r3, #17
 80100ee:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 80100f2:	03db      	lsls	r3, r3, #15
 80100f4:	4313      	orrs	r3, r2
 80100f6:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80100fa:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 80100fe:	0c5a      	lsrs	r2, r3, #17
 8010100:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8010104:	03db      	lsls	r3, r3, #15
 8010106:	4313      	orrs	r3, r2
 8010108:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 801010c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8010110:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010114:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8010118:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 801011c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010120:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010128:	ea80 0602 	eor.w	r6, r0, r2
 801012c:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 8010130:	404b      	eors	r3, r1
 8010132:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8010136:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 801013a:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 801013e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8010142:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8010146:	061a      	lsls	r2, r3, #24
 8010148:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801014c:	0a1b      	lsrs	r3, r3, #8
 801014e:	4313      	orrs	r3, r2
 8010150:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8010154:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8010158:	061a      	lsls	r2, r3, #24
 801015a:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 801015e:	0a1b      	lsrs	r3, r3, #8
 8010160:	4313      	orrs	r3, r2
 8010162:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8010166:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 801016a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 801016e:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8010172:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017a:	43d1      	mvns	r1, r2
 801017c:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8010180:	43db      	mvns	r3, r3
 8010182:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8010186:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 8010192:	4011      	ands	r1, r2
 8010194:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 8010198:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 801019c:	400b      	ands	r3, r1
 801019e:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 80101a2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80101a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101aa:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 80101ae:	4051      	eors	r1, r2
 80101b0:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 80101b4:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 80101b8:	404b      	eors	r3, r1
 80101ba:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 80101be:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 80101c2:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 80101c6:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 80101ca:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	43d1      	mvns	r1, r2
 80101d4:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 80101d8:	43db      	mvns	r3, r3
 80101da:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 80101de:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80101e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e6:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 80101ea:	4011      	ands	r1, r2
 80101ec:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 80101f0:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 80101f4:	400b      	ands	r3, r1
 80101f6:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 80101fa:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 8010206:	4051      	eors	r1, r2
 8010208:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 801020c:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 8010210:	404b      	eors	r3, r1
 8010212:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8010216:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 801021a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 801021e:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8010222:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022a:	43d1      	mvns	r1, r2
 801022c:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8010230:	43db      	mvns	r3, r3
 8010232:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8010236:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 8010242:	4011      	ands	r1, r2
 8010244:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 8010248:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 801024c:	400b      	ands	r3, r1
 801024e:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8010252:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025a:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 801025e:	4051      	eors	r1, r2
 8010260:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8010264:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 8010268:	404b      	eors	r3, r1
 801026a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 801026e:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8010272:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8010276:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 801027a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	43d1      	mvns	r1, r2
 8010284:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8010288:	43db      	mvns	r3, r3
 801028a:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 801028e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 801029a:	4011      	ands	r1, r2
 801029c:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 80102a0:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 80102a4:	400b      	ands	r3, r1
 80102a6:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 80102aa:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 80102b6:	4051      	eors	r1, r2
 80102b8:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 80102bc:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 80102c0:	404b      	eors	r3, r1
 80102c2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80102c6:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80102ca:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 80102ce:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 80102d2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	43d1      	mvns	r1, r2
 80102dc:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 80102e0:	43db      	mvns	r3, r3
 80102e2:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 80102e6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80102ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ee:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 80102f2:	4011      	ands	r1, r2
 80102f4:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 80102f8:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 80102fc:	400b      	ands	r3, r1
 80102fe:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8010302:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030a:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 801030e:	4051      	eors	r1, r2
 8010310:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8010314:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 8010318:	404b      	eors	r3, r1
 801031a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 801031e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8010322:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8010326:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 801032a:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 801032e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010332:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033a:	ea80 0602 	eor.w	r6, r0, r2
 801033e:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 8010342:	404b      	eors	r3, r1
 8010344:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8010348:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 801034c:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8010350:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8010354:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8010358:	079a      	lsls	r2, r3, #30
 801035a:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 801035e:	089b      	lsrs	r3, r3, #2
 8010360:	4313      	orrs	r3, r2
 8010362:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8010366:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 801036a:	079a      	lsls	r2, r3, #30
 801036c:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8010370:	089b      	lsrs	r3, r3, #2
 8010372:	4313      	orrs	r3, r2
 8010374:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8010378:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 801037c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010380:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8010384:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8010388:	e9d3 0100 	ldrd	r0, r1, [r3]
 801038c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010394:	ea80 0602 	eor.w	r6, r0, r2
 8010398:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 801039c:	404b      	eors	r3, r1
 801039e:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80103a2:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80103a6:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 80103aa:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 80103ae:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 80103b2:	05da      	lsls	r2, r3, #23
 80103b4:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 80103b8:	0a5b      	lsrs	r3, r3, #9
 80103ba:	4313      	orrs	r3, r2
 80103bc:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 80103c0:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 80103c4:	05da      	lsls	r2, r3, #23
 80103c6:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 80103ca:	0a5b      	lsrs	r3, r3, #9
 80103cc:	4313      	orrs	r3, r2
 80103ce:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80103d2:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80103d6:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80103da:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 80103de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80103e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103e6:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ee:	ea80 0602 	eor.w	r6, r0, r2
 80103f2:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 80103f6:	404b      	eors	r3, r1
 80103f8:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80103fc:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8010400:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8010404:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8010408:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 801040c:	01da      	lsls	r2, r3, #7
 801040e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8010412:	0e5b      	lsrs	r3, r3, #25
 8010414:	4313      	orrs	r3, r2
 8010416:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 801041a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801041e:	01da      	lsls	r2, r3, #7
 8010420:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8010424:	0e5b      	lsrs	r3, r3, #25
 8010426:	4313      	orrs	r3, r2
 8010428:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 801042c:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8010430:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010434:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8010438:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 801043c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010440:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010448:	ea80 0602 	eor.w	r6, r0, r2
 801044c:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 8010450:	404b      	eors	r3, r1
 8010452:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8010456:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 801045a:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 801045e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8010462:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8010466:	025a      	lsls	r2, r3, #9
 8010468:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801046c:	0ddb      	lsrs	r3, r3, #23
 801046e:	4313      	orrs	r3, r2
 8010470:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8010474:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8010478:	025a      	lsls	r2, r3, #9
 801047a:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801047e:	0ddb      	lsrs	r3, r3, #23
 8010480:	4313      	orrs	r3, r2
 8010482:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8010486:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 801048a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 801048e:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8010492:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8010496:	e9d3 0100 	ldrd	r0, r1, [r3]
 801049a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	ea80 0602 	eor.w	r6, r0, r2
 80104a6:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 80104aa:	404b      	eors	r3, r1
 80104ac:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 80104b0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80104b4:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 80104b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 80104bc:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80104c0:	0f9a      	lsrs	r2, r3, #30
 80104c2:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	4313      	orrs	r3, r2
 80104ca:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80104ce:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80104d2:	0f9a      	lsrs	r2, r3, #30
 80104d4:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	4313      	orrs	r3, r2
 80104dc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80104e0:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80104e4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80104e8:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 80104ec:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	43d1      	mvns	r1, r2
 80104f6:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 80104fa:	43db      	mvns	r3, r3
 80104fc:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8010500:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 801050c:	4011      	ands	r1, r2
 801050e:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 8010512:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 8010516:	400b      	ands	r3, r1
 8010518:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 801051c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 8010528:	4051      	eors	r1, r2
 801052a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 801052e:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 8010532:	404b      	eors	r3, r1
 8010534:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8010538:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 801053c:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8010540:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8010544:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054c:	43d1      	mvns	r1, r2
 801054e:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8010552:	43db      	mvns	r3, r3
 8010554:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8010558:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801055c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010560:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 8010564:	4011      	ands	r1, r2
 8010566:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 801056a:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 801056e:	400b      	ands	r3, r1
 8010570:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 8010574:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057c:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 8010580:	4051      	eors	r1, r2
 8010582:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8010586:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 801058a:	404b      	eors	r3, r1
 801058c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8010590:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8010594:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8010598:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 801059c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	43d1      	mvns	r1, r2
 80105a6:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 80105aa:	43db      	mvns	r3, r3
 80105ac:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 80105b0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80105b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b8:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 80105bc:	4011      	ands	r1, r2
 80105be:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 80105c2:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 80105c6:	400b      	ands	r3, r1
 80105c8:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 80105cc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80105d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d4:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 80105d8:	4051      	eors	r1, r2
 80105da:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 80105de:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 80105e2:	404b      	eors	r3, r1
 80105e4:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80105e8:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80105ec:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 80105f0:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 80105f4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fc:	43d1      	mvns	r1, r2
 80105fe:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8010602:	43db      	mvns	r3, r3
 8010604:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8010608:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010610:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 8010614:	4011      	ands	r1, r2
 8010616:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 801061a:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 801061e:	400b      	ands	r3, r1
 8010620:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8010624:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062c:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 8010630:	4051      	eors	r1, r2
 8010632:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8010636:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 801063a:	404b      	eors	r3, r1
 801063c:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8010640:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8010644:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8010648:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 801064c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	43d1      	mvns	r1, r2
 8010656:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 801065a:	43db      	mvns	r3, r3
 801065c:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 8010660:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010668:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 801066c:	4011      	ands	r1, r2
 801066e:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 8010672:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 8010676:	400b      	ands	r3, r1
 8010678:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 801067c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 8010688:	4051      	eors	r1, r2
 801068a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 801068e:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 8010692:	404b      	eors	r3, r1
 8010694:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8010698:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 801069c:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80106a0:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 80106a4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80106a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80106ac:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 80106b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b4:	ea80 0602 	eor.w	r6, r0, r2
 80106b8:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 80106bc:	404b      	eors	r3, r1
 80106be:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 80106c2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 80106ce:	4051      	eors	r1, r2
 80106d0:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 80106d4:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 80106d8:	404b      	eors	r3, r1
 80106da:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 80106de:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 80106ea:	4051      	eors	r1, r2
 80106ec:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 80106f0:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 80106f4:	404b      	eors	r3, r1
 80106f6:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 80106fa:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80106fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010702:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8010706:	4051      	eors	r1, r2
 8010708:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 801070c:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 8010710:	404b      	eors	r3, r1
 8010712:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8010716:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 801071a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801071e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8010722:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8010726:	e9d3 0100 	ldrd	r0, r1, [r3]
 801072a:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 801072e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010732:	ea80 0602 	eor.w	r6, r0, r2
 8010736:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 801073a:	404b      	eors	r3, r1
 801073c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8010740:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8010744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010748:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 801074c:	4051      	eors	r1, r2
 801074e:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 8010752:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 8010756:	404b      	eors	r3, r1
 8010758:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 801075c:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010764:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 8010768:	4051      	eors	r1, r2
 801076a:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 801076e:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 8010772:	404b      	eors	r3, r1
 8010774:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 8010778:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 801077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010780:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 8010784:	4051      	eors	r1, r2
 8010786:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 801078a:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 801078e:	404b      	eors	r3, r1
 8010790:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8010794:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8010798:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801079c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80107a0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80107a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80107a8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80107ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b0:	ea80 0602 	eor.w	r6, r0, r2
 80107b4:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 80107b8:	404b      	eors	r3, r1
 80107ba:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 80107be:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80107c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c6:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 80107ca:	4051      	eors	r1, r2
 80107cc:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 80107d0:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 80107d4:	404b      	eors	r3, r1
 80107d6:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 80107da:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80107de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e2:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 80107e6:	4051      	eors	r1, r2
 80107e8:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 80107ec:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 80107f0:	404b      	eors	r3, r1
 80107f2:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 80107f6:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80107fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fe:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 8010802:	4051      	eors	r1, r2
 8010804:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8010808:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 801080c:	404b      	eors	r3, r1
 801080e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8010812:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8010816:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 801081a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 801081e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8010822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010826:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 801082a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082e:	ea80 0602 	eor.w	r6, r0, r2
 8010832:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 8010836:	404b      	eors	r3, r1
 8010838:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 801083c:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 8010848:	4051      	eors	r1, r2
 801084a:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 801084e:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 8010852:	404b      	eors	r3, r1
 8010854:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 8010858:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 801085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010860:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 8010864:	4051      	eors	r1, r2
 8010866:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 801086a:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 801086e:	404b      	eors	r3, r1
 8010870:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8010874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087c:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 8010880:	4051      	eors	r1, r2
 8010882:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 8010886:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 801088a:	404b      	eors	r3, r1
 801088c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8010890:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8010894:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010898:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 801089c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80108a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108a4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	ea80 0602 	eor.w	r6, r0, r2
 80108b0:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 80108b4:	404b      	eors	r3, r1
 80108b6:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 80108ba:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80108be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c2:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 80108c6:	4051      	eors	r1, r2
 80108c8:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 80108cc:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 80108d0:	404b      	eors	r3, r1
 80108d2:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 80108d6:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80108da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108de:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 80108e2:	4051      	eors	r1, r2
 80108e4:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 80108e8:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 80108ec:	404b      	eors	r3, r1
 80108ee:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 80108f2:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 80108fe:	4051      	eors	r1, r2
 8010900:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8010904:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 8010908:	404b      	eors	r3, r1
 801090a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801090e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8010912:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010916:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 801091a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801091e:	0fda      	lsrs	r2, r3, #31
 8010920:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8010924:	005b      	lsls	r3, r3, #1
 8010926:	4313      	orrs	r3, r2
 8010928:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 801092c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8010930:	0fda      	lsrs	r2, r3, #31
 8010932:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8010936:	005b      	lsls	r3, r3, #1
 8010938:	4313      	orrs	r3, r2
 801093a:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 801093e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 801094a:	4051      	eors	r1, r2
 801094c:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8010950:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 8010954:	404b      	eors	r3, r1
 8010956:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 801095a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801095e:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8010962:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8010966:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801096a:	0fda      	lsrs	r2, r3, #31
 801096c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	4313      	orrs	r3, r2
 8010974:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 8010978:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801097c:	0fda      	lsrs	r2, r3, #31
 801097e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	4313      	orrs	r3, r2
 8010986:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 801098a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010992:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 8010996:	4051      	eors	r1, r2
 8010998:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 801099c:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 80109a0:	404b      	eors	r3, r1
 80109a2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80109a6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80109aa:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 80109ae:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 80109b2:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 80109b6:	0fda      	lsrs	r2, r3, #31
 80109b8:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4313      	orrs	r3, r2
 80109c0:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 80109c4:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80109c8:	0fda      	lsrs	r2, r3, #31
 80109ca:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 80109ce:	005b      	lsls	r3, r3, #1
 80109d0:	4313      	orrs	r3, r2
 80109d2:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 80109d6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 80109e2:	4051      	eors	r1, r2
 80109e4:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 80109e8:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 80109ec:	404b      	eors	r3, r1
 80109ee:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80109f2:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80109f6:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 80109fa:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 80109fe:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8010a02:	0fda      	lsrs	r2, r3, #31
 8010a04:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8010a10:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8010a14:	0fda      	lsrs	r2, r3, #31
 8010a16:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8010a1a:	005b      	lsls	r3, r3, #1
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 8010a22:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 8010a2e:	4051      	eors	r1, r2
 8010a30:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8010a34:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 8010a38:	404b      	eors	r3, r1
 8010a3a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8010a3e:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8010a42:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8010a46:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8010a4a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8010a4e:	0fda      	lsrs	r2, r3, #31
 8010a50:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8010a54:	005b      	lsls	r3, r3, #1
 8010a56:	4313      	orrs	r3, r2
 8010a58:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8010a5c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8010a60:	0fda      	lsrs	r2, r3, #31
 8010a62:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8010a66:	005b      	lsls	r3, r3, #1
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 8010a6e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 8010a7a:	4051      	eors	r1, r2
 8010a7c:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8010a80:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 8010a84:	404b      	eors	r3, r1
 8010a86:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010a8a:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8010a8e:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8010a92:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8010a96:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8010a9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a9e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa6:	ea80 0602 	eor.w	r6, r0, r2
 8010aaa:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 8010aae:	404b      	eors	r3, r1
 8010ab0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8010ab4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8010ab8:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8010abc:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 8010ac0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8010ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010acc:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 8010ad0:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8010ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ad8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae0:	ea80 0602 	eor.w	r6, r0, r2
 8010ae4:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 8010ae8:	404b      	eors	r3, r1
 8010aea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8010aee:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8010af2:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8010af6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 8010afa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010afe:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8010b02:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b06:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8010b0a:	6803      	ldr	r3, [r0, #0]
 8010b0c:	031a      	lsls	r2, r3, #12
 8010b0e:	680b      	ldr	r3, [r1, #0]
 8010b10:	0d1b      	lsrs	r3, r3, #20
 8010b12:	4313      	orrs	r3, r2
 8010b14:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8010b18:	680b      	ldr	r3, [r1, #0]
 8010b1a:	031a      	lsls	r2, r3, #12
 8010b1c:	6803      	ldr	r3, [r0, #0]
 8010b1e:	0d1b      	lsrs	r3, r3, #20
 8010b20:	4313      	orrs	r3, r2
 8010b22:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8010b26:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8010b2a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010b2e:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 8010b32:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8010b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b3a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b42:	ea80 0602 	eor.w	r6, r0, r2
 8010b46:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 8010b4a:	404b      	eors	r3, r1
 8010b4c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8010b50:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8010b54:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8010b58:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 8010b5c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b60:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 8010b64:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010b68:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8010b6c:	6803      	ldr	r3, [r0, #0]
 8010b6e:	02da      	lsls	r2, r3, #11
 8010b70:	680b      	ldr	r3, [r1, #0]
 8010b72:	0d5b      	lsrs	r3, r3, #21
 8010b74:	4313      	orrs	r3, r2
 8010b76:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8010b7a:	680b      	ldr	r3, [r1, #0]
 8010b7c:	02da      	lsls	r2, r3, #11
 8010b7e:	6803      	ldr	r3, [r0, #0]
 8010b80:	0d5b      	lsrs	r3, r3, #21
 8010b82:	4313      	orrs	r3, r2
 8010b84:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8010b88:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8010b8c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010b90:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 8010b94:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8010b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b9c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	ea80 0602 	eor.w	r6, r0, r2
 8010ba8:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 8010bac:	404b      	eors	r3, r1
 8010bae:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8010bb2:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8010bb6:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8010bba:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 8010bbe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010bc2:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8010bc6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010bca:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 8010bce:	6803      	ldr	r3, [r0, #0]
 8010bd0:	0ada      	lsrs	r2, r3, #11
 8010bd2:	680b      	ldr	r3, [r1, #0]
 8010bd4:	055b      	lsls	r3, r3, #21
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8010bdc:	680b      	ldr	r3, [r1, #0]
 8010bde:	0ada      	lsrs	r2, r3, #11
 8010be0:	6803      	ldr	r3, [r0, #0]
 8010be2:	055b      	lsls	r3, r3, #21
 8010be4:	4313      	orrs	r3, r2
 8010be6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8010bea:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 8010bee:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010bf2:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8010bf6:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010bfe:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	ea80 0602 	eor.w	r6, r0, r2
 8010c0a:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 8010c0e:	404b      	eors	r3, r1
 8010c10:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8010c14:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8010c18:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8010c1c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 8010c20:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010c24:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8010c28:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010c2c:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 8010c30:	6803      	ldr	r3, [r0, #0]
 8010c32:	0c9a      	lsrs	r2, r3, #18
 8010c34:	680b      	ldr	r3, [r1, #0]
 8010c36:	039b      	lsls	r3, r3, #14
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8010c3e:	680b      	ldr	r3, [r1, #0]
 8010c40:	0c9a      	lsrs	r2, r3, #18
 8010c42:	6803      	ldr	r3, [r0, #0]
 8010c44:	039b      	lsls	r3, r3, #14
 8010c46:	4313      	orrs	r3, r2
 8010c48:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8010c4c:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8010c50:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8010c54:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 8010c58:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c60:	43d1      	mvns	r1, r2
 8010c62:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 8010c66:	43db      	mvns	r3, r3
 8010c68:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 8010c6c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c74:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 8010c78:	4011      	ands	r1, r2
 8010c7a:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 8010c7e:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 8010c82:	400b      	ands	r3, r1
 8010c84:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8010c88:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c90:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 8010c94:	4051      	eors	r1, r2
 8010c96:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8010c9a:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 8010c9e:	404b      	eors	r3, r1
 8010ca0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8010ca4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 8010ca8:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8010cac:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8010cb0:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	4af4      	ldr	r2, [pc, #976]	; (8011088 <KeccakF1600_StatePermute+0x223c>)
 8010cb8:	00db      	lsls	r3, r3, #3
 8010cba:	4413      	add	r3, r2
 8010cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010cc0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8010cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc8:	ea82 0600 	eor.w	r6, r2, r0
 8010ccc:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 8010cd0:	404b      	eors	r3, r1
 8010cd2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8010cd6:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8010cda:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8010cde:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8010ce2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	43d1      	mvns	r1, r2
 8010cec:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 8010cf0:	43db      	mvns	r3, r3
 8010cf2:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8010cf6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfe:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 8010d02:	4011      	ands	r1, r2
 8010d04:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 8010d08:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 8010d0c:	400b      	ands	r3, r1
 8010d0e:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8010d12:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 8010d1e:	4051      	eors	r1, r2
 8010d20:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8010d24:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 8010d28:	404b      	eors	r3, r1
 8010d2a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8010d2e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8010d32:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8010d36:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8010d3a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d42:	43d1      	mvns	r1, r2
 8010d44:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 8010d48:	43db      	mvns	r3, r3
 8010d4a:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8010d4e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 8010d5a:	4011      	ands	r1, r2
 8010d5c:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 8010d60:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 8010d64:	400b      	ands	r3, r1
 8010d66:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8010d6a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 8010d76:	4051      	eors	r1, r2
 8010d78:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8010d7c:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 8010d80:	404b      	eors	r3, r1
 8010d82:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8010d86:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8010d8a:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8010d8e:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 8010d92:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9a:	43d1      	mvns	r1, r2
 8010d9c:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8010da0:	43db      	mvns	r3, r3
 8010da2:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8010da6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dae:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 8010db2:	4011      	ands	r1, r2
 8010db4:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 8010db8:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 8010dbc:	400b      	ands	r3, r1
 8010dbe:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8010dc2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8010dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dca:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 8010dce:	4051      	eors	r1, r2
 8010dd0:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8010dd4:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8010dd8:	404b      	eors	r3, r1
 8010dda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8010dde:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8010de2:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8010de6:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8010dea:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8010dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df2:	43d1      	mvns	r1, r2
 8010df4:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8010df8:	43db      	mvns	r3, r3
 8010dfa:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8010dfe:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8010e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e06:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 8010e0a:	4011      	ands	r1, r2
 8010e0c:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 8010e10:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 8010e14:	400b      	ands	r3, r1
 8010e16:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8010e1a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8010e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e22:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 8010e26:	4051      	eors	r1, r2
 8010e28:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8010e2c:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8010e30:	404b      	eors	r3, r1
 8010e32:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8010e36:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8010e3a:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8010e3e:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8010e42:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8010e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e4a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	ea80 0602 	eor.w	r6, r0, r2
 8010e56:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 8010e5a:	404b      	eors	r3, r1
 8010e5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8010e60:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8010e64:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8010e68:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8010e6c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e70:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8010e74:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010e78:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8010e7c:	6803      	ldr	r3, [r0, #0]
 8010e7e:	091a      	lsrs	r2, r3, #4
 8010e80:	680b      	ldr	r3, [r1, #0]
 8010e82:	071b      	lsls	r3, r3, #28
 8010e84:	4313      	orrs	r3, r2
 8010e86:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8010e8a:	680b      	ldr	r3, [r1, #0]
 8010e8c:	091a      	lsrs	r2, r3, #4
 8010e8e:	6803      	ldr	r3, [r0, #0]
 8010e90:	071b      	lsls	r3, r3, #28
 8010e92:	4313      	orrs	r3, r2
 8010e94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8010e98:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8010e9c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8010ea0:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8010ea4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8010ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010eac:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	ea80 0602 	eor.w	r6, r0, r2
 8010eb8:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 8010ebc:	404b      	eors	r3, r1
 8010ebe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8010ec2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8010ec6:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8010eca:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8010ece:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ed2:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8010ed6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010eda:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8010ede:	6803      	ldr	r3, [r0, #0]
 8010ee0:	0b1a      	lsrs	r2, r3, #12
 8010ee2:	680b      	ldr	r3, [r1, #0]
 8010ee4:	051b      	lsls	r3, r3, #20
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8010eec:	680b      	ldr	r3, [r1, #0]
 8010eee:	0b1a      	lsrs	r2, r3, #12
 8010ef0:	6803      	ldr	r3, [r0, #0]
 8010ef2:	051b      	lsls	r3, r3, #20
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8010efa:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8010efe:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8010f02:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8010f06:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8010f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f0e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8010f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f16:	ea80 0602 	eor.w	r6, r0, r2
 8010f1a:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 8010f1e:	404b      	eors	r3, r1
 8010f20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010f24:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8010f28:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8010f2c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8010f30:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f34:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8010f38:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f3c:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8010f40:	6803      	ldr	r3, [r0, #0]
 8010f42:	0f5a      	lsrs	r2, r3, #29
 8010f44:	680b      	ldr	r3, [r1, #0]
 8010f46:	00db      	lsls	r3, r3, #3
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010f4e:	680b      	ldr	r3, [r1, #0]
 8010f50:	0f5a      	lsrs	r2, r3, #29
 8010f52:	6803      	ldr	r3, [r0, #0]
 8010f54:	00db      	lsls	r3, r3, #3
 8010f56:	4313      	orrs	r3, r2
 8010f58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8010f5c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8010f60:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8010f64:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8010f68:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f70:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8010f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f78:	ea80 0602 	eor.w	r6, r0, r2
 8010f7c:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 8010f80:	404b      	eors	r3, r1
 8010f82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010f86:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8010f8a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8010f8e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8010f92:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f96:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8010f9a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010f9e:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8010fa2:	6803      	ldr	r3, [r0, #0]
 8010fa4:	035a      	lsls	r2, r3, #13
 8010fa6:	680b      	ldr	r3, [r1, #0]
 8010fa8:	0cdb      	lsrs	r3, r3, #19
 8010faa:	4313      	orrs	r3, r2
 8010fac:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010fb0:	680b      	ldr	r3, [r1, #0]
 8010fb2:	035a      	lsls	r2, r3, #13
 8010fb4:	6803      	ldr	r3, [r0, #0]
 8010fb6:	0cdb      	lsrs	r3, r3, #19
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010fbe:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8010fc2:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8010fc6:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8010fca:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fd2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8010fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fda:	ea80 0602 	eor.w	r6, r0, r2
 8010fde:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 8010fe2:	404b      	eors	r3, r1
 8010fe4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010fe8:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8010fec:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8010ff0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8010ff4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8010ff8:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8010ffc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011000:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8011004:	6803      	ldr	r3, [r0, #0]
 8011006:	075a      	lsls	r2, r3, #29
 8011008:	680b      	ldr	r3, [r1, #0]
 801100a:	08db      	lsrs	r3, r3, #3
 801100c:	4313      	orrs	r3, r2
 801100e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8011012:	680b      	ldr	r3, [r1, #0]
 8011014:	075a      	lsls	r2, r3, #29
 8011016:	6803      	ldr	r3, [r0, #0]
 8011018:	08db      	lsrs	r3, r3, #3
 801101a:	4313      	orrs	r3, r2
 801101c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8011020:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8011024:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8011028:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 801102c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011034:	43d1      	mvns	r1, r2
 8011036:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 801103a:	43db      	mvns	r3, r3
 801103c:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8011040:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011048:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 801104c:	4011      	ands	r1, r2
 801104e:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 8011052:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 8011056:	400b      	ands	r3, r1
 8011058:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 801105c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011064:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 8011068:	4051      	eors	r1, r2
 801106a:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 801106e:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 8011072:	404b      	eors	r3, r1
 8011074:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8011078:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 801107c:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8011080:	e9c1 2300 	strd	r2, r3, [r1]
 8011084:	e002      	b.n	801108c <KeccakF1600_StatePermute+0x2240>
 8011086:	bf00      	nop
 8011088:	080174c0 	.word	0x080174c0
            Age =   BCe ^((~BCi)&  BCo );
 801108c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	43d1      	mvns	r1, r2
 8011096:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 801109a:	43db      	mvns	r3, r3
 801109c:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80110a0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a8:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 80110ac:	4011      	ands	r1, r2
 80110ae:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 80110b2:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 80110b6:	400b      	ands	r3, r1
 80110b8:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 80110bc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80110c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c4:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 80110c8:	4051      	eors	r1, r2
 80110ca:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80110ce:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 80110d2:	404b      	eors	r3, r1
 80110d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80110d8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80110dc:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 80110e0:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 80110e4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80110e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ec:	43d1      	mvns	r1, r2
 80110ee:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 80110f2:	43db      	mvns	r3, r3
 80110f4:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 80110f8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8011104:	4011      	ands	r1, r2
 8011106:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 801110a:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 801110e:	400b      	ands	r3, r1
 8011110:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8011114:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111c:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 8011120:	4051      	eors	r1, r2
 8011122:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8011126:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 801112a:	404b      	eors	r3, r1
 801112c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011130:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8011134:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8011138:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 801113c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	43d1      	mvns	r1, r2
 8011146:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 801114a:	43db      	mvns	r3, r3
 801114c:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8011150:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011158:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 801115c:	4011      	ands	r1, r2
 801115e:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 8011162:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 8011166:	400b      	ands	r3, r1
 8011168:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 801116c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 8011178:	4051      	eors	r1, r2
 801117a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 801117e:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 8011182:	404b      	eors	r3, r1
 8011184:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011188:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 801118c:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8011190:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8011194:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119c:	43d1      	mvns	r1, r2
 801119e:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 80111a2:	43db      	mvns	r3, r3
 80111a4:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 80111a8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80111ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b0:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 80111b4:	4011      	ands	r1, r2
 80111b6:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 80111ba:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 80111be:	400b      	ands	r3, r1
 80111c0:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80111c4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80111c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111cc:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 80111d0:	4051      	eors	r1, r2
 80111d2:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 80111d6:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 80111da:	404b      	eors	r3, r1
 80111dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80111e0:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80111e4:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 80111e8:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 80111ec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 80111f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111f4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80111f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fc:	ea80 0602 	eor.w	r6, r0, r2
 8011200:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8011204:	404b      	eors	r3, r1
 8011206:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801120a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 801120e:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8011212:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8011216:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801121a:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 801121e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011222:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8011226:	6803      	ldr	r3, [r0, #0]
 8011228:	0fda      	lsrs	r2, r3, #31
 801122a:	680b      	ldr	r3, [r1, #0]
 801122c:	005b      	lsls	r3, r3, #1
 801122e:	4313      	orrs	r3, r2
 8011230:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8011234:	680b      	ldr	r3, [r1, #0]
 8011236:	0fda      	lsrs	r2, r3, #31
 8011238:	6803      	ldr	r3, [r0, #0]
 801123a:	005b      	lsls	r3, r3, #1
 801123c:	4313      	orrs	r3, r2
 801123e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8011242:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8011246:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 801124a:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 801124e:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8011252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011256:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 801125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125e:	ea80 0602 	eor.w	r6, r0, r2
 8011262:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8011266:	404b      	eors	r3, r1
 8011268:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801126c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8011270:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8011274:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8011278:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801127c:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8011280:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011284:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8011288:	6803      	ldr	r3, [r0, #0]
 801128a:	0e9a      	lsrs	r2, r3, #26
 801128c:	680b      	ldr	r3, [r1, #0]
 801128e:	019b      	lsls	r3, r3, #6
 8011290:	4313      	orrs	r3, r2
 8011292:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8011296:	680b      	ldr	r3, [r1, #0]
 8011298:	0e9a      	lsrs	r2, r3, #26
 801129a:	6803      	ldr	r3, [r0, #0]
 801129c:	019b      	lsls	r3, r3, #6
 801129e:	4313      	orrs	r3, r2
 80112a0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80112a4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80112a8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80112ac:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 80112b0:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80112b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80112b8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80112bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c0:	ea80 0602 	eor.w	r6, r0, r2
 80112c4:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 80112c8:	404b      	eors	r3, r1
 80112ca:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80112ce:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80112d2:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 80112d6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 80112da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112de:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 80112e2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80112e6:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 80112ea:	6803      	ldr	r3, [r0, #0]
 80112ec:	09da      	lsrs	r2, r3, #7
 80112ee:	680b      	ldr	r3, [r1, #0]
 80112f0:	065b      	lsls	r3, r3, #25
 80112f2:	4313      	orrs	r3, r2
 80112f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80112f8:	680b      	ldr	r3, [r1, #0]
 80112fa:	09da      	lsrs	r2, r3, #7
 80112fc:	6803      	ldr	r3, [r0, #0]
 80112fe:	065b      	lsls	r3, r3, #25
 8011300:	4313      	orrs	r3, r2
 8011302:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011306:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801130a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 801130e:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8011312:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8011316:	e9d3 0100 	ldrd	r0, r1, [r3]
 801131a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 801131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011322:	ea80 0602 	eor.w	r6, r0, r2
 8011326:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 801132a:	404b      	eors	r3, r1
 801132c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011330:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8011334:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8011338:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 801133c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011340:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8011344:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011348:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 801134c:	6803      	ldr	r3, [r0, #0]
 801134e:	0e1a      	lsrs	r2, r3, #24
 8011350:	680b      	ldr	r3, [r1, #0]
 8011352:	021b      	lsls	r3, r3, #8
 8011354:	4313      	orrs	r3, r2
 8011356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801135a:	680b      	ldr	r3, [r1, #0]
 801135c:	0e1a      	lsrs	r2, r3, #24
 801135e:	6803      	ldr	r3, [r0, #0]
 8011360:	021b      	lsls	r3, r3, #8
 8011362:	4313      	orrs	r3, r2
 8011364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8011368:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 801136c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8011370:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8011374:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011378:	e9d3 0100 	ldrd	r0, r1, [r3]
 801137c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8011380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011384:	ea80 0602 	eor.w	r6, r0, r2
 8011388:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 801138c:	404b      	eors	r3, r1
 801138e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011392:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8011396:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 801139a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 801139e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80113a2:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 80113a6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80113aa:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 80113ae:	6803      	ldr	r3, [r0, #0]
 80113b0:	0b9a      	lsrs	r2, r3, #14
 80113b2:	680b      	ldr	r3, [r1, #0]
 80113b4:	049b      	lsls	r3, r3, #18
 80113b6:	4313      	orrs	r3, r2
 80113b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80113bc:	680b      	ldr	r3, [r1, #0]
 80113be:	0b9a      	lsrs	r2, r3, #14
 80113c0:	6803      	ldr	r3, [r0, #0]
 80113c2:	049b      	lsls	r3, r3, #18
 80113c4:	4313      	orrs	r3, r2
 80113c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80113ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80113ce:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80113d2:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 80113d6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80113da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113de:	43d1      	mvns	r1, r2
 80113e0:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 80113e4:	43db      	mvns	r3, r3
 80113e6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 80113ea:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80113ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f2:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 80113f6:	4011      	ands	r1, r2
 80113f8:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 80113fc:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 8011400:	400b      	ands	r3, r1
 8011402:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8011406:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140e:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 8011412:	4051      	eors	r1, r2
 8011414:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8011418:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 801141c:	404b      	eors	r3, r1
 801141e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8011422:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8011426:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 801142a:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 801142e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011436:	43d1      	mvns	r1, r2
 8011438:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 801143c:	43db      	mvns	r3, r3
 801143e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8011442:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144a:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 801144e:	4011      	ands	r1, r2
 8011450:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8011454:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 8011458:	400b      	ands	r3, r1
 801145a:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 801145e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011466:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 801146a:	4051      	eors	r1, r2
 801146c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8011470:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 8011474:	404b      	eors	r3, r1
 8011476:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801147a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 801147e:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8011482:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8011486:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	43d1      	mvns	r1, r2
 8011490:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8011494:	43db      	mvns	r3, r3
 8011496:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 801149a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80114a6:	4011      	ands	r1, r2
 80114a8:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 80114ac:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 80114b0:	400b      	ands	r3, r1
 80114b2:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80114b6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80114ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114be:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 80114c2:	4051      	eors	r1, r2
 80114c4:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80114c8:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 80114cc:	404b      	eors	r3, r1
 80114ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80114d2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80114d6:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80114da:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 80114de:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80114e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e6:	43d1      	mvns	r1, r2
 80114e8:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 80114ec:	43db      	mvns	r3, r3
 80114ee:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80114f2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80114f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fa:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80114fe:	4011      	ands	r1, r2
 8011500:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 8011504:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8011508:	400b      	ands	r3, r1
 801150a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 801150e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011516:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 801151a:	4051      	eors	r1, r2
 801151c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8011520:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 8011524:	404b      	eors	r3, r1
 8011526:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801152a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801152e:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8011532:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8011536:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 801153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153e:	43d1      	mvns	r1, r2
 8011540:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8011544:	43db      	mvns	r3, r3
 8011546:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 801154a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011552:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8011556:	4011      	ands	r1, r2
 8011558:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 801155c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8011560:	400b      	ands	r3, r1
 8011562:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8011566:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156e:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 8011572:	4051      	eors	r1, r2
 8011574:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8011578:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 801157c:	404b      	eors	r3, r1
 801157e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011582:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011586:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 801158a:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 801158e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011596:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 801159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159e:	ea80 0602 	eor.w	r6, r0, r2
 80115a2:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 80115a6:	404b      	eors	r3, r1
 80115a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80115ac:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80115b0:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 80115b4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 80115b8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115bc:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80115c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80115c4:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 80115c8:	6803      	ldr	r3, [r0, #0]
 80115ca:	095a      	lsrs	r2, r3, #5
 80115cc:	680b      	ldr	r3, [r1, #0]
 80115ce:	06db      	lsls	r3, r3, #27
 80115d0:	4313      	orrs	r3, r2
 80115d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80115d6:	680b      	ldr	r3, [r1, #0]
 80115d8:	095a      	lsrs	r2, r3, #5
 80115da:	6803      	ldr	r3, [r0, #0]
 80115dc:	06db      	lsls	r3, r3, #27
 80115de:	4313      	orrs	r3, r2
 80115e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80115e4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80115e8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80115ec:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 80115f0:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 80115f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115f8:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	ea80 0602 	eor.w	r6, r0, r2
 8011604:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 8011608:	404b      	eors	r3, r1
 801160a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801160e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8011612:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8011616:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 801161a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801161e:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8011622:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011626:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 801162a:	6803      	ldr	r3, [r0, #0]
 801162c:	011a      	lsls	r2, r3, #4
 801162e:	680b      	ldr	r3, [r1, #0]
 8011630:	0f1b      	lsrs	r3, r3, #28
 8011632:	4313      	orrs	r3, r2
 8011634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011638:	680b      	ldr	r3, [r1, #0]
 801163a:	011a      	lsls	r2, r3, #4
 801163c:	6803      	ldr	r3, [r0, #0]
 801163e:	0f1b      	lsrs	r3, r3, #28
 8011640:	4313      	orrs	r3, r2
 8011642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011646:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 801164a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 801164e:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8011652:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8011656:	e9d3 0100 	ldrd	r0, r1, [r3]
 801165a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	ea80 0602 	eor.w	r6, r0, r2
 8011666:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 801166a:	404b      	eors	r3, r1
 801166c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011670:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8011674:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 8011678:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 801167c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011680:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 8011684:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011688:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 801168c:	6803      	ldr	r3, [r0, #0]
 801168e:	0d9a      	lsrs	r2, r3, #22
 8011690:	680b      	ldr	r3, [r1, #0]
 8011692:	029b      	lsls	r3, r3, #10
 8011694:	4313      	orrs	r3, r2
 8011696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801169a:	680b      	ldr	r3, [r1, #0]
 801169c:	0d9a      	lsrs	r2, r3, #22
 801169e:	6803      	ldr	r3, [r0, #0]
 80116a0:	029b      	lsls	r3, r3, #10
 80116a2:	4313      	orrs	r3, r2
 80116a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80116a8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80116ac:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80116b0:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 80116b4:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80116b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80116bc:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	ea80 0602 	eor.w	r6, r0, r2
 80116c8:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 80116cc:	404b      	eors	r3, r1
 80116ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80116d2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80116d6:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 80116da:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 80116de:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80116e2:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 80116e6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80116ea:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 80116ee:	6803      	ldr	r3, [r0, #0]
 80116f0:	0c5a      	lsrs	r2, r3, #17
 80116f2:	680b      	ldr	r3, [r1, #0]
 80116f4:	03db      	lsls	r3, r3, #15
 80116f6:	4313      	orrs	r3, r2
 80116f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80116fc:	680b      	ldr	r3, [r1, #0]
 80116fe:	0c5a      	lsrs	r2, r3, #17
 8011700:	6803      	ldr	r3, [r0, #0]
 8011702:	03db      	lsls	r3, r3, #15
 8011704:	4313      	orrs	r3, r2
 8011706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801170a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801170e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8011712:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8011716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801171a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801171e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8011722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011726:	ea80 0602 	eor.w	r6, r0, r2
 801172a:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 801172e:	404b      	eors	r3, r1
 8011730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011734:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011738:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 801173c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8011740:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011744:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8011748:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801174c:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 8011750:	6803      	ldr	r3, [r0, #0]
 8011752:	061a      	lsls	r2, r3, #24
 8011754:	680b      	ldr	r3, [r1, #0]
 8011756:	0a1b      	lsrs	r3, r3, #8
 8011758:	4313      	orrs	r3, r2
 801175a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801175e:	680b      	ldr	r3, [r1, #0]
 8011760:	061a      	lsls	r2, r3, #24
 8011762:	6803      	ldr	r3, [r0, #0]
 8011764:	0a1b      	lsrs	r3, r3, #8
 8011766:	4313      	orrs	r3, r2
 8011768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801176c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8011770:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8011774:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 8011778:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 801177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011780:	43d1      	mvns	r1, r2
 8011782:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 8011786:	43db      	mvns	r3, r3
 8011788:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 801178c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011794:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8011798:	4011      	ands	r1, r2
 801179a:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 801179e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 80117a2:	400b      	ands	r3, r1
 80117a4:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80117a8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80117ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80117b4:	4051      	eors	r1, r2
 80117b6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80117ba:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 80117be:	404b      	eors	r3, r1
 80117c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80117c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80117c8:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80117cc:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 80117d0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80117d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d8:	43d1      	mvns	r1, r2
 80117da:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 80117de:	43db      	mvns	r3, r3
 80117e0:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80117e4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80117e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ec:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80117f0:	4011      	ands	r1, r2
 80117f2:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 80117f6:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80117fa:	400b      	ands	r3, r1
 80117fc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8011800:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011808:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801180c:	4051      	eors	r1, r2
 801180e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8011812:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8011816:	404b      	eors	r3, r1
 8011818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801181c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011820:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8011824:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 8011828:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 801182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011830:	43d1      	mvns	r1, r2
 8011832:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8011836:	43db      	mvns	r3, r3
 8011838:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 801183c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011844:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8011848:	4011      	ands	r1, r2
 801184a:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 801184e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8011852:	400b      	ands	r3, r1
 8011854:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8011858:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 801185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011860:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 8011864:	4051      	eors	r1, r2
 8011866:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801186a:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 801186e:	404b      	eors	r3, r1
 8011870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011874:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011878:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 801187c:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 8011880:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011888:	43d1      	mvns	r1, r2
 801188a:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 801188e:	43db      	mvns	r3, r3
 8011890:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8011894:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80118a0:	4011      	ands	r1, r2
 80118a2:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 80118a6:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 80118aa:	400b      	ands	r3, r1
 80118ac:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80118b0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 80118bc:	4051      	eors	r1, r2
 80118be:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80118c2:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 80118c6:	404b      	eors	r3, r1
 80118c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80118cc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80118d0:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80118d4:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 80118d8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80118dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e0:	43d1      	mvns	r1, r2
 80118e2:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 80118e6:	43db      	mvns	r3, r3
 80118e8:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80118ec:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 80118f8:	4011      	ands	r1, r2
 80118fa:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 80118fe:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8011902:	400b      	ands	r3, r1
 8011904:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8011908:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 801190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011910:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8011914:	4051      	eors	r1, r2
 8011916:	67b9      	str	r1, [r7, #120]	; 0x78
 8011918:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 801191c:	404b      	eors	r3, r1
 801191e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011920:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011924:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8011928:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 801192c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8011930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011934:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8011938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193c:	ea80 0602 	eor.w	r6, r0, r2
 8011940:	673e      	str	r6, [r7, #112]	; 0x70
 8011942:	404b      	eors	r3, r1
 8011944:	677b      	str	r3, [r7, #116]	; 0x74
 8011946:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801194a:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 801194e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 8011952:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011956:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 801195a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801195e:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 8011962:	6803      	ldr	r3, [r0, #0]
 8011964:	079a      	lsls	r2, r3, #30
 8011966:	680b      	ldr	r3, [r1, #0]
 8011968:	089b      	lsrs	r3, r3, #2
 801196a:	4313      	orrs	r3, r2
 801196c:	66bb      	str	r3, [r7, #104]	; 0x68
 801196e:	680b      	ldr	r3, [r1, #0]
 8011970:	079a      	lsls	r2, r3, #30
 8011972:	6803      	ldr	r3, [r0, #0]
 8011974:	089b      	lsrs	r3, r3, #2
 8011976:	4313      	orrs	r3, r2
 8011978:	66fb      	str	r3, [r7, #108]	; 0x6c
 801197a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801197e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8011982:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 8011986:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 801198a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801198e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	ea80 0602 	eor.w	r6, r0, r2
 801199a:	663e      	str	r6, [r7, #96]	; 0x60
 801199c:	404b      	eors	r3, r1
 801199e:	667b      	str	r3, [r7, #100]	; 0x64
 80119a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80119a4:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80119a8:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 80119ac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119b0:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 80119b4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80119b8:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 80119bc:	6803      	ldr	r3, [r0, #0]
 80119be:	05da      	lsls	r2, r3, #23
 80119c0:	680b      	ldr	r3, [r1, #0]
 80119c2:	0a5b      	lsrs	r3, r3, #9
 80119c4:	4313      	orrs	r3, r2
 80119c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80119c8:	680b      	ldr	r3, [r1, #0]
 80119ca:	05da      	lsls	r2, r3, #23
 80119cc:	6803      	ldr	r3, [r0, #0]
 80119ce:	0a5b      	lsrs	r3, r3, #9
 80119d0:	4313      	orrs	r3, r2
 80119d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80119d8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80119dc:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 80119e0:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80119e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119e8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80119ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f0:	ea80 0602 	eor.w	r6, r0, r2
 80119f4:	653e      	str	r6, [r7, #80]	; 0x50
 80119f6:	404b      	eors	r3, r1
 80119f8:	657b      	str	r3, [r7, #84]	; 0x54
 80119fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80119fe:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8011a02:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 8011a06:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a0a:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8011a0e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a12:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8011a16:	6803      	ldr	r3, [r0, #0]
 8011a18:	01da      	lsls	r2, r3, #7
 8011a1a:	680b      	ldr	r3, [r1, #0]
 8011a1c:	0e5b      	lsrs	r3, r3, #25
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a22:	680b      	ldr	r3, [r1, #0]
 8011a24:	01da      	lsls	r2, r3, #7
 8011a26:	6803      	ldr	r3, [r0, #0]
 8011a28:	0e5b      	lsrs	r3, r3, #25
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011a32:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8011a36:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 8011a3a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8011a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a42:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8011a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4a:	ea80 0602 	eor.w	r6, r0, r2
 8011a4e:	643e      	str	r6, [r7, #64]	; 0x40
 8011a50:	404b      	eors	r3, r1
 8011a52:	647b      	str	r3, [r7, #68]	; 0x44
 8011a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011a58:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8011a5c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 8011a60:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a64:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8011a68:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011a6c:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8011a70:	6803      	ldr	r3, [r0, #0]
 8011a72:	025a      	lsls	r2, r3, #9
 8011a74:	680b      	ldr	r3, [r1, #0]
 8011a76:	0ddb      	lsrs	r3, r3, #23
 8011a78:	4313      	orrs	r3, r2
 8011a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a7c:	680b      	ldr	r3, [r1, #0]
 8011a7e:	025a      	lsls	r2, r3, #9
 8011a80:	6803      	ldr	r3, [r0, #0]
 8011a82:	0ddb      	lsrs	r3, r3, #23
 8011a84:	4313      	orrs	r3, r2
 8011a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011a8c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8011a90:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 8011a94:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8011a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a9c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8011aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa4:	ea80 0602 	eor.w	r6, r0, r2
 8011aa8:	633e      	str	r6, [r7, #48]	; 0x30
 8011aaa:	404b      	eors	r3, r1
 8011aac:	637b      	str	r3, [r7, #52]	; 0x34
 8011aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011ab2:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8011ab6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 8011aba:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011abe:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8011ac2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011ac6:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8011aca:	6803      	ldr	r3, [r0, #0]
 8011acc:	0f9a      	lsrs	r2, r3, #30
 8011ace:	680b      	ldr	r3, [r1, #0]
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ad6:	680b      	ldr	r3, [r1, #0]
 8011ad8:	0f9a      	lsrs	r2, r3, #30
 8011ada:	6803      	ldr	r3, [r0, #0]
 8011adc:	009b      	lsls	r3, r3, #2
 8011ade:	4313      	orrs	r3, r2
 8011ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011ae6:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8011aea:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 8011aee:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af6:	43d1      	mvns	r1, r2
 8011af8:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 8011afc:	43db      	mvns	r3, r3
 8011afe:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8011b02:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8011b0e:	4011      	ands	r1, r2
 8011b10:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 8011b14:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8011b18:	400b      	ands	r3, r1
 8011b1a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8011b1e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b26:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8011b2a:	4051      	eors	r1, r2
 8011b2c:	6239      	str	r1, [r7, #32]
 8011b2e:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8011b32:	404b      	eors	r3, r1
 8011b34:	627b      	str	r3, [r7, #36]	; 0x24
 8011b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011b3a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8011b3e:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 8011b42:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4a:	43d1      	mvns	r1, r2
 8011b4c:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 8011b50:	43db      	mvns	r3, r3
 8011b52:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8011b56:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5e:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8011b62:	4011      	ands	r1, r2
 8011b64:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 8011b68:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8011b6c:	400b      	ands	r3, r1
 8011b6e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8011b72:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7a:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8011b7e:	4051      	eors	r1, r2
 8011b80:	61b9      	str	r1, [r7, #24]
 8011b82:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8011b86:	404b      	eors	r3, r1
 8011b88:	61fb      	str	r3, [r7, #28]
 8011b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011b8e:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8011b92:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 8011b96:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	43d1      	mvns	r1, r2
 8011ba0:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8011ba4:	43db      	mvns	r3, r3
 8011ba6:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8011baa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb2:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8011bb6:	4011      	ands	r1, r2
 8011bb8:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 8011bbc:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8011bc0:	400b      	ands	r3, r1
 8011bc2:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8011bc6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8011bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bce:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8011bd2:	4051      	eors	r1, r2
 8011bd4:	6139      	str	r1, [r7, #16]
 8011bd6:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8011bda:	404b      	eors	r3, r1
 8011bdc:	617b      	str	r3, [r7, #20]
 8011bde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011be2:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8011be6:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8011bea:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf2:	43d1      	mvns	r1, r2
 8011bf4:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8011bf8:	43db      	mvns	r3, r3
 8011bfa:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8011bfe:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c06:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8011c0a:	ea01 0a02 	and.w	sl, r1, r2
 8011c0e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8011c12:	ea01 0b03 	and.w	fp, r1, r3
 8011c16:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	ea82 010a 	eor.w	r1, r2, sl
 8011c22:	60b9      	str	r1, [r7, #8]
 8011c24:	ea83 030b 	eor.w	r3, r3, fp
 8011c28:	60fb      	str	r3, [r7, #12]
 8011c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011c2e:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8011c32:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 8011c36:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8011c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3e:	ea6f 0802 	mvn.w	r8, r2
 8011c42:	ea6f 0903 	mvn.w	r9, r3
 8011c46:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8011c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4e:	ea08 0402 	and.w	r4, r8, r2
 8011c52:	ea09 0503 	and.w	r5, r9, r3
 8011c56:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8011c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5e:	ea82 0104 	eor.w	r1, r2, r4
 8011c62:	6039      	str	r1, [r7, #0]
 8011c64:	406b      	eors	r3, r5
 8011c66:	607b      	str	r3, [r7, #4]
 8011c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c6c:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8011c70:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 8011c74:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8011c78:	3302      	adds	r3, #2
 8011c7a:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8011c7e:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8011c82:	2b17      	cmp	r3, #23
 8011c84:	f77d aa04 	ble.w	800f090 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8011c88:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011c8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011c90:	6819      	ldr	r1, [r3, #0]
 8011c92:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8011c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 8011c9e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011ca2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	f103 0108 	add.w	r1, r3, #8
 8011cac:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8011cb8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011cbc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	f103 0110 	add.w	r1, r3, #16
 8011cc6:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8011cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cce:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 8011cd2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011cd6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f103 0118 	add.w	r1, r3, #24
 8011ce0:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8011ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce8:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8011cec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011cf0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f103 0120 	add.w	r1, r3, #32
 8011cfa:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8011cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d02:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8011d06:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011d0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8011d14:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8011d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 8011d20:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011d24:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d2e:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8011d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d36:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8011d3a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011d3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d48:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8011d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d50:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 8011d54:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011d58:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011d62:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 8011d6e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011d72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8011d7c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8011d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d84:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8011d88:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011d8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8011d96:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8011d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9e:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 8011da2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011da6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8011db0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8011db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db8:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8011dbc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011dc0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8011dca:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8011dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd2:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8011dd6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011dda:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8011de4:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8011de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dec:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8011df0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011df4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8011dfe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8011e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e06:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8011e0a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011e0e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8011e18:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8011e24:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011e28:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8011e32:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8011e3e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011e42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8011e4c:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8011e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e54:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8011e58:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011e5c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8011e66:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8011e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6e:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8011e72:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011e76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8011e80:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8011e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e88:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8011e8c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011e90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8011e9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8011ea6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011eaa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8011eb4:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8011eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebc:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8011ec0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011ec4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8011ece:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8011eda:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011ede:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8011ee8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8011ef4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8011ef8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8011f02:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011f0e:	bf00      	nop
 8011f10:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 8011f14:	46bd      	mov	sp, r7
 8011f16:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011f1a:	4770      	bx	lr

08011f1c <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8011f24:	2300      	movs	r3, #0
 8011f26:	60fb      	str	r3, [r7, #12]
 8011f28:	e00c      	b.n	8011f44 <keccak_init+0x28>
    state->s[i] = 0;
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	00db      	lsls	r3, r3, #3
 8011f30:	18d1      	adds	r1, r2, r3
 8011f32:	f04f 0200 	mov.w	r2, #0
 8011f36:	f04f 0300 	mov.w	r3, #0
 8011f3a:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	3301      	adds	r3, #1
 8011f42:	60fb      	str	r3, [r7, #12]
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2b18      	cmp	r3, #24
 8011f48:	d9ef      	bls.n	8011f2a <keccak_init+0xe>
  state->pos = 0;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8011f52:	bf00      	nop
 8011f54:	3714      	adds	r7, #20
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr

08011f5e <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8011f5e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f62:	b08e      	sub	sp, #56	; 0x38
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6278      	str	r0, [r7, #36]	; 0x24
 8011f68:	6239      	str	r1, [r7, #32]
 8011f6a:	61fa      	str	r2, [r7, #28]
 8011f6c:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 8011f6e:	2300      	movs	r3, #0
 8011f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f72:	2300      	movs	r3, #0
 8011f74:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 8011f76:	69fb      	ldr	r3, [r7, #28]
 8011f78:	f003 0307 	and.w	r3, r3, #7
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d03a      	beq.n	8011ff6 <keccak_absorb+0x98>
    i = pos & 7;
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	f003 0307 	and.w	r3, r3, #7
 8011f86:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 8011f88:	e012      	b.n	8011fb0 <keccak_absorb+0x52>
      t[i++] = *m++;
 8011f8a:	69ba      	ldr	r2, [r7, #24]
 8011f8c:	1c53      	adds	r3, r2, #1
 8011f8e:	61bb      	str	r3, [r7, #24]
 8011f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f92:	1c59      	adds	r1, r3, #1
 8011f94:	6379      	str	r1, [r7, #52]	; 0x34
 8011f96:	7812      	ldrb	r2, [r2, #0]
 8011f98:	3320      	adds	r3, #32
 8011f9a:	f107 0118 	add.w	r1, r7, #24
 8011f9e:	440b      	add	r3, r1
 8011fa0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 8011fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	3301      	adds	r3, #1
 8011fae:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 8011fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb2:	2b07      	cmp	r3, #7
 8011fb4:	d802      	bhi.n	8011fbc <keccak_absorb+0x5e>
 8011fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1e6      	bne.n	8011f8a <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 8011fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7fc fed9 	bl	800ed78 <load64>
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	460d      	mov	r5, r1
 8011fca:	69fa      	ldr	r2, [r7, #28]
 8011fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	f023 0307 	bic.w	r3, r3, #7
 8011fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fd6:	4413      	add	r3, r2
 8011fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011fdc:	69fa      	ldr	r2, [r7, #28]
 8011fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fe0:	1ad3      	subs	r3, r2, r3
 8011fe2:	f023 0207 	bic.w	r2, r3, #7
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe8:	4413      	add	r3, r2
 8011fea:	ea84 0800 	eor.w	r8, r4, r0
 8011fee:	ea85 0901 	eor.w	r9, r5, r1
 8011ff2:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d075      	beq.n	80120e8 <keccak_absorb+0x18a>
 8011ffc:	6a3a      	ldr	r2, [r7, #32]
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	1ad3      	subs	r3, r2, r3
 8012002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012004:	429a      	cmp	r2, r3
 8012006:	d36f      	bcc.n	80120e8 <keccak_absorb+0x18a>
    for(i=0;i<(r-pos)/8;i++)
 8012008:	2300      	movs	r3, #0
 801200a:	637b      	str	r3, [r7, #52]	; 0x34
 801200c:	e023      	b.n	8012056 <keccak_absorb+0xf8>
      s[pos/8+i] ^= load64(m+8*i);
 801200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012010:	00db      	lsls	r3, r3, #3
 8012012:	69ba      	ldr	r2, [r7, #24]
 8012014:	4413      	add	r3, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f7fc feae 	bl	800ed78 <load64>
 801201c:	4680      	mov	r8, r0
 801201e:	4689      	mov	r9, r1
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	08dc      	lsrs	r4, r3, #3
 8012024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012026:	4423      	add	r3, r4
 8012028:	00db      	lsls	r3, r3, #3
 801202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801202c:	4413      	add	r3, r2
 801202e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012034:	4423      	add	r3, r4
 8012036:	00db      	lsls	r3, r3, #3
 8012038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801203a:	4413      	add	r3, r2
 801203c:	ea88 0200 	eor.w	r2, r8, r0
 8012040:	613a      	str	r2, [r7, #16]
 8012042:	ea89 0201 	eor.w	r2, r9, r1
 8012046:	617a      	str	r2, [r7, #20]
 8012048:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801204c:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 8012050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012052:	3301      	adds	r3, #1
 8012054:	637b      	str	r3, [r7, #52]	; 0x34
 8012056:	6a3a      	ldr	r2, [r7, #32]
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	1ad3      	subs	r3, r2, r3
 801205c:	08db      	lsrs	r3, r3, #3
 801205e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012060:	429a      	cmp	r2, r3
 8012062:	d3d4      	bcc.n	801200e <keccak_absorb+0xb0>
    m += r-pos;
 8012064:	6a3a      	ldr	r2, [r7, #32]
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	1ad3      	subs	r3, r2, r3
 801206a:	69ba      	ldr	r2, [r7, #24]
 801206c:	4413      	add	r3, r2
 801206e:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 8012070:	69fa      	ldr	r2, [r7, #28]
 8012072:	6a3b      	ldr	r3, [r7, #32]
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012078:	4413      	add	r3, r2
 801207a:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 801207c:	2300      	movs	r3, #0
 801207e:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 8012080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012082:	f7fc fee3 	bl	800ee4c <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 8012086:	e02f      	b.n	80120e8 <keccak_absorb+0x18a>
    for(i=0;i<r/8;i++)
 8012088:	2300      	movs	r3, #0
 801208a:	637b      	str	r3, [r7, #52]	; 0x34
 801208c:	e01c      	b.n	80120c8 <keccak_absorb+0x16a>
      s[i] ^= load64(m+8*i);
 801208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012090:	00db      	lsls	r3, r3, #3
 8012092:	69ba      	ldr	r2, [r7, #24]
 8012094:	4413      	add	r3, r2
 8012096:	4618      	mov	r0, r3
 8012098:	f7fc fe6e 	bl	800ed78 <load64>
 801209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801209e:	00db      	lsls	r3, r3, #3
 80120a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120a2:	4413      	add	r3, r2
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80120aa:	00e4      	lsls	r4, r4, #3
 80120ac:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80120ae:	442c      	add	r4, r5
 80120b0:	ea80 0502 	eor.w	r5, r0, r2
 80120b4:	60bd      	str	r5, [r7, #8]
 80120b6:	404b      	eors	r3, r1
 80120b8:	60fb      	str	r3, [r7, #12]
 80120ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80120be:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 80120c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c4:	3301      	adds	r3, #1
 80120c6:	637b      	str	r3, [r7, #52]	; 0x34
 80120c8:	6a3b      	ldr	r3, [r7, #32]
 80120ca:	08db      	lsrs	r3, r3, #3
 80120cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d3dd      	bcc.n	801208e <keccak_absorb+0x130>
    m += r;
 80120d2:	69ba      	ldr	r2, [r7, #24]
 80120d4:	6a3b      	ldr	r3, [r7, #32]
 80120d6:	4413      	add	r3, r2
 80120d8:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 80120da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120dc:	6a3b      	ldr	r3, [r7, #32]
 80120de:	1ad3      	subs	r3, r2, r3
 80120e0:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 80120e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120e4:	f7fc feb2 	bl	800ee4c <KeccakF1600_StatePermute>
  while(mlen >= r) {
 80120e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d2cb      	bcs.n	8012088 <keccak_absorb+0x12a>
  }

  for(i=0;i<mlen/8;i++)
 80120f0:	2300      	movs	r3, #0
 80120f2:	637b      	str	r3, [r7, #52]	; 0x34
 80120f4:	e020      	b.n	8012138 <keccak_absorb+0x1da>
    s[pos/8+i] ^= load64(m+8*i);
 80120f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120f8:	00db      	lsls	r3, r3, #3
 80120fa:	69ba      	ldr	r2, [r7, #24]
 80120fc:	4413      	add	r3, r2
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fc fe3a 	bl	800ed78 <load64>
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	08dc      	lsrs	r4, r3, #3
 8012108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210a:	4423      	add	r3, r4
 801210c:	00db      	lsls	r3, r3, #3
 801210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012110:	4413      	add	r3, r2
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8012118:	442c      	add	r4, r5
 801211a:	00e4      	lsls	r4, r4, #3
 801211c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 801211e:	442c      	add	r4, r5
 8012120:	ea80 0502 	eor.w	r5, r0, r2
 8012124:	603d      	str	r5, [r7, #0]
 8012126:	404b      	eors	r3, r1
 8012128:	607b      	str	r3, [r7, #4]
 801212a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801212e:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 8012132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012134:	3301      	adds	r3, #1
 8012136:	637b      	str	r3, [r7, #52]	; 0x34
 8012138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801213a:	08db      	lsrs	r3, r3, #3
 801213c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801213e:	429a      	cmp	r2, r3
 8012140:	d3d9      	bcc.n	80120f6 <keccak_absorb+0x198>
  m += 8*i;
 8012142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012144:	00db      	lsls	r3, r3, #3
 8012146:	69ba      	ldr	r2, [r7, #24]
 8012148:	4413      	add	r3, r2
 801214a:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 801214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214e:	00db      	lsls	r3, r3, #3
 8012150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 8012156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012158:	00db      	lsls	r3, r3, #3
 801215a:	69fa      	ldr	r2, [r7, #28]
 801215c:	4413      	add	r3, r2
 801215e:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 8012160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012162:	2b00      	cmp	r3, #0
 8012164:	d03d      	beq.n	80121e2 <keccak_absorb+0x284>
    for(i=0;i<8;i++)
 8012166:	2300      	movs	r3, #0
 8012168:	637b      	str	r3, [r7, #52]	; 0x34
 801216a:	e008      	b.n	801217e <keccak_absorb+0x220>
      t[i] = 0;
 801216c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012172:	4413      	add	r3, r2
 8012174:	2200      	movs	r2, #0
 8012176:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 8012178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801217a:	3301      	adds	r3, #1
 801217c:	637b      	str	r3, [r7, #52]	; 0x34
 801217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012180:	2b07      	cmp	r3, #7
 8012182:	d9f3      	bls.n	801216c <keccak_absorb+0x20e>
    for(i=0;i<mlen;i++)
 8012184:	2300      	movs	r3, #0
 8012186:	637b      	str	r3, [r7, #52]	; 0x34
 8012188:	e00c      	b.n	80121a4 <keccak_absorb+0x246>
      t[i] = m[i];
 801218a:	69ba      	ldr	r2, [r7, #24]
 801218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801218e:	4413      	add	r3, r2
 8012190:	7819      	ldrb	r1, [r3, #0]
 8012192:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012198:	4413      	add	r3, r2
 801219a:	460a      	mov	r2, r1
 801219c:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 801219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a0:	3301      	adds	r3, #1
 80121a2:	637b      	str	r3, [r7, #52]	; 0x34
 80121a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d3ee      	bcc.n	801218a <keccak_absorb+0x22c>
    s[pos/8] ^= load64(t);
 80121ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fc fde1 	bl	800ed78 <load64>
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	f023 0307 	bic.w	r3, r3, #7
 80121bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121be:	4413      	add	r3, r2
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	69fc      	ldr	r4, [r7, #28]
 80121c6:	f024 0407 	bic.w	r4, r4, #7
 80121ca:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80121cc:	442c      	add	r4, r5
 80121ce:	ea80 0a02 	eor.w	sl, r0, r2
 80121d2:	ea81 0b03 	eor.w	fp, r1, r3
 80121d6:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 80121da:	69fa      	ldr	r2, [r7, #28]
 80121dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80121de:	4413      	add	r3, r2
 80121e0:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 80121e2:	69fb      	ldr	r3, [r7, #28]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3738      	adds	r7, #56	; 0x38
 80121e8:	46bd      	mov	sp, r7
 80121ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080121ee <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 80121ee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80121f2:	b088      	sub	sp, #32
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6178      	str	r0, [r7, #20]
 80121f8:	6139      	str	r1, [r7, #16]
 80121fa:	60fa      	str	r2, [r7, #12]
 80121fc:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	08db      	lsrs	r3, r3, #3
 8012202:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	f003 0307 	and.w	r3, r3, #7
 801220a:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	00db      	lsls	r3, r3, #3
 8012210:	697a      	ldr	r2, [r7, #20]
 8012212:	4413      	add	r3, r2
 8012214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012218:	7afb      	ldrb	r3, [r7, #11]
 801221a:	2200      	movs	r2, #0
 801221c:	4698      	mov	r8, r3
 801221e:	4691      	mov	r9, r2
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	00db      	lsls	r3, r3, #3
 8012224:	f1a3 0620 	sub.w	r6, r3, #32
 8012228:	f1c3 0220 	rsb	r2, r3, #32
 801222c:	fa09 f503 	lsl.w	r5, r9, r3
 8012230:	fa08 f606 	lsl.w	r6, r8, r6
 8012234:	4335      	orrs	r5, r6
 8012236:	fa28 f202 	lsr.w	r2, r8, r2
 801223a:	4315      	orrs	r5, r2
 801223c:	fa08 f403 	lsl.w	r4, r8, r3
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	00db      	lsls	r3, r3, #3
 8012244:	697a      	ldr	r2, [r7, #20]
 8012246:	4413      	add	r3, r2
 8012248:	ea80 0a04 	eor.w	sl, r0, r4
 801224c:	ea81 0b05 	eor.w	fp, r1, r5
 8012250:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	f023 0307 	bic.w	r3, r3, #7
 801225a:	3b08      	subs	r3, #8
 801225c:	697a      	ldr	r2, [r7, #20]
 801225e:	4413      	add	r3, r2
 8012260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012264:	6939      	ldr	r1, [r7, #16]
 8012266:	f021 0107 	bic.w	r1, r1, #7
 801226a:	3908      	subs	r1, #8
 801226c:	6978      	ldr	r0, [r7, #20]
 801226e:	4401      	add	r1, r0
 8012270:	603a      	str	r2, [r7, #0]
 8012272:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012276:	607b      	str	r3, [r7, #4]
 8012278:	e9d7 3400 	ldrd	r3, r4, [r7]
 801227c:	e9c1 3400 	strd	r3, r4, [r1]
}
 8012280:	bf00      	nop
 8012282:	3720      	adds	r7, #32
 8012284:	46bd      	mov	sp, r7
 8012286:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801228a:	4770      	bx	lr

0801228c <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 801229a:	e021      	b.n	80122e0 <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7fc fdd5 	bl	800ee4c <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 80122a2:	2300      	movs	r3, #0
 80122a4:	617b      	str	r3, [r7, #20]
 80122a6:	e00f      	b.n	80122c8 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	00db      	lsls	r3, r3, #3
 80122ac:	68fa      	ldr	r2, [r7, #12]
 80122ae:	18d1      	adds	r1, r2, r3
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	00db      	lsls	r3, r3, #3
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	4413      	add	r3, r2
 80122b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122bc:	4608      	mov	r0, r1
 80122be:	f7fc fd98 	bl	800edf2 <store64>
    for(i=0;i<r/8;i++)
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	3301      	adds	r3, #1
 80122c6:	617b      	str	r3, [r7, #20]
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	08db      	lsrs	r3, r3, #3
 80122cc:	697a      	ldr	r2, [r7, #20]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d3ea      	bcc.n	80122a8 <keccak_squeezeblocks+0x1c>
    out += r;
 80122d2:	68fa      	ldr	r2, [r7, #12]
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	4413      	add	r3, r2
 80122d8:	60fb      	str	r3, [r7, #12]
    nblocks--;
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	3b01      	subs	r3, #1
 80122de:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1da      	bne.n	801229c <keccak_squeezeblocks+0x10>
  }
}
 80122e6:	bf00      	nop
 80122e8:	bf00      	nop
 80122ea:	3718      	adds	r7, #24
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int r,
                                   unsigned int pos)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b088      	sub	sp, #32
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	60b9      	str	r1, [r7, #8]
 80122fa:	607a      	str	r2, [r7, #4]
 80122fc:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t t[8];

  if(pos & 7) {
 80122fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012300:	f003 0307 	and.w	r3, r3, #7
 8012304:	2b00      	cmp	r3, #0
 8012306:	d027      	beq.n	8012358 <keccak_squeeze+0x68>
    store64(t,s[pos/8]);
 8012308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230a:	f023 0307 	bic.w	r3, r3, #7
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	4413      	add	r3, r2
 8012312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012316:	f107 0114 	add.w	r1, r7, #20
 801231a:	4608      	mov	r0, r1
 801231c:	f7fc fd69 	bl	800edf2 <store64>
    i = pos & 7;
 8012320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012322:	f003 0307 	and.w	r3, r3, #7
 8012326:	61fb      	str	r3, [r7, #28]
    while(i < 8 && outlen > 0) {
 8012328:	e010      	b.n	801234c <keccak_squeeze+0x5c>
      *out++ = t[i++];
 801232a:	69fa      	ldr	r2, [r7, #28]
 801232c:	1c53      	adds	r3, r2, #1
 801232e:	61fb      	str	r3, [r7, #28]
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	1c59      	adds	r1, r3, #1
 8012334:	60f9      	str	r1, [r7, #12]
 8012336:	3220      	adds	r2, #32
 8012338:	443a      	add	r2, r7
 801233a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801233e:	701a      	strb	r2, [r3, #0]
      outlen--;
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	3b01      	subs	r3, #1
 8012344:	60bb      	str	r3, [r7, #8]
      pos++;
 8012346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012348:	3301      	adds	r3, #1
 801234a:	62bb      	str	r3, [r7, #40]	; 0x28
    while(i < 8 && outlen > 0) {
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	2b07      	cmp	r3, #7
 8012350:	d802      	bhi.n	8012358 <keccak_squeeze+0x68>
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d1e8      	bne.n	801232a <keccak_squeeze+0x3a>
    }
  }

  if(pos && outlen >= r-pos) {
 8012358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235a:	2b00      	cmp	r3, #0
 801235c:	d054      	beq.n	8012408 <keccak_squeeze+0x118>
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	429a      	cmp	r2, r3
 8012368:	d34e      	bcc.n	8012408 <keccak_squeeze+0x118>
    for(i=0;i<(r-pos)/8;i++)
 801236a:	2300      	movs	r3, #0
 801236c:	61fb      	str	r3, [r7, #28]
 801236e:	e012      	b.n	8012396 <keccak_squeeze+0xa6>
      store64(out+8*i,s[pos/8+i]);
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	00db      	lsls	r3, r3, #3
 8012374:	68fa      	ldr	r2, [r7, #12]
 8012376:	18d1      	adds	r1, r2, r3
 8012378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237a:	08da      	lsrs	r2, r3, #3
 801237c:	69fb      	ldr	r3, [r7, #28]
 801237e:	4413      	add	r3, r2
 8012380:	00db      	lsls	r3, r3, #3
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	4413      	add	r3, r2
 8012386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238a:	4608      	mov	r0, r1
 801238c:	f7fc fd31 	bl	800edf2 <store64>
    for(i=0;i<(r-pos)/8;i++)
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	3301      	adds	r3, #1
 8012394:	61fb      	str	r3, [r7, #28]
 8012396:	683a      	ldr	r2, [r7, #0]
 8012398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239a:	1ad3      	subs	r3, r2, r3
 801239c:	08db      	lsrs	r3, r3, #3
 801239e:	69fa      	ldr	r2, [r7, #28]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d3e5      	bcc.n	8012370 <keccak_squeeze+0x80>
    out += r-pos;
 80123a4:	683a      	ldr	r2, [r7, #0]
 80123a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a8:	1ad3      	subs	r3, r2, r3
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	4413      	add	r3, r2
 80123ae:	60fb      	str	r3, [r7, #12]
    outlen -= r-pos;
 80123b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	1ad3      	subs	r3, r2, r3
 80123b6:	68ba      	ldr	r2, [r7, #8]
 80123b8:	4413      	add	r3, r2
 80123ba:	60bb      	str	r3, [r7, #8]
    pos = 0;
 80123bc:	2300      	movs	r3, #0
 80123be:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  while(outlen >= r) {
 80123c0:	e022      	b.n	8012408 <keccak_squeeze+0x118>
    KeccakF1600_StatePermute(s);
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7fc fd42 	bl	800ee4c <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 80123c8:	2300      	movs	r3, #0
 80123ca:	61fb      	str	r3, [r7, #28]
 80123cc:	e00f      	b.n	80123ee <keccak_squeeze+0xfe>
      store64(out+8*i,s[i]);
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	00db      	lsls	r3, r3, #3
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	18d1      	adds	r1, r2, r3
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	00db      	lsls	r3, r3, #3
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	4413      	add	r3, r2
 80123de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e2:	4608      	mov	r0, r1
 80123e4:	f7fc fd05 	bl	800edf2 <store64>
    for(i=0;i<r/8;i++)
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	3301      	adds	r3, #1
 80123ec:	61fb      	str	r3, [r7, #28]
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	08db      	lsrs	r3, r3, #3
 80123f2:	69fa      	ldr	r2, [r7, #28]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d3ea      	bcc.n	80123ce <keccak_squeeze+0xde>
    out += r;
 80123f8:	68fa      	ldr	r2, [r7, #12]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	4413      	add	r3, r2
 80123fe:	60fb      	str	r3, [r7, #12]
    outlen -= r;
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	60bb      	str	r3, [r7, #8]
  while(outlen >= r) {
 8012408:	68ba      	ldr	r2, [r7, #8]
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	429a      	cmp	r2, r3
 801240e:	d2d8      	bcs.n	80123c2 <keccak_squeeze+0xd2>
  }

  if(!outlen)
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d101      	bne.n	801241a <keccak_squeeze+0x12a>
    return pos;
 8012416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012418:	e053      	b.n	80124c2 <keccak_squeeze+0x1d2>
  else if(!pos)
 801241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <keccak_squeeze+0x136>
    KeccakF1600_StatePermute(s);
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f7fc fd13 	bl	800ee4c <KeccakF1600_StatePermute>

  for(i=0;i<outlen/8;i++)
 8012426:	2300      	movs	r3, #0
 8012428:	61fb      	str	r3, [r7, #28]
 801242a:	e012      	b.n	8012452 <keccak_squeeze+0x162>
    store64(out+8*i,s[pos/8+i]);
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	00db      	lsls	r3, r3, #3
 8012430:	68fa      	ldr	r2, [r7, #12]
 8012432:	18d1      	adds	r1, r2, r3
 8012434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012436:	08da      	lsrs	r2, r3, #3
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	4413      	add	r3, r2
 801243c:	00db      	lsls	r3, r3, #3
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	4413      	add	r3, r2
 8012442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012446:	4608      	mov	r0, r1
 8012448:	f7fc fcd3 	bl	800edf2 <store64>
  for(i=0;i<outlen/8;i++)
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	3301      	adds	r3, #1
 8012450:	61fb      	str	r3, [r7, #28]
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	08db      	lsrs	r3, r3, #3
 8012456:	69fa      	ldr	r2, [r7, #28]
 8012458:	429a      	cmp	r2, r3
 801245a:	d3e7      	bcc.n	801242c <keccak_squeeze+0x13c>
  out += 8*i;
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	00db      	lsls	r3, r3, #3
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	4413      	add	r3, r2
 8012464:	60fb      	str	r3, [r7, #12]
  outlen -= 8*i;
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	00db      	lsls	r3, r3, #3
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	60bb      	str	r3, [r7, #8]
  pos += 8*i;
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	00db      	lsls	r3, r3, #3
 8012474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012476:	4413      	add	r3, r2
 8012478:	62bb      	str	r3, [r7, #40]	; 0x28

  store64(t,s[pos/8]);
 801247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247c:	f023 0307 	bic.w	r3, r3, #7
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	4413      	add	r3, r2
 8012484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012488:	f107 0114 	add.w	r1, r7, #20
 801248c:	4608      	mov	r0, r1
 801248e:	f7fc fcb0 	bl	800edf2 <store64>
  for(i=0;i<outlen;i++)
 8012492:	2300      	movs	r3, #0
 8012494:	61fb      	str	r3, [r7, #28]
 8012496:	e00b      	b.n	80124b0 <keccak_squeeze+0x1c0>
    out[i] = t[i];
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	4413      	add	r3, r2
 801249e:	f107 0114 	add.w	r1, r7, #20
 80124a2:	69fa      	ldr	r2, [r7, #28]
 80124a4:	440a      	add	r2, r1
 80124a6:	7812      	ldrb	r2, [r2, #0]
 80124a8:	701a      	strb	r2, [r3, #0]
  for(i=0;i<outlen;i++)
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	3301      	adds	r3, #1
 80124ae:	61fb      	str	r3, [r7, #28]
 80124b0:	69fa      	ldr	r2, [r7, #28]
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d3ef      	bcc.n	8012498 <keccak_squeeze+0x1a8>
  pos += outlen;
 80124b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	4413      	add	r3, r2
 80124be:	62bb      	str	r3, [r7, #40]	; 0x28
  return pos;
 80124c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3720      	adds	r7, #32
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}

080124ca <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b082      	sub	sp, #8
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ff fd22 	bl	8011f1c <keccak_init>
}
 80124d8:	bf00      	nop
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af02      	add	r7, sp, #8
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 80124ec:	68f8      	ldr	r0, [r7, #12]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	2188      	movs	r1, #136	; 0x88
 80124fc:	f7ff fd2f 	bl	8011f5e <keccak_absorb>
 8012500:	4602      	mov	r2, r0
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012508:	bf00      	nop
 801250a:	3710      	adds	r7, #16
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8012520:	231f      	movs	r3, #31
 8012522:	2188      	movs	r1, #136	; 0x88
 8012524:	f7ff fe63 	bl	80121ee <keccak_finalize>
  state->pos = 0;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2200      	movs	r2, #0
 801252c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012530:	bf00      	nop
 8012532:	3708      	adds	r7, #8
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b084      	sub	sp, #16
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	2388      	movs	r3, #136	; 0x88
 8012548:	68b9      	ldr	r1, [r7, #8]
 801254a:	68f8      	ldr	r0, [r7, #12]
 801254c:	f7ff fe9e 	bl	801228c <keccak_squeezeblocks>
}
 8012550:	bf00      	nop
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <pqcrystals_fips202_ref_shake256_squeeze>:
*              - size_t outlen :  number of bytes to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	af02      	add	r7, sp, #8
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801256c:	9300      	str	r3, [sp, #0]
 801256e:	2388      	movs	r3, #136	; 0x88
 8012570:	68b9      	ldr	r1, [r7, #8]
 8012572:	68f8      	ldr	r0, [r7, #12]
 8012574:	f7ff febc 	bl	80122f0 <keccak_squeeze>
 8012578:	4602      	mov	r2, r0
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8012580:	bf00      	nop
 8012582:	3710      	adds	r7, #16
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <pqcrystals_fips202_ref_shake256>:
*              - size_t outlen:     requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen:      length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b0b8      	sub	sp, #224	; 0xe0
 801258c:	af00      	add	r7, sp, #0
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	607a      	str	r2, [r7, #4]
 8012594:	603b      	str	r3, [r7, #0]
  keccak_state state;

  shake256_init(&state);
 8012596:	f107 0310 	add.w	r3, r7, #16
 801259a:	4618      	mov	r0, r3
 801259c:	f7ff ff95 	bl	80124ca <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, in, inlen);
 80125a0:	f107 0310 	add.w	r3, r7, #16
 80125a4:	683a      	ldr	r2, [r7, #0]
 80125a6:	6879      	ldr	r1, [r7, #4]
 80125a8:	4618      	mov	r0, r3
 80125aa:	f7ff ff99 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80125ae:	f107 0310 	add.w	r3, r7, #16
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7ff ffac 	bl	8012510 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(out, outlen, &state);
 80125b8:	f107 0310 	add.w	r3, r7, #16
 80125bc:	461a      	mov	r2, r3
 80125be:	68b9      	ldr	r1, [r7, #8]
 80125c0:	68f8      	ldr	r0, [r7, #12]
 80125c2:	f7ff ffc9 	bl	8012558 <pqcrystals_fips202_ref_shake256_squeeze>
}
 80125c6:	bf00      	nop
 80125c8:	37e0      	adds	r7, #224	; 0xe0
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
	...

080125d0 <pqcrystals_dilithium2aes_r_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N_]) {
 80125d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80125d4:	b088      	sub	sp, #32
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int32_t zeta, t;

  k = 0;
 80125da:	2300      	movs	r3, #0
 80125dc:	613b      	str	r3, [r7, #16]
  for(len = 128; len > 0; len >>= 1) {
 80125de:	2380      	movs	r3, #128	; 0x80
 80125e0:	61fb      	str	r3, [r7, #28]
 80125e2:	e056      	b.n	8012692 <pqcrystals_dilithium2aes_r_ref_ntt+0xc2>
    for(start = 0; start < N_; start = j + len) {
 80125e4:	2300      	movs	r3, #0
 80125e6:	61bb      	str	r3, [r7, #24]
 80125e8:	e04d      	b.n	8012686 <pqcrystals_dilithium2aes_r_ref_ntt+0xb6>
      zeta = zetas[++k];
 80125ea:	693b      	ldr	r3, [r7, #16]
 80125ec:	3301      	adds	r3, #1
 80125ee:	613b      	str	r3, [r7, #16]
 80125f0:	4a2c      	ldr	r2, [pc, #176]	; (80126a4 <pqcrystals_dilithium2aes_r_ref_ntt+0xd4>)
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125f8:	60fb      	str	r3, [r7, #12]
      for(j = start; j < start + len; ++j) {
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	617b      	str	r3, [r7, #20]
 80125fe:	e038      	b.n	8012672 <pqcrystals_dilithium2aes_r_ref_ntt+0xa2>
        t = montgomery_reduce((int64_t)zeta * a[j + len]);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	17da      	asrs	r2, r3, #31
 8012604:	4698      	mov	r8, r3
 8012606:	4691      	mov	r9, r2
 8012608:	697a      	ldr	r2, [r7, #20]
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	4413      	add	r3, r2
 801260e:	009b      	lsls	r3, r3, #2
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	4413      	add	r3, r2
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	17da      	asrs	r2, r3, #31
 8012618:	469a      	mov	sl, r3
 801261a:	4693      	mov	fp, r2
 801261c:	fb0a f209 	mul.w	r2, sl, r9
 8012620:	fb08 f30b 	mul.w	r3, r8, fp
 8012624:	4413      	add	r3, r2
 8012626:	fba8 450a 	umull	r4, r5, r8, sl
 801262a:	442b      	add	r3, r5
 801262c:	461d      	mov	r5, r3
 801262e:	4620      	mov	r0, r4
 8012630:	4629      	mov	r1, r5
 8012632:	f002 fde8 	bl	8015206 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012636:	60b8      	str	r0, [r7, #8]
        a[j + len] = a[j] - t;
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	4413      	add	r3, r2
 8012640:	6819      	ldr	r1, [r3, #0]
 8012642:	697a      	ldr	r2, [r7, #20]
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	4413      	add	r3, r2
 8012648:	009b      	lsls	r3, r3, #2
 801264a:	687a      	ldr	r2, [r7, #4]
 801264c:	4413      	add	r3, r2
 801264e:	68ba      	ldr	r2, [r7, #8]
 8012650:	1a8a      	subs	r2, r1, r2
 8012652:	601a      	str	r2, [r3, #0]
        a[j] = a[j] + t;
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	4413      	add	r3, r2
 801265c:	6819      	ldr	r1, [r3, #0]
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	4413      	add	r3, r2
 8012666:	68ba      	ldr	r2, [r7, #8]
 8012668:	440a      	add	r2, r1
 801266a:	601a      	str	r2, [r3, #0]
      for(j = start; j < start + len; ++j) {
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	3301      	adds	r3, #1
 8012670:	617b      	str	r3, [r7, #20]
 8012672:	69ba      	ldr	r2, [r7, #24]
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	4413      	add	r3, r2
 8012678:	697a      	ldr	r2, [r7, #20]
 801267a:	429a      	cmp	r2, r3
 801267c:	d3c0      	bcc.n	8012600 <pqcrystals_dilithium2aes_r_ref_ntt+0x30>
    for(start = 0; start < N_; start = j + len) {
 801267e:	697a      	ldr	r2, [r7, #20]
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	4413      	add	r3, r2
 8012684:	61bb      	str	r3, [r7, #24]
 8012686:	69bb      	ldr	r3, [r7, #24]
 8012688:	2bff      	cmp	r3, #255	; 0xff
 801268a:	d9ae      	bls.n	80125ea <pqcrystals_dilithium2aes_r_ref_ntt+0x1a>
  for(len = 128; len > 0; len >>= 1) {
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	085b      	lsrs	r3, r3, #1
 8012690:	61fb      	str	r3, [r7, #28]
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d1a5      	bne.n	80125e4 <pqcrystals_dilithium2aes_r_ref_ntt+0x14>
      }
    }
  }
}
 8012698:	bf00      	nop
 801269a:	bf00      	nop
 801269c:	3720      	adds	r7, #32
 801269e:	46bd      	mov	sp, r7
 80126a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80126a4:	08017580 	.word	0x08017580

080126a8 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N_]) {
 80126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	b091      	sub	sp, #68	; 0x44
 80126ae:	af00      	add	r7, sp, #0
 80126b0:	61f8      	str	r0, [r7, #28]
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
 80126b2:	f24a 33fa 	movw	r3, #41978	; 0xa3fa
 80126b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  k = 256;
 80126b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126bc:	633b      	str	r3, [r7, #48]	; 0x30
  for(len = 1; len < N_; len <<= 1) {
 80126be:	2301      	movs	r3, #1
 80126c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80126c2:	e072      	b.n	80127aa <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x102>
    for(start = 0; start < N_; start = j + len) {
 80126c4:	2300      	movs	r3, #0
 80126c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126c8:	e069      	b.n	801279e <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xf6>
      zeta = -zetas[--k];
 80126ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126cc:	3b01      	subs	r3, #1
 80126ce:	633b      	str	r3, [r7, #48]	; 0x30
 80126d0:	4a51      	ldr	r2, [pc, #324]	; (8012818 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x170>)
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126d8:	425b      	negs	r3, r3
 80126da:	62bb      	str	r3, [r7, #40]	; 0x28
      for(j = start; j < start + len; ++j) {
 80126dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126de:	637b      	str	r3, [r7, #52]	; 0x34
 80126e0:	e053      	b.n	801278a <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0xe2>
        t = a[j];
 80126e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126e4:	009b      	lsls	r3, r3, #2
 80126e6:	69fa      	ldr	r2, [r7, #28]
 80126e8:	4413      	add	r3, r2
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	627b      	str	r3, [r7, #36]	; 0x24
        a[j] = t + a[j + len];
 80126ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f2:	4413      	add	r3, r2
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	69fa      	ldr	r2, [r7, #28]
 80126f8:	4413      	add	r3, r2
 80126fa:	6819      	ldr	r1, [r3, #0]
 80126fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126fe:	009a      	lsls	r2, r3, #2
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	441a      	add	r2, r3
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	440b      	add	r3, r1
 8012708:	6013      	str	r3, [r2, #0]
        a[j + len] = t - a[j + len];
 801270a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270e:	4413      	add	r3, r2
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	69fa      	ldr	r2, [r7, #28]
 8012714:	4413      	add	r3, r2
 8012716:	6819      	ldr	r1, [r3, #0]
 8012718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271c:	4413      	add	r3, r2
 801271e:	009a      	lsls	r2, r3, #2
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	441a      	add	r2, r3
 8012724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012726:	1a5b      	subs	r3, r3, r1
 8012728:	6013      	str	r3, [r2, #0]
        a[j + len] = montgomery_reduce((int64_t)zeta * a[j + len]);
 801272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272c:	17da      	asrs	r2, r3, #31
 801272e:	613b      	str	r3, [r7, #16]
 8012730:	617a      	str	r2, [r7, #20]
 8012732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012736:	4413      	add	r3, r2
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	69fa      	ldr	r2, [r7, #28]
 801273c:	4413      	add	r3, r2
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	17da      	asrs	r2, r3, #31
 8012742:	60bb      	str	r3, [r7, #8]
 8012744:	60fa      	str	r2, [r7, #12]
 8012746:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801274a:	460b      	mov	r3, r1
 801274c:	68ba      	ldr	r2, [r7, #8]
 801274e:	fb02 f203 	mul.w	r2, r2, r3
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8012758:	4601      	mov	r1, r0
 801275a:	fb01 f303 	mul.w	r3, r1, r3
 801275e:	4413      	add	r3, r2
 8012760:	693a      	ldr	r2, [r7, #16]
 8012762:	68b9      	ldr	r1, [r7, #8]
 8012764:	fba2 ab01 	umull	sl, fp, r2, r1
 8012768:	445b      	add	r3, fp
 801276a:	469b      	mov	fp, r3
 801276c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	4413      	add	r3, r2
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	69fa      	ldr	r2, [r7, #28]
 8012776:	18d4      	adds	r4, r2, r3
 8012778:	4650      	mov	r0, sl
 801277a:	4659      	mov	r1, fp
 801277c:	f002 fd43 	bl	8015206 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012780:	4603      	mov	r3, r0
 8012782:	6023      	str	r3, [r4, #0]
      for(j = start; j < start + len; ++j) {
 8012784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012786:	3301      	adds	r3, #1
 8012788:	637b      	str	r3, [r7, #52]	; 0x34
 801278a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278e:	4413      	add	r3, r2
 8012790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012792:	429a      	cmp	r2, r3
 8012794:	d3a5      	bcc.n	80126e2 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x3a>
    for(start = 0; start < N_; start = j + len) {
 8012796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801279a:	4413      	add	r3, r2
 801279c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801279e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a0:	2bff      	cmp	r3, #255	; 0xff
 80127a2:	d992      	bls.n	80126ca <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x22>
  for(len = 1; len < N_; len <<= 1) {
 80127a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80127aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ac:	2bff      	cmp	r3, #255	; 0xff
 80127ae:	d989      	bls.n	80126c4 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x1c>
      }
    }
  }

  for(j = 0; j < N_; ++j) {
 80127b0:	2300      	movs	r3, #0
 80127b2:	637b      	str	r3, [r7, #52]	; 0x34
 80127b4:	e026      	b.n	8012804 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x15c>
    a[j] = montgomery_reduce((int64_t)f * a[j]);
 80127b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b8:	17da      	asrs	r2, r3, #31
 80127ba:	461d      	mov	r5, r3
 80127bc:	4616      	mov	r6, r2
 80127be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	69fa      	ldr	r2, [r7, #28]
 80127c4:	4413      	add	r3, r2
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	17da      	asrs	r2, r3, #31
 80127ca:	603b      	str	r3, [r7, #0]
 80127cc:	607a      	str	r2, [r7, #4]
 80127ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80127d2:	4603      	mov	r3, r0
 80127d4:	fb03 f206 	mul.w	r2, r3, r6
 80127d8:	460b      	mov	r3, r1
 80127da:	fb05 f303 	mul.w	r3, r5, r3
 80127de:	4413      	add	r3, r2
 80127e0:	4602      	mov	r2, r0
 80127e2:	fba5 8902 	umull	r8, r9, r5, r2
 80127e6:	444b      	add	r3, r9
 80127e8:	4699      	mov	r9, r3
 80127ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ec:	009b      	lsls	r3, r3, #2
 80127ee:	69fa      	ldr	r2, [r7, #28]
 80127f0:	18d4      	adds	r4, r2, r3
 80127f2:	4640      	mov	r0, r8
 80127f4:	4649      	mov	r1, r9
 80127f6:	f002 fd06 	bl	8015206 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 80127fa:	4603      	mov	r3, r0
 80127fc:	6023      	str	r3, [r4, #0]
  for(j = 0; j < N_; ++j) {
 80127fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012800:	3301      	adds	r3, #1
 8012802:	637b      	str	r3, [r7, #52]	; 0x34
 8012804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012806:	2bff      	cmp	r3, #255	; 0xff
 8012808:	d9d5      	bls.n	80127b6 <pqcrystals_dilithium2aes_r_ref_invntt_tomont+0x10e>
  }
}
 801280a:	bf00      	nop
 801280c:	bf00      	nop
 801280e:	3744      	adds	r7, #68	; 0x44
 8012810:	46bd      	mov	sp, r7
 8012812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012816:	bf00      	nop
 8012818:	08017580 	.word	0x08017580

0801281c <pqcrystals_dilithium2aes_r_ref_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b086      	sub	sp, #24
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012828:	2300      	movs	r3, #0
 801282a:	617b      	str	r3, [r7, #20]
 801282c:	e00a      	b.n	8012844 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x28>
    pk[i] = rho[i];
 801282e:	68ba      	ldr	r2, [r7, #8]
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	441a      	add	r2, r3
 8012834:	68f9      	ldr	r1, [r7, #12]
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	440b      	add	r3, r1
 801283a:	7812      	ldrb	r2, [r2, #0]
 801283c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	3301      	adds	r3, #1
 8012842:	617b      	str	r3, [r7, #20]
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b1f      	cmp	r3, #31
 8012848:	d9f1      	bls.n	801282e <pqcrystals_dilithium2aes_r_ref_pack_pk+0x12>
  pk += SEEDBYTES;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	3320      	adds	r3, #32
 801284e:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 8012850:	2300      	movs	r3, #0
 8012852:	617b      	str	r3, [r7, #20]
 8012854:	e011      	b.n	801287a <pqcrystals_dilithium2aes_r_ref_pack_pk+0x5e>
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	4613      	mov	r3, r2
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	4413      	add	r3, r2
 801285e:	019b      	lsls	r3, r3, #6
 8012860:	461a      	mov	r2, r3
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	1898      	adds	r0, r3, r2
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	029b      	lsls	r3, r3, #10
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	4413      	add	r3, r2
 801286e:	4619      	mov	r1, r3
 8012870:	f001 f8d9 	bl	8013a26 <pqcrystals_dilithium2aes_r_ref_polyt1_pack>
  for(i = 0; i < K; ++i)
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	3301      	adds	r3, #1
 8012878:	617b      	str	r3, [r7, #20]
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	2b03      	cmp	r3, #3
 801287e:	d9ea      	bls.n	8012856 <pqcrystals_dilithium2aes_r_ref_pack_pk+0x3a>
}
 8012880:	bf00      	nop
 8012882:	bf00      	nop
 8012884:	3718      	adds	r7, #24
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <pqcrystals_dilithium2aes_r_ref_unpack_pk>:
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void unpack_pk(uint8_t rho[SEEDBYTES],
               polyveck *t1,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b086      	sub	sp, #24
 801288e:	af00      	add	r7, sp, #0
 8012890:	60f8      	str	r0, [r7, #12]
 8012892:	60b9      	str	r1, [r7, #8]
 8012894:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012896:	2300      	movs	r3, #0
 8012898:	617b      	str	r3, [r7, #20]
 801289a:	e00a      	b.n	80128b2 <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x28>
    rho[i] = pk[i];
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	441a      	add	r2, r3
 80128a2:	68f9      	ldr	r1, [r7, #12]
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	440b      	add	r3, r1
 80128a8:	7812      	ldrb	r2, [r2, #0]
 80128aa:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	3301      	adds	r3, #1
 80128b0:	617b      	str	r3, [r7, #20]
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	2b1f      	cmp	r3, #31
 80128b6:	d9f1      	bls.n	801289c <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x12>
  pk += SEEDBYTES;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	3320      	adds	r3, #32
 80128bc:	607b      	str	r3, [r7, #4]

  for(i = 0; i < K; ++i)
 80128be:	2300      	movs	r3, #0
 80128c0:	617b      	str	r3, [r7, #20]
 80128c2:	e011      	b.n	80128e8 <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x5e>
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	029b      	lsls	r3, r3, #10
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	18d0      	adds	r0, r2, r3
 80128cc:	697a      	ldr	r2, [r7, #20]
 80128ce:	4613      	mov	r3, r2
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	4413      	add	r3, r2
 80128d4:	019b      	lsls	r3, r3, #6
 80128d6:	461a      	mov	r2, r3
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4413      	add	r3, r2
 80128dc:	4619      	mov	r1, r3
 80128de:	f001 f924 	bl	8013b2a <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>
  for(i = 0; i < K; ++i)
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	3301      	adds	r3, #1
 80128e6:	617b      	str	r3, [r7, #20]
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	2b03      	cmp	r3, #3
 80128ec:	d9ea      	bls.n	80128c4 <pqcrystals_dilithium2aes_r_ref_unpack_pk+0x3a>
}
 80128ee:	bf00      	nop
 80128f0:	bf00      	nop
 80128f2:	3718      	adds	r7, #24
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <pqcrystals_dilithium2aes_r_ref_pack_sk>:
             const uint8_t tr[CRHBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b086      	sub	sp, #24
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	607a      	str	r2, [r7, #4]
 8012904:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012906:	2300      	movs	r3, #0
 8012908:	617b      	str	r3, [r7, #20]
 801290a:	e00a      	b.n	8012922 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x2a>
    sk[i] = rho[i];
 801290c:	68ba      	ldr	r2, [r7, #8]
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	441a      	add	r2, r3
 8012912:	68f9      	ldr	r1, [r7, #12]
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	440b      	add	r3, r1
 8012918:	7812      	ldrb	r2, [r2, #0]
 801291a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	3301      	adds	r3, #1
 8012920:	617b      	str	r3, [r7, #20]
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	2b1f      	cmp	r3, #31
 8012926:	d9f1      	bls.n	801290c <pqcrystals_dilithium2aes_r_ref_pack_sk+0x14>
  sk += SEEDBYTES;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	3320      	adds	r3, #32
 801292c:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 801292e:	2300      	movs	r3, #0
 8012930:	617b      	str	r3, [r7, #20]
 8012932:	e00a      	b.n	801294a <pqcrystals_dilithium2aes_r_ref_pack_sk+0x52>
    sk[i] = key[i];
 8012934:	683a      	ldr	r2, [r7, #0]
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	441a      	add	r2, r3
 801293a:	68f9      	ldr	r1, [r7, #12]
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	440b      	add	r3, r1
 8012940:	7812      	ldrb	r2, [r2, #0]
 8012942:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	3301      	adds	r3, #1
 8012948:	617b      	str	r3, [r7, #20]
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	2b1f      	cmp	r3, #31
 801294e:	d9f1      	bls.n	8012934 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x3c>
  sk += SEEDBYTES;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	3320      	adds	r3, #32
 8012954:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < CRHBYTES; ++i)
 8012956:	2300      	movs	r3, #0
 8012958:	617b      	str	r3, [r7, #20]
 801295a:	e00a      	b.n	8012972 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x7a>
    sk[i] = tr[i];
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	441a      	add	r2, r3
 8012962:	68f9      	ldr	r1, [r7, #12]
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	440b      	add	r3, r1
 8012968:	7812      	ldrb	r2, [r2, #0]
 801296a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	3301      	adds	r3, #1
 8012970:	617b      	str	r3, [r7, #20]
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	2b2f      	cmp	r3, #47	; 0x2f
 8012976:	d9f1      	bls.n	801295c <pqcrystals_dilithium2aes_r_ref_pack_sk+0x64>
  sk += CRHBYTES;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	3330      	adds	r3, #48	; 0x30
 801297c:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 801297e:	2300      	movs	r3, #0
 8012980:	617b      	str	r3, [r7, #20]
 8012982:	e011      	b.n	80129a8 <pqcrystals_dilithium2aes_r_ref_pack_sk+0xb0>
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 8012984:	697a      	ldr	r2, [r7, #20]
 8012986:	4613      	mov	r3, r2
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	4413      	add	r3, r2
 801298c:	015b      	lsls	r3, r3, #5
 801298e:	461a      	mov	r2, r3
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	1898      	adds	r0, r3, r2
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	029b      	lsls	r3, r3, #10
 8012998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801299a:	4413      	add	r3, r2
 801299c:	4619      	mov	r1, r3
 801299e:	f000 fe64 	bl	801366a <pqcrystals_dilithium2aes_r_ref_polyeta_pack>
  for(i = 0; i < L; ++i)
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	3301      	adds	r3, #1
 80129a6:	617b      	str	r3, [r7, #20]
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	2b03      	cmp	r3, #3
 80129ac:	d9ea      	bls.n	8012984 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x8c>
  sk += L*POLYETA_PACKEDBYTES;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80129b4:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 80129b6:	2300      	movs	r3, #0
 80129b8:	617b      	str	r3, [r7, #20]
 80129ba:	e011      	b.n	80129e0 <pqcrystals_dilithium2aes_r_ref_pack_sk+0xe8>
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 80129bc:	697a      	ldr	r2, [r7, #20]
 80129be:	4613      	mov	r3, r2
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	4413      	add	r3, r2
 80129c4:	015b      	lsls	r3, r3, #5
 80129c6:	461a      	mov	r2, r3
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	1898      	adds	r0, r3, r2
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	029b      	lsls	r3, r3, #10
 80129d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129d2:	4413      	add	r3, r2
 80129d4:	4619      	mov	r1, r3
 80129d6:	f000 fe48 	bl	801366a <pqcrystals_dilithium2aes_r_ref_polyeta_pack>
  for(i = 0; i < K; ++i)
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	3301      	adds	r3, #1
 80129de:	617b      	str	r3, [r7, #20]
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	2b03      	cmp	r3, #3
 80129e4:	d9ea      	bls.n	80129bc <pqcrystals_dilithium2aes_r_ref_pack_sk+0xc4>
  sk += K*POLYETA_PACKEDBYTES;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80129ec:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 80129ee:	2300      	movs	r3, #0
 80129f0:	617b      	str	r3, [r7, #20]
 80129f2:	e010      	b.n	8012a16 <pqcrystals_dilithium2aes_r_ref_pack_sk+0x11e>
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80129fa:	fb02 f303 	mul.w	r3, r2, r3
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	18d0      	adds	r0, r2, r3
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	029b      	lsls	r3, r3, #10
 8012a06:	6a3a      	ldr	r2, [r7, #32]
 8012a08:	4413      	add	r3, r2
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	f001 f916 	bl	8013c3c <pqcrystals_dilithium2aes_r_ref_polyt0_pack>
  for(i = 0; i < K; ++i)
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	3301      	adds	r3, #1
 8012a14:	617b      	str	r3, [r7, #20]
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	2b03      	cmp	r3, #3
 8012a1a:	d9eb      	bls.n	80129f4 <pqcrystals_dilithium2aes_r_ref_pack_sk+0xfc>
}
 8012a1c:	bf00      	nop
 8012a1e:	bf00      	nop
 8012a20:	3718      	adds	r7, #24
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <pqcrystals_dilithium2aes_r_ref_unpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               polyvecl *s1,
               polyveck *s2,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b086      	sub	sp, #24
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	60f8      	str	r0, [r7, #12]
 8012a2e:	60b9      	str	r1, [r7, #8]
 8012a30:	607a      	str	r2, [r7, #4]
 8012a32:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8012a34:	2300      	movs	r3, #0
 8012a36:	617b      	str	r3, [r7, #20]
 8012a38:	e00a      	b.n	8012a50 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x2a>
    rho[i] = sk[i];
 8012a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	441a      	add	r2, r3
 8012a40:	68f9      	ldr	r1, [r7, #12]
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	440b      	add	r3, r1
 8012a46:	7812      	ldrb	r2, [r2, #0]
 8012a48:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	617b      	str	r3, [r7, #20]
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	2b1f      	cmp	r3, #31
 8012a54:	d9f1      	bls.n	8012a3a <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x14>
  sk += SEEDBYTES;
 8012a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a58:	3320      	adds	r3, #32
 8012a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i = 0; i < SEEDBYTES; ++i)
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	617b      	str	r3, [r7, #20]
 8012a60:	e00a      	b.n	8012a78 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x52>
    key[i] = sk[i];
 8012a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	441a      	add	r2, r3
 8012a68:	6879      	ldr	r1, [r7, #4]
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	440b      	add	r3, r1
 8012a6e:	7812      	ldrb	r2, [r2, #0]
 8012a70:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	3301      	adds	r3, #1
 8012a76:	617b      	str	r3, [r7, #20]
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	2b1f      	cmp	r3, #31
 8012a7c:	d9f1      	bls.n	8012a62 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x3c>
  sk += SEEDBYTES;
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	3320      	adds	r3, #32
 8012a82:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i = 0; i < CRHBYTES; ++i)
 8012a84:	2300      	movs	r3, #0
 8012a86:	617b      	str	r3, [r7, #20]
 8012a88:	e00a      	b.n	8012aa0 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x7a>
    tr[i] = sk[i];
 8012a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	441a      	add	r2, r3
 8012a90:	68b9      	ldr	r1, [r7, #8]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	440b      	add	r3, r1
 8012a96:	7812      	ldrb	r2, [r2, #0]
 8012a98:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < CRHBYTES; ++i)
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	617b      	str	r3, [r7, #20]
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	2b2f      	cmp	r3, #47	; 0x2f
 8012aa4:	d9f1      	bls.n	8012a8a <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x64>
  sk += CRHBYTES;
 8012aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa8:	3330      	adds	r3, #48	; 0x30
 8012aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i=0; i < L; ++i)
 8012aac:	2300      	movs	r3, #0
 8012aae:	617b      	str	r3, [r7, #20]
 8012ab0:	e011      	b.n	8012ad6 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0xb0>
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	029b      	lsls	r3, r3, #10
 8012ab6:	6a3a      	ldr	r2, [r7, #32]
 8012ab8:	18d0      	adds	r0, r2, r3
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	4613      	mov	r3, r2
 8012abe:	005b      	lsls	r3, r3, #1
 8012ac0:	4413      	add	r3, r2
 8012ac2:	015b      	lsls	r3, r3, #5
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac8:	4413      	add	r3, r2
 8012aca:	4619      	mov	r1, r3
 8012acc:	f000 fe81 	bl	80137d2 <pqcrystals_dilithium2aes_r_ref_polyeta_unpack>
  for(i=0; i < L; ++i)
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	617b      	str	r3, [r7, #20]
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2b03      	cmp	r3, #3
 8012ada:	d9ea      	bls.n	8012ab2 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x8c>
  sk += L*POLYETA_PACKEDBYTES;
 8012adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012ae2:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i=0; i < K; ++i)
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	617b      	str	r3, [r7, #20]
 8012ae8:	e011      	b.n	8012b0e <pqcrystals_dilithium2aes_r_ref_unpack_sk+0xe8>
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	029b      	lsls	r3, r3, #10
 8012aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012af0:	18d0      	adds	r0, r2, r3
 8012af2:	697a      	ldr	r2, [r7, #20]
 8012af4:	4613      	mov	r3, r2
 8012af6:	005b      	lsls	r3, r3, #1
 8012af8:	4413      	add	r3, r2
 8012afa:	015b      	lsls	r3, r3, #5
 8012afc:	461a      	mov	r2, r3
 8012afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b00:	4413      	add	r3, r2
 8012b02:	4619      	mov	r1, r3
 8012b04:	f000 fe65 	bl	80137d2 <pqcrystals_dilithium2aes_r_ref_polyeta_unpack>
  for(i=0; i < K; ++i)
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	617b      	str	r3, [r7, #20]
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	2b03      	cmp	r3, #3
 8012b12:	d9ea      	bls.n	8012aea <pqcrystals_dilithium2aes_r_ref_unpack_sk+0xc4>
  sk += K*POLYETA_PACKEDBYTES;
 8012b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b16:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012b1a:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i=0; i < K; ++i)
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	617b      	str	r3, [r7, #20]
 8012b20:	e010      	b.n	8012b44 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0x11e>
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	029b      	lsls	r3, r3, #10
 8012b26:	683a      	ldr	r2, [r7, #0]
 8012b28:	18d0      	adds	r0, r2, r3
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8012b30:	fb02 f303 	mul.w	r3, r2, r3
 8012b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b36:	4413      	add	r3, r2
 8012b38:	4619      	mov	r1, r3
 8012b3a:	f001 fa40 	bl	8013fbe <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>
  for(i=0; i < K; ++i)
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	3301      	adds	r3, #1
 8012b42:	617b      	str	r3, [r7, #20]
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	2b03      	cmp	r3, #3
 8012b48:	d9eb      	bls.n	8012b22 <pqcrystals_dilithium2aes_r_ref_unpack_sk+0xfc>
}
 8012b4a:	bf00      	nop
 8012b4c:	bf00      	nop
 8012b4e:	3718      	adds	r7, #24
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}

08012b54 <pqcrystals_dilithium2aes_r_ref_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b088      	sub	sp, #32
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	607a      	str	r2, [r7, #4]
 8012b60:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
 8012b62:	2300      	movs	r3, #0
 8012b64:	61fb      	str	r3, [r7, #28]
 8012b66:	e00a      	b.n	8012b7e <pqcrystals_dilithium2aes_r_ref_pack_sig+0x2a>
    sig[i] = c[i];
 8012b68:	68ba      	ldr	r2, [r7, #8]
 8012b6a:	69fb      	ldr	r3, [r7, #28]
 8012b6c:	441a      	add	r2, r3
 8012b6e:	68f9      	ldr	r1, [r7, #12]
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	440b      	add	r3, r1
 8012b74:	7812      	ldrb	r2, [r2, #0]
 8012b76:	701a      	strb	r2, [r3, #0]
  for(i=0; i < SEEDBYTES; ++i)
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	61fb      	str	r3, [r7, #28]
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	2b1f      	cmp	r3, #31
 8012b82:	d9f1      	bls.n	8012b68 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x14>
  sig += SEEDBYTES;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	3320      	adds	r3, #32
 8012b88:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	61fb      	str	r3, [r7, #28]
 8012b8e:	e011      	b.n	8012bb4 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x60>
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 8012b90:	69fa      	ldr	r2, [r7, #28]
 8012b92:	4613      	mov	r3, r2
 8012b94:	00db      	lsls	r3, r3, #3
 8012b96:	4413      	add	r3, r2
 8012b98:	019b      	lsls	r3, r3, #6
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	1898      	adds	r0, r3, r2
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	029b      	lsls	r3, r3, #10
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	4619      	mov	r1, r3
 8012baa:	f001 fcb0 	bl	801450e <pqcrystals_dilithium2aes_r_ref_polyz_pack>
  for(i = 0; i < L; ++i)
 8012bae:	69fb      	ldr	r3, [r7, #28]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	61fb      	str	r3, [r7, #28]
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	2b03      	cmp	r3, #3
 8012bb8:	d9ea      	bls.n	8012b90 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bc0:	60fb      	str	r3, [r7, #12]

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	61fb      	str	r3, [r7, #28]
 8012bc6:	e007      	b.n	8012bd8 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x84>
    sig[i] = 0;
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	4413      	add	r3, r2
 8012bce:	2200      	movs	r2, #0
 8012bd0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < OMEGA + K; ++i)
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	61fb      	str	r3, [r7, #28]
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	2b53      	cmp	r3, #83	; 0x53
 8012bdc:	d9f4      	bls.n	8012bc8 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x74>

  k = 0;
 8012bde:	2300      	movs	r3, #0
 8012be0:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 8012be2:	2300      	movs	r3, #0
 8012be4:	61fb      	str	r3, [r7, #28]
 8012be6:	e023      	b.n	8012c30 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xdc>
    for(j = 0; j < N_; ++j)
 8012be8:	2300      	movs	r3, #0
 8012bea:	61bb      	str	r3, [r7, #24]
 8012bec:	e013      	b.n	8012c16 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xc2>
      if(h->vec[i].coeffs[j] != 0)
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	69fa      	ldr	r2, [r7, #28]
 8012bf2:	0211      	lsls	r1, r2, #8
 8012bf4:	69ba      	ldr	r2, [r7, #24]
 8012bf6:	440a      	add	r2, r1
 8012bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d007      	beq.n	8012c10 <pqcrystals_dilithium2aes_r_ref_pack_sig+0xbc>
        sig[k++] = j;
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	1c5a      	adds	r2, r3, #1
 8012c04:	617a      	str	r2, [r7, #20]
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	4413      	add	r3, r2
 8012c0a:	69ba      	ldr	r2, [r7, #24]
 8012c0c:	b2d2      	uxtb	r2, r2
 8012c0e:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < N_; ++j)
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	3301      	adds	r3, #1
 8012c14:	61bb      	str	r3, [r7, #24]
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	2bff      	cmp	r3, #255	; 0xff
 8012c1a:	d9e8      	bls.n	8012bee <pqcrystals_dilithium2aes_r_ref_pack_sig+0x9a>

    sig[OMEGA + i] = k;
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	3350      	adds	r3, #80	; 0x50
 8012c20:	68fa      	ldr	r2, [r7, #12]
 8012c22:	4413      	add	r3, r2
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	b2d2      	uxtb	r2, r2
 8012c28:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < K; ++i) {
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	61fb      	str	r3, [r7, #28]
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	2b03      	cmp	r3, #3
 8012c34:	d9d8      	bls.n	8012be8 <pqcrystals_dilithium2aes_r_ref_pack_sig+0x94>
  }
}
 8012c36:	bf00      	nop
 8012c38:	bf00      	nop
 8012c3a:	3720      	adds	r7, #32
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}

08012c40 <pqcrystals_dilithium2aes_r_ref_unpack_sig>:
**************************************************/
int unpack_sig(uint8_t c[SEEDBYTES],
               polyvecl *z,
               polyveck *h,
               const uint8_t sig[CRYPTO_BYTES])
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b088      	sub	sp, #32
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	607a      	str	r2, [r7, #4]
 8012c4c:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i = 0; i < SEEDBYTES; ++i)
 8012c4e:	2300      	movs	r3, #0
 8012c50:	61fb      	str	r3, [r7, #28]
 8012c52:	e00a      	b.n	8012c6a <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x2a>
    c[i] = sig[i];
 8012c54:	683a      	ldr	r2, [r7, #0]
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	441a      	add	r2, r3
 8012c5a:	68f9      	ldr	r1, [r7, #12]
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	440b      	add	r3, r1
 8012c60:	7812      	ldrb	r2, [r2, #0]
 8012c62:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	3301      	adds	r3, #1
 8012c68:	61fb      	str	r3, [r7, #28]
 8012c6a:	69fb      	ldr	r3, [r7, #28]
 8012c6c:	2b1f      	cmp	r3, #31
 8012c6e:	d9f1      	bls.n	8012c54 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x14>
  sig += SEEDBYTES;
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	3320      	adds	r3, #32
 8012c74:	603b      	str	r3, [r7, #0]

  for(i = 0; i < L; ++i)
 8012c76:	2300      	movs	r3, #0
 8012c78:	61fb      	str	r3, [r7, #28]
 8012c7a:	e011      	b.n	8012ca0 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x60>
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	029b      	lsls	r3, r3, #10
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	18d0      	adds	r0, r2, r3
 8012c84:	69fa      	ldr	r2, [r7, #28]
 8012c86:	4613      	mov	r3, r2
 8012c88:	00db      	lsls	r3, r3, #3
 8012c8a:	4413      	add	r3, r2
 8012c8c:	019b      	lsls	r3, r3, #6
 8012c8e:	461a      	mov	r2, r3
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	4413      	add	r3, r2
 8012c94:	4619      	mov	r1, r3
 8012c96:	f001 fd19 	bl	80146cc <pqcrystals_dilithium2aes_r_ref_polyz_unpack>
  for(i = 0; i < L; ++i)
 8012c9a:	69fb      	ldr	r3, [r7, #28]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	61fb      	str	r3, [r7, #28]
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	d9ea      	bls.n	8012c7c <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cac:	603b      	str	r3, [r7, #0]

  /* Decode h */
  k = 0;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	61fb      	str	r3, [r7, #28]
 8012cb6:	e057      	b.n	8012d68 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x128>
    for(j = 0; j < N_; ++j)
 8012cb8:	2300      	movs	r3, #0
 8012cba:	61bb      	str	r3, [r7, #24]
 8012cbc:	e00a      	b.n	8012cd4 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x94>
      h->vec[i].coeffs[j] = 0;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	69fa      	ldr	r2, [r7, #28]
 8012cc2:	0211      	lsls	r1, r2, #8
 8012cc4:	69ba      	ldr	r2, [r7, #24]
 8012cc6:	440a      	add	r2, r1
 8012cc8:	2100      	movs	r1, #0
 8012cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = 0; j < N_; ++j)
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	61bb      	str	r3, [r7, #24]
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	2bff      	cmp	r3, #255	; 0xff
 8012cd8:	d9f1      	bls.n	8012cbe <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x7e>

    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	3350      	adds	r3, #80	; 0x50
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	d806      	bhi.n	8012cfa <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xba>
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	3350      	adds	r3, #80	; 0x50
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	4413      	add	r3, r2
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	2b50      	cmp	r3, #80	; 0x50
 8012cf8:	d901      	bls.n	8012cfe <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xbe>
      return 1;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e049      	b.n	8012d92 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x152>

    for(j = k; j < sig[OMEGA + i]; ++j) {
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	61bb      	str	r3, [r7, #24]
 8012d02:	e01f      	b.n	8012d44 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x104>
      /* Coefficients are ordered for strong unforgeability */
      if(j > k && sig[j] <= sig[j-1]) return 1;
 8012d04:	69ba      	ldr	r2, [r7, #24]
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d90c      	bls.n	8012d26 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xe6>
 8012d0c:	683a      	ldr	r2, [r7, #0]
 8012d0e:	69bb      	ldr	r3, [r7, #24]
 8012d10:	4413      	add	r3, r2
 8012d12:	781a      	ldrb	r2, [r3, #0]
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	3b01      	subs	r3, #1
 8012d18:	6839      	ldr	r1, [r7, #0]
 8012d1a:	440b      	add	r3, r1
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d801      	bhi.n	8012d26 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xe6>
 8012d22:	2301      	movs	r3, #1
 8012d24:	e035      	b.n	8012d92 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x152>
      h->vec[i].coeffs[sig[j]] = 1;
 8012d26:	683a      	ldr	r2, [r7, #0]
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	4413      	add	r3, r2
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	4619      	mov	r1, r3
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	69fa      	ldr	r2, [r7, #28]
 8012d34:	0212      	lsls	r2, r2, #8
 8012d36:	440a      	add	r2, r1
 8012d38:	2101      	movs	r1, #1
 8012d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = k; j < sig[OMEGA + i]; ++j) {
 8012d3e:	69bb      	ldr	r3, [r7, #24]
 8012d40:	3301      	adds	r3, #1
 8012d42:	61bb      	str	r3, [r7, #24]
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	3350      	adds	r3, #80	; 0x50
 8012d48:	683a      	ldr	r2, [r7, #0]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	461a      	mov	r2, r3
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d3d6      	bcc.n	8012d04 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0xc4>
    }

    k = sig[OMEGA + i];
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	3350      	adds	r3, #80	; 0x50
 8012d5a:	683a      	ldr	r2, [r7, #0]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	3301      	adds	r3, #1
 8012d66:	61fb      	str	r3, [r7, #28]
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	2b03      	cmp	r3, #3
 8012d6c:	d9a4      	bls.n	8012cb8 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x78>
  }

  /* Extra indices are zero for strong unforgeability */
  for(j = k; j < OMEGA; ++j)
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	61bb      	str	r3, [r7, #24]
 8012d72:	e00a      	b.n	8012d8a <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x14a>
    if(sig[j])
 8012d74:	683a      	ldr	r2, [r7, #0]
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	4413      	add	r3, r2
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d001      	beq.n	8012d84 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x144>
      return 1;
 8012d80:	2301      	movs	r3, #1
 8012d82:	e006      	b.n	8012d92 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x152>
  for(j = k; j < OMEGA; ++j)
 8012d84:	69bb      	ldr	r3, [r7, #24]
 8012d86:	3301      	adds	r3, #1
 8012d88:	61bb      	str	r3, [r7, #24]
 8012d8a:	69bb      	ldr	r3, [r7, #24]
 8012d8c:	2b4f      	cmp	r3, #79	; 0x4f
 8012d8e:	d9f1      	bls.n	8012d74 <pqcrystals_dilithium2aes_r_ref_unpack_sig+0x134>

  return 0;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3720      	adds	r7, #32
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <pqcrystals_dilithium2aes_r_ref_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b084      	sub	sp, #16
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012da2:	2300      	movs	r3, #0
 8012da4:	60fb      	str	r3, [r7, #12]
 8012da6:	e00e      	b.n	8012dc6 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0x2c>
    a->coeffs[i] = reduce32(a->coeffs[i]);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012db0:	4618      	mov	r0, r3
 8012db2:	f002 fa6e 	bl	8015292 <pqcrystals_dilithium2aes_r_ref_reduce32>
 8012db6:	4601      	mov	r1, r0
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	68fa      	ldr	r2, [r7, #12]
 8012dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	60fb      	str	r3, [r7, #12]
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2bff      	cmp	r3, #255	; 0xff
 8012dca:	d9ed      	bls.n	8012da8 <pqcrystals_dilithium2aes_r_ref_poly_reduce+0xe>

  DBENCH_STOP(*tred);
}
 8012dcc:	bf00      	nop
 8012dce:	bf00      	nop
 8012dd0:	3710      	adds	r7, #16
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <pqcrystals_dilithium2aes_r_ref_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b084      	sub	sp, #16
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012dde:	2300      	movs	r3, #0
 8012de0:	60fb      	str	r3, [r7, #12]
 8012de2:	e00e      	b.n	8012e02 <pqcrystals_dilithium2aes_r_ref_poly_caddq+0x2c>
    a->coeffs[i] = caddq(a->coeffs[i]);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	68fa      	ldr	r2, [r7, #12]
 8012de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f002 fa6b 	bl	80152c8 <pqcrystals_dilithium2aes_r_ref_caddq>
 8012df2:	4601      	mov	r1, r0
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	3301      	adds	r3, #1
 8012e00:	60fb      	str	r3, [r7, #12]
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2bff      	cmp	r3, #255	; 0xff
 8012e06:	d9ed      	bls.n	8012de4 <pqcrystals_dilithium2aes_r_ref_poly_caddq+0xe>

  DBENCH_STOP(*tred);
}
 8012e08:	bf00      	nop
 8012e0a:	bf00      	nop
 8012e0c:	3710      	adds	r7, #16
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}

08012e12 <pqcrystals_dilithium2aes_r_ref_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
 8012e12:	b480      	push	{r7}
 8012e14:	b087      	sub	sp, #28
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	60f8      	str	r0, [r7, #12]
 8012e1a:	60b9      	str	r1, [r7, #8]
 8012e1c:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012e1e:	2300      	movs	r3, #0
 8012e20:	617b      	str	r3, [r7, #20]
 8012e22:	e00f      	b.n	8012e44 <pqcrystals_dilithium2aes_r_ref_poly_add+0x32>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	697a      	ldr	r2, [r7, #20]
 8012e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6979      	ldr	r1, [r7, #20]
 8012e30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012e34:	18d1      	adds	r1, r2, r3
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	697a      	ldr	r2, [r7, #20]
 8012e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012e3e:	697b      	ldr	r3, [r7, #20]
 8012e40:	3301      	adds	r3, #1
 8012e42:	617b      	str	r3, [r7, #20]
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	2bff      	cmp	r3, #255	; 0xff
 8012e48:	d9ec      	bls.n	8012e24 <pqcrystals_dilithium2aes_r_ref_poly_add+0x12>

  DBENCH_STOP(*tadd);
}
 8012e4a:	bf00      	nop
 8012e4c:	bf00      	nop
 8012e4e:	371c      	adds	r7, #28
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <pqcrystals_dilithium2aes_r_ref_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 8012e58:	b480      	push	{r7}
 8012e5a:	b087      	sub	sp, #28
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012e64:	2300      	movs	r3, #0
 8012e66:	617b      	str	r3, [r7, #20]
 8012e68:	e00f      	b.n	8012e8a <pqcrystals_dilithium2aes_r_ref_poly_sub+0x32>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	697a      	ldr	r2, [r7, #20]
 8012e6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6979      	ldr	r1, [r7, #20]
 8012e76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012e7a:	1ad1      	subs	r1, r2, r3
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	697a      	ldr	r2, [r7, #20]
 8012e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	3301      	adds	r3, #1
 8012e88:	617b      	str	r3, [r7, #20]
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	2bff      	cmp	r3, #255	; 0xff
 8012e8e:	d9ec      	bls.n	8012e6a <pqcrystals_dilithium2aes_r_ref_poly_sub+0x12>

  DBENCH_STOP(*tadd);
}
 8012e90:	bf00      	nop
 8012e92:	bf00      	nop
 8012e94:	371c      	adds	r7, #28
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr

08012e9e <pqcrystals_dilithium2aes_r_ref_poly_shiftl>:
* Description: Multiply polynomial by 2^D without modular reduction. Assumes
*              input coefficients to be less than 2^{31-D} in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_shiftl(poly *a) {
 8012e9e:	b480      	push	{r7}
 8012ea0:	b085      	sub	sp, #20
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	60fb      	str	r3, [r7, #12]
 8012eaa:	e00b      	b.n	8012ec4 <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0x26>
    a->coeffs[i] <<= D;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eb4:	0359      	lsls	r1, r3, #13
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	68fa      	ldr	r2, [r7, #12]
 8012eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	60fb      	str	r3, [r7, #12]
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	2bff      	cmp	r3, #255	; 0xff
 8012ec8:	d9f0      	bls.n	8012eac <pqcrystals_dilithium2aes_r_ref_poly_shiftl+0xe>

  DBENCH_STOP(*tmul);
}
 8012eca:	bf00      	nop
 8012ecc:	bf00      	nop
 8012ece:	3714      	adds	r7, #20
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr

08012ed8 <pqcrystals_dilithium2aes_r_ref_poly_ntt>:
* Description: Inplace forward NTT. Coefficients can grow by
*              8*Q in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_ntt(poly *a) {
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  ntt(a->coeffs);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7ff fb74 	bl	80125d0 <pqcrystals_dilithium2aes_r_ref_ntt>

  DBENCH_STOP(*tmul);
}
 8012ee8:	bf00      	nop
 8012eea:	3708      	adds	r7, #8
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}

08012ef0 <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>:
*              Input coefficients need to be less than Q in absolute
*              value and output coefficients are again bounded by Q.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_invntt_tomont(poly *a) {
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  invntt_tomont(a->coeffs);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7ff fbd4 	bl	80126a8 <pqcrystals_dilithium2aes_r_ref_invntt_tomont>

  DBENCH_STOP(*tmul);
}
 8012f00:	bf00      	nop
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 8012f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012f0c:	b086      	sub	sp, #24
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	60f8      	str	r0, [r7, #12]
 8012f12:	60b9      	str	r1, [r7, #8]
 8012f14:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012f16:	2300      	movs	r3, #0
 8012f18:	617b      	str	r3, [r7, #20]
 8012f1a:	e022      	b.n	8012f62 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x5a>
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	697a      	ldr	r2, [r7, #20]
 8012f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f24:	17da      	asrs	r2, r3, #31
 8012f26:	4698      	mov	r8, r3
 8012f28:	4691      	mov	r9, r2
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	697a      	ldr	r2, [r7, #20]
 8012f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f32:	17da      	asrs	r2, r3, #31
 8012f34:	469a      	mov	sl, r3
 8012f36:	4693      	mov	fp, r2
 8012f38:	fb0a f209 	mul.w	r2, sl, r9
 8012f3c:	fb08 f30b 	mul.w	r3, r8, fp
 8012f40:	4413      	add	r3, r2
 8012f42:	fba8 450a 	umull	r4, r5, r8, sl
 8012f46:	442b      	add	r3, r5
 8012f48:	461d      	mov	r5, r3
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	4629      	mov	r1, r5
 8012f4e:	f002 f95a 	bl	8015206 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>
 8012f52:	4601      	mov	r1, r0
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	697a      	ldr	r2, [r7, #20]
 8012f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	3301      	adds	r3, #1
 8012f60:	617b      	str	r3, [r7, #20]
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	2bff      	cmp	r3, #255	; 0xff
 8012f66:	d9d9      	bls.n	8012f1c <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery+0x14>

  DBENCH_STOP(*tmul);
}
 8012f68:	bf00      	nop
 8012f6a:	bf00      	nop
 8012f6c:	3718      	adds	r7, #24
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012f74 <pqcrystals_dilithium2aes_r_ref_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012f80:	2300      	movs	r3, #0
 8012f82:	617b      	str	r3, [r7, #20]
 8012f84:	e012      	b.n	8012fac <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x38>
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	68ba      	ldr	r2, [r7, #8]
 8012f8c:	18d0      	adds	r0, r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	697a      	ldr	r2, [r7, #20]
 8012f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f96:	4619      	mov	r1, r3
 8012f98:	f002 f9aa 	bl	80152f0 <pqcrystals_dilithium2aes_r_ref_power2round>
 8012f9c:	4601      	mov	r1, r0
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	697a      	ldr	r2, [r7, #20]
 8012fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	3301      	adds	r3, #1
 8012faa:	617b      	str	r3, [r7, #20]
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	2bff      	cmp	r3, #255	; 0xff
 8012fb0:	d9e9      	bls.n	8012f86 <pqcrystals_dilithium2aes_r_ref_poly_power2round+0x12>

  DBENCH_STOP(*tround);
}
 8012fb2:	bf00      	nop
 8012fb4:	bf00      	nop
 8012fb6:	3718      	adds	r7, #24
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <pqcrystals_dilithium2aes_r_ref_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	60b9      	str	r1, [r7, #8]
 8012fc6:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 8012fc8:	2300      	movs	r3, #0
 8012fca:	617b      	str	r3, [r7, #20]
 8012fcc:	e012      	b.n	8012ff4 <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x38>
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	68ba      	ldr	r2, [r7, #8]
 8012fd4:	18d0      	adds	r0, r2, r3
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	697a      	ldr	r2, [r7, #20]
 8012fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fde:	4619      	mov	r1, r3
 8012fe0:	f002 f99e 	bl	8015320 <pqcrystals_dilithium2aes_r_ref_decompose>
 8012fe4:	4601      	mov	r1, r0
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	697a      	ldr	r2, [r7, #20]
 8012fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	617b      	str	r3, [r7, #20]
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	2bff      	cmp	r3, #255	; 0xff
 8012ff8:	d9e9      	bls.n	8012fce <pqcrystals_dilithium2aes_r_ref_poly_decompose+0x12>

  DBENCH_STOP(*tround);
}
 8012ffa:	bf00      	nop
 8012ffc:	bf00      	nop
 8012ffe:	3718      	adds	r7, #24
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8013004:	b580      	push	{r7, lr}
 8013006:	b086      	sub	sp, #24
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8013010:	2300      	movs	r3, #0
 8013012:	613b      	str	r3, [r7, #16]
  DBENCH_START();

  for(i = 0; i < N_; ++i) {
 8013014:	2300      	movs	r3, #0
 8013016:	617b      	str	r3, [r7, #20]
 8013018:	e01b      	b.n	8013052 <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x4e>
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	697a      	ldr	r2, [r7, #20]
 801301e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	697a      	ldr	r2, [r7, #20]
 8013026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801302a:	4619      	mov	r1, r3
 801302c:	f002 f9b4 	bl	8015398 <pqcrystals_dilithium2aes_r_ref_make_hint>
 8013030:	4603      	mov	r3, r0
 8013032:	4619      	mov	r1, r3
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s += h->coeffs[i];
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	697a      	ldr	r2, [r7, #20]
 8013040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013044:	461a      	mov	r2, r3
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	4413      	add	r3, r2
 801304a:	613b      	str	r3, [r7, #16]
  for(i = 0; i < N_; ++i) {
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	3301      	adds	r3, #1
 8013050:	617b      	str	r3, [r7, #20]
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	2bff      	cmp	r3, #255	; 0xff
 8013056:	d9e0      	bls.n	801301a <pqcrystals_dilithium2aes_r_ref_poly_make_hint+0x16>
  }

  DBENCH_STOP(*tround);
  return s;
 8013058:	693b      	ldr	r3, [r7, #16]
}
 801305a:	4618      	mov	r0, r3
 801305c:	3718      	adds	r7, #24
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}

08013062 <pqcrystals_dilithium2aes_r_ref_poly_use_hint>:
*
* Arguments:   - poly *b: pointer to output polynomial with corrected high bits
*              - const poly *a: pointer to input polynomial
*              - const poly *h: pointer to input hint polynomial
**************************************************/
void poly_use_hint(poly *b, const poly *a, const poly *h) {
 8013062:	b580      	push	{r7, lr}
 8013064:	b086      	sub	sp, #24
 8013066:	af00      	add	r7, sp, #0
 8013068:	60f8      	str	r0, [r7, #12]
 801306a:	60b9      	str	r1, [r7, #8]
 801306c:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_; ++i)
 801306e:	2300      	movs	r3, #0
 8013070:	617b      	str	r3, [r7, #20]
 8013072:	e012      	b.n	801309a <pqcrystals_dilithium2aes_r_ref_poly_use_hint+0x38>
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	697a      	ldr	r2, [r7, #20]
 8013080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013084:	4619      	mov	r1, r3
 8013086:	f002 f9a7 	bl	80153d8 <pqcrystals_dilithium2aes_r_ref_use_hint>
 801308a:	4601      	mov	r1, r0
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	697a      	ldr	r2, [r7, #20]
 8013090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	3301      	adds	r3, #1
 8013098:	617b      	str	r3, [r7, #20]
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	2bff      	cmp	r3, #255	; 0xff
 801309e:	d9e9      	bls.n	8013074 <pqcrystals_dilithium2aes_r_ref_poly_use_hint+0x12>

  DBENCH_STOP(*tround);
}
 80130a0:	bf00      	nop
 80130a2:	bf00      	nop
 80130a4:	3718      	adds	r7, #24
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
	...

080130ac <pqcrystals_dilithium2aes_r_ref_poly_chknorm>:
* Arguments:   - const poly *a: pointer to polynomial
*              - int32_t B: norm bound
*
* Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
**************************************************/
int poly_chknorm(const poly *a, int32_t B) {
 80130ac:	b480      	push	{r7}
 80130ae:	b085      	sub	sp, #20
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
 80130b4:	6039      	str	r1, [r7, #0]
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q_-1)/8)
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	4a16      	ldr	r2, [pc, #88]	; (8013114 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x68>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	dd01      	ble.n	80130c2 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x16>
    return 1;
 80130be:	2301      	movs	r3, #1
 80130c0:	e022      	b.n	8013108 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N_; ++i) {
 80130c2:	2300      	movs	r3, #0
 80130c4:	60fb      	str	r3, [r7, #12]
 80130c6:	e01b      	b.n	8013100 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x54>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	68fa      	ldr	r2, [r7, #12]
 80130cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130d0:	17db      	asrs	r3, r3, #31
 80130d2:	60bb      	str	r3, [r7, #8]
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	68fa      	ldr	r2, [r7, #12]
 80130d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	68f9      	ldr	r1, [r7, #12]
 80130e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130e4:	0059      	lsls	r1, r3, #1
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	400b      	ands	r3, r1
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	60bb      	str	r3, [r7, #8]

    if(t >= B) {
 80130ee:	68ba      	ldr	r2, [r7, #8]
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	db01      	blt.n	80130fa <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x4e>
      DBENCH_STOP(*tsample);
      return 1;
 80130f6:	2301      	movs	r3, #1
 80130f8:	e006      	b.n	8013108 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x5c>
  for(i = 0; i < N_; ++i) {
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	3301      	adds	r3, #1
 80130fe:	60fb      	str	r3, [r7, #12]
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2bff      	cmp	r3, #255	; 0xff
 8013104:	d9e0      	bls.n	80130c8 <pqcrystals_dilithium2aes_r_ref_poly_chknorm+0x1c>
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
 8013106:	2300      	movs	r3, #0
}
 8013108:	4618      	mov	r0, r3
 801310a:	3714      	adds	r7, #20
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr
 8013114:	000ffc00 	.word	0x000ffc00

08013118 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8013118:	b480      	push	{r7}
 801311a:	b089      	sub	sp, #36	; 0x24
 801311c:	af00      	add	r7, sp, #0
 801311e:	60f8      	str	r0, [r7, #12]
 8013120:	60b9      	str	r1, [r7, #8]
 8013122:	607a      	str	r2, [r7, #4]
 8013124:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t;
  DBENCH_START();

  ctr = pos = 0;
 8013126:	2300      	movs	r3, #0
 8013128:	61bb      	str	r3, [r7, #24]
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 801312e:	e02a      	b.n	8013186 <rej_uniform+0x6e>
    t  = buf[pos++];
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	1c5a      	adds	r2, r3, #1
 8013134:	61ba      	str	r2, [r7, #24]
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	4413      	add	r3, r2
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 8;
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	1c5a      	adds	r2, r3, #1
 8013142:	61ba      	str	r2, [r7, #24]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	4413      	add	r3, r2
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	021b      	lsls	r3, r3, #8
 801314c:	697a      	ldr	r2, [r7, #20]
 801314e:	4313      	orrs	r3, r2
 8013150:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 16;
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	1c5a      	adds	r2, r3, #1
 8013156:	61ba      	str	r2, [r7, #24]
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	4413      	add	r3, r2
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	041b      	lsls	r3, r3, #16
 8013160:	697a      	ldr	r2, [r7, #20]
 8013162:	4313      	orrs	r3, r2
 8013164:	617b      	str	r3, [r7, #20]
    t &= 0x7FFFFF;
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801316c:	617b      	str	r3, [r7, #20]

    if(t < Q_)
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	4a0d      	ldr	r2, [pc, #52]	; (80131a8 <rej_uniform+0x90>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d807      	bhi.n	8013186 <rej_uniform+0x6e>
      a[ctr++] = t;
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	1c5a      	adds	r2, r3, #1
 801317a:	61fa      	str	r2, [r7, #28]
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	68fa      	ldr	r2, [r7, #12]
 8013180:	4413      	add	r3, r2
 8013182:	697a      	ldr	r2, [r7, #20]
 8013184:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 8013186:	69fa      	ldr	r2, [r7, #28]
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	429a      	cmp	r2, r3
 801318c:	d204      	bcs.n	8013198 <rej_uniform+0x80>
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	3303      	adds	r3, #3
 8013192:	683a      	ldr	r2, [r7, #0]
 8013194:	429a      	cmp	r2, r3
 8013196:	d2cb      	bcs.n	8013130 <rej_uniform+0x18>
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8013198:	69fb      	ldr	r3, [r7, #28]
}
 801319a:	4618      	mov	r0, r3
 801319c:	3724      	adds	r7, #36	; 0x24
 801319e:	46bd      	mov	sp, r7
 80131a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a4:	4770      	bx	lr
 80131a6:	bf00      	nop
 80131a8:	007fe000 	.word	0x007fe000

080131ac <pqcrystals_dilithium2aes_r_ref_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	f5ad 6de5 	sub.w	sp, sp, #1832	; 0x728
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80131b8:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 80131bc:	6018      	str	r0, [r3, #0]
 80131be:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80131c2:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80131c6:	6019      	str	r1, [r3, #0]
 80131c8:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80131cc:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 80131d0:	801a      	strh	r2, [r3, #0]
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 80131d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80131d6:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2] = {0};
 80131da:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80131de:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80131e2:	2200      	movs	r2, #0
 80131e4:	601a      	str	r2, [r3, #0]
 80131e6:	3304      	adds	r3, #4
 80131e8:	f240 22fe 	movw	r2, #766	; 0x2fe
 80131ec:	2100      	movs	r1, #0
 80131ee:	4618      	mov	r0, r3
 80131f0:	f002 ff6a 	bl	80160c8 <memset>
  stream128_state state;

  stream128_init(&state, seed, nonce);
 80131f4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80131f8:	f2a3 7322 	subw	r3, r3, #1826	; 0x722
 80131fc:	881a      	ldrh	r2, [r3, #0]
 80131fe:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8013202:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8013206:	f107 0010 	add.w	r0, r7, #16
 801320a:	6819      	ldr	r1, [r3, #0]
 801320c:	f002 ff03 	bl	8016016 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
	  USB_DEBUG_MSG("%d ", buf[j]);
  }
  USB_DEBUG_MSG("\r\n");
#endif

  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8013210:	f107 0210 	add.w	r2, r7, #16
 8013214:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8013218:	210c      	movs	r1, #12
 801321a:	4618      	mov	r0, r3
 801321c:	f7fb fcd9 	bl	800ebd2 <pqcrystals_aes256ctr_ref_squeezeblocks>
	  USB_DEBUG_MSG("%d ", buf[j]);
  }
  USB_DEBUG_MSG("\r\n");
#endif

  ctr = rej_uniform(a->coeffs, N_, buf, buflen);
 8013220:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8013224:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 8013228:	6818      	ldr	r0, [r3, #0]
 801322a:	f207 4214 	addw	r2, r7, #1044	; 0x414
 801322e:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8013232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013236:	f7ff ff6f 	bl	8013118 <rej_uniform>
 801323a:	f8c7 0720 	str.w	r0, [r7, #1824]	; 0x720

  while(ctr < N_) {
 801323e:	e059      	b.n	80132f4 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x148>
    off = buflen % 3;
 8013240:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8013244:	4b30      	ldr	r3, [pc, #192]	; (8013308 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x15c>)
 8013246:	fba3 1302 	umull	r1, r3, r3, r2
 801324a:	0859      	lsrs	r1, r3, #1
 801324c:	460b      	mov	r3, r1
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	440b      	add	r3, r1
 8013252:	1ad3      	subs	r3, r2, r3
 8013254:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
    for(i = 0; i < off; ++i)
 8013258:	2300      	movs	r3, #0
 801325a:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 801325e:	e01a      	b.n	8013296 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0xea>
      buf[i] = buf[buflen - off + i];
 8013260:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
 8013264:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8013268:	1ad2      	subs	r2, r2, r3
 801326a:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 801326e:	4413      	add	r3, r2
 8013270:	f507 62e5 	add.w	r2, r7, #1832	; 0x728
 8013274:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8013278:	5cd1      	ldrb	r1, [r2, r3]
 801327a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801327e:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8013282:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8013286:	4413      	add	r3, r2
 8013288:	460a      	mov	r2, r1
 801328a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < off; ++i)
 801328c:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8013290:	3301      	adds	r3, #1
 8013292:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8013296:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
 801329a:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 801329e:	429a      	cmp	r2, r3
 80132a0:	d3de      	bcc.n	8013260 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0xb4>

    stream128_squeezeblocks(buf + off, 1, &state);
 80132a2:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80132a6:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 80132aa:	4413      	add	r3, r2
 80132ac:	f107 0210 	add.w	r2, r7, #16
 80132b0:	2101      	movs	r1, #1
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fb fc8d 	bl	800ebd2 <pqcrystals_aes256ctr_ref_squeezeblocks>
	  USB_DEBUG_MSG("%d ", buf[j]);
  }
  USB_DEBUG_MSG("\r\n");
#endif

    buflen = STREAM128_BLOCKBYTES + off;
 80132b8:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 80132bc:	3340      	adds	r3, #64	; 0x40
 80132be:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
    ctr += rej_uniform(a->coeffs + ctr, N_ - ctr, buf, buflen);
 80132c2:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 80132c6:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	18d0      	adds	r0, r2, r3
 80132d4:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 80132d8:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80132dc:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80132e0:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 80132e4:	f7ff ff18 	bl	8013118 <rej_uniform>
 80132e8:	4602      	mov	r2, r0
 80132ea:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 80132ee:	4413      	add	r3, r2
 80132f0:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
  while(ctr < N_) {
 80132f4:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 80132f8:	2bff      	cmp	r3, #255	; 0xff
 80132fa:	d9a1      	bls.n	8013240 <pqcrystals_dilithium2aes_r_ref_poly_uniform+0x94>
  }
}
 80132fc:	bf00      	nop
 80132fe:	bf00      	nop
 8013300:	f507 67e5 	add.w	r7, r7, #1832	; 0x728
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}
 8013308:	aaaaaaab 	.word	0xaaaaaaab

0801330c <rej_eta>:
**************************************************/
static unsigned int rej_eta(int32_t *a,
                            unsigned int len,
                            const uint8_t *buf,
                            unsigned int buflen)
{
 801330c:	b480      	push	{r7}
 801330e:	b089      	sub	sp, #36	; 0x24
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
 8013318:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t0, t1;
  DBENCH_START();

  ctr = pos = 0;
 801331a:	2300      	movs	r3, #0
 801331c:	61bb      	str	r3, [r7, #24]
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos < buflen) {
 8013322:	e045      	b.n	80133b0 <rej_eta+0xa4>
    t0 = buf[pos] & 0x0F;
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	4413      	add	r3, r2
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	f003 030f 	and.w	r3, r3, #15
 8013330:	617b      	str	r3, [r7, #20]
    t1 = buf[pos++] >> 4;
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	1c5a      	adds	r2, r3, #1
 8013336:	61ba      	str	r2, [r7, #24]
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	4413      	add	r3, r2
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	091b      	lsrs	r3, r3, #4
 8013340:	b2db      	uxtb	r3, r3
 8013342:	613b      	str	r3, [r7, #16]

#if ETA == 2
    if(t0 < 15) {
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	2b0e      	cmp	r3, #14
 8013348:	d815      	bhi.n	8013376 <rej_eta+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	22cd      	movs	r2, #205	; 0xcd
 801334e:	fb02 f303 	mul.w	r3, r2, r3
 8013352:	0a9a      	lsrs	r2, r3, #10
 8013354:	4613      	mov	r3, r2
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	4413      	add	r3, r2
 801335a:	697a      	ldr	r2, [r7, #20]
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	617b      	str	r3, [r7, #20]
      a[ctr++] = 2 - t0;
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	f1c3 0102 	rsb	r1, r3, #2
 8013366:	69fb      	ldr	r3, [r7, #28]
 8013368:	1c5a      	adds	r2, r3, #1
 801336a:	61fa      	str	r2, [r7, #28]
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	68fa      	ldr	r2, [r7, #12]
 8013370:	4413      	add	r3, r2
 8013372:	460a      	mov	r2, r1
 8013374:	601a      	str	r2, [r3, #0]
    }
    if(t1 < 15 && ctr < len) {
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	2b0e      	cmp	r3, #14
 801337a:	d819      	bhi.n	80133b0 <rej_eta+0xa4>
 801337c:	69fa      	ldr	r2, [r7, #28]
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	429a      	cmp	r2, r3
 8013382:	d215      	bcs.n	80133b0 <rej_eta+0xa4>
      t1 = t1 - (205*t1 >> 10)*5;
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	22cd      	movs	r2, #205	; 0xcd
 8013388:	fb02 f303 	mul.w	r3, r2, r3
 801338c:	0a9a      	lsrs	r2, r3, #10
 801338e:	4613      	mov	r3, r2
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	4413      	add	r3, r2
 8013394:	693a      	ldr	r2, [r7, #16]
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	613b      	str	r3, [r7, #16]
      a[ctr++] = 2 - t1;
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	f1c3 0102 	rsb	r1, r3, #2
 80133a0:	69fb      	ldr	r3, [r7, #28]
 80133a2:	1c5a      	adds	r2, r3, #1
 80133a4:	61fa      	str	r2, [r7, #28]
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	68fa      	ldr	r2, [r7, #12]
 80133aa:	4413      	add	r3, r2
 80133ac:	460a      	mov	r2, r1
 80133ae:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos < buflen) {
 80133b0:	69fa      	ldr	r2, [r7, #28]
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d203      	bcs.n	80133c0 <rej_eta+0xb4>
 80133b8:	69ba      	ldr	r2, [r7, #24]
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d3b1      	bcc.n	8013324 <rej_eta+0x18>
      a[ctr++] = 4 - t1;
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
 80133c0:	69fb      	ldr	r3, [r7, #28]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3724      	adds	r7, #36	; 0x24
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr

080133ce <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[SEEDBYTES],
                      uint16_t nonce)
{
 80133ce:	b580      	push	{r7, lr}
 80133d0:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80133da:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80133de:	6018      	str	r0, [r3, #0]
 80133e0:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80133e4:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80133e8:	6019      	str	r1, [r3, #0]
 80133ea:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80133ee:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 80133f2:	801a      	strh	r2, [r3, #0]
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES;
 80133f4:	23c0      	movs	r3, #192	; 0xc0
 80133f6:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES] = {0};
 80133fa:	2300      	movs	r3, #0
 80133fc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8013400:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8013404:	22bc      	movs	r2, #188	; 0xbc
 8013406:	2100      	movs	r1, #0
 8013408:	4618      	mov	r0, r3
 801340a:	f002 fe5d 	bl	80160c8 <memset>
  stream128_state state;

  stream128_init(&state, seed, nonce);
 801340e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8013412:	f2a3 43d2 	subw	r3, r3, #1234	; 0x4d2
 8013416:	881a      	ldrh	r2, [r3, #0]
 8013418:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801341c:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8013420:	f107 0010 	add.w	r0, r7, #16
 8013424:	6819      	ldr	r1, [r3, #0]
 8013426:	f002 fdf6 	bl	8016016 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 801342a:	f107 0210 	add.w	r2, r7, #16
 801342e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8013432:	2103      	movs	r1, #3
 8013434:	4618      	mov	r0, r3
 8013436:	f7fb fbcc 	bl	800ebd2 <pqcrystals_aes256ctr_ref_squeezeblocks>

  ctr = rej_eta(a->coeffs, N_, buf, buflen);
 801343a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801343e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013442:	6818      	ldr	r0, [r3, #0]
 8013444:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8013448:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 801344c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013450:	f7ff ff5c 	bl	801330c <rej_eta>
 8013454:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4

  while(ctr < N_) {
 8013458:	e01f      	b.n	801349a <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0xcc>
    stream128_squeezeblocks(buf, 1, &state);
 801345a:	f107 0210 	add.w	r2, r7, #16
 801345e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8013462:	2101      	movs	r1, #1
 8013464:	4618      	mov	r0, r3
 8013466:	f7fb fbb4 	bl	800ebd2 <pqcrystals_aes256ctr_ref_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N_ - ctr, buf, STREAM128_BLOCKBYTES);
 801346a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801346e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013472:	681a      	ldr	r2, [r3, #0]
 8013474:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	18d0      	adds	r0, r2, r3
 801347c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8013480:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8013484:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8013488:	2340      	movs	r3, #64	; 0x40
 801348a:	f7ff ff3f 	bl	801330c <rej_eta>
 801348e:	4602      	mov	r2, r0
 8013490:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8013494:	4413      	add	r3, r2
 8013496:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  while(ctr < N_) {
 801349a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 801349e:	2bff      	cmp	r3, #255	; 0xff
 80134a0:	d9db      	bls.n	801345a <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta+0x8c>
  }
}
 80134a2:	bf00      	nop
 80134a4:	bf00      	nop
 80134a6:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}

080134ae <pqcrystals_dilithium2aes_r_ref_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 80134ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80134b2:	b0de      	sub	sp, #376	; 0x178
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80134ba:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80134be:	6018      	str	r0, [r3, #0]
 80134c0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80134c4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80134c8:	6019      	str	r1, [r3, #0]
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
 80134ca:	f107 0308 	add.w	r3, r7, #8
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7fe fffb 	bl	80124ca <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
 80134d4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80134d8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80134dc:	f107 0008 	add.w	r0, r7, #8
 80134e0:	2220      	movs	r2, #32
 80134e2:	6819      	ldr	r1, [r3, #0]
 80134e4:	f7fe fffc 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80134e8:	f107 0308 	add.w	r3, r7, #8
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff f80f 	bl	8012510 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
 80134f2:	f107 0208 	add.w	r2, r7, #8
 80134f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80134fa:	2101      	movs	r1, #1
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff f81b 	bl	8012538 <pqcrystals_fips202_ref_shake256_squeezeblocks>

  signs = 0;
 8013502:	f04f 0200 	mov.w	r2, #0
 8013506:	f04f 0300 	mov.w	r3, #0
 801350a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 801350e:	2300      	movs	r3, #0
 8013510:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013514:	e027      	b.n	8013566 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xb8>
    signs |= (uint64_t)buf[i] << 8*i;
 8013516:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801351a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801351e:	4413      	add	r3, r2
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	b2db      	uxtb	r3, r3
 8013524:	2200      	movs	r2, #0
 8013526:	4698      	mov	r8, r3
 8013528:	4691      	mov	r9, r2
 801352a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	f1a3 0120 	sub.w	r1, r3, #32
 8013534:	f1c3 0220 	rsb	r2, r3, #32
 8013538:	fa09 f503 	lsl.w	r5, r9, r3
 801353c:	fa08 f101 	lsl.w	r1, r8, r1
 8013540:	430d      	orrs	r5, r1
 8013542:	fa28 f202 	lsr.w	r2, r8, r2
 8013546:	4315      	orrs	r5, r2
 8013548:	fa08 f403 	lsl.w	r4, r8, r3
 801354c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8013550:	ea42 0a04 	orr.w	sl, r2, r4
 8013554:	ea43 0b05 	orr.w	fp, r3, r5
 8013558:	e9c7 ab5a 	strd	sl, fp, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 801355c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013560:	3301      	adds	r3, #1
 8013562:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013566:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801356a:	2b07      	cmp	r3, #7
 801356c:	d9d3      	bls.n	8013516 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x68>
  pos = 8;
 801356e:	2308      	movs	r3, #8
 8013570:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  for(i = 0; i < N_; ++i)
 8013574:	2300      	movs	r3, #0
 8013576:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801357a:	e00e      	b.n	801359a <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xec>
    c->coeffs[i] = 0;
 801357c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013580:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801358a:	2100      	movs	r1, #0
 801358c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_; ++i)
 8013590:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013594:	3301      	adds	r3, #1
 8013596:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 801359a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801359e:	2bff      	cmp	r3, #255	; 0xff
 80135a0:	d9ec      	bls.n	801357c <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xce>
  for(i = N_-TAU; i < N_; ++i) {
 80135a2:	23d9      	movs	r3, #217	; 0xd9
 80135a4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80135a8:	e054      	b.n	8013654 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x1a6>
    do {
      if(pos >= SHAKE256_RATE) {
 80135aa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80135ae:	2b87      	cmp	r3, #135	; 0x87
 80135b0:	d90a      	bls.n	80135c8 <pqcrystals_dilithium2aes_r_ref_poly_challenge+0x11a>
        shake256_squeezeblocks(buf, 1, &state);
 80135b2:	f107 0208 	add.w	r2, r7, #8
 80135b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80135ba:	2101      	movs	r1, #1
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fe ffbb 	bl	8012538 <pqcrystals_fips202_ref_shake256_squeezeblocks>
        pos = 0;
 80135c2:	2300      	movs	r3, #0
 80135c4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      }

      b = buf[pos++];
 80135c8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80135cc:	1c5a      	adds	r2, r3, #1
 80135ce:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 80135d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80135d6:	443b      	add	r3, r7
 80135d8:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80135dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    } while(b > i);
 80135e0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80135e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d8de      	bhi.n	80135aa <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>

    c->coeffs[i] = c->coeffs[b];
 80135ec:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80135f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80135fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80135fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013602:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801360c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 8013610:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8013614:	f003 0301 	and.w	r3, r3, #1
 8013618:	005b      	lsls	r3, r3, #1
 801361a:	f1c3 0301 	rsb	r3, r3, #1
 801361e:	4619      	mov	r1, r3
 8013620:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013624:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801362e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    signs >>= 1;
 8013632:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8013636:	f04f 0200 	mov.w	r2, #0
 801363a:	f04f 0300 	mov.w	r3, #0
 801363e:	0842      	lsrs	r2, r0, #1
 8013640:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013644:	084b      	lsrs	r3, r1, #1
 8013646:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = N_-TAU; i < N_; ++i) {
 801364a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801364e:	3301      	adds	r3, #1
 8013650:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8013654:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013658:	2bff      	cmp	r3, #255	; 0xff
 801365a:	d9a6      	bls.n	80135aa <pqcrystals_dilithium2aes_r_ref_poly_challenge+0xfc>
  }
}
 801365c:	bf00      	nop
 801365e:	bf00      	nop
 8013660:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8013664:	46bd      	mov	sp, r7
 8013666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801366a <pqcrystals_dilithium2aes_r_ref_polyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyeta_pack(uint8_t *r, const poly *a) {
 801366a:	b480      	push	{r7}
 801366c:	b087      	sub	sp, #28
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
 8013672:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint8_t t[8];
  DBENCH_START();

#if ETA == 2
  for(i = 0; i < N_/8; ++i) {
 8013674:	2300      	movs	r3, #0
 8013676:	617b      	str	r3, [r7, #20]
 8013678:	e0a0      	b.n	80137bc <pqcrystals_dilithium2aes_r_ref_polyeta_pack+0x152>
    t[0] = ETA - a->coeffs[8*i+0];
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	00da      	lsls	r2, r3, #3
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013684:	b2db      	uxtb	r3, r3
 8013686:	f1c3 0302 	rsb	r3, r3, #2
 801368a:	b2db      	uxtb	r3, r3
 801368c:	733b      	strb	r3, [r7, #12]
    t[1] = ETA - a->coeffs[8*i+1];
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	00db      	lsls	r3, r3, #3
 8013692:	1c5a      	adds	r2, r3, #1
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801369a:	b2db      	uxtb	r3, r3
 801369c:	f1c3 0302 	rsb	r3, r3, #2
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	737b      	strb	r3, [r7, #13]
    t[2] = ETA - a->coeffs[8*i+2];
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	00db      	lsls	r3, r3, #3
 80136a8:	1c9a      	adds	r2, r3, #2
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	f1c3 0302 	rsb	r3, r3, #2
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	73bb      	strb	r3, [r7, #14]
    t[3] = ETA - a->coeffs[8*i+3];
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	00db      	lsls	r3, r3, #3
 80136be:	1cda      	adds	r2, r3, #3
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136c6:	b2db      	uxtb	r3, r3
 80136c8:	f1c3 0302 	rsb	r3, r3, #2
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	73fb      	strb	r3, [r7, #15]
    t[4] = ETA - a->coeffs[8*i+4];
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	00db      	lsls	r3, r3, #3
 80136d4:	1d1a      	adds	r2, r3, #4
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	f1c3 0302 	rsb	r3, r3, #2
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	743b      	strb	r3, [r7, #16]
    t[5] = ETA - a->coeffs[8*i+5];
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	00db      	lsls	r3, r3, #3
 80136ea:	1d5a      	adds	r2, r3, #5
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	f1c3 0302 	rsb	r3, r3, #2
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	747b      	strb	r3, [r7, #17]
    t[6] = ETA - a->coeffs[8*i+6];
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	00db      	lsls	r3, r3, #3
 8013700:	1d9a      	adds	r2, r3, #6
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013708:	b2db      	uxtb	r3, r3
 801370a:	f1c3 0302 	rsb	r3, r3, #2
 801370e:	b2db      	uxtb	r3, r3
 8013710:	74bb      	strb	r3, [r7, #18]
    t[7] = ETA - a->coeffs[8*i+7];
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	00db      	lsls	r3, r3, #3
 8013716:	1dda      	adds	r2, r3, #7
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801371e:	b2db      	uxtb	r3, r3
 8013720:	f1c3 0302 	rsb	r3, r3, #2
 8013724:	b2db      	uxtb	r3, r3
 8013726:	74fb      	strb	r3, [r7, #19]

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8013728:	7b3b      	ldrb	r3, [r7, #12]
 801372a:	b25a      	sxtb	r2, r3
 801372c:	7b7b      	ldrb	r3, [r7, #13]
 801372e:	00db      	lsls	r3, r3, #3
 8013730:	b25b      	sxtb	r3, r3
 8013732:	4313      	orrs	r3, r2
 8013734:	b25a      	sxtb	r2, r3
 8013736:	7bbb      	ldrb	r3, [r7, #14]
 8013738:	019b      	lsls	r3, r3, #6
 801373a:	b25b      	sxtb	r3, r3
 801373c:	4313      	orrs	r3, r2
 801373e:	b259      	sxtb	r1, r3
 8013740:	697a      	ldr	r2, [r7, #20]
 8013742:	4613      	mov	r3, r2
 8013744:	005b      	lsls	r3, r3, #1
 8013746:	4413      	add	r3, r2
 8013748:	687a      	ldr	r2, [r7, #4]
 801374a:	4413      	add	r3, r2
 801374c:	b2ca      	uxtb	r2, r1
 801374e:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8013750:	7bbb      	ldrb	r3, [r7, #14]
 8013752:	089b      	lsrs	r3, r3, #2
 8013754:	b2db      	uxtb	r3, r3
 8013756:	b25a      	sxtb	r2, r3
 8013758:	7bfb      	ldrb	r3, [r7, #15]
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	b25b      	sxtb	r3, r3
 801375e:	4313      	orrs	r3, r2
 8013760:	b25a      	sxtb	r2, r3
 8013762:	7c3b      	ldrb	r3, [r7, #16]
 8013764:	011b      	lsls	r3, r3, #4
 8013766:	b25b      	sxtb	r3, r3
 8013768:	4313      	orrs	r3, r2
 801376a:	b25a      	sxtb	r2, r3
 801376c:	7c7b      	ldrb	r3, [r7, #17]
 801376e:	01db      	lsls	r3, r3, #7
 8013770:	b25b      	sxtb	r3, r3
 8013772:	4313      	orrs	r3, r2
 8013774:	b259      	sxtb	r1, r3
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	4613      	mov	r3, r2
 801377a:	005b      	lsls	r3, r3, #1
 801377c:	4413      	add	r3, r2
 801377e:	3301      	adds	r3, #1
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	4413      	add	r3, r2
 8013784:	b2ca      	uxtb	r2, r1
 8013786:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8013788:	7c7b      	ldrb	r3, [r7, #17]
 801378a:	085b      	lsrs	r3, r3, #1
 801378c:	b2db      	uxtb	r3, r3
 801378e:	b25a      	sxtb	r2, r3
 8013790:	7cbb      	ldrb	r3, [r7, #18]
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	b25b      	sxtb	r3, r3
 8013796:	4313      	orrs	r3, r2
 8013798:	b25a      	sxtb	r2, r3
 801379a:	7cfb      	ldrb	r3, [r7, #19]
 801379c:	015b      	lsls	r3, r3, #5
 801379e:	b25b      	sxtb	r3, r3
 80137a0:	4313      	orrs	r3, r2
 80137a2:	b259      	sxtb	r1, r3
 80137a4:	697a      	ldr	r2, [r7, #20]
 80137a6:	4613      	mov	r3, r2
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	4413      	add	r3, r2
 80137ac:	3302      	adds	r3, #2
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	4413      	add	r3, r2
 80137b2:	b2ca      	uxtb	r2, r1
 80137b4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/8; ++i) {
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	3301      	adds	r3, #1
 80137ba:	617b      	str	r3, [r7, #20]
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	2b1f      	cmp	r3, #31
 80137c0:	f67f af5b 	bls.w	801367a <pqcrystals_dilithium2aes_r_ref_polyeta_pack+0x10>
    r[i] = t[0] | (t[1] << 4);
  }
#endif

  DBENCH_STOP(*tpack);
}
 80137c4:	bf00      	nop
 80137c6:	bf00      	nop
 80137c8:	371c      	adds	r7, #28
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr

080137d2 <pqcrystals_dilithium2aes_r_ref_polyeta_unpack>:
* Description: Unpack polynomial with coefficients in [-ETA,ETA].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyeta_unpack(poly *r, const uint8_t *a) {
 80137d2:	b480      	push	{r7}
 80137d4:	b085      	sub	sp, #20
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if ETA == 2
  for(i = 0; i < N_/8; ++i) {
 80137dc:	2300      	movs	r3, #0
 80137de:	60fb      	str	r3, [r7, #12]
 80137e0:	e116      	b.n	8013a10 <pqcrystals_dilithium2aes_r_ref_polyeta_unpack+0x23e>
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 80137e2:	68fa      	ldr	r2, [r7, #12]
 80137e4:	4613      	mov	r3, r2
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	4413      	add	r3, r2
 80137ea:	683a      	ldr	r2, [r7, #0]
 80137ec:	4413      	add	r3, r2
 80137ee:	781b      	ldrb	r3, [r3, #0]
 80137f0:	4619      	mov	r1, r3
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	00da      	lsls	r2, r3, #3
 80137f6:	f001 0107 	and.w	r1, r1, #7
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 8013800:	68fa      	ldr	r2, [r7, #12]
 8013802:	4613      	mov	r3, r2
 8013804:	005b      	lsls	r3, r3, #1
 8013806:	4413      	add	r3, r2
 8013808:	683a      	ldr	r2, [r7, #0]
 801380a:	4413      	add	r3, r2
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	08db      	lsrs	r3, r3, #3
 8013810:	b2db      	uxtb	r3, r3
 8013812:	4619      	mov	r1, r3
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	00db      	lsls	r3, r3, #3
 8013818:	1c5a      	adds	r2, r3, #1
 801381a:	f001 0107 	and.w	r1, r1, #7
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 8013824:	68fa      	ldr	r2, [r7, #12]
 8013826:	4613      	mov	r3, r2
 8013828:	005b      	lsls	r3, r3, #1
 801382a:	4413      	add	r3, r2
 801382c:	683a      	ldr	r2, [r7, #0]
 801382e:	4413      	add	r3, r2
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	099b      	lsrs	r3, r3, #6
 8013834:	b2db      	uxtb	r3, r3
 8013836:	4619      	mov	r1, r3
 8013838:	68fa      	ldr	r2, [r7, #12]
 801383a:	4613      	mov	r3, r2
 801383c:	005b      	lsls	r3, r3, #1
 801383e:	4413      	add	r3, r2
 8013840:	3301      	adds	r3, #1
 8013842:	683a      	ldr	r2, [r7, #0]
 8013844:	4413      	add	r3, r2
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	430b      	orrs	r3, r1
 801384c:	68fa      	ldr	r2, [r7, #12]
 801384e:	00d2      	lsls	r2, r2, #3
 8013850:	3202      	adds	r2, #2
 8013852:	f003 0107 	and.w	r1, r3, #7
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 801385c:	68fa      	ldr	r2, [r7, #12]
 801385e:	4613      	mov	r3, r2
 8013860:	005b      	lsls	r3, r3, #1
 8013862:	4413      	add	r3, r2
 8013864:	3301      	adds	r3, #1
 8013866:	683a      	ldr	r2, [r7, #0]
 8013868:	4413      	add	r3, r2
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	085b      	lsrs	r3, r3, #1
 801386e:	b2db      	uxtb	r3, r3
 8013870:	4619      	mov	r1, r3
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	1cda      	adds	r2, r3, #3
 8013878:	f001 0107 	and.w	r1, r1, #7
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 8013882:	68fa      	ldr	r2, [r7, #12]
 8013884:	4613      	mov	r3, r2
 8013886:	005b      	lsls	r3, r3, #1
 8013888:	4413      	add	r3, r2
 801388a:	3301      	adds	r3, #1
 801388c:	683a      	ldr	r2, [r7, #0]
 801388e:	4413      	add	r3, r2
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	091b      	lsrs	r3, r3, #4
 8013894:	b2db      	uxtb	r3, r3
 8013896:	4619      	mov	r1, r3
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	00db      	lsls	r3, r3, #3
 801389c:	1d1a      	adds	r2, r3, #4
 801389e:	f001 0107 	and.w	r1, r1, #7
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 80138a8:	68fa      	ldr	r2, [r7, #12]
 80138aa:	4613      	mov	r3, r2
 80138ac:	005b      	lsls	r3, r3, #1
 80138ae:	4413      	add	r3, r2
 80138b0:	3301      	adds	r3, #1
 80138b2:	683a      	ldr	r2, [r7, #0]
 80138b4:	4413      	add	r3, r2
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	09db      	lsrs	r3, r3, #7
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	4619      	mov	r1, r3
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	4613      	mov	r3, r2
 80138c2:	005b      	lsls	r3, r3, #1
 80138c4:	4413      	add	r3, r2
 80138c6:	3302      	adds	r3, #2
 80138c8:	683a      	ldr	r2, [r7, #0]
 80138ca:	4413      	add	r3, r2
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	005b      	lsls	r3, r3, #1
 80138d0:	430b      	orrs	r3, r1
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	00d2      	lsls	r2, r2, #3
 80138d6:	3205      	adds	r2, #5
 80138d8:	f003 0107 	and.w	r1, r3, #7
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 80138e2:	68fa      	ldr	r2, [r7, #12]
 80138e4:	4613      	mov	r3, r2
 80138e6:	005b      	lsls	r3, r3, #1
 80138e8:	4413      	add	r3, r2
 80138ea:	3302      	adds	r3, #2
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	4413      	add	r3, r2
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	089b      	lsrs	r3, r3, #2
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	4619      	mov	r1, r3
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	00db      	lsls	r3, r3, #3
 80138fc:	1d9a      	adds	r2, r3, #6
 80138fe:	f001 0107 	and.w	r1, r1, #7
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	4613      	mov	r3, r2
 801390c:	005b      	lsls	r3, r3, #1
 801390e:	4413      	add	r3, r2
 8013910:	3302      	adds	r3, #2
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	4413      	add	r3, r2
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	095b      	lsrs	r3, r3, #5
 801391a:	b2db      	uxtb	r3, r3
 801391c:	4619      	mov	r1, r3
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	00db      	lsls	r3, r3, #3
 8013922:	1dda      	adds	r2, r3, #7
 8013924:	f001 0107 	and.w	r1, r1, #7
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	00da      	lsls	r2, r3, #3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013938:	68fa      	ldr	r2, [r7, #12]
 801393a:	00d2      	lsls	r2, r2, #3
 801393c:	f1c3 0102 	rsb	r1, r3, #2
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	00db      	lsls	r3, r3, #3
 801394a:	1c5a      	adds	r2, r3, #1
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	00d2      	lsls	r2, r2, #3
 8013956:	3201      	adds	r2, #1
 8013958:	f1c3 0102 	rsb	r1, r3, #2
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	00db      	lsls	r3, r3, #3
 8013966:	1c9a      	adds	r2, r3, #2
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801396e:	68fa      	ldr	r2, [r7, #12]
 8013970:	00d2      	lsls	r2, r2, #3
 8013972:	3202      	adds	r2, #2
 8013974:	f1c3 0102 	rsb	r1, r3, #2
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	00db      	lsls	r3, r3, #3
 8013982:	1cda      	adds	r2, r3, #3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801398a:	68fa      	ldr	r2, [r7, #12]
 801398c:	00d2      	lsls	r2, r2, #3
 801398e:	3203      	adds	r2, #3
 8013990:	f1c3 0102 	rsb	r1, r3, #2
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	00db      	lsls	r3, r3, #3
 801399e:	1d1a      	adds	r2, r3, #4
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139a6:	68fa      	ldr	r2, [r7, #12]
 80139a8:	00d2      	lsls	r2, r2, #3
 80139aa:	3204      	adds	r2, #4
 80139ac:	f1c3 0102 	rsb	r1, r3, #2
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	00db      	lsls	r3, r3, #3
 80139ba:	1d5a      	adds	r2, r3, #5
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139c2:	68fa      	ldr	r2, [r7, #12]
 80139c4:	00d2      	lsls	r2, r2, #3
 80139c6:	3205      	adds	r2, #5
 80139c8:	f1c3 0102 	rsb	r1, r3, #2
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	00db      	lsls	r3, r3, #3
 80139d6:	1d9a      	adds	r2, r3, #6
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	00d2      	lsls	r2, r2, #3
 80139e2:	3206      	adds	r2, #6
 80139e4:	f1c3 0102 	rsb	r1, r3, #2
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	00db      	lsls	r3, r3, #3
 80139f2:	1dda      	adds	r2, r3, #7
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139fa:	68fa      	ldr	r2, [r7, #12]
 80139fc:	00d2      	lsls	r2, r2, #3
 80139fe:	3207      	adds	r2, #7
 8013a00:	f1c3 0102 	rsb	r1, r3, #2
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/8; ++i) {
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	3301      	adds	r3, #1
 8013a0e:	60fb      	str	r3, [r7, #12]
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2b1f      	cmp	r3, #31
 8013a14:	f67f aee5 	bls.w	80137e2 <pqcrystals_dilithium2aes_r_ref_polyeta_unpack+0x10>
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8013a18:	bf00      	nop
 8013a1a:	bf00      	nop
 8013a1c:	3714      	adds	r7, #20
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr

08013a26 <pqcrystals_dilithium2aes_r_ref_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 8013a26:	b480      	push	{r7}
 8013a28:	b085      	sub	sp, #20
 8013a2a:	af00      	add	r7, sp, #0
 8013a2c:	6078      	str	r0, [r7, #4]
 8013a2e:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013a30:	2300      	movs	r3, #0
 8013a32:	60fb      	str	r3, [r7, #12]
 8013a34:	e06f      	b.n	8013b16 <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0xf0>
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	009a      	lsls	r2, r3, #2
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	4613      	mov	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	4413      	add	r3, r2
 8013a48:	687a      	ldr	r2, [r7, #4]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	b2ca      	uxtb	r2, r1
 8013a4e:	701a      	strb	r2, [r3, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	009a      	lsls	r2, r3, #2
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a5a:	121b      	asrs	r3, r3, #8
 8013a5c:	b25a      	sxtb	r2, r3
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	009b      	lsls	r3, r3, #2
 8013a62:	1c59      	adds	r1, r3, #1
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	b25b      	sxtb	r3, r3
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	b259      	sxtb	r1, r3
 8013a72:	68fa      	ldr	r2, [r7, #12]
 8013a74:	4613      	mov	r3, r2
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	4413      	add	r3, r2
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	687a      	ldr	r2, [r7, #4]
 8013a7e:	4413      	add	r3, r2
 8013a80:	b2ca      	uxtb	r2, r1
 8013a82:	701a      	strb	r2, [r3, #0]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	009b      	lsls	r3, r3, #2
 8013a88:	1c5a      	adds	r2, r3, #1
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a90:	119b      	asrs	r3, r3, #6
 8013a92:	b25a      	sxtb	r2, r3
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	009b      	lsls	r3, r3, #2
 8013a98:	1c99      	adds	r1, r3, #2
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013aa0:	011b      	lsls	r3, r3, #4
 8013aa2:	b25b      	sxtb	r3, r3
 8013aa4:	4313      	orrs	r3, r2
 8013aa6:	b259      	sxtb	r1, r3
 8013aa8:	68fa      	ldr	r2, [r7, #12]
 8013aaa:	4613      	mov	r3, r2
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	4413      	add	r3, r2
 8013ab0:	3302      	adds	r3, #2
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	b2ca      	uxtb	r2, r1
 8013ab8:	701a      	strb	r2, [r3, #0]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	009b      	lsls	r3, r3, #2
 8013abe:	1c9a      	adds	r2, r3, #2
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac6:	111b      	asrs	r3, r3, #4
 8013ac8:	b25a      	sxtb	r2, r3
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	1cd9      	adds	r1, r3, #3
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ad6:	019b      	lsls	r3, r3, #6
 8013ad8:	b25b      	sxtb	r3, r3
 8013ada:	4313      	orrs	r3, r2
 8013adc:	b259      	sxtb	r1, r3
 8013ade:	68fa      	ldr	r2, [r7, #12]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	4413      	add	r3, r2
 8013ae6:	3303      	adds	r3, #3
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	4413      	add	r3, r2
 8013aec:	b2ca      	uxtb	r2, r1
 8013aee:	701a      	strb	r2, [r3, #0]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	1cda      	adds	r2, r3, #3
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013afc:	1099      	asrs	r1, r3, #2
 8013afe:	68fa      	ldr	r2, [r7, #12]
 8013b00:	4613      	mov	r3, r2
 8013b02:	009b      	lsls	r3, r3, #2
 8013b04:	4413      	add	r3, r2
 8013b06:	3304      	adds	r3, #4
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	4413      	add	r3, r2
 8013b0c:	b2ca      	uxtb	r2, r1
 8013b0e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	3301      	adds	r3, #1
 8013b14:	60fb      	str	r3, [r7, #12]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2b3f      	cmp	r3, #63	; 0x3f
 8013b1a:	d98c      	bls.n	8013a36 <pqcrystals_dilithium2aes_r_ref_polyt1_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013b1c:	bf00      	nop
 8013b1e:	bf00      	nop
 8013b20:	3714      	adds	r7, #20
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr

08013b2a <pqcrystals_dilithium2aes_r_ref_polyt1_unpack>:
*              Output coefficients are standard representatives.
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
 8013b2a:	b480      	push	{r7}
 8013b2c:	b085      	sub	sp, #20
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/4; ++i) {
 8013b34:	2300      	movs	r3, #0
 8013b36:	60fb      	str	r3, [r7, #12]
 8013b38:	e076      	b.n	8013c28 <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0xfe>
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	4613      	mov	r3, r2
 8013b3e:	009b      	lsls	r3, r3, #2
 8013b40:	4413      	add	r3, r2
 8013b42:	683a      	ldr	r2, [r7, #0]
 8013b44:	4413      	add	r3, r2
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	68fa      	ldr	r2, [r7, #12]
 8013b4c:	4613      	mov	r3, r2
 8013b4e:	009b      	lsls	r3, r3, #2
 8013b50:	4413      	add	r3, r2
 8013b52:	3301      	adds	r3, #1
 8013b54:	683a      	ldr	r2, [r7, #0]
 8013b56:	4413      	add	r3, r2
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	021b      	lsls	r3, r3, #8
 8013b5c:	430b      	orrs	r3, r1
 8013b5e:	4619      	mov	r1, r3
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	009a      	lsls	r2, r3, #2
 8013b64:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	4613      	mov	r3, r2
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	4413      	add	r3, r2
 8013b76:	3301      	adds	r3, #1
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	4413      	add	r3, r2
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	089b      	lsrs	r3, r3, #2
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	4619      	mov	r1, r3
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	4613      	mov	r3, r2
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	4413      	add	r3, r2
 8013b8c:	3302      	adds	r3, #2
 8013b8e:	683a      	ldr	r2, [r7, #0]
 8013b90:	4413      	add	r3, r2
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	019b      	lsls	r3, r3, #6
 8013b96:	430b      	orrs	r3, r1
 8013b98:	4619      	mov	r1, r3
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	1c5a      	adds	r2, r3, #1
 8013ba0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 8013baa:	68fa      	ldr	r2, [r7, #12]
 8013bac:	4613      	mov	r3, r2
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	4413      	add	r3, r2
 8013bb2:	3302      	adds	r3, #2
 8013bb4:	683a      	ldr	r2, [r7, #0]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	091b      	lsrs	r3, r3, #4
 8013bbc:	b2db      	uxtb	r3, r3
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	009b      	lsls	r3, r3, #2
 8013bc6:	4413      	add	r3, r2
 8013bc8:	3303      	adds	r3, #3
 8013bca:	683a      	ldr	r2, [r7, #0]
 8013bcc:	4413      	add	r3, r2
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	011b      	lsls	r3, r3, #4
 8013bd2:	430b      	orrs	r3, r1
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	1c9a      	adds	r2, r3, #2
 8013bdc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 8013be6:	68fa      	ldr	r2, [r7, #12]
 8013be8:	4613      	mov	r3, r2
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	4413      	add	r3, r2
 8013bee:	3303      	adds	r3, #3
 8013bf0:	683a      	ldr	r2, [r7, #0]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	781b      	ldrb	r3, [r3, #0]
 8013bf6:	099b      	lsrs	r3, r3, #6
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	68fa      	ldr	r2, [r7, #12]
 8013bfe:	4613      	mov	r3, r2
 8013c00:	009b      	lsls	r3, r3, #2
 8013c02:	4413      	add	r3, r2
 8013c04:	3304      	adds	r3, #4
 8013c06:	683a      	ldr	r2, [r7, #0]
 8013c08:	4413      	add	r3, r2
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	430b      	orrs	r3, r1
 8013c10:	4619      	mov	r1, r3
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	1cda      	adds	r2, r3, #3
 8013c18:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	3301      	adds	r3, #1
 8013c26:	60fb      	str	r3, [r7, #12]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8013c2c:	d985      	bls.n	8013b3a <pqcrystals_dilithium2aes_r_ref_polyt1_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013c2e:	bf00      	nop
 8013c30:	bf00      	nop
 8013c32:	3714      	adds	r7, #20
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <pqcrystals_dilithium2aes_r_ref_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8013c3c:	b480      	push	{r7}
 8013c3e:	b08d      	sub	sp, #52	; 0x34
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 8013c46:	2300      	movs	r3, #0
 8013c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c4a:	e1ad      	b.n	8013fa8 <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x36c>
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8013c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4e:	00da      	lsls	r2, r3, #3
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c56:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013c5a:	60fb      	str	r3, [r7, #12]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8013c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	1c5a      	adds	r2, r3, #1
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c68:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013c6c:	613b      	str	r3, [r7, #16]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8013c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c70:	00db      	lsls	r3, r3, #3
 8013c72:	1c9a      	adds	r2, r3, #2
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c7a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013c7e:	617b      	str	r3, [r7, #20]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8013c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c82:	00db      	lsls	r3, r3, #3
 8013c84:	1cda      	adds	r2, r3, #3
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c8c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013c90:	61bb      	str	r3, [r7, #24]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8013c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c94:	00db      	lsls	r3, r3, #3
 8013c96:	1d1a      	adds	r2, r3, #4
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c9e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013ca2:	61fb      	str	r3, [r7, #28]
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8013ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ca6:	00db      	lsls	r3, r3, #3
 8013ca8:	1d5a      	adds	r2, r3, #5
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cb0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013cb4:	623b      	str	r3, [r7, #32]
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 8013cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb8:	00db      	lsls	r3, r3, #3
 8013cba:	1d9a      	adds	r2, r3, #6
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cc2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013cc6:	627b      	str	r3, [r7, #36]	; 0x24
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 8013cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cca:	00db      	lsls	r3, r3, #3
 8013ccc:	1dda      	adds	r2, r3, #7
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cd4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013cd8:	62bb      	str	r3, [r7, #40]	; 0x28

    r[13*i+ 0]  =  t[0];
 8013cda:	68f9      	ldr	r1, [r7, #12]
 8013cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cde:	4613      	mov	r3, r2
 8013ce0:	005b      	lsls	r3, r3, #1
 8013ce2:	4413      	add	r3, r2
 8013ce4:	009b      	lsls	r3, r3, #2
 8013ce6:	4413      	add	r3, r2
 8013ce8:	687a      	ldr	r2, [r7, #4]
 8013cea:	4413      	add	r3, r2
 8013cec:	b2ca      	uxtb	r2, r1
 8013cee:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1]  =  t[0] >>  8;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	0a19      	lsrs	r1, r3, #8
 8013cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	005b      	lsls	r3, r3, #1
 8013cfa:	4413      	add	r3, r2
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	4413      	add	r3, r2
 8013d00:	3301      	adds	r3, #1
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	4413      	add	r3, r2
 8013d06:	b2ca      	uxtb	r2, r1
 8013d08:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 8013d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d0c:	4613      	mov	r3, r2
 8013d0e:	005b      	lsls	r3, r3, #1
 8013d10:	4413      	add	r3, r2
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	4413      	add	r3, r2
 8013d16:	3301      	adds	r3, #1
 8013d18:	687a      	ldr	r2, [r7, #4]
 8013d1a:	4413      	add	r3, r2
 8013d1c:	7818      	ldrb	r0, [r3, #0]
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	015b      	lsls	r3, r3, #5
 8013d24:	b2d9      	uxtb	r1, r3
 8013d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d28:	4613      	mov	r3, r2
 8013d2a:	005b      	lsls	r3, r3, #1
 8013d2c:	4413      	add	r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	4413      	add	r3, r2
 8013d32:	3301      	adds	r3, #1
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	4413      	add	r3, r2
 8013d38:	ea40 0201 	orr.w	r2, r0, r1
 8013d3c:	b2d2      	uxtb	r2, r2
 8013d3e:	701a      	strb	r2, [r3, #0]
    r[13*i+ 2]  =  t[1] >>  3;
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	08d9      	lsrs	r1, r3, #3
 8013d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d46:	4613      	mov	r3, r2
 8013d48:	005b      	lsls	r3, r3, #1
 8013d4a:	4413      	add	r3, r2
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	4413      	add	r3, r2
 8013d50:	3302      	adds	r3, #2
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	4413      	add	r3, r2
 8013d56:	b2ca      	uxtb	r2, r1
 8013d58:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3]  =  t[1] >> 11;
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	0ad9      	lsrs	r1, r3, #11
 8013d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d60:	4613      	mov	r3, r2
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	4413      	add	r3, r2
 8013d6a:	3303      	adds	r3, #3
 8013d6c:	687a      	ldr	r2, [r7, #4]
 8013d6e:	4413      	add	r3, r2
 8013d70:	b2ca      	uxtb	r2, r1
 8013d72:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3] |=  t[2] <<  2;
 8013d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d76:	4613      	mov	r3, r2
 8013d78:	005b      	lsls	r3, r3, #1
 8013d7a:	4413      	add	r3, r2
 8013d7c:	009b      	lsls	r3, r3, #2
 8013d7e:	4413      	add	r3, r2
 8013d80:	3303      	adds	r3, #3
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	4413      	add	r3, r2
 8013d86:	7818      	ldrb	r0, [r3, #0]
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	b2d9      	uxtb	r1, r3
 8013d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d92:	4613      	mov	r3, r2
 8013d94:	005b      	lsls	r3, r3, #1
 8013d96:	4413      	add	r3, r2
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	4413      	add	r3, r2
 8013d9c:	3303      	adds	r3, #3
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	4413      	add	r3, r2
 8013da2:	ea40 0201 	orr.w	r2, r0, r1
 8013da6:	b2d2      	uxtb	r2, r2
 8013da8:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4]  =  t[2] >>  6;
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	0999      	lsrs	r1, r3, #6
 8013dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	4413      	add	r3, r2
 8013dba:	3304      	adds	r3, #4
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	b2ca      	uxtb	r2, r1
 8013dc2:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4] |=  t[3] <<  7;
 8013dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	005b      	lsls	r3, r3, #1
 8013dca:	4413      	add	r3, r2
 8013dcc:	009b      	lsls	r3, r3, #2
 8013dce:	4413      	add	r3, r2
 8013dd0:	3304      	adds	r3, #4
 8013dd2:	687a      	ldr	r2, [r7, #4]
 8013dd4:	4413      	add	r3, r2
 8013dd6:	7818      	ldrb	r0, [r3, #0]
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	01db      	lsls	r3, r3, #7
 8013dde:	b2d9      	uxtb	r1, r3
 8013de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013de2:	4613      	mov	r3, r2
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	4413      	add	r3, r2
 8013de8:	009b      	lsls	r3, r3, #2
 8013dea:	4413      	add	r3, r2
 8013dec:	3304      	adds	r3, #4
 8013dee:	687a      	ldr	r2, [r7, #4]
 8013df0:	4413      	add	r3, r2
 8013df2:	ea40 0201 	orr.w	r2, r0, r1
 8013df6:	b2d2      	uxtb	r2, r2
 8013df8:	701a      	strb	r2, [r3, #0]
    r[13*i+ 5]  =  t[3] >>  1;
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	0859      	lsrs	r1, r3, #1
 8013dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e00:	4613      	mov	r3, r2
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	4413      	add	r3, r2
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	4413      	add	r3, r2
 8013e0a:	3305      	adds	r3, #5
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	4413      	add	r3, r2
 8013e10:	b2ca      	uxtb	r2, r1
 8013e12:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6]  =  t[3] >>  9;
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	0a59      	lsrs	r1, r3, #9
 8013e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e1a:	4613      	mov	r3, r2
 8013e1c:	005b      	lsls	r3, r3, #1
 8013e1e:	4413      	add	r3, r2
 8013e20:	009b      	lsls	r3, r3, #2
 8013e22:	4413      	add	r3, r2
 8013e24:	3306      	adds	r3, #6
 8013e26:	687a      	ldr	r2, [r7, #4]
 8013e28:	4413      	add	r3, r2
 8013e2a:	b2ca      	uxtb	r2, r1
 8013e2c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6] |=  t[4] <<  4;
 8013e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e30:	4613      	mov	r3, r2
 8013e32:	005b      	lsls	r3, r3, #1
 8013e34:	4413      	add	r3, r2
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	4413      	add	r3, r2
 8013e3a:	3306      	adds	r3, #6
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	4413      	add	r3, r2
 8013e40:	7818      	ldrb	r0, [r3, #0]
 8013e42:	69fb      	ldr	r3, [r7, #28]
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	011b      	lsls	r3, r3, #4
 8013e48:	b2d9      	uxtb	r1, r3
 8013e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e4c:	4613      	mov	r3, r2
 8013e4e:	005b      	lsls	r3, r3, #1
 8013e50:	4413      	add	r3, r2
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	4413      	add	r3, r2
 8013e56:	3306      	adds	r3, #6
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	4413      	add	r3, r2
 8013e5c:	ea40 0201 	orr.w	r2, r0, r1
 8013e60:	b2d2      	uxtb	r2, r2
 8013e62:	701a      	strb	r2, [r3, #0]
    r[13*i+ 7]  =  t[4] >>  4;
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	0919      	lsrs	r1, r3, #4
 8013e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	005b      	lsls	r3, r3, #1
 8013e6e:	4413      	add	r3, r2
 8013e70:	009b      	lsls	r3, r3, #2
 8013e72:	4413      	add	r3, r2
 8013e74:	3307      	adds	r3, #7
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	4413      	add	r3, r2
 8013e7a:	b2ca      	uxtb	r2, r1
 8013e7c:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8]  =  t[4] >> 12;
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	0b19      	lsrs	r1, r3, #12
 8013e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e84:	4613      	mov	r3, r2
 8013e86:	005b      	lsls	r3, r3, #1
 8013e88:	4413      	add	r3, r2
 8013e8a:	009b      	lsls	r3, r3, #2
 8013e8c:	4413      	add	r3, r2
 8013e8e:	3308      	adds	r3, #8
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	4413      	add	r3, r2
 8013e94:	b2ca      	uxtb	r2, r1
 8013e96:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8] |=  t[5] <<  1;
 8013e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4413      	add	r3, r2
 8013ea0:	009b      	lsls	r3, r3, #2
 8013ea2:	4413      	add	r3, r2
 8013ea4:	3308      	adds	r3, #8
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	7818      	ldrb	r0, [r3, #0]
 8013eac:	6a3b      	ldr	r3, [r7, #32]
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	005b      	lsls	r3, r3, #1
 8013eb2:	b2d9      	uxtb	r1, r3
 8013eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	005b      	lsls	r3, r3, #1
 8013eba:	4413      	add	r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	4413      	add	r3, r2
 8013ec0:	3308      	adds	r3, #8
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	ea40 0201 	orr.w	r2, r0, r1
 8013eca:	b2d2      	uxtb	r2, r2
 8013ecc:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9]  =  t[5] >>  7;
 8013ece:	6a3b      	ldr	r3, [r7, #32]
 8013ed0:	09d9      	lsrs	r1, r3, #7
 8013ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	4413      	add	r3, r2
 8013eda:	009b      	lsls	r3, r3, #2
 8013edc:	4413      	add	r3, r2
 8013ede:	3309      	adds	r3, #9
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	4413      	add	r3, r2
 8013ee4:	b2ca      	uxtb	r2, r1
 8013ee6:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9] |=  t[6] <<  6;
 8013ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eea:	4613      	mov	r3, r2
 8013eec:	005b      	lsls	r3, r3, #1
 8013eee:	4413      	add	r3, r2
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	4413      	add	r3, r2
 8013ef4:	3309      	adds	r3, #9
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	4413      	add	r3, r2
 8013efa:	7818      	ldrb	r0, [r3, #0]
 8013efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efe:	b2db      	uxtb	r3, r3
 8013f00:	019b      	lsls	r3, r3, #6
 8013f02:	b2d9      	uxtb	r1, r3
 8013f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f06:	4613      	mov	r3, r2
 8013f08:	005b      	lsls	r3, r3, #1
 8013f0a:	4413      	add	r3, r2
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	4413      	add	r3, r2
 8013f10:	3309      	adds	r3, #9
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	4413      	add	r3, r2
 8013f16:	ea40 0201 	orr.w	r2, r0, r1
 8013f1a:	b2d2      	uxtb	r2, r2
 8013f1c:	701a      	strb	r2, [r3, #0]
    r[13*i+10]  =  t[6] >>  2;
 8013f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f20:	0899      	lsrs	r1, r3, #2
 8013f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f24:	4613      	mov	r3, r2
 8013f26:	005b      	lsls	r3, r3, #1
 8013f28:	4413      	add	r3, r2
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	4413      	add	r3, r2
 8013f2e:	330a      	adds	r3, #10
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	4413      	add	r3, r2
 8013f34:	b2ca      	uxtb	r2, r1
 8013f36:	701a      	strb	r2, [r3, #0]
    r[13*i+11]  =  t[6] >> 10;
 8013f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3a:	0a99      	lsrs	r1, r3, #10
 8013f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f3e:	4613      	mov	r3, r2
 8013f40:	005b      	lsls	r3, r3, #1
 8013f42:	4413      	add	r3, r2
 8013f44:	009b      	lsls	r3, r3, #2
 8013f46:	4413      	add	r3, r2
 8013f48:	330b      	adds	r3, #11
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	4413      	add	r3, r2
 8013f4e:	b2ca      	uxtb	r2, r1
 8013f50:	701a      	strb	r2, [r3, #0]
    r[13*i+11] |=  t[7] <<  3;
 8013f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f54:	4613      	mov	r3, r2
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	4413      	add	r3, r2
 8013f5a:	009b      	lsls	r3, r3, #2
 8013f5c:	4413      	add	r3, r2
 8013f5e:	330b      	adds	r3, #11
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	4413      	add	r3, r2
 8013f64:	7818      	ldrb	r0, [r3, #0]
 8013f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f68:	b2db      	uxtb	r3, r3
 8013f6a:	00db      	lsls	r3, r3, #3
 8013f6c:	b2d9      	uxtb	r1, r3
 8013f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	009b      	lsls	r3, r3, #2
 8013f78:	4413      	add	r3, r2
 8013f7a:	330b      	adds	r3, #11
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	4413      	add	r3, r2
 8013f80:	ea40 0201 	orr.w	r2, r0, r1
 8013f84:	b2d2      	uxtb	r2, r2
 8013f86:	701a      	strb	r2, [r3, #0]
    r[13*i+12]  =  t[7] >>  5;
 8013f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8a:	0959      	lsrs	r1, r3, #5
 8013f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f8e:	4613      	mov	r3, r2
 8013f90:	005b      	lsls	r3, r3, #1
 8013f92:	4413      	add	r3, r2
 8013f94:	009b      	lsls	r3, r3, #2
 8013f96:	4413      	add	r3, r2
 8013f98:	330c      	adds	r3, #12
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	b2ca      	uxtb	r2, r1
 8013fa0:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/8; ++i) {
 8013fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013faa:	2b1f      	cmp	r3, #31
 8013fac:	f67f ae4e 	bls.w	8013c4c <pqcrystals_dilithium2aes_r_ref_polyt0_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8013fb0:	bf00      	nop
 8013fb2:	bf00      	nop
 8013fb4:	3734      	adds	r7, #52	; 0x34
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbc:	4770      	bx	lr

08013fbe <pqcrystals_dilithium2aes_r_ref_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 8013fbe:	b480      	push	{r7}
 8013fc0:	b085      	sub	sp, #20
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	6078      	str	r0, [r7, #4]
 8013fc6:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N_/8; ++i) {
 8013fc8:	2300      	movs	r3, #0
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	e294      	b.n	80144f8 <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x53a>
    r->coeffs[8*i+0]  = a[13*i+0];
 8013fce:	68fa      	ldr	r2, [r7, #12]
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	4413      	add	r3, r2
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	4413      	add	r3, r2
 8013fda:	683a      	ldr	r2, [r7, #0]
 8013fdc:	4413      	add	r3, r2
 8013fde:	7819      	ldrb	r1, [r3, #0]
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	00da      	lsls	r2, r3, #3
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	00da      	lsls	r2, r3, #3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	68fa      	ldr	r2, [r7, #12]
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	4413      	add	r3, r2
 8014002:	3301      	adds	r3, #1
 8014004:	683a      	ldr	r2, [r7, #0]
 8014006:	4413      	add	r3, r2
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	021b      	lsls	r3, r3, #8
 801400c:	4319      	orrs	r1, r3
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	00da      	lsls	r2, r3, #3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] &= 0x1FFF;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	00da      	lsls	r2, r3, #3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	00d2      	lsls	r2, r2, #3
 8014026:	f3c3 010c 	ubfx	r1, r3, #0, #13
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8014030:	68fa      	ldr	r2, [r7, #12]
 8014032:	4613      	mov	r3, r2
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	4413      	add	r3, r2
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	4413      	add	r3, r2
 801403c:	3301      	adds	r3, #1
 801403e:	683a      	ldr	r2, [r7, #0]
 8014040:	4413      	add	r3, r2
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	095b      	lsrs	r3, r3, #5
 8014046:	b2d9      	uxtb	r1, r3
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	00db      	lsls	r3, r3, #3
 801404c:	1c5a      	adds	r2, r3, #1
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	00db      	lsls	r3, r3, #3
 8014058:	1c5a      	adds	r2, r3, #1
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014060:	4619      	mov	r1, r3
 8014062:	68fa      	ldr	r2, [r7, #12]
 8014064:	4613      	mov	r3, r2
 8014066:	005b      	lsls	r3, r3, #1
 8014068:	4413      	add	r3, r2
 801406a:	009b      	lsls	r3, r3, #2
 801406c:	4413      	add	r3, r2
 801406e:	3302      	adds	r3, #2
 8014070:	683a      	ldr	r2, [r7, #0]
 8014072:	4413      	add	r3, r2
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	00db      	lsls	r3, r3, #3
 8014078:	4319      	orrs	r1, r3
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	00db      	lsls	r3, r3, #3
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	00db      	lsls	r3, r3, #3
 801408a:	1c5a      	adds	r2, r3, #1
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014092:	4619      	mov	r1, r3
 8014094:	68fa      	ldr	r2, [r7, #12]
 8014096:	4613      	mov	r3, r2
 8014098:	005b      	lsls	r3, r3, #1
 801409a:	4413      	add	r3, r2
 801409c:	009b      	lsls	r3, r3, #2
 801409e:	4413      	add	r3, r2
 80140a0:	3303      	adds	r3, #3
 80140a2:	683a      	ldr	r2, [r7, #0]
 80140a4:	4413      	add	r3, r2
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	02db      	lsls	r3, r3, #11
 80140aa:	4319      	orrs	r1, r3
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	00db      	lsls	r3, r3, #3
 80140b0:	1c5a      	adds	r2, r3, #1
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] &= 0x1FFF;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	00db      	lsls	r3, r3, #3
 80140bc:	1c5a      	adds	r2, r3, #1
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	00d2      	lsls	r2, r2, #3
 80140c8:	3201      	adds	r2, #1
 80140ca:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 80140d4:	68fa      	ldr	r2, [r7, #12]
 80140d6:	4613      	mov	r3, r2
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	4413      	add	r3, r2
 80140dc:	009b      	lsls	r3, r3, #2
 80140de:	4413      	add	r3, r2
 80140e0:	3303      	adds	r3, #3
 80140e2:	683a      	ldr	r2, [r7, #0]
 80140e4:	4413      	add	r3, r2
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	089b      	lsrs	r3, r3, #2
 80140ea:	b2d9      	uxtb	r1, r3
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	00db      	lsls	r3, r3, #3
 80140f0:	1c9a      	adds	r2, r3, #2
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	00db      	lsls	r3, r3, #3
 80140fc:	1c9a      	adds	r2, r3, #2
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014104:	4619      	mov	r1, r3
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	4613      	mov	r3, r2
 801410a:	005b      	lsls	r3, r3, #1
 801410c:	4413      	add	r3, r2
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	4413      	add	r3, r2
 8014112:	3304      	adds	r3, #4
 8014114:	683a      	ldr	r2, [r7, #0]
 8014116:	4413      	add	r3, r2
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	019b      	lsls	r3, r3, #6
 801411c:	4319      	orrs	r1, r3
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	00db      	lsls	r3, r3, #3
 8014122:	1c9a      	adds	r2, r3, #2
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] &= 0x1FFF;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	00db      	lsls	r3, r3, #3
 801412e:	1c9a      	adds	r2, r3, #2
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014136:	68fa      	ldr	r2, [r7, #12]
 8014138:	00d2      	lsls	r2, r2, #3
 801413a:	3202      	adds	r2, #2
 801413c:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8014146:	68fa      	ldr	r2, [r7, #12]
 8014148:	4613      	mov	r3, r2
 801414a:	005b      	lsls	r3, r3, #1
 801414c:	4413      	add	r3, r2
 801414e:	009b      	lsls	r3, r3, #2
 8014150:	4413      	add	r3, r2
 8014152:	3304      	adds	r3, #4
 8014154:	683a      	ldr	r2, [r7, #0]
 8014156:	4413      	add	r3, r2
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	09db      	lsrs	r3, r3, #7
 801415c:	b2d9      	uxtb	r1, r3
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	00db      	lsls	r3, r3, #3
 8014162:	1cda      	adds	r2, r3, #3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	00db      	lsls	r3, r3, #3
 801416e:	1cda      	adds	r2, r3, #3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014176:	4619      	mov	r1, r3
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	4613      	mov	r3, r2
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	4413      	add	r3, r2
 8014180:	009b      	lsls	r3, r3, #2
 8014182:	4413      	add	r3, r2
 8014184:	3305      	adds	r3, #5
 8014186:	683a      	ldr	r2, [r7, #0]
 8014188:	4413      	add	r3, r2
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	005b      	lsls	r3, r3, #1
 801418e:	4319      	orrs	r1, r3
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	00db      	lsls	r3, r3, #3
 8014194:	1cda      	adds	r2, r3, #3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	00db      	lsls	r3, r3, #3
 80141a0:	1cda      	adds	r2, r3, #3
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a8:	4619      	mov	r1, r3
 80141aa:	68fa      	ldr	r2, [r7, #12]
 80141ac:	4613      	mov	r3, r2
 80141ae:	005b      	lsls	r3, r3, #1
 80141b0:	4413      	add	r3, r2
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	4413      	add	r3, r2
 80141b6:	3306      	adds	r3, #6
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	4413      	add	r3, r2
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	025b      	lsls	r3, r3, #9
 80141c0:	4319      	orrs	r1, r3
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	1cda      	adds	r2, r3, #3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] &= 0x1FFF;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	00db      	lsls	r3, r3, #3
 80141d2:	1cda      	adds	r2, r3, #3
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	00d2      	lsls	r2, r2, #3
 80141de:	3203      	adds	r2, #3
 80141e0:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	4613      	mov	r3, r2
 80141ee:	005b      	lsls	r3, r3, #1
 80141f0:	4413      	add	r3, r2
 80141f2:	009b      	lsls	r3, r3, #2
 80141f4:	4413      	add	r3, r2
 80141f6:	3306      	adds	r3, #6
 80141f8:	683a      	ldr	r2, [r7, #0]
 80141fa:	4413      	add	r3, r2
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	091b      	lsrs	r3, r3, #4
 8014200:	b2d9      	uxtb	r1, r3
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	00db      	lsls	r3, r3, #3
 8014206:	1d1a      	adds	r2, r3, #4
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	00db      	lsls	r3, r3, #3
 8014212:	1d1a      	adds	r2, r3, #4
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801421a:	4619      	mov	r1, r3
 801421c:	68fa      	ldr	r2, [r7, #12]
 801421e:	4613      	mov	r3, r2
 8014220:	005b      	lsls	r3, r3, #1
 8014222:	4413      	add	r3, r2
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	4413      	add	r3, r2
 8014228:	3307      	adds	r3, #7
 801422a:	683a      	ldr	r2, [r7, #0]
 801422c:	4413      	add	r3, r2
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	011b      	lsls	r3, r3, #4
 8014232:	4319      	orrs	r1, r3
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	00db      	lsls	r3, r3, #3
 8014238:	1d1a      	adds	r2, r3, #4
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	1d1a      	adds	r2, r3, #4
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801424c:	4619      	mov	r1, r3
 801424e:	68fa      	ldr	r2, [r7, #12]
 8014250:	4613      	mov	r3, r2
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	4413      	add	r3, r2
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	4413      	add	r3, r2
 801425a:	3308      	adds	r3, #8
 801425c:	683a      	ldr	r2, [r7, #0]
 801425e:	4413      	add	r3, r2
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	031b      	lsls	r3, r3, #12
 8014264:	4319      	orrs	r1, r3
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	00db      	lsls	r3, r3, #3
 801426a:	1d1a      	adds	r2, r3, #4
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] &= 0x1FFF;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	00db      	lsls	r3, r3, #3
 8014276:	1d1a      	adds	r2, r3, #4
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801427e:	68fa      	ldr	r2, [r7, #12]
 8014280:	00d2      	lsls	r2, r2, #3
 8014282:	3204      	adds	r2, #4
 8014284:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 801428e:	68fa      	ldr	r2, [r7, #12]
 8014290:	4613      	mov	r3, r2
 8014292:	005b      	lsls	r3, r3, #1
 8014294:	4413      	add	r3, r2
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	4413      	add	r3, r2
 801429a:	3308      	adds	r3, #8
 801429c:	683a      	ldr	r2, [r7, #0]
 801429e:	4413      	add	r3, r2
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	085b      	lsrs	r3, r3, #1
 80142a4:	b2d9      	uxtb	r1, r3
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	00db      	lsls	r3, r3, #3
 80142aa:	1d5a      	adds	r2, r3, #5
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	00db      	lsls	r3, r3, #3
 80142b6:	1d5a      	adds	r2, r3, #5
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142be:	4619      	mov	r1, r3
 80142c0:	68fa      	ldr	r2, [r7, #12]
 80142c2:	4613      	mov	r3, r2
 80142c4:	005b      	lsls	r3, r3, #1
 80142c6:	4413      	add	r3, r2
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	4413      	add	r3, r2
 80142cc:	3309      	adds	r3, #9
 80142ce:	683a      	ldr	r2, [r7, #0]
 80142d0:	4413      	add	r3, r2
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	01db      	lsls	r3, r3, #7
 80142d6:	4319      	orrs	r1, r3
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	00db      	lsls	r3, r3, #3
 80142dc:	1d5a      	adds	r2, r3, #5
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] &= 0x1FFF;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	00db      	lsls	r3, r3, #3
 80142e8:	1d5a      	adds	r2, r3, #5
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	00d2      	lsls	r2, r2, #3
 80142f4:	3205      	adds	r2, #5
 80142f6:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8014300:	68fa      	ldr	r2, [r7, #12]
 8014302:	4613      	mov	r3, r2
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	4413      	add	r3, r2
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	4413      	add	r3, r2
 801430c:	3309      	adds	r3, #9
 801430e:	683a      	ldr	r2, [r7, #0]
 8014310:	4413      	add	r3, r2
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	099b      	lsrs	r3, r3, #6
 8014316:	b2d9      	uxtb	r1, r3
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	00db      	lsls	r3, r3, #3
 801431c:	1d9a      	adds	r2, r3, #6
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	00db      	lsls	r3, r3, #3
 8014328:	1d9a      	adds	r2, r3, #6
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014330:	4619      	mov	r1, r3
 8014332:	68fa      	ldr	r2, [r7, #12]
 8014334:	4613      	mov	r3, r2
 8014336:	005b      	lsls	r3, r3, #1
 8014338:	4413      	add	r3, r2
 801433a:	009b      	lsls	r3, r3, #2
 801433c:	4413      	add	r3, r2
 801433e:	330a      	adds	r3, #10
 8014340:	683a      	ldr	r2, [r7, #0]
 8014342:	4413      	add	r3, r2
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	009b      	lsls	r3, r3, #2
 8014348:	4319      	orrs	r1, r3
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	00db      	lsls	r3, r3, #3
 801434e:	1d9a      	adds	r2, r3, #6
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	00db      	lsls	r3, r3, #3
 801435a:	1d9a      	adds	r2, r3, #6
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014362:	4619      	mov	r1, r3
 8014364:	68fa      	ldr	r2, [r7, #12]
 8014366:	4613      	mov	r3, r2
 8014368:	005b      	lsls	r3, r3, #1
 801436a:	4413      	add	r3, r2
 801436c:	009b      	lsls	r3, r3, #2
 801436e:	4413      	add	r3, r2
 8014370:	330b      	adds	r3, #11
 8014372:	683a      	ldr	r2, [r7, #0]
 8014374:	4413      	add	r3, r2
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	029b      	lsls	r3, r3, #10
 801437a:	4319      	orrs	r1, r3
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	00db      	lsls	r3, r3, #3
 8014380:	1d9a      	adds	r2, r3, #6
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] &= 0x1FFF;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	00db      	lsls	r3, r3, #3
 801438c:	1d9a      	adds	r2, r3, #6
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014394:	68fa      	ldr	r2, [r7, #12]
 8014396:	00d2      	lsls	r2, r2, #3
 8014398:	3206      	adds	r2, #6
 801439a:	f3c3 010c 	ubfx	r1, r3, #0, #13
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 80143a4:	68fa      	ldr	r2, [r7, #12]
 80143a6:	4613      	mov	r3, r2
 80143a8:	005b      	lsls	r3, r3, #1
 80143aa:	4413      	add	r3, r2
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	4413      	add	r3, r2
 80143b0:	330b      	adds	r3, #11
 80143b2:	683a      	ldr	r2, [r7, #0]
 80143b4:	4413      	add	r3, r2
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	08db      	lsrs	r3, r3, #3
 80143ba:	b2d9      	uxtb	r1, r3
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	00db      	lsls	r3, r3, #3
 80143c0:	1dda      	adds	r2, r3, #7
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	00db      	lsls	r3, r3, #3
 80143cc:	1dda      	adds	r2, r3, #7
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143d4:	4619      	mov	r1, r3
 80143d6:	68fa      	ldr	r2, [r7, #12]
 80143d8:	4613      	mov	r3, r2
 80143da:	005b      	lsls	r3, r3, #1
 80143dc:	4413      	add	r3, r2
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	4413      	add	r3, r2
 80143e2:	330c      	adds	r3, #12
 80143e4:	683a      	ldr	r2, [r7, #0]
 80143e6:	4413      	add	r3, r2
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	015b      	lsls	r3, r3, #5
 80143ec:	4319      	orrs	r1, r3
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	00db      	lsls	r3, r3, #3
 80143f2:	1dda      	adds	r2, r3, #7
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] &= 0x1FFF;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	00db      	lsls	r3, r3, #3
 80143fe:	1dda      	adds	r2, r3, #7
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	00d2      	lsls	r2, r2, #3
 801440a:	3207      	adds	r2, #7
 801440c:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	00da      	lsls	r2, r3, #3
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014420:	68fa      	ldr	r2, [r7, #12]
 8014422:	00d2      	lsls	r2, r2, #3
 8014424:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	00db      	lsls	r3, r3, #3
 8014432:	1c5a      	adds	r2, r3, #1
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	00d2      	lsls	r2, r2, #3
 801443e:	3201      	adds	r2, #1
 8014440:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	00db      	lsls	r3, r3, #3
 801444e:	1c9a      	adds	r2, r3, #2
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014456:	68fa      	ldr	r2, [r7, #12]
 8014458:	00d2      	lsls	r2, r2, #3
 801445a:	3202      	adds	r2, #2
 801445c:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	00db      	lsls	r3, r3, #3
 801446a:	1cda      	adds	r2, r3, #3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014472:	68fa      	ldr	r2, [r7, #12]
 8014474:	00d2      	lsls	r2, r2, #3
 8014476:	3203      	adds	r2, #3
 8014478:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	1d1a      	adds	r2, r3, #4
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801448e:	68fa      	ldr	r2, [r7, #12]
 8014490:	00d2      	lsls	r2, r2, #3
 8014492:	3204      	adds	r2, #4
 8014494:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	00db      	lsls	r3, r3, #3
 80144a2:	1d5a      	adds	r2, r3, #5
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144aa:	68fa      	ldr	r2, [r7, #12]
 80144ac:	00d2      	lsls	r2, r2, #3
 80144ae:	3205      	adds	r2, #5
 80144b0:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	1d9a      	adds	r2, r3, #6
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144c6:	68fa      	ldr	r2, [r7, #12]
 80144c8:	00d2      	lsls	r2, r2, #3
 80144ca:	3206      	adds	r2, #6
 80144cc:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	00db      	lsls	r3, r3, #3
 80144da:	1dda      	adds	r2, r3, #7
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144e2:	68fa      	ldr	r2, [r7, #12]
 80144e4:	00d2      	lsls	r2, r2, #3
 80144e6:	3207      	adds	r2, #7
 80144e8:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/8; ++i) {
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	3301      	adds	r3, #1
 80144f6:	60fb      	str	r3, [r7, #12]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	2b1f      	cmp	r3, #31
 80144fc:	f67f ad67 	bls.w	8013fce <pqcrystals_dilithium2aes_r_ref_polyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8014500:	bf00      	nop
 8014502:	bf00      	nop
 8014504:	3714      	adds	r7, #20
 8014506:	46bd      	mov	sp, r7
 8014508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450c:	4770      	bx	lr

0801450e <pqcrystals_dilithium2aes_r_ref_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 801450e:	b480      	push	{r7}
 8014510:	b089      	sub	sp, #36	; 0x24
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
 8014516:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 8014518:	2300      	movs	r3, #0
 801451a:	61fb      	str	r3, [r7, #28]
 801451c:	e0cb      	b.n	80146b6 <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x1a8>
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	009a      	lsls	r2, r3, #2
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014528:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 801452c:	60fb      	str	r3, [r7, #12]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	1c5a      	adds	r2, r3, #1
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801453a:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 801453e:	613b      	str	r3, [r7, #16]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	009b      	lsls	r3, r3, #2
 8014544:	1c9a      	adds	r2, r3, #2
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801454c:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8014550:	617b      	str	r3, [r7, #20]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	1cda      	adds	r2, r3, #3
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801455e:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8014562:	61bb      	str	r3, [r7, #24]

    r[9*i+0]  = t[0];
 8014564:	68f9      	ldr	r1, [r7, #12]
 8014566:	69fa      	ldr	r2, [r7, #28]
 8014568:	4613      	mov	r3, r2
 801456a:	00db      	lsls	r3, r3, #3
 801456c:	4413      	add	r3, r2
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	4413      	add	r3, r2
 8014572:	b2ca      	uxtb	r2, r1
 8014574:	701a      	strb	r2, [r3, #0]
    r[9*i+1]  = t[0] >> 8;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	0a19      	lsrs	r1, r3, #8
 801457a:	69fa      	ldr	r2, [r7, #28]
 801457c:	4613      	mov	r3, r2
 801457e:	00db      	lsls	r3, r3, #3
 8014580:	4413      	add	r3, r2
 8014582:	3301      	adds	r3, #1
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	4413      	add	r3, r2
 8014588:	b2ca      	uxtb	r2, r1
 801458a:	701a      	strb	r2, [r3, #0]
    r[9*i+2]  = t[0] >> 16;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	0c19      	lsrs	r1, r3, #16
 8014590:	69fa      	ldr	r2, [r7, #28]
 8014592:	4613      	mov	r3, r2
 8014594:	00db      	lsls	r3, r3, #3
 8014596:	4413      	add	r3, r2
 8014598:	3302      	adds	r3, #2
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	4413      	add	r3, r2
 801459e:	b2ca      	uxtb	r2, r1
 80145a0:	701a      	strb	r2, [r3, #0]
    r[9*i+2] |= t[1] << 2;
 80145a2:	69fa      	ldr	r2, [r7, #28]
 80145a4:	4613      	mov	r3, r2
 80145a6:	00db      	lsls	r3, r3, #3
 80145a8:	4413      	add	r3, r2
 80145aa:	3302      	adds	r3, #2
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	4413      	add	r3, r2
 80145b0:	7818      	ldrb	r0, [r3, #0]
 80145b2:	693b      	ldr	r3, [r7, #16]
 80145b4:	b2db      	uxtb	r3, r3
 80145b6:	009b      	lsls	r3, r3, #2
 80145b8:	b2d9      	uxtb	r1, r3
 80145ba:	69fa      	ldr	r2, [r7, #28]
 80145bc:	4613      	mov	r3, r2
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	4413      	add	r3, r2
 80145c2:	3302      	adds	r3, #2
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	4413      	add	r3, r2
 80145c8:	ea40 0201 	orr.w	r2, r0, r1
 80145cc:	b2d2      	uxtb	r2, r2
 80145ce:	701a      	strb	r2, [r3, #0]
    r[9*i+3]  = t[1] >> 6;
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	0999      	lsrs	r1, r3, #6
 80145d4:	69fa      	ldr	r2, [r7, #28]
 80145d6:	4613      	mov	r3, r2
 80145d8:	00db      	lsls	r3, r3, #3
 80145da:	4413      	add	r3, r2
 80145dc:	3303      	adds	r3, #3
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	4413      	add	r3, r2
 80145e2:	b2ca      	uxtb	r2, r1
 80145e4:	701a      	strb	r2, [r3, #0]
    r[9*i+4]  = t[1] >> 14;
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	0b99      	lsrs	r1, r3, #14
 80145ea:	69fa      	ldr	r2, [r7, #28]
 80145ec:	4613      	mov	r3, r2
 80145ee:	00db      	lsls	r3, r3, #3
 80145f0:	4413      	add	r3, r2
 80145f2:	3304      	adds	r3, #4
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	4413      	add	r3, r2
 80145f8:	b2ca      	uxtb	r2, r1
 80145fa:	701a      	strb	r2, [r3, #0]
    r[9*i+4] |= t[2] << 4;
 80145fc:	69fa      	ldr	r2, [r7, #28]
 80145fe:	4613      	mov	r3, r2
 8014600:	00db      	lsls	r3, r3, #3
 8014602:	4413      	add	r3, r2
 8014604:	3304      	adds	r3, #4
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	4413      	add	r3, r2
 801460a:	7818      	ldrb	r0, [r3, #0]
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	b2db      	uxtb	r3, r3
 8014610:	011b      	lsls	r3, r3, #4
 8014612:	b2d9      	uxtb	r1, r3
 8014614:	69fa      	ldr	r2, [r7, #28]
 8014616:	4613      	mov	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	4413      	add	r3, r2
 801461c:	3304      	adds	r3, #4
 801461e:	687a      	ldr	r2, [r7, #4]
 8014620:	4413      	add	r3, r2
 8014622:	ea40 0201 	orr.w	r2, r0, r1
 8014626:	b2d2      	uxtb	r2, r2
 8014628:	701a      	strb	r2, [r3, #0]
    r[9*i+5]  = t[2] >> 4;
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	0919      	lsrs	r1, r3, #4
 801462e:	69fa      	ldr	r2, [r7, #28]
 8014630:	4613      	mov	r3, r2
 8014632:	00db      	lsls	r3, r3, #3
 8014634:	4413      	add	r3, r2
 8014636:	3305      	adds	r3, #5
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	4413      	add	r3, r2
 801463c:	b2ca      	uxtb	r2, r1
 801463e:	701a      	strb	r2, [r3, #0]
    r[9*i+6]  = t[2] >> 12;
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	0b19      	lsrs	r1, r3, #12
 8014644:	69fa      	ldr	r2, [r7, #28]
 8014646:	4613      	mov	r3, r2
 8014648:	00db      	lsls	r3, r3, #3
 801464a:	4413      	add	r3, r2
 801464c:	3306      	adds	r3, #6
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	4413      	add	r3, r2
 8014652:	b2ca      	uxtb	r2, r1
 8014654:	701a      	strb	r2, [r3, #0]
    r[9*i+6] |= t[3] << 6;
 8014656:	69fa      	ldr	r2, [r7, #28]
 8014658:	4613      	mov	r3, r2
 801465a:	00db      	lsls	r3, r3, #3
 801465c:	4413      	add	r3, r2
 801465e:	3306      	adds	r3, #6
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	4413      	add	r3, r2
 8014664:	7818      	ldrb	r0, [r3, #0]
 8014666:	69bb      	ldr	r3, [r7, #24]
 8014668:	b2db      	uxtb	r3, r3
 801466a:	019b      	lsls	r3, r3, #6
 801466c:	b2d9      	uxtb	r1, r3
 801466e:	69fa      	ldr	r2, [r7, #28]
 8014670:	4613      	mov	r3, r2
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	4413      	add	r3, r2
 8014676:	3306      	adds	r3, #6
 8014678:	687a      	ldr	r2, [r7, #4]
 801467a:	4413      	add	r3, r2
 801467c:	ea40 0201 	orr.w	r2, r0, r1
 8014680:	b2d2      	uxtb	r2, r2
 8014682:	701a      	strb	r2, [r3, #0]
    r[9*i+7]  = t[3] >> 2;
 8014684:	69bb      	ldr	r3, [r7, #24]
 8014686:	0899      	lsrs	r1, r3, #2
 8014688:	69fa      	ldr	r2, [r7, #28]
 801468a:	4613      	mov	r3, r2
 801468c:	00db      	lsls	r3, r3, #3
 801468e:	4413      	add	r3, r2
 8014690:	3307      	adds	r3, #7
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	4413      	add	r3, r2
 8014696:	b2ca      	uxtb	r2, r1
 8014698:	701a      	strb	r2, [r3, #0]
    r[9*i+8]  = t[3] >> 10;
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	0a99      	lsrs	r1, r3, #10
 801469e:	69fa      	ldr	r2, [r7, #28]
 80146a0:	4613      	mov	r3, r2
 80146a2:	00db      	lsls	r3, r3, #3
 80146a4:	4413      	add	r3, r2
 80146a6:	3308      	adds	r3, #8
 80146a8:	687a      	ldr	r2, [r7, #4]
 80146aa:	4413      	add	r3, r2
 80146ac:	b2ca      	uxtb	r2, r1
 80146ae:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	3301      	adds	r3, #1
 80146b4:	61fb      	str	r3, [r7, #28]
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	2b3f      	cmp	r3, #63	; 0x3f
 80146ba:	f67f af30 	bls.w	801451e <pqcrystals_dilithium2aes_r_ref_polyz_pack+0x10>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 80146be:	bf00      	nop
 80146c0:	bf00      	nop
 80146c2:	3724      	adds	r7, #36	; 0x24
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr

080146cc <pqcrystals_dilithium2aes_r_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N_/4; ++i) {
 80146d6:	2300      	movs	r3, #0
 80146d8:	60fb      	str	r3, [r7, #12]
 80146da:	e15e      	b.n	801499a <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	4613      	mov	r3, r2
 80146e0:	00db      	lsls	r3, r3, #3
 80146e2:	4413      	add	r3, r2
 80146e4:	683a      	ldr	r2, [r7, #0]
 80146e6:	4413      	add	r3, r2
 80146e8:	7819      	ldrb	r1, [r3, #0]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	009a      	lsls	r2, r3, #2
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	009a      	lsls	r2, r3, #2
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146fe:	4619      	mov	r1, r3
 8014700:	68fa      	ldr	r2, [r7, #12]
 8014702:	4613      	mov	r3, r2
 8014704:	00db      	lsls	r3, r3, #3
 8014706:	4413      	add	r3, r2
 8014708:	3301      	adds	r3, #1
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	4413      	add	r3, r2
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	021b      	lsls	r3, r3, #8
 8014712:	4319      	orrs	r1, r3
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	009a      	lsls	r2, r3, #2
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	009a      	lsls	r2, r3, #2
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014728:	4619      	mov	r1, r3
 801472a:	68fa      	ldr	r2, [r7, #12]
 801472c:	4613      	mov	r3, r2
 801472e:	00db      	lsls	r3, r3, #3
 8014730:	4413      	add	r3, r2
 8014732:	3302      	adds	r3, #2
 8014734:	683a      	ldr	r2, [r7, #0]
 8014736:	4413      	add	r3, r2
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	041b      	lsls	r3, r3, #16
 801473c:	4319      	orrs	r1, r3
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	009a      	lsls	r2, r3, #2
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	009a      	lsls	r2, r3, #2
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014752:	68fa      	ldr	r2, [r7, #12]
 8014754:	0092      	lsls	r2, r2, #2
 8014756:	f3c3 0111 	ubfx	r1, r3, #0, #18
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	4613      	mov	r3, r2
 8014764:	00db      	lsls	r3, r3, #3
 8014766:	4413      	add	r3, r2
 8014768:	3302      	adds	r3, #2
 801476a:	683a      	ldr	r2, [r7, #0]
 801476c:	4413      	add	r3, r2
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	089b      	lsrs	r3, r3, #2
 8014772:	b2d9      	uxtb	r1, r3
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	1c5a      	adds	r2, r3, #1
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	1c5a      	adds	r2, r3, #1
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801478c:	4619      	mov	r1, r3
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	4613      	mov	r3, r2
 8014792:	00db      	lsls	r3, r3, #3
 8014794:	4413      	add	r3, r2
 8014796:	3303      	adds	r3, #3
 8014798:	683a      	ldr	r2, [r7, #0]
 801479a:	4413      	add	r3, r2
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	019b      	lsls	r3, r3, #6
 80147a0:	4319      	orrs	r1, r3
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	009b      	lsls	r3, r3, #2
 80147a6:	1c5a      	adds	r2, r3, #1
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	009b      	lsls	r3, r3, #2
 80147b2:	1c5a      	adds	r2, r3, #1
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147ba:	4619      	mov	r1, r3
 80147bc:	68fa      	ldr	r2, [r7, #12]
 80147be:	4613      	mov	r3, r2
 80147c0:	00db      	lsls	r3, r3, #3
 80147c2:	4413      	add	r3, r2
 80147c4:	3304      	adds	r3, #4
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	4413      	add	r3, r2
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	039b      	lsls	r3, r3, #14
 80147ce:	4319      	orrs	r1, r3
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	1c5a      	adds	r2, r3, #1
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	009b      	lsls	r3, r3, #2
 80147e0:	1c5a      	adds	r2, r3, #1
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147e8:	68fa      	ldr	r2, [r7, #12]
 80147ea:	0092      	lsls	r2, r2, #2
 80147ec:	3201      	adds	r2, #1
 80147ee:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 80147f8:	68fa      	ldr	r2, [r7, #12]
 80147fa:	4613      	mov	r3, r2
 80147fc:	00db      	lsls	r3, r3, #3
 80147fe:	4413      	add	r3, r2
 8014800:	3304      	adds	r3, #4
 8014802:	683a      	ldr	r2, [r7, #0]
 8014804:	4413      	add	r3, r2
 8014806:	781b      	ldrb	r3, [r3, #0]
 8014808:	091b      	lsrs	r3, r3, #4
 801480a:	b2d9      	uxtb	r1, r3
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	1c9a      	adds	r2, r3, #2
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	1c9a      	adds	r2, r3, #2
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014824:	4619      	mov	r1, r3
 8014826:	68fa      	ldr	r2, [r7, #12]
 8014828:	4613      	mov	r3, r2
 801482a:	00db      	lsls	r3, r3, #3
 801482c:	4413      	add	r3, r2
 801482e:	3305      	adds	r3, #5
 8014830:	683a      	ldr	r2, [r7, #0]
 8014832:	4413      	add	r3, r2
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	011b      	lsls	r3, r3, #4
 8014838:	4319      	orrs	r1, r3
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	1c9a      	adds	r2, r3, #2
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	1c9a      	adds	r2, r3, #2
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014852:	4619      	mov	r1, r3
 8014854:	68fa      	ldr	r2, [r7, #12]
 8014856:	4613      	mov	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	4413      	add	r3, r2
 801485c:	3306      	adds	r3, #6
 801485e:	683a      	ldr	r2, [r7, #0]
 8014860:	4413      	add	r3, r2
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	031b      	lsls	r3, r3, #12
 8014866:	4319      	orrs	r1, r3
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	1c9a      	adds	r2, r3, #2
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	1c9a      	adds	r2, r3, #2
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014880:	68fa      	ldr	r2, [r7, #12]
 8014882:	0092      	lsls	r2, r2, #2
 8014884:	3202      	adds	r2, #2
 8014886:	f3c3 0111 	ubfx	r1, r3, #0, #18
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8014890:	68fa      	ldr	r2, [r7, #12]
 8014892:	4613      	mov	r3, r2
 8014894:	00db      	lsls	r3, r3, #3
 8014896:	4413      	add	r3, r2
 8014898:	3306      	adds	r3, #6
 801489a:	683a      	ldr	r2, [r7, #0]
 801489c:	4413      	add	r3, r2
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	099b      	lsrs	r3, r3, #6
 80148a2:	b2d9      	uxtb	r1, r3
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	009b      	lsls	r3, r3, #2
 80148a8:	1cda      	adds	r2, r3, #3
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	009b      	lsls	r3, r3, #2
 80148b4:	1cda      	adds	r2, r3, #3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148bc:	4619      	mov	r1, r3
 80148be:	68fa      	ldr	r2, [r7, #12]
 80148c0:	4613      	mov	r3, r2
 80148c2:	00db      	lsls	r3, r3, #3
 80148c4:	4413      	add	r3, r2
 80148c6:	3307      	adds	r3, #7
 80148c8:	683a      	ldr	r2, [r7, #0]
 80148ca:	4413      	add	r3, r2
 80148cc:	781b      	ldrb	r3, [r3, #0]
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	4319      	orrs	r1, r3
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	1cda      	adds	r2, r3, #3
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	1cda      	adds	r2, r3, #3
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ea:	4619      	mov	r1, r3
 80148ec:	68fa      	ldr	r2, [r7, #12]
 80148ee:	4613      	mov	r3, r2
 80148f0:	00db      	lsls	r3, r3, #3
 80148f2:	4413      	add	r3, r2
 80148f4:	3308      	adds	r3, #8
 80148f6:	683a      	ldr	r2, [r7, #0]
 80148f8:	4413      	add	r3, r2
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	029b      	lsls	r3, r3, #10
 80148fe:	4319      	orrs	r1, r3
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	009b      	lsls	r3, r3, #2
 8014904:	1cda      	adds	r2, r3, #3
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	1cda      	adds	r2, r3, #3
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	0092      	lsls	r2, r2, #2
 801491c:	3203      	adds	r2, #3
 801491e:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	009a      	lsls	r2, r3, #2
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014932:	68fa      	ldr	r2, [r7, #12]
 8014934:	0092      	lsls	r2, r2, #2
 8014936:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	009b      	lsls	r3, r3, #2
 8014944:	1c5a      	adds	r2, r3, #1
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801494c:	68fa      	ldr	r2, [r7, #12]
 801494e:	0092      	lsls	r2, r2, #2
 8014950:	3201      	adds	r2, #1
 8014952:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	1c9a      	adds	r2, r3, #2
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014968:	68fa      	ldr	r2, [r7, #12]
 801496a:	0092      	lsls	r2, r2, #2
 801496c:	3202      	adds	r2, #2
 801496e:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	009b      	lsls	r3, r3, #2
 801497c:	1cda      	adds	r2, r3, #3
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014984:	68fa      	ldr	r2, [r7, #12]
 8014986:	0092      	lsls	r2, r2, #2
 8014988:	3203      	adds	r2, #3
 801498a:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N_/4; ++i) {
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	3301      	adds	r3, #1
 8014998:	60fb      	str	r3, [r7, #12]
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2b3f      	cmp	r3, #63	; 0x3f
 801499e:	f67f ae9d 	bls.w	80146dc <pqcrystals_dilithium2aes_r_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 80149a2:	bf00      	nop
 80149a4:	bf00      	nop
 80149a6:	3714      	adds	r7, #20
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 80149b0:	b480      	push	{r7}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q_-1)/88
  for(i = 0; i < N_/4; ++i) {
 80149ba:	2300      	movs	r3, #0
 80149bc:	60fb      	str	r3, [r7, #12]
 80149be:	e081      	b.n	8014ac4 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x114>
    r[3*i+0]  = a->coeffs[4*i+0];
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	009a      	lsls	r2, r3, #2
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80149ca:	68fa      	ldr	r2, [r7, #12]
 80149cc:	4613      	mov	r3, r2
 80149ce:	005b      	lsls	r3, r3, #1
 80149d0:	4413      	add	r3, r2
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	4413      	add	r3, r2
 80149d6:	b2ca      	uxtb	r2, r1
 80149d8:	701a      	strb	r2, [r3, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 80149da:	68fa      	ldr	r2, [r7, #12]
 80149dc:	4613      	mov	r3, r2
 80149de:	005b      	lsls	r3, r3, #1
 80149e0:	4413      	add	r3, r2
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	4413      	add	r3, r2
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	b25a      	sxtb	r2, r3
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	1c59      	adds	r1, r3, #1
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80149f6:	019b      	lsls	r3, r3, #6
 80149f8:	b25b      	sxtb	r3, r3
 80149fa:	4313      	orrs	r3, r2
 80149fc:	b259      	sxtb	r1, r3
 80149fe:	68fa      	ldr	r2, [r7, #12]
 8014a00:	4613      	mov	r3, r2
 8014a02:	005b      	lsls	r3, r3, #1
 8014a04:	4413      	add	r3, r2
 8014a06:	687a      	ldr	r2, [r7, #4]
 8014a08:	4413      	add	r3, r2
 8014a0a:	b2ca      	uxtb	r2, r1
 8014a0c:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	1c5a      	adds	r2, r3, #1
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a1a:	1099      	asrs	r1, r3, #2
 8014a1c:	68fa      	ldr	r2, [r7, #12]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	3301      	adds	r3, #1
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	4413      	add	r3, r2
 8014a2a:	b2ca      	uxtb	r2, r1
 8014a2c:	701a      	strb	r2, [r3, #0]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8014a2e:	68fa      	ldr	r2, [r7, #12]
 8014a30:	4613      	mov	r3, r2
 8014a32:	005b      	lsls	r3, r3, #1
 8014a34:	4413      	add	r3, r2
 8014a36:	3301      	adds	r3, #1
 8014a38:	687a      	ldr	r2, [r7, #4]
 8014a3a:	4413      	add	r3, r2
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	b25a      	sxtb	r2, r3
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	1c99      	adds	r1, r3, #2
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014a4c:	011b      	lsls	r3, r3, #4
 8014a4e:	b25b      	sxtb	r3, r3
 8014a50:	4313      	orrs	r3, r2
 8014a52:	b259      	sxtb	r1, r3
 8014a54:	68fa      	ldr	r2, [r7, #12]
 8014a56:	4613      	mov	r3, r2
 8014a58:	005b      	lsls	r3, r3, #1
 8014a5a:	4413      	add	r3, r2
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	4413      	add	r3, r2
 8014a62:	b2ca      	uxtb	r2, r1
 8014a64:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	009b      	lsls	r3, r3, #2
 8014a6a:	1c9a      	adds	r2, r3, #2
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a72:	1119      	asrs	r1, r3, #4
 8014a74:	68fa      	ldr	r2, [r7, #12]
 8014a76:	4613      	mov	r3, r2
 8014a78:	005b      	lsls	r3, r3, #1
 8014a7a:	4413      	add	r3, r2
 8014a7c:	3302      	adds	r3, #2
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	4413      	add	r3, r2
 8014a82:	b2ca      	uxtb	r2, r1
 8014a84:	701a      	strb	r2, [r3, #0]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 8014a86:	68fa      	ldr	r2, [r7, #12]
 8014a88:	4613      	mov	r3, r2
 8014a8a:	005b      	lsls	r3, r3, #1
 8014a8c:	4413      	add	r3, r2
 8014a8e:	3302      	adds	r3, #2
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	4413      	add	r3, r2
 8014a94:	781b      	ldrb	r3, [r3, #0]
 8014a96:	b25a      	sxtb	r2, r3
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	1cd9      	adds	r1, r3, #3
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014aa4:	009b      	lsls	r3, r3, #2
 8014aa6:	b25b      	sxtb	r3, r3
 8014aa8:	4313      	orrs	r3, r2
 8014aaa:	b259      	sxtb	r1, r3
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	3302      	adds	r3, #2
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	4413      	add	r3, r2
 8014aba:	b2ca      	uxtb	r2, r1
 8014abc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N_/4; ++i) {
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	3301      	adds	r3, #1
 8014ac2:	60fb      	str	r3, [r7, #12]
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8014ac8:	f67f af7a 	bls.w	80149c0 <pqcrystals_dilithium2aes_r_ref_polyw1_pack+0x10>
  for(i = 0; i < N_/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 8014acc:	bf00      	nop
 8014ace:	bf00      	nop
 8014ad0:	3714      	adds	r7, #20
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr

08014ada <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand>:
*              or AES256CTR(rho,j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8014ada:	b580      	push	{r7, lr}
 8014adc:	b084      	sub	sp, #16
 8014ade:	af00      	add	r7, sp, #0
 8014ae0:	6078      	str	r0, [r7, #4]
 8014ae2:	6039      	str	r1, [r7, #0]
  unsigned int i, j;

  for(i = 0; i < K; ++i)
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	60fb      	str	r3, [r7, #12]
 8014ae8:	e01e      	b.n	8014b28 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x4e>
    for(j = 0; j < L; ++j)
 8014aea:	2300      	movs	r3, #0
 8014aec:	60bb      	str	r3, [r7, #8]
 8014aee:	e015      	b.n	8014b1c <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x42>
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	031b      	lsls	r3, r3, #12
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	441a      	add	r2, r3
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	029b      	lsls	r3, r3, #10
 8014afc:	18d0      	adds	r0, r2, r3
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	021b      	lsls	r3, r3, #8
 8014b04:	b29a      	uxth	r2, r3
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	4413      	add	r3, r2
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	461a      	mov	r2, r3
 8014b10:	6839      	ldr	r1, [r7, #0]
 8014b12:	f7fe fb4b 	bl	80131ac <pqcrystals_dilithium2aes_r_ref_poly_uniform>
    for(j = 0; j < L; ++j)
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	60bb      	str	r3, [r7, #8]
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	2b03      	cmp	r3, #3
 8014b20:	d9e6      	bls.n	8014af0 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x16>
  for(i = 0; i < K; ++i)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	3301      	adds	r3, #1
 8014b26:	60fb      	str	r3, [r7, #12]
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2b03      	cmp	r3, #3
 8014b2c:	d9dd      	bls.n	8014aea <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand+0x10>
}
 8014b2e:	bf00      	nop
 8014b30:	bf00      	nop
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}

08014b38 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery>:

void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b086      	sub	sp, #24
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	60f8      	str	r0, [r7, #12]
 8014b40:	60b9      	str	r1, [r7, #8]
 8014b42:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014b44:	2300      	movs	r3, #0
 8014b46:	617b      	str	r3, [r7, #20]
 8014b48:	e00e      	b.n	8014b68 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery+0x30>
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	029b      	lsls	r3, r3, #10
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	18d0      	adds	r0, r2, r3
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	031b      	lsls	r3, r3, #12
 8014b56:	68ba      	ldr	r2, [r7, #8]
 8014b58:	4413      	add	r3, r2
 8014b5a:	687a      	ldr	r2, [r7, #4]
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	f000 f8b9 	bl	8014cd4 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery>
  for(i = 0; i < K; ++i)
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	3301      	adds	r3, #1
 8014b66:	617b      	str	r3, [r7, #20]
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	2b03      	cmp	r3, #3
 8014b6c:	d9ed      	bls.n	8014b4a <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery+0x12>
}
 8014b6e:	bf00      	nop
 8014b70:	bf00      	nop
 8014b72:	3718      	adds	r7, #24
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <pqcrystals_dilithium2aes_r_ref_polyvecl_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/

void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[SEEDBYTES], uint16_t nonce) {
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b086      	sub	sp, #24
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	60f8      	str	r0, [r7, #12]
 8014b80:	60b9      	str	r1, [r7, #8]
 8014b82:	4613      	mov	r3, r2
 8014b84:	80fb      	strh	r3, [r7, #6]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014b86:	2300      	movs	r3, #0
 8014b88:	617b      	str	r3, [r7, #20]
 8014b8a:	e00d      	b.n	8014ba8 <pqcrystals_dilithium2aes_r_ref_polyvecl_uniform_eta+0x30>
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	029b      	lsls	r3, r3, #10
 8014b90:	68fa      	ldr	r2, [r7, #12]
 8014b92:	18d0      	adds	r0, r2, r3
 8014b94:	88fb      	ldrh	r3, [r7, #6]
 8014b96:	1c5a      	adds	r2, r3, #1
 8014b98:	80fa      	strh	r2, [r7, #6]
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	68b9      	ldr	r1, [r7, #8]
 8014b9e:	f7fe fc16 	bl	80133ce <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
  for(i = 0; i < L; ++i)
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	617b      	str	r3, [r7, #20]
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	2b03      	cmp	r3, #3
 8014bac:	d9ee      	bls.n	8014b8c <pqcrystals_dilithium2aes_r_ref_polyvecl_uniform_eta+0x14>
}
 8014bae:	bf00      	nop
 8014bb0:	bf00      	nop
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <pqcrystals_dilithium2aes_r_ref_polyvecl_reduce>:

  for(i = 0; i < L; ++i)
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
}

void polyvecl_reduce(polyvecl *v) {
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b084      	sub	sp, #16
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	60fb      	str	r3, [r7, #12]
 8014bc4:	e009      	b.n	8014bda <pqcrystals_dilithium2aes_r_ref_polyvecl_reduce+0x22>
    poly_reduce(&v->vec[i]);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	029b      	lsls	r3, r3, #10
 8014bca:	687a      	ldr	r2, [r7, #4]
 8014bcc:	4413      	add	r3, r2
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7fe f8e3 	bl	8012d9a <pqcrystals_dilithium2aes_r_ref_poly_reduce>
  for(i = 0; i < L; ++i)
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	60fb      	str	r3, [r7, #12]
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2b03      	cmp	r3, #3
 8014bde:	d9f2      	bls.n	8014bc6 <pqcrystals_dilithium2aes_r_ref_polyvecl_reduce+0xe>
}
 8014be0:	bf00      	nop
 8014be2:	bf00      	nop
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}

08014bea <pqcrystals_dilithium2aes_r_ref_polyvecl_add>:
*
* Arguments:   - polyvecl *w: pointer to output vector
*              - const polyvecl *u: pointer to first summand
*              - const polyvecl *v: pointer to second summand
**************************************************/
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b086      	sub	sp, #24
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	60f8      	str	r0, [r7, #12]
 8014bf2:	60b9      	str	r1, [r7, #8]
 8014bf4:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	617b      	str	r3, [r7, #20]
 8014bfa:	e011      	b.n	8014c20 <pqcrystals_dilithium2aes_r_ref_polyvecl_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	029b      	lsls	r3, r3, #10
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	18d0      	adds	r0, r2, r3
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	029b      	lsls	r3, r3, #10
 8014c08:	68ba      	ldr	r2, [r7, #8]
 8014c0a:	18d1      	adds	r1, r2, r3
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	029b      	lsls	r3, r3, #10
 8014c10:	687a      	ldr	r2, [r7, #4]
 8014c12:	4413      	add	r3, r2
 8014c14:	461a      	mov	r2, r3
 8014c16:	f7fe f8fc 	bl	8012e12 <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 0; i < L; ++i)
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	617b      	str	r3, [r7, #20]
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	2b03      	cmp	r3, #3
 8014c24:	d9ea      	bls.n	8014bfc <pqcrystals_dilithium2aes_r_ref_polyvecl_add+0x12>
}
 8014c26:	bf00      	nop
 8014c28:	bf00      	nop
 8014c2a:	3718      	adds	r7, #24
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}

08014c30 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void polyvecl_ntt(polyvecl *v) {
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014c38:	2300      	movs	r3, #0
 8014c3a:	60fb      	str	r3, [r7, #12]
 8014c3c:	e009      	b.n	8014c52 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt+0x22>
    poly_ntt(&v->vec[i]);
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	029b      	lsls	r3, r3, #10
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	4413      	add	r3, r2
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7fe f946 	bl	8012ed8 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  for(i = 0; i < L; ++i)
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	60fb      	str	r3, [r7, #12]
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2b03      	cmp	r3, #3
 8014c56:	d9f2      	bls.n	8014c3e <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt+0xe>
}
 8014c58:	bf00      	nop
 8014c5a:	bf00      	nop
 8014c5c:	3710      	adds	r7, #16
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <pqcrystals_dilithium2aes_r_ref_polyvecl_invntt_tomont>:

void polyvecl_invntt_tomont(polyvecl *v) {
 8014c62:	b580      	push	{r7, lr}
 8014c64:	b084      	sub	sp, #16
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	60fb      	str	r3, [r7, #12]
 8014c6e:	e009      	b.n	8014c84 <pqcrystals_dilithium2aes_r_ref_polyvecl_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	029b      	lsls	r3, r3, #10
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	4413      	add	r3, r2
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7fe f939 	bl	8012ef0 <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
  for(i = 0; i < L; ++i)
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	3301      	adds	r3, #1
 8014c82:	60fb      	str	r3, [r7, #12]
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	2b03      	cmp	r3, #3
 8014c88:	d9f2      	bls.n	8014c70 <pqcrystals_dilithium2aes_r_ref_polyvecl_invntt_tomont+0xe>
}
 8014c8a:	bf00      	nop
 8014c8c:	bf00      	nop
 8014c8e:	3710      	adds	r7, #16
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}

08014c94 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_poly_montgomery>:

void polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b086      	sub	sp, #24
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	617b      	str	r3, [r7, #20]
 8014ca4:	e00e      	b.n	8014cc4 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	029b      	lsls	r3, r3, #10
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	18d0      	adds	r0, r2, r3
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	029b      	lsls	r3, r3, #10
 8014cb2:	687a      	ldr	r2, [r7, #4]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	68b9      	ldr	r1, [r7, #8]
 8014cba:	f7fe f925 	bl	8012f08 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 0; i < L; ++i)
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	617b      	str	r3, [r7, #20]
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	2b03      	cmp	r3, #3
 8014cc8:	d9ed      	bls.n	8014ca6 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_poly_montgomery+0x12>
}
 8014cca:	bf00      	nop
 8014ccc:	bf00      	nop
 8014cce:	3718      	adds	r7, #24
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}

08014cd4 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void polyvecl_pointwise_acc_montgomery(poly *w,
                                       const polyvecl *u,
                                       const polyvecl *v)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014ce0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014ce4:	6018      	str	r0, [r3, #0]
 8014ce6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014cea:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8014cee:	6019      	str	r1, [r3, #0]
 8014cf0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014cf4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014cf8:	601a      	str	r2, [r3, #0]
  unsigned int i;
  poly t;

  poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 8014cfa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014cfe:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8014d02:	6819      	ldr	r1, [r3, #0]
 8014d04:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014d08:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014d0c:	681a      	ldr	r2, [r3, #0]
 8014d0e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014d12:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014d16:	6818      	ldr	r0, [r3, #0]
 8014d18:	f7fe f8f6 	bl	8012f08 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 1; i < L; ++i) {
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8014d22:	e029      	b.n	8014d78 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery+0xa4>
    poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
 8014d24:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014d28:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 8014d2c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014d30:	029b      	lsls	r3, r3, #10
 8014d32:	6812      	ldr	r2, [r2, #0]
 8014d34:	18d1      	adds	r1, r2, r3
 8014d36:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014d3a:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8014d3e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014d42:	029b      	lsls	r3, r3, #10
 8014d44:	6812      	ldr	r2, [r2, #0]
 8014d46:	441a      	add	r2, r3
 8014d48:	f107 0314 	add.w	r3, r7, #20
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7fe f8db 	bl	8012f08 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
    poly_add(w, w, &t);
 8014d52:	f107 0214 	add.w	r2, r7, #20
 8014d56:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014d5a:	f2a3 410c 	subw	r1, r3, #1036	; 0x40c
 8014d5e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8014d62:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014d66:	6809      	ldr	r1, [r1, #0]
 8014d68:	6818      	ldr	r0, [r3, #0]
 8014d6a:	f7fe f852 	bl	8012e12 <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 1; i < L; ++i) {
 8014d6e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014d72:	3301      	adds	r3, #1
 8014d74:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8014d78:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8014d7c:	2b03      	cmp	r3, #3
 8014d7e:	d9d1      	bls.n	8014d24 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_acc_montgomery+0x50>
  }
}
 8014d80:	bf00      	nop
 8014d82:	bf00      	nop
 8014d84:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8014d96:	2300      	movs	r3, #0
 8014d98:	60fb      	str	r3, [r7, #12]
 8014d9a:	e00f      	b.n	8014dbc <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	029b      	lsls	r3, r3, #10
 8014da0:	687a      	ldr	r2, [r7, #4]
 8014da2:	4413      	add	r3, r2
 8014da4:	6839      	ldr	r1, [r7, #0]
 8014da6:	4618      	mov	r0, r3
 8014da8:	f7fe f980 	bl	80130ac <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d001      	beq.n	8014db6 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x2a>
      return 1;
 8014db2:	2301      	movs	r3, #1
 8014db4:	e006      	b.n	8014dc4 <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x38>
  for(i = 0; i < L; ++i)
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	3301      	adds	r3, #1
 8014dba:	60fb      	str	r3, [r7, #12]
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2b03      	cmp	r3, #3
 8014dc0:	d9ec      	bls.n	8014d9c <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm+0x10>

  return 0;
 8014dc2:	2300      	movs	r3, #0
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <pqcrystals_dilithium2aes_r_ref_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[SEEDBYTES], uint16_t nonce) {
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b086      	sub	sp, #24
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	60f8      	str	r0, [r7, #12]
 8014dd4:	60b9      	str	r1, [r7, #8]
 8014dd6:	4613      	mov	r3, r2
 8014dd8:	80fb      	strh	r3, [r7, #6]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014dda:	2300      	movs	r3, #0
 8014ddc:	617b      	str	r3, [r7, #20]
 8014dde:	e00d      	b.n	8014dfc <pqcrystals_dilithium2aes_r_ref_polyveck_uniform_eta+0x30>
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	029b      	lsls	r3, r3, #10
 8014de4:	68fa      	ldr	r2, [r7, #12]
 8014de6:	18d0      	adds	r0, r2, r3
 8014de8:	88fb      	ldrh	r3, [r7, #6]
 8014dea:	1c5a      	adds	r2, r3, #1
 8014dec:	80fa      	strh	r2, [r7, #6]
 8014dee:	461a      	mov	r2, r3
 8014df0:	68b9      	ldr	r1, [r7, #8]
 8014df2:	f7fe faec 	bl	80133ce <pqcrystals_dilithium2aes_r_ref_poly_uniform_eta>
  for(i = 0; i < K; ++i)
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	3301      	adds	r3, #1
 8014dfa:	617b      	str	r3, [r7, #20]
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	2b03      	cmp	r3, #3
 8014e00:	d9ee      	bls.n	8014de0 <pqcrystals_dilithium2aes_r_ref_polyveck_uniform_eta+0x14>
}
 8014e02:	bf00      	nop
 8014e04:	bf00      	nop
 8014e06:	3718      	adds	r7, #24
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b084      	sub	sp, #16
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014e14:	2300      	movs	r3, #0
 8014e16:	60fb      	str	r3, [r7, #12]
 8014e18:	e009      	b.n	8014e2e <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0x22>
    poly_reduce(&v->vec[i]);
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	029b      	lsls	r3, r3, #10
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	4413      	add	r3, r2
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7fd ffb9 	bl	8012d9a <pqcrystals_dilithium2aes_r_ref_poly_reduce>
  for(i = 0; i < K; ++i)
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	60fb      	str	r3, [r7, #12]
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	2b03      	cmp	r3, #3
 8014e32:	d9f2      	bls.n	8014e1a <pqcrystals_dilithium2aes_r_ref_polyveck_reduce+0xe>
}
 8014e34:	bf00      	nop
 8014e36:	bf00      	nop
 8014e38:	3710      	adds	r7, #16
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}

08014e3e <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8014e3e:	b580      	push	{r7, lr}
 8014e40:	b084      	sub	sp, #16
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014e46:	2300      	movs	r3, #0
 8014e48:	60fb      	str	r3, [r7, #12]
 8014e4a:	e009      	b.n	8014e60 <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0x22>
    poly_caddq(&v->vec[i]);
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	029b      	lsls	r3, r3, #10
 8014e50:	687a      	ldr	r2, [r7, #4]
 8014e52:	4413      	add	r3, r2
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7fd ffbe 	bl	8012dd6 <pqcrystals_dilithium2aes_r_ref_poly_caddq>
  for(i = 0; i < K; ++i)
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	60fb      	str	r3, [r7, #12]
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2b03      	cmp	r3, #3
 8014e64:	d9f2      	bls.n	8014e4c <pqcrystals_dilithium2aes_r_ref_polyveck_caddq+0xe>
}
 8014e66:	bf00      	nop
 8014e68:	bf00      	nop
 8014e6a:	3710      	adds	r7, #16
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}

08014e70 <pqcrystals_dilithium2aes_r_ref_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	617b      	str	r3, [r7, #20]
 8014e80:	e011      	b.n	8014ea6 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	029b      	lsls	r3, r3, #10
 8014e86:	68fa      	ldr	r2, [r7, #12]
 8014e88:	18d0      	adds	r0, r2, r3
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	029b      	lsls	r3, r3, #10
 8014e8e:	68ba      	ldr	r2, [r7, #8]
 8014e90:	18d1      	adds	r1, r2, r3
 8014e92:	697b      	ldr	r3, [r7, #20]
 8014e94:	029b      	lsls	r3, r3, #10
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	4413      	add	r3, r2
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	f7fd ffb9 	bl	8012e12 <pqcrystals_dilithium2aes_r_ref_poly_add>
  for(i = 0; i < K; ++i)
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	617b      	str	r3, [r7, #20]
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	2b03      	cmp	r3, #3
 8014eaa:	d9ea      	bls.n	8014e82 <pqcrystals_dilithium2aes_r_ref_polyveck_add+0x12>
}
 8014eac:	bf00      	nop
 8014eae:	bf00      	nop
 8014eb0:	3718      	adds	r7, #24
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b086      	sub	sp, #24
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	60f8      	str	r0, [r7, #12]
 8014ebe:	60b9      	str	r1, [r7, #8]
 8014ec0:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	617b      	str	r3, [r7, #20]
 8014ec6:	e011      	b.n	8014eec <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x36>
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	029b      	lsls	r3, r3, #10
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	18d0      	adds	r0, r2, r3
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	029b      	lsls	r3, r3, #10
 8014ed4:	68ba      	ldr	r2, [r7, #8]
 8014ed6:	18d1      	adds	r1, r2, r3
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	029b      	lsls	r3, r3, #10
 8014edc:	687a      	ldr	r2, [r7, #4]
 8014ede:	4413      	add	r3, r2
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	f7fd ffb9 	bl	8012e58 <pqcrystals_dilithium2aes_r_ref_poly_sub>
  for(i = 0; i < K; ++i)
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	3301      	adds	r3, #1
 8014eea:	617b      	str	r3, [r7, #20]
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	2b03      	cmp	r3, #3
 8014ef0:	d9ea      	bls.n	8014ec8 <pqcrystals_dilithium2aes_r_ref_polyveck_sub+0x12>
}
 8014ef2:	bf00      	nop
 8014ef4:	bf00      	nop
 8014ef6:	3718      	adds	r7, #24
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}

08014efc <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_shiftl(polyveck *v) {
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014f04:	2300      	movs	r3, #0
 8014f06:	60fb      	str	r3, [r7, #12]
 8014f08:	e009      	b.n	8014f1e <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl+0x22>
    poly_shiftl(&v->vec[i]);
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	029b      	lsls	r3, r3, #10
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	4413      	add	r3, r2
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7fd ffc3 	bl	8012e9e <pqcrystals_dilithium2aes_r_ref_poly_shiftl>
  for(i = 0; i < K; ++i)
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	60fb      	str	r3, [r7, #12]
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	2b03      	cmp	r3, #3
 8014f22:	d9f2      	bls.n	8014f0a <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl+0xe>
}
 8014f24:	bf00      	nop
 8014f26:	bf00      	nop
 8014f28:	3710      	adds	r7, #16
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}

08014f2e <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 8014f2e:	b580      	push	{r7, lr}
 8014f30:	b084      	sub	sp, #16
 8014f32:	af00      	add	r7, sp, #0
 8014f34:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014f36:	2300      	movs	r3, #0
 8014f38:	60fb      	str	r3, [r7, #12]
 8014f3a:	e009      	b.n	8014f50 <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0x22>
    poly_ntt(&v->vec[i]);
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	029b      	lsls	r3, r3, #10
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	4413      	add	r3, r2
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7fd ffc7 	bl	8012ed8 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  for(i = 0; i < K; ++i)
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	60fb      	str	r3, [r7, #12]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2b03      	cmp	r3, #3
 8014f54:	d9f2      	bls.n	8014f3c <pqcrystals_dilithium2aes_r_ref_polyveck_ntt+0xe>
}
 8014f56:	bf00      	nop
 8014f58:	bf00      	nop
 8014f5a:	3710      	adds	r7, #16
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014f68:	2300      	movs	r3, #0
 8014f6a:	60fb      	str	r3, [r7, #12]
 8014f6c:	e009      	b.n	8014f82 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	029b      	lsls	r3, r3, #10
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	4413      	add	r3, r2
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7fd ffba 	bl	8012ef0 <pqcrystals_dilithium2aes_r_ref_poly_invntt_tomont>
  for(i = 0; i < K; ++i)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	3301      	adds	r3, #1
 8014f80:	60fb      	str	r3, [r7, #12]
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2b03      	cmp	r3, #3
 8014f86:	d9f2      	bls.n	8014f6e <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont+0xe>
}
 8014f88:	bf00      	nop
 8014f8a:	bf00      	nop
 8014f8c:	3710      	adds	r7, #16
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>:

void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8014f92:	b580      	push	{r7, lr}
 8014f94:	b086      	sub	sp, #24
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	60f8      	str	r0, [r7, #12]
 8014f9a:	60b9      	str	r1, [r7, #8]
 8014f9c:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	617b      	str	r3, [r7, #20]
 8014fa2:	e00e      	b.n	8014fc2 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	029b      	lsls	r3, r3, #10
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	18d0      	adds	r0, r2, r3
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	029b      	lsls	r3, r3, #10
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	68b9      	ldr	r1, [r7, #8]
 8014fb8:	f7fd ffa6 	bl	8012f08 <pqcrystals_dilithium2aes_r_ref_poly_pointwise_montgomery>
  for(i = 0; i < K; ++i)
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	617b      	str	r3, [r7, #20]
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	2b03      	cmp	r3, #3
 8014fc6:	d9ed      	bls.n	8014fa4 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery+0x12>
}
 8014fc8:	bf00      	nop
 8014fca:	bf00      	nop
 8014fcc:	3718      	adds	r7, #24
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}

08014fd2 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
 8014fd2:	b580      	push	{r7, lr}
 8014fd4:	b084      	sub	sp, #16
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
 8014fda:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8014fdc:	2300      	movs	r3, #0
 8014fde:	60fb      	str	r3, [r7, #12]
 8014fe0:	e00f      	b.n	8015002 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	029b      	lsls	r3, r3, #10
 8014fe6:	687a      	ldr	r2, [r7, #4]
 8014fe8:	4413      	add	r3, r2
 8014fea:	6839      	ldr	r1, [r7, #0]
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fe f85d 	bl	80130ac <pqcrystals_dilithium2aes_r_ref_poly_chknorm>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d001      	beq.n	8014ffc <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x2a>
      return 1;
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e006      	b.n	801500a <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x38>
  for(i = 0; i < K; ++i)
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	3301      	adds	r3, #1
 8015000:	60fb      	str	r3, [r7, #12]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	2b03      	cmp	r3, #3
 8015006:	d9ec      	bls.n	8014fe2 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm+0x10>

  return 0;
 8015008:	2300      	movs	r3, #0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}

08015012 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8015012:	b580      	push	{r7, lr}
 8015014:	b086      	sub	sp, #24
 8015016:	af00      	add	r7, sp, #0
 8015018:	60f8      	str	r0, [r7, #12]
 801501a:	60b9      	str	r1, [r7, #8]
 801501c:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 801501e:	2300      	movs	r3, #0
 8015020:	617b      	str	r3, [r7, #20]
 8015022:	e011      	b.n	8015048 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x36>
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	029b      	lsls	r3, r3, #10
 8015028:	68fa      	ldr	r2, [r7, #12]
 801502a:	18d0      	adds	r0, r2, r3
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	029b      	lsls	r3, r3, #10
 8015030:	68ba      	ldr	r2, [r7, #8]
 8015032:	18d1      	adds	r1, r2, r3
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	029b      	lsls	r3, r3, #10
 8015038:	687a      	ldr	r2, [r7, #4]
 801503a:	4413      	add	r3, r2
 801503c:	461a      	mov	r2, r3
 801503e:	f7fd ff99 	bl	8012f74 <pqcrystals_dilithium2aes_r_ref_poly_power2round>
  for(i = 0; i < K; ++i)
 8015042:	697b      	ldr	r3, [r7, #20]
 8015044:	3301      	adds	r3, #1
 8015046:	617b      	str	r3, [r7, #20]
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	2b03      	cmp	r3, #3
 801504c:	d9ea      	bls.n	8015024 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round+0x12>
}
 801504e:	bf00      	nop
 8015050:	bf00      	nop
 8015052:	3718      	adds	r7, #24
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}

08015058 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 8015058:	b580      	push	{r7, lr}
 801505a:	b086      	sub	sp, #24
 801505c:	af00      	add	r7, sp, #0
 801505e:	60f8      	str	r0, [r7, #12]
 8015060:	60b9      	str	r1, [r7, #8]
 8015062:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8015064:	2300      	movs	r3, #0
 8015066:	617b      	str	r3, [r7, #20]
 8015068:	e011      	b.n	801508e <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x36>
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	029b      	lsls	r3, r3, #10
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	18d0      	adds	r0, r2, r3
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	029b      	lsls	r3, r3, #10
 8015076:	68ba      	ldr	r2, [r7, #8]
 8015078:	18d1      	adds	r1, r2, r3
 801507a:	697b      	ldr	r3, [r7, #20]
 801507c:	029b      	lsls	r3, r3, #10
 801507e:	687a      	ldr	r2, [r7, #4]
 8015080:	4413      	add	r3, r2
 8015082:	461a      	mov	r2, r3
 8015084:	f7fd ff9a 	bl	8012fbc <pqcrystals_dilithium2aes_r_ref_poly_decompose>
  for(i = 0; i < K; ++i)
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	3301      	adds	r3, #1
 801508c:	617b      	str	r3, [r7, #20]
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	2b03      	cmp	r3, #3
 8015092:	d9ea      	bls.n	801506a <pqcrystals_dilithium2aes_r_ref_polyveck_decompose+0x12>
}
 8015094:	bf00      	nop
 8015096:	bf00      	nop
 8015098:	3718      	adds	r7, #24
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}

0801509e <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b086      	sub	sp, #24
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	60f8      	str	r0, [r7, #12]
 80150a6:	60b9      	str	r1, [r7, #8]
 80150a8:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 80150aa:	2300      	movs	r3, #0
 80150ac:	613b      	str	r3, [r7, #16]

  for(i = 0; i < K; ++i)
 80150ae:	2300      	movs	r3, #0
 80150b0:	617b      	str	r3, [r7, #20]
 80150b2:	e015      	b.n	80150e0 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x42>
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 80150b4:	697b      	ldr	r3, [r7, #20]
 80150b6:	029b      	lsls	r3, r3, #10
 80150b8:	68fa      	ldr	r2, [r7, #12]
 80150ba:	18d0      	adds	r0, r2, r3
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	029b      	lsls	r3, r3, #10
 80150c0:	68ba      	ldr	r2, [r7, #8]
 80150c2:	18d1      	adds	r1, r2, r3
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	029b      	lsls	r3, r3, #10
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	4413      	add	r3, r2
 80150cc:	461a      	mov	r2, r3
 80150ce:	f7fd ff99 	bl	8013004 <pqcrystals_dilithium2aes_r_ref_poly_make_hint>
 80150d2:	4602      	mov	r2, r0
 80150d4:	693b      	ldr	r3, [r7, #16]
 80150d6:	4413      	add	r3, r2
 80150d8:	613b      	str	r3, [r7, #16]
  for(i = 0; i < K; ++i)
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	3301      	adds	r3, #1
 80150de:	617b      	str	r3, [r7, #20]
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2b03      	cmp	r3, #3
 80150e4:	d9e6      	bls.n	80150b4 <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint+0x16>

  return s;
 80150e6:	693b      	ldr	r3, [r7, #16]
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3718      	adds	r7, #24
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b086      	sub	sp, #24
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	60b9      	str	r1, [r7, #8]
 80150fa:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80150fc:	2300      	movs	r3, #0
 80150fe:	617b      	str	r3, [r7, #20]
 8015100:	e011      	b.n	8015126 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint+0x36>
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 8015102:	697b      	ldr	r3, [r7, #20]
 8015104:	029b      	lsls	r3, r3, #10
 8015106:	68fa      	ldr	r2, [r7, #12]
 8015108:	18d0      	adds	r0, r2, r3
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	029b      	lsls	r3, r3, #10
 801510e:	68ba      	ldr	r2, [r7, #8]
 8015110:	18d1      	adds	r1, r2, r3
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	029b      	lsls	r3, r3, #10
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	4413      	add	r3, r2
 801511a:	461a      	mov	r2, r3
 801511c:	f7fd ffa1 	bl	8013062 <pqcrystals_dilithium2aes_r_ref_poly_use_hint>
  for(i = 0; i < K; ++i)
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	3301      	adds	r3, #1
 8015124:	617b      	str	r3, [r7, #20]
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	2b03      	cmp	r3, #3
 801512a:	d9ea      	bls.n	8015102 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint+0x12>
}
 801512c:	bf00      	nop
 801512e:	bf00      	nop
 8015130:	3718      	adds	r7, #24
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>:

	for (i = 0; i < K; ++i)
		poly_use_hint_r(&w->vec[i], &u->vec[i], &h[i*N_]);
}

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 8015136:	b580      	push	{r7, lr}
 8015138:	b084      	sub	sp, #16
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
 801513e:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8015140:	2300      	movs	r3, #0
 8015142:	60fb      	str	r3, [r7, #12]
 8015144:	e011      	b.n	801516a <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x34>
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 8015146:	68fa      	ldr	r2, [r7, #12]
 8015148:	4613      	mov	r3, r2
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	4413      	add	r3, r2
 801514e:	019b      	lsls	r3, r3, #6
 8015150:	461a      	mov	r2, r3
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	1898      	adds	r0, r3, r2
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	029b      	lsls	r3, r3, #10
 801515a:	683a      	ldr	r2, [r7, #0]
 801515c:	4413      	add	r3, r2
 801515e:	4619      	mov	r1, r3
 8015160:	f7ff fc26 	bl	80149b0 <pqcrystals_dilithium2aes_r_ref_polyw1_pack>
  for(i = 0; i < K; ++i)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	3301      	adds	r3, #1
 8015168:	60fb      	str	r3, [r7, #12]
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2b03      	cmp	r3, #3
 801516e:	d9ea      	bls.n	8015146 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1+0x10>
}
 8015170:	bf00      	nop
 8015172:	bf00      	nop
 8015174:	3710      	adds	r7, #16
 8015176:	46bd      	mov	sp, r7
 8015178:	bd80      	pop	{r7, pc}

0801517a <randombytes>:
#include <stdint.h>
#include <stdlib.h>
#include "randombytes.h"


void randombytes(RNG_HandleTypeDef *hrng, uint8_t *out, size_t outlen) {
 801517a:	b580      	push	{r7, lr}
 801517c:	b08a      	sub	sp, #40	; 0x28
 801517e:	af00      	add	r7, sp, #0
 8015180:	60f8      	str	r0, [r7, #12]
 8015182:	60b9      	str	r1, [r7, #8]
 8015184:	607a      	str	r2, [r7, #4]
	uint32_t rand_int = 0;
 8015186:	2300      	movs	r3, #0
 8015188:	613b      	str	r3, [r7, #16]
	uint8_t *rand_int_byte = (uint8_t*)&rand_int;
 801518a:	f107 0310 	add.w	r3, r7, #16
 801518e:	61fb      	str	r3, [r7, #28]
	uint32_t *int_out = (uint32_t*)out;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	61bb      	str	r3, [r7, #24]
	int i = 0;
 8015194:	2300      	movs	r3, #0
 8015196:	627b      	str	r3, [r7, #36]	; 0x24
	int j = 0;
 8015198:	2300      	movs	r3, #0
 801519a:	623b      	str	r3, [r7, #32]

	for(; i < outlen/4; i++){
 801519c:	e00a      	b.n	80151b4 <randombytes+0x3a>
		HAL_RNG_GenerateRandomNumber(hrng, &int_out[i]);
 801519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a0:	009b      	lsls	r3, r3, #2
 80151a2:	69ba      	ldr	r2, [r7, #24]
 80151a4:	4413      	add	r3, r2
 80151a6:	4619      	mov	r1, r3
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	f7f0 fa4e 	bl	800564a <HAL_RNG_GenerateRandomNumber>
	for(; i < outlen/4; i++){
 80151ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b0:	3301      	adds	r3, #1
 80151b2:	627b      	str	r3, [r7, #36]	; 0x24
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	089a      	lsrs	r2, r3, #2
 80151b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d8ef      	bhi.n	801519e <randombytes+0x24>
	}

	int rem = outlen % 4;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	f003 0303 	and.w	r3, r3, #3
 80151c4:	617b      	str	r3, [r7, #20]
	if (rem) {
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d018      	beq.n	80151fe <randombytes+0x84>
		HAL_RNG_GenerateRandomNumber(hrng, &rand_int);
 80151cc:	f107 0310 	add.w	r3, r7, #16
 80151d0:	4619      	mov	r1, r3
 80151d2:	68f8      	ldr	r0, [r7, #12]
 80151d4:	f7f0 fa39 	bl	800564a <HAL_RNG_GenerateRandomNumber>
		for(; j < rem; j++){
 80151d8:	e00d      	b.n	80151f6 <randombytes+0x7c>
			out[i+j] = rand_int_byte[j];
 80151da:	6a3b      	ldr	r3, [r7, #32]
 80151dc:	69fa      	ldr	r2, [r7, #28]
 80151de:	441a      	add	r2, r3
 80151e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151e2:	6a3b      	ldr	r3, [r7, #32]
 80151e4:	440b      	add	r3, r1
 80151e6:	4619      	mov	r1, r3
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	440b      	add	r3, r1
 80151ec:	7812      	ldrb	r2, [r2, #0]
 80151ee:	701a      	strb	r2, [r3, #0]
		for(; j < rem; j++){
 80151f0:	6a3b      	ldr	r3, [r7, #32]
 80151f2:	3301      	adds	r3, #1
 80151f4:	623b      	str	r3, [r7, #32]
 80151f6:	6a3a      	ldr	r2, [r7, #32]
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	429a      	cmp	r2, r3
 80151fc:	dbed      	blt.n	80151da <randombytes+0x60>
		}
	}
}
 80151fe:	bf00      	nop
 8015200:	3728      	adds	r7, #40	; 0x28
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}

08015206 <pqcrystals_dilithium2aes_r_ref_montgomery_reduce>:
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
 8015206:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801520a:	b086      	sub	sp, #24
 801520c:	af00      	add	r7, sp, #0
 801520e:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int32_t t;

  t = (int32_t)a*QINV;
 8015212:	68b8      	ldr	r0, [r7, #8]
 8015214:	4601      	mov	r1, r0
 8015216:	00c9      	lsls	r1, r1, #3
 8015218:	1a09      	subs	r1, r1, r0
 801521a:	0289      	lsls	r1, r1, #10
 801521c:	4401      	add	r1, r0
 801521e:	0349      	lsls	r1, r1, #13
 8015220:	4401      	add	r1, r0
 8015222:	6179      	str	r1, [r7, #20]
  t = (a - (int64_t)t*Q_) >> 32;
 8015224:	6979      	ldr	r1, [r7, #20]
 8015226:	17c8      	asrs	r0, r1, #31
 8015228:	460c      	mov	r4, r1
 801522a:	4605      	mov	r5, r0
 801522c:	e9c7 4500 	strd	r4, r5, [r7]
 8015230:	f04f 0000 	mov.w	r0, #0
 8015234:	f04f 0100 	mov.w	r1, #0
 8015238:	02a9      	lsls	r1, r5, #10
 801523a:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 801523e:	02a0      	lsls	r0, r4, #10
 8015240:	683e      	ldr	r6, [r7, #0]
 8015242:	1a32      	subs	r2, r6, r0
 8015244:	687e      	ldr	r6, [r7, #4]
 8015246:	eb66 0301 	sbc.w	r3, r6, r1
 801524a:	f04f 0000 	mov.w	r0, #0
 801524e:	f04f 0100 	mov.w	r1, #0
 8015252:	0359      	lsls	r1, r3, #13
 8015254:	ea41 41d2 	orr.w	r1, r1, r2, lsr #19
 8015258:	0350      	lsls	r0, r2, #13
 801525a:	4602      	mov	r2, r0
 801525c:	460b      	mov	r3, r1
 801525e:	ebb2 0a04 	subs.w	sl, r2, r4
 8015262:	eb63 0b05 	sbc.w	fp, r3, r5
 8015266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801526a:	eb1a 0802 	adds.w	r8, sl, r2
 801526e:	eb4b 0903 	adc.w	r9, fp, r3
 8015272:	f04f 0200 	mov.w	r2, #0
 8015276:	f04f 0300 	mov.w	r3, #0
 801527a:	464a      	mov	r2, r9
 801527c:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8015280:	4613      	mov	r3, r2
 8015282:	617b      	str	r3, [r7, #20]
  return t;
 8015284:	697b      	ldr	r3, [r7, #20]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3718      	adds	r7, #24
 801528a:	46bd      	mov	sp, r7
 801528c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015290:	4770      	bx	lr

08015292 <pqcrystals_dilithium2aes_r_ref_reduce32>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
 8015292:	b480      	push	{r7}
 8015294:	b085      	sub	sp, #20
 8015296:	af00      	add	r7, sp, #0
 8015298:	6078      	str	r0, [r7, #4]
  int32_t t;

  t = (a + (1 << 22)) >> 23;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 80152a0:	15db      	asrs	r3, r3, #23
 80152a2:	60fb      	str	r3, [r7, #12]
  t = a - t*Q_;
 80152a4:	68fa      	ldr	r2, [r7, #12]
 80152a6:	4613      	mov	r3, r2
 80152a8:	025b      	lsls	r3, r3, #9
 80152aa:	1a9b      	subs	r3, r3, r2
 80152ac:	029b      	lsls	r3, r3, #10
 80152ae:	4413      	add	r3, r2
 80152b0:	035b      	lsls	r3, r3, #13
 80152b2:	1a9b      	subs	r3, r3, r2
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	4413      	add	r3, r2
 80152b8:	60fb      	str	r3, [r7, #12]
  return t;
 80152ba:	68fb      	ldr	r3, [r7, #12]
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3714      	adds	r7, #20
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr

080152c8 <pqcrystals_dilithium2aes_r_ref_caddq>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
 80152c8:	b480      	push	{r7}
 80152ca:	b083      	sub	sp, #12
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  a += (a >> 31) & Q_;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	17da      	asrs	r2, r3, #31
 80152d4:	4b05      	ldr	r3, [pc, #20]	; (80152ec <pqcrystals_dilithium2aes_r_ref_caddq+0x24>)
 80152d6:	4013      	ands	r3, r2
 80152d8:	687a      	ldr	r2, [r7, #4]
 80152da:	4413      	add	r3, r2
 80152dc:	607b      	str	r3, [r7, #4]
  return a;
 80152de:	687b      	ldr	r3, [r7, #4]
}
 80152e0:	4618      	mov	r0, r3
 80152e2:	370c      	adds	r7, #12
 80152e4:	46bd      	mov	sp, r7
 80152e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ea:	4770      	bx	lr
 80152ec:	007fe001 	.word	0x007fe001

080152f0 <pqcrystals_dilithium2aes_r_ref_power2round>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
 80152f0:	b480      	push	{r7}
 80152f2:	b085      	sub	sp, #20
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8015300:	135b      	asrs	r3, r3, #13
 8015302:	60fb      	str	r3, [r7, #12]
  *a0 = a - (a1 << D);
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	035b      	lsls	r3, r3, #13
 8015308:	683a      	ldr	r2, [r7, #0]
 801530a:	1ad2      	subs	r2, r2, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	601a      	str	r2, [r3, #0]
  return a1;
 8015310:	68fb      	ldr	r3, [r7, #12]
}
 8015312:	4618      	mov	r0, r3
 8015314:	3714      	adds	r7, #20
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr
	...

08015320 <pqcrystals_dilithium2aes_r_ref_decompose>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
 8015320:	b480      	push	{r7}
 8015322:	b085      	sub	sp, #20
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1  = (a + 127) >> 7;
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	337f      	adds	r3, #127	; 0x7f
 801532e:	11db      	asrs	r3, r3, #7
 8015330:	60fb      	str	r3, [r7, #12]
#if GAMMA2 == (Q_-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q_-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f642 420b 	movw	r2, #11275	; 0x2c0b
 8015338:	fb02 f303 	mul.w	r3, r2, r3
 801533c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8015340:	161b      	asrs	r3, r3, #24
 8015342:	60fb      	str	r3, [r7, #12]
  a1 ^= ((43 - a1) >> 31) & a1;
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 801534a:	17db      	asrs	r3, r3, #31
 801534c:	43db      	mvns	r3, r3
 801534e:	68fa      	ldr	r2, [r7, #12]
 8015350:	4013      	ands	r3, r2
 8015352:	60fb      	str	r3, [r7, #12]
#endif

  *a0  = a - a1*2*GAMMA2;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	4a0e      	ldr	r2, [pc, #56]	; (8015390 <pqcrystals_dilithium2aes_r_ref_decompose+0x70>)
 8015358:	fb03 f202 	mul.w	r2, r3, r2
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	441a      	add	r2, r3
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	601a      	str	r2, [r3, #0]
  *a0 -= (((Q_-1)/2 - *a0) >> 31) & Q_;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681a      	ldr	r2, [r3, #0]
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f5c3 137f 	rsb	r3, r3, #4177920	; 0x3fc000
 8015370:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015374:	17d9      	asrs	r1, r3, #31
 8015376:	4b07      	ldr	r3, [pc, #28]	; (8015394 <pqcrystals_dilithium2aes_r_ref_decompose+0x74>)
 8015378:	400b      	ands	r3, r1
 801537a:	1ad2      	subs	r2, r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	601a      	str	r2, [r3, #0]
  return a1;
 8015380:	68fb      	ldr	r3, [r7, #12]
}
 8015382:	4618      	mov	r0, r3
 8015384:	3714      	adds	r7, #20
 8015386:	46bd      	mov	sp, r7
 8015388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538c:	4770      	bx	lr
 801538e:	bf00      	nop
 8015390:	fffd1800 	.word	0xfffd1800
 8015394:	007fe001 	.word	0x007fe001

08015398 <pqcrystals_dilithium2aes_r_ref_make_hint>:
* Arguments:   - int32_t a0: low bits of input element
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	6039      	str	r1, [r7, #0]
  if(a0 <= GAMMA2 || a0 > Q_ - GAMMA2 || (a0 == Q_ - GAMMA2 && a1 == 0))
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f5b3 3fba 	cmp.w	r3, #95232	; 0x17400
 80153a8:	dd0a      	ble.n	80153c0 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	4a09      	ldr	r2, [pc, #36]	; (80153d4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	dc06      	bgt.n	80153c0 <pqcrystals_dilithium2aes_r_ref_make_hint+0x28>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	4a07      	ldr	r2, [pc, #28]	; (80153d4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x3c>)
 80153b6:	4293      	cmp	r3, r2
 80153b8:	d104      	bne.n	80153c4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d101      	bne.n	80153c4 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2c>
    return 0;
 80153c0:	2300      	movs	r3, #0
 80153c2:	e000      	b.n	80153c6 <pqcrystals_dilithium2aes_r_ref_make_hint+0x2e>

  return 1;
 80153c4:	2301      	movs	r3, #1
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	370c      	adds	r7, #12
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr
 80153d2:	bf00      	nop
 80153d4:	007e6c01 	.word	0x007e6c01

080153d8 <pqcrystals_dilithium2aes_r_ref_use_hint>:
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  int32_t a0, a1;

  a1 = decompose(&a0, a);
 80153e2:	f107 0308 	add.w	r3, r7, #8
 80153e6:	6879      	ldr	r1, [r7, #4]
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7ff ff99 	bl	8015320 <pqcrystals_dilithium2aes_r_ref_decompose>
 80153ee:	60f8      	str	r0, [r7, #12]
  if(hint == 0)
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d101      	bne.n	80153fa <pqcrystals_dilithium2aes_r_ref_use_hint+0x22>
    return a1;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	e011      	b.n	801541e <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  if(a0 > 0)
    return (a1 + 1) & 15;
  else
    return (a1 - 1) & 15;
#elif GAMMA2 == (Q_-1)/88
  if(a0 > 0)
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	dd07      	ble.n	8015410 <pqcrystals_dilithium2aes_r_ref_use_hint+0x38>
    return (a1 == 43) ?  0 : a1 + 1;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2b2b      	cmp	r3, #43	; 0x2b
 8015404:	d002      	beq.n	801540c <pqcrystals_dilithium2aes_r_ref_use_hint+0x34>
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	3301      	adds	r3, #1
 801540a:	e008      	b.n	801541e <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 801540c:	2300      	movs	r3, #0
 801540e:	e006      	b.n	801541e <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
  else
    return (a1 ==  0) ? 43 : a1 - 1;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d002      	beq.n	801541c <pqcrystals_dilithium2aes_r_ref_use_hint+0x44>
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	3b01      	subs	r3, #1
 801541a:	e000      	b.n	801541e <pqcrystals_dilithium2aes_r_ref_use_hint+0x46>
 801541c:	232b      	movs	r3, #43	; 0x2b
#endif
}
 801541e:	4618      	mov	r0, r3
 8015420:	3710      	adds	r7, #16
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}

08015426 <pqcrystals_dilithium2aes_r_ref_keypair>:
#ifdef STM32WB55xx
int crypto_sign_keypair(RNG_HandleTypeDef * hrng, uint8_t * pk, uint8_t * sk)
#else
int crypto_sign_keypair(uint8_t * pk, uint8_t * sk)
#endif
{
 8015426:	b580      	push	{r7, lr}
 8015428:	f5ad 4d10 	sub.w	sp, sp, #36864	; 0x9000
 801542c:	b0b0      	sub	sp, #192	; 0xc0
 801542e:	af04      	add	r7, sp, #16
 8015430:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015434:	f843 0ca4 	str.w	r0, [r3, #-164]
 8015438:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801543c:	f843 1ca8 	str.w	r1, [r3, #-168]
 8015440:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015444:	f843 2cac 	str.w	r2, [r3, #-172]

  /* Get randomness for rho, rhoprime and key */
#if defined(CONST_RAND_SEED)
  randombytes2(seedbuf, SEEDBYTES);
#elif defined(STM32WB55xx)
  randombytes(hrng, seedbuf, SEEDBYTES);
 8015448:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 801544c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8015450:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015454:	4610      	mov	r0, r2
 8015456:	2220      	movs	r2, #32
 8015458:	4619      	mov	r1, r3
 801545a:	f850 0ca4 	ldr.w	r0, [r0, #-164]
 801545e:	f7ff fe8c 	bl	801517a <randombytes>
#else
  randombytes(seedbuf, SEEDBYTES);
#endif

  shake256(seedbuf, 3*SEEDBYTES, seedbuf, SEEDBYTES);
 8015462:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8015466:	f102 0244 	add.w	r2, r2, #68	; 0x44
 801546a:	f507 4010 	add.w	r0, r7, #36864	; 0x9000
 801546e:	f100 0044 	add.w	r0, r0, #68	; 0x44
 8015472:	2320      	movs	r3, #32
 8015474:	2160      	movs	r1, #96	; 0x60
 8015476:	f7fd f887 	bl	8012588 <pqcrystals_fips202_ref_shake256>
  rho = seedbuf;
 801547a:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 801547e:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8015482:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8015486:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 801548a:	6013      	str	r3, [r2, #0]
  rhoprime = seedbuf + SEEDBYTES;
 801548c:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8015490:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8015494:	3320      	adds	r3, #32
 8015496:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 801549a:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 801549e:	6013      	str	r3, [r2, #0]
  key = seedbuf + 2*SEEDBYTES;
 80154a0:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 80154a4:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80154a8:	3340      	adds	r3, #64	; 0x40
 80154aa:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 80154ae:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 80154b2:	6013      	str	r3, [r2, #0]
#ifdef TIME_BENCHMARK
    elapsed_time_start(KEYS_SMUL_TIMESTAMP);
#endif

  /* Expand matrix */
  polyvec_matrix_expand(mat, rho);
 80154b4:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 80154b8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80154bc:	3b1c      	subs	r3, #28
 80154be:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 80154c2:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80154c6:	6811      	ldr	r1, [r2, #0]
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7ff fb06 	bl	8014ada <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand>

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 80154ce:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80154d2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80154d6:	3b1c      	subs	r3, #28
 80154d8:	2200      	movs	r2, #0
 80154da:	f507 4110 	add.w	r1, r7, #36864	; 0x9000
 80154de:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 80154e2:	6809      	ldr	r1, [r1, #0]
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7ff fb47 	bl	8014b78 <pqcrystals_dilithium2aes_r_ref_polyvecl_uniform_eta>
  polyveck_uniform_eta(&s2, rhoprime, L);
 80154ea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80154ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80154f2:	3b1c      	subs	r3, #28
 80154f4:	2204      	movs	r2, #4
 80154f6:	f507 4110 	add.w	r1, r7, #36864	; 0x9000
 80154fa:	f101 01a8 	add.w	r1, r1, #168	; 0xa8
 80154fe:	6809      	ldr	r1, [r1, #0]
 8015500:	4618      	mov	r0, r3
 8015502:	f7ff fc63 	bl	8014dcc <pqcrystals_dilithium2aes_r_ref_polyveck_uniform_eta>

  /* Matrix-vector multiplication */
  s1hat = s1;
 8015506:	f507 5342 	add.w	r3, r7, #12416	; 0x3080
 801550a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801550e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8015512:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8015516:	3b9c      	subs	r3, #156	; 0x9c
 8015518:	f1a2 019c 	sub.w	r1, r2, #156	; 0x9c
 801551c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015520:	4618      	mov	r0, r3
 8015522:	f000 fdc3 	bl	80160ac <memcpy>
  polyvecl_ntt(&s1hat);
 8015526:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 801552a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801552e:	3b1c      	subs	r3, #28
 8015530:	4618      	mov	r0, r3
 8015532:	f7ff fb7d 	bl	8014c30 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 8015536:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 801553a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 801553e:	3a1c      	subs	r2, #28
 8015540:	f507 41a0 	add.w	r1, r7, #20480	; 0x5000
 8015544:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8015548:	391c      	subs	r1, #28
 801554a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801554e:	f103 0310 	add.w	r3, r3, #16
 8015552:	3b9c      	subs	r3, #156	; 0x9c
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff faef 	bl	8014b38 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&t1);
 801555a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801555e:	f103 0310 	add.w	r3, r3, #16
 8015562:	3b9c      	subs	r3, #156	; 0x9c
 8015564:	4618      	mov	r0, r3
 8015566:	f7ff fc51 	bl	8014e0c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  polyveck_invntt_tomont(&t1);
 801556a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801556e:	f103 0310 	add.w	r3, r3, #16
 8015572:	3b9c      	subs	r3, #156	; 0x9c
 8015574:	4618      	mov	r0, r3
 8015576:	f7ff fcf3 	bl	8014f60 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>

  /* Add error vector s2 */
  polyveck_add(&t1, &t1, &s2);
 801557a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801557e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8015582:	3a1c      	subs	r2, #28
 8015584:	f507 5185 	add.w	r1, r7, #4256	; 0x10a0
 8015588:	f101 0110 	add.w	r1, r1, #16
 801558c:	399c      	subs	r1, #156	; 0x9c
 801558e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8015592:	f103 0310 	add.w	r3, r3, #16
 8015596:	3b9c      	subs	r3, #156	; 0x9c
 8015598:	4618      	mov	r0, r3
 801559a:	f7ff fc69 	bl	8014e70 <pqcrystals_dilithium2aes_r_ref_polyveck_add>
#ifdef TIME_BENCHMARK
    elapsed_time_stop(KEYS_SMUL_TIMESTAMP);
#endif

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 801559e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80155a2:	f103 0310 	add.w	r3, r3, #16
 80155a6:	3b9c      	subs	r3, #156	; 0x9c
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7ff fc48 	bl	8014e3e <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 80155ae:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80155b2:	f102 0210 	add.w	r2, r2, #16
 80155b6:	3a9c      	subs	r2, #156	; 0x9c
 80155b8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80155bc:	399c      	subs	r1, #156	; 0x9c
 80155be:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80155c2:	f103 0310 	add.w	r3, r3, #16
 80155c6:	3b9c      	subs	r3, #156	; 0x9c
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7ff fd22 	bl	8015012 <pqcrystals_dilithium2aes_r_ref_polyveck_power2round>
  pack_pk(pk, rho, &t1);
 80155ce:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80155d2:	f103 0310 	add.w	r3, r3, #16
 80155d6:	3b9c      	subs	r3, #156	; 0x9c
 80155d8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80155dc:	4610      	mov	r0, r2
 80155de:	461a      	mov	r2, r3
 80155e0:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 80155e4:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 80155e8:	6819      	ldr	r1, [r3, #0]
 80155ea:	f850 0ca8 	ldr.w	r0, [r0, #-168]
 80155ee:	f7fd f915 	bl	801281c <pqcrystals_dilithium2aes_r_ref_pack_pk>

  /* Compute CRH(rho, t1) and write secret key */
  crh(tr, pk, CRYPTO_PUBLICKEYBYTES);
 80155f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80155f6:	461a      	mov	r2, r3
 80155f8:	f507 4010 	add.w	r0, r7, #36864	; 0x9000
 80155fc:	f100 0014 	add.w	r0, r0, #20
 8015600:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8015604:	f852 2ca8 	ldr.w	r2, [r2, #-168]
 8015608:	2130      	movs	r1, #48	; 0x30
 801560a:	f7fc ffbd 	bl	8012588 <pqcrystals_fips202_ref_shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 801560e:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8015612:	f102 0214 	add.w	r2, r2, #20
 8015616:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801561a:	4618      	mov	r0, r3
 801561c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8015620:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8015624:	3b1c      	subs	r3, #28
 8015626:	9302      	str	r3, [sp, #8]
 8015628:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 801562c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8015630:	3b1c      	subs	r3, #28
 8015632:	9301      	str	r3, [sp, #4]
 8015634:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015638:	3b9c      	subs	r3, #156	; 0x9c
 801563a:	9300      	str	r3, [sp, #0]
 801563c:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8015640:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	f507 4110 	add.w	r1, r7, #36864	; 0x9000
 801564a:	f101 01ac 	add.w	r1, r1, #172	; 0xac
 801564e:	6809      	ldr	r1, [r1, #0]
 8015650:	f850 0cac 	ldr.w	r0, [r0, #-172]
 8015654:	f7fd f950 	bl	80128f8 <pqcrystals_dilithium2aes_r_ref_pack_sk>

#endif

  return 0;
 8015658:	2300      	movs	r3, #0
}
 801565a:	4618      	mov	r0, r3
 801565c:	f507 4710 	add.w	r7, r7, #36864	; 0x9000
 8015660:	37b0      	adds	r7, #176	; 0xb0
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
	...

08015668 <pqcrystals_dilithium2aes_r_ref_signature>:
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
#endif
{
 8015668:	b590      	push	{r4, r7, lr}
 801566a:	f5ad 4d35 	sub.w	sp, sp, #46336	; 0xb500
 801566e:	b0b9      	sub	sp, #228	; 0xe4
 8015670:	af04      	add	r7, sp, #16
 8015672:	f507 64ba 	add.w	r4, r7, #1488	; 0x5d0
 8015676:	f2a4 54c4 	subw	r4, r4, #1476	; 0x5c4
 801567a:	6020      	str	r0, [r4, #0]
 801567c:	f507 60ba 	add.w	r0, r7, #1488	; 0x5d0
 8015680:	f5a0 60b9 	sub.w	r0, r0, #1480	; 0x5c8
 8015684:	6001      	str	r1, [r0, #0]
 8015686:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 801568a:	f2a1 51cc 	subw	r1, r1, #1484	; 0x5cc
 801568e:	600a      	str	r2, [r1, #0]
 8015690:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 8015694:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8015698:	6013      	str	r3, [r2, #0]

#else
  unsigned int n;
  uint8_t seedbuf[2*SEEDBYTES + 3*CRHBYTES];
  uint8_t *rho, *tr, *key, *mu, *rhoprime;
  uint16_t nonce = 0;
 801569a:	2300      	movs	r3, #0
 801569c:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80156a0:	f102 02ce 	add.w	r2, r2, #206	; 0xce
 80156a4:	8013      	strh	r3, [r2, #0]
  keccak_state state;

  polyvecl *y;
  //uint8_t s_rhoprime[SEEDBYTES];

  rho = seedbuf;
 80156a6:	f507 4334 	add.w	r3, r7, #46080	; 0xb400
 80156aa:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 80156ae:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80156b2:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 80156b6:	6013      	str	r3, [r2, #0]
  tr = rho + SEEDBYTES;
 80156b8:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80156bc:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	3320      	adds	r3, #32
 80156c4:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80156c8:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 80156cc:	6013      	str	r3, [r2, #0]
  key = tr + CRHBYTES;
 80156ce:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80156d2:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	3330      	adds	r3, #48	; 0x30
 80156da:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80156de:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 80156e2:	6013      	str	r3, [r2, #0]
  mu = key + SEEDBYTES;
 80156e4:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80156e8:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	3320      	adds	r3, #32
 80156f0:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80156f4:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 80156f8:	6013      	str	r3, [r2, #0]
  rhoprime = mu + CRHBYTES;
 80156fa:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80156fe:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	3330      	adds	r3, #48	; 0x30
 8015706:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 801570a:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 801570e:	6013      	str	r3, [r2, #0]
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 8015710:	f507 428a 	add.w	r2, r7, #17664	; 0x4500
 8015714:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8015718:	3a70      	subs	r2, #112	; 0x70
 801571a:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 801571e:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	9302      	str	r3, [sp, #8]
 8015726:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 801572a:	f103 0310 	add.w	r3, r3, #16
 801572e:	3bf0      	subs	r3, #240	; 0xf0
 8015730:	9301      	str	r3, [sp, #4]
 8015732:	f507 43ca 	add.w	r3, r7, #25856	; 0x6500
 8015736:	f103 0350 	add.w	r3, r3, #80	; 0x50
 801573a:	3b70      	subs	r3, #112	; 0x70
 801573c:	9300      	str	r3, [sp, #0]
 801573e:	4613      	mov	r3, r2
 8015740:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8015744:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 8015748:	6812      	ldr	r2, [r2, #0]
 801574a:	f507 4135 	add.w	r1, r7, #46336	; 0xb500
 801574e:	f101 01c4 	add.w	r1, r1, #196	; 0xc4
 8015752:	6809      	ldr	r1, [r1, #0]
 8015754:	f507 4035 	add.w	r0, r7, #46336	; 0xb500
 8015758:	f100 00c8 	add.w	r0, r0, #200	; 0xc8
 801575c:	6800      	ldr	r0, [r0, #0]
 801575e:	f7fd f962 	bl	8012a26 <pqcrystals_dilithium2aes_r_ref_unpack_sk>
  unpack_sk_r(rho, s_rhoprime, tr, key, &t0, sk);
  polyvecl_uniform_eta(&s1, s_rhoprime, 0);
  polyveck_uniform_eta(&s2, s_rhoprime, L);
   */
  /* Compute CRH(tr, msg) */
  shake256_init(&state);
 8015762:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015766:	3bc0      	subs	r3, #192	; 0xc0
 8015768:	4618      	mov	r0, r3
 801576a:	f7fc feae 	bl	80124ca <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, tr, CRHBYTES);
 801576e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015772:	3bc0      	subs	r3, #192	; 0xc0
 8015774:	2230      	movs	r2, #48	; 0x30
 8015776:	f507 4135 	add.w	r1, r7, #46336	; 0xb500
 801577a:	f101 01c4 	add.w	r1, r1, #196	; 0xc4
 801577e:	6809      	ldr	r1, [r1, #0]
 8015780:	4618      	mov	r0, r3
 8015782:	f7fc fead 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 8015786:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801578a:	f5a3 61ba 	sub.w	r1, r3, #1488	; 0x5d0
 801578e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015792:	3bc0      	subs	r3, #192	; 0xc0
 8015794:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8015798:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 801579c:	6812      	ldr	r2, [r2, #0]
 801579e:	6809      	ldr	r1, [r1, #0]
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7fc fe9d 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80157a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80157aa:	3bc0      	subs	r3, #192	; 0xc0
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7fc feaf 	bl	8012510 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
 80157b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80157b6:	3bc0      	subs	r3, #192	; 0xc0
 80157b8:	461a      	mov	r2, r3
 80157ba:	2130      	movs	r1, #48	; 0x30
 80157bc:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 80157c0:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 80157c4:	6818      	ldr	r0, [r3, #0]
 80157c6:	f7fc fec7 	bl	8012558 <pqcrystals_fips202_ref_shake256_squeeze>
  //crh(rhoprime, key, SEEDBYTES + CRHBYTES);
#endif

  /* Expand matrix and transform vectors */

  polyvecl_ntt(&s1);
 80157ca:	f507 43ca 	add.w	r3, r7, #25856	; 0x6500
 80157ce:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80157d2:	3b70      	subs	r3, #112	; 0x70
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7ff fa2b 	bl	8014c30 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt>
  polyveck_ntt(&s2);
 80157da:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80157de:	f103 0310 	add.w	r3, r3, #16
 80157e2:	3bf0      	subs	r3, #240	; 0xf0
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7ff fba2 	bl	8014f2e <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>
  polyveck_ntt(&t0);
 80157ea:	f507 438a 	add.w	r3, r7, #17664	; 0x4500
 80157ee:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80157f2:	3b70      	subs	r3, #112	; 0x70
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7ff fb9a 	bl	8014f2e <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>

#ifdef TIME_BENCHMARK
    elapsed_time_start(SIGN_YMUL_TIMESTAMP);
#endif

  polyvec_matrix_expand(mat, rho);
 80157fa:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 80157fe:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8015802:	3b70      	subs	r3, #112	; 0x70
 8015804:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8015808:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 801580c:	6811      	ldr	r1, [r2, #0]
 801580e:	4618      	mov	r0, r3
 8015810:	f7ff f963 	bl	8014ada <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand>
/*
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
  z = y;
  polyvecl_ntt(&z);
*/
	if(nonce == CONST_Y_NUM)
 8015814:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 8015818:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 801581c:	881b      	ldrh	r3, [r3, #0]
 801581e:	2b07      	cmp	r3, #7
 8015820:	d106      	bne.n	8015830 <pqcrystals_dilithium2aes_r_ref_signature+0x1c8>
		return nonce+1;
 8015822:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 8015826:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 801582a:	881b      	ldrh	r3, [r3, #0]
 801582c:	3301      	adds	r3, #1
 801582e:	e1a0      	b.n	8015b72 <pqcrystals_dilithium2aes_r_ref_signature+0x50a>
	y = &(ntt_y[nonce]);
 8015830:	4bd3      	ldr	r3, [pc, #844]	; (8015b80 <pqcrystals_dilithium2aes_r_ref_signature+0x518>)
 8015832:	681a      	ldr	r2, [r3, #0]
 8015834:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 8015838:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 801583c:	881b      	ldrh	r3, [r3, #0]
 801583e:	031b      	lsls	r3, r3, #12
 8015840:	4413      	add	r3, r2
 8015842:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8015846:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 801584a:	6013      	str	r3, [r2, #0]

  /* Matrix-vector multiplication */
  //polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
    polyvec_matrix_pointwise_montgomery(&w1, mat, y);
 801584c:	f507 41ea 	add.w	r1, r7, #29952	; 0x7500
 8015850:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8015854:	3970      	subs	r1, #112	; 0x70
 8015856:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 801585a:	f103 0310 	add.w	r3, r3, #16
 801585e:	3bf0      	subs	r3, #240	; 0xf0
 8015860:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 8015864:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8015868:	6812      	ldr	r2, [r2, #0]
 801586a:	4618      	mov	r0, r3
 801586c:	f7ff f964 	bl	8014b38 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&w1);
 8015870:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 8015874:	f103 0310 	add.w	r3, r3, #16
 8015878:	3bf0      	subs	r3, #240	; 0xf0
 801587a:	4618      	mov	r0, r3
 801587c:	f7ff fac6 	bl	8014e0c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 8015880:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 8015884:	f103 0310 	add.w	r3, r3, #16
 8015888:	3bf0      	subs	r3, #240	; 0xf0
 801588a:	4618      	mov	r0, r3
 801588c:	f7ff fb68 	bl	8014f60 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>
#ifdef TIME_BENCHMARK
    elapsed_time_stop(SIGN_YMUL_TIMESTAMP);
#endif

  /* Decompose w and call the random oracle */
  polyveck_caddq(&w1);
 8015890:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 8015894:	f103 0310 	add.w	r3, r3, #16
 8015898:	3bf0      	subs	r3, #240	; 0xf0
 801589a:	4618      	mov	r0, r3
 801589c:	f7ff facf 	bl	8014e3e <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 80158a0:	f507 5217 	add.w	r2, r7, #9664	; 0x25c0
 80158a4:	f102 0210 	add.w	r2, r2, #16
 80158a8:	3af0      	subs	r2, #240	; 0xf0
 80158aa:	f507 51ae 	add.w	r1, r7, #5568	; 0x15c0
 80158ae:	f101 0110 	add.w	r1, r1, #16
 80158b2:	39f0      	subs	r1, #240	; 0xf0
 80158b4:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80158b8:	f103 0310 	add.w	r3, r3, #16
 80158bc:	3bf0      	subs	r3, #240	; 0xf0
 80158be:	4618      	mov	r0, r3
 80158c0:	f7ff fbca 	bl	8015058 <pqcrystals_dilithium2aes_r_ref_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 80158c4:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80158c8:	f103 0310 	add.w	r3, r3, #16
 80158cc:	3bf0      	subs	r3, #240	; 0xf0
 80158ce:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 80158d2:	f5a2 62b9 	sub.w	r2, r2, #1480	; 0x5c8
 80158d6:	4619      	mov	r1, r3
 80158d8:	6810      	ldr	r0, [r2, #0]
 80158da:	f7ff fc2c 	bl	8015136 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>

  shake256_init(&state);
 80158de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80158e2:	3bc0      	subs	r3, #192	; 0xc0
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7fc fdf0 	bl	80124ca <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 80158ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80158ee:	3bc0      	subs	r3, #192	; 0xc0
 80158f0:	2230      	movs	r2, #48	; 0x30
 80158f2:	f507 4135 	add.w	r1, r7, #46336	; 0xb500
 80158f6:	f101 01bc 	add.w	r1, r1, #188	; 0xbc
 80158fa:	6809      	ldr	r1, [r1, #0]
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7fc fdef 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 8015902:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015906:	f5a3 61b9 	sub.w	r1, r3, #1480	; 0x5c8
 801590a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801590e:	3bc0      	subs	r3, #192	; 0xc0
 8015910:	f44f 7240 	mov.w	r2, #768	; 0x300
 8015914:	6809      	ldr	r1, [r1, #0]
 8015916:	4618      	mov	r0, r3
 8015918:	f7fc fde2 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 801591c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015920:	3bc0      	subs	r3, #192	; 0xc0
 8015922:	4618      	mov	r0, r3
 8015924:	f7fc fdf4 	bl	8012510 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(sig, SEEDBYTES, &state);
 8015928:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801592c:	3bc0      	subs	r3, #192	; 0xc0
 801592e:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 8015932:	f5a2 60b9 	sub.w	r0, r2, #1480	; 0x5c8
 8015936:	461a      	mov	r2, r3
 8015938:	2120      	movs	r1, #32
 801593a:	6800      	ldr	r0, [r0, #0]
 801593c:	f7fc fe0c 	bl	8012558 <pqcrystals_fips202_ref_shake256_squeeze>
  poly_challenge(&cp, sig);
 8015940:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015944:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 8015948:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801594c:	3bf0      	subs	r3, #240	; 0xf0
 801594e:	6811      	ldr	r1, [r2, #0]
 8015950:	4618      	mov	r0, r3
 8015952:	f7fd fdac 	bl	80134ae <pqcrystals_dilithium2aes_r_ref_poly_challenge>
  poly_ntt(&cp);
 8015956:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801595a:	3bf0      	subs	r3, #240	; 0xf0
 801595c:	4618      	mov	r0, r3
 801595e:	f7fd fabb 	bl	8012ed8 <pqcrystals_dilithium2aes_r_ref_poly_ntt>

#ifdef TIME_BENCHMARK
    elapsed_time_start(SIGN_Z_COMPUTE_TIMESTAMP);
#endif
  /* Compute z, reject if it reveals secret */
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 8015962:	f507 42ca 	add.w	r2, r7, #25856	; 0x6500
 8015966:	f102 0250 	add.w	r2, r2, #80	; 0x50
 801596a:	3a70      	subs	r2, #112	; 0x70
 801596c:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8015970:	39f0      	subs	r1, #240	; 0xf0
 8015972:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8015976:	f103 0350 	add.w	r3, r3, #80	; 0x50
 801597a:	3b70      	subs	r3, #112	; 0x70
 801597c:	4618      	mov	r0, r3
 801597e:	f7ff f989 	bl	8014c94 <pqcrystals_dilithium2aes_r_ref_polyvecl_pointwise_poly_montgomery>
  polyvecl_invntt_tomont(&z);
 8015982:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8015986:	f103 0350 	add.w	r3, r3, #80	; 0x50
 801598a:	3b70      	subs	r3, #112	; 0x70
 801598c:	4618      	mov	r0, r3
 801598e:	f7ff f968 	bl	8014c62 <pqcrystals_dilithium2aes_r_ref_polyvecl_invntt_tomont>

  y = &(std_y[nonce++]);
 8015992:	4b7c      	ldr	r3, [pc, #496]	; (8015b84 <pqcrystals_dilithium2aes_r_ref_signature+0x51c>)
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 801599a:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 801599e:	881b      	ldrh	r3, [r3, #0]
 80159a0:	1c59      	adds	r1, r3, #1
 80159a2:	f507 4035 	add.w	r0, r7, #46336	; 0xb500
 80159a6:	f100 00ce 	add.w	r0, r0, #206	; 0xce
 80159aa:	8001      	strh	r1, [r0, #0]
 80159ac:	031b      	lsls	r3, r3, #12
 80159ae:	4413      	add	r3, r2
 80159b0:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80159b4:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80159b8:	6013      	str	r3, [r2, #0]
  polyvecl_add(&z, &z, y);
 80159ba:	f507 41aa 	add.w	r1, r7, #21760	; 0x5500
 80159be:	f101 0150 	add.w	r1, r1, #80	; 0x50
 80159c2:	3970      	subs	r1, #112	; 0x70
 80159c4:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80159c8:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80159cc:	3b70      	subs	r3, #112	; 0x70
 80159ce:	f507 4235 	add.w	r2, r7, #46336	; 0xb500
 80159d2:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80159d6:	6812      	ldr	r2, [r2, #0]
 80159d8:	4618      	mov	r0, r3
 80159da:	f7ff f906 	bl	8014bea <pqcrystals_dilithium2aes_r_ref_polyvecl_add>
  //polyvecl_add(&z, &z, &y);
  polyvecl_reduce(&z);
 80159de:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80159e2:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80159e6:	3b70      	subs	r3, #112	; 0x70
 80159e8:	4618      	mov	r0, r3
 80159ea:	f7ff f8e5 	bl	8014bb8 <pqcrystals_dilithium2aes_r_ref_polyvecl_reduce>

#ifdef TIME_BENCHMARK
    elapsed_time_stop(SIGN_Z_COMPUTE_TIMESTAMP);
#endif
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 80159ee:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80159f2:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80159f6:	3b70      	subs	r3, #112	; 0x70
 80159f8:	4963      	ldr	r1, [pc, #396]	; (8015b88 <pqcrystals_dilithium2aes_r_ref_signature+0x520>)
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7ff f9c6 	bl	8014d8c <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>
 8015a00:	4603      	mov	r3, r0
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d000      	beq.n	8015a08 <pqcrystals_dilithium2aes_r_ref_signature+0x3a0>
    goto rej;
 8015a06:	e705      	b.n	8015814 <pqcrystals_dilithium2aes_r_ref_signature+0x1ac>
   * do not reveal secret information */

#ifdef TIME_BENCHMARK
    elapsed_time_start(SIGN_H_COMPUTE_TIMESTAMP);
#endif
  polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 8015a08:	f507 5257 	add.w	r2, r7, #13760	; 0x35c0
 8015a0c:	f102 0210 	add.w	r2, r2, #16
 8015a10:	3af0      	subs	r2, #240	; 0xf0
 8015a12:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8015a16:	39f0      	subs	r1, #240	; 0xf0
 8015a18:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015a1c:	3bf0      	subs	r3, #240	; 0xf0
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7ff fab7 	bl	8014f92 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 8015a24:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015a28:	3bf0      	subs	r3, #240	; 0xf0
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7ff fa98 	bl	8014f60 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>

#ifdef TIME_BENCHMARK
    elapsed_time_stop(SIGN_H_COMPUTE_TIMESTAMP);
#endif

  polyveck_sub(&w0, &w0, &h);
 8015a30:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 8015a34:	3af0      	subs	r2, #240	; 0xf0
 8015a36:	f507 51ae 	add.w	r1, r7, #5568	; 0x15c0
 8015a3a:	f101 0110 	add.w	r1, r1, #16
 8015a3e:	39f0      	subs	r1, #240	; 0xf0
 8015a40:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8015a44:	f103 0310 	add.w	r3, r3, #16
 8015a48:	3bf0      	subs	r3, #240	; 0xf0
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7ff fa33 	bl	8014eb6 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>
  polyveck_reduce(&w0);
 8015a50:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8015a54:	f103 0310 	add.w	r3, r3, #16
 8015a58:	3bf0      	subs	r3, #240	; 0xf0
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7ff f9d6 	bl	8014e0c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
 8015a60:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8015a64:	f103 0310 	add.w	r3, r3, #16
 8015a68:	3bf0      	subs	r3, #240	; 0xf0
 8015a6a:	4948      	ldr	r1, [pc, #288]	; (8015b8c <pqcrystals_dilithium2aes_r_ref_signature+0x524>)
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fab0 	bl	8014fd2 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 8015a72:	4603      	mov	r3, r0
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d000      	beq.n	8015a7a <pqcrystals_dilithium2aes_r_ref_signature+0x412>
    goto rej;
 8015a78:	e6cc      	b.n	8015814 <pqcrystals_dilithium2aes_r_ref_signature+0x1ac>

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 8015a7a:	f507 428a 	add.w	r2, r7, #17664	; 0x4500
 8015a7e:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8015a82:	3a70      	subs	r2, #112	; 0x70
 8015a84:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8015a88:	39f0      	subs	r1, #240	; 0xf0
 8015a8a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015a8e:	3bf0      	subs	r3, #240	; 0xf0
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7ff fa7e 	bl	8014f92 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 8015a96:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015a9a:	3bf0      	subs	r3, #240	; 0xf0
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7ff fa5f 	bl	8014f60 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>
  polyveck_reduce(&h);
 8015aa2:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015aa6:	3bf0      	subs	r3, #240	; 0xf0
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7ff f9af 	bl	8014e0c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  if(polyveck_chknorm(&h, GAMMA2))
 8015aae:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015ab2:	3bf0      	subs	r3, #240	; 0xf0
 8015ab4:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7ff fa8a 	bl	8014fd2 <pqcrystals_dilithium2aes_r_ref_polyveck_chknorm>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d000      	beq.n	8015ac6 <pqcrystals_dilithium2aes_r_ref_signature+0x45e>
    goto rej;
 8015ac4:	e6a6      	b.n	8015814 <pqcrystals_dilithium2aes_r_ref_signature+0x1ac>

  polyveck_add(&w0, &w0, &h);
 8015ac6:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 8015aca:	3af0      	subs	r2, #240	; 0xf0
 8015acc:	f507 51ae 	add.w	r1, r7, #5568	; 0x15c0
 8015ad0:	f101 0110 	add.w	r1, r1, #16
 8015ad4:	39f0      	subs	r1, #240	; 0xf0
 8015ad6:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8015ada:	f103 0310 	add.w	r3, r3, #16
 8015ade:	3bf0      	subs	r3, #240	; 0xf0
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7ff f9c5 	bl	8014e70 <pqcrystals_dilithium2aes_r_ref_polyveck_add>
  polyveck_caddq(&w0);
 8015ae6:	f507 53ae 	add.w	r3, r7, #5568	; 0x15c0
 8015aea:	f103 0310 	add.w	r3, r3, #16
 8015aee:	3bf0      	subs	r3, #240	; 0xf0
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7ff f9a4 	bl	8014e3e <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  n = polyveck_make_hint(&h, &w0, &w1);
 8015af6:	f507 5217 	add.w	r2, r7, #9664	; 0x25c0
 8015afa:	f102 0210 	add.w	r2, r2, #16
 8015afe:	3af0      	subs	r2, #240	; 0xf0
 8015b00:	f507 51ae 	add.w	r1, r7, #5568	; 0x15c0
 8015b04:	f101 0110 	add.w	r1, r1, #16
 8015b08:	39f0      	subs	r1, #240	; 0xf0
 8015b0a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015b0e:	3bf0      	subs	r3, #240	; 0xf0
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7ff fac4 	bl	801509e <pqcrystals_dilithium2aes_r_ref_polyveck_make_hint>
 8015b16:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 8015b1a:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8015b1e:	6018      	str	r0, [r3, #0]
  if(n > OMEGA)
 8015b20:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 8015b24:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	2b50      	cmp	r3, #80	; 0x50
 8015b2c:	d900      	bls.n	8015b30 <pqcrystals_dilithium2aes_r_ref_signature+0x4c8>
    goto rej;
 8015b2e:	e671      	b.n	8015814 <pqcrystals_dilithium2aes_r_ref_signature+0x1ac>

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
 8015b30:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015b34:	3bf0      	subs	r3, #240	; 0xf0
 8015b36:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8015b3a:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8015b3e:	3a70      	subs	r2, #112	; 0x70
 8015b40:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8015b44:	f5a1 61b9 	sub.w	r1, r1, #1480	; 0x5c8
 8015b48:	f507 60ba 	add.w	r0, r7, #1488	; 0x5d0
 8015b4c:	f5a0 60b9 	sub.w	r0, r0, #1480	; 0x5c8
 8015b50:	6809      	ldr	r1, [r1, #0]
 8015b52:	6800      	ldr	r0, [r0, #0]
 8015b54:	f7fc fffe 	bl	8012b54 <pqcrystals_dilithium2aes_r_ref_pack_sig>
  *siglen = CRYPTO_BYTES;
 8015b58:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8015b5c:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f640 1274 	movw	r2, #2420	; 0x974
 8015b66:	601a      	str	r2, [r3, #0]
#endif
	return nonce;
 8015b68:	f507 4335 	add.w	r3, r7, #46336	; 0xb500
 8015b6c:	f103 03ce 	add.w	r3, r3, #206	; 0xce
 8015b70:	881b      	ldrh	r3, [r3, #0]
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	f507 4735 	add.w	r7, r7, #46336	; 0xb500
 8015b78:	37d4      	adds	r7, #212	; 0xd4
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd90      	pop	{r4, r7, pc}
 8015b7e:	bf00      	nop
 8015b80:	2000e10c 	.word	0x2000e10c
 8015b84:	20007108 	.word	0x20007108
 8015b88:	0001ffb2 	.word	0x0001ffb2
 8015b8c:	000173b2 	.word	0x000173b2

08015b90 <pqcrystals_dilithium2aes_r_ref>:
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
#endif
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b088      	sub	sp, #32
 8015b94:	af02      	add	r7, sp, #8
 8015b96:	60f8      	str	r0, [r7, #12]
 8015b98:	60b9      	str	r1, [r7, #8]
 8015b9a:	607a      	str	r2, [r7, #4]
 8015b9c:	603b      	str	r3, [r7, #0]
  size_t i;
  int nonce = 0;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	613b      	str	r3, [r7, #16]
  for(i = 0; i < mlen; ++i)
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	617b      	str	r3, [r7, #20]
 8015ba6:	e011      	b.n	8015bcc <pqcrystals_dilithium2aes_r_ref+0x3c>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8015ba8:	6a3a      	ldr	r2, [r7, #32]
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	3b01      	subs	r3, #1
 8015bb0:	683a      	ldr	r2, [r7, #0]
 8015bb2:	441a      	add	r2, r3
 8015bb4:	6a39      	ldr	r1, [r7, #32]
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	1acb      	subs	r3, r1, r3
 8015bba:	f603 1373 	addw	r3, r3, #2419	; 0x973
 8015bbe:	68b9      	ldr	r1, [r7, #8]
 8015bc0:	440b      	add	r3, r1
 8015bc2:	7812      	ldrb	r2, [r2, #0]
 8015bc4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < mlen; ++i)
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	3301      	adds	r3, #1
 8015bca:	617b      	str	r3, [r7, #20]
 8015bcc:	697a      	ldr	r2, [r7, #20]
 8015bce:	6a3b      	ldr	r3, [r7, #32]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d3e9      	bcc.n	8015ba8 <pqcrystals_dilithium2aes_r_ref+0x18>
#ifdef STM32WB55xx
  nonce = crypto_sign_signature(hrng, sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8015bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bdc:	9301      	str	r3, [sp, #4]
 8015bde:	6a3b      	ldr	r3, [r7, #32]
 8015be0:	9300      	str	r3, [sp, #0]
 8015be2:	4613      	mov	r3, r2
 8015be4:	687a      	ldr	r2, [r7, #4]
 8015be6:	68b9      	ldr	r1, [r7, #8]
 8015be8:	68f8      	ldr	r0, [r7, #12]
 8015bea:	f7ff fd3d 	bl	8015668 <pqcrystals_dilithium2aes_r_ref_signature>
 8015bee:	6138      	str	r0, [r7, #16]
#else
  nonce = crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
#endif
  *smlen += mlen;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	6a3b      	ldr	r3, [r7, #32]
 8015bf6:	441a      	add	r2, r3
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	601a      	str	r2, [r3, #0]
  return nonce;
 8015bfc:	693b      	ldr	r3, [r7, #16]
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3718      	adds	r7, #24
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
	...

08015c08 <pqcrystals_dilithium2aes_r_ref_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
 8015c08:	b590      	push	{r4, r7, lr}
 8015c0a:	f5ad 4d08 	sub.w	sp, sp, #34816	; 0x8800
 8015c0e:	b09f      	sub	sp, #124	; 0x7c
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	f607 0478 	addw	r4, r7, #2168	; 0x878
 8015c16:	f6a4 046c 	subw	r4, r4, #2156	; 0x86c
 8015c1a:	6020      	str	r0, [r4, #0]
 8015c1c:	f607 0078 	addw	r0, r7, #2168	; 0x878
 8015c20:	f5a0 6007 	sub.w	r0, r0, #2160	; 0x870
 8015c24:	6001      	str	r1, [r0, #0]
 8015c26:	f607 0178 	addw	r1, r7, #2168	; 0x878
 8015c2a:	f6a1 0174 	subw	r1, r1, #2164	; 0x874
 8015c2e:	600a      	str	r2, [r1, #0]
 8015c30:	f607 0278 	addw	r2, r7, #2168	; 0x878
 8015c34:	f6a2 0278 	subw	r2, r2, #2168	; 0x878
 8015c38:	6013      	str	r3, [r2, #0]
  poly cp;
  polyvecl mat[K], z;
  polyveck t1, w1, h;
  keccak_state state;

  if(siglen != CRYPTO_BYTES)
 8015c3a:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8015c3e:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	f640 1274 	movw	r2, #2420	; 0x974
 8015c48:	4293      	cmp	r3, r2
 8015c4a:	d002      	beq.n	8015c52 <pqcrystals_dilithium2aes_r_ref_verify+0x4a>
    return -1;
 8015c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c50:	e181      	b.n	8015f56 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>

  unpack_pk(rho, &t1, pk);
 8015c52:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8015c56:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8015c5a:	3b14      	subs	r3, #20
 8015c5c:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 8015c60:	f100 0054 	add.w	r0, r0, #84	; 0x54
 8015c64:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 8015c68:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8015c6c:	6812      	ldr	r2, [r2, #0]
 8015c6e:	4619      	mov	r1, r3
 8015c70:	f7fc fe0b 	bl	801288a <pqcrystals_dilithium2aes_r_ref_unpack_pk>
  if(unpack_sig(c, &z, &h, sig))
 8015c74:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8015c78:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 8015c7c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8015c80:	3a94      	subs	r2, #148	; 0x94
 8015c82:	f507 5143 	add.w	r1, r7, #12480	; 0x30c0
 8015c86:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8015c8a:	3914      	subs	r1, #20
 8015c8c:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 8015c90:	f100 0004 	add.w	r0, r0, #4
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	f7fc ffd3 	bl	8012c40 <pqcrystals_dilithium2aes_r_ref_unpack_sig>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d002      	beq.n	8015ca6 <pqcrystals_dilithium2aes_r_ref_verify+0x9e>
    return -1;
 8015ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca4:	e157      	b.n	8015f56 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 8015ca6:	f507 5343 	add.w	r3, r7, #12480	; 0x30c0
 8015caa:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8015cae:	3b14      	subs	r3, #20
 8015cb0:	49ac      	ldr	r1, [pc, #688]	; (8015f64 <pqcrystals_dilithium2aes_r_ref_verify+0x35c>)
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7ff f86a 	bl	8014d8c <pqcrystals_dilithium2aes_r_ref_polyvecl_chknorm>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d002      	beq.n	8015cc4 <pqcrystals_dilithium2aes_r_ref_verify+0xbc>
    return -1;
 8015cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8015cc2:	e148      	b.n	8015f56 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>

  /* Compute CRH(CRH(rho, t1), msg) */
  crh(mu, pk, CRYPTO_PUBLICKEYBYTES);
 8015cc4:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 8015cc8:	f100 0024 	add.w	r0, r0, #36	; 0x24
 8015ccc:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8015cd0:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 8015cd4:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8015cd8:	6812      	ldr	r2, [r2, #0]
 8015cda:	2130      	movs	r1, #48	; 0x30
 8015cdc:	f7fc fc54 	bl	8012588 <pqcrystals_fips202_ref_shake256>
  shake256_init(&state);
 8015ce0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015ce4:	3b68      	subs	r3, #104	; 0x68
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7fc fbef 	bl	80124ca <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 8015cec:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 8015cf0:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8015cf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015cf8:	3b68      	subs	r3, #104	; 0x68
 8015cfa:	2230      	movs	r2, #48	; 0x30
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7fc fbef 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 8015d02:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8015d06:	f6a3 0278 	subw	r2, r3, #2168	; 0x878
 8015d0a:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8015d0e:	f6a3 0174 	subw	r1, r3, #2164	; 0x874
 8015d12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015d16:	3b68      	subs	r3, #104	; 0x68
 8015d18:	6812      	ldr	r2, [r2, #0]
 8015d1a:	6809      	ldr	r1, [r1, #0]
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7fc fbdf 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8015d22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015d26:	3b68      	subs	r3, #104	; 0x68
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7fc fbf1 	bl	8012510 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
 8015d2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015d32:	3b68      	subs	r3, #104	; 0x68
 8015d34:	f507 4005 	add.w	r0, r7, #34048	; 0x8500
 8015d38:	f100 0024 	add.w	r0, r0, #36	; 0x24
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	2130      	movs	r1, #48	; 0x30
 8015d40:	f7fc fc0a 	bl	8012558 <pqcrystals_fips202_ref_shake256_squeeze>

#ifdef TIME_BENCHMARK
    elapsed_time_start(VERIFY_RECONSTRUC_W1_TIMESTAMP);
#endif
  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  poly_challenge(&cp, c);
 8015d44:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8015d48:	f102 0204 	add.w	r2, r2, #4
 8015d4c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8015d50:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8015d54:	4611      	mov	r1, r2
 8015d56:	4618      	mov	r0, r3
 8015d58:	f7fd fba9 	bl	80134ae <pqcrystals_dilithium2aes_r_ref_poly_challenge>
  polyvec_matrix_expand(mat, rho);
 8015d5c:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8015d60:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8015d64:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8015d68:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8015d6c:	3b14      	subs	r3, #20
 8015d6e:	4611      	mov	r1, r2
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7fe feb2 	bl	8014ada <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_expand>

  polyvecl_ntt(&z);
 8015d76:	f507 5343 	add.w	r3, r7, #12480	; 0x30c0
 8015d7a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8015d7e:	3b14      	subs	r3, #20
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7fe ff55 	bl	8014c30 <pqcrystals_dilithium2aes_r_ref_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8015d86:	f507 5243 	add.w	r2, r7, #12480	; 0x30c0
 8015d8a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8015d8e:	3a14      	subs	r2, #20
 8015d90:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8015d94:	f101 0178 	add.w	r1, r1, #120	; 0x78
 8015d98:	3914      	subs	r1, #20
 8015d9a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8015d9e:	f103 0318 	add.w	r3, r3, #24
 8015da2:	3b14      	subs	r3, #20
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7fe fec7 	bl	8014b38 <pqcrystals_dilithium2aes_r_ref_polyvec_matrix_pointwise_montgomery>

  poly_ntt(&cp);
 8015daa:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8015dae:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7fd f890 	bl	8012ed8 <pqcrystals_dilithium2aes_r_ref_poly_ntt>
  polyveck_shiftl(&t1);
 8015db8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8015dbc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8015dc0:	3b14      	subs	r3, #20
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7ff f89a 	bl	8014efc <pqcrystals_dilithium2aes_r_ref_polyveck_shiftl>
  polyveck_ntt(&t1);
 8015dc8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8015dcc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8015dd0:	3b14      	subs	r3, #20
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7ff f8ab 	bl	8014f2e <pqcrystals_dilithium2aes_r_ref_polyveck_ntt>
  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 8015dd8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8015ddc:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8015de0:	3a14      	subs	r2, #20
 8015de2:	f507 4100 	add.w	r1, r7, #32768	; 0x8000
 8015de6:	f101 01e4 	add.w	r1, r1, #228	; 0xe4
 8015dea:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8015dee:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8015df2:	3b14      	subs	r3, #20
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7ff f8cc 	bl	8014f92 <pqcrystals_dilithium2aes_r_ref_polyveck_pointwise_poly_montgomery>

  polyveck_sub(&w1, &w1, &t1);
 8015dfa:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8015dfe:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8015e02:	3a14      	subs	r2, #20
 8015e04:	f507 5187 	add.w	r1, r7, #4320	; 0x10e0
 8015e08:	f101 0118 	add.w	r1, r1, #24
 8015e0c:	3914      	subs	r1, #20
 8015e0e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8015e12:	f103 0318 	add.w	r3, r3, #24
 8015e16:	3b14      	subs	r3, #20
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7ff f84c 	bl	8014eb6 <pqcrystals_dilithium2aes_r_ref_polyveck_sub>
  polyveck_reduce(&w1);
 8015e1e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8015e22:	f103 0318 	add.w	r3, r3, #24
 8015e26:	3b14      	subs	r3, #20
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7fe ffef 	bl	8014e0c <pqcrystals_dilithium2aes_r_ref_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 8015e2e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8015e32:	f103 0318 	add.w	r3, r3, #24
 8015e36:	3b14      	subs	r3, #20
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f7ff f891 	bl	8014f60 <pqcrystals_dilithium2aes_r_ref_polyveck_invntt_tomont>

  /* Reconstruct w1 */
  polyveck_caddq(&w1);
 8015e3e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8015e42:	f103 0318 	add.w	r3, r3, #24
 8015e46:	3b14      	subs	r3, #20
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7fe fff8 	bl	8014e3e <pqcrystals_dilithium2aes_r_ref_polyveck_caddq>
  polyveck_use_hint(&w1, &w1, &h);
 8015e4e:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8015e52:	3a94      	subs	r2, #148	; 0x94
 8015e54:	f507 5187 	add.w	r1, r7, #4320	; 0x10e0
 8015e58:	f101 0118 	add.w	r1, r1, #24
 8015e5c:	3914      	subs	r1, #20
 8015e5e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8015e62:	f103 0318 	add.w	r3, r3, #24
 8015e66:	3b14      	subs	r3, #20
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7ff f941 	bl	80150f0 <pqcrystals_dilithium2aes_r_ref_polyveck_use_hint>
  polyveck_pack_w1(buf, &w1);
 8015e6e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8015e72:	f103 0318 	add.w	r3, r3, #24
 8015e76:	3b14      	subs	r3, #20
 8015e78:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8015e7c:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8015e80:	4619      	mov	r1, r3
 8015e82:	4610      	mov	r0, r2
 8015e84:	f7ff f957 	bl	8015136 <pqcrystals_dilithium2aes_r_ref_polyveck_pack_w1>
#ifdef TIME_BENCHMARK
    elapsed_time_stop(VERIFY_RECONSTRUC_W1_TIMESTAMP);
#endif

  /* Call random oracle and verify challenge */
  shake256_init(&state);
 8015e88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015e8c:	3b68      	subs	r3, #104	; 0x68
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7fc fb1b 	bl	80124ca <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 8015e94:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 8015e98:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8015e9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015ea0:	3b68      	subs	r3, #104	; 0x68
 8015ea2:	2230      	movs	r2, #48	; 0x30
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7fc fb1b 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
 8015eaa:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 8015eae:	f101 0174 	add.w	r1, r1, #116	; 0x74
 8015eb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015eb6:	3b68      	subs	r3, #104	; 0x68
 8015eb8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7fc fb0f 	bl	80124e0 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8015ec2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015ec6:	3b68      	subs	r3, #104	; 0x68
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7fc fb21 	bl	8012510 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(c2, SEEDBYTES, &state);
 8015ece:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015ed2:	3b68      	subs	r3, #104	; 0x68
 8015ed4:	f507 4004 	add.w	r0, r7, #33792	; 0x8400
 8015ed8:	f100 00e4 	add.w	r0, r0, #228	; 0xe4
 8015edc:	461a      	mov	r2, r3
 8015ede:	2120      	movs	r1, #32
 8015ee0:	f7fc fb3a 	bl	8012558 <pqcrystals_fips202_ref_shake256_squeeze>
  for (i = 0; i < SEEDBYTES; ++i) {
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 8015eea:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8015eee:	6013      	str	r3, [r2, #0]
 8015ef0:	e029      	b.n	8015f46 <pqcrystals_dilithium2aes_r_ref_verify+0x33e>
      if (c[i] != c2[i])
 8015ef2:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 8015ef6:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8015efa:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8015efe:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 8015f02:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	4413      	add	r3, r2
 8015f0a:	781a      	ldrb	r2, [r3, #0]
 8015f0c:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 8015f10:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8015f14:	f5a3 7165 	sub.w	r1, r3, #916	; 0x394
 8015f18:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 8015f1c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	440b      	add	r3, r1
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d002      	beq.n	8015f30 <pqcrystals_dilithium2aes_r_ref_verify+0x328>
          return -1;
 8015f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f2e:	e012      	b.n	8015f56 <pqcrystals_dilithium2aes_r_ref_verify+0x34e>
  for (i = 0; i < SEEDBYTES; ++i) {
 8015f30:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 8015f34:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	3301      	adds	r3, #1
 8015f3c:	f507 4208 	add.w	r2, r7, #34816	; 0x8800
 8015f40:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8015f44:	6013      	str	r3, [r2, #0]
 8015f46:	f507 4308 	add.w	r3, r7, #34816	; 0x8800
 8015f4a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	2b1f      	cmp	r3, #31
 8015f52:	d9ce      	bls.n	8015ef2 <pqcrystals_dilithium2aes_r_ref_verify+0x2ea>
  }

#endif

  return 0;
 8015f54:	2300      	movs	r3, #0
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	f507 4708 	add.w	r7, r7, #34816	; 0x8800
 8015f5c:	377c      	adds	r7, #124	; 0x7c
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd90      	pop	{r4, r7, pc}
 8015f62:	bf00      	nop
 8015f64:	0001ffb2 	.word	0x0001ffb2

08015f68 <pqcrystals_dilithium2aes_r_ref_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b088      	sub	sp, #32
 8015f6c:	af02      	add	r7, sp, #8
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	603b      	str	r3, [r7, #0]
  size_t i;
  int err_code = -1;
 8015f76:	f04f 33ff 	mov.w	r3, #4294967295
 8015f7a:	613b      	str	r3, [r7, #16]

  if(smlen < CRYPTO_BYTES)
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	f640 1273 	movw	r2, #2419	; 0x973
 8015f82:	4293      	cmp	r3, r2
 8015f84:	d92c      	bls.n	8015fe0 <pqcrystals_dilithium2aes_r_ref_open+0x78>
    goto badsig;

  *mlen = smlen - CRYPTO_BYTES;
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	f6a3 1274 	subw	r2, r3, #2420	; 0x974
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	601a      	str	r2, [r3, #0]
  err_code = crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	6819      	ldr	r1, [r3, #0]
 8015f9a:	6a3b      	ldr	r3, [r7, #32]
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	460b      	mov	r3, r1
 8015fa0:	f640 1174 	movw	r1, #2420	; 0x974
 8015fa4:	6878      	ldr	r0, [r7, #4]
 8015fa6:	f7ff fe2f 	bl	8015c08 <pqcrystals_dilithium2aes_r_ref_verify>
 8015faa:	6138      	str	r0, [r7, #16]
  if(err_code)
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d118      	bne.n	8015fe4 <pqcrystals_dilithium2aes_r_ref_open+0x7c>
    goto badsig;
  else {
    /* All good, copy msg, return 0 */
    for(i = 0; i < *mlen; ++i)
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	617b      	str	r3, [r7, #20]
 8015fb6:	e00c      	b.n	8015fd2 <pqcrystals_dilithium2aes_r_ref_open+0x6a>
      m[i] = sm[CRYPTO_BYTES + i];
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	f603 1374 	addw	r3, r3, #2420	; 0x974
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	441a      	add	r2, r3
 8015fc2:	68f9      	ldr	r1, [r7, #12]
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	440b      	add	r3, r1
 8015fc8:	7812      	ldrb	r2, [r2, #0]
 8015fca:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < *mlen; ++i)
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	617b      	str	r3, [r7, #20]
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	697a      	ldr	r2, [r7, #20]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d3ed      	bcc.n	8015fb8 <pqcrystals_dilithium2aes_r_ref_open+0x50>
    return 0;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	e016      	b.n	801600e <pqcrystals_dilithium2aes_r_ref_open+0xa6>
    goto badsig;
 8015fe0:	bf00      	nop
 8015fe2:	e000      	b.n	8015fe6 <pqcrystals_dilithium2aes_r_ref_open+0x7e>
    goto badsig;
 8015fe4:	bf00      	nop
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8015fec:	601a      	str	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 8015fee:	2300      	movs	r3, #0
 8015ff0:	617b      	str	r3, [r7, #20]
 8015ff2:	e007      	b.n	8016004 <pqcrystals_dilithium2aes_r_ref_open+0x9c>
    m[i] = 0;
 8015ff4:	68fa      	ldr	r2, [r7, #12]
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smlen; ++i)
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	3301      	adds	r3, #1
 8016002:	617b      	str	r3, [r7, #20]
 8016004:	697a      	ldr	r2, [r7, #20]
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	429a      	cmp	r2, r3
 801600a:	d3f3      	bcc.n	8015ff4 <pqcrystals_dilithium2aes_r_ref_open+0x8c>

  return err_code;
 801600c:	693b      	ldr	r3, [r7, #16]
}
 801600e:	4618      	mov	r0, r3
 8016010:	3718      	adds	r7, #24
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <pqcrystals_dilithium2aes_r_ref_dilithium_aes256ctr_init>:
#include "aes256ctr.h"

void dilithium_aes256ctr_init(aes256ctr_ctx *state,
                              const uint8_t key[32],
                              uint16_t nonce)
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b088      	sub	sp, #32
 801601a:	af00      	add	r7, sp, #0
 801601c:	60f8      	str	r0, [r7, #12]
 801601e:	60b9      	str	r1, [r7, #8]
 8016020:	4613      	mov	r3, r2
 8016022:	80fb      	strh	r3, [r7, #6]
  uint8_t expnonce[12] = {0};
 8016024:	2300      	movs	r3, #0
 8016026:	617b      	str	r3, [r7, #20]
 8016028:	f107 0318 	add.w	r3, r7, #24
 801602c:	2200      	movs	r2, #0
 801602e:	601a      	str	r2, [r3, #0]
 8016030:	605a      	str	r2, [r3, #4]
  expnonce[0] = nonce;
 8016032:	88fb      	ldrh	r3, [r7, #6]
 8016034:	b2db      	uxtb	r3, r3
 8016036:	753b      	strb	r3, [r7, #20]
  expnonce[1] = nonce >> 8;
 8016038:	88fb      	ldrh	r3, [r7, #6]
 801603a:	0a1b      	lsrs	r3, r3, #8
 801603c:	b29b      	uxth	r3, r3
 801603e:	b2db      	uxtb	r3, r3
 8016040:	757b      	strb	r3, [r7, #21]
  aes256ctr_init(state, key, expnonce);
 8016042:	f107 0314 	add.w	r3, r7, #20
 8016046:	461a      	mov	r2, r3
 8016048:	68b9      	ldr	r1, [r7, #8]
 801604a:	68f8      	ldr	r0, [r7, #12]
 801604c:	f7f8 fd6a 	bl	800eb24 <pqcrystals_aes256ctr_ref_init>
}
 8016050:	bf00      	nop
 8016052:	3720      	adds	r7, #32
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <__errno>:
 8016058:	4b01      	ldr	r3, [pc, #4]	; (8016060 <__errno+0x8>)
 801605a:	6818      	ldr	r0, [r3, #0]
 801605c:	4770      	bx	lr
 801605e:	bf00      	nop
 8016060:	2000e110 	.word	0x2000e110

08016064 <__libc_init_array>:
 8016064:	b570      	push	{r4, r5, r6, lr}
 8016066:	4d0d      	ldr	r5, [pc, #52]	; (801609c <__libc_init_array+0x38>)
 8016068:	4c0d      	ldr	r4, [pc, #52]	; (80160a0 <__libc_init_array+0x3c>)
 801606a:	1b64      	subs	r4, r4, r5
 801606c:	10a4      	asrs	r4, r4, #2
 801606e:	2600      	movs	r6, #0
 8016070:	42a6      	cmp	r6, r4
 8016072:	d109      	bne.n	8016088 <__libc_init_array+0x24>
 8016074:	4d0b      	ldr	r5, [pc, #44]	; (80160a4 <__libc_init_array+0x40>)
 8016076:	4c0c      	ldr	r4, [pc, #48]	; (80160a8 <__libc_init_array+0x44>)
 8016078:	f001 f832 	bl	80170e0 <_init>
 801607c:	1b64      	subs	r4, r4, r5
 801607e:	10a4      	asrs	r4, r4, #2
 8016080:	2600      	movs	r6, #0
 8016082:	42a6      	cmp	r6, r4
 8016084:	d105      	bne.n	8016092 <__libc_init_array+0x2e>
 8016086:	bd70      	pop	{r4, r5, r6, pc}
 8016088:	f855 3b04 	ldr.w	r3, [r5], #4
 801608c:	4798      	blx	r3
 801608e:	3601      	adds	r6, #1
 8016090:	e7ee      	b.n	8016070 <__libc_init_array+0xc>
 8016092:	f855 3b04 	ldr.w	r3, [r5], #4
 8016096:	4798      	blx	r3
 8016098:	3601      	adds	r6, #1
 801609a:	e7f2      	b.n	8016082 <__libc_init_array+0x1e>
 801609c:	08017a20 	.word	0x08017a20
 80160a0:	08017a20 	.word	0x08017a20
 80160a4:	08017a20 	.word	0x08017a20
 80160a8:	08017a24 	.word	0x08017a24

080160ac <memcpy>:
 80160ac:	440a      	add	r2, r1
 80160ae:	4291      	cmp	r1, r2
 80160b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80160b4:	d100      	bne.n	80160b8 <memcpy+0xc>
 80160b6:	4770      	bx	lr
 80160b8:	b510      	push	{r4, lr}
 80160ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160c2:	4291      	cmp	r1, r2
 80160c4:	d1f9      	bne.n	80160ba <memcpy+0xe>
 80160c6:	bd10      	pop	{r4, pc}

080160c8 <memset>:
 80160c8:	4402      	add	r2, r0
 80160ca:	4603      	mov	r3, r0
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d100      	bne.n	80160d2 <memset+0xa>
 80160d0:	4770      	bx	lr
 80160d2:	f803 1b01 	strb.w	r1, [r3], #1
 80160d6:	e7f9      	b.n	80160cc <memset+0x4>

080160d8 <iprintf>:
 80160d8:	b40f      	push	{r0, r1, r2, r3}
 80160da:	4b0a      	ldr	r3, [pc, #40]	; (8016104 <iprintf+0x2c>)
 80160dc:	b513      	push	{r0, r1, r4, lr}
 80160de:	681c      	ldr	r4, [r3, #0]
 80160e0:	b124      	cbz	r4, 80160ec <iprintf+0x14>
 80160e2:	69a3      	ldr	r3, [r4, #24]
 80160e4:	b913      	cbnz	r3, 80160ec <iprintf+0x14>
 80160e6:	4620      	mov	r0, r4
 80160e8:	f000 fa5e 	bl	80165a8 <__sinit>
 80160ec:	ab05      	add	r3, sp, #20
 80160ee:	9a04      	ldr	r2, [sp, #16]
 80160f0:	68a1      	ldr	r1, [r4, #8]
 80160f2:	9301      	str	r3, [sp, #4]
 80160f4:	4620      	mov	r0, r4
 80160f6:	f000 fc67 	bl	80169c8 <_vfiprintf_r>
 80160fa:	b002      	add	sp, #8
 80160fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016100:	b004      	add	sp, #16
 8016102:	4770      	bx	lr
 8016104:	2000e110 	.word	0x2000e110

08016108 <_puts_r>:
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	460e      	mov	r6, r1
 801610c:	4605      	mov	r5, r0
 801610e:	b118      	cbz	r0, 8016118 <_puts_r+0x10>
 8016110:	6983      	ldr	r3, [r0, #24]
 8016112:	b90b      	cbnz	r3, 8016118 <_puts_r+0x10>
 8016114:	f000 fa48 	bl	80165a8 <__sinit>
 8016118:	69ab      	ldr	r3, [r5, #24]
 801611a:	68ac      	ldr	r4, [r5, #8]
 801611c:	b913      	cbnz	r3, 8016124 <_puts_r+0x1c>
 801611e:	4628      	mov	r0, r5
 8016120:	f000 fa42 	bl	80165a8 <__sinit>
 8016124:	4b2c      	ldr	r3, [pc, #176]	; (80161d8 <_puts_r+0xd0>)
 8016126:	429c      	cmp	r4, r3
 8016128:	d120      	bne.n	801616c <_puts_r+0x64>
 801612a:	686c      	ldr	r4, [r5, #4]
 801612c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801612e:	07db      	lsls	r3, r3, #31
 8016130:	d405      	bmi.n	801613e <_puts_r+0x36>
 8016132:	89a3      	ldrh	r3, [r4, #12]
 8016134:	0598      	lsls	r0, r3, #22
 8016136:	d402      	bmi.n	801613e <_puts_r+0x36>
 8016138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801613a:	f000 fad3 	bl	80166e4 <__retarget_lock_acquire_recursive>
 801613e:	89a3      	ldrh	r3, [r4, #12]
 8016140:	0719      	lsls	r1, r3, #28
 8016142:	d51d      	bpl.n	8016180 <_puts_r+0x78>
 8016144:	6923      	ldr	r3, [r4, #16]
 8016146:	b1db      	cbz	r3, 8016180 <_puts_r+0x78>
 8016148:	3e01      	subs	r6, #1
 801614a:	68a3      	ldr	r3, [r4, #8]
 801614c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016150:	3b01      	subs	r3, #1
 8016152:	60a3      	str	r3, [r4, #8]
 8016154:	bb39      	cbnz	r1, 80161a6 <_puts_r+0x9e>
 8016156:	2b00      	cmp	r3, #0
 8016158:	da38      	bge.n	80161cc <_puts_r+0xc4>
 801615a:	4622      	mov	r2, r4
 801615c:	210a      	movs	r1, #10
 801615e:	4628      	mov	r0, r5
 8016160:	f000 f848 	bl	80161f4 <__swbuf_r>
 8016164:	3001      	adds	r0, #1
 8016166:	d011      	beq.n	801618c <_puts_r+0x84>
 8016168:	250a      	movs	r5, #10
 801616a:	e011      	b.n	8016190 <_puts_r+0x88>
 801616c:	4b1b      	ldr	r3, [pc, #108]	; (80161dc <_puts_r+0xd4>)
 801616e:	429c      	cmp	r4, r3
 8016170:	d101      	bne.n	8016176 <_puts_r+0x6e>
 8016172:	68ac      	ldr	r4, [r5, #8]
 8016174:	e7da      	b.n	801612c <_puts_r+0x24>
 8016176:	4b1a      	ldr	r3, [pc, #104]	; (80161e0 <_puts_r+0xd8>)
 8016178:	429c      	cmp	r4, r3
 801617a:	bf08      	it	eq
 801617c:	68ec      	ldreq	r4, [r5, #12]
 801617e:	e7d5      	b.n	801612c <_puts_r+0x24>
 8016180:	4621      	mov	r1, r4
 8016182:	4628      	mov	r0, r5
 8016184:	f000 f888 	bl	8016298 <__swsetup_r>
 8016188:	2800      	cmp	r0, #0
 801618a:	d0dd      	beq.n	8016148 <_puts_r+0x40>
 801618c:	f04f 35ff 	mov.w	r5, #4294967295
 8016190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016192:	07da      	lsls	r2, r3, #31
 8016194:	d405      	bmi.n	80161a2 <_puts_r+0x9a>
 8016196:	89a3      	ldrh	r3, [r4, #12]
 8016198:	059b      	lsls	r3, r3, #22
 801619a:	d402      	bmi.n	80161a2 <_puts_r+0x9a>
 801619c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801619e:	f000 faa2 	bl	80166e6 <__retarget_lock_release_recursive>
 80161a2:	4628      	mov	r0, r5
 80161a4:	bd70      	pop	{r4, r5, r6, pc}
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	da04      	bge.n	80161b4 <_puts_r+0xac>
 80161aa:	69a2      	ldr	r2, [r4, #24]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	dc06      	bgt.n	80161be <_puts_r+0xb6>
 80161b0:	290a      	cmp	r1, #10
 80161b2:	d004      	beq.n	80161be <_puts_r+0xb6>
 80161b4:	6823      	ldr	r3, [r4, #0]
 80161b6:	1c5a      	adds	r2, r3, #1
 80161b8:	6022      	str	r2, [r4, #0]
 80161ba:	7019      	strb	r1, [r3, #0]
 80161bc:	e7c5      	b.n	801614a <_puts_r+0x42>
 80161be:	4622      	mov	r2, r4
 80161c0:	4628      	mov	r0, r5
 80161c2:	f000 f817 	bl	80161f4 <__swbuf_r>
 80161c6:	3001      	adds	r0, #1
 80161c8:	d1bf      	bne.n	801614a <_puts_r+0x42>
 80161ca:	e7df      	b.n	801618c <_puts_r+0x84>
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	250a      	movs	r5, #10
 80161d0:	1c5a      	adds	r2, r3, #1
 80161d2:	6022      	str	r2, [r4, #0]
 80161d4:	701d      	strb	r5, [r3, #0]
 80161d6:	e7db      	b.n	8016190 <_puts_r+0x88>
 80161d8:	080179a4 	.word	0x080179a4
 80161dc:	080179c4 	.word	0x080179c4
 80161e0:	08017984 	.word	0x08017984

080161e4 <puts>:
 80161e4:	4b02      	ldr	r3, [pc, #8]	; (80161f0 <puts+0xc>)
 80161e6:	4601      	mov	r1, r0
 80161e8:	6818      	ldr	r0, [r3, #0]
 80161ea:	f7ff bf8d 	b.w	8016108 <_puts_r>
 80161ee:	bf00      	nop
 80161f0:	2000e110 	.word	0x2000e110

080161f4 <__swbuf_r>:
 80161f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161f6:	460e      	mov	r6, r1
 80161f8:	4614      	mov	r4, r2
 80161fa:	4605      	mov	r5, r0
 80161fc:	b118      	cbz	r0, 8016206 <__swbuf_r+0x12>
 80161fe:	6983      	ldr	r3, [r0, #24]
 8016200:	b90b      	cbnz	r3, 8016206 <__swbuf_r+0x12>
 8016202:	f000 f9d1 	bl	80165a8 <__sinit>
 8016206:	4b21      	ldr	r3, [pc, #132]	; (801628c <__swbuf_r+0x98>)
 8016208:	429c      	cmp	r4, r3
 801620a:	d12b      	bne.n	8016264 <__swbuf_r+0x70>
 801620c:	686c      	ldr	r4, [r5, #4]
 801620e:	69a3      	ldr	r3, [r4, #24]
 8016210:	60a3      	str	r3, [r4, #8]
 8016212:	89a3      	ldrh	r3, [r4, #12]
 8016214:	071a      	lsls	r2, r3, #28
 8016216:	d52f      	bpl.n	8016278 <__swbuf_r+0x84>
 8016218:	6923      	ldr	r3, [r4, #16]
 801621a:	b36b      	cbz	r3, 8016278 <__swbuf_r+0x84>
 801621c:	6923      	ldr	r3, [r4, #16]
 801621e:	6820      	ldr	r0, [r4, #0]
 8016220:	1ac0      	subs	r0, r0, r3
 8016222:	6963      	ldr	r3, [r4, #20]
 8016224:	b2f6      	uxtb	r6, r6
 8016226:	4283      	cmp	r3, r0
 8016228:	4637      	mov	r7, r6
 801622a:	dc04      	bgt.n	8016236 <__swbuf_r+0x42>
 801622c:	4621      	mov	r1, r4
 801622e:	4628      	mov	r0, r5
 8016230:	f000 f926 	bl	8016480 <_fflush_r>
 8016234:	bb30      	cbnz	r0, 8016284 <__swbuf_r+0x90>
 8016236:	68a3      	ldr	r3, [r4, #8]
 8016238:	3b01      	subs	r3, #1
 801623a:	60a3      	str	r3, [r4, #8]
 801623c:	6823      	ldr	r3, [r4, #0]
 801623e:	1c5a      	adds	r2, r3, #1
 8016240:	6022      	str	r2, [r4, #0]
 8016242:	701e      	strb	r6, [r3, #0]
 8016244:	6963      	ldr	r3, [r4, #20]
 8016246:	3001      	adds	r0, #1
 8016248:	4283      	cmp	r3, r0
 801624a:	d004      	beq.n	8016256 <__swbuf_r+0x62>
 801624c:	89a3      	ldrh	r3, [r4, #12]
 801624e:	07db      	lsls	r3, r3, #31
 8016250:	d506      	bpl.n	8016260 <__swbuf_r+0x6c>
 8016252:	2e0a      	cmp	r6, #10
 8016254:	d104      	bne.n	8016260 <__swbuf_r+0x6c>
 8016256:	4621      	mov	r1, r4
 8016258:	4628      	mov	r0, r5
 801625a:	f000 f911 	bl	8016480 <_fflush_r>
 801625e:	b988      	cbnz	r0, 8016284 <__swbuf_r+0x90>
 8016260:	4638      	mov	r0, r7
 8016262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016264:	4b0a      	ldr	r3, [pc, #40]	; (8016290 <__swbuf_r+0x9c>)
 8016266:	429c      	cmp	r4, r3
 8016268:	d101      	bne.n	801626e <__swbuf_r+0x7a>
 801626a:	68ac      	ldr	r4, [r5, #8]
 801626c:	e7cf      	b.n	801620e <__swbuf_r+0x1a>
 801626e:	4b09      	ldr	r3, [pc, #36]	; (8016294 <__swbuf_r+0xa0>)
 8016270:	429c      	cmp	r4, r3
 8016272:	bf08      	it	eq
 8016274:	68ec      	ldreq	r4, [r5, #12]
 8016276:	e7ca      	b.n	801620e <__swbuf_r+0x1a>
 8016278:	4621      	mov	r1, r4
 801627a:	4628      	mov	r0, r5
 801627c:	f000 f80c 	bl	8016298 <__swsetup_r>
 8016280:	2800      	cmp	r0, #0
 8016282:	d0cb      	beq.n	801621c <__swbuf_r+0x28>
 8016284:	f04f 37ff 	mov.w	r7, #4294967295
 8016288:	e7ea      	b.n	8016260 <__swbuf_r+0x6c>
 801628a:	bf00      	nop
 801628c:	080179a4 	.word	0x080179a4
 8016290:	080179c4 	.word	0x080179c4
 8016294:	08017984 	.word	0x08017984

08016298 <__swsetup_r>:
 8016298:	4b32      	ldr	r3, [pc, #200]	; (8016364 <__swsetup_r+0xcc>)
 801629a:	b570      	push	{r4, r5, r6, lr}
 801629c:	681d      	ldr	r5, [r3, #0]
 801629e:	4606      	mov	r6, r0
 80162a0:	460c      	mov	r4, r1
 80162a2:	b125      	cbz	r5, 80162ae <__swsetup_r+0x16>
 80162a4:	69ab      	ldr	r3, [r5, #24]
 80162a6:	b913      	cbnz	r3, 80162ae <__swsetup_r+0x16>
 80162a8:	4628      	mov	r0, r5
 80162aa:	f000 f97d 	bl	80165a8 <__sinit>
 80162ae:	4b2e      	ldr	r3, [pc, #184]	; (8016368 <__swsetup_r+0xd0>)
 80162b0:	429c      	cmp	r4, r3
 80162b2:	d10f      	bne.n	80162d4 <__swsetup_r+0x3c>
 80162b4:	686c      	ldr	r4, [r5, #4]
 80162b6:	89a3      	ldrh	r3, [r4, #12]
 80162b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80162bc:	0719      	lsls	r1, r3, #28
 80162be:	d42c      	bmi.n	801631a <__swsetup_r+0x82>
 80162c0:	06dd      	lsls	r5, r3, #27
 80162c2:	d411      	bmi.n	80162e8 <__swsetup_r+0x50>
 80162c4:	2309      	movs	r3, #9
 80162c6:	6033      	str	r3, [r6, #0]
 80162c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80162cc:	81a3      	strh	r3, [r4, #12]
 80162ce:	f04f 30ff 	mov.w	r0, #4294967295
 80162d2:	e03e      	b.n	8016352 <__swsetup_r+0xba>
 80162d4:	4b25      	ldr	r3, [pc, #148]	; (801636c <__swsetup_r+0xd4>)
 80162d6:	429c      	cmp	r4, r3
 80162d8:	d101      	bne.n	80162de <__swsetup_r+0x46>
 80162da:	68ac      	ldr	r4, [r5, #8]
 80162dc:	e7eb      	b.n	80162b6 <__swsetup_r+0x1e>
 80162de:	4b24      	ldr	r3, [pc, #144]	; (8016370 <__swsetup_r+0xd8>)
 80162e0:	429c      	cmp	r4, r3
 80162e2:	bf08      	it	eq
 80162e4:	68ec      	ldreq	r4, [r5, #12]
 80162e6:	e7e6      	b.n	80162b6 <__swsetup_r+0x1e>
 80162e8:	0758      	lsls	r0, r3, #29
 80162ea:	d512      	bpl.n	8016312 <__swsetup_r+0x7a>
 80162ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80162ee:	b141      	cbz	r1, 8016302 <__swsetup_r+0x6a>
 80162f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162f4:	4299      	cmp	r1, r3
 80162f6:	d002      	beq.n	80162fe <__swsetup_r+0x66>
 80162f8:	4630      	mov	r0, r6
 80162fa:	f000 fa5b 	bl	80167b4 <_free_r>
 80162fe:	2300      	movs	r3, #0
 8016300:	6363      	str	r3, [r4, #52]	; 0x34
 8016302:	89a3      	ldrh	r3, [r4, #12]
 8016304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016308:	81a3      	strh	r3, [r4, #12]
 801630a:	2300      	movs	r3, #0
 801630c:	6063      	str	r3, [r4, #4]
 801630e:	6923      	ldr	r3, [r4, #16]
 8016310:	6023      	str	r3, [r4, #0]
 8016312:	89a3      	ldrh	r3, [r4, #12]
 8016314:	f043 0308 	orr.w	r3, r3, #8
 8016318:	81a3      	strh	r3, [r4, #12]
 801631a:	6923      	ldr	r3, [r4, #16]
 801631c:	b94b      	cbnz	r3, 8016332 <__swsetup_r+0x9a>
 801631e:	89a3      	ldrh	r3, [r4, #12]
 8016320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016328:	d003      	beq.n	8016332 <__swsetup_r+0x9a>
 801632a:	4621      	mov	r1, r4
 801632c:	4630      	mov	r0, r6
 801632e:	f000 fa01 	bl	8016734 <__smakebuf_r>
 8016332:	89a0      	ldrh	r0, [r4, #12]
 8016334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016338:	f010 0301 	ands.w	r3, r0, #1
 801633c:	d00a      	beq.n	8016354 <__swsetup_r+0xbc>
 801633e:	2300      	movs	r3, #0
 8016340:	60a3      	str	r3, [r4, #8]
 8016342:	6963      	ldr	r3, [r4, #20]
 8016344:	425b      	negs	r3, r3
 8016346:	61a3      	str	r3, [r4, #24]
 8016348:	6923      	ldr	r3, [r4, #16]
 801634a:	b943      	cbnz	r3, 801635e <__swsetup_r+0xc6>
 801634c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016350:	d1ba      	bne.n	80162c8 <__swsetup_r+0x30>
 8016352:	bd70      	pop	{r4, r5, r6, pc}
 8016354:	0781      	lsls	r1, r0, #30
 8016356:	bf58      	it	pl
 8016358:	6963      	ldrpl	r3, [r4, #20]
 801635a:	60a3      	str	r3, [r4, #8]
 801635c:	e7f4      	b.n	8016348 <__swsetup_r+0xb0>
 801635e:	2000      	movs	r0, #0
 8016360:	e7f7      	b.n	8016352 <__swsetup_r+0xba>
 8016362:	bf00      	nop
 8016364:	2000e110 	.word	0x2000e110
 8016368:	080179a4 	.word	0x080179a4
 801636c:	080179c4 	.word	0x080179c4
 8016370:	08017984 	.word	0x08017984

08016374 <__sflush_r>:
 8016374:	898a      	ldrh	r2, [r1, #12]
 8016376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801637a:	4605      	mov	r5, r0
 801637c:	0710      	lsls	r0, r2, #28
 801637e:	460c      	mov	r4, r1
 8016380:	d458      	bmi.n	8016434 <__sflush_r+0xc0>
 8016382:	684b      	ldr	r3, [r1, #4]
 8016384:	2b00      	cmp	r3, #0
 8016386:	dc05      	bgt.n	8016394 <__sflush_r+0x20>
 8016388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801638a:	2b00      	cmp	r3, #0
 801638c:	dc02      	bgt.n	8016394 <__sflush_r+0x20>
 801638e:	2000      	movs	r0, #0
 8016390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016396:	2e00      	cmp	r6, #0
 8016398:	d0f9      	beq.n	801638e <__sflush_r+0x1a>
 801639a:	2300      	movs	r3, #0
 801639c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80163a0:	682f      	ldr	r7, [r5, #0]
 80163a2:	602b      	str	r3, [r5, #0]
 80163a4:	d032      	beq.n	801640c <__sflush_r+0x98>
 80163a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80163a8:	89a3      	ldrh	r3, [r4, #12]
 80163aa:	075a      	lsls	r2, r3, #29
 80163ac:	d505      	bpl.n	80163ba <__sflush_r+0x46>
 80163ae:	6863      	ldr	r3, [r4, #4]
 80163b0:	1ac0      	subs	r0, r0, r3
 80163b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80163b4:	b10b      	cbz	r3, 80163ba <__sflush_r+0x46>
 80163b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80163b8:	1ac0      	subs	r0, r0, r3
 80163ba:	2300      	movs	r3, #0
 80163bc:	4602      	mov	r2, r0
 80163be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80163c0:	6a21      	ldr	r1, [r4, #32]
 80163c2:	4628      	mov	r0, r5
 80163c4:	47b0      	blx	r6
 80163c6:	1c43      	adds	r3, r0, #1
 80163c8:	89a3      	ldrh	r3, [r4, #12]
 80163ca:	d106      	bne.n	80163da <__sflush_r+0x66>
 80163cc:	6829      	ldr	r1, [r5, #0]
 80163ce:	291d      	cmp	r1, #29
 80163d0:	d82c      	bhi.n	801642c <__sflush_r+0xb8>
 80163d2:	4a2a      	ldr	r2, [pc, #168]	; (801647c <__sflush_r+0x108>)
 80163d4:	40ca      	lsrs	r2, r1
 80163d6:	07d6      	lsls	r6, r2, #31
 80163d8:	d528      	bpl.n	801642c <__sflush_r+0xb8>
 80163da:	2200      	movs	r2, #0
 80163dc:	6062      	str	r2, [r4, #4]
 80163de:	04d9      	lsls	r1, r3, #19
 80163e0:	6922      	ldr	r2, [r4, #16]
 80163e2:	6022      	str	r2, [r4, #0]
 80163e4:	d504      	bpl.n	80163f0 <__sflush_r+0x7c>
 80163e6:	1c42      	adds	r2, r0, #1
 80163e8:	d101      	bne.n	80163ee <__sflush_r+0x7a>
 80163ea:	682b      	ldr	r3, [r5, #0]
 80163ec:	b903      	cbnz	r3, 80163f0 <__sflush_r+0x7c>
 80163ee:	6560      	str	r0, [r4, #84]	; 0x54
 80163f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163f2:	602f      	str	r7, [r5, #0]
 80163f4:	2900      	cmp	r1, #0
 80163f6:	d0ca      	beq.n	801638e <__sflush_r+0x1a>
 80163f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163fc:	4299      	cmp	r1, r3
 80163fe:	d002      	beq.n	8016406 <__sflush_r+0x92>
 8016400:	4628      	mov	r0, r5
 8016402:	f000 f9d7 	bl	80167b4 <_free_r>
 8016406:	2000      	movs	r0, #0
 8016408:	6360      	str	r0, [r4, #52]	; 0x34
 801640a:	e7c1      	b.n	8016390 <__sflush_r+0x1c>
 801640c:	6a21      	ldr	r1, [r4, #32]
 801640e:	2301      	movs	r3, #1
 8016410:	4628      	mov	r0, r5
 8016412:	47b0      	blx	r6
 8016414:	1c41      	adds	r1, r0, #1
 8016416:	d1c7      	bne.n	80163a8 <__sflush_r+0x34>
 8016418:	682b      	ldr	r3, [r5, #0]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d0c4      	beq.n	80163a8 <__sflush_r+0x34>
 801641e:	2b1d      	cmp	r3, #29
 8016420:	d001      	beq.n	8016426 <__sflush_r+0xb2>
 8016422:	2b16      	cmp	r3, #22
 8016424:	d101      	bne.n	801642a <__sflush_r+0xb6>
 8016426:	602f      	str	r7, [r5, #0]
 8016428:	e7b1      	b.n	801638e <__sflush_r+0x1a>
 801642a:	89a3      	ldrh	r3, [r4, #12]
 801642c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016430:	81a3      	strh	r3, [r4, #12]
 8016432:	e7ad      	b.n	8016390 <__sflush_r+0x1c>
 8016434:	690f      	ldr	r7, [r1, #16]
 8016436:	2f00      	cmp	r7, #0
 8016438:	d0a9      	beq.n	801638e <__sflush_r+0x1a>
 801643a:	0793      	lsls	r3, r2, #30
 801643c:	680e      	ldr	r6, [r1, #0]
 801643e:	bf08      	it	eq
 8016440:	694b      	ldreq	r3, [r1, #20]
 8016442:	600f      	str	r7, [r1, #0]
 8016444:	bf18      	it	ne
 8016446:	2300      	movne	r3, #0
 8016448:	eba6 0807 	sub.w	r8, r6, r7
 801644c:	608b      	str	r3, [r1, #8]
 801644e:	f1b8 0f00 	cmp.w	r8, #0
 8016452:	dd9c      	ble.n	801638e <__sflush_r+0x1a>
 8016454:	6a21      	ldr	r1, [r4, #32]
 8016456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016458:	4643      	mov	r3, r8
 801645a:	463a      	mov	r2, r7
 801645c:	4628      	mov	r0, r5
 801645e:	47b0      	blx	r6
 8016460:	2800      	cmp	r0, #0
 8016462:	dc06      	bgt.n	8016472 <__sflush_r+0xfe>
 8016464:	89a3      	ldrh	r3, [r4, #12]
 8016466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801646a:	81a3      	strh	r3, [r4, #12]
 801646c:	f04f 30ff 	mov.w	r0, #4294967295
 8016470:	e78e      	b.n	8016390 <__sflush_r+0x1c>
 8016472:	4407      	add	r7, r0
 8016474:	eba8 0800 	sub.w	r8, r8, r0
 8016478:	e7e9      	b.n	801644e <__sflush_r+0xda>
 801647a:	bf00      	nop
 801647c:	20400001 	.word	0x20400001

08016480 <_fflush_r>:
 8016480:	b538      	push	{r3, r4, r5, lr}
 8016482:	690b      	ldr	r3, [r1, #16]
 8016484:	4605      	mov	r5, r0
 8016486:	460c      	mov	r4, r1
 8016488:	b913      	cbnz	r3, 8016490 <_fflush_r+0x10>
 801648a:	2500      	movs	r5, #0
 801648c:	4628      	mov	r0, r5
 801648e:	bd38      	pop	{r3, r4, r5, pc}
 8016490:	b118      	cbz	r0, 801649a <_fflush_r+0x1a>
 8016492:	6983      	ldr	r3, [r0, #24]
 8016494:	b90b      	cbnz	r3, 801649a <_fflush_r+0x1a>
 8016496:	f000 f887 	bl	80165a8 <__sinit>
 801649a:	4b14      	ldr	r3, [pc, #80]	; (80164ec <_fflush_r+0x6c>)
 801649c:	429c      	cmp	r4, r3
 801649e:	d11b      	bne.n	80164d8 <_fflush_r+0x58>
 80164a0:	686c      	ldr	r4, [r5, #4]
 80164a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d0ef      	beq.n	801648a <_fflush_r+0xa>
 80164aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80164ac:	07d0      	lsls	r0, r2, #31
 80164ae:	d404      	bmi.n	80164ba <_fflush_r+0x3a>
 80164b0:	0599      	lsls	r1, r3, #22
 80164b2:	d402      	bmi.n	80164ba <_fflush_r+0x3a>
 80164b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80164b6:	f000 f915 	bl	80166e4 <__retarget_lock_acquire_recursive>
 80164ba:	4628      	mov	r0, r5
 80164bc:	4621      	mov	r1, r4
 80164be:	f7ff ff59 	bl	8016374 <__sflush_r>
 80164c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80164c4:	07da      	lsls	r2, r3, #31
 80164c6:	4605      	mov	r5, r0
 80164c8:	d4e0      	bmi.n	801648c <_fflush_r+0xc>
 80164ca:	89a3      	ldrh	r3, [r4, #12]
 80164cc:	059b      	lsls	r3, r3, #22
 80164ce:	d4dd      	bmi.n	801648c <_fflush_r+0xc>
 80164d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80164d2:	f000 f908 	bl	80166e6 <__retarget_lock_release_recursive>
 80164d6:	e7d9      	b.n	801648c <_fflush_r+0xc>
 80164d8:	4b05      	ldr	r3, [pc, #20]	; (80164f0 <_fflush_r+0x70>)
 80164da:	429c      	cmp	r4, r3
 80164dc:	d101      	bne.n	80164e2 <_fflush_r+0x62>
 80164de:	68ac      	ldr	r4, [r5, #8]
 80164e0:	e7df      	b.n	80164a2 <_fflush_r+0x22>
 80164e2:	4b04      	ldr	r3, [pc, #16]	; (80164f4 <_fflush_r+0x74>)
 80164e4:	429c      	cmp	r4, r3
 80164e6:	bf08      	it	eq
 80164e8:	68ec      	ldreq	r4, [r5, #12]
 80164ea:	e7da      	b.n	80164a2 <_fflush_r+0x22>
 80164ec:	080179a4 	.word	0x080179a4
 80164f0:	080179c4 	.word	0x080179c4
 80164f4:	08017984 	.word	0x08017984

080164f8 <std>:
 80164f8:	2300      	movs	r3, #0
 80164fa:	b510      	push	{r4, lr}
 80164fc:	4604      	mov	r4, r0
 80164fe:	e9c0 3300 	strd	r3, r3, [r0]
 8016502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016506:	6083      	str	r3, [r0, #8]
 8016508:	8181      	strh	r1, [r0, #12]
 801650a:	6643      	str	r3, [r0, #100]	; 0x64
 801650c:	81c2      	strh	r2, [r0, #14]
 801650e:	6183      	str	r3, [r0, #24]
 8016510:	4619      	mov	r1, r3
 8016512:	2208      	movs	r2, #8
 8016514:	305c      	adds	r0, #92	; 0x5c
 8016516:	f7ff fdd7 	bl	80160c8 <memset>
 801651a:	4b05      	ldr	r3, [pc, #20]	; (8016530 <std+0x38>)
 801651c:	6263      	str	r3, [r4, #36]	; 0x24
 801651e:	4b05      	ldr	r3, [pc, #20]	; (8016534 <std+0x3c>)
 8016520:	62a3      	str	r3, [r4, #40]	; 0x28
 8016522:	4b05      	ldr	r3, [pc, #20]	; (8016538 <std+0x40>)
 8016524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016526:	4b05      	ldr	r3, [pc, #20]	; (801653c <std+0x44>)
 8016528:	6224      	str	r4, [r4, #32]
 801652a:	6323      	str	r3, [r4, #48]	; 0x30
 801652c:	bd10      	pop	{r4, pc}
 801652e:	bf00      	nop
 8016530:	08016f71 	.word	0x08016f71
 8016534:	08016f93 	.word	0x08016f93
 8016538:	08016fcb 	.word	0x08016fcb
 801653c:	08016fef 	.word	0x08016fef

08016540 <_cleanup_r>:
 8016540:	4901      	ldr	r1, [pc, #4]	; (8016548 <_cleanup_r+0x8>)
 8016542:	f000 b8af 	b.w	80166a4 <_fwalk_reent>
 8016546:	bf00      	nop
 8016548:	08016481 	.word	0x08016481

0801654c <__sfmoreglue>:
 801654c:	b570      	push	{r4, r5, r6, lr}
 801654e:	2268      	movs	r2, #104	; 0x68
 8016550:	1e4d      	subs	r5, r1, #1
 8016552:	4355      	muls	r5, r2
 8016554:	460e      	mov	r6, r1
 8016556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801655a:	f000 f997 	bl	801688c <_malloc_r>
 801655e:	4604      	mov	r4, r0
 8016560:	b140      	cbz	r0, 8016574 <__sfmoreglue+0x28>
 8016562:	2100      	movs	r1, #0
 8016564:	e9c0 1600 	strd	r1, r6, [r0]
 8016568:	300c      	adds	r0, #12
 801656a:	60a0      	str	r0, [r4, #8]
 801656c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016570:	f7ff fdaa 	bl	80160c8 <memset>
 8016574:	4620      	mov	r0, r4
 8016576:	bd70      	pop	{r4, r5, r6, pc}

08016578 <__sfp_lock_acquire>:
 8016578:	4801      	ldr	r0, [pc, #4]	; (8016580 <__sfp_lock_acquire+0x8>)
 801657a:	f000 b8b3 	b.w	80166e4 <__retarget_lock_acquire_recursive>
 801657e:	bf00      	nop
 8016580:	2000fd95 	.word	0x2000fd95

08016584 <__sfp_lock_release>:
 8016584:	4801      	ldr	r0, [pc, #4]	; (801658c <__sfp_lock_release+0x8>)
 8016586:	f000 b8ae 	b.w	80166e6 <__retarget_lock_release_recursive>
 801658a:	bf00      	nop
 801658c:	2000fd95 	.word	0x2000fd95

08016590 <__sinit_lock_acquire>:
 8016590:	4801      	ldr	r0, [pc, #4]	; (8016598 <__sinit_lock_acquire+0x8>)
 8016592:	f000 b8a7 	b.w	80166e4 <__retarget_lock_acquire_recursive>
 8016596:	bf00      	nop
 8016598:	2000fd96 	.word	0x2000fd96

0801659c <__sinit_lock_release>:
 801659c:	4801      	ldr	r0, [pc, #4]	; (80165a4 <__sinit_lock_release+0x8>)
 801659e:	f000 b8a2 	b.w	80166e6 <__retarget_lock_release_recursive>
 80165a2:	bf00      	nop
 80165a4:	2000fd96 	.word	0x2000fd96

080165a8 <__sinit>:
 80165a8:	b510      	push	{r4, lr}
 80165aa:	4604      	mov	r4, r0
 80165ac:	f7ff fff0 	bl	8016590 <__sinit_lock_acquire>
 80165b0:	69a3      	ldr	r3, [r4, #24]
 80165b2:	b11b      	cbz	r3, 80165bc <__sinit+0x14>
 80165b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165b8:	f7ff bff0 	b.w	801659c <__sinit_lock_release>
 80165bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80165c0:	6523      	str	r3, [r4, #80]	; 0x50
 80165c2:	4b13      	ldr	r3, [pc, #76]	; (8016610 <__sinit+0x68>)
 80165c4:	4a13      	ldr	r2, [pc, #76]	; (8016614 <__sinit+0x6c>)
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80165ca:	42a3      	cmp	r3, r4
 80165cc:	bf04      	itt	eq
 80165ce:	2301      	moveq	r3, #1
 80165d0:	61a3      	streq	r3, [r4, #24]
 80165d2:	4620      	mov	r0, r4
 80165d4:	f000 f820 	bl	8016618 <__sfp>
 80165d8:	6060      	str	r0, [r4, #4]
 80165da:	4620      	mov	r0, r4
 80165dc:	f000 f81c 	bl	8016618 <__sfp>
 80165e0:	60a0      	str	r0, [r4, #8]
 80165e2:	4620      	mov	r0, r4
 80165e4:	f000 f818 	bl	8016618 <__sfp>
 80165e8:	2200      	movs	r2, #0
 80165ea:	60e0      	str	r0, [r4, #12]
 80165ec:	2104      	movs	r1, #4
 80165ee:	6860      	ldr	r0, [r4, #4]
 80165f0:	f7ff ff82 	bl	80164f8 <std>
 80165f4:	68a0      	ldr	r0, [r4, #8]
 80165f6:	2201      	movs	r2, #1
 80165f8:	2109      	movs	r1, #9
 80165fa:	f7ff ff7d 	bl	80164f8 <std>
 80165fe:	68e0      	ldr	r0, [r4, #12]
 8016600:	2202      	movs	r2, #2
 8016602:	2112      	movs	r1, #18
 8016604:	f7ff ff78 	bl	80164f8 <std>
 8016608:	2301      	movs	r3, #1
 801660a:	61a3      	str	r3, [r4, #24]
 801660c:	e7d2      	b.n	80165b4 <__sinit+0xc>
 801660e:	bf00      	nop
 8016610:	08017980 	.word	0x08017980
 8016614:	08016541 	.word	0x08016541

08016618 <__sfp>:
 8016618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801661a:	4607      	mov	r7, r0
 801661c:	f7ff ffac 	bl	8016578 <__sfp_lock_acquire>
 8016620:	4b1e      	ldr	r3, [pc, #120]	; (801669c <__sfp+0x84>)
 8016622:	681e      	ldr	r6, [r3, #0]
 8016624:	69b3      	ldr	r3, [r6, #24]
 8016626:	b913      	cbnz	r3, 801662e <__sfp+0x16>
 8016628:	4630      	mov	r0, r6
 801662a:	f7ff ffbd 	bl	80165a8 <__sinit>
 801662e:	3648      	adds	r6, #72	; 0x48
 8016630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016634:	3b01      	subs	r3, #1
 8016636:	d503      	bpl.n	8016640 <__sfp+0x28>
 8016638:	6833      	ldr	r3, [r6, #0]
 801663a:	b30b      	cbz	r3, 8016680 <__sfp+0x68>
 801663c:	6836      	ldr	r6, [r6, #0]
 801663e:	e7f7      	b.n	8016630 <__sfp+0x18>
 8016640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016644:	b9d5      	cbnz	r5, 801667c <__sfp+0x64>
 8016646:	4b16      	ldr	r3, [pc, #88]	; (80166a0 <__sfp+0x88>)
 8016648:	60e3      	str	r3, [r4, #12]
 801664a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801664e:	6665      	str	r5, [r4, #100]	; 0x64
 8016650:	f000 f847 	bl	80166e2 <__retarget_lock_init_recursive>
 8016654:	f7ff ff96 	bl	8016584 <__sfp_lock_release>
 8016658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801665c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016660:	6025      	str	r5, [r4, #0]
 8016662:	61a5      	str	r5, [r4, #24]
 8016664:	2208      	movs	r2, #8
 8016666:	4629      	mov	r1, r5
 8016668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801666c:	f7ff fd2c 	bl	80160c8 <memset>
 8016670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016678:	4620      	mov	r0, r4
 801667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801667c:	3468      	adds	r4, #104	; 0x68
 801667e:	e7d9      	b.n	8016634 <__sfp+0x1c>
 8016680:	2104      	movs	r1, #4
 8016682:	4638      	mov	r0, r7
 8016684:	f7ff ff62 	bl	801654c <__sfmoreglue>
 8016688:	4604      	mov	r4, r0
 801668a:	6030      	str	r0, [r6, #0]
 801668c:	2800      	cmp	r0, #0
 801668e:	d1d5      	bne.n	801663c <__sfp+0x24>
 8016690:	f7ff ff78 	bl	8016584 <__sfp_lock_release>
 8016694:	230c      	movs	r3, #12
 8016696:	603b      	str	r3, [r7, #0]
 8016698:	e7ee      	b.n	8016678 <__sfp+0x60>
 801669a:	bf00      	nop
 801669c:	08017980 	.word	0x08017980
 80166a0:	ffff0001 	.word	0xffff0001

080166a4 <_fwalk_reent>:
 80166a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166a8:	4606      	mov	r6, r0
 80166aa:	4688      	mov	r8, r1
 80166ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80166b0:	2700      	movs	r7, #0
 80166b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80166b6:	f1b9 0901 	subs.w	r9, r9, #1
 80166ba:	d505      	bpl.n	80166c8 <_fwalk_reent+0x24>
 80166bc:	6824      	ldr	r4, [r4, #0]
 80166be:	2c00      	cmp	r4, #0
 80166c0:	d1f7      	bne.n	80166b2 <_fwalk_reent+0xe>
 80166c2:	4638      	mov	r0, r7
 80166c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166c8:	89ab      	ldrh	r3, [r5, #12]
 80166ca:	2b01      	cmp	r3, #1
 80166cc:	d907      	bls.n	80166de <_fwalk_reent+0x3a>
 80166ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80166d2:	3301      	adds	r3, #1
 80166d4:	d003      	beq.n	80166de <_fwalk_reent+0x3a>
 80166d6:	4629      	mov	r1, r5
 80166d8:	4630      	mov	r0, r6
 80166da:	47c0      	blx	r8
 80166dc:	4307      	orrs	r7, r0
 80166de:	3568      	adds	r5, #104	; 0x68
 80166e0:	e7e9      	b.n	80166b6 <_fwalk_reent+0x12>

080166e2 <__retarget_lock_init_recursive>:
 80166e2:	4770      	bx	lr

080166e4 <__retarget_lock_acquire_recursive>:
 80166e4:	4770      	bx	lr

080166e6 <__retarget_lock_release_recursive>:
 80166e6:	4770      	bx	lr

080166e8 <__swhatbuf_r>:
 80166e8:	b570      	push	{r4, r5, r6, lr}
 80166ea:	460e      	mov	r6, r1
 80166ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166f0:	2900      	cmp	r1, #0
 80166f2:	b096      	sub	sp, #88	; 0x58
 80166f4:	4614      	mov	r4, r2
 80166f6:	461d      	mov	r5, r3
 80166f8:	da08      	bge.n	801670c <__swhatbuf_r+0x24>
 80166fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80166fe:	2200      	movs	r2, #0
 8016700:	602a      	str	r2, [r5, #0]
 8016702:	061a      	lsls	r2, r3, #24
 8016704:	d410      	bmi.n	8016728 <__swhatbuf_r+0x40>
 8016706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801670a:	e00e      	b.n	801672a <__swhatbuf_r+0x42>
 801670c:	466a      	mov	r2, sp
 801670e:	f000 fc95 	bl	801703c <_fstat_r>
 8016712:	2800      	cmp	r0, #0
 8016714:	dbf1      	blt.n	80166fa <__swhatbuf_r+0x12>
 8016716:	9a01      	ldr	r2, [sp, #4]
 8016718:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801671c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016720:	425a      	negs	r2, r3
 8016722:	415a      	adcs	r2, r3
 8016724:	602a      	str	r2, [r5, #0]
 8016726:	e7ee      	b.n	8016706 <__swhatbuf_r+0x1e>
 8016728:	2340      	movs	r3, #64	; 0x40
 801672a:	2000      	movs	r0, #0
 801672c:	6023      	str	r3, [r4, #0]
 801672e:	b016      	add	sp, #88	; 0x58
 8016730:	bd70      	pop	{r4, r5, r6, pc}
	...

08016734 <__smakebuf_r>:
 8016734:	898b      	ldrh	r3, [r1, #12]
 8016736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016738:	079d      	lsls	r5, r3, #30
 801673a:	4606      	mov	r6, r0
 801673c:	460c      	mov	r4, r1
 801673e:	d507      	bpl.n	8016750 <__smakebuf_r+0x1c>
 8016740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016744:	6023      	str	r3, [r4, #0]
 8016746:	6123      	str	r3, [r4, #16]
 8016748:	2301      	movs	r3, #1
 801674a:	6163      	str	r3, [r4, #20]
 801674c:	b002      	add	sp, #8
 801674e:	bd70      	pop	{r4, r5, r6, pc}
 8016750:	ab01      	add	r3, sp, #4
 8016752:	466a      	mov	r2, sp
 8016754:	f7ff ffc8 	bl	80166e8 <__swhatbuf_r>
 8016758:	9900      	ldr	r1, [sp, #0]
 801675a:	4605      	mov	r5, r0
 801675c:	4630      	mov	r0, r6
 801675e:	f000 f895 	bl	801688c <_malloc_r>
 8016762:	b948      	cbnz	r0, 8016778 <__smakebuf_r+0x44>
 8016764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016768:	059a      	lsls	r2, r3, #22
 801676a:	d4ef      	bmi.n	801674c <__smakebuf_r+0x18>
 801676c:	f023 0303 	bic.w	r3, r3, #3
 8016770:	f043 0302 	orr.w	r3, r3, #2
 8016774:	81a3      	strh	r3, [r4, #12]
 8016776:	e7e3      	b.n	8016740 <__smakebuf_r+0xc>
 8016778:	4b0d      	ldr	r3, [pc, #52]	; (80167b0 <__smakebuf_r+0x7c>)
 801677a:	62b3      	str	r3, [r6, #40]	; 0x28
 801677c:	89a3      	ldrh	r3, [r4, #12]
 801677e:	6020      	str	r0, [r4, #0]
 8016780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016784:	81a3      	strh	r3, [r4, #12]
 8016786:	9b00      	ldr	r3, [sp, #0]
 8016788:	6163      	str	r3, [r4, #20]
 801678a:	9b01      	ldr	r3, [sp, #4]
 801678c:	6120      	str	r0, [r4, #16]
 801678e:	b15b      	cbz	r3, 80167a8 <__smakebuf_r+0x74>
 8016790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016794:	4630      	mov	r0, r6
 8016796:	f000 fc63 	bl	8017060 <_isatty_r>
 801679a:	b128      	cbz	r0, 80167a8 <__smakebuf_r+0x74>
 801679c:	89a3      	ldrh	r3, [r4, #12]
 801679e:	f023 0303 	bic.w	r3, r3, #3
 80167a2:	f043 0301 	orr.w	r3, r3, #1
 80167a6:	81a3      	strh	r3, [r4, #12]
 80167a8:	89a0      	ldrh	r0, [r4, #12]
 80167aa:	4305      	orrs	r5, r0
 80167ac:	81a5      	strh	r5, [r4, #12]
 80167ae:	e7cd      	b.n	801674c <__smakebuf_r+0x18>
 80167b0:	08016541 	.word	0x08016541

080167b4 <_free_r>:
 80167b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167b6:	2900      	cmp	r1, #0
 80167b8:	d044      	beq.n	8016844 <_free_r+0x90>
 80167ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167be:	9001      	str	r0, [sp, #4]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f1a1 0404 	sub.w	r4, r1, #4
 80167c6:	bfb8      	it	lt
 80167c8:	18e4      	addlt	r4, r4, r3
 80167ca:	f000 fc6b 	bl	80170a4 <__malloc_lock>
 80167ce:	4a1e      	ldr	r2, [pc, #120]	; (8016848 <_free_r+0x94>)
 80167d0:	9801      	ldr	r0, [sp, #4]
 80167d2:	6813      	ldr	r3, [r2, #0]
 80167d4:	b933      	cbnz	r3, 80167e4 <_free_r+0x30>
 80167d6:	6063      	str	r3, [r4, #4]
 80167d8:	6014      	str	r4, [r2, #0]
 80167da:	b003      	add	sp, #12
 80167dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167e0:	f000 bc66 	b.w	80170b0 <__malloc_unlock>
 80167e4:	42a3      	cmp	r3, r4
 80167e6:	d908      	bls.n	80167fa <_free_r+0x46>
 80167e8:	6825      	ldr	r5, [r4, #0]
 80167ea:	1961      	adds	r1, r4, r5
 80167ec:	428b      	cmp	r3, r1
 80167ee:	bf01      	itttt	eq
 80167f0:	6819      	ldreq	r1, [r3, #0]
 80167f2:	685b      	ldreq	r3, [r3, #4]
 80167f4:	1949      	addeq	r1, r1, r5
 80167f6:	6021      	streq	r1, [r4, #0]
 80167f8:	e7ed      	b.n	80167d6 <_free_r+0x22>
 80167fa:	461a      	mov	r2, r3
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	b10b      	cbz	r3, 8016804 <_free_r+0x50>
 8016800:	42a3      	cmp	r3, r4
 8016802:	d9fa      	bls.n	80167fa <_free_r+0x46>
 8016804:	6811      	ldr	r1, [r2, #0]
 8016806:	1855      	adds	r5, r2, r1
 8016808:	42a5      	cmp	r5, r4
 801680a:	d10b      	bne.n	8016824 <_free_r+0x70>
 801680c:	6824      	ldr	r4, [r4, #0]
 801680e:	4421      	add	r1, r4
 8016810:	1854      	adds	r4, r2, r1
 8016812:	42a3      	cmp	r3, r4
 8016814:	6011      	str	r1, [r2, #0]
 8016816:	d1e0      	bne.n	80167da <_free_r+0x26>
 8016818:	681c      	ldr	r4, [r3, #0]
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	6053      	str	r3, [r2, #4]
 801681e:	4421      	add	r1, r4
 8016820:	6011      	str	r1, [r2, #0]
 8016822:	e7da      	b.n	80167da <_free_r+0x26>
 8016824:	d902      	bls.n	801682c <_free_r+0x78>
 8016826:	230c      	movs	r3, #12
 8016828:	6003      	str	r3, [r0, #0]
 801682a:	e7d6      	b.n	80167da <_free_r+0x26>
 801682c:	6825      	ldr	r5, [r4, #0]
 801682e:	1961      	adds	r1, r4, r5
 8016830:	428b      	cmp	r3, r1
 8016832:	bf04      	itt	eq
 8016834:	6819      	ldreq	r1, [r3, #0]
 8016836:	685b      	ldreq	r3, [r3, #4]
 8016838:	6063      	str	r3, [r4, #4]
 801683a:	bf04      	itt	eq
 801683c:	1949      	addeq	r1, r1, r5
 801683e:	6021      	streq	r1, [r4, #0]
 8016840:	6054      	str	r4, [r2, #4]
 8016842:	e7ca      	b.n	80167da <_free_r+0x26>
 8016844:	b003      	add	sp, #12
 8016846:	bd30      	pop	{r4, r5, pc}
 8016848:	2000fd98 	.word	0x2000fd98

0801684c <sbrk_aligned>:
 801684c:	b570      	push	{r4, r5, r6, lr}
 801684e:	4e0e      	ldr	r6, [pc, #56]	; (8016888 <sbrk_aligned+0x3c>)
 8016850:	460c      	mov	r4, r1
 8016852:	6831      	ldr	r1, [r6, #0]
 8016854:	4605      	mov	r5, r0
 8016856:	b911      	cbnz	r1, 801685e <sbrk_aligned+0x12>
 8016858:	f000 fb7a 	bl	8016f50 <_sbrk_r>
 801685c:	6030      	str	r0, [r6, #0]
 801685e:	4621      	mov	r1, r4
 8016860:	4628      	mov	r0, r5
 8016862:	f000 fb75 	bl	8016f50 <_sbrk_r>
 8016866:	1c43      	adds	r3, r0, #1
 8016868:	d00a      	beq.n	8016880 <sbrk_aligned+0x34>
 801686a:	1cc4      	adds	r4, r0, #3
 801686c:	f024 0403 	bic.w	r4, r4, #3
 8016870:	42a0      	cmp	r0, r4
 8016872:	d007      	beq.n	8016884 <sbrk_aligned+0x38>
 8016874:	1a21      	subs	r1, r4, r0
 8016876:	4628      	mov	r0, r5
 8016878:	f000 fb6a 	bl	8016f50 <_sbrk_r>
 801687c:	3001      	adds	r0, #1
 801687e:	d101      	bne.n	8016884 <sbrk_aligned+0x38>
 8016880:	f04f 34ff 	mov.w	r4, #4294967295
 8016884:	4620      	mov	r0, r4
 8016886:	bd70      	pop	{r4, r5, r6, pc}
 8016888:	2000fd9c 	.word	0x2000fd9c

0801688c <_malloc_r>:
 801688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016890:	1ccd      	adds	r5, r1, #3
 8016892:	f025 0503 	bic.w	r5, r5, #3
 8016896:	3508      	adds	r5, #8
 8016898:	2d0c      	cmp	r5, #12
 801689a:	bf38      	it	cc
 801689c:	250c      	movcc	r5, #12
 801689e:	2d00      	cmp	r5, #0
 80168a0:	4607      	mov	r7, r0
 80168a2:	db01      	blt.n	80168a8 <_malloc_r+0x1c>
 80168a4:	42a9      	cmp	r1, r5
 80168a6:	d905      	bls.n	80168b4 <_malloc_r+0x28>
 80168a8:	230c      	movs	r3, #12
 80168aa:	603b      	str	r3, [r7, #0]
 80168ac:	2600      	movs	r6, #0
 80168ae:	4630      	mov	r0, r6
 80168b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168b4:	4e2e      	ldr	r6, [pc, #184]	; (8016970 <_malloc_r+0xe4>)
 80168b6:	f000 fbf5 	bl	80170a4 <__malloc_lock>
 80168ba:	6833      	ldr	r3, [r6, #0]
 80168bc:	461c      	mov	r4, r3
 80168be:	bb34      	cbnz	r4, 801690e <_malloc_r+0x82>
 80168c0:	4629      	mov	r1, r5
 80168c2:	4638      	mov	r0, r7
 80168c4:	f7ff ffc2 	bl	801684c <sbrk_aligned>
 80168c8:	1c43      	adds	r3, r0, #1
 80168ca:	4604      	mov	r4, r0
 80168cc:	d14d      	bne.n	801696a <_malloc_r+0xde>
 80168ce:	6834      	ldr	r4, [r6, #0]
 80168d0:	4626      	mov	r6, r4
 80168d2:	2e00      	cmp	r6, #0
 80168d4:	d140      	bne.n	8016958 <_malloc_r+0xcc>
 80168d6:	6823      	ldr	r3, [r4, #0]
 80168d8:	4631      	mov	r1, r6
 80168da:	4638      	mov	r0, r7
 80168dc:	eb04 0803 	add.w	r8, r4, r3
 80168e0:	f000 fb36 	bl	8016f50 <_sbrk_r>
 80168e4:	4580      	cmp	r8, r0
 80168e6:	d13a      	bne.n	801695e <_malloc_r+0xd2>
 80168e8:	6821      	ldr	r1, [r4, #0]
 80168ea:	3503      	adds	r5, #3
 80168ec:	1a6d      	subs	r5, r5, r1
 80168ee:	f025 0503 	bic.w	r5, r5, #3
 80168f2:	3508      	adds	r5, #8
 80168f4:	2d0c      	cmp	r5, #12
 80168f6:	bf38      	it	cc
 80168f8:	250c      	movcc	r5, #12
 80168fa:	4629      	mov	r1, r5
 80168fc:	4638      	mov	r0, r7
 80168fe:	f7ff ffa5 	bl	801684c <sbrk_aligned>
 8016902:	3001      	adds	r0, #1
 8016904:	d02b      	beq.n	801695e <_malloc_r+0xd2>
 8016906:	6823      	ldr	r3, [r4, #0]
 8016908:	442b      	add	r3, r5
 801690a:	6023      	str	r3, [r4, #0]
 801690c:	e00e      	b.n	801692c <_malloc_r+0xa0>
 801690e:	6822      	ldr	r2, [r4, #0]
 8016910:	1b52      	subs	r2, r2, r5
 8016912:	d41e      	bmi.n	8016952 <_malloc_r+0xc6>
 8016914:	2a0b      	cmp	r2, #11
 8016916:	d916      	bls.n	8016946 <_malloc_r+0xba>
 8016918:	1961      	adds	r1, r4, r5
 801691a:	42a3      	cmp	r3, r4
 801691c:	6025      	str	r5, [r4, #0]
 801691e:	bf18      	it	ne
 8016920:	6059      	strne	r1, [r3, #4]
 8016922:	6863      	ldr	r3, [r4, #4]
 8016924:	bf08      	it	eq
 8016926:	6031      	streq	r1, [r6, #0]
 8016928:	5162      	str	r2, [r4, r5]
 801692a:	604b      	str	r3, [r1, #4]
 801692c:	4638      	mov	r0, r7
 801692e:	f104 060b 	add.w	r6, r4, #11
 8016932:	f000 fbbd 	bl	80170b0 <__malloc_unlock>
 8016936:	f026 0607 	bic.w	r6, r6, #7
 801693a:	1d23      	adds	r3, r4, #4
 801693c:	1af2      	subs	r2, r6, r3
 801693e:	d0b6      	beq.n	80168ae <_malloc_r+0x22>
 8016940:	1b9b      	subs	r3, r3, r6
 8016942:	50a3      	str	r3, [r4, r2]
 8016944:	e7b3      	b.n	80168ae <_malloc_r+0x22>
 8016946:	6862      	ldr	r2, [r4, #4]
 8016948:	42a3      	cmp	r3, r4
 801694a:	bf0c      	ite	eq
 801694c:	6032      	streq	r2, [r6, #0]
 801694e:	605a      	strne	r2, [r3, #4]
 8016950:	e7ec      	b.n	801692c <_malloc_r+0xa0>
 8016952:	4623      	mov	r3, r4
 8016954:	6864      	ldr	r4, [r4, #4]
 8016956:	e7b2      	b.n	80168be <_malloc_r+0x32>
 8016958:	4634      	mov	r4, r6
 801695a:	6876      	ldr	r6, [r6, #4]
 801695c:	e7b9      	b.n	80168d2 <_malloc_r+0x46>
 801695e:	230c      	movs	r3, #12
 8016960:	603b      	str	r3, [r7, #0]
 8016962:	4638      	mov	r0, r7
 8016964:	f000 fba4 	bl	80170b0 <__malloc_unlock>
 8016968:	e7a1      	b.n	80168ae <_malloc_r+0x22>
 801696a:	6025      	str	r5, [r4, #0]
 801696c:	e7de      	b.n	801692c <_malloc_r+0xa0>
 801696e:	bf00      	nop
 8016970:	2000fd98 	.word	0x2000fd98

08016974 <__sfputc_r>:
 8016974:	6893      	ldr	r3, [r2, #8]
 8016976:	3b01      	subs	r3, #1
 8016978:	2b00      	cmp	r3, #0
 801697a:	b410      	push	{r4}
 801697c:	6093      	str	r3, [r2, #8]
 801697e:	da08      	bge.n	8016992 <__sfputc_r+0x1e>
 8016980:	6994      	ldr	r4, [r2, #24]
 8016982:	42a3      	cmp	r3, r4
 8016984:	db01      	blt.n	801698a <__sfputc_r+0x16>
 8016986:	290a      	cmp	r1, #10
 8016988:	d103      	bne.n	8016992 <__sfputc_r+0x1e>
 801698a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801698e:	f7ff bc31 	b.w	80161f4 <__swbuf_r>
 8016992:	6813      	ldr	r3, [r2, #0]
 8016994:	1c58      	adds	r0, r3, #1
 8016996:	6010      	str	r0, [r2, #0]
 8016998:	7019      	strb	r1, [r3, #0]
 801699a:	4608      	mov	r0, r1
 801699c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169a0:	4770      	bx	lr

080169a2 <__sfputs_r>:
 80169a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a4:	4606      	mov	r6, r0
 80169a6:	460f      	mov	r7, r1
 80169a8:	4614      	mov	r4, r2
 80169aa:	18d5      	adds	r5, r2, r3
 80169ac:	42ac      	cmp	r4, r5
 80169ae:	d101      	bne.n	80169b4 <__sfputs_r+0x12>
 80169b0:	2000      	movs	r0, #0
 80169b2:	e007      	b.n	80169c4 <__sfputs_r+0x22>
 80169b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169b8:	463a      	mov	r2, r7
 80169ba:	4630      	mov	r0, r6
 80169bc:	f7ff ffda 	bl	8016974 <__sfputc_r>
 80169c0:	1c43      	adds	r3, r0, #1
 80169c2:	d1f3      	bne.n	80169ac <__sfputs_r+0xa>
 80169c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080169c8 <_vfiprintf_r>:
 80169c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169cc:	460d      	mov	r5, r1
 80169ce:	b09d      	sub	sp, #116	; 0x74
 80169d0:	4614      	mov	r4, r2
 80169d2:	4698      	mov	r8, r3
 80169d4:	4606      	mov	r6, r0
 80169d6:	b118      	cbz	r0, 80169e0 <_vfiprintf_r+0x18>
 80169d8:	6983      	ldr	r3, [r0, #24]
 80169da:	b90b      	cbnz	r3, 80169e0 <_vfiprintf_r+0x18>
 80169dc:	f7ff fde4 	bl	80165a8 <__sinit>
 80169e0:	4b89      	ldr	r3, [pc, #548]	; (8016c08 <_vfiprintf_r+0x240>)
 80169e2:	429d      	cmp	r5, r3
 80169e4:	d11b      	bne.n	8016a1e <_vfiprintf_r+0x56>
 80169e6:	6875      	ldr	r5, [r6, #4]
 80169e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169ea:	07d9      	lsls	r1, r3, #31
 80169ec:	d405      	bmi.n	80169fa <_vfiprintf_r+0x32>
 80169ee:	89ab      	ldrh	r3, [r5, #12]
 80169f0:	059a      	lsls	r2, r3, #22
 80169f2:	d402      	bmi.n	80169fa <_vfiprintf_r+0x32>
 80169f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169f6:	f7ff fe75 	bl	80166e4 <__retarget_lock_acquire_recursive>
 80169fa:	89ab      	ldrh	r3, [r5, #12]
 80169fc:	071b      	lsls	r3, r3, #28
 80169fe:	d501      	bpl.n	8016a04 <_vfiprintf_r+0x3c>
 8016a00:	692b      	ldr	r3, [r5, #16]
 8016a02:	b9eb      	cbnz	r3, 8016a40 <_vfiprintf_r+0x78>
 8016a04:	4629      	mov	r1, r5
 8016a06:	4630      	mov	r0, r6
 8016a08:	f7ff fc46 	bl	8016298 <__swsetup_r>
 8016a0c:	b1c0      	cbz	r0, 8016a40 <_vfiprintf_r+0x78>
 8016a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a10:	07dc      	lsls	r4, r3, #31
 8016a12:	d50e      	bpl.n	8016a32 <_vfiprintf_r+0x6a>
 8016a14:	f04f 30ff 	mov.w	r0, #4294967295
 8016a18:	b01d      	add	sp, #116	; 0x74
 8016a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a1e:	4b7b      	ldr	r3, [pc, #492]	; (8016c0c <_vfiprintf_r+0x244>)
 8016a20:	429d      	cmp	r5, r3
 8016a22:	d101      	bne.n	8016a28 <_vfiprintf_r+0x60>
 8016a24:	68b5      	ldr	r5, [r6, #8]
 8016a26:	e7df      	b.n	80169e8 <_vfiprintf_r+0x20>
 8016a28:	4b79      	ldr	r3, [pc, #484]	; (8016c10 <_vfiprintf_r+0x248>)
 8016a2a:	429d      	cmp	r5, r3
 8016a2c:	bf08      	it	eq
 8016a2e:	68f5      	ldreq	r5, [r6, #12]
 8016a30:	e7da      	b.n	80169e8 <_vfiprintf_r+0x20>
 8016a32:	89ab      	ldrh	r3, [r5, #12]
 8016a34:	0598      	lsls	r0, r3, #22
 8016a36:	d4ed      	bmi.n	8016a14 <_vfiprintf_r+0x4c>
 8016a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a3a:	f7ff fe54 	bl	80166e6 <__retarget_lock_release_recursive>
 8016a3e:	e7e9      	b.n	8016a14 <_vfiprintf_r+0x4c>
 8016a40:	2300      	movs	r3, #0
 8016a42:	9309      	str	r3, [sp, #36]	; 0x24
 8016a44:	2320      	movs	r3, #32
 8016a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a4e:	2330      	movs	r3, #48	; 0x30
 8016a50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016c14 <_vfiprintf_r+0x24c>
 8016a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a58:	f04f 0901 	mov.w	r9, #1
 8016a5c:	4623      	mov	r3, r4
 8016a5e:	469a      	mov	sl, r3
 8016a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a64:	b10a      	cbz	r2, 8016a6a <_vfiprintf_r+0xa2>
 8016a66:	2a25      	cmp	r2, #37	; 0x25
 8016a68:	d1f9      	bne.n	8016a5e <_vfiprintf_r+0x96>
 8016a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8016a6e:	d00b      	beq.n	8016a88 <_vfiprintf_r+0xc0>
 8016a70:	465b      	mov	r3, fp
 8016a72:	4622      	mov	r2, r4
 8016a74:	4629      	mov	r1, r5
 8016a76:	4630      	mov	r0, r6
 8016a78:	f7ff ff93 	bl	80169a2 <__sfputs_r>
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	f000 80aa 	beq.w	8016bd6 <_vfiprintf_r+0x20e>
 8016a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a84:	445a      	add	r2, fp
 8016a86:	9209      	str	r2, [sp, #36]	; 0x24
 8016a88:	f89a 3000 	ldrb.w	r3, [sl]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f000 80a2 	beq.w	8016bd6 <_vfiprintf_r+0x20e>
 8016a92:	2300      	movs	r3, #0
 8016a94:	f04f 32ff 	mov.w	r2, #4294967295
 8016a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a9c:	f10a 0a01 	add.w	sl, sl, #1
 8016aa0:	9304      	str	r3, [sp, #16]
 8016aa2:	9307      	str	r3, [sp, #28]
 8016aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8016aaa:	4654      	mov	r4, sl
 8016aac:	2205      	movs	r2, #5
 8016aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ab2:	4858      	ldr	r0, [pc, #352]	; (8016c14 <_vfiprintf_r+0x24c>)
 8016ab4:	f7e9 fb64 	bl	8000180 <memchr>
 8016ab8:	9a04      	ldr	r2, [sp, #16]
 8016aba:	b9d8      	cbnz	r0, 8016af4 <_vfiprintf_r+0x12c>
 8016abc:	06d1      	lsls	r1, r2, #27
 8016abe:	bf44      	itt	mi
 8016ac0:	2320      	movmi	r3, #32
 8016ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ac6:	0713      	lsls	r3, r2, #28
 8016ac8:	bf44      	itt	mi
 8016aca:	232b      	movmi	r3, #43	; 0x2b
 8016acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8016ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8016ad6:	d015      	beq.n	8016b04 <_vfiprintf_r+0x13c>
 8016ad8:	9a07      	ldr	r2, [sp, #28]
 8016ada:	4654      	mov	r4, sl
 8016adc:	2000      	movs	r0, #0
 8016ade:	f04f 0c0a 	mov.w	ip, #10
 8016ae2:	4621      	mov	r1, r4
 8016ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ae8:	3b30      	subs	r3, #48	; 0x30
 8016aea:	2b09      	cmp	r3, #9
 8016aec:	d94e      	bls.n	8016b8c <_vfiprintf_r+0x1c4>
 8016aee:	b1b0      	cbz	r0, 8016b1e <_vfiprintf_r+0x156>
 8016af0:	9207      	str	r2, [sp, #28]
 8016af2:	e014      	b.n	8016b1e <_vfiprintf_r+0x156>
 8016af4:	eba0 0308 	sub.w	r3, r0, r8
 8016af8:	fa09 f303 	lsl.w	r3, r9, r3
 8016afc:	4313      	orrs	r3, r2
 8016afe:	9304      	str	r3, [sp, #16]
 8016b00:	46a2      	mov	sl, r4
 8016b02:	e7d2      	b.n	8016aaa <_vfiprintf_r+0xe2>
 8016b04:	9b03      	ldr	r3, [sp, #12]
 8016b06:	1d19      	adds	r1, r3, #4
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	9103      	str	r1, [sp, #12]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	bfbb      	ittet	lt
 8016b10:	425b      	neglt	r3, r3
 8016b12:	f042 0202 	orrlt.w	r2, r2, #2
 8016b16:	9307      	strge	r3, [sp, #28]
 8016b18:	9307      	strlt	r3, [sp, #28]
 8016b1a:	bfb8      	it	lt
 8016b1c:	9204      	strlt	r2, [sp, #16]
 8016b1e:	7823      	ldrb	r3, [r4, #0]
 8016b20:	2b2e      	cmp	r3, #46	; 0x2e
 8016b22:	d10c      	bne.n	8016b3e <_vfiprintf_r+0x176>
 8016b24:	7863      	ldrb	r3, [r4, #1]
 8016b26:	2b2a      	cmp	r3, #42	; 0x2a
 8016b28:	d135      	bne.n	8016b96 <_vfiprintf_r+0x1ce>
 8016b2a:	9b03      	ldr	r3, [sp, #12]
 8016b2c:	1d1a      	adds	r2, r3, #4
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	9203      	str	r2, [sp, #12]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	bfb8      	it	lt
 8016b36:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b3a:	3402      	adds	r4, #2
 8016b3c:	9305      	str	r3, [sp, #20]
 8016b3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016c24 <_vfiprintf_r+0x25c>
 8016b42:	7821      	ldrb	r1, [r4, #0]
 8016b44:	2203      	movs	r2, #3
 8016b46:	4650      	mov	r0, sl
 8016b48:	f7e9 fb1a 	bl	8000180 <memchr>
 8016b4c:	b140      	cbz	r0, 8016b60 <_vfiprintf_r+0x198>
 8016b4e:	2340      	movs	r3, #64	; 0x40
 8016b50:	eba0 000a 	sub.w	r0, r0, sl
 8016b54:	fa03 f000 	lsl.w	r0, r3, r0
 8016b58:	9b04      	ldr	r3, [sp, #16]
 8016b5a:	4303      	orrs	r3, r0
 8016b5c:	3401      	adds	r4, #1
 8016b5e:	9304      	str	r3, [sp, #16]
 8016b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b64:	482c      	ldr	r0, [pc, #176]	; (8016c18 <_vfiprintf_r+0x250>)
 8016b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b6a:	2206      	movs	r2, #6
 8016b6c:	f7e9 fb08 	bl	8000180 <memchr>
 8016b70:	2800      	cmp	r0, #0
 8016b72:	d03f      	beq.n	8016bf4 <_vfiprintf_r+0x22c>
 8016b74:	4b29      	ldr	r3, [pc, #164]	; (8016c1c <_vfiprintf_r+0x254>)
 8016b76:	bb1b      	cbnz	r3, 8016bc0 <_vfiprintf_r+0x1f8>
 8016b78:	9b03      	ldr	r3, [sp, #12]
 8016b7a:	3307      	adds	r3, #7
 8016b7c:	f023 0307 	bic.w	r3, r3, #7
 8016b80:	3308      	adds	r3, #8
 8016b82:	9303      	str	r3, [sp, #12]
 8016b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b86:	443b      	add	r3, r7
 8016b88:	9309      	str	r3, [sp, #36]	; 0x24
 8016b8a:	e767      	b.n	8016a5c <_vfiprintf_r+0x94>
 8016b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b90:	460c      	mov	r4, r1
 8016b92:	2001      	movs	r0, #1
 8016b94:	e7a5      	b.n	8016ae2 <_vfiprintf_r+0x11a>
 8016b96:	2300      	movs	r3, #0
 8016b98:	3401      	adds	r4, #1
 8016b9a:	9305      	str	r3, [sp, #20]
 8016b9c:	4619      	mov	r1, r3
 8016b9e:	f04f 0c0a 	mov.w	ip, #10
 8016ba2:	4620      	mov	r0, r4
 8016ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ba8:	3a30      	subs	r2, #48	; 0x30
 8016baa:	2a09      	cmp	r2, #9
 8016bac:	d903      	bls.n	8016bb6 <_vfiprintf_r+0x1ee>
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d0c5      	beq.n	8016b3e <_vfiprintf_r+0x176>
 8016bb2:	9105      	str	r1, [sp, #20]
 8016bb4:	e7c3      	b.n	8016b3e <_vfiprintf_r+0x176>
 8016bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bba:	4604      	mov	r4, r0
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	e7f0      	b.n	8016ba2 <_vfiprintf_r+0x1da>
 8016bc0:	ab03      	add	r3, sp, #12
 8016bc2:	9300      	str	r3, [sp, #0]
 8016bc4:	462a      	mov	r2, r5
 8016bc6:	4b16      	ldr	r3, [pc, #88]	; (8016c20 <_vfiprintf_r+0x258>)
 8016bc8:	a904      	add	r1, sp, #16
 8016bca:	4630      	mov	r0, r6
 8016bcc:	f3af 8000 	nop.w
 8016bd0:	4607      	mov	r7, r0
 8016bd2:	1c78      	adds	r0, r7, #1
 8016bd4:	d1d6      	bne.n	8016b84 <_vfiprintf_r+0x1bc>
 8016bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bd8:	07d9      	lsls	r1, r3, #31
 8016bda:	d405      	bmi.n	8016be8 <_vfiprintf_r+0x220>
 8016bdc:	89ab      	ldrh	r3, [r5, #12]
 8016bde:	059a      	lsls	r2, r3, #22
 8016be0:	d402      	bmi.n	8016be8 <_vfiprintf_r+0x220>
 8016be2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016be4:	f7ff fd7f 	bl	80166e6 <__retarget_lock_release_recursive>
 8016be8:	89ab      	ldrh	r3, [r5, #12]
 8016bea:	065b      	lsls	r3, r3, #25
 8016bec:	f53f af12 	bmi.w	8016a14 <_vfiprintf_r+0x4c>
 8016bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016bf2:	e711      	b.n	8016a18 <_vfiprintf_r+0x50>
 8016bf4:	ab03      	add	r3, sp, #12
 8016bf6:	9300      	str	r3, [sp, #0]
 8016bf8:	462a      	mov	r2, r5
 8016bfa:	4b09      	ldr	r3, [pc, #36]	; (8016c20 <_vfiprintf_r+0x258>)
 8016bfc:	a904      	add	r1, sp, #16
 8016bfe:	4630      	mov	r0, r6
 8016c00:	f000 f880 	bl	8016d04 <_printf_i>
 8016c04:	e7e4      	b.n	8016bd0 <_vfiprintf_r+0x208>
 8016c06:	bf00      	nop
 8016c08:	080179a4 	.word	0x080179a4
 8016c0c:	080179c4 	.word	0x080179c4
 8016c10:	08017984 	.word	0x08017984
 8016c14:	080179e4 	.word	0x080179e4
 8016c18:	080179ee 	.word	0x080179ee
 8016c1c:	00000000 	.word	0x00000000
 8016c20:	080169a3 	.word	0x080169a3
 8016c24:	080179ea 	.word	0x080179ea

08016c28 <_printf_common>:
 8016c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c2c:	4616      	mov	r6, r2
 8016c2e:	4699      	mov	r9, r3
 8016c30:	688a      	ldr	r2, [r1, #8]
 8016c32:	690b      	ldr	r3, [r1, #16]
 8016c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c38:	4293      	cmp	r3, r2
 8016c3a:	bfb8      	it	lt
 8016c3c:	4613      	movlt	r3, r2
 8016c3e:	6033      	str	r3, [r6, #0]
 8016c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c44:	4607      	mov	r7, r0
 8016c46:	460c      	mov	r4, r1
 8016c48:	b10a      	cbz	r2, 8016c4e <_printf_common+0x26>
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	6033      	str	r3, [r6, #0]
 8016c4e:	6823      	ldr	r3, [r4, #0]
 8016c50:	0699      	lsls	r1, r3, #26
 8016c52:	bf42      	ittt	mi
 8016c54:	6833      	ldrmi	r3, [r6, #0]
 8016c56:	3302      	addmi	r3, #2
 8016c58:	6033      	strmi	r3, [r6, #0]
 8016c5a:	6825      	ldr	r5, [r4, #0]
 8016c5c:	f015 0506 	ands.w	r5, r5, #6
 8016c60:	d106      	bne.n	8016c70 <_printf_common+0x48>
 8016c62:	f104 0a19 	add.w	sl, r4, #25
 8016c66:	68e3      	ldr	r3, [r4, #12]
 8016c68:	6832      	ldr	r2, [r6, #0]
 8016c6a:	1a9b      	subs	r3, r3, r2
 8016c6c:	42ab      	cmp	r3, r5
 8016c6e:	dc26      	bgt.n	8016cbe <_printf_common+0x96>
 8016c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c74:	1e13      	subs	r3, r2, #0
 8016c76:	6822      	ldr	r2, [r4, #0]
 8016c78:	bf18      	it	ne
 8016c7a:	2301      	movne	r3, #1
 8016c7c:	0692      	lsls	r2, r2, #26
 8016c7e:	d42b      	bmi.n	8016cd8 <_printf_common+0xb0>
 8016c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c84:	4649      	mov	r1, r9
 8016c86:	4638      	mov	r0, r7
 8016c88:	47c0      	blx	r8
 8016c8a:	3001      	adds	r0, #1
 8016c8c:	d01e      	beq.n	8016ccc <_printf_common+0xa4>
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	68e5      	ldr	r5, [r4, #12]
 8016c92:	6832      	ldr	r2, [r6, #0]
 8016c94:	f003 0306 	and.w	r3, r3, #6
 8016c98:	2b04      	cmp	r3, #4
 8016c9a:	bf08      	it	eq
 8016c9c:	1aad      	subeq	r5, r5, r2
 8016c9e:	68a3      	ldr	r3, [r4, #8]
 8016ca0:	6922      	ldr	r2, [r4, #16]
 8016ca2:	bf0c      	ite	eq
 8016ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016ca8:	2500      	movne	r5, #0
 8016caa:	4293      	cmp	r3, r2
 8016cac:	bfc4      	itt	gt
 8016cae:	1a9b      	subgt	r3, r3, r2
 8016cb0:	18ed      	addgt	r5, r5, r3
 8016cb2:	2600      	movs	r6, #0
 8016cb4:	341a      	adds	r4, #26
 8016cb6:	42b5      	cmp	r5, r6
 8016cb8:	d11a      	bne.n	8016cf0 <_printf_common+0xc8>
 8016cba:	2000      	movs	r0, #0
 8016cbc:	e008      	b.n	8016cd0 <_printf_common+0xa8>
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	4652      	mov	r2, sl
 8016cc2:	4649      	mov	r1, r9
 8016cc4:	4638      	mov	r0, r7
 8016cc6:	47c0      	blx	r8
 8016cc8:	3001      	adds	r0, #1
 8016cca:	d103      	bne.n	8016cd4 <_printf_common+0xac>
 8016ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8016cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cd4:	3501      	adds	r5, #1
 8016cd6:	e7c6      	b.n	8016c66 <_printf_common+0x3e>
 8016cd8:	18e1      	adds	r1, r4, r3
 8016cda:	1c5a      	adds	r2, r3, #1
 8016cdc:	2030      	movs	r0, #48	; 0x30
 8016cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016ce2:	4422      	add	r2, r4
 8016ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016cec:	3302      	adds	r3, #2
 8016cee:	e7c7      	b.n	8016c80 <_printf_common+0x58>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	4622      	mov	r2, r4
 8016cf4:	4649      	mov	r1, r9
 8016cf6:	4638      	mov	r0, r7
 8016cf8:	47c0      	blx	r8
 8016cfa:	3001      	adds	r0, #1
 8016cfc:	d0e6      	beq.n	8016ccc <_printf_common+0xa4>
 8016cfe:	3601      	adds	r6, #1
 8016d00:	e7d9      	b.n	8016cb6 <_printf_common+0x8e>
	...

08016d04 <_printf_i>:
 8016d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d08:	7e0f      	ldrb	r7, [r1, #24]
 8016d0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016d0c:	2f78      	cmp	r7, #120	; 0x78
 8016d0e:	4691      	mov	r9, r2
 8016d10:	4680      	mov	r8, r0
 8016d12:	460c      	mov	r4, r1
 8016d14:	469a      	mov	sl, r3
 8016d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016d1a:	d807      	bhi.n	8016d2c <_printf_i+0x28>
 8016d1c:	2f62      	cmp	r7, #98	; 0x62
 8016d1e:	d80a      	bhi.n	8016d36 <_printf_i+0x32>
 8016d20:	2f00      	cmp	r7, #0
 8016d22:	f000 80d8 	beq.w	8016ed6 <_printf_i+0x1d2>
 8016d26:	2f58      	cmp	r7, #88	; 0x58
 8016d28:	f000 80a3 	beq.w	8016e72 <_printf_i+0x16e>
 8016d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016d34:	e03a      	b.n	8016dac <_printf_i+0xa8>
 8016d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016d3a:	2b15      	cmp	r3, #21
 8016d3c:	d8f6      	bhi.n	8016d2c <_printf_i+0x28>
 8016d3e:	a101      	add	r1, pc, #4	; (adr r1, 8016d44 <_printf_i+0x40>)
 8016d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016d44:	08016d9d 	.word	0x08016d9d
 8016d48:	08016db1 	.word	0x08016db1
 8016d4c:	08016d2d 	.word	0x08016d2d
 8016d50:	08016d2d 	.word	0x08016d2d
 8016d54:	08016d2d 	.word	0x08016d2d
 8016d58:	08016d2d 	.word	0x08016d2d
 8016d5c:	08016db1 	.word	0x08016db1
 8016d60:	08016d2d 	.word	0x08016d2d
 8016d64:	08016d2d 	.word	0x08016d2d
 8016d68:	08016d2d 	.word	0x08016d2d
 8016d6c:	08016d2d 	.word	0x08016d2d
 8016d70:	08016ebd 	.word	0x08016ebd
 8016d74:	08016de1 	.word	0x08016de1
 8016d78:	08016e9f 	.word	0x08016e9f
 8016d7c:	08016d2d 	.word	0x08016d2d
 8016d80:	08016d2d 	.word	0x08016d2d
 8016d84:	08016edf 	.word	0x08016edf
 8016d88:	08016d2d 	.word	0x08016d2d
 8016d8c:	08016de1 	.word	0x08016de1
 8016d90:	08016d2d 	.word	0x08016d2d
 8016d94:	08016d2d 	.word	0x08016d2d
 8016d98:	08016ea7 	.word	0x08016ea7
 8016d9c:	682b      	ldr	r3, [r5, #0]
 8016d9e:	1d1a      	adds	r2, r3, #4
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	602a      	str	r2, [r5, #0]
 8016da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016dac:	2301      	movs	r3, #1
 8016dae:	e0a3      	b.n	8016ef8 <_printf_i+0x1f4>
 8016db0:	6820      	ldr	r0, [r4, #0]
 8016db2:	6829      	ldr	r1, [r5, #0]
 8016db4:	0606      	lsls	r6, r0, #24
 8016db6:	f101 0304 	add.w	r3, r1, #4
 8016dba:	d50a      	bpl.n	8016dd2 <_printf_i+0xce>
 8016dbc:	680e      	ldr	r6, [r1, #0]
 8016dbe:	602b      	str	r3, [r5, #0]
 8016dc0:	2e00      	cmp	r6, #0
 8016dc2:	da03      	bge.n	8016dcc <_printf_i+0xc8>
 8016dc4:	232d      	movs	r3, #45	; 0x2d
 8016dc6:	4276      	negs	r6, r6
 8016dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016dcc:	485e      	ldr	r0, [pc, #376]	; (8016f48 <_printf_i+0x244>)
 8016dce:	230a      	movs	r3, #10
 8016dd0:	e019      	b.n	8016e06 <_printf_i+0x102>
 8016dd2:	680e      	ldr	r6, [r1, #0]
 8016dd4:	602b      	str	r3, [r5, #0]
 8016dd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016dda:	bf18      	it	ne
 8016ddc:	b236      	sxthne	r6, r6
 8016dde:	e7ef      	b.n	8016dc0 <_printf_i+0xbc>
 8016de0:	682b      	ldr	r3, [r5, #0]
 8016de2:	6820      	ldr	r0, [r4, #0]
 8016de4:	1d19      	adds	r1, r3, #4
 8016de6:	6029      	str	r1, [r5, #0]
 8016de8:	0601      	lsls	r1, r0, #24
 8016dea:	d501      	bpl.n	8016df0 <_printf_i+0xec>
 8016dec:	681e      	ldr	r6, [r3, #0]
 8016dee:	e002      	b.n	8016df6 <_printf_i+0xf2>
 8016df0:	0646      	lsls	r6, r0, #25
 8016df2:	d5fb      	bpl.n	8016dec <_printf_i+0xe8>
 8016df4:	881e      	ldrh	r6, [r3, #0]
 8016df6:	4854      	ldr	r0, [pc, #336]	; (8016f48 <_printf_i+0x244>)
 8016df8:	2f6f      	cmp	r7, #111	; 0x6f
 8016dfa:	bf0c      	ite	eq
 8016dfc:	2308      	moveq	r3, #8
 8016dfe:	230a      	movne	r3, #10
 8016e00:	2100      	movs	r1, #0
 8016e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016e06:	6865      	ldr	r5, [r4, #4]
 8016e08:	60a5      	str	r5, [r4, #8]
 8016e0a:	2d00      	cmp	r5, #0
 8016e0c:	bfa2      	ittt	ge
 8016e0e:	6821      	ldrge	r1, [r4, #0]
 8016e10:	f021 0104 	bicge.w	r1, r1, #4
 8016e14:	6021      	strge	r1, [r4, #0]
 8016e16:	b90e      	cbnz	r6, 8016e1c <_printf_i+0x118>
 8016e18:	2d00      	cmp	r5, #0
 8016e1a:	d04d      	beq.n	8016eb8 <_printf_i+0x1b4>
 8016e1c:	4615      	mov	r5, r2
 8016e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8016e22:	fb03 6711 	mls	r7, r3, r1, r6
 8016e26:	5dc7      	ldrb	r7, [r0, r7]
 8016e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016e2c:	4637      	mov	r7, r6
 8016e2e:	42bb      	cmp	r3, r7
 8016e30:	460e      	mov	r6, r1
 8016e32:	d9f4      	bls.n	8016e1e <_printf_i+0x11a>
 8016e34:	2b08      	cmp	r3, #8
 8016e36:	d10b      	bne.n	8016e50 <_printf_i+0x14c>
 8016e38:	6823      	ldr	r3, [r4, #0]
 8016e3a:	07de      	lsls	r6, r3, #31
 8016e3c:	d508      	bpl.n	8016e50 <_printf_i+0x14c>
 8016e3e:	6923      	ldr	r3, [r4, #16]
 8016e40:	6861      	ldr	r1, [r4, #4]
 8016e42:	4299      	cmp	r1, r3
 8016e44:	bfde      	ittt	le
 8016e46:	2330      	movle	r3, #48	; 0x30
 8016e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016e4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016e50:	1b52      	subs	r2, r2, r5
 8016e52:	6122      	str	r2, [r4, #16]
 8016e54:	f8cd a000 	str.w	sl, [sp]
 8016e58:	464b      	mov	r3, r9
 8016e5a:	aa03      	add	r2, sp, #12
 8016e5c:	4621      	mov	r1, r4
 8016e5e:	4640      	mov	r0, r8
 8016e60:	f7ff fee2 	bl	8016c28 <_printf_common>
 8016e64:	3001      	adds	r0, #1
 8016e66:	d14c      	bne.n	8016f02 <_printf_i+0x1fe>
 8016e68:	f04f 30ff 	mov.w	r0, #4294967295
 8016e6c:	b004      	add	sp, #16
 8016e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e72:	4835      	ldr	r0, [pc, #212]	; (8016f48 <_printf_i+0x244>)
 8016e74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016e78:	6829      	ldr	r1, [r5, #0]
 8016e7a:	6823      	ldr	r3, [r4, #0]
 8016e7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016e80:	6029      	str	r1, [r5, #0]
 8016e82:	061d      	lsls	r5, r3, #24
 8016e84:	d514      	bpl.n	8016eb0 <_printf_i+0x1ac>
 8016e86:	07df      	lsls	r7, r3, #31
 8016e88:	bf44      	itt	mi
 8016e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8016e8e:	6023      	strmi	r3, [r4, #0]
 8016e90:	b91e      	cbnz	r6, 8016e9a <_printf_i+0x196>
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	f023 0320 	bic.w	r3, r3, #32
 8016e98:	6023      	str	r3, [r4, #0]
 8016e9a:	2310      	movs	r3, #16
 8016e9c:	e7b0      	b.n	8016e00 <_printf_i+0xfc>
 8016e9e:	6823      	ldr	r3, [r4, #0]
 8016ea0:	f043 0320 	orr.w	r3, r3, #32
 8016ea4:	6023      	str	r3, [r4, #0]
 8016ea6:	2378      	movs	r3, #120	; 0x78
 8016ea8:	4828      	ldr	r0, [pc, #160]	; (8016f4c <_printf_i+0x248>)
 8016eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016eae:	e7e3      	b.n	8016e78 <_printf_i+0x174>
 8016eb0:	0659      	lsls	r1, r3, #25
 8016eb2:	bf48      	it	mi
 8016eb4:	b2b6      	uxthmi	r6, r6
 8016eb6:	e7e6      	b.n	8016e86 <_printf_i+0x182>
 8016eb8:	4615      	mov	r5, r2
 8016eba:	e7bb      	b.n	8016e34 <_printf_i+0x130>
 8016ebc:	682b      	ldr	r3, [r5, #0]
 8016ebe:	6826      	ldr	r6, [r4, #0]
 8016ec0:	6961      	ldr	r1, [r4, #20]
 8016ec2:	1d18      	adds	r0, r3, #4
 8016ec4:	6028      	str	r0, [r5, #0]
 8016ec6:	0635      	lsls	r5, r6, #24
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	d501      	bpl.n	8016ed0 <_printf_i+0x1cc>
 8016ecc:	6019      	str	r1, [r3, #0]
 8016ece:	e002      	b.n	8016ed6 <_printf_i+0x1d2>
 8016ed0:	0670      	lsls	r0, r6, #25
 8016ed2:	d5fb      	bpl.n	8016ecc <_printf_i+0x1c8>
 8016ed4:	8019      	strh	r1, [r3, #0]
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	6123      	str	r3, [r4, #16]
 8016eda:	4615      	mov	r5, r2
 8016edc:	e7ba      	b.n	8016e54 <_printf_i+0x150>
 8016ede:	682b      	ldr	r3, [r5, #0]
 8016ee0:	1d1a      	adds	r2, r3, #4
 8016ee2:	602a      	str	r2, [r5, #0]
 8016ee4:	681d      	ldr	r5, [r3, #0]
 8016ee6:	6862      	ldr	r2, [r4, #4]
 8016ee8:	2100      	movs	r1, #0
 8016eea:	4628      	mov	r0, r5
 8016eec:	f7e9 f948 	bl	8000180 <memchr>
 8016ef0:	b108      	cbz	r0, 8016ef6 <_printf_i+0x1f2>
 8016ef2:	1b40      	subs	r0, r0, r5
 8016ef4:	6060      	str	r0, [r4, #4]
 8016ef6:	6863      	ldr	r3, [r4, #4]
 8016ef8:	6123      	str	r3, [r4, #16]
 8016efa:	2300      	movs	r3, #0
 8016efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f00:	e7a8      	b.n	8016e54 <_printf_i+0x150>
 8016f02:	6923      	ldr	r3, [r4, #16]
 8016f04:	462a      	mov	r2, r5
 8016f06:	4649      	mov	r1, r9
 8016f08:	4640      	mov	r0, r8
 8016f0a:	47d0      	blx	sl
 8016f0c:	3001      	adds	r0, #1
 8016f0e:	d0ab      	beq.n	8016e68 <_printf_i+0x164>
 8016f10:	6823      	ldr	r3, [r4, #0]
 8016f12:	079b      	lsls	r3, r3, #30
 8016f14:	d413      	bmi.n	8016f3e <_printf_i+0x23a>
 8016f16:	68e0      	ldr	r0, [r4, #12]
 8016f18:	9b03      	ldr	r3, [sp, #12]
 8016f1a:	4298      	cmp	r0, r3
 8016f1c:	bfb8      	it	lt
 8016f1e:	4618      	movlt	r0, r3
 8016f20:	e7a4      	b.n	8016e6c <_printf_i+0x168>
 8016f22:	2301      	movs	r3, #1
 8016f24:	4632      	mov	r2, r6
 8016f26:	4649      	mov	r1, r9
 8016f28:	4640      	mov	r0, r8
 8016f2a:	47d0      	blx	sl
 8016f2c:	3001      	adds	r0, #1
 8016f2e:	d09b      	beq.n	8016e68 <_printf_i+0x164>
 8016f30:	3501      	adds	r5, #1
 8016f32:	68e3      	ldr	r3, [r4, #12]
 8016f34:	9903      	ldr	r1, [sp, #12]
 8016f36:	1a5b      	subs	r3, r3, r1
 8016f38:	42ab      	cmp	r3, r5
 8016f3a:	dcf2      	bgt.n	8016f22 <_printf_i+0x21e>
 8016f3c:	e7eb      	b.n	8016f16 <_printf_i+0x212>
 8016f3e:	2500      	movs	r5, #0
 8016f40:	f104 0619 	add.w	r6, r4, #25
 8016f44:	e7f5      	b.n	8016f32 <_printf_i+0x22e>
 8016f46:	bf00      	nop
 8016f48:	080179f5 	.word	0x080179f5
 8016f4c:	08017a06 	.word	0x08017a06

08016f50 <_sbrk_r>:
 8016f50:	b538      	push	{r3, r4, r5, lr}
 8016f52:	4d06      	ldr	r5, [pc, #24]	; (8016f6c <_sbrk_r+0x1c>)
 8016f54:	2300      	movs	r3, #0
 8016f56:	4604      	mov	r4, r0
 8016f58:	4608      	mov	r0, r1
 8016f5a:	602b      	str	r3, [r5, #0]
 8016f5c:	f7ea f902 	bl	8001164 <_sbrk>
 8016f60:	1c43      	adds	r3, r0, #1
 8016f62:	d102      	bne.n	8016f6a <_sbrk_r+0x1a>
 8016f64:	682b      	ldr	r3, [r5, #0]
 8016f66:	b103      	cbz	r3, 8016f6a <_sbrk_r+0x1a>
 8016f68:	6023      	str	r3, [r4, #0]
 8016f6a:	bd38      	pop	{r3, r4, r5, pc}
 8016f6c:	2000fda0 	.word	0x2000fda0

08016f70 <__sread>:
 8016f70:	b510      	push	{r4, lr}
 8016f72:	460c      	mov	r4, r1
 8016f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f78:	f000 f8a0 	bl	80170bc <_read_r>
 8016f7c:	2800      	cmp	r0, #0
 8016f7e:	bfab      	itete	ge
 8016f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016f82:	89a3      	ldrhlt	r3, [r4, #12]
 8016f84:	181b      	addge	r3, r3, r0
 8016f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f8a:	bfac      	ite	ge
 8016f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f8e:	81a3      	strhlt	r3, [r4, #12]
 8016f90:	bd10      	pop	{r4, pc}

08016f92 <__swrite>:
 8016f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f96:	461f      	mov	r7, r3
 8016f98:	898b      	ldrh	r3, [r1, #12]
 8016f9a:	05db      	lsls	r3, r3, #23
 8016f9c:	4605      	mov	r5, r0
 8016f9e:	460c      	mov	r4, r1
 8016fa0:	4616      	mov	r6, r2
 8016fa2:	d505      	bpl.n	8016fb0 <__swrite+0x1e>
 8016fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fa8:	2302      	movs	r3, #2
 8016faa:	2200      	movs	r2, #0
 8016fac:	f000 f868 	bl	8017080 <_lseek_r>
 8016fb0:	89a3      	ldrh	r3, [r4, #12]
 8016fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016fba:	81a3      	strh	r3, [r4, #12]
 8016fbc:	4632      	mov	r2, r6
 8016fbe:	463b      	mov	r3, r7
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc6:	f000 b817 	b.w	8016ff8 <_write_r>

08016fca <__sseek>:
 8016fca:	b510      	push	{r4, lr}
 8016fcc:	460c      	mov	r4, r1
 8016fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fd2:	f000 f855 	bl	8017080 <_lseek_r>
 8016fd6:	1c43      	adds	r3, r0, #1
 8016fd8:	89a3      	ldrh	r3, [r4, #12]
 8016fda:	bf15      	itete	ne
 8016fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8016fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016fe6:	81a3      	strheq	r3, [r4, #12]
 8016fe8:	bf18      	it	ne
 8016fea:	81a3      	strhne	r3, [r4, #12]
 8016fec:	bd10      	pop	{r4, pc}

08016fee <__sclose>:
 8016fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ff2:	f000 b813 	b.w	801701c <_close_r>
	...

08016ff8 <_write_r>:
 8016ff8:	b538      	push	{r3, r4, r5, lr}
 8016ffa:	4d07      	ldr	r5, [pc, #28]	; (8017018 <_write_r+0x20>)
 8016ffc:	4604      	mov	r4, r0
 8016ffe:	4608      	mov	r0, r1
 8017000:	4611      	mov	r1, r2
 8017002:	2200      	movs	r2, #0
 8017004:	602a      	str	r2, [r5, #0]
 8017006:	461a      	mov	r2, r3
 8017008:	f7ea f85b 	bl	80010c2 <_write>
 801700c:	1c43      	adds	r3, r0, #1
 801700e:	d102      	bne.n	8017016 <_write_r+0x1e>
 8017010:	682b      	ldr	r3, [r5, #0]
 8017012:	b103      	cbz	r3, 8017016 <_write_r+0x1e>
 8017014:	6023      	str	r3, [r4, #0]
 8017016:	bd38      	pop	{r3, r4, r5, pc}
 8017018:	2000fda0 	.word	0x2000fda0

0801701c <_close_r>:
 801701c:	b538      	push	{r3, r4, r5, lr}
 801701e:	4d06      	ldr	r5, [pc, #24]	; (8017038 <_close_r+0x1c>)
 8017020:	2300      	movs	r3, #0
 8017022:	4604      	mov	r4, r0
 8017024:	4608      	mov	r0, r1
 8017026:	602b      	str	r3, [r5, #0]
 8017028:	f7ea f867 	bl	80010fa <_close>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	d102      	bne.n	8017036 <_close_r+0x1a>
 8017030:	682b      	ldr	r3, [r5, #0]
 8017032:	b103      	cbz	r3, 8017036 <_close_r+0x1a>
 8017034:	6023      	str	r3, [r4, #0]
 8017036:	bd38      	pop	{r3, r4, r5, pc}
 8017038:	2000fda0 	.word	0x2000fda0

0801703c <_fstat_r>:
 801703c:	b538      	push	{r3, r4, r5, lr}
 801703e:	4d07      	ldr	r5, [pc, #28]	; (801705c <_fstat_r+0x20>)
 8017040:	2300      	movs	r3, #0
 8017042:	4604      	mov	r4, r0
 8017044:	4608      	mov	r0, r1
 8017046:	4611      	mov	r1, r2
 8017048:	602b      	str	r3, [r5, #0]
 801704a:	f7ea f862 	bl	8001112 <_fstat>
 801704e:	1c43      	adds	r3, r0, #1
 8017050:	d102      	bne.n	8017058 <_fstat_r+0x1c>
 8017052:	682b      	ldr	r3, [r5, #0]
 8017054:	b103      	cbz	r3, 8017058 <_fstat_r+0x1c>
 8017056:	6023      	str	r3, [r4, #0]
 8017058:	bd38      	pop	{r3, r4, r5, pc}
 801705a:	bf00      	nop
 801705c:	2000fda0 	.word	0x2000fda0

08017060 <_isatty_r>:
 8017060:	b538      	push	{r3, r4, r5, lr}
 8017062:	4d06      	ldr	r5, [pc, #24]	; (801707c <_isatty_r+0x1c>)
 8017064:	2300      	movs	r3, #0
 8017066:	4604      	mov	r4, r0
 8017068:	4608      	mov	r0, r1
 801706a:	602b      	str	r3, [r5, #0]
 801706c:	f7ea f861 	bl	8001132 <_isatty>
 8017070:	1c43      	adds	r3, r0, #1
 8017072:	d102      	bne.n	801707a <_isatty_r+0x1a>
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	b103      	cbz	r3, 801707a <_isatty_r+0x1a>
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	bd38      	pop	{r3, r4, r5, pc}
 801707c:	2000fda0 	.word	0x2000fda0

08017080 <_lseek_r>:
 8017080:	b538      	push	{r3, r4, r5, lr}
 8017082:	4d07      	ldr	r5, [pc, #28]	; (80170a0 <_lseek_r+0x20>)
 8017084:	4604      	mov	r4, r0
 8017086:	4608      	mov	r0, r1
 8017088:	4611      	mov	r1, r2
 801708a:	2200      	movs	r2, #0
 801708c:	602a      	str	r2, [r5, #0]
 801708e:	461a      	mov	r2, r3
 8017090:	f7ea f85a 	bl	8001148 <_lseek>
 8017094:	1c43      	adds	r3, r0, #1
 8017096:	d102      	bne.n	801709e <_lseek_r+0x1e>
 8017098:	682b      	ldr	r3, [r5, #0]
 801709a:	b103      	cbz	r3, 801709e <_lseek_r+0x1e>
 801709c:	6023      	str	r3, [r4, #0]
 801709e:	bd38      	pop	{r3, r4, r5, pc}
 80170a0:	2000fda0 	.word	0x2000fda0

080170a4 <__malloc_lock>:
 80170a4:	4801      	ldr	r0, [pc, #4]	; (80170ac <__malloc_lock+0x8>)
 80170a6:	f7ff bb1d 	b.w	80166e4 <__retarget_lock_acquire_recursive>
 80170aa:	bf00      	nop
 80170ac:	2000fd94 	.word	0x2000fd94

080170b0 <__malloc_unlock>:
 80170b0:	4801      	ldr	r0, [pc, #4]	; (80170b8 <__malloc_unlock+0x8>)
 80170b2:	f7ff bb18 	b.w	80166e6 <__retarget_lock_release_recursive>
 80170b6:	bf00      	nop
 80170b8:	2000fd94 	.word	0x2000fd94

080170bc <_read_r>:
 80170bc:	b538      	push	{r3, r4, r5, lr}
 80170be:	4d07      	ldr	r5, [pc, #28]	; (80170dc <_read_r+0x20>)
 80170c0:	4604      	mov	r4, r0
 80170c2:	4608      	mov	r0, r1
 80170c4:	4611      	mov	r1, r2
 80170c6:	2200      	movs	r2, #0
 80170c8:	602a      	str	r2, [r5, #0]
 80170ca:	461a      	mov	r2, r3
 80170cc:	f7e9 ffdc 	bl	8001088 <_read>
 80170d0:	1c43      	adds	r3, r0, #1
 80170d2:	d102      	bne.n	80170da <_read_r+0x1e>
 80170d4:	682b      	ldr	r3, [r5, #0]
 80170d6:	b103      	cbz	r3, 80170da <_read_r+0x1e>
 80170d8:	6023      	str	r3, [r4, #0]
 80170da:	bd38      	pop	{r3, r4, r5, pc}
 80170dc:	2000fda0 	.word	0x2000fda0

080170e0 <_init>:
 80170e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170e2:	bf00      	nop
 80170e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170e6:	bc08      	pop	{r3}
 80170e8:	469e      	mov	lr, r3
 80170ea:	4770      	bx	lr

080170ec <_fini>:
 80170ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ee:	bf00      	nop
 80170f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170f2:	bc08      	pop	{r3}
 80170f4:	469e      	mov	lr, r3
 80170f6:	4770      	bx	lr
