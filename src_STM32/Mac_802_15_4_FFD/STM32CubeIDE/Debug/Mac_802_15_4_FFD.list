
Mac_802_15_4_FFD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081fc  080081fc  000181fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000008  08008200  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000088  08008280  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001400  2000009c  08008291  0002009c  2**2
                  ALLOC
  9 ._user_heap_stack 00001404  2000149c  08008291  0002149c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000a6c  200300e0  200300e0  00030000  2**2
                  ALLOC
 14 .debug_line   00021626  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001c52c  00000000  00000000  000416ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000418f  00000000  00000000  0005dc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017a8  00000000  00000000  00061db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105744  00000000  00000000  00063558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000015e0  00000000  00000000  00168ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002cbf6  00000000  00000000  0016a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00196e76  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006844  00000000  00000000  00196ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000009c 	.word	0x2000009c
 800015c:	00000000 	.word	0x00000000
 8000160:	08007ac4 	.word	0x08007ac4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a0 	.word	0x200000a0
 800017c:	08007ac4 	.word	0x08007ac4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000524:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000526:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000528:	3304      	adds	r3, #4

0800052a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800052e:	d3f9      	bcc.n	8000524 <CopyDataInit>
  bx lr
 8000530:	4770      	bx	lr

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000532:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000534:	3004      	adds	r0, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000536:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>
  bx lr
 800053a:	4770      	bx	lr

0800053c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800053e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000540:	f001 f940 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <LoopForever+0x8>)
 8000546:	490c      	ldr	r1, [pc, #48]	; (8000578 <LoopForever+0xc>)
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <LoopForever+0x10>)
 800054a:	2300      	movs	r3, #0
 800054c:	f7ff ffed 	bl	800052a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <LoopForever+0x14>)
 8000552:	490c      	ldr	r1, [pc, #48]	; (8000584 <LoopForever+0x18>)
 8000554:	2300      	movs	r3, #0
 8000556:	f7ff ffee 	bl	8000536 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <LoopForever+0x1c>)
 800055c:	490b      	ldr	r1, [pc, #44]	; (800058c <LoopForever+0x20>)
 800055e:	2300      	movs	r3, #0
 8000560:	f7ff ffe9 	bl	8000536 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000564:	f006 f8ca 	bl	80066fc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000568:	f000 fdda 	bl	8001120 <main>

0800056c <LoopForever>:

LoopForever:
  b LoopForever
 800056c:	e7fe      	b.n	800056c <LoopForever>
 800056e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000570:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000574:	20000008 	.word	0x20000008
 8000578:	20000088 	.word	0x20000088
 800057c:	08008200 	.word	0x08008200
  INIT_BSS _sbss, _ebss
 8000580:	2000009c 	.word	0x2000009c
 8000584:	2000149c 	.word	0x2000149c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000588:	200300e0 	.word	0x200300e0
 800058c:	20030b4c 	.word	0x20030b4c

08000590 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC1_IRQHandler>

08000592 <APP_ENTRY_Init>:
static void APPE_StatusNot(SHCI_TL_CmdStatus_t status);
static void APPE_UserEvtRx(void * pPayload);


void APP_ENTRY_Init( APP_ENTRY_InitMode_t InitMode )
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	4603      	mov	r3, r0
 800059a:	71fb      	strb	r3, [r7, #7]
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800059c:	2101      	movs	r1, #1
 800059e:	2001      	movs	r0, #1
 80005a0:	f005 fe70 	bl	8006284 <UTIL_LPM_SetOffMode>
  Led_Init();
 80005a4:	f000 f83a 	bl	800061c <Led_Init>
  appe_Tl_Init(); /* Initialize all transport layers */
 80005a8:	f000 f804 	bl	80005b4 <appe_Tl_Init>
   * From now, the application is waiting for the ready event ( VS_HCI_C2_Ready )
   * received on the system channel before starting the BLE Stack
   * This system event is received with APPE_UserEvtRx()
   */

  return;
 80005ac:	bf00      	nop
}
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80005ba:	f004 fbe5 	bl	8004d88 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <appe_Tl_Init+0x50>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	2010      	movs	r0, #16
 80005c4:	f005 ff8a 	bl	80064dc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <appe_Tl_Init+0x54>)
 80005ca:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_StatusNot;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <appe_Tl_Init+0x58>)
 80005ce:	607b      	str	r3, [r7, #4]
  shci_init(APPE_UserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005d0:	463b      	mov	r3, r7
 80005d2:	4619      	mov	r1, r3
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <appe_Tl_Init+0x5c>)
 80005d6:	f004 fa99 	bl	8004b0c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0U;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <appe_Tl_Init+0x60>)
 80005e0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <appe_Tl_Init+0x64>)
 80005e4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005e6:	f240 533c 	movw	r3, #1340	; 0x53c
 80005ea:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fd07 	bl	8005004 <TL_MM_Init>

  TL_Enable();
 80005f6:	f004 fbc1 	bl	8004d7c <TL_Enable>

  return;
 80005fa:	bf00      	nop
}
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	08004b45 	.word	0x08004b45
 8000608:	20030834 	.word	0x20030834
 800060c:	08000637 	.word	0x08000637
 8000610:	0800064d 	.word	0x0800064d
 8000614:	20030940 	.word	0x20030940
 8000618:	200302f8 	.word	0x200302f8

0800061c <Led_Init>:

static void Led_Init( void )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /**
   * Leds Initialization
   */
  BSP_LED_Init(LED_BLUE);
 8000620:	2000      	movs	r0, #0
 8000622:	f002 f84b 	bl	80026bc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000626:	2001      	movs	r0, #1
 8000628:	f002 f848 	bl	80026bc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800062c:	2002      	movs	r0, #2
 800062e:	f002 f845 	bl	80026bc <BSP_LED_Init>
#endif
  return;
 8000632:	bf00      	nop
}
 8000634:	bd80      	pop	{r7, pc}

08000636 <APPE_StatusNot>:

static void APPE_StatusNot( SHCI_TL_CmdStatus_t status )
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
  return;
 8000640:	bf00      	nop
}
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <APPE_UserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_UserEvtRx( void * pPayload )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000654:	f004 fd4a 	bl	80050ec <TL_TRACES_Init>

  APP_FFD_MAC_802_15_4_Init(APP_MAC_802_15_4_FULL, &Mac_802_15_4_CmdBuffer);
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <APPE_UserEvtRx+0x24>)
 800065a:	2001      	movs	r0, #1
 800065c:	f001 f8ee 	bl	800183c <APP_FFD_MAC_802_15_4_Init>

  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000660:	2100      	movs	r1, #0
 8000662:	2001      	movs	r0, #1
 8000664:	f005 fe0e 	bl	8006284 <UTIL_LPM_SetOffMode>

  return;
 8000668:	bf00      	nop
}
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200300e0 	.word	0x200300e0

08000674 <APP_ENTRY_TL_MAC_802_15_4_Init>:

void APP_ENTRY_TL_MAC_802_15_4_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  Mac_802_15_4_ConfigBuffer.p_Mac_802_15_4_CmdRspBuffer = (uint8_t*)&Mac_802_15_4_CmdBuffer;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <APP_ENTRY_TL_MAC_802_15_4_Init+0x1c>)
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <APP_ENTRY_TL_MAC_802_15_4_Init+0x20>)
 800067c:	601a      	str	r2, [r3, #0]
  Mac_802_15_4_ConfigBuffer.p_Mac_802_15_4_NotAckBuffer = (uint8_t*)Mac_802_15_4_NotifRspEvtBuffer;
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <APP_ENTRY_TL_MAC_802_15_4_Init+0x1c>)
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <APP_ENTRY_TL_MAC_802_15_4_Init+0x24>)
 8000682:	605a      	str	r2, [r3, #4]
  TL_MAC_802_15_4_Init( &Mac_802_15_4_ConfigBuffer );
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <APP_ENTRY_TL_MAC_802_15_4_Init+0x1c>)
 8000686:	f004 fc71 	bl	8004f6c <TL_MAC_802_15_4_Init>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20030028 	.word	0x20030028
 8000694:	200300e0 	.word	0x200300e0
 8000698:	200301ec 	.word	0x200301ec

0800069c <APP_ENTRY_ProcessMsgFromRFCoreTask>:
 * @brief Process the messages coming from the RF Core.
 * @param  None
 * @retval None
 */
void APP_ENTRY_ProcessMsgFromRFCoreTask(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  if (pendingMsgFromRFCore != 0U)
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <APP_ENTRY_ProcessMsgFromRFCoreTask+0x1c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d004      	beq.n	80006b4 <APP_ENTRY_ProcessMsgFromRFCoreTask+0x18>
  {
      pendingMsgFromRFCore = 0U;
 80006aa:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <APP_ENTRY_ProcessMsgFromRFCoreTask+0x1c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
      MAC_802_15_4_CallBack_Processing();
 80006b0:	f004 fdb6 	bl	8005220 <MAC_802_15_4_CallBack_Processing>
  }
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000c0 	.word	0x200000c0

080006bc <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	330b      	adds	r3, #11
 80006c8:	1c99      	adds	r1, r3, #2
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7a9b      	ldrb	r3, [r3, #10]
 80006ce:	3b02      	subs	r3, #2
 80006d0:	461a      	mov	r2, r3
 80006d2:	2001      	movs	r0, #1
 80006d4:	f005 f884 	bl	80057e0 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f004 fccf 	bl	800507c <TL_MM_EvtDone>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006f8:	d05c      	beq.n	80007b4 <UTIL_SEQ_EvtIdle+0xcc>
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000700:	d873      	bhi.n	80007ea <UTIL_SEQ_EvtIdle+0x102>
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2b80      	cmp	r3, #128	; 0x80
 8000706:	d068      	beq.n	80007da <UTIL_SEQ_EvtIdle+0xf2>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b80      	cmp	r3, #128	; 0x80
 800070c:	d86d      	bhi.n	80007ea <UTIL_SEQ_EvtIdle+0x102>
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b20      	cmp	r3, #32
 8000712:	d847      	bhi.n	80007a4 <UTIL_SEQ_EvtIdle+0xbc>
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d367      	bcc.n	80007ea <UTIL_SEQ_EvtIdle+0x102>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	3b02      	subs	r3, #2
 800071e:	2b1e      	cmp	r3, #30
 8000720:	d863      	bhi.n	80007ea <UTIL_SEQ_EvtIdle+0x102>
 8000722:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <UTIL_SEQ_EvtIdle+0x40>)
 8000724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000728:	080007ad 	.word	0x080007ad
 800072c:	080007eb 	.word	0x080007eb
 8000730:	080007bd 	.word	0x080007bd
 8000734:	080007eb 	.word	0x080007eb
 8000738:	080007eb 	.word	0x080007eb
 800073c:	080007eb 	.word	0x080007eb
 8000740:	080007b5 	.word	0x080007b5
 8000744:	080007eb 	.word	0x080007eb
 8000748:	080007eb 	.word	0x080007eb
 800074c:	080007eb 	.word	0x080007eb
 8000750:	080007eb 	.word	0x080007eb
 8000754:	080007eb 	.word	0x080007eb
 8000758:	080007eb 	.word	0x080007eb
 800075c:	080007eb 	.word	0x080007eb
 8000760:	080007b5 	.word	0x080007b5
 8000764:	080007eb 	.word	0x080007eb
 8000768:	080007eb 	.word	0x080007eb
 800076c:	080007eb 	.word	0x080007eb
 8000770:	080007eb 	.word	0x080007eb
 8000774:	080007eb 	.word	0x080007eb
 8000778:	080007eb 	.word	0x080007eb
 800077c:	080007eb 	.word	0x080007eb
 8000780:	080007eb 	.word	0x080007eb
 8000784:	080007eb 	.word	0x080007eb
 8000788:	080007eb 	.word	0x080007eb
 800078c:	080007eb 	.word	0x080007eb
 8000790:	080007eb 	.word	0x080007eb
 8000794:	080007eb 	.word	0x080007eb
 8000798:	080007eb 	.word	0x080007eb
 800079c:	080007eb 	.word	0x080007eb
 80007a0:	080007b5 	.word	0x080007b5
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b40      	cmp	r3, #64	; 0x40
 80007a8:	d00c      	beq.n	80007c4 <UTIL_SEQ_EvtIdle+0xdc>
 80007aa:	e01e      	b.n	80007ea <UTIL_SEQ_EvtIdle+0x102>
  {
  case EVENT_ACK_FROM_RFCore_EVT:
    UTIL_SEQ_Run(0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f005 fd99 	bl	80062e4 <UTIL_SEQ_Run>
    break;
 80007b2:	e01f      	b.n	80007f4 <UTIL_SEQ_EvtIdle+0x10c>
  case EVENT_DEVICE_RESET_CNF:
  case EVENT_SET_CNF :
  case EVENT_DEVICE_STARTED_CNF:
  case EVENT_DATA_CNF:
    UTIL_SEQ_Run(TASK_MSG_FROM_RF_CORE);
 80007b4:	2008      	movs	r0, #8
 80007b6:	f005 fd95 	bl	80062e4 <UTIL_SEQ_Run>
    break;
 80007ba:	e01b      	b.n	80007f4 <UTIL_SEQ_EvtIdle+0x10c>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80007bc:	2004      	movs	r0, #4
 80007be:	f005 fedb 	bl	8006578 <UTIL_SEQ_SetEvt>
    break;
 80007c2:	e017      	b.n	80007f4 <UTIL_SEQ_EvtIdle+0x10c>
  case EVENT_SET_SRV_ASSOC_IND:
    g_srvSerReq = CFG_ASSO_PENDING;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <UTIL_SEQ_EvtIdle+0x114>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
    UTIL_SEQ_SetTask(TASK_COORD_SRV, CFG_SCH_PRIO_0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2002      	movs	r0, #2
 80007ce:	f005 fea7 	bl	8006520 <UTIL_SEQ_SetTask>
    UTIL_SEQ_Run(TASK_COORD_SRV);
 80007d2:	2002      	movs	r0, #2
 80007d4:	f005 fd86 	bl	80062e4 <UTIL_SEQ_Run>
    break;
 80007d8:	e00c      	b.n	80007f4 <UTIL_SEQ_EvtIdle+0x10c>
  case EVENT_SET_SRV_DATA_DATA_IND:
    g_srvDataReq = CFG_SRV_DATA_REQ_NBR;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <UTIL_SEQ_EvtIdle+0x118>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
    UTIL_SEQ_SetTask(TASK_COORD_DATA, CFG_SCH_PRIO_0);
 80007e0:	2100      	movs	r1, #0
 80007e2:	2004      	movs	r0, #4
 80007e4:	f005 fe9c 	bl	8006520 <UTIL_SEQ_SetTask>
    break;
 80007e8:	e004      	b.n	80007f4 <UTIL_SEQ_EvtIdle+0x10c>
  default :
    /* default case */
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80007ea:	f04f 30ff 	mov.w	r0, #4294967295
 80007ee:	f005 fd79 	bl	80062e4 <UTIL_SEQ_Run>
    break;
 80007f2:	bf00      	nop
  }
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000330 	.word	0x20000330
 8000800:	20000331 	.word	0x20000331

08000804 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1U<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 800080c:	2100      	movs	r1, #0
 800080e:	2010      	movs	r0, #16
 8000810:	f005 fe86 	bl	8006520 <UTIL_SEQ_SetTask>
  return;
 8000814:	bf00      	nop
}
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1U<< CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8000824:	2001      	movs	r0, #1
 8000826:	f005 fea7 	bl	8006578 <UTIL_SEQ_SetEvt>
  return;
 800082a:	bf00      	nop
}
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1U<< CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP );
 800083a:	2001      	movs	r0, #1
 800083c:	f005 febc 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  return;
 8000840:	bf00      	nop
}
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0U)
void DbgOutputInit( void )
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  HW_UART_Init(CFG_DEBUG_TRACE_UART);
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f8f1 	bl	8000a34 <HW_UART_Init>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces( uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	460b      	mov	r3, r1
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000864:	897a      	ldrh	r2, [r7, #10]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	2002      	movs	r0, #2
 800086c:	f000 f93c 	bl	8000ae8 <HW_UART_Transmit_DMA>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <APP_ENTRY_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ENTRY_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  p_mac_802_15_4_cmdbuffer = p_buffer;
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <APP_ENTRY_RegisterCmdBuffer+0x1c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000b8 	.word	0x200000b8

08000898 <MAC_802_15_4_GetCmdBuffer>:

TL_CmdPacket_t* MAC_802_15_4_GetCmdBuffer(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return (TL_CmdPacket_t*)p_mac_802_15_4_cmdbuffer;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <MAC_802_15_4_GetCmdBuffer+0x14>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	200000b8 	.word	0x200000b8

080008b0 <MAC_802_15_4_GetRspPayEvt>:

TL_Evt_t* MAC_802_15_4_GetRspPayEvt(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return &((TL_EvtPacket_t *)p_mac_802_15_4_cmdbuffer)->evtserial.evt;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <MAC_802_15_4_GetRspPayEvt+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3309      	adds	r3, #9
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	200000b8 	.word	0x200000b8

080008c8 <MAC_802_15_4_GetNotificationBuffer>:

TL_Evt_t* MAC_802_15_4_GetNotificationBuffer(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return &(p_mac_802_15_4_notif_RFCore_to_M4->evtserial.evt);
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <MAC_802_15_4_GetNotificationBuffer+0x14>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3309      	adds	r3, #9
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	200000bc 	.word	0x200000bc

080008e0 <Mac_802_15_4_CmdTransfer>:
 *
 * @param   pCmdBuffer : pointer to the buffer to send
 * @return  None
 */
void Mac_802_15_4_CmdTransfer(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  TL_MAC_802_15_4_SendCmd();
 80008e4:	f004 fb5a 	bl	8004f9c <TL_MAC_802_15_4_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_RFCore();
 80008e8:	f000 f823 	bl	8000932 <Wait_Getting_Ack_From_RFCore>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <TL_MAC_802_15_4_CmdEvtReceived>:

/* For reception of MAC 802.15.4 Cmd return */
void TL_MAC_802_15_4_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  Receive_Ack_From_RFCore();
 80008f8:	f000 f822 	bl	8000940 <Receive_Ack_From_RFCore>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <TL_MAC_802_15_4_NotReceived>:

/* For reception of MAC 802.15.4 Notification from RFCore */
void TL_MAC_802_15_4_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  p_mac_802_15_4_notif_RFCore_to_M4 = Notbuffer;
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <TL_MAC_802_15_4_NotReceived+0x1c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_RFCore();
 8000912:	f000 f81d 	bl	8000950 <Receive_Notification_From_RFCore>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000bc 	.word	0x200000bc

08000924 <Mac_802_15_4_PreCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Mac_802_15_4_PreCmdProcessing(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt( EVENT_SYNCHRO_BYPASS_IDLE );
 8000928:	2004      	movs	r0, #4
 800092a:	f005 fe45 	bl	80065b8 <UTIL_SEQ_WaitEvt>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}

08000932 <Wait_Getting_Ack_From_RFCore>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_RFCore(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_RFCore_EVT);
 8000936:	2002      	movs	r0, #2
 8000938:	f005 fe3e 	bl	80065b8 <UTIL_SEQ_WaitEvt>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <Receive_Ack_From_RFCore>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_RFCore(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_RFCore_EVT);
 8000944:	2002      	movs	r0, #2
 8000946:	f005 fe17 	bl	8006578 <UTIL_SEQ_SetEvt>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <Receive_Notification_From_RFCore>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_RFCore(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  pendingMsgFromRFCore = 1;
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <Receive_Notification_From_RFCore+0x18>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_RF_CORE,CFG_SCH_PRIO_0);
 800095a:	2100      	movs	r1, #0
 800095c:	2008      	movs	r0, #8
 800095e:	f005 fddf 	bl	8006520 <UTIL_SEQ_SetTask>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000c0 	.word	0x200000c0

0800096c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800097a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000990:	68fb      	ldr	r3, [r7, #12]
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800099e:	b480      	push	{r7}
 80009a0:	b085      	sub	sp, #20
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4013      	ands	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80009e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009f4:	68fb      	ldr	r3, [r7, #12]
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b085      	sub	sp, #20
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <HW_UART_Init>:
void (*HW_lpuart1RxCb)(void);
void (*HW_lpuart1TxCb)(void);
#endif

void HW_UART_Init(hw_uart_id_t hw_uart_id)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  switch (hw_uart_id)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <HW_UART_Init+0x16>
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d021      	beq.n	8000a8c <HW_UART_Init+0x58>
      HW_UART_INIT(lpuart1, LPUART1);
      break;
#endif

    default:
      break;
 8000a48:	e041      	b.n	8000ace <HW_UART_Init+0x9a>
      HW_UART_INIT(huart1, USART1);
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HW_UART_Init+0xa8>)
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a52:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a7c:	61da      	str	r2, [r3, #28]
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <HW_UART_Init+0xa4>)
 8000a86:	f002 fe9d 	bl	80037c4 <HAL_UART_Init>
      break;
 8000a8a:	e020      	b.n	8000ace <HW_UART_Init+0x9a>
      HW_UART_INIT(lpuart1, LPUART1);
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HW_UART_Init+0xac>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <HW_UART_Init+0xb0>)
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HW_UART_Init+0xac>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HW_UART_Init+0xac>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HW_UART_Init+0xac>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HW_UART_Init+0xac>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HW_UART_Init+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HW_UART_Init+0xac>)
 8000ab4:	220c      	movs	r2, #12
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HW_UART_Init+0xac>)
 8000aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000abe:	61da      	str	r2, [r3, #28]
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <HW_UART_Init+0xac>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HW_UART_Init+0xac>)
 8000ac8:	f002 fe7c 	bl	80037c4 <HAL_UART_Init>
      break;
 8000acc:	bf00      	nop
  }

  return;
 8000ace:	bf00      	nop
}
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000c4 	.word	0x200000c4
 8000adc:	40013800 	.word	0x40013800
 8000ae0:	200001bc 	.word	0x200001bc
 8000ae4:	40008000 	.word	0x40008000

08000ae8 <HW_UART_Transmit_DMA>:

  return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	4613      	mov	r3, r2
 8000af8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8000afe:	2300      	movs	r3, #0
 8000b00:	75bb      	strb	r3, [r7, #22]

  switch (hw_uart_id)
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <HW_UART_Transmit_DMA+0x26>
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d00f      	beq.n	8000b2c <HW_UART_Transmit_DMA+0x44>
      hal_status = HAL_UART_Transmit_DMA(&lpuart1, p_data, size);
      break;
#endif

    default:
      break;
 8000b0c:	e01d      	b.n	8000b4a <HW_UART_Transmit_DMA+0x62>
      HW_huart1TxCb = cb;
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <HW_UART_Transmit_DMA+0xa4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6013      	str	r3, [r2, #0]
      huart1.Instance = USART1;
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HW_UART_Transmit_DMA+0xa8>)
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HW_UART_Transmit_DMA+0xac>)
 8000b18:	601a      	str	r2, [r3, #0]
      hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8000b1a:	89bb      	ldrh	r3, [r7, #12]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	481b      	ldr	r0, [pc, #108]	; (8000b90 <HW_UART_Transmit_DMA+0xa8>)
 8000b22:	f002 fe9f 	bl	8003864 <HAL_UART_Transmit_DMA>
 8000b26:	4603      	mov	r3, r0
 8000b28:	75fb      	strb	r3, [r7, #23]
      break;
 8000b2a:	e00e      	b.n	8000b4a <HW_UART_Transmit_DMA+0x62>
      HW_lpuart1TxCb = cb;
 8000b2c:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <HW_UART_Transmit_DMA+0xb0>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
      lpuart1.Instance = LPUART1;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HW_UART_Transmit_DMA+0xb4>)
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <HW_UART_Transmit_DMA+0xb8>)
 8000b36:	601a      	str	r2, [r3, #0]
      hal_status = HAL_UART_Transmit_DMA(&lpuart1, p_data, size);
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4817      	ldr	r0, [pc, #92]	; (8000b9c <HW_UART_Transmit_DMA+0xb4>)
 8000b40:	f002 fe90 	bl	8003864 <HAL_UART_Transmit_DMA>
 8000b44:	4603      	mov	r3, r0
 8000b46:	75fb      	strb	r3, [r7, #23]
      break;
 8000b48:	bf00      	nop
  }

  switch (hal_status)
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d817      	bhi.n	8000b80 <HW_UART_Transmit_DMA+0x98>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <HW_UART_Transmit_DMA+0x70>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b69 	.word	0x08000b69
 8000b5c:	08000b6f 	.word	0x08000b6f
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000b7b 	.word	0x08000b7b
  {
    case HAL_OK:
      hw_status = hw_uart_ok;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	75bb      	strb	r3, [r7, #22]
      break;
 8000b6c:	e009      	b.n	8000b82 <HW_UART_Transmit_DMA+0x9a>

    case HAL_ERROR:
      hw_status = hw_uart_error;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	75bb      	strb	r3, [r7, #22]
      break;
 8000b72:	e006      	b.n	8000b82 <HW_UART_Transmit_DMA+0x9a>

    case HAL_BUSY:
      hw_status = hw_uart_busy;
 8000b74:	2302      	movs	r3, #2
 8000b76:	75bb      	strb	r3, [r7, #22]
      break;
 8000b78:	e003      	b.n	8000b82 <HW_UART_Transmit_DMA+0x9a>

    case HAL_TIMEOUT:
      hw_status = hw_uart_to;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	75bb      	strb	r3, [r7, #22]
      break;
 8000b7e:	e000      	b.n	8000b82 <HW_UART_Transmit_DMA+0x9a>

    default:
      break;
 8000b80:	bf00      	nop
  }

  return hw_status;
 8000b82:	7dbb      	ldrb	r3, [r7, #22]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200001b8 	.word	0x200001b8
 8000b90:	200000c4 	.word	0x200000c4
 8000b94:	40013800 	.word	0x40013800
 8000b98:	200002b0 	.word	0x200002b0
 8000b9c:	200001bc 	.word	0x200001bc
 8000ba0:	40008000 	.word	0x40008000

08000ba4 <HW_UART_Interrupt_Handler>:

void HW_UART_Interrupt_Handler(hw_uart_id_t hw_uart_id)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  switch (hw_uart_id)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <HW_UART_Interrupt_Handler+0x16>
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d004      	beq.n	8000bc2 <HW_UART_Interrupt_Handler+0x1e>
      HAL_UART_IRQHandler(&lpuart1);
      break;
#endif

    default:
      break;
 8000bb8:	e007      	b.n	8000bca <HW_UART_Interrupt_Handler+0x26>
      HAL_UART_IRQHandler(&huart1);
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <HW_UART_Interrupt_Handler+0x30>)
 8000bbc:	f002 fed2 	bl	8003964 <HAL_UART_IRQHandler>
      break;
 8000bc0:	e003      	b.n	8000bca <HW_UART_Interrupt_Handler+0x26>
      HAL_UART_IRQHandler(&lpuart1);
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HW_UART_Interrupt_Handler+0x34>)
 8000bc4:	f002 fece 	bl	8003964 <HAL_UART_IRQHandler>
      break;
 8000bc8:	bf00      	nop
  }

  return;
 8000bca:	bf00      	nop
}
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000c4 	.word	0x200000c4
 8000bd8:	200001bc 	.word	0x200001bc

08000bdc <HW_UART_DMA_Interrupt_Handler>:

void HW_UART_DMA_Interrupt_Handler(hw_uart_id_t hw_uart_id)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  switch (hw_uart_id)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <HW_UART_DMA_Interrupt_Handler+0x16>
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d006      	beq.n	8000bfe <HW_UART_DMA_Interrupt_Handler+0x22>
      HAL_DMA_IRQHandler(lpuart1.hdmatx);
      break;
#endif

    default:
      break;
 8000bf0:	e00b      	b.n	8000c0a <HW_UART_DMA_Interrupt_Handler+0x2e>
      HAL_DMA_IRQHandler(huart1.hdmatx);
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HW_UART_DMA_Interrupt_Handler+0x38>)
 8000bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 f98d 	bl	8002f16 <HAL_DMA_IRQHandler>
      break;
 8000bfc:	e005      	b.n	8000c0a <HW_UART_DMA_Interrupt_Handler+0x2e>
      HAL_DMA_IRQHandler(lpuart1.hdmatx);
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HW_UART_DMA_Interrupt_Handler+0x3c>)
 8000c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f987 	bl	8002f16 <HAL_DMA_IRQHandler>
      break;
 8000c08:	bf00      	nop
  }

  return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000c4 	.word	0x200000c4
 8000c18:	200001bc 	.word	0x200001bc

08000c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]

  switch ((uint32_t)huart->Instance)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a7f      	ldr	r2, [pc, #508]	; (8000e38 <HAL_UART_MspInit+0x21c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d07d      	beq.n	8000d3a <HAL_UART_MspInit+0x11e>
 8000c3e:	4a7f      	ldr	r2, [pc, #508]	; (8000e3c <HAL_UART_MspInit+0x220>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	f040 80f4 	bne.w	8000e2e <HAL_UART_MspInit+0x212>
  {
#if (CFG_HW_USART1_ENABLED == 1)
    case (uint32_t)USART1:
      HW_UART_MSP_UART_INIT( huart1, USART1 );
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff fea9 	bl	800099e <LL_AHB2_GRP1_EnableClock>
 8000c4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c50:	f7ff fed7 	bl	8000a02 <LL_APB2_GRP1_EnableClock>
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	2302      	movs	r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	2303      	movs	r3, #3
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	2307      	movs	r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4874      	ldr	r0, [pc, #464]	; (8000e40 <HAL_UART_MspInit+0x224>)
 8000c70:	f002 faa2 	bl	80031b8 <HAL_GPIO_Init>
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff fe92 	bl	800099e <LL_AHB2_GRP1_EnableClock>
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	2302      	movs	r3, #2
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	2303      	movs	r3, #3
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	486a      	ldr	r0, [pc, #424]	; (8000e40 <HAL_UART_MspInit+0x224>)
 8000c96:	f002 fa8f 	bl	80031b8 <HAL_GPIO_Init>
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fe7f 	bl	800099e <LL_AHB2_GRP1_EnableClock>
 8000ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	2302      	movs	r3, #2
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	2303      	movs	r3, #3
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f002 fa7a 	bl	80031b8 <HAL_GPIO_Init>
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	2024      	movs	r0, #36	; 0x24
 8000cca:	f001 ff0e 	bl	8002aea <HAL_NVIC_SetPriority>
 8000cce:	2024      	movs	r0, #36	; 0x24
 8000cd0:	f001 ff25 	bl	8002b1e <HAL_NVIC_EnableIRQ>
#if (CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
      HW_UART_MSP_TX_DMA_INIT( huart1, USART1 );
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fe49 	bl	800096c <LL_AHB1_GRP1_EnableClock>
 8000cda:	2004      	movs	r0, #4
 8000cdc:	f7ff fe46 	bl	800096c <LL_AHB1_GRP1_EnableClock>
 8000ce0:	4b58      	ldr	r3, [pc, #352]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000ce2:	4a59      	ldr	r2, [pc, #356]	; (8000e48 <HAL_UART_MspInit+0x22c>)
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	4b57      	ldr	r3, [pc, #348]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000ce8:	220f      	movs	r2, #15
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	4b55      	ldr	r3, [pc, #340]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000cee:	2210      	movs	r2, #16
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	4b51      	ldr	r3, [pc, #324]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
 8000d16:	484b      	ldr	r0, [pc, #300]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000d18:	f001 ff1c 	bl	8002b54 <HAL_DMA_Init>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a49      	ldr	r2, [pc, #292]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000d20:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d22:	4a48      	ldr	r2, [pc, #288]	; (8000e44 <HAL_UART_MspInit+0x228>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6293      	str	r3, [r2, #40]	; 0x28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	203a      	movs	r0, #58	; 0x3a
 8000d2e:	f001 fedc 	bl	8002aea <HAL_NVIC_SetPriority>
 8000d32:	203a      	movs	r0, #58	; 0x3a
 8000d34:	f001 fef3 	bl	8002b1e <HAL_NVIC_EnableIRQ>
#endif
    break;
 8000d38:	e07a      	b.n	8000e30 <HAL_UART_MspInit+0x214>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
    case (uint32_t)LPUART1:
      HW_UART_MSP_UART_INIT( lpuart1, LPUART1 );
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fe2f 	bl	800099e <LL_AHB2_GRP1_EnableClock>
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fe45 	bl	80009d0 <LL_APB1_GRP2_EnableClock>
 8000d46:	2304      	movs	r3, #4
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	2303      	movs	r3, #3
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	2308      	movs	r3, #8
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f002 fa28 	bl	80031b8 <HAL_GPIO_Init>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fe18 	bl	800099e <LL_AHB2_GRP1_EnableClock>
 8000d6e:	2308      	movs	r3, #8
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	2302      	movs	r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	2308      	movs	r3, #8
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f002 fa14 	bl	80031b8 <HAL_GPIO_Init>
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fe04 	bl	800099e <LL_AHB2_GRP1_EnableClock>
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	2302      	movs	r3, #2
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	2303      	movs	r3, #3
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	2308      	movs	r3, #8
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f002 fa00 	bl	80031b8 <HAL_GPIO_Init>
 8000db8:	2200      	movs	r2, #0
 8000dba:	210f      	movs	r1, #15
 8000dbc:	2025      	movs	r0, #37	; 0x25
 8000dbe:	f001 fe94 	bl	8002aea <HAL_NVIC_SetPriority>
 8000dc2:	2025      	movs	r0, #37	; 0x25
 8000dc4:	f001 feab 	bl	8002b1e <HAL_NVIC_EnableIRQ>
#if (CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
      HW_UART_MSP_TX_DMA_INIT( lpuart1, LPUART1 );
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fdcf 	bl	800096c <LL_AHB1_GRP1_EnableClock>
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f7ff fdcc 	bl	800096c <LL_AHB1_GRP1_EnableClock>
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_UART_MspInit+0x234>)
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000ddc:	2211      	movs	r2, #17
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000de2:	2210      	movs	r2, #16
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
 8000e0a:	4810      	ldr	r0, [pc, #64]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000e0c:	f001 fea2 	bl	8002b54 <HAL_DMA_Init>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000e14:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e16:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_UART_MspInit+0x230>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6293      	str	r3, [r2, #40]	; 0x28
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	210f      	movs	r1, #15
 8000e20:	200e      	movs	r0, #14
 8000e22:	f001 fe62 	bl	8002aea <HAL_NVIC_SetPriority>
 8000e26:	200e      	movs	r0, #14
 8000e28:	f001 fe79 	bl	8002b1e <HAL_NVIC_EnableIRQ>
#endif
    break;
 8000e2c:	e000      	b.n	8000e30 <HAL_UART_MspInit+0x214>
#endif

    default:
      break;
 8000e2e:	bf00      	nop
  }

  return;
 8000e30:	bf00      	nop
}
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40008000 	.word	0x40008000
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	48000400 	.word	0x48000400
 8000e44:	20000158 	.word	0x20000158
 8000e48:	40020444 	.word	0x40020444
 8000e4c:	20000250 	.word	0x20000250
 8000e50:	40020044 	.word	0x40020044

08000e54 <HAL_UART_TxCpltCallback>:

  return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)huart->Instance)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_UART_TxCpltCallback+0x4c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00a      	beq.n	8000e7c <HAL_UART_TxCpltCallback+0x28>
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_UART_TxCpltCallback+0x50>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d10f      	bne.n	8000e8c <HAL_UART_TxCpltCallback+0x38>
  {
#if (CFG_HW_USART1_ENABLED == 1)
    case (uint32_t)USART1:
      if(HW_huart1TxCb)
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_UART_TxCpltCallback+0x54>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00d      	beq.n	8000e90 <HAL_UART_TxCpltCallback+0x3c>
            {
              HW_huart1TxCb();
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_UART_TxCpltCallback+0x54>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4798      	blx	r3
            }
    break;
 8000e7a:	e009      	b.n	8000e90 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
    case (uint32_t)LPUART1:
      if(HW_lpuart1TxCb)
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_UART_TxCpltCallback+0x58>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d007      	beq.n	8000e94 <HAL_UART_TxCpltCallback+0x40>
            {
              HW_lpuart1TxCb();
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_UART_TxCpltCallback+0x58>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4798      	blx	r3
            }
    break;
 8000e8a:	e003      	b.n	8000e94 <HAL_UART_TxCpltCallback+0x40>
#endif

    default:
      break;
 8000e8c:	bf00      	nop
 8000e8e:	e002      	b.n	8000e96 <HAL_UART_TxCpltCallback+0x42>
    break;
 8000e90:	bf00      	nop
 8000e92:	e000      	b.n	8000e96 <HAL_UART_TxCpltCallback+0x42>
    break;
 8000e94:	bf00      	nop
  }

  return;
 8000e96:	bf00      	nop
}
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40008000 	.word	0x40008000
 8000ea4:	40013800 	.word	0x40013800
 8000ea8:	200001b8 	.word	0x200001b8
 8000eac:	200002b0 	.word	0x200002b0

08000eb0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000eba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000ebe:	4905      	ldr	r1, [pc, #20]	; (8000ed4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	58000800 	.word	0x58000800

08000ed8 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000ee2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000ee6:	4905      	ldr	r1, [pc, #20]	; (8000efc <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	58000800 	.word	0x58000800

08000f00 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d101      	bne.n	8000f3a <LL_RCC_LSE_IsReady+0x18>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_RCC_LSE_IsReady+0x1a>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_RCC_SetRFWKPClockSource>:
  * @note   (*) Value not defined for all devices
  *
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRFWKPClockSource(uint32_t Source)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ff2:	d101      	bne.n	8000ff8 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001018:	d101      	bne.n	800101e <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_AHB3_GRP1_EnableClock>:
{
 800102a:	b480      	push	{r7}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4313      	orrs	r3, r2
 8001040:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	041b      	lsls	r3, r3, #16
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	605a      	str	r2, [r3, #4]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	615a      	str	r2, [r3, #20]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	615a      	str	r2, [r3, #20]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	609a      	str	r2, [r3, #8]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	619a      	str	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <main>:
  * @param  None
  * @retval 0
  */

int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <main+0x4c>)
 8001126:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800112a:	611a      	str	r2, [r3, #16]

  /* Initialize the HAL */
  HAL_Init();
 800112c:	f001 fb5e 	bl	80027ec <HAL_Init>


  BSP_LED_Init(LED1);
 8001130:	2000      	movs	r0, #0
 8001132:	f001 fac3 	bl	80026bc <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001136:	2001      	movs	r0, #1
 8001138:	f001 fac0 	bl	80026bc <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800113c:	2002      	movs	r0, #2
 800113e:	f001 fabd 	bl	80026bc <BSP_LED_Init>

  /* Reset HW IP IPCC/Backup Domain */
  Reset_Device();
 8001142:	f000 f817 	bl	8001174 <Reset_Device>

  /*Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f856 	bl	80011f6 <SystemClock_Config>

  /* Configure the system Power Mode */
  SystemPower_Config();
 800114a:	f000 f868 	bl	800121e <SystemPower_Config>

  Init_Debug();
 800114e:	f000 f870 	bl	8001232 <Init_Debug>

  APP_DBG("**** FFD MAC 802.15.4 EXAMPLE ****");
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <main+0x50>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f978 	bl	800144c <logApplication>

  /* Application init */
  APP_ENTRY_Init(APPE_FULL);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fa18 	bl	8000592 <APP_ENTRY_Init>

  /* Main Loop  */
  while (1)
  {

    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	f005 f8bd 	bl	80062e4 <UTIL_SEQ_Run>
 800116a:	e7fa      	b.n	8001162 <main+0x42>
 800116c:	58004000 	.word	0x58004000
 8001170:	08007adc 	.word	0x08007adc

08001174 <Reset_Device>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Device( void )
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001178:	f000 f826 	bl	80011c8 <Reset_BackupDomain>
  Reset_IPCC();
 800117c:	f000 f802 	bl	8001184 <Reset_IPCC>
#endif

  return;
 8001180:	bf00      	nop
}
 8001182:	bd80      	pop	{r7, pc}

08001184 <Reset_IPCC>:
 *
 * @param  None
 * @retval None
 */
static void Reset_IPCC( void )
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001188:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800118c:	f7ff ff4d 	bl	800102a <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001190:	213f      	movs	r1, #63	; 0x3f
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <Reset_IPCC+0x40>)
 8001194:	f7ff ffa8 	bl	80010e8 <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001198:	213f      	movs	r1, #63	; 0x3f
 800119a:	480a      	ldr	r0, [pc, #40]	; (80011c4 <Reset_IPCC+0x40>)
 800119c:	f7ff ffb2 	bl	8001104 <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80011a0:	213f      	movs	r1, #63	; 0x3f
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <Reset_IPCC+0x40>)
 80011a4:	f7ff ff5a 	bl	800105c <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80011a8:	213f      	movs	r1, #63	; 0x3f
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <Reset_IPCC+0x40>)
 80011ac:	f7ff ff79 	bl	80010a2 <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80011b0:	213f      	movs	r1, #63	; 0x3f
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <Reset_IPCC+0x40>)
 80011b4:	f7ff ff64 	bl	8001080 <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80011b8:	213f      	movs	r1, #63	; 0x3f
 80011ba:	4802      	ldr	r0, [pc, #8]	; (80011c4 <Reset_IPCC+0x40>)
 80011bc:	f7ff ff83 	bl	80010c6 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80011c0:	bf00      	nop
}
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	58000c00 	.word	0x58000c00

080011c8 <Reset_BackupDomain>:
 *
 * @param  None
 * @retval None
 */
static void Reset_BackupDomain( void )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80011cc:	f7ff ff07 	bl	8000fde <LL_RCC_IsActiveFlag_PINRST>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00d      	beq.n	80011f2 <Reset_BackupDomain+0x2a>
 80011d6:	f7ff ff15 	bl	8001004 <LL_RCC_IsActiveFlag_SFTRST>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d108      	bne.n	80011f2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80011e0:	f002 f98c 	bl	80034fc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80011e4:	f002 f98a 	bl	80034fc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80011e8:	f7ff fed7 	bl	8000f9a <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80011ec:	f7ff fee6 	bl	8000fbc <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
}
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <SystemClock_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemClock_Config( void )
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /**
   *  Write twice the value to flush the APB-AHB bridge to ensure the  bit is written
   */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80011fa:	f002 f97f 	bl	80034fc <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 80011fe:	f002 f97d 	bl	80034fc <HAL_PWR_EnableBkUpAccess>

  /**
   * Select LSE clock
   */
  LL_RCC_LSE_Enable();
 8001202:	f7ff fe7d 	bl	8000f00 <LL_RCC_LSE_Enable>
  while(!LL_RCC_LSE_IsReady());
 8001206:	bf00      	nop
 8001208:	f7ff fe8b 	bl	8000f22 <LL_RCC_LSE_IsReady>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0fa      	beq.n	8001208 <SystemClock_Config+0x12>

  /**
   * Select wakeup source of BLE RF
   */
  LL_RCC_SetRFWKPClockSource(LL_RCC_RFWKP_CLKSOURCE_LSE);
 8001212:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001216:	f7ff fe96 	bl	8000f46 <LL_RCC_SetRFWKPClockSource>

  return;
 800121a:	bf00      	nop
}
 800121c:	bd80      	pop	{r7, pc}

0800121e <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001222:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001226:	f7ff fea4 	bl	8000f72 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 800122a:	f005 f819 	bl	8006260 <UTIL_LPM_Init>

  return;
 800122e:	bf00      	nop
}
 8001230:	bd80      	pop	{r7, pc}

08001232 <Init_Debug>:
 *
 * @param  None
 * @retval None
 */
static void Init_Debug( void )
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001236:	f001 fb77 	bl	8002928 <HAL_DBGMCU_EnableDBGSleepMode>
  /* HAL_DBGMCU_EnableDBGStopMode(); */
  /* HAL_DBGMCU_EnableDBGStandbyMode(); */

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800123a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800123e:	f7ff fe37 	bl	8000eb0 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001242:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001246:	f7ff fe47 	bl	8000ed8 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800124a:	f004 faa3 	bl	8005794 <DbgTraceInit>
#endif

  return;
 800124e:	bf00      	nop
}
 8001250:	bd80      	pop	{r7, pc}

08001252 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{ 
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  while(1 == 1); 
 8001264:	e7fe      	b.n	8001264 <HardFault_Handler+0x4>

08001266 <SysTick_Handler>:
 * @brief  This function handles SysTick exception.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800126a:	f001 fb19 	bl	80028a0 <HAL_IncTick>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}

08001272 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <IPCC_C1_RX_IRQHandler>:
  * @brief  This function handles IPCC RX occupied global interrupt request.
  * @param  None
  * @retval None
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80012a0:	f001 f862 	bl	8002368 <HW_IPCC_Rx_Handler>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <IPCC_C1_TX_IRQHandler>:
  * @brief  This function handles IPCC TX free global interrupt request.
  * @param  None
  * @retval None
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
   HW_IPCC_Tx_Handler();
 80012ac:	f001 f8a6 	bl	80023fc <HW_IPCC_Tx_Handler>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <USART1_IRQHandler>:
 * @param  None
 * @retval None
 */
#if(CFG_HW_USART1_ENABLED == 1)
void USART1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  HW_UART_Interrupt_Handler(hw_uart1);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fc73 	bl	8000ba4 <HW_UART_Interrupt_Handler>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <DMA2_Channel4_IRQHandler>:
 * @param  None
 * @retval None
 */
#if(CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
void CFG_HW_USART1_DMA_TX_IRQHandler( void )
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
  HW_UART_DMA_Interrupt_Handler(hw_uart1);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fc88 	bl	8000bdc <HW_UART_DMA_Interrupt_Handler>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <LPUART1_IRQHandler>:
 * @param  None
 * @retval None
 */
#if(CFG_HW_LPUART1_ENABLED == 1)
void LPUART1_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  HW_UART_Interrupt_Handler(hw_lpuart1);
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff fc65 	bl	8000ba4 <HW_UART_Interrupt_Handler>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}

080012de <DMA1_Channel4_IRQHandler>:
 * @param  None
 * @retval None
 */
#if(CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
void CFG_HW_LPUART1_DMA_TX_IRQHandler( void )
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  HW_UART_DMA_Interrupt_Handler(hw_lpuart1);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff fc7a 	bl	8000bdc <HW_UART_DMA_Interrupt_Handler>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  char logRegion[30];

  switch (aLogRegion)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	3b01      	subs	r3, #1
 8001300:	2b04      	cmp	r3, #4
 8001302:	d83e      	bhi.n	8001382 <logRegion+0x96>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <logRegion+0x20>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	08001321 	.word	0x08001321
 8001310:	08001335 	.word	0x08001335
 8001314:	08001349 	.word	0x08001349
 8001318:	0800135b 	.word	0x0800135b
 800131c:	0800136f 	.word	0x0800136f
  {
  case APPLI_LOG_REGION_GENERAL:
    strcpy(logRegion, "[M4 APPLICATION]");
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <logRegion+0xc4>)
 8001326:	461c      	mov	r4, r3
 8001328:	4615      	mov	r5, r2
 800132a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	7023      	strb	r3, [r4, #0]
    break;
 8001332:	e02f      	b.n	8001394 <logRegion+0xa8>
  case APPLI_LOG_REGION_OPENTHREAD_API:
    strcpy(logRegion, "[M4 OPENTHREAD API]");
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <logRegion+0xc8>)
 800133a:	461c      	mov	r4, r3
 800133c:	4615      	mov	r5, r2
 800133e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001342:	682b      	ldr	r3, [r5, #0]
 8001344:	6023      	str	r3, [r4, #0]
    break;
 8001346:	e025      	b.n	8001394 <logRegion+0xa8>
  case APPLI_LOG_REGION_OT_API_LINK:
    strcpy(logRegion, "[M4 LINK API]");
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <logRegion+0xcc>)
 800134e:	461c      	mov	r4, r3
 8001350:	4613      	mov	r3, r2
 8001352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001354:	c407      	stmia	r4!, {r0, r1, r2}
 8001356:	8023      	strh	r3, [r4, #0]
    break;
 8001358:	e01c      	b.n	8001394 <logRegion+0xa8>
  case APPLI_LOG_REGION_OT_API_INSTANCE:
    strcpy(logRegion, "[M4 INSTANCE API]");
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <logRegion+0xd0>)
 8001360:	461c      	mov	r4, r3
 8001362:	4615      	mov	r5, r2
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	8023      	strh	r3, [r4, #0]
    break;
 800136c:	e012      	b.n	8001394 <logRegion+0xa8>
  case APPLI_LOG_REGION_OT_API_MESSAGE:
    strcpy(logRegion, "[M4 MESSAGE API]");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <logRegion+0xd4>)
 8001374:	461c      	mov	r4, r3
 8001376:	4615      	mov	r5, r2
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	7023      	strb	r3, [r4, #0]
    break;
 8001380:	e008      	b.n	8001394 <logRegion+0xa8>
  default:
    strcpy(logRegion, "[M4]");
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <logRegion+0xd8>)
 8001388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138c:	6018      	str	r0, [r3, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	7019      	strb	r1, [r3, #0]
    break;
 8001392:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegion);
 8001394:	8879      	ldrh	r1, [r7, #2]
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <logRegion+0xdc>)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f005 f9ff 	bl	80067a0 <sniprintf>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29b      	uxth	r3, r3
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08007b00 	.word	0x08007b00
 80013b4:	08007b14 	.word	0x08007b14
 80013b8:	08007b28 	.word	0x08007b28
 80013bc:	08007b38 	.word	0x08007b38
 80013c0:	08007b4c 	.word	0x08007b4c
 80013c4:	08007b60 	.word	0x08007b60
 80013c8:	08007b68 	.word	0x08007b68

080013cc <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d00a      	beq.n	80013f2 <levelToString+0x26>
 80013dc:	2b03      	cmp	r3, #3
 80013de:	dc0a      	bgt.n	80013f6 <levelToString+0x2a>
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d002      	beq.n	80013ea <levelToString+0x1e>
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d002      	beq.n	80013ee <levelToString+0x22>
 80013e8:	e005      	b.n	80013f6 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <levelToString+0x38>)
 80013ec:	e004      	b.n	80013f8 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <levelToString+0x3c>)
 80013f0:	e002      	b.n	80013f8 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <levelToString+0x40>)
 80013f4:	e000      	b.n	80013f8 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <levelToString+0x44>)
  }
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	08007b6c 	.word	0x08007b6c
 8001408:	08007b74 	.word	0x08007b74
 800140c:	08007b7c 	.word	0x08007b7c
 8001410:	08007b84 	.word	0x08007b84

08001414 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8001424:	887c      	ldrh	r4, [r7, #2]
 8001426:	787b      	ldrb	r3, [r7, #1]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ffcf 	bl	80013cc <levelToString>
 800142e:	4603      	mov	r3, r0
 8001430:	4a05      	ldr	r2, [pc, #20]	; (8001448 <logLevel+0x34>)
 8001432:	4621      	mov	r1, r4
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 f9b3 	bl	80067a0 <sniprintf>
 800143a:	4603      	mov	r3, r0
 800143c:	b29b      	uxth	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	bf00      	nop
 8001448:	08007b8c 	.word	0x08007b8c

0800144c <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 800144c:	b40c      	push	{r2, r3}
 800144e:	b580      	push	{r7, lr}
 8001450:	b0c4      	sub	sp, #272	; 0x110
 8001452:	af00      	add	r7, sp, #0
 8001454:	4602      	mov	r2, r0
 8001456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800145a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001464:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001468:	460a      	mov	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
  uint16_t length = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8001472:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001476:	f107 020c 	add.w	r2, r7, #12
 800147a:	18d0      	adds	r0, r2, r3
 800147c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001480:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001484:	b299      	uxth	r1, r3
 8001486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800148a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	f7ff ffbf 	bl	8001414 <logLevel>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800149e:	4413      	add	r3, r2
 80014a0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80014a4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014a8:	f107 020c 	add.w	r2, r7, #12
 80014ac:	18d0      	adds	r0, r2, r3
 80014ae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80014b6:	b299      	uxth	r1, r3
 80014b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014bc:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f7ff ff12 	bl	80012ec <logRegion>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014d0:	4413      	add	r3, r2
 80014d2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 80014d6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80014da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014e2:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80014e4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	18d0      	adds	r0, r2, r3
 80014ee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014f2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80014f6:	4619      	mov	r1, r3
 80014f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001506:	f005 f9ab 	bl	8006860 <vsniprintf>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001512:	4413      	add	r3, r2
 8001514:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8001518:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8001522:	461a      	mov	r2, r3
 8001524:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800152c:	210d      	movs	r1, #13
 800152e:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8001530:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800153a:	461a      	mov	r2, r3
 800153c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001544:	210a      	movs	r1, #10
 8001546:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8001548:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8001552:	461a      	mov	r2, r3
 8001554:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8001560:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001564:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d805      	bhi.n	800157a <logApplication+0x12e>
  {
    printf("%s", logString);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <logApplication+0x140>)
 8001576:	f005 f8fb 	bl	8006770 <iprintf>
  }else
  {
    /* Print nothing */
  }
}
 800157a:	bf00      	nop
 800157c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001580:	46bd      	mov	sp, r7
 8001582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001586:	b002      	add	sp, #8
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	08007b8c 	.word	0x08007b8c

08001590 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00a      	b.n	80015b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a2:	f3af 8000 	nop.w
 80015a6:	4601      	mov	r1, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf0      	blt.n	80015a2 <_read+0x12>
  }

  return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f2:	605a      	str	r2, [r3, #4]
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_isatty>:

int _isatty(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f005 f844 	bl	80066f0 <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20030000 	.word	0x20030000
 8001694:	00001000 	.word	0x00001000
 8001698:	200002b4 	.word	0x200002b4
 800169c:	200014a0 	.word	0x200014a0

080016a0 <LL_RCC_HSE_Enable>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_RCC_HSE_IsReady>:
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016d0:	d101      	bne.n	80016d6 <LL_RCC_HSE_IsReady+0x18>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_RCC_HSE_IsReady+0x1a>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80016f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800170a:	4313      	orrs	r3, r2
 800170c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	cafecafe 	.word	0xcafecafe

08001720 <LL_RCC_MSI_Disable>:
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_RCC_SetSysClkSource>:
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 0203 	bic.w	r2, r3, #3
 8001750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_RCC_GetSysClkSource>:
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_2
  *         @arg @ref LL_FLASH_LATENCY_3
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <LL_FLASH_SetLatency+0x24>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 0207 	bic.w	r2, r3, #7
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <LL_FLASH_SetLatency+0x24>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	58004000 	.word	0x58004000

080017a8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  *         @arg @ref LL_FLASH_LATENCY_3
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LL_FLASH_GetLatency+0x18>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	58004000 	.word	0x58004000

080017c4 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  OTP_ID0_t * p_otp;

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <SystemInit+0x74>)
 80017cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <SystemInit+0x74>)
 80017d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80017da:	2000      	movs	r0, #0
 80017dc:	f004 f858 	bl	8005890 <OTP_Read>
 80017e0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <SystemInit+0x2e>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	799b      	ldrb	r3, [r3, #6]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff79 	bl	80016e4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  LL_RCC_HSE_Enable();
 80017f2:	f7ff ff55 	bl	80016a0 <LL_RCC_HSE_Enable>

  /**
   * Set FLASH latency to 1WS
   */
  LL_FLASH_SetLatency( LL_FLASH_LATENCY_1 );
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff ffc2 	bl	8001780 <LL_FLASH_SetLatency>
  while( LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1 );
 80017fc:	bf00      	nop
 80017fe:	f7ff ffd3 	bl	80017a8 <LL_FLASH_GetLatency>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d1fa      	bne.n	80017fe <SystemInit+0x3a>

  /**
   * Switch to HSE
   *
   */
  while(!LL_RCC_HSE_IsReady());
 8001808:	bf00      	nop
 800180a:	f7ff ff58 	bl	80016be <LL_RCC_HSE_IsReady>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0fa      	beq.n	800180a <SystemInit+0x46>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSE );
 8001814:	2002      	movs	r0, #2
 8001816:	f7ff ff92 	bl	800173e <LL_RCC_SetSysClkSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800181a:	bf00      	nop
 800181c:	f7ff ffa3 	bl	8001766 <LL_RCC_GetSysClkSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b08      	cmp	r3, #8
 8001824:	d1fa      	bne.n	800181c <SystemInit+0x58>

  /**
   * Switch OFF MSI
   */
  LL_RCC_MSI_Disable();
 8001826:	f7ff ff7b 	bl	8001720 <LL_RCC_MSI_Disable>
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM)
  /* program in SRAM1 */
  SCB->VTOR = RAM1_BASE | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAM1 for CPU1 */
#elif defined(VECT_TAB_OFFSET)
  SCB->VTOR = VECT_TAB_OFFSET;        /* Vector Table Relocation in Internal FLASH */
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <SystemInit+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
#endif

}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <APP_FFD_MAC_802_15_4_Init>:


/* Functions Definition ------------------------------------------------------*/

void APP_FFD_MAC_802_15_4_Init( APP_MAC_802_15_4_InitMode_t InitMode, TL_CmdPacket_t* pCmdBuffer)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Register cmdbuffer */
  APP_ENTRY_RegisterCmdBuffer(pCmdBuffer);
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f7ff f815 	bl	8000878 <APP_ENTRY_RegisterCmdBuffer>

  /* Init config buffer and call TL_THREAD_Init */
  APP_ENTRY_TL_MAC_802_15_4_Init();
 800184e:	f7fe ff11 	bl	8000674 <APP_ENTRY_TL_MAC_802_15_4_Init>

  /* Send MAC_802_15_4 start system cmd to RF Core */
  SHCI_C2_MAC_802_15_4_Init();
 8001852:	f003 f947 	bl	8004ae4 <SHCI_C2_MAC_802_15_4_Init>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MSG_FROM_RF_CORE, UTIL_SEQ_RFU, APP_ENTRY_ProcessMsgFromRFCoreTask);
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <APP_FFD_MAC_802_15_4_Init+0x58>)
 8001858:	2100      	movs	r1, #0
 800185a:	2008      	movs	r0, #8
 800185c:	f004 fe3e 	bl	80064dc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_FFD, UTIL_SEQ_RFU,APP_FFD_MAC_802_15_4_SetupTask);
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <APP_FFD_MAC_802_15_4_Init+0x5c>)
 8001862:	2100      	movs	r1, #0
 8001864:	2001      	movs	r0, #1
 8001866:	f004 fe39 	bl	80064dc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_SERVICE_COORD, UTIL_SEQ_RFU,APP_FFD_MAC_802_15_4_CoordSrvTask);
 800186a:	4a0c      	ldr	r2, [pc, #48]	; (800189c <APP_FFD_MAC_802_15_4_Init+0x60>)
 800186c:	2100      	movs	r1, #0
 800186e:	2002      	movs	r0, #2
 8001870:	f004 fe34 	bl	80064dc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_DATA_COORD, UTIL_SEQ_RFU,APP_FFD_MAC_802_15_4_CoordDataTask);
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <APP_FFD_MAC_802_15_4_Init+0x64>)
 8001876:	2100      	movs	r1, #0
 8001878:	2004      	movs	r0, #4
 800187a:	f004 fe2f 	bl	80064dc <UTIL_SEQ_RegTask>

  /* Configuration MAC 802_15_4 */
  APP_FFD_MAC_802_15_4_Config();
 800187e:	f000 fa07 	bl	8001c90 <APP_FFD_MAC_802_15_4_Config>


  /*Start Main Coordinator - FFD Task*/
  UTIL_SEQ_SetTask( 1<< CFG_TASK_FFD, CFG_SCH_PRIO_0 );
 8001882:	2100      	movs	r1, #0
 8001884:	2001      	movs	r0, #1
 8001886:	f004 fe4b 	bl	8006520 <UTIL_SEQ_SetTask>

}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	0800069d 	.word	0x0800069d
 8001898:	08001989 	.word	0x08001989
 800189c:	080018a5 	.word	0x080018a5
 80018a0:	08001939 	.word	0x08001939

080018a4 <APP_FFD_MAC_802_15_4_CoordSrvTask>:


void APP_FFD_MAC_802_15_4_CoordSrvTask(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
  MAC_Status_t MacStatus = MAC_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	77fb      	strb	r3, [r7, #31]

  MAC_associateRes_t AssociateRes;
  uint16_t shortAssociationAddr = 0x3344;
 80018ae:	f243 3344 	movw	r3, #13124	; 0x3344
 80018b2:	807b      	strh	r3, [r7, #2]

  APP_DBG("Srv task :");
 80018b4:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x7c>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fdc7 	bl	800144c <logApplication>

  switch (g_srvSerReq)
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x80>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d11f      	bne.n	8001906 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x62>
  {
  case CFG_ASSO_PENDING:
    APP_DBG("Srv task : Response to Association Indication");
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x84>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fdbe 	bl	800144c <logApplication>

    memcpy(AssociateRes.a_device_address,g_MAC_associateInd.a_device_address,0x08);
 80018d0:	4a16      	ldr	r2, [pc, #88]	; (800192c <APP_FFD_MAC_802_15_4_CoordSrvTask+0x88>)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80018dc:	887b      	ldrh	r3, [r7, #2]
    memcpy(AssociateRes.a_assoc_short_address,&shortAssociationAddr,0x2);
 80018de:	81bb      	strh	r3, [r7, #12]
    AssociateRes.security_level = 0x00;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
    AssociateRes.status = MAC_SUCCESS;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73bb      	strb	r3, [r7, #14]

    MacStatus = MAC_MLMEAssociateRes(&AssociateRes);
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fef5 	bl	80056da <MAC_MLMEAssociateRes>
 80018f0:	4603      	mov	r3, r0
 80018f2:	77fb      	strb	r3, [r7, #31]
    if ( MAC_SUCCESS != MacStatus ) {
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x6e>
      APP_DBG("FFD MAC - Association Response Fails");
 80018fa:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x8c>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fda4 	bl	800144c <logApplication>
 8001904:	e009      	b.n	800191a <APP_FFD_MAC_802_15_4_CoordSrvTask+0x76>
      return;
    }
    break;
  default:
    APP_DBG("Srv task : unknown Request");
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x90>)
 8001908:	2101      	movs	r1, #1
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fd9e 	bl	800144c <logApplication>
 8001910:	e000      	b.n	8001914 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x70>
    break;
 8001912:	bf00      	nop
  }
  g_srvSerReq = CFG_SRV_SER_REQ_NBR;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <APP_FFD_MAC_802_15_4_CoordSrvTask+0x80>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
}
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08007b90 	.word	0x08007b90
 8001924:	20000330 	.word	0x20000330
 8001928:	08007b9c 	.word	0x08007b9c
 800192c:	200002b8 	.word	0x200002b8
 8001930:	08007bcc 	.word	0x08007bcc
 8001934:	08007bf4 	.word	0x08007bf4

08001938 <APP_FFD_MAC_802_15_4_CoordDataTask>:

void APP_FFD_MAC_802_15_4_CoordDataTask(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  APP_DBG("Data task :");
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <APP_FFD_MAC_802_15_4_CoordDataTask+0x3c>)
 800193e:	2101      	movs	r1, #1
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fd83 	bl	800144c <logApplication>
  switch (g_srvDataReq)
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <APP_FFD_MAC_802_15_4_CoordDataTask+0x40>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d107      	bne.n	800195e <APP_FFD_MAC_802_15_4_CoordDataTask+0x26>
  {
    case CFG_DATA_PENDING:
      BSP_LED_Toggle(LED3);
 800194e:	2002      	movs	r0, #2
 8001950:	f000 ff22 	bl	8002798 <BSP_LED_Toggle>
      APP_DBG("Data task : Data Indication Receive");
 8001954:	4a09      	ldr	r2, [pc, #36]	; (800197c <APP_FFD_MAC_802_15_4_CoordDataTask+0x44>)
 8001956:	2101      	movs	r1, #1
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fd77 	bl	800144c <logApplication>
    default:
      APP_DBG("Data task : unknown Request");
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <APP_FFD_MAC_802_15_4_CoordDataTask+0x48>)
 8001960:	2101      	movs	r1, #1
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fd72 	bl	800144c <logApplication>
  }
  g_srvDataReq = CFG_SRV_DATA_REQ_NBR;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <APP_FFD_MAC_802_15_4_CoordDataTask+0x40>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	08007c10 	.word	0x08007c10
 8001978:	20000331 	.word	0x20000331
 800197c:	08007c1c 	.word	0x08007c1c
 8001980:	08007c40 	.word	0x08007c40
 8001984:	00000000 	.word	0x00000000

08001988 <APP_FFD_MAC_802_15_4_SetupTask>:


void APP_FFD_MAC_802_15_4_SetupTask(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b092      	sub	sp, #72	; 0x48
 800198c:	af00      	add	r7, sp, #0

  MAC_Status_t MacStatus = MAC_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  MAC_resetReq_t    ResetReq;
  MAC_setReq_t      SetReq;
  MAC_startReq_t    StartReq;

  long long extAddr = 0xACDE480000000001;
 8001994:	a3bc      	add	r3, pc, #752	; (adr r3, 8001c88 <APP_FFD_MAC_802_15_4_SetupTask+0x300>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  uint16_t shortAddr   = 0x1122;
 800199e:	f241 1322 	movw	r3, #4386	; 0x1122
 80019a2:	80fb      	strh	r3, [r7, #6]
  uint16_t panId       = 0x1AAA;
 80019a4:	f641 23aa 	movw	r3, #6826	; 0x1aaa
 80019a8:	80bb      	strh	r3, [r7, #4]
  uint8_t channel      = DEMO_CHANNEL;
 80019aa:	2310      	movs	r3, #16
 80019ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t PIB_Value = 0x00;
 80019b0:	2300      	movs	r3, #0
 80019b2:	70fb      	strb	r3, [r7, #3]
  
  int8_t tx_power_pib_value = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	70bb      	strb	r3, [r7, #2]

  APP_DBG("Run FFD MAC 802.15.4 - 2 - FFD Startup");
 80019b8:	4a9f      	ldr	r2, [pc, #636]	; (8001c38 <APP_FFD_MAC_802_15_4_SetupTask+0x2b0>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fd45 	bl	800144c <logApplication>

  /* Reset FFD Device */
  /* Reset MAC */
  memset(&ResetReq,0x00,sizeof(MAC_resetReq_t));
 80019c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c6:	2204      	movs	r2, #4
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 fec8 	bl	8006760 <memset>
  ResetReq.set_default_PIB = TRUE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

  MacStatus = MAC_MLMEResetReq( &ResetReq );
 80019d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fe10 	bl	8005600 <MAC_MLMEResetReq>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( MAC_SUCCESS != MacStatus ) {
 80019e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <APP_FFD_MAC_802_15_4_SetupTask+0x72>
    APP_DBG("FFD MAC - Reset Fails");
 80019ee:	4a93      	ldr	r2, [pc, #588]	; (8001c3c <APP_FFD_MAC_802_15_4_SetupTask+0x2b4>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fd2a 	bl	800144c <logApplication>
    return;
 80019f8:	e11b      	b.n	8001c32 <APP_FFD_MAC_802_15_4_SetupTask+0x2aa>
  }
  /* Wait for Reset Confirmation */
  UTIL_SEQ_WaitEvt( 1U<< CFG_EVT_DEVICE_RESET_CNF );
 80019fa:	2008      	movs	r0, #8
 80019fc:	f004 fddc 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  APP_DBG("FFD MAC APP - Reset CNF Received");
 8001a00:	4a8f      	ldr	r2, [pc, #572]	; (8001c40 <APP_FFD_MAC_802_15_4_SetupTask+0x2b8>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fd21 	bl	800144c <logApplication>

  /* Set Device Extended Address */
  APP_DBG("FFD MAC APP - Set Extended Address");
 8001a0a:	4a8e      	ldr	r2, [pc, #568]	; (8001c44 <APP_FFD_MAC_802_15_4_SetupTask+0x2bc>)
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fd1c 	bl	800144c <logApplication>
  memset(&SetReq,0x00,sizeof(MAC_setReq_t));
 8001a14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a18:	2208      	movs	r2, #8
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 fe9f 	bl	8006760 <memset>
  SetReq.PIB_attribute = g_MAC_EXTENDED_ADDRESS_c;
 8001a22:	236f      	movs	r3, #111	; 0x6f
 8001a24:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  SetReq.PIB_attribute_valuePtr = (uint8_t*) &extAddr;
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  MacStatus = MAC_MLMESetReq( &SetReq );
 8001a2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fe07 	bl	8005646 <MAC_MLMESetReq>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( MAC_SUCCESS != MacStatus ) {
 8001a3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <APP_FFD_MAC_802_15_4_SetupTask+0xca>
    APP_DBG("FFD MAC - Set Extended Addr Fails");
 8001a46:	4a80      	ldr	r2, [pc, #512]	; (8001c48 <APP_FFD_MAC_802_15_4_SetupTask+0x2c0>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fcfe 	bl	800144c <logApplication>
    return;
 8001a50:	e0ef      	b.n	8001c32 <APP_FFD_MAC_802_15_4_SetupTask+0x2aa>
  }
  UTIL_SEQ_WaitEvt( 1U<< CFG_EVT_SET_CNF );
 8001a52:	2010      	movs	r0, #16
 8001a54:	f004 fdb0 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  APP_DBG("FFD MAC APP - Set Extended Address CNF Received");
 8001a58:	4a7c      	ldr	r2, [pc, #496]	; (8001c4c <APP_FFD_MAC_802_15_4_SetupTask+0x2c4>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fcf5 	bl	800144c <logApplication>


  /* Set Device Short Address */
  APP_DBG("FFD MAC APP - Set Short Address");
 8001a62:	4a7b      	ldr	r2, [pc, #492]	; (8001c50 <APP_FFD_MAC_802_15_4_SetupTask+0x2c8>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fcf0 	bl	800144c <logApplication>
  memset(&SetReq,0x00,sizeof(MAC_setReq_t));
 8001a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a70:	2208      	movs	r2, #8
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 fe73 	bl	8006760 <memset>
  SetReq.PIB_attribute = g_MAC_SHORT_ADDRESS_c;
 8001a7a:	2353      	movs	r3, #83	; 0x53
 8001a7c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  SetReq.PIB_attribute_valuePtr =(uint8_t*) &shortAddr;
 8001a80:	1dbb      	adds	r3, r7, #6
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  MacStatus = MAC_MLMESetReq( &SetReq );
 8001a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fddc 	bl	8005646 <MAC_MLMESetReq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( MAC_SUCCESS != MacStatus ) {
 8001a94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <APP_FFD_MAC_802_15_4_SetupTask+0x120>
    APP_DBG("FFD MAC - Set Short Addr Fails");
 8001a9c:	4a6d      	ldr	r2, [pc, #436]	; (8001c54 <APP_FFD_MAC_802_15_4_SetupTask+0x2cc>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fcd3 	bl	800144c <logApplication>
    return;
 8001aa6:	e0c4      	b.n	8001c32 <APP_FFD_MAC_802_15_4_SetupTask+0x2aa>
  }

  UTIL_SEQ_WaitEvt( 1U << CFG_EVT_SET_CNF );
 8001aa8:	2010      	movs	r0, #16
 8001aaa:	f004 fd85 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  APP_DBG("FFD MAC APP - Set Short Address CNF Received");
 8001aae:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <APP_FFD_MAC_802_15_4_SetupTask+0x2d0>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff fcca 	bl	800144c <logApplication>

  /* Set Association Permit */
  APP_DBG("FFD MAC APP - Set Association Permit");
 8001ab8:	4a68      	ldr	r2, [pc, #416]	; (8001c5c <APP_FFD_MAC_802_15_4_SetupTask+0x2d4>)
 8001aba:	2101      	movs	r1, #1
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff fcc5 	bl	800144c <logApplication>

  memset(&SetReq,0x00,sizeof(MAC_setReq_t));
 8001ac2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 fe48 	bl	8006760 <memset>
  SetReq.PIB_attribute = g_MAC_ASSOCIATION_PERMIT_c;
 8001ad0:	2341      	movs	r3, #65	; 0x41
 8001ad2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  PIB_Value = g_TRUE;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	70fb      	strb	r3, [r7, #3]
  SetReq.PIB_attribute_valuePtr = &PIB_Value;
 8001ada:	1cfb      	adds	r3, r7, #3
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38

  MacStatus = MAC_MLMESetReq( &SetReq );
 8001ade:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fdaf 	bl	8005646 <MAC_MLMESetReq>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( MAC_SUCCESS != MacStatus ) {
 8001aee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <APP_FFD_MAC_802_15_4_SetupTask+0x17a>
    APP_DBG("FFD MAC - Set Association Permit Fails");
 8001af6:	4a5a      	ldr	r2, [pc, #360]	; (8001c60 <APP_FFD_MAC_802_15_4_SetupTask+0x2d8>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fca6 	bl	800144c <logApplication>
    return;
 8001b00:	e097      	b.n	8001c32 <APP_FFD_MAC_802_15_4_SetupTask+0x2aa>
  }
  UTIL_SEQ_WaitEvt( 1U << CFG_EVT_SET_CNF );
 8001b02:	2010      	movs	r0, #16
 8001b04:	f004 fd58 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  APP_DBG("FFD MAC APP - Set Association Permit CNF Received");
 8001b08:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <APP_FFD_MAC_802_15_4_SetupTask+0x2dc>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fc9d 	bl	800144c <logApplication>



  /* Set Tx Power */

  APP_DBG("FFD MAC APP - Set TX Power");
 8001b12:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <APP_FFD_MAC_802_15_4_SetupTask+0x2e0>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fc98 	bl	800144c <logApplication>
  memset(&SetReq,0x00,sizeof(MAC_setReq_t));
 8001b1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b20:	2208      	movs	r2, #8
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 fe1b 	bl	8006760 <memset>
  SetReq.PIB_attribute = g_PHY_TRANSMIT_POWER_c;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  tx_power_pib_value = 2;                       /* int8 dBm value in the range [-21;6] */
 8001b30:	2302      	movs	r3, #2
 8001b32:	70bb      	strb	r3, [r7, #2]
  SetReq.PIB_attribute_valuePtr = (uint8_t *)&tx_power_pib_value;
 8001b34:	1cbb      	adds	r3, r7, #2
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38

  MacStatus = MAC_MLMESetReq( &SetReq );
 8001b38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fd82 	bl	8005646 <MAC_MLMESetReq>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( MAC_SUCCESS != MacStatus ) {
 8001b48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <APP_FFD_MAC_802_15_4_SetupTask+0x1d4>
    APP_DBG("FFD MAC - Set Tx Power Fails");
 8001b50:	4a46      	ldr	r2, [pc, #280]	; (8001c6c <APP_FFD_MAC_802_15_4_SetupTask+0x2e4>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fc79 	bl	800144c <logApplication>
    return;
 8001b5a:	e06a      	b.n	8001c32 <APP_FFD_MAC_802_15_4_SetupTask+0x2aa>
  }
  UTIL_SEQ_WaitEvt( 1U << CFG_EVT_SET_CNF );
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f004 fd2b 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  
  
  /* Start Device */
  APP_DBG("FFD MAC APP - Start FFD Device");
 8001b62:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <APP_FFD_MAC_802_15_4_SetupTask+0x2e8>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff fc70 	bl	800144c <logApplication>
  memset(&StartReq,0x00,sizeof(MAC_startReq_t));
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2223      	movs	r2, #35	; 0x23
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fdf3 	bl	8006760 <memset>
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
  memcpy(StartReq.a_PAN_id,(uint8_t*)&panId,0x02);
 8001b7c:	82bb      	strh	r3, [r7, #20]
  StartReq.channel_number   = channel;
 8001b7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b82:	75bb      	strb	r3, [r7, #22]
  StartReq.beacon_order     = 0x0F;
 8001b84:	230f      	movs	r3, #15
 8001b86:	773b      	strb	r3, [r7, #28]
  StartReq.superframe_order = 0x0F;
 8001b88:	230f      	movs	r3, #15
 8001b8a:	777b      	strb	r3, [r7, #29]
  StartReq.PAN_coordinator  = g_TRUE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	77bb      	strb	r3, [r7, #30]
  StartReq.battery_life_extension = g_FALSE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	77fb      	strb	r3, [r7, #31]

  MacStatus = MAC_MLMEStartReq( &StartReq);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fd79 	bl	8005690 <MAC_MLMEStartReq>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( MAC_SUCCESS != MacStatus ) {
 8001ba4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <APP_FFD_MAC_802_15_4_SetupTask+0x230>
    APP_DBG("FFD MAC - Set Association Permit Fails");
 8001bac:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <APP_FFD_MAC_802_15_4_SetupTask+0x2d8>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff fc4b 	bl	800144c <logApplication>
    return;
 8001bb6:	e03c      	b.n	8001c32 <APP_FFD_MAC_802_15_4_SetupTask+0x2aa>
  }
  UTIL_SEQ_WaitEvt( 1U << CFG_EVT_DEVICE_STARTED_CNF );
 8001bb8:	2020      	movs	r0, #32
 8001bba:	f004 fcfd 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  APP_DBG("FFD MAC APP - Start FFD Device CNF Received");
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <APP_FFD_MAC_802_15_4_SetupTask+0x2ec>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fc42 	bl	800144c <logApplication>


  /* Set RxOnWhenIdle */
  APP_DBG("FFD MAC APP - Set RX On When Idle");
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <APP_FFD_MAC_802_15_4_SetupTask+0x2f0>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fc3d 	bl	800144c <logApplication>
  memset(&SetReq,0x00,sizeof(MAC_setReq_t));
 8001bd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 fdc0 	bl	8006760 <memset>
  SetReq.PIB_attribute = g_MAC_RX_ON_WHEN_IDLE_c;
 8001be0:	2352      	movs	r3, #82	; 0x52
 8001be2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  PIB_Value = g_TRUE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	70fb      	strb	r3, [r7, #3]
  SetReq.PIB_attribute_valuePtr = &PIB_Value;
 8001bea:	1cfb      	adds	r3, r7, #3
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38

  MacStatus = MAC_MLMESetReq( &SetReq );
 8001bee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fd27 	bl	8005646 <MAC_MLMESetReq>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if ( MAC_SUCCESS != MacStatus ) {
 8001bfe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <APP_FFD_MAC_802_15_4_SetupTask+0x28a>
    APP_DBG("FFD MAC - Set Rx On When Idle Fails");
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <APP_FFD_MAC_802_15_4_SetupTask+0x2f4>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fc1e 	bl	800144c <logApplication>
    return;
 8001c10:	e00f      	b.n	8001c32 <APP_FFD_MAC_802_15_4_SetupTask+0x2aa>
  }
  UTIL_SEQ_WaitEvt( 1U << CFG_EVT_SET_CNF );
 8001c12:	2010      	movs	r0, #16
 8001c14:	f004 fcd0 	bl	80065b8 <UTIL_SEQ_WaitEvt>
  APP_DBG("FFD MAC APP - Set RX On When Idle CNF Received");
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <APP_FFD_MAC_802_15_4_SetupTask+0x2f8>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff fc15 	bl	800144c <logApplication>
  /* Go in Echo loop */
  APP_DBG("FFD MAC APP - Ready to Handle Association Req and Receive Data");
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <APP_FFD_MAC_802_15_4_SetupTask+0x2fc>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fc10 	bl	800144c <logApplication>
  BSP_LED_Toggle(LED1);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f000 fdb3 	bl	8002798 <BSP_LED_Toggle>
}
 8001c32:	3748      	adds	r7, #72	; 0x48
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08007c5c 	.word	0x08007c5c
 8001c3c:	08007c84 	.word	0x08007c84
 8001c40:	08007c9c 	.word	0x08007c9c
 8001c44:	08007cc0 	.word	0x08007cc0
 8001c48:	08007ce4 	.word	0x08007ce4
 8001c4c:	08007d08 	.word	0x08007d08
 8001c50:	08007d38 	.word	0x08007d38
 8001c54:	08007d58 	.word	0x08007d58
 8001c58:	08007d78 	.word	0x08007d78
 8001c5c:	08007da8 	.word	0x08007da8
 8001c60:	08007dd0 	.word	0x08007dd0
 8001c64:	08007df8 	.word	0x08007df8
 8001c68:	08007e2c 	.word	0x08007e2c
 8001c6c:	08007e48 	.word	0x08007e48
 8001c70:	08007e68 	.word	0x08007e68
 8001c74:	08007e88 	.word	0x08007e88
 8001c78:	08007eb4 	.word	0x08007eb4
 8001c7c:	08007ed8 	.word	0x08007ed8
 8001c80:	08007efc 	.word	0x08007efc
 8001c84:	08007f2c 	.word	0x08007f2c
 8001c88:	00000001 	.word	0x00000001
 8001c8c:	acde4800 	.word	0xacde4800

08001c90 <APP_FFD_MAC_802_15_4_Config>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APP_FFD_MAC_802_15_4_Config()
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  APP_DBG("configure FFD MAC 802.15.4 - 2");
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <APP_FFD_MAC_802_15_4_Config+0xb4>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fbd7 	bl	800144c <logApplication>
  /* Register MAC 802.15.4 callback functions */

  memset(&macCbConfig,0x00,sizeof(MAC_callbacks_t));
 8001c9e:	2264      	movs	r2, #100	; 0x64
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4829      	ldr	r0, [pc, #164]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001ca4:	f004 fd5c 	bl	8006760 <memset>

  /* Mac Call Back Initialization */
  macCbConfig.mlmeResetCnfCb = APP_MAC_mlmeResetCnfCb;
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001caa:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <APP_FFD_MAC_802_15_4_Config+0xbc>)
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
  macCbConfig.mlmeScanCnfCb = APP_MAC_mlmeScanCnfCb;
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <APP_FFD_MAC_802_15_4_Config+0xc0>)
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
  macCbConfig.mlmeAssociateCnfCb = APP_MAC_mlmeAssociateCnfCb;
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <APP_FFD_MAC_802_15_4_Config+0xc4>)
 8001cb8:	601a      	str	r2, [r3, #0]
  macCbConfig.mlmeAssociateIndCb = APP_MAC_mlmeAssociateIndCb;
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <APP_FFD_MAC_802_15_4_Config+0xc8>)
 8001cbe:	605a      	str	r2, [r3, #4]
  macCbConfig.mlmeBeaconNotifyIndCb = APP_MAC_mlmeBeaconNotifyIndCb;
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <APP_FFD_MAC_802_15_4_Config+0xcc>)
 8001cc4:	609a      	str	r2, [r3, #8]
  macCbConfig.mlmeCalibrateCnfCb = APP_MAC_mlmeCalibrateCnfCb;
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <APP_FFD_MAC_802_15_4_Config+0xd0>)
 8001cca:	60da      	str	r2, [r3, #12]
  macCbConfig.mlmeCommStatusIndCb = APP_MAC_mlmeCommStatusIndCb;
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cce:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <APP_FFD_MAC_802_15_4_Config+0xd4>)
 8001cd0:	611a      	str	r2, [r3, #16]
  macCbConfig.mlmeDisassociateCnfCb = APP_MAC_mlmeDisassociateCnfCb;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <APP_FFD_MAC_802_15_4_Config+0xd8>)
 8001cd6:	615a      	str	r2, [r3, #20]
  macCbConfig.mlmeDisassociateIndCb = APP_MAC_mlmeDisassociateIndCb;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cda:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <APP_FFD_MAC_802_15_4_Config+0xdc>)
 8001cdc:	619a      	str	r2, [r3, #24]
  macCbConfig.mlmeDpsCnfCb = APP_MAC_mlmeDpsCnfCb;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <APP_FFD_MAC_802_15_4_Config+0xe0>)
 8001ce2:	61da      	str	r2, [r3, #28]
  macCbConfig.mlmeDpsIndCb = APP_MAC_mlmeDpsIndCb;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001ce6:	4a23      	ldr	r2, [pc, #140]	; (8001d74 <APP_FFD_MAC_802_15_4_Config+0xe4>)
 8001ce8:	621a      	str	r2, [r3, #32]
  macCbConfig.mlmeGetCnfCb = APP_MAC_mlmeGetCnfCb;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <APP_FFD_MAC_802_15_4_Config+0xe8>)
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  macCbConfig.mlmeGtsCnfCb = APP_MAC_mlmeGtsCnfCb;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cf2:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <APP_FFD_MAC_802_15_4_Config+0xec>)
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  macCbConfig.mlmeGtsIndCb = APP_MAC_mlmeGtsIndCb;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <APP_FFD_MAC_802_15_4_Config+0xf0>)
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  macCbConfig.mlmeOrphanIndCb = APP_MAC_mlmeOrphanIndCb;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <APP_FFD_MAC_802_15_4_Config+0xf4>)
 8001d00:	631a      	str	r2, [r3, #48]	; 0x30
  macCbConfig.mlmePollCnfCb = APP_MAC_mlmePollCnfCb;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d04:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <APP_FFD_MAC_802_15_4_Config+0xf8>)
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
  macCbConfig.mlmeRxEnableCnfCb = APP_MAC_mlmeRxEnableCnfCb;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d0a:	4a20      	ldr	r2, [pc, #128]	; (8001d8c <APP_FFD_MAC_802_15_4_Config+0xfc>)
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  macCbConfig.mlmeSetCnfCb = APP_MAC_mlmeSetCnfCb;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d10:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <APP_FFD_MAC_802_15_4_Config+0x100>)
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
  macCbConfig.mlmeSoundingCnfCb = APP_MAC_mlmeSoundingCnfCb;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <APP_FFD_MAC_802_15_4_Config+0x104>)
 8001d18:	649a      	str	r2, [r3, #72]	; 0x48
  macCbConfig.mlmeStartCnfCb = APP_MAC_mlmeStartCnfCb;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <APP_FFD_MAC_802_15_4_Config+0x108>)
 8001d1e:	64da      	str	r2, [r3, #76]	; 0x4c
  macCbConfig.mlmeSyncLossIndCb = APP_MAC_mlmeSyncLossIndCb;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <APP_FFD_MAC_802_15_4_Config+0x10c>)
 8001d24:	651a      	str	r2, [r3, #80]	; 0x50
  macCbConfig.mcpsDataIndCb = APP_MAC_mcpsDataIndCb;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <APP_FFD_MAC_802_15_4_Config+0x110>)
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
  macCbConfig.mcpsDataCnfCb = APP_MAC_mcpsDataCnfCb;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <APP_FFD_MAC_802_15_4_Config+0x114>)
 8001d30:	659a      	str	r2, [r3, #88]	; 0x58
  macCbConfig.mcpsPurgeCnfCb = APP_MAC_mcpsPurgeCnfCb;
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <APP_FFD_MAC_802_15_4_Config+0x118>)
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
  macCbConfig.mlmePollIndCb = APP_MAC_mlmePollIndCb;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <APP_FFD_MAC_802_15_4_Config+0xb8>)
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <APP_FFD_MAC_802_15_4_Config+0x11c>)
 8001d3c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08007fcc 	.word	0x08007fcc
 8001d48:	200002cc 	.word	0x200002cc
 8001d4c:	08001ef7 	.word	0x08001ef7
 8001d50:	08001f25 	.word	0x08001f25
 8001d54:	08001db1 	.word	0x08001db1
 8001d58:	08001dc9 	.word	0x08001dc9
 8001d5c:	08001e5d 	.word	0x08001e5d
 8001d60:	0800203f 	.word	0x0800203f
 8001d64:	08001e73 	.word	0x08001e73
 8001d68:	08001e89 	.word	0x08001e89
 8001d6c:	08001e9f 	.word	0x08001e9f
 8001d70:	08002055 	.word	0x08002055
 8001d74:	0800206b 	.word	0x0800206b
 8001d78:	08001eb5 	.word	0x08001eb5
 8001d7c:	08002097 	.word	0x08002097
 8001d80:	080020ad 	.word	0x080020ad
 8001d84:	08001ecb 	.word	0x08001ecb
 8001d88:	08001ee1 	.word	0x08001ee1
 8001d8c:	08001f0f 	.word	0x08001f0f
 8001d90:	08001f3b 	.word	0x08001f3b
 8001d94:	08002081 	.word	0x08002081
 8001d98:	08001f53 	.word	0x08001f53
 8001d9c:	08002029 	.word	0x08002029
 8001da0:	08001f6d 	.word	0x08001f6d
 8001da4:	08001ff9 	.word	0x08001ff9
 8001da8:	08002013 	.word	0x08002013
 8001dac:	080020c3 	.word	0x080020c3

08001db0 <APP_MAC_mlmeAssociateCnfCb>:
/* callbacks to be called by the MAC
* Create an NTS message and enqueue it in the IPCC queue
*/

MAC_Status_t APP_MAC_mlmeAssociateCnfCb( const  MAC_associateCnf_t * pAssociateCnf )
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001db8:	2302      	movs	r3, #2
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <APP_MAC_mlmeAssociateIndCb>:

MAC_Status_t APP_MAC_mlmeAssociateIndCb( const  MAC_associateInd_t * pAssociateInd )
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Store ASSOCIATION IND */
  MAC_Status_t MacStatus = MAC_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  MAC_associateRes_t AssociateRes;

  APP_DBG("FFD MAC APP - Association Requested");
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <APP_MAC_mlmeAssociateIndCb+0x88>)
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fb36 	bl	800144c <logApplication>

  uint16_t shortAssociationAddr = 0x3344;
 8001de0:	f243 3344 	movw	r3, #13124	; 0x3344
 8001de4:	817b      	strh	r3, [r7, #10]

  memcpy(&g_MAC_associateInd,pAssociateInd,sizeof(MAC_associateInd_t));
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <APP_MAC_mlmeAssociateIndCb+0x8c>)
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6811      	ldr	r1, [r2, #0]
 8001dec:	6855      	ldr	r5, [r2, #4]
 8001dee:	6894      	ldr	r4, [r2, #8]
 8001df0:	68d0      	ldr	r0, [r2, #12]
 8001df2:	6019      	str	r1, [r3, #0]
 8001df4:	605d      	str	r5, [r3, #4]
 8001df6:	609c      	str	r4, [r3, #8]
 8001df8:	60d8      	str	r0, [r3, #12]
 8001dfa:	6911      	ldr	r1, [r2, #16]
 8001dfc:	6119      	str	r1, [r3, #16]

  memcpy(AssociateRes.a_device_address,g_MAC_associateInd.a_device_address,0x08);
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <APP_MAC_mlmeAssociateIndCb+0x8c>)
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	6810      	ldr	r0, [r2, #0]
 8001e06:	6851      	ldr	r1, [r2, #4]
 8001e08:	c303      	stmia	r3!, {r0, r1}
 8001e0a:	897b      	ldrh	r3, [r7, #10]
  memcpy(AssociateRes.a_assoc_short_address,&shortAssociationAddr,0x02);
 8001e0c:	82bb      	strh	r3, [r7, #20]
  AssociateRes.security_level = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
  AssociateRes.status = MAC_SUCCESS;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75bb      	strb	r3, [r7, #22]

  MacStatus = MAC_MLMEAssociateRes(&AssociateRes);
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fc5d 	bl	80056da <MAC_MLMEAssociateRes>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if ( MAC_SUCCESS != MacStatus ) {
 8001e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <APP_MAC_mlmeAssociateIndCb+0x70>
   APP_DBG("FFD MAC - Association Response Fails");
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <APP_MAC_mlmeAssociateIndCb+0x90>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fb0a 	bl	800144c <logApplication>
  }
  HAL_Delay(200);
 8001e38:	20c8      	movs	r0, #200	; 0xc8
 8001e3a:	f000 fd51 	bl	80028e0 <HAL_Delay>
  BSP_LED_Off(LED2);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f000 fc90 	bl	8002764 <BSP_LED_Off>
  return MAC_SUCCESS;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	08007fec 	.word	0x08007fec
 8001e54:	200002b8 	.word	0x200002b8
 8001e58:	08008010 	.word	0x08008010

08001e5c <APP_MAC_mlmeBeaconNotifyIndCb>:

MAC_Status_t APP_MAC_mlmeBeaconNotifyIndCb( const  MAC_beaconNotifyInd_t * pBeaconNotifyInd )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001e64:	2302      	movs	r3, #2
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <APP_MAC_mlmeCommStatusIndCb>:

MAC_Status_t APP_MAC_mlmeCommStatusIndCb( const  MAC_commStatusInd_t * pCommStatusInd )
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001e7a:	2302      	movs	r3, #2
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <APP_MAC_mlmeDisassociateCnfCb>:

MAC_Status_t APP_MAC_mlmeDisassociateCnfCb( const  MAC_disassociateCnf_t * pDisassociateCnf )
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  return MAC_NOT_IMPLEMENTED_STATUS;
 8001e90:	2302      	movs	r3, #2
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <APP_MAC_mlmeDisassociateIndCb>:

MAC_Status_t APP_MAC_mlmeDisassociateIndCb( const  MAC_disassociateInd_t * pDisassociateInd )
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001ea6:	2302      	movs	r3, #2

}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <APP_MAC_mlmeGetCnfCb>:

MAC_Status_t APP_MAC_mlmeGetCnfCb( const  MAC_getCnf_t * pGetCnf )
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001ebc:	2302      	movs	r3, #2

}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <APP_MAC_mlmeOrphanIndCb>:

MAC_Status_t APP_MAC_mlmeOrphanIndCb( const  MAC_orphanInd_t * pOrphanInd )
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001ed2:	2302      	movs	r3, #2

}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <APP_MAC_mlmePollCnfCb>:

MAC_Status_t APP_MAC_mlmePollCnfCb( const  MAC_pollCnf_t * pPollCnf )
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001ee8:	2302      	movs	r3, #2

}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <APP_MAC_mlmeResetCnfCb>:

MAC_Status_t APP_MAC_mlmeResetCnfCb( const  MAC_resetCnf_t * pResetCnf )
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(EVENT_DEVICE_RESET_CNF);
 8001efe:	2008      	movs	r0, #8
 8001f00:	f004 fb3a 	bl	8006578 <UTIL_SEQ_SetEvt>
  return MAC_SUCCESS;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <APP_MAC_mlmeRxEnableCnfCb>:


MAC_Status_t APP_MAC_mlmeRxEnableCnfCb( const  MAC_rxEnableCnf_t * pRxEnableCnf )
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001f16:	2302      	movs	r3, #2

}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <APP_MAC_mlmeScanCnfCb>:

MAC_Status_t APP_MAC_mlmeScanCnfCb( const  MAC_scanCnf_t * pScanCnf )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001f2c:	2302      	movs	r3, #2
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <APP_MAC_mlmeSetCnfCb>:


MAC_Status_t APP_MAC_mlmeSetCnfCb( const  MAC_setCnf_t * pSetCnf )
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(EVENT_SET_CNF);
 8001f42:	2010      	movs	r0, #16
 8001f44:	f004 fb18 	bl	8006578 <UTIL_SEQ_SetEvt>
  return MAC_SUCCESS;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <APP_MAC_mlmeStartCnfCb>:


MAC_Status_t APP_MAC_mlmeStartCnfCb( const  MAC_startCnf_t * pStartCnf )
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(EVENT_DEVICE_STARTED_CNF);
 8001f5a:	2020      	movs	r0, #32
 8001f5c:	f004 fb0c 	bl	8006578 <UTIL_SEQ_SetEvt>
  return MAC_NOT_IMPLEMENTED_STATUS;
 8001f60:	2302      	movs	r3, #2

}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <APP_MAC_mcpsDataIndCb>:

MAC_Status_t APP_MAC_mcpsDataIndCb( const  MAC_dataInd_t * pDataInd )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  memcpy(&g_DataInd,pDataInd,sizeof(MAC_dataInd_t));
 8001f74:	2244      	movs	r2, #68	; 0x44
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	481c      	ldr	r0, [pc, #112]	; (8001fec <APP_MAC_mcpsDataIndCb+0x80>)
 8001f7a:	f004 fbe3 	bl	8006744 <memcpy>
  // Check validity of the received Message extracting associated 
  // simple xor signature
  if (!checkMsgXorSignature((char const *)(pDataInd->msduPtr),
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
                           pDataInd->msdu_length-1,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7e9b      	ldrb	r3, [r3, #26]
  if (!checkMsgXorSignature((char const *)(pDataInd->msduPtr),
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2d9      	uxtb	r1, r3
                           pDataInd->msduPtr[pDataInd->msdu_length-1],
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7e9b      	ldrb	r3, [r3, #26]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	4413      	add	r3, r2
  if (!checkMsgXorSignature((char const *)(pDataInd->msduPtr),
 8001f96:	781a      	ldrb	r2, [r3, #0]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f000 f89d 	bl	80020d8 <checkMsgXorSignature>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <APP_MAC_mcpsDataIndCb+0x44>
                           0x00))
  {
    APP_DBG("FFD MAC APP - ERROR : CORRUPTED RECEIVED DATA ");
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <APP_MAC_mcpsDataIndCb+0x84>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff fa4f 	bl	800144c <logApplication>
 8001fae:	e018      	b.n	8001fe2 <APP_MAC_mcpsDataIndCb+0x76>
  }
  else
  {
    pDataInd->msduPtr[pDataInd->msdu_length-1] = '\0';//erase signature with EOS
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7e9b      	ldrb	r3, [r3, #26]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
    APP_DBG("FFD MAC APP - RECEIVE DATA : %s", (char const *) pDataInd->msduPtr);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <APP_MAC_mcpsDataIndCb+0x88>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fa3f 	bl	800144c <logApplication>
    BSP_LED_On(LED3);
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f000 fbae 	bl	8002730 <BSP_LED_On>
    HAL_Delay(300);
 8001fd4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fd8:	f000 fc82 	bl	80028e0 <HAL_Delay>
    BSP_LED_Off(LED3);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f000 fbc1 	bl	8002764 <BSP_LED_Off>
  }
  return MAC_SUCCESS;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000334 	.word	0x20000334
 8001ff0:	08008038 	.word	0x08008038
 8001ff4:	08008068 	.word	0x08008068

08001ff8 <APP_MAC_mcpsDataCnfCb>:

MAC_Status_t APP_MAC_mcpsDataCnfCb( const  MAC_dataCnf_t * pDataCnf )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( EVENT_DATA_CNF );
 8002000:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002004:	f004 fab8 	bl	8006578 <UTIL_SEQ_SetEvt>
  return MAC_SUCCESS;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <APP_MAC_mcpsPurgeCnfCb>:

MAC_Status_t APP_MAC_mcpsPurgeCnfCb( const  MAC_purgeCnf_t * pPurgeCnf )
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 800201a:	2302      	movs	r3, #2

}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <APP_MAC_mlmeSyncLossIndCb>:

MAC_Status_t APP_MAC_mlmeSyncLossIndCb( const MAC_syncLoss_t * syncLossPtr )
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8002030:	2302      	movs	r3, #2
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <APP_MAC_mlmeCalibrateCnfCb>:


MAC_Status_t APP_MAC_mlmeCalibrateCnfCb( const MAC_calibrateCnf_t * pCallibrateCnf)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8002046:	2302      	movs	r3, #2
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <APP_MAC_mlmeDpsCnfCb>:



MAC_Status_t APP_MAC_mlmeDpsCnfCb( const MAC_dpsCnf_t * pDpsCnf  )
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 800205c:	2302      	movs	r3, #2
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <APP_MAC_mlmeDpsIndCb>:


MAC_Status_t APP_MAC_mlmeDpsIndCb( const MAC_dpsInd_t * pDpsInd )
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8002072:	2302      	movs	r3, #2
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <APP_MAC_mlmeSoundingCnfCb>:


MAC_Status_t APP_MAC_mlmeSoundingCnfCb( const MAC_soundingCnf_t * pSoudingCnf)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 8002088:	2302      	movs	r3, #2
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <APP_MAC_mlmeGtsCnfCb>:

MAC_Status_t APP_MAC_mlmeGtsCnfCb( const MAC_gtsCnf_t * pGtsCnf)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 800209e:	2302      	movs	r3, #2
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <APP_MAC_mlmeGtsIndCb>:


MAC_Status_t APP_MAC_mlmeGtsIndCb( const MAC_GtsInd_t * pGtsInd )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 80020b4:	2302      	movs	r3, #2
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <APP_MAC_mlmePollIndCb>:

// APP_MAC_mlmePollIndCbPtr  mlmePollIndCb;
MAC_Status_t APP_MAC_mlmePollIndCb( const MAC_pollInd_t * pPollInd )
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  return MAC_NOT_IMPLEMENTED_STATUS;
 80020ca:	2302      	movs	r3, #2
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <checkMsgXorSignature>:

/* Private function Definition -----------------------------------------------*/

uint8_t checkMsgXorSignature(const char * pMessage, uint8_t message_len, 
                             uint8_t sign, uint8_t expectedRes)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	70fb      	strb	r3, [r7, #3]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70bb      	strb	r3, [r7, #2]
 80020ee:	4613      	mov	r3, r2
 80020f0:	707b      	strb	r3, [r7, #1]
  uint8_t seed = sign;
 80020f2:	78bb      	ldrb	r3, [r7, #2]
 80020f4:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0x00;i<message_len;i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	73bb      	strb	r3, [r7, #14]
 80020fa:	e009      	b.n	8002110 <checkMsgXorSignature+0x38>
    seed = (uint8_t)pMessage[i]^seed;
 80020fc:	7bbb      	ldrb	r3, [r7, #14]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	4053      	eors	r3, r2
 8002108:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0x00;i<message_len;i++)
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	3301      	adds	r3, #1
 800210e:	73bb      	strb	r3, [r7, #14]
 8002110:	7bba      	ldrb	r2, [r7, #14]
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	429a      	cmp	r2, r3
 8002116:	d3f1      	bcc.n	80020fc <checkMsgXorSignature+0x24>
  return (seed==expectedRes);
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	787b      	ldrb	r3, [r7, #1]
 800211c:	429a      	cmp	r2, r3
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800213e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002142:	4905      	ldr	r1, [pc, #20]	; (8002158 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	58000800 	.word	0x58000800

0800215c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	620b      	str	r3, [r1, #32]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	58000800 	.word	0x58000800

08002180 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <LL_PWR_EnableBootC2+0x1c>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <LL_PWR_EnableBootC2+0x1c>)
 800218a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	58000400 	.word	0x58000400

080021a0 <LL_AHB3_GRP1_EnableClock>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80021e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_C1_IPCC_EnableIT_TXF>:
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_C1_IPCC_EnableIT_RXO>:
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	605a      	str	r2, [r3, #4]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	605a      	str	r2, [r3, #4]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	605a      	str	r2, [r3, #4]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_C1_IPCC_DisableReceiveChannel>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	605a      	str	r2, [r3, #4]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_C1_IPCC_ClearFlag_CHx>:
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	609a      	str	r2, [r3, #8]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_C1_IPCC_SetFlag_CHx>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	041a      	lsls	r2, r3, #16
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	609a      	str	r2, [r3, #8]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	4013      	ands	r3, r2
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d101      	bne.n	8002330 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4013      	ands	r3, r2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d101      	bne.n	800235a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800236c:	2102      	movs	r1, #2
 800236e:	4822      	ldr	r0, [pc, #136]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 8002370:	f7ff ffe5 	bl	800233e <LL_C2_IPCC_IsActiveFlag_CHx>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HW_IPCC_Rx_Handler+0x26>
 800237a:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	43db      	mvns	r3, r3
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002388:	f000 f8e8 	bl	800255c <HW_IPCC_SYS_EvtHandler>
 800238c:	e030      	b.n	80023f0 <HW_IPCC_Rx_Handler+0x88>
  }
#ifdef MAC_802_15_4_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_MAC_802_15_4_NOTIFICATION_ACK_CHANNEL ))
 800238e:	2104      	movs	r1, #4
 8002390:	4819      	ldr	r0, [pc, #100]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 8002392:	f7ff ffd4 	bl	800233e <LL_C2_IPCC_IsActiveFlag_CHx>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HW_IPCC_Rx_Handler+0x48>
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
 80023aa:	f000 f915 	bl	80025d8 <HW_IPCC_MAC_802_15_4_NotEvtHandler>
 80023ae:	e01f      	b.n	80023f0 <HW_IPCC_Rx_Handler+0x88>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80023b0:	2101      	movs	r1, #1
 80023b2:	4811      	ldr	r0, [pc, #68]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 80023b4:	f7ff ffc3 	bl	800233e <LL_C2_IPCC_IsActiveFlag_CHx>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HW_IPCC_Rx_Handler+0x68>
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_BLE_EvtHandler();
 80023ca:	f000 f88b 	bl	80024e4 <HW_IPCC_BLE_EvtHandler>
 80023ce:	e00f      	b.n	80023f0 <HW_IPCC_Rx_Handler+0x88>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80023d0:	2108      	movs	r1, #8
 80023d2:	4809      	ldr	r0, [pc, #36]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 80023d4:	f7ff ffb3 	bl	800233e <LL_C2_IPCC_IsActiveFlag_CHx>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HW_IPCC_Rx_Handler+0x8a>
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HW_IPCC_Rx_Handler+0x90>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_TRACES_EvtHandler();
 80023ec:	f000 f940 	bl	8002670 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
}
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	58000c00 	.word	0x58000c00

080023fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002400:	2102      	movs	r1, #2
 8002402:	4822      	ldr	r0, [pc, #136]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 8002404:	f7ff ff86 	bl	8002314 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HW_IPCC_Tx_Handler+0x26>
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	43db      	mvns	r3, r3
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800241c:	f000 f892 	bl	8002544 <HW_IPCC_SYS_CmdEvtHandler>
 8002420:	e031      	b.n	8002486 <HW_IPCC_Tx_Handler+0x8a>
  }
#ifdef MAC_802_15_4_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MAC_802_15_4_CMD_RSP_CHANNEL ))
 8002422:	2104      	movs	r1, #4
 8002424:	4819      	ldr	r0, [pc, #100]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 8002426:	f7ff ff75 	bl	8002314 <LL_C1_IPCC_IsActiveFlag_CHx>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HW_IPCC_Tx_Handler+0x48>
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	43db      	mvns	r3, r3
 8002436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
 800243e:	f000 f8bf 	bl	80025c0 <HW_IPCC_MAC_802_15_4_CmdEvtHandler>
 8002442:	e020      	b.n	8002486 <HW_IPCC_Tx_Handler+0x8a>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */

  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002444:	2108      	movs	r1, #8
 8002446:	4811      	ldr	r0, [pc, #68]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 8002448:	f7ff ff64 	bl	8002314 <LL_C1_IPCC_IsActiveFlag_CHx>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HW_IPCC_Tx_Handler+0x6a>
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	43db      	mvns	r3, r3
 8002458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002460:	f000 f8e8 	bl	8002634 <HW_IPCC_MM_FreeBufHandler>
 8002464:	e00f      	b.n	8002486 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8002466:	2120      	movs	r1, #32
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 800246a:	f7ff ff53 	bl	8002314 <LL_C1_IPCC_IsActiveFlag_CHx>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HW_IPCC_Tx_Handler+0x8c>
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <HW_IPCC_Tx_Handler+0x90>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	43db      	mvns	r3, r3
 800247a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002482:	f000 f83b 	bl	80024fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002486:	bf00      	nop
 8002488:	bf00      	nop
}
 800248a:	bd80      	pop	{r7, pc}
 800248c:	58000c00 	.word	0x58000c00

08002490 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002494:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002498:	f7ff fe9b 	bl	80021d2 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800249c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024a0:	f7ff fe48 	bl	8002134 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80024a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024a8:	f7ff fe58 	bl	800215c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80024ac:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80024ae:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80024b0:	f7ff fe66 	bl	8002180 <LL_PWR_EnableBootC2>

  return;
 80024b4:	bf00      	nop
}
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80024bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024c0:	f7ff fe6e 	bl	80021a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <HW_IPCC_Init+0x28>)
 80024c6:	f7ff feb0 	bl	800222a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HW_IPCC_Init+0x28>)
 80024cc:	f7ff fe9d 	bl	800220a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80024d0:	202c      	movs	r0, #44	; 0x2c
 80024d2:	f000 fb24 	bl	8002b1e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80024d6:	202d      	movs	r0, #45	; 0x2d
 80024d8:	f000 fb21 	bl	8002b1e <HAL_NVIC_EnableIRQ>

  return;
 80024dc:	bf00      	nop
}
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58000c00 	.word	0x58000c00

080024e4 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80024e8:	f002 fc88 	bl	8004dfc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80024ec:	2101      	movs	r1, #1
 80024ee:	4802      	ldr	r0, [pc, #8]	; (80024f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80024f0:	f7ff fef3 	bl	80022da <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80024f4:	bf00      	nop
}
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58000c00 	.word	0x58000c00

080024fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8002500:	2120      	movs	r1, #32
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8002504:	f7ff feb4 	bl	8002270 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8002508:	f002 fca8 	bl	8004e5c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800250c:	bf00      	nop
}
 800250e:	bd80      	pop	{r7, pc}
 8002510:	58000c00 	.word	0x58000c00

08002514 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002518:	2102      	movs	r1, #2
 800251a:	4802      	ldr	r0, [pc, #8]	; (8002524 <HW_IPCC_SYS_Init+0x10>)
 800251c:	f7ff feba 	bl	8002294 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002520:	bf00      	nop
}
 8002522:	bd80      	pop	{r7, pc}
 8002524:	58000c00 	.word	0x58000c00

08002528 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800252c:	2102      	movs	r1, #2
 800252e:	4804      	ldr	r0, [pc, #16]	; (8002540 <HW_IPCC_SYS_SendCmd+0x18>)
 8002530:	f7ff fee1 	bl	80022f6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002534:	2102      	movs	r1, #2
 8002536:	4802      	ldr	r0, [pc, #8]	; (8002540 <HW_IPCC_SYS_SendCmd+0x18>)
 8002538:	f7ff fe87 	bl	800224a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800253c:	bf00      	nop
}
 800253e:	bd80      	pop	{r7, pc}
 8002540:	58000c00 	.word	0x58000c00

08002544 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002548:	2102      	movs	r1, #2
 800254a:	4803      	ldr	r0, [pc, #12]	; (8002558 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800254c:	f7ff fe90 	bl	8002270 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8002550:	f002 fcd4 	bl	8004efc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8002554:	bf00      	nop
}
 8002556:	bd80      	pop	{r7, pc}
 8002558:	58000c00 	.word	0x58000c00

0800255c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8002560:	f002 fce2 	bl	8004f28 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002564:	2102      	movs	r1, #2
 8002566:	4802      	ldr	r0, [pc, #8]	; (8002570 <HW_IPCC_SYS_EvtHandler+0x14>)
 8002568:	f7ff feb7 	bl	80022da <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800256c:	bf00      	nop
}
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58000c00 	.word	0x58000c00

08002574 <HW_IPCC_MAC_802_15_4_Init>:
/******************************************************************************
 * MAC 802.15.4
 ******************************************************************************/
#ifdef MAC_802_15_4_WB
void HW_IPCC_MAC_802_15_4_Init( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_MAC_802_15_4_NOTIFICATION_ACK_CHANNEL );
 8002578:	2104      	movs	r1, #4
 800257a:	4802      	ldr	r0, [pc, #8]	; (8002584 <HW_IPCC_MAC_802_15_4_Init+0x10>)
 800257c:	f7ff fe8a 	bl	8002294 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002580:	bf00      	nop
}
 8002582:	bd80      	pop	{r7, pc}
 8002584:	58000c00 	.word	0x58000c00

08002588 <HW_IPCC_MAC_802_15_4_SendCmd>:

void HW_IPCC_MAC_802_15_4_SendCmd( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MAC_802_15_4_CMD_RSP_CHANNEL );
 800258c:	2104      	movs	r1, #4
 800258e:	4804      	ldr	r0, [pc, #16]	; (80025a0 <HW_IPCC_MAC_802_15_4_SendCmd+0x18>)
 8002590:	f7ff feb1 	bl	80022f6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MAC_802_15_4_CMD_RSP_CHANNEL );
 8002594:	2104      	movs	r1, #4
 8002596:	4802      	ldr	r0, [pc, #8]	; (80025a0 <HW_IPCC_MAC_802_15_4_SendCmd+0x18>)
 8002598:	f7ff fe57 	bl	800224a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800259c:	bf00      	nop
}
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58000c00 	.word	0x58000c00

080025a4 <HW_IPCC_MAC_802_15_4_SendAck>:

void HW_IPCC_MAC_802_15_4_SendAck( void )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_MAC_802_15_4_NOTIFICATION_ACK_CHANNEL );
 80025a8:	2104      	movs	r1, #4
 80025aa:	4804      	ldr	r0, [pc, #16]	; (80025bc <HW_IPCC_MAC_802_15_4_SendAck+0x18>)
 80025ac:	f7ff fe95 	bl	80022da <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_MAC_802_15_4_NOTIFICATION_ACK_CHANNEL );
 80025b0:	2104      	movs	r1, #4
 80025b2:	4802      	ldr	r0, [pc, #8]	; (80025bc <HW_IPCC_MAC_802_15_4_SendAck+0x18>)
 80025b4:	f7ff fe6e 	bl	8002294 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80025b8:	bf00      	nop
}
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	58000c00 	.word	0x58000c00

080025c0 <HW_IPCC_MAC_802_15_4_CmdEvtHandler>:

static void HW_IPCC_MAC_802_15_4_CmdEvtHandler( void )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MAC_802_15_4_CMD_RSP_CHANNEL );
 80025c4:	2104      	movs	r1, #4
 80025c6:	4803      	ldr	r0, [pc, #12]	; (80025d4 <HW_IPCC_MAC_802_15_4_CmdEvtHandler+0x14>)
 80025c8:	f7ff fe52 	bl	8002270 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_MAC_802_15_4_CmdEvtNot();
 80025cc:	f002 fd02 	bl	8004fd4 <HW_IPCC_MAC_802_15_4_CmdEvtNot>

  return;
 80025d0:	bf00      	nop
}
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	58000c00 	.word	0x58000c00

080025d8 <HW_IPCC_MAC_802_15_4_NotEvtHandler>:

static void HW_IPCC_MAC_802_15_4_NotEvtHandler( void )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_MAC_802_15_4_NOTIFICATION_ACK_CHANNEL );
 80025dc:	2104      	movs	r1, #4
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <HW_IPCC_MAC_802_15_4_NotEvtHandler+0x14>)
 80025e0:	f7ff fe6a 	bl	80022b8 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_MAC_802_15_4_EvtNot();
 80025e4:	f002 fd02 	bl	8004fec <HW_IPCC_MAC_802_15_4_EvtNot>

  return;
 80025e8:	bf00      	nop
}
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	58000c00 	.word	0x58000c00

080025f0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80025f8:	2108      	movs	r1, #8
 80025fa:	480c      	ldr	r0, [pc, #48]	; (800262c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80025fc:	f7ff fe8a 	bl	8002314 <LL_C1_IPCC_IsActiveFlag_CHx>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800260c:	2108      	movs	r1, #8
 800260e:	4807      	ldr	r0, [pc, #28]	; (800262c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002610:	f7ff fe1b 	bl	800224a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8002614:	e006      	b.n	8002624 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800261a:	2108      	movs	r1, #8
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800261e:	f7ff fe6a 	bl	80022f6 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8002622:	bf00      	nop
}
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	58000c00 	.word	0x58000c00
 8002630:	20000378 	.word	0x20000378

08002634 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002638:	2108      	movs	r1, #8
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800263c:	f7ff fe18 	bl	8002270 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002646:	2108      	movs	r1, #8
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800264a:	f7ff fe54 	bl	80022f6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800264e:	bf00      	nop
}
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	58000c00 	.word	0x58000c00
 8002658:	20000378 	.word	0x20000378

0800265c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002660:	2108      	movs	r1, #8
 8002662:	4802      	ldr	r0, [pc, #8]	; (800266c <HW_IPCC_TRACES_Init+0x10>)
 8002664:	f7ff fe16 	bl	8002294 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002668:	bf00      	nop
}
 800266a:	bd80      	pop	{r7, pc}
 800266c:	58000c00 	.word	0x58000c00

08002670 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8002674:	f002 fd4c 	bl	8005110 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002678:	2108      	movs	r1, #8
 800267a:	4802      	ldr	r0, [pc, #8]	; (8002684 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800267c:	f7ff fe2d 	bl	80022da <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002680:	bf00      	nop
}
 8002682:	bd80      	pop	{r7, pc}
 8002684:	58000c00 	.word	0x58000c00

08002688 <LL_AHB2_GRP1_EnableClock>:
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ac:	68fb      	ldr	r3, [r7, #12]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80026d6:	2002      	movs	r0, #2
 80026d8:	f7ff ffd6 	bl	8002688 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <BSP_LED_Init+0x6c>)
 80026e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026e4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e6:	2301      	movs	r3, #1
 80026e8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4a0d      	ldr	r2, [pc, #52]	; (800272c <BSP_LED_Init+0x70>)
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	f107 020c 	add.w	r2, r7, #12
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd59 	bl	80031b8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	4a08      	ldr	r2, [pc, #32]	; (800272c <BSP_LED_Init+0x70>)
 800270a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <BSP_LED_Init+0x6c>)
 8002712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002716:	2200      	movs	r2, #0
 8002718:	4619      	mov	r1, r3
 800271a:	f000 febd 	bl	8003498 <HAL_GPIO_WritePin>
}
 800271e:	bf00      	nop
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	08008128 	.word	0x08008128
 800272c:	20000008 	.word	0x20000008

08002730 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <BSP_LED_On+0x2c>)
 800273e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <BSP_LED_On+0x30>)
 8002746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	f000 fea3 	bl	8003498 <HAL_GPIO_WritePin>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000008 	.word	0x20000008
 8002760:	08008128 	.word	0x08008128

08002764 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <BSP_LED_Off+0x2c>)
 8002772:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <BSP_LED_Off+0x30>)
 800277a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800277e:	2200      	movs	r2, #0
 8002780:	4619      	mov	r1, r3
 8002782:	f000 fe89 	bl	8003498 <HAL_GPIO_WritePin>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000008 	.word	0x20000008
 8002794:	08008128 	.word	0x08008128

08002798 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <BSP_LED_Toggle+0x2c>)
 80027a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4906      	ldr	r1, [pc, #24]	; (80027c8 <BSP_LED_Toggle+0x30>)
 80027ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f000 fe87 	bl	80034c8 <HAL_GPIO_TogglePin>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000008 	.word	0x20000008
 80027c8:	08008128 	.word	0x08008128

080027cc <LL_DBGMCU_EnableDBGSleepMode>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6053      	str	r3, [r2, #4]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e0042000 	.word	0xe0042000

080027ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f6:	2003      	movs	r0, #3
 80027f8:	f000 f96c 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027fc:	200f      	movs	r0, #15
 80027fe:	f000 f815 	bl	800282c <HAL_InitTick>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	e001      	b.n	8002812 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800280e:	f000 f805 	bl	800281c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002812:	79fb      	ldrb	r3, [r7, #7]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_InitTick+0x6c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d024      	beq.n	800288a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002840:	f000 ff60 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_InitTick+0x6c>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002850:	fbb3 f3f1 	udiv	r3, r3, r1
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f96e 	bl	8002b3a <HAL_SYSTICK_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	d809      	bhi.n	800287e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286a:	2200      	movs	r2, #0
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	f04f 30ff 	mov.w	r0, #4294967295
 8002872:	f000 f93a 	bl	8002aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_InitTick+0x70>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e007      	b.n	800288e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e004      	b.n	800288e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e001      	b.n	800288e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000018 	.word	0x20000018
 800289c:	20000014 	.word	0x20000014

080028a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000018 	.word	0x20000018
 80028c4:	2000037c 	.word	0x2000037c

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000037c 	.word	0x2000037c

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000018 	.word	0x20000018

08002928 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800292c:	f7ff ff4e 	bl	80027cc <LL_DBGMCU_EnableDBGSleepMode>
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	; (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	; (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f7ff ff8e 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff29 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002af8:	f7ff ff40 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff90 	bl	8002a28 <NVIC_EncodePriority>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff5f 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff33 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ffa4 	bl	8002a90 <SysTick_Config>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e08e      	b.n	8002c84 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_DMA_Init+0x138>)
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d80f      	bhi.n	8002b92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <HAL_DMA_Init+0x13c>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a45      	ldr	r2, [pc, #276]	; (8002c94 <HAL_DMA_Init+0x140>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	009a      	lsls	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_DMA_Init+0x144>)
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b90:	e00e      	b.n	8002bb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <HAL_DMA_Init+0x148>)
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a3d      	ldr	r2, [pc, #244]	; (8002c94 <HAL_DMA_Init+0x140>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	009a      	lsls	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <HAL_DMA_Init+0x14c>)
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa74 	bl	80030f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c10:	d102      	bne.n	8002c18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_DMA_Init+0x106>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d80c      	bhi.n	8002c5a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fa93 	bl	800316c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e008      	b.n	8002c6c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40020407 	.word	0x40020407
 8002c90:	bffdfff8 	.word	0xbffdfff8
 8002c94:	cccccccd 	.word	0xcccccccd
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	bffdfbf8 	.word	0xbffdfbf8
 8002ca0:	40020400 	.word	0x40020400

08002ca4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA_Start_IT+0x20>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e066      	b.n	8002d92 <HAL_DMA_Start_IT+0xee>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d155      	bne.n	8002d84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f9b9 	bl	8003074 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 020e 	orr.w	r2, r2, #14
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e00f      	b.n	8002d3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 020a 	orr.w	r2, r2, #10
 8002d3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e005      	b.n	8002d90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e04f      	b.n	8002e4c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d008      	beq.n	8002dca <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e040      	b.n	8002e4c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 020e 	bic.w	r2, r2, #14
 8002dd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f003 021c 	and.w	r2, r3, #28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d005      	beq.n	8002e7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2204      	movs	r2, #4
 8002e74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e047      	b.n	8002f0c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 020e 	bic.w	r2, r2, #14
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	f003 021c 	and.w	r2, r3, #28
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ec8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
    }
  }
  return status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f003 031c 	and.w	r3, r3, #28
 8002f36:	2204      	movs	r2, #4
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d026      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x7a>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d021      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0204 	bic.w	r2, r2, #4
 8002f68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 021c 	and.w	r2, r3, #28
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2104      	movs	r1, #4
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d071      	beq.n	800306a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f8e:	e06c      	b.n	800306a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 031c 	and.w	r3, r3, #28
 8002f98:	2202      	movs	r2, #2
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02e      	beq.n	8003002 <HAL_DMA_IRQHandler+0xec>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d029      	beq.n	8003002 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 020a 	bic.w	r2, r2, #10
 8002fca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f003 021c 	and.w	r2, r3, #28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d038      	beq.n	800306a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003000:	e033      	b.n	800306a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 031c 	and.w	r3, r3, #28
 800300a:	2208      	movs	r2, #8
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02a      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d025      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 020e 	bic.w	r2, r2, #14
 800302e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f003 021c 	and.w	r2, r3, #28
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f202 	lsl.w	r2, r1, r2
 8003042:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800306a:	bf00      	nop
 800306c:	bf00      	nop
}
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800308a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800309c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f003 021c 	and.w	r2, r3, #28
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f202 	lsl.w	r2, r1, r2
 80030b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d108      	bne.n	80030d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030d2:	e007      	b.n	80030e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d80a      	bhi.n	800311a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003110:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6493      	str	r3, [r2, #72]	; 0x48
 8003118:	e007      	b.n	800312a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	009a      	lsls	r2, r3, #2
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003124:	4413      	add	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3b08      	subs	r3, #8
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003140:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40020407 	.word	0x40020407
 8003160:	4002081c 	.word	0x4002081c
 8003164:	cccccccd 	.word	0xcccccccd
 8003168:	40020880 	.word	0x40020880

0800316c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003190:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3b01      	subs	r3, #1
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2201      	movs	r2, #1
 800319c:	409a      	lsls	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	1000823f 	.word	0x1000823f
 80031b4:	40020940 	.word	0x40020940

080031b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031c6:	e14c      	b.n	8003462 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	4013      	ands	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 813e 	beq.w	800345c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d005      	beq.n	80031f8 <HAL_GPIO_Init+0x40>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d130      	bne.n	800325a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800322e:	2201      	movs	r2, #1
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 0201 	and.w	r2, r3, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b03      	cmp	r3, #3
 8003264:	d017      	beq.n	8003296 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	2203      	movs	r2, #3
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d123      	bne.n	80032ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	08da      	lsrs	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3208      	adds	r2, #8
 80032aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	6939      	ldr	r1, [r7, #16]
 80032e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0203 	and.w	r2, r3, #3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8098 	beq.w	800345c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800332c:	4a54      	ldr	r2, [pc, #336]	; (8003480 <HAL_GPIO_Init+0x2c8>)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	220f      	movs	r2, #15
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003356:	d019      	beq.n	800338c <HAL_GPIO_Init+0x1d4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a4a      	ldr	r2, [pc, #296]	; (8003484 <HAL_GPIO_Init+0x2cc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_GPIO_Init+0x1d0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a49      	ldr	r2, [pc, #292]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00d      	beq.n	8003384 <HAL_GPIO_Init+0x1cc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a48      	ldr	r2, [pc, #288]	; (800348c <HAL_GPIO_Init+0x2d4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <HAL_GPIO_Init+0x1c8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a47      	ldr	r2, [pc, #284]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_GPIO_Init+0x1c4>
 8003378:	2304      	movs	r3, #4
 800337a:	e008      	b.n	800338e <HAL_GPIO_Init+0x1d6>
 800337c:	2307      	movs	r3, #7
 800337e:	e006      	b.n	800338e <HAL_GPIO_Init+0x1d6>
 8003380:	2303      	movs	r3, #3
 8003382:	e004      	b.n	800338e <HAL_GPIO_Init+0x1d6>
 8003384:	2302      	movs	r3, #2
 8003386:	e002      	b.n	800338e <HAL_GPIO_Init+0x1d6>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_GPIO_Init+0x1d6>
 800338c:	2300      	movs	r3, #0
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	f002 0203 	and.w	r2, r2, #3
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	4093      	lsls	r3, r2
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800339e:	4938      	ldr	r1, [pc, #224]	; (8003480 <HAL_GPIO_Init+0x2c8>)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ac:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033d0:	4a30      	ldr	r2, [pc, #192]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033d6:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033fa:	4a26      	ldr	r2, [pc, #152]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003426:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800342e:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3301      	adds	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f aeab 	bne.w	80031c8 <HAL_GPIO_Init+0x10>
  }
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40010000 	.word	0x40010000
 8003484:	48000400 	.word	0x48000400
 8003488:	48000800 	.word	0x48000800
 800348c:	48000c00 	.word	0x48000c00
 8003490:	48001000 	.word	0x48001000
 8003494:	58000800 	.word	0x58000800

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034b4:	e002      	b.n	80034bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43d9      	mvns	r1, r3
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	400b      	ands	r3, r1
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	619a      	str	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6013      	str	r3, [r2, #0]
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	58000400 	.word	0x58000400

0800351c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d101      	bne.n	8003534 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_RCC_MSI_GetRange>:
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003550:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2bb0      	cmp	r3, #176	; 0xb0
 8003556:	d901      	bls.n	800355c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003558:	23b0      	movs	r3, #176	; 0xb0
 800355a:	607b      	str	r3, [r7, #4]
  return msiRange;
 800355c:	687b      	ldr	r3, [r7, #4]
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_RCC_GetSysClkSource>:
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <LL_RCC_GetAHBPrescaler>:
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_RCC_GetAPB1Prescaler>:
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <LL_RCC_GetAPB2Prescaler>:
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80035b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_PLL_GetN>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_RCC_PLL_GetR>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80035e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_RCC_PLL_GetDivider>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_RCC_PLL_GetMainSource>:
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	f7ff ff9a 	bl	800356a <LL_RCC_GetSysClkSource>
 8003636:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800363e:	f7ff ff7f 	bl	8003540 <LL_RCC_MSI_GetRange>
 8003642:	4603      	mov	r3, r0
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e04b      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b04      	cmp	r3, #4
 8003658:	d102      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800365a:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e045      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b08      	cmp	r3, #8
 8003664:	d10a      	bne.n	800367c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003666:	f7ff ff59 	bl	800351c <LL_RCC_HSE_IsEnabledDiv2>
 800366a:	4603      	mov	r3, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	d102      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e03a      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e037      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800367c:	f7ff ffca 	bl	8003614 <LL_RCC_PLL_GetMainSource>
 8003680:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d003      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x64>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d003      	beq.n	8003696 <HAL_RCC_GetSysClockFreq+0x6a>
 800368e:	e00d      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003692:	60bb      	str	r3, [r7, #8]
        break;
 8003694:	e015      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003696:	f7ff ff41 	bl	800351c <LL_RCC_HSE_IsEnabledDiv2>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d102      	bne.n	80036a6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80036a2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80036a4:	e00d      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_RCC_GetSysClockFreq+0xd4>)
 80036a8:	60bb      	str	r3, [r7, #8]
        break;
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036ac:	f7ff ff48 	bl	8003540 <LL_RCC_MSI_GetRange>
 80036b0:	4603      	mov	r3, r0
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	4a0f      	ldr	r2, [pc, #60]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	60bb      	str	r3, [r7, #8]
        break;
 80036c0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80036c2:	f7ff ff82 	bl	80035ca <LL_RCC_PLL_GetN>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	fb03 f402 	mul.w	r4, r3, r2
 80036ce:	f7ff ff95 	bl	80035fc <LL_RCC_PLL_GetDivider>
 80036d2:	4603      	mov	r3, r0
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	3301      	adds	r3, #1
 80036d8:	fbb4 f4f3 	udiv	r4, r4, r3
 80036dc:	f7ff ff82 	bl	80035e4 <LL_RCC_PLL_GetR>
 80036e0:	4603      	mov	r3, r0
 80036e2:	0f5b      	lsrs	r3, r3, #29
 80036e4:	3301      	adds	r3, #1
 80036e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80036ea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80036ec:	68fb      	ldr	r3, [r7, #12]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd90      	pop	{r4, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	080080e8 	.word	0x080080e8
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	01e84800 	.word	0x01e84800

08003704 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b598      	push	{r3, r4, r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003708:	f7ff ff90 	bl	800362c <HAL_RCC_GetSysClockFreq>
 800370c:	4604      	mov	r4, r0
 800370e:	f7ff ff38 	bl	8003582 <LL_RCC_GetAHBPrescaler>
 8003712:	4603      	mov	r3, r0
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <HAL_RCC_GetHCLKFreq+0x24>)
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd98      	pop	{r3, r4, r7, pc}
 8003728:	08008088 	.word	0x08008088

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b598      	push	{r3, r4, r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003730:	f7ff ffe8 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003734:	4604      	mov	r4, r0
 8003736:	f7ff ff30 	bl	800359a <LL_RCC_GetAPB1Prescaler>
 800373a:	4603      	mov	r3, r0
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd98      	pop	{r3, r4, r7, pc}
 8003754:	080080c8 	.word	0x080080c8

08003758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003758:	b598      	push	{r3, r4, r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800375c:	f7ff ffd2 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003760:	4604      	mov	r4, r0
 8003762:	f7ff ff26 	bl	80035b2 <LL_RCC_GetAPB2Prescaler>
 8003766:	4603      	mov	r3, r0
 8003768:	0adb      	lsrs	r3, r3, #11
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	4a04      	ldr	r2, [pc, #16]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa24 f303 	lsr.w	r3, r4, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd98      	pop	{r3, r4, r7, pc}
 8003780:	080080c8 	.word	0x080080c8

08003784 <LL_RCC_GetUSARTClockSource>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4013      	ands	r3, r2
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_GetLPUARTClockSource>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4013      	ands	r3, r2
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e042      	b.n	800385c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fa17 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2224      	movs	r2, #36	; 0x24
 80037f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fe14 	bl	800443c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fbe9 	bl	8003fec <UART_SetConfig>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e01b      	b.n	800385c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fe93 	bl	8004580 <UART_CheckIdleState>
 800385a:	4603      	mov	r3, r0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003878:	2b20      	cmp	r3, #32
 800387a:	d167      	bne.n	800394c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Transmit_DMA+0x24>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e060      	b.n	800394e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	; 0x21
 80038ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d028      	beq.n	800390c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038be:	4a26      	ldr	r2, [pc, #152]	; (8003958 <HAL_UART_Transmit_DMA+0xf4>)
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c6:	4a25      	ldr	r2, [pc, #148]	; (800395c <HAL_UART_Transmit_DMA+0xf8>)
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ce:	4a24      	ldr	r2, [pc, #144]	; (8003960 <HAL_UART_Transmit_DMA+0xfc>)
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d6:	2200      	movs	r2, #0
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e2:	4619      	mov	r1, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3328      	adds	r3, #40	; 0x28
 80038ea:	461a      	mov	r2, r3
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	f7ff f9d9 	bl	8002ca4 <HAL_DMA_Start_IT>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2210      	movs	r2, #16
 80038fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e020      	b.n	800394e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3308      	adds	r3, #8
 800391a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	613b      	str	r3, [r7, #16]
   return(result);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3308      	adds	r3, #8
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	623a      	str	r2, [r7, #32]
 8003936:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	69f9      	ldr	r1, [r7, #28]
 800393a:	6a3a      	ldr	r2, [r7, #32]
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	61bb      	str	r3, [r7, #24]
   return(result);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e5      	bne.n	8003914 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3728      	adds	r7, #40	; 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	080048f1 	.word	0x080048f1
 800395c:	0800498b 	.word	0x0800498b
 8003960:	080049a7 	.word	0x080049a7

08003964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0ba      	sub	sp, #232	; 0xe8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800398a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800398e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003992:	4013      	ands	r3, r2
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11b      	bne.n	80039d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 82e3 	beq.w	8003f94 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
      }
      return;
 80039d6:	e2dd      	b.n	8003f94 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80039d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8123 	beq.w	8003c28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80039e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80039e6:	4b8d      	ldr	r3, [pc, #564]	; (8003c1c <HAL_UART_IRQHandler+0x2b8>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80039ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039f2:	4b8b      	ldr	r3, [pc, #556]	; (8003c20 <HAL_UART_IRQHandler+0x2bc>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8116 	beq.w	8003c28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d011      	beq.n	8003a2c <HAL_UART_IRQHandler+0xc8>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d011      	beq.n	8003a5c <HAL_UART_IRQHandler+0xf8>
 8003a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d011      	beq.n	8003a8c <HAL_UART_IRQHandler+0x128>
 8003a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d017      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003aa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003aa8:	4b5c      	ldr	r3, [pc, #368]	; (8003c1c <HAL_UART_IRQHandler+0x2b8>)
 8003aaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f043 0208 	orr.w	r2, r3, #8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <HAL_UART_IRQHandler+0x196>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8249 	beq.w	8003f98 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d013      	beq.n	8003b3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d054      	beq.n	8003c08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fe60 	bl	8004824 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d146      	bne.n	8003c00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3308      	adds	r3, #8
 8003b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1d9      	bne.n	8003b72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <HAL_UART_IRQHandler+0x2c0>)
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f93d 	bl	8002e58 <HAL_DMA_Abort_IT>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d019      	beq.n	8003c18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf6:	e00f      	b.n	8003c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9e1 	bl	8003fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfe:	e00b      	b.n	8003c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f9dd 	bl	8003fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c06:	e007      	b.n	8003c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f9d9 	bl	8003fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003c16:	e1bf      	b.n	8003f98 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	bf00      	nop
    return;
 8003c1a:	e1bd      	b.n	8003f98 <HAL_UART_IRQHandler+0x634>
 8003c1c:	10000001 	.word	0x10000001
 8003c20:	04000120 	.word	0x04000120
 8003c24:	08004a27 	.word	0x08004a27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	f040 8153 	bne.w	8003ed8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 814c 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8145 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2210      	movs	r2, #16
 8003c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	f040 80bb 	bne.w	8003ddc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 818f 	beq.w	8003f9c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	f080 8187 	bcs.w	8003f9c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 8087 	bne.w	8003dba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1da      	bne.n	8003cac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e1      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e3      	bne.n	8003d32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d88:	f023 0310 	bic.w	r3, r3, #16
 8003d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e4      	bne.n	8003d78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fff0 	bl	8002d9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8fd 	bl	8003fd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dda:	e0df      	b.n	8003f9c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80d1 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003dfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80cc 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e4      	bne.n	8003e08 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e66:	633a      	str	r2, [r7, #48]	; 0x30
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e1      	bne.n	8003e3e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0310 	bic.w	r3, r3, #16
 8003ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	69b9      	ldr	r1, [r7, #24]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e4      	bne.n	8003e8e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f87f 	bl	8003fd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ed6:	e063      	b.n	8003fa0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <HAL_UART_IRQHandler+0x59e>
 8003ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fdd4 	bl	8004aa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f00:	e051      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d014      	beq.n	8003f38 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d105      	bne.n	8003f26 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d03a      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
    }
    return;
 8003f36:	e035      	b.n	8003fa4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_UART_IRQHandler+0x5f4>
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fd7e 	bl	8004a52 <UART_EndTransmit_IT>
    return;
 8003f56:	e026      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_UART_IRQHandler+0x614>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fdad 	bl	8004ad0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f76:	e016      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x642>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da0c      	bge.n	8003fa6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fd95 	bl	8004abc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f92:	e008      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
      return;
 8003f94:	bf00      	nop
 8003f96:	e006      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
    return;
 8003f98:	bf00      	nop
 8003f9a:	e004      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
      return;
 8003f9c:	bf00      	nop
 8003f9e:	e002      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
      return;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_IRQHandler+0x642>
    return;
 8003fa4:	bf00      	nop
  }
}
 8003fa6:	37e8      	adds	r7, #232	; 0xe8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff0:	b08c      	sub	sp, #48	; 0x30
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	431a      	orrs	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	431a      	orrs	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	4313      	orrs	r3, r2
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4baf      	ldr	r3, [pc, #700]	; (80042d8 <UART_SetConfig+0x2ec>)
 800401c:	4013      	ands	r3, r2
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004024:	430b      	orrs	r3, r1
 8004026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4aa4      	ldr	r2, [pc, #656]	; (80042dc <UART_SetConfig+0x2f0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004054:	4313      	orrs	r3, r2
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004062:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f023 010f 	bic.w	r1, r3, #15
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a95      	ldr	r2, [pc, #596]	; (80042e0 <UART_SetConfig+0x2f4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d125      	bne.n	80040dc <UART_SetConfig+0xf0>
 8004090:	2003      	movs	r0, #3
 8004092:	f7ff fb77 	bl	8003784 <LL_RCC_GetUSARTClockSource>
 8004096:	4603      	mov	r3, r0
 8004098:	2b03      	cmp	r3, #3
 800409a:	d81b      	bhi.n	80040d4 <UART_SetConfig+0xe8>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0xb8>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040c5 	.word	0x080040c5
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ba:	e042      	b.n	8004142 <UART_SetConfig+0x156>
 80040bc:	2302      	movs	r3, #2
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c2:	e03e      	b.n	8004142 <UART_SetConfig+0x156>
 80040c4:	2304      	movs	r3, #4
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ca:	e03a      	b.n	8004142 <UART_SetConfig+0x156>
 80040cc:	2308      	movs	r3, #8
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d2:	e036      	b.n	8004142 <UART_SetConfig+0x156>
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040da:	e032      	b.n	8004142 <UART_SetConfig+0x156>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a7e      	ldr	r2, [pc, #504]	; (80042dc <UART_SetConfig+0x2f0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d12a      	bne.n	800413c <UART_SetConfig+0x150>
 80040e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80040ea:	f7ff fb5b 	bl	80037a4 <LL_RCC_GetLPUARTClockSource>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f4:	d01a      	beq.n	800412c <UART_SetConfig+0x140>
 80040f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fa:	d81b      	bhi.n	8004134 <UART_SetConfig+0x148>
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004100:	d00c      	beq.n	800411c <UART_SetConfig+0x130>
 8004102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004106:	d815      	bhi.n	8004134 <UART_SetConfig+0x148>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <UART_SetConfig+0x128>
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d008      	beq.n	8004124 <UART_SetConfig+0x138>
 8004112:	e00f      	b.n	8004134 <UART_SetConfig+0x148>
 8004114:	2300      	movs	r3, #0
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411a:	e012      	b.n	8004142 <UART_SetConfig+0x156>
 800411c:	2302      	movs	r3, #2
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004122:	e00e      	b.n	8004142 <UART_SetConfig+0x156>
 8004124:	2304      	movs	r3, #4
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412a:	e00a      	b.n	8004142 <UART_SetConfig+0x156>
 800412c:	2308      	movs	r3, #8
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004132:	e006      	b.n	8004142 <UART_SetConfig+0x156>
 8004134:	2310      	movs	r3, #16
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413a:	e002      	b.n	8004142 <UART_SetConfig+0x156>
 800413c:	2310      	movs	r3, #16
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a65      	ldr	r2, [pc, #404]	; (80042dc <UART_SetConfig+0x2f0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	f040 8097 	bne.w	800427c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800414e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004152:	2b08      	cmp	r3, #8
 8004154:	d823      	bhi.n	800419e <UART_SetConfig+0x1b2>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x170>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004181 	.word	0x08004181
 8004160:	0800419f 	.word	0x0800419f
 8004164:	08004189 	.word	0x08004189
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800418f 	.word	0x0800418f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	0800419f 	.word	0x0800419f
 8004178:	0800419f 	.word	0x0800419f
 800417c:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7ff fad4 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004186:	e010      	b.n	80041aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b56      	ldr	r3, [pc, #344]	; (80042e4 <UART_SetConfig+0x2f8>)
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800418c:	e00d      	b.n	80041aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7ff fa4d 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8004192:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004194:	e009      	b.n	80041aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800419c:	e005      	b.n	80041aa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 812b 	beq.w	8004408 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	4a4c      	ldr	r2, [pc, #304]	; (80042e8 <UART_SetConfig+0x2fc>)
 80041b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041bc:	461a      	mov	r2, r3
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d305      	bcc.n	80041e2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d903      	bls.n	80041ea <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041e8:	e10e      	b.n	8004408 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	2200      	movs	r2, #0
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	60fa      	str	r2, [r7, #12]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	4a3c      	ldr	r2, [pc, #240]	; (80042e8 <UART_SetConfig+0x2fc>)
 80041f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2200      	movs	r2, #0
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004208:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800420c:	f7fc f808 	bl	8000220 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	020b      	lsls	r3, r1, #8
 8004222:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004226:	0202      	lsls	r2, r0, #8
 8004228:	6979      	ldr	r1, [r7, #20]
 800422a:	6849      	ldr	r1, [r1, #4]
 800422c:	0849      	lsrs	r1, r1, #1
 800422e:	2000      	movs	r0, #0
 8004230:	460c      	mov	r4, r1
 8004232:	4605      	mov	r5, r0
 8004234:	eb12 0804 	adds.w	r8, r2, r4
 8004238:	eb43 0905 	adc.w	r9, r3, r5
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	469a      	mov	sl, r3
 8004244:	4693      	mov	fp, r2
 8004246:	4652      	mov	r2, sl
 8004248:	465b      	mov	r3, fp
 800424a:	4640      	mov	r0, r8
 800424c:	4649      	mov	r1, r9
 800424e:	f7fb ffe7 	bl	8000220 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4613      	mov	r3, r2
 8004258:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004260:	d308      	bcc.n	8004274 <UART_SetConfig+0x288>
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004268:	d204      	bcs.n	8004274 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	e0c9      	b.n	8004408 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800427a:	e0c5      	b.n	8004408 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004284:	d16d      	bne.n	8004362 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800428a:	3b01      	subs	r3, #1
 800428c:	2b07      	cmp	r3, #7
 800428e:	d82d      	bhi.n	80042ec <UART_SetConfig+0x300>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <UART_SetConfig+0x2ac>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042b9 	.word	0x080042b9
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042ed 	.word	0x080042ed
 80042a4:	080042c7 	.word	0x080042c7
 80042a8:	080042ed 	.word	0x080042ed
 80042ac:	080042ed 	.word	0x080042ed
 80042b0:	080042ed 	.word	0x080042ed
 80042b4:	080042cf 	.word	0x080042cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7ff fa4e 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042be:	e01b      	b.n	80042f8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <UART_SetConfig+0x2f8>)
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042c4:	e018      	b.n	80042f8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c6:	f7ff f9b1 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042cc:	e014      	b.n	80042f8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042d4:	e010      	b.n	80042f8 <UART_SetConfig+0x30c>
 80042d6:	bf00      	nop
 80042d8:	cfff69f3 	.word	0xcfff69f3
 80042dc:	40008000 	.word	0x40008000
 80042e0:	40013800 	.word	0x40013800
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	08008130 	.word	0x08008130
      default:
        pclk = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8084 	beq.w	8004408 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	4a4b      	ldr	r2, [pc, #300]	; (8004434 <UART_SetConfig+0x448>)
 8004306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800430a:	461a      	mov	r2, r3
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004312:	005a      	lsls	r2, r3, #1
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	441a      	add	r2, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d916      	bls.n	800435a <UART_SetConfig+0x36e>
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	d212      	bcs.n	800435a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f023 030f 	bic.w	r3, r3, #15
 800433c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	b29a      	uxth	r2, r3
 800434a:	8bfb      	ldrh	r3, [r7, #30]
 800434c:	4313      	orrs	r3, r2
 800434e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	8bfa      	ldrh	r2, [r7, #30]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	e056      	b.n	8004408 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004360:	e052      	b.n	8004408 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004366:	3b01      	subs	r3, #1
 8004368:	2b07      	cmp	r3, #7
 800436a:	d822      	bhi.n	80043b2 <UART_SetConfig+0x3c6>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0x388>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004395 	.word	0x08004395
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043b3 	.word	0x080043b3
 8004380:	080043a3 	.word	0x080043a3
 8004384:	080043b3 	.word	0x080043b3
 8004388:	080043b3 	.word	0x080043b3
 800438c:	080043b3 	.word	0x080043b3
 8004390:	080043ab 	.word	0x080043ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7ff f9e0 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800439a:	e010      	b.n	80043be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800439c:	4b26      	ldr	r3, [pc, #152]	; (8004438 <UART_SetConfig+0x44c>)
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043a0:	e00d      	b.n	80043be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a2:	f7ff f943 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80043a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043a8:	e009      	b.n	80043be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043b0:	e005      	b.n	80043be <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043bc:	bf00      	nop
    }

    if (pclk != 0U)
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d021      	beq.n	8004408 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <UART_SetConfig+0x448>)
 80043ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ce:	461a      	mov	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	441a      	add	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	d909      	bls.n	8004402 <UART_SetConfig+0x416>
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d205      	bcs.n	8004402 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	e002      	b.n	8004408 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2201      	movs	r2, #1
 800440c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2201      	movs	r2, #1
 8004414:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2200      	movs	r2, #0
 800441c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004424:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004428:	4618      	mov	r0, r3
 800442a:	3730      	adds	r7, #48	; 0x30
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop
 8004434:	08008130 	.word	0x08008130
 8004438:	00f42400 	.word	0x00f42400

0800443c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01a      	beq.n	8004552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453a:	d10a      	bne.n	8004552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	605a      	str	r2, [r3, #4]
  }
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b098      	sub	sp, #96	; 0x60
 8004584:	af02      	add	r7, sp, #8
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004590:	f7fe f99a 	bl	80028c8 <HAL_GetTick>
 8004594:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d12f      	bne.n	8004604 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ac:	2200      	movs	r2, #0
 80045ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f88e 	bl	80046d4 <UART_WaitOnFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d022      	beq.n	8004604 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d2:	653b      	str	r3, [r7, #80]	; 0x50
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045dc:	647b      	str	r3, [r7, #68]	; 0x44
 80045de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e6      	bne.n	80045be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e063      	b.n	80046cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d149      	bne.n	80046a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004612:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461a:	2200      	movs	r2, #0
 800461c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f857 	bl	80046d4 <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d03c      	beq.n	80046a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	623b      	str	r3, [r7, #32]
   return(result);
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004640:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	633b      	str	r3, [r7, #48]	; 0x30
 800464c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e6      	bne.n	800462c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3308      	adds	r3, #8
 8004664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	60fb      	str	r3, [r7, #12]
   return(result);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	64bb      	str	r3, [r7, #72]	; 0x48
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800467e:	61fa      	str	r2, [r7, #28]
 8004680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	617b      	str	r3, [r7, #20]
   return(result);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e012      	b.n	80046cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3758      	adds	r7, #88	; 0x58
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e4:	e049      	b.n	800477a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d045      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fe f8eb 	bl	80028c8 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d302      	bcc.n	8004704 <UART_WaitOnFlagUntilTimeout+0x30>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e048      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d031      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b08      	cmp	r3, #8
 8004722:	d110      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2208      	movs	r2, #8
 800472a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f879 	bl	8004824 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2208      	movs	r2, #8
 8004736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e029      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004754:	d111      	bne.n	800477a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f85f 	bl	8004824 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e00f      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d0a6      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b08f      	sub	sp, #60	; 0x3c
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3308      	adds	r3, #8
 80047e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fc:	61ba      	str	r2, [r7, #24]
 80047fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6979      	ldr	r1, [r7, #20]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	613b      	str	r3, [r7, #16]
   return(result);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8004818:	bf00      	nop
 800481a:	373c      	adds	r7, #60	; 0x3c
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b095      	sub	sp, #84	; 0x54
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
 800484c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e6      	bne.n	800482c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	61fb      	str	r3, [r7, #28]
   return(result);
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	64bb      	str	r3, [r7, #72]	; 0x48
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e3      	bne.n	800485e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d118      	bne.n	80048d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f023 0310 	bic.w	r3, r3, #16
 80048b2:	647b      	str	r3, [r7, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6979      	ldr	r1, [r7, #20]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e6      	bne.n	800489e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048e4:	bf00      	nop
 80048e6:	3754      	adds	r7, #84	; 0x54
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b090      	sub	sp, #64	; 0x40
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d137      	bne.n	800497c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	2200      	movs	r2, #0
 8004910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	623b      	str	r3, [r7, #32]
   return(result);
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004934:	633a      	str	r2, [r7, #48]	; 0x30
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800493a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	60fb      	str	r3, [r7, #12]
   return(result);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	69b9      	ldr	r1, [r7, #24]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	617b      	str	r3, [r7, #20]
   return(result);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800497a:	e002      	b.n	8004982 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800497c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800497e:	f7fc fa69 	bl	8000e54 <HAL_UART_TxCpltCallback>
}
 8004982:	bf00      	nop
 8004984:	3740      	adds	r7, #64	; 0x40
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fb07 	bl	8003fac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d109      	bne.n	80049e6 <UART_DMAError+0x40>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b21      	cmp	r3, #33	; 0x21
 80049d6:	d106      	bne.n	80049e6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7ff fede 	bl	80047a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d109      	bne.n	8004a08 <UART_DMAError+0x62>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b22      	cmp	r3, #34	; 0x22
 80049f8:	d106      	bne.n	8004a08 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7ff ff0e 	bl	8004824 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f043 0210 	orr.w	r2, r3, #16
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f7ff fad1 	bl	8003fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fabb 	bl	8003fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6979      	ldr	r1, [r7, #20]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	613b      	str	r3, [r7, #16]
   return(result);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e6      	bne.n	8004a5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc f9da 	bl	8000e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aa0:	bf00      	nop
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <SHCI_C2_MAC_802_15_4_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_MAC_802_15_4_Init( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_MAC_802_15_4_INIT,
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	f64f 406e 	movw	r0, #64622	; 0xfc6e
 8004af8:	f000 f872 	bl	8004be0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	330b      	adds	r3, #11
 8004b00:	78db      	ldrb	r3, [r3, #3]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <shci_init+0x30>)
 8004b1c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8004b1e:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <shci_init+0x34>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8004b24:	4806      	ldr	r0, [pc, #24]	; (8004b40 <shci_init+0x34>)
 8004b26:	f000 f915 	bl	8004d54 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f898 	bl	8004c64 <TlInit>

  return;
 8004b34:	bf00      	nop
}
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	200003a0 	.word	0x200003a0
 8004b40:	20000380 	.word	0x20000380

08004b44 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004b4a:	4822      	ldr	r0, [pc, #136]	; (8004bd4 <shci_user_evt_proc+0x90>)
 8004b4c:	f000 fed8 	bl	8005900 <LST_is_empty>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d12b      	bne.n	8004bae <shci_user_evt_proc+0x6a>
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <shci_user_evt_proc+0x94>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d027      	beq.n	8004bae <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004b5e:	f107 030c 	add.w	r3, r7, #12
 8004b62:	4619      	mov	r1, r3
 8004b64:	481b      	ldr	r0, [pc, #108]	; (8004bd4 <shci_user_evt_proc+0x90>)
 8004b66:	f000 ff5a 	bl	8005a1e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8004b6a:	4b1c      	ldr	r3, [pc, #112]	; (8004bdc <shci_user_evt_proc+0x98>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00c      	beq.n	8004b8c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004b76:	2301      	movs	r3, #1
 8004b78:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <shci_user_evt_proc+0x98>)
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	1d3a      	adds	r2, r7, #4
 8004b80:	4610      	mov	r0, r2
 8004b82:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8004b84:	793a      	ldrb	r2, [r7, #4]
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <shci_user_evt_proc+0x94>)
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e002      	b.n	8004b92 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004b8c:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <shci_user_evt_proc+0x94>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8004b92:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <shci_user_evt_proc+0x94>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d004      	beq.n	8004ba4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa6d 	bl	800507c <TL_MM_EvtDone>
 8004ba2:	e004      	b.n	8004bae <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	480a      	ldr	r0, [pc, #40]	; (8004bd4 <shci_user_evt_proc+0x90>)
 8004baa:	f000 fecb 	bl	8005944 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004bae:	4809      	ldr	r0, [pc, #36]	; (8004bd4 <shci_user_evt_proc+0x90>)
 8004bb0:	f000 fea6 	bl	8005900 <LST_is_empty>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <shci_user_evt_proc+0x86>
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <shci_user_evt_proc+0x94>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8004bc2:	4804      	ldr	r0, [pc, #16]	; (8004bd4 <shci_user_evt_proc+0x90>)
 8004bc4:	f7fb fe1e 	bl	8000804 <shci_notify_asynch_evt>
  }


  return;
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
}
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000088 	.word	0x20000088
 8004bd8:	20000098 	.word	0x20000098
 8004bdc:	20000380 	.word	0x20000380

08004be0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60ba      	str	r2, [r7, #8]
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4603      	mov	r3, r0
 8004bec:	81fb      	strh	r3, [r7, #14]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f000 f868 	bl	8004cc8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004bf8:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <shci_send+0x78>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	89fa      	ldrh	r2, [r7, #14]
 8004bfe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <shci_send+0x78>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	7b7a      	ldrb	r2, [r7, #13]
 8004c08:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <shci_send+0x78>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	7b7a      	ldrb	r2, [r7, #13]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fd95 	bl	8006744 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <shci_send+0x7c>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <shci_send+0x80>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2100      	movs	r1, #0
 8004c26:	2000      	movs	r0, #0
 8004c28:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8004c2a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004c2e:	f7fb fe00 	bl	8000832 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f103 0008 	add.w	r0, r3, #8
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <shci_send+0x78>)
 8004c3a:	6819      	ldr	r1, [r3, #0]
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <shci_send+0x78>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	789b      	ldrb	r3, [r3, #2]
 8004c42:	3303      	adds	r3, #3
 8004c44:	461a      	mov	r2, r3
 8004c46:	f001 fd7d 	bl	8006744 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	f000 f83c 	bl	8004cc8 <Cmd_SetStatus>

  return;
 8004c50:	bf00      	nop
}
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000094 	.word	0x20000094
 8004c5c:	200003a4 	.word	0x200003a4
 8004c60:	20000380 	.word	0x20000380

08004c64 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8004c6c:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <TlInit+0x4c>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8004c72:	4810      	ldr	r0, [pc, #64]	; (8004cb4 <TlInit+0x50>)
 8004c74:	f000 fe34 	bl	80058e0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f000 f825 	bl	8004cc8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <TlInit+0x54>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <TlInit+0x58>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <TlInit+0x5c>)
 8004c92:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <TlInit+0x60>)
 8004c96:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8004c98:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <TlInit+0x58>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f107 020c 	add.w	r2, r7, #12
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4798      	blx	r3
  }

  return;
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
}
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000094 	.word	0x20000094
 8004cb4:	20000088 	.word	0x20000088
 8004cb8:	20000098 	.word	0x20000098
 8004cbc:	20000380 	.word	0x20000380
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d31 	.word	0x08004d31

08004cc8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <Cmd_SetStatus+0x48>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <Cmd_SetStatus+0x48>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <Cmd_SetStatus+0x4c>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8004cee:	e00b      	b.n	8004d08 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <Cmd_SetStatus+0x4c>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <Cmd_SetStatus+0x48>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d004      	beq.n	8004d08 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <Cmd_SetStatus+0x48>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2001      	movs	r0, #1
 8004d04:	4798      	blx	r3
  return;
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
}
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200003a0 	.word	0x200003a0
 8004d14:	20000090 	.word	0x20000090

08004d18 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8004d20:	2000      	movs	r0, #0
 8004d22:	f7fb fd7b 	bl	800081c <shci_cmd_resp_release>

  return;
 8004d26:	bf00      	nop
}
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4805      	ldr	r0, [pc, #20]	; (8004d50 <TlUserEvtReceived+0x20>)
 8004d3c:	f000 fe28 	bl	8005990 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004d40:	4803      	ldr	r0, [pc, #12]	; (8004d50 <TlUserEvtReceived+0x20>)
 8004d42:	f7fb fd5f 	bl	8000804 <shci_notify_asynch_evt>

  return;
 8004d46:	bf00      	nop
}
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000088 	.word	0x20000088

08004d54 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <shci_register_io_bus+0x20>)
 8004d60:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <shci_register_io_bus+0x24>)
 8004d66:	611a      	str	r2, [r3, #16]

  return;
 8004d68:	bf00      	nop
}
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	08004e71 	.word	0x08004e71
 8004d78:	08004ec5 	.word	0x08004ec5

08004d7c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8004d80:	f7fd fb86 	bl	8002490 <HW_IPCC_Enable>

  return;
 8004d84:	bf00      	nop
}
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <TL_Init>:


void TL_Init( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8004d8c:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <TL_Init+0x48>)
 8004d8e:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <TL_Init+0x4c>)
 8004d90:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <TL_Init+0x48>)
 8004d94:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <TL_Init+0x50>)
 8004d96:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <TL_Init+0x48>)
 8004d9a:	4a10      	ldr	r2, [pc, #64]	; (8004ddc <TL_Init+0x54>)
 8004d9c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <TL_Init+0x48>)
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <TL_Init+0x58>)
 8004da2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <TL_Init+0x48>)
 8004da6:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <TL_Init+0x5c>)
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <TL_Init+0x48>)
 8004dac:	4a0e      	ldr	r2, [pc, #56]	; (8004de8 <TL_Init+0x60>)
 8004dae:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <TL_Init+0x48>)
 8004db2:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <TL_Init+0x64>)
 8004db4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <TL_Init+0x48>)
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <TL_Init+0x68>)
 8004dba:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <TL_Init+0x48>)
 8004dbe:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <TL_Init+0x6c>)
 8004dc0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <TL_Init+0x48>)
 8004dc4:	4a0c      	ldr	r2, [pc, #48]	; (8004df8 <TL_Init+0x70>)
 8004dc6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8004dc8:	f7fd fb76 	bl	80024b8 <HW_IPCC_Init>

  return;
 8004dcc:	bf00      	nop
}
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20030000 	.word	0x20030000
 8004dd4:	20030030 	.word	0x20030030
 8004dd8:	20030050 	.word	0x20030050
 8004ddc:	20030060 	.word	0x20030060
 8004de0:	20030070 	.word	0x20030070
 8004de4:	20030078 	.word	0x20030078
 8004de8:	20030080 	.word	0x20030080
 8004dec:	20030088 	.word	0x20030088
 8004df0:	200300a4 	.word	0x200300a4
 8004df4:	200300a8 	.word	0x200300a8
 8004df8:	200300b4 	.word	0x200300b4

08004dfc <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8004e02:	e01c      	b.n	8004e3e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4812      	ldr	r0, [pc, #72]	; (8004e54 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8004e0a:	f000 fe08 	bl	8005a1e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7a5b      	ldrb	r3, [r3, #9]
 8004e12:	2b0f      	cmp	r3, #15
 8004e14:	d003      	beq.n	8004e1e <HW_IPCC_BLE_RxEvtNot+0x22>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7a5b      	ldrb	r3, [r3, #9]
 8004e1a:	2b0e      	cmp	r3, #14
 8004e1c:	d105      	bne.n	8004e2a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4619      	mov	r1, r3
 8004e22:	2002      	movs	r0, #2
 8004e24:	f000 f98e 	bl	8005144 <OutputDbgTrace>
 8004e28:	e004      	b.n	8004e34 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	2003      	movs	r0, #3
 8004e30:	f000 f988 	bl	8005144 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8004e3e:	4805      	ldr	r0, [pc, #20]	; (8004e54 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8004e40:	f000 fd5e 	bl	8005900 <LST_is_empty>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0dc      	beq.n	8004e04 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8004e4a:	bf00      	nop
}
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200300d0 	.word	0x200300d0
 8004e58:	200003b0 	.word	0x200003b0

08004e5c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4798      	blx	r3

  return;
 8004e66:	bf00      	nop
}
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200003b4 	.word	0x200003b4

08004e70 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8004e7c:	480d      	ldr	r0, [pc, #52]	; (8004eb4 <TL_SYS_Init+0x44>)
 8004e7e:	f000 fd2f 	bl	80058e0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8004e82:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <TL_SYS_Init+0x48>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <TL_SYS_Init+0x44>)
 8004e94:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8004e96:	f7fd fb3d 	bl	8002514 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a07      	ldr	r2, [pc, #28]	; (8004ebc <TL_SYS_Init+0x4c>)
 8004ea0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4a06      	ldr	r2, [pc, #24]	; (8004ec0 <TL_SYS_Init+0x50>)
 8004ea8:	6013      	str	r3, [r2, #0]

  return 0;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200300d8 	.word	0x200300d8
 8004eb8:	20030000 	.word	0x20030000
 8004ebc:	200003b8 	.word	0x200003b8
 8004ec0:	200003bc 	.word	0x200003bc

08004ec4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8004ed0:	4b09      	ldr	r3, [pc, #36]	; (8004ef8 <TL_SYS_SendCmd+0x34>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <TL_SYS_SendCmd+0x34>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	2004      	movs	r0, #4
 8004ee4:	f000 f92e 	bl	8005144 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8004ee8:	f7fd fb1e 	bl	8002528 <HW_IPCC_SYS_SendCmd>

  return 0;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20030000 	.word	0x20030000

08004efc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	2005      	movs	r0, #5
 8004f0a:	f000 f91b 	bl	8005144 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a03      	ldr	r2, [pc, #12]	; (8004f20 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8004f14:	68d2      	ldr	r2, [r2, #12]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3

  return;
 8004f1c:	bf00      	nop
}
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20030000 	.word	0x20030000
 8004f24:	200003b8 	.word	0x200003b8

08004f28 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8004f2e:	e00e      	b.n	8004f4e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8004f30:	1d3b      	adds	r3, r7, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	480b      	ldr	r0, [pc, #44]	; (8004f64 <HW_IPCC_SYS_EvtNot+0x3c>)
 8004f36:	f000 fd72 	bl	8005a1e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	2006      	movs	r0, #6
 8004f40:	f000 f900 	bl	8005144 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HW_IPCC_SYS_EvtNot+0x40>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8004f4e:	4805      	ldr	r0, [pc, #20]	; (8004f64 <HW_IPCC_SYS_EvtNot+0x3c>)
 8004f50:	f000 fcd6 	bl	8005900 <LST_is_empty>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ea      	beq.n	8004f30 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8004f5a:	bf00      	nop
}
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200300d8 	.word	0x200300d8
 8004f68:	200003bc 	.word	0x200003bc

08004f6c <TL_MAC_802_15_4_Init>:
#ifdef MAC_802_15_4_WB
/******************************************************************************
 * MAC 802.15.4
 ******************************************************************************/
void TL_MAC_802_15_4_Init( TL_MAC_802_15_4_Config_t *p_Config )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  MB_Mac_802_15_4_t  * p_mac_802_15_4_table;

  p_mac_802_15_4_table = TL_RefTable.p_mac_802_15_4_table;
 8004f74:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <TL_MAC_802_15_4_Init+0x2c>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	60fb      	str	r3, [r7, #12]

  p_mac_802_15_4_table->p_cmdrsp_buffer = p_Config->p_Mac_802_15_4_CmdRspBuffer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]
  p_mac_802_15_4_table->p_notack_buffer = p_Config->p_Mac_802_15_4_NotAckBuffer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	605a      	str	r2, [r3, #4]

  HW_IPCC_MAC_802_15_4_Init();
 8004f8a:	f7fd faf3 	bl	8002574 <HW_IPCC_MAC_802_15_4_Init>

  return;
 8004f8e:	bf00      	nop
}
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20030000 	.word	0x20030000

08004f9c <TL_MAC_802_15_4_SendCmd>:

void TL_MAC_802_15_4_SendCmd( void )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_mac_802_15_4_table->p_cmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <TL_MAC_802_15_4_SendCmd+0x18>)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_MAC_802_15_4_SendCmd();
 8004faa:	f7fd faed 	bl	8002588 <HW_IPCC_MAC_802_15_4_SendCmd>

  return;
 8004fae:	bf00      	nop
}
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20030000 	.word	0x20030000

08004fb8 <TL_MAC_802_15_4_SendAck>:

void TL_MAC_802_15_4_SendAck ( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_mac_802_15_4_table->p_notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <TL_MAC_802_15_4_SendAck+0x18>)
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	220d      	movs	r2, #13
 8004fc4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_MAC_802_15_4_SendAck();
 8004fc6:	f7fd faed 	bl	80025a4 <HW_IPCC_MAC_802_15_4_SendAck>

  return;
 8004fca:	bf00      	nop
}
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20030000 	.word	0x20030000

08004fd4 <HW_IPCC_MAC_802_15_4_CmdEvtNot>:

void HW_IPCC_MAC_802_15_4_CmdEvtNot(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  TL_MAC_802_15_4_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_mac_802_15_4_table->p_cmdrsp_buffer) );
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <HW_IPCC_MAC_802_15_4_CmdEvtNot+0x14>)
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb fc86 	bl	80008f0 <TL_MAC_802_15_4_CmdEvtReceived>

  return;
 8004fe4:	bf00      	nop
}
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20030000 	.word	0x20030000

08004fec <HW_IPCC_MAC_802_15_4_EvtNot>:

void HW_IPCC_MAC_802_15_4_EvtNot( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  TL_MAC_802_15_4_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_mac_802_15_4_table->p_notack_buffer) );
 8004ff0:	4b03      	ldr	r3, [pc, #12]	; (8005000 <HW_IPCC_MAC_802_15_4_EvtNot+0x14>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fb fc84 	bl	8000904 <TL_MAC_802_15_4_NotReceived>

  return;
 8004ffc:	bf00      	nop
}
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20030000 	.word	0x20030000

08005004 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800500c:	4817      	ldr	r0, [pc, #92]	; (800506c <TL_MM_Init+0x68>)
 800500e:	f000 fc67 	bl	80058e0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005012:	4817      	ldr	r0, [pc, #92]	; (8005070 <TL_MM_Init+0x6c>)
 8005014:	f000 fc64 	bl	80058e0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005018:	4b16      	ldr	r3, [pc, #88]	; (8005074 <TL_MM_Init+0x70>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	4a16      	ldr	r2, [pc, #88]	; (8005078 <TL_MM_Init+0x74>)
 800501e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005020:	4b15      	ldr	r3, [pc, #84]	; (8005078 <TL_MM_Init+0x74>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6892      	ldr	r2, [r2, #8]
 8005028:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800502a:	4b13      	ldr	r3, [pc, #76]	; (8005078 <TL_MM_Init+0x74>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68d2      	ldr	r2, [r2, #12]
 8005032:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005034:	4b10      	ldr	r3, [pc, #64]	; (8005078 <TL_MM_Init+0x74>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0c      	ldr	r2, [pc, #48]	; (800506c <TL_MM_Init+0x68>)
 800503a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <TL_MM_Init+0x74>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <TL_MM_Init+0x74>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6852      	ldr	r2, [r2, #4]
 800504e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <TL_MM_Init+0x74>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6912      	ldr	r2, [r2, #16]
 8005058:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800505a:	4b07      	ldr	r3, [pc, #28]	; (8005078 <TL_MM_Init+0x74>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6952      	ldr	r2, [r2, #20]
 8005062:	619a      	str	r2, [r3, #24]

  return;
 8005064:	bf00      	nop
}
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	200300c0 	.word	0x200300c0
 8005070:	200003a8 	.word	0x200003a8
 8005074:	20030000 	.word	0x20030000
 8005078:	200003c0 	.word	0x200003c0

0800507c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4807      	ldr	r0, [pc, #28]	; (80050a4 <TL_MM_EvtDone+0x28>)
 8005088:	f000 fc82 	bl	8005990 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	2000      	movs	r0, #0
 8005090:	f000 f858 	bl	8005144 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005094:	4804      	ldr	r0, [pc, #16]	; (80050a8 <TL_MM_EvtDone+0x2c>)
 8005096:	f7fd faab 	bl	80025f0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800509a:	bf00      	nop
}
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	200003a8 	.word	0x200003a8
 80050a8:	080050ad 	.word	0x080050ad

080050ac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80050b2:	e00c      	b.n	80050ce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	480a      	ldr	r0, [pc, #40]	; (80050e4 <SendFreeBuf+0x38>)
 80050ba:	f000 fcb0 	bl	8005a1e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <SendFreeBuf+0x3c>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fc61 	bl	8005990 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80050ce:	4805      	ldr	r0, [pc, #20]	; (80050e4 <SendFreeBuf+0x38>)
 80050d0:	f000 fc16 	bl	8005900 <LST_is_empty>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ec      	beq.n	80050b4 <SendFreeBuf+0x8>
  }

  return;
 80050da:	bf00      	nop
}
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	200003a8 	.word	0x200003a8
 80050e8:	20030000 	.word	0x20030000

080050ec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80050f0:	4805      	ldr	r0, [pc, #20]	; (8005108 <TL_TRACES_Init+0x1c>)
 80050f2:	f000 fbf5 	bl	80058e0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <TL_TRACES_Init+0x20>)
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4a03      	ldr	r2, [pc, #12]	; (8005108 <TL_TRACES_Init+0x1c>)
 80050fc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80050fe:	f7fd faad 	bl	800265c <HW_IPCC_TRACES_Init>

  return;
 8005102:	bf00      	nop
}
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200300c8 	.word	0x200300c8
 800510c:	20030000 	.word	0x20030000

08005110 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005116:	e008      	b.n	800512a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005118:	1d3b      	adds	r3, r7, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4808      	ldr	r0, [pc, #32]	; (8005140 <HW_IPCC_TRACES_EvtNot+0x30>)
 800511e:	f000 fc7e 	bl	8005a1e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	f7fb fac9 	bl	80006bc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800512a:	4805      	ldr	r0, [pc, #20]	; (8005140 <HW_IPCC_TRACES_EvtNot+0x30>)
 800512c:	f000 fbe8 	bl	8005900 <LST_is_empty>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005136:	bf00      	nop
}
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	200300c8 	.word	0x200300c8

08005144 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	6039      	str	r1, [r7, #0]
 800514e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	2b06      	cmp	r3, #6
 8005154:	d845      	bhi.n	80051e2 <OutputDbgTrace+0x9e>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <OutputDbgTrace+0x18>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005179 	.word	0x08005179
 8005160:	0800519d 	.word	0x0800519d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	080051b7 	.word	0x080051b7
 800516c:	080051c3 	.word	0x080051c3
 8005170:	080051c9 	.word	0x080051c9
 8005174:	080051d7 	.word	0x080051d7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	7a5b      	ldrb	r3, [r3, #9]
 8005180:	2bff      	cmp	r3, #255	; 0xff
 8005182:	d005      	beq.n	8005190 <OutputDbgTrace+0x4c>
 8005184:	2bff      	cmp	r3, #255	; 0xff
 8005186:	dc05      	bgt.n	8005194 <OutputDbgTrace+0x50>
 8005188:	2b0e      	cmp	r3, #14
 800518a:	d005      	beq.n	8005198 <OutputDbgTrace+0x54>
 800518c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800518e:	e001      	b.n	8005194 <OutputDbgTrace+0x50>
          break;
 8005190:	bf00      	nop
 8005192:	e027      	b.n	80051e4 <OutputDbgTrace+0xa0>
          break;
 8005194:	bf00      	nop
 8005196:	e025      	b.n	80051e4 <OutputDbgTrace+0xa0>
          break;
 8005198:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800519a:	e023      	b.n	80051e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80051a0:	e020      	b.n	80051e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	7a5b      	ldrb	r3, [r3, #9]
 80051aa:	2b0e      	cmp	r3, #14
 80051ac:	d001      	beq.n	80051b2 <OutputDbgTrace+0x6e>
 80051ae:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80051b0:	e000      	b.n	80051b4 <OutputDbgTrace+0x70>
          break;
 80051b2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80051b4:	e016      	b.n	80051e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	7a5b      	ldrb	r3, [r3, #9]
 80051be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80051c0:	e010      	b.n	80051e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80051c6:	e00d      	b.n	80051e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	7a5b      	ldrb	r3, [r3, #9]
 80051d0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80051d2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80051d4:	e006      	b.n	80051e4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	7a5b      	ldrb	r3, [r3, #9]
 80051de:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80051e0:	e000      	b.n	80051e4 <OutputDbgTrace+0xa0>

    default:
      break;
 80051e2:	bf00      	nop
  }

  return;
 80051e4:	bf00      	nop
}
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <utils_mac_set_cmdCode>:
 * @param  None
 * @retval None
 */

static void utils_mac_set_cmdCode(uint16_t cmdCode)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	80fb      	strh	r3, [r7, #6]
  /* Set ID of the cmd in cmdcode field */

  TL_CmdPacket_t* p_mac_cmd_req = MAC_802_15_4_GetCmdBuffer();
 80051fa:	f7fb fb4d 	bl	8000898 <MAC_802_15_4_GetCmdBuffer>
 80051fe:	60f8      	str	r0, [r7, #12]
  p_mac_cmd_req->cmdserial.cmd.cmdcode = (0x3F << 9) | (MAC_802_15_4_CMD_OPCODE_OFFSET + cmdCode);
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005206:	b29b      	uxth	r3, r3
 8005208:	b21b      	sxth	r3, r3
 800520a:	f443 43fc 	orr.w	r3, r3, #32256	; 0x7e00
 800520e:	b21b      	sxth	r3, r3
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8a3 2009 	strh.w	r2, [r3, #9]
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <MAC_802_15_4_CallBack_Processing>:
 *
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef MAC_802_15_4_CallBack_Processing(void)
{
 8005220:	b5b0      	push	{r4, r5, r7, lr}
 8005222:	b0ec      	sub	sp, #432	; 0x1b0
 8005224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af

  /* Get pointer on received event buffer from M0 */
  TL_Evt_t * p_notif_evt = MAC_802_15_4_GetNotificationBuffer();
 800522c:	f7fb fb4c 	bl	80008c8 <MAC_802_15_4_GetNotificationBuffer>
 8005230:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
  MAC_802_15_4_Notification_t* p_mac_evt = (MAC_802_15_4_Notification_t*)(p_notif_evt->payload);
 8005234:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005238:	3302      	adds	r3, #2
 800523a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

  uint8_t subEvtCode = p_mac_evt->subEvtCode;
 800523e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3

  switch(subEvtCode)
 800524a:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 800524e:	2b18      	cmp	r3, #24
 8005250:	f200 81c8 	bhi.w	80055e4 <MAC_802_15_4_CallBack_Processing+0x3c4>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <MAC_802_15_4_CallBack_Processing+0x3c>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	080052db 	.word	0x080052db
 8005260:	080052fd 	.word	0x080052fd
 8005264:	0800531d 	.word	0x0800531d
 8005268:	0800533d 	.word	0x0800533d
 800526c:	080052c1 	.word	0x080052c1
 8005270:	08005357 	.word	0x08005357
 8005274:	08005371 	.word	0x08005371
 8005278:	08005397 	.word	0x08005397
 800527c:	080053b1 	.word	0x080053b1
 8005280:	080053cb 	.word	0x080053cb
 8005284:	080053e5 	.word	0x080053e5
 8005288:	080053ff 	.word	0x080053ff
 800528c:	08005423 	.word	0x08005423
 8005290:	08005443 	.word	0x08005443
 8005294:	08005463 	.word	0x08005463
 8005298:	0800547d 	.word	0x0800547d
 800529c:	080054a5 	.word	0x080054a5
 80052a0:	080054cd 	.word	0x080054cd
 80052a4:	080054e9 	.word	0x080054e9
 80052a8:	0800551b 	.word	0x0800551b
 80052ac:	0800553d 	.word	0x0800553d
 80052b0:	08005565 	.word	0x08005565
 80052b4:	08005587 	.word	0x08005587
 80052b8:	080055a1 	.word	0x080055a1
 80052bc:	080055bd 	.word	0x080055bd
  {
  case MSG_M0TOM4_MAC_MLME_RESET_CNF:
    {
      MAC_resetCnf_t resetCnf;
      memcpy(&resetCnf,p_mac_evt->notPayload, sizeof(MAC_resetCnf_t));
 80052c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80052c4:	3302      	adds	r3, #2
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
      macCbConfig.mlmeResetCnfCb(&resetCnf);
 80052cc:	4bc4      	ldr	r3, [pc, #784]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3
    }
    break;
 80052d8:	e188      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_ASSOCIATE_CNF:
    {
      MAC_associateCnf_t associateCnf;
      memcpy(&associateCnf,p_mac_evt->notPayload, sizeof(MAC_associateCnf_t));
 80052da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80052de:	3302      	adds	r3, #2
 80052e0:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	6859      	ldr	r1, [r3, #4]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      macCbConfig.mlmeAssociateCnfCb(&associateCnf);
 80052ee:	4bbc      	ldr	r3, [pc, #752]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80052f6:	4610      	mov	r0, r2
 80052f8:	4798      	blx	r3
    }
    break;
 80052fa:	e177      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_DISASSOCIATE_CNF:
    {
      MAC_disassociateCnf_t  disassociateCnf;
      memcpy(&disassociateCnf,p_mac_evt->notPayload, sizeof(MAC_disassociateCnf_t));
 80052fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005300:	1c9a      	adds	r2, r3, #2
 8005302:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005306:	6810      	ldr	r0, [r2, #0]
 8005308:	6851      	ldr	r1, [r2, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
 800530c:	c307      	stmia	r3!, {r0, r1, r2}
      macCbConfig.mlmeDisassociateCnfCb(&disassociateCnf);
 800530e:	4bb4      	ldr	r3, [pc, #720]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8005316:	4610      	mov	r0, r2
 8005318:	4798      	blx	r3
    }
    break;
 800531a:	e167      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_GET_CNF:
    {
      MAC_getCnf_t  getCnf;
      memcpy(&getCnf,p_mac_evt->notPayload, sizeof(MAC_getCnf_t));
 800531c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005320:	1c99      	adds	r1, r3, #2
 8005322:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8005326:	2208      	movs	r2, #8
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fa0b 	bl	8006744 <memcpy>
      macCbConfig.mlmeGetCnfCb(&getCnf);
 800532e:	4bac      	ldr	r3, [pc, #688]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8005336:	4610      	mov	r0, r2
 8005338:	4798      	blx	r3
    }
    break;
 800533a:	e157      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_GTS_CNF:
    {
      MAC_gtsCnf_t gtsCnf;
      memcpy(&gtsCnf,p_mac_evt->notPayload, sizeof(MAC_gtsCnf_t));
 800533c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005340:	3302      	adds	r3, #2
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
      macCbConfig.mlmeGtsCnfCb(&gtsCnf);
 8005348:	4ba5      	ldr	r3, [pc, #660]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
    }
    break;
 8005354:	e14a      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_RX_ENABLE_CNF:
    {
      MAC_rxEnableCnf_t RxEnable;
      memcpy(&RxEnable,p_mac_evt->notPayload, sizeof(MAC_rxEnableCnf_t));
 8005356:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800535a:	3302      	adds	r3, #2
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      macCbConfig.mlmeRxEnableCnfCb(&RxEnable);
 8005362:	4b9f      	ldr	r3, [pc, #636]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800536a:	4610      	mov	r0, r2
 800536c:	4798      	blx	r3
    }
    break;
 800536e:	e13d      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_SCAN_CNF:
    {
      MAC_scanCnf_t scanCnf;
      memcpy(&scanCnf,p_mac_evt->notPayload, sizeof(MAC_scanCnf_t));
 8005370:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005374:	1c9a      	adds	r2, r3, #2
 8005376:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800537a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800537e:	4618      	mov	r0, r3
 8005380:	4611      	mov	r1, r2
 8005382:	23b9      	movs	r3, #185	; 0xb9
 8005384:	461a      	mov	r2, r3
 8005386:	f001 f9dd 	bl	8006744 <memcpy>
      macCbConfig.mlmeScanCnfCb(&scanCnf);
 800538a:	4b95      	ldr	r3, [pc, #596]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	1d3a      	adds	r2, r7, #4
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
    }
    break;
 8005394:	e12a      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_SET_CNF:
    {
      MAC_setCnf_t setCnf;
      memcpy(&setCnf,p_mac_evt->notPayload, sizeof(MAC_setCnf_t));
 8005396:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800539a:	3302      	adds	r3, #2
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      macCbConfig.mlmeSetCnfCb(&setCnf);
 80053a2:	4b8f      	ldr	r3, [pc, #572]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 80053aa:	4610      	mov	r0, r2
 80053ac:	4798      	blx	r3
    }
    break;
 80053ae:	e11d      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_START_CNF:
    {
      MAC_startCnf_t startCnf;
      memcpy(&startCnf,p_mac_evt->notPayload, sizeof(MAC_startCnf_t));
 80053b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80053b4:	3302      	adds	r3, #2
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
      macCbConfig.mlmeStartCnfCb(&startCnf);
 80053bc:	4b88      	ldr	r3, [pc, #544]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80053be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80053c4:	4610      	mov	r0, r2
 80053c6:	4798      	blx	r3
    }
    break;
 80053c8:	e110      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_POLL_CNF:
    {
      MAC_pollCnf_t pollCnf;
      memcpy(&pollCnf,p_mac_evt->notPayload, sizeof(MAC_pollCnf_t));
 80053ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80053ce:	3302      	adds	r3, #2
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
      macCbConfig.mlmePollCnfCb(&pollCnf);
 80053d6:	4b82      	ldr	r3, [pc, #520]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80053de:	4610      	mov	r0, r2
 80053e0:	4798      	blx	r3
    }
    break;
 80053e2:	e103      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_DPS_CNF:
    {
      MAC_dpsCnf_t dpsCnf;
      memcpy(&dpsCnf,p_mac_evt->notPayload, sizeof(MAC_dpsCnf_t));
 80053e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80053e8:	3302      	adds	r3, #2
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      macCbConfig.mlmeDpsCnfCb(&dpsCnf);
 80053f0:	4b7b      	ldr	r3, [pc, #492]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
    }
    break;
 80053fc:	e0f6      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_SOUNDING_CNF:
    {
      MAC_soundingCnf_t soudingCnf;
      memcpy(&soudingCnf,p_mac_evt->notPayload, sizeof(MAC_soundingCnf_t));
 80053fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005408:	6810      	ldr	r0, [r2, #0]
 800540a:	6018      	str	r0, [r3, #0]
 800540c:	8891      	ldrh	r1, [r2, #4]
 800540e:	7992      	ldrb	r2, [r2, #6]
 8005410:	8099      	strh	r1, [r3, #4]
 8005412:	719a      	strb	r2, [r3, #6]
      macCbConfig.mlmeSoundingCnfCb(&soudingCnf);
 8005414:	4b72      	ldr	r3, [pc, #456]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800541c:	4610      	mov	r0, r2
 800541e:	4798      	blx	r3
    }
    break;
 8005420:	e0e4      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_CALIBRATE_CNF:
    {
      MAC_calibrateCnf_t calibrateCnf;
      memcpy(&calibrateCnf,p_mac_evt->notPayload, sizeof(MAC_calibrateCnf_t));
 8005422:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005426:	1c99      	adds	r1, r3, #2
 8005428:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800542c:	220c      	movs	r2, #12
 800542e:	4618      	mov	r0, r3
 8005430:	f001 f988 	bl	8006744 <memcpy>
      macCbConfig.mlmeCalibrateCnfCb(&calibrateCnf);
 8005434:	4b6a      	ldr	r3, [pc, #424]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800543c:	4610      	mov	r0, r2
 800543e:	4798      	blx	r3
    }
    break;
 8005440:	e0d4      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MCPS_DATA_CNF:
    {
      MAC_dataCnf_t dataCnf;
      memcpy(&dataCnf,p_mac_evt->notPayload, sizeof(MAC_dataCnf_t));
 8005442:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005446:	1c99      	adds	r1, r3, #2
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	221c      	movs	r2, #28
 800544e:	4618      	mov	r0, r3
 8005450:	f001 f978 	bl	8006744 <memcpy>
      macCbConfig.mcpsDataCnfCb(&dataCnf);
 8005454:	4b62      	ldr	r3, [pc, #392]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
    }
    break;
 8005460:	e0c4      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MCPS_PURGE_CNF:
    {
      MAC_purgeCnf_t purgeCnf;
      memcpy(&purgeCnf,p_mac_evt->notPayload, sizeof(MAC_purgeCnf_t));
 8005462:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005466:	3302      	adds	r3, #2
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      macCbConfig.mcpsPurgeCnfCb(&purgeCnf);
 800546e:	4b5c      	ldr	r3, [pc, #368]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8005476:	4610      	mov	r0, r2
 8005478:	4798      	blx	r3
    }
    break;
 800547a:	e0b7      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_ASSOCIATE_IND:
    {
      MAC_associateInd_t associateInd;
      memcpy(&associateInd,p_mac_evt->notPayload, sizeof(MAC_associateInd_t));
 800547c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005480:	3302      	adds	r3, #2
 8005482:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8005486:	461d      	mov	r5, r3
 8005488:	6828      	ldr	r0, [r5, #0]
 800548a:	6869      	ldr	r1, [r5, #4]
 800548c:	68aa      	ldr	r2, [r5, #8]
 800548e:	68eb      	ldr	r3, [r5, #12]
 8005490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005492:	6928      	ldr	r0, [r5, #16]
 8005494:	6020      	str	r0, [r4, #0]
      macCbConfig.mlmeAssociateIndCb(&associateInd);
 8005496:	4b52      	ldr	r3, [pc, #328]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800549e:	4610      	mov	r0, r2
 80054a0:	4798      	blx	r3
    }
    break;
 80054a2:	e0a3      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_DISASSOCIATE_IND:
    {
      MAC_disassociateInd_t disassociateInd;
      memcpy(&disassociateInd,p_mac_evt->notPayload, sizeof(MAC_disassociateInd_t));
 80054a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80054a8:	3302      	adds	r3, #2
 80054aa:	f507 7482 	add.w	r4, r7, #260	; 0x104
 80054ae:	461d      	mov	r5, r3
 80054b0:	6828      	ldr	r0, [r5, #0]
 80054b2:	6869      	ldr	r1, [r5, #4]
 80054b4:	68aa      	ldr	r2, [r5, #8]
 80054b6:	68eb      	ldr	r3, [r5, #12]
 80054b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ba:	6928      	ldr	r0, [r5, #16]
 80054bc:	6020      	str	r0, [r4, #0]
      macCbConfig.mlmeDisassociateIndCb(&disassociateInd);
 80054be:	4b48      	ldr	r3, [pc, #288]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80054c6:	4610      	mov	r0, r2
 80054c8:	4798      	blx	r3
    }
    break;
 80054ca:	e08f      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_BEACON_NOTIFY_IND:
    {
      MAC_beaconNotifyInd_t beaconNotifyInd;
      memcpy(&beaconNotifyInd,p_mac_evt->notPayload, sizeof(MAC_beaconNotifyInd_t));
 80054cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80054d0:	1c99      	adds	r1, r3, #2
 80054d2:	1d3b      	adds	r3, r7, #4
 80054d4:	2258      	movs	r2, #88	; 0x58
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 f934 	bl	8006744 <memcpy>
      macCbConfig.mlmeBeaconNotifyIndCb(&beaconNotifyInd);
 80054dc:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	1d3a      	adds	r2, r7, #4
 80054e2:	4610      	mov	r0, r2
 80054e4:	4798      	blx	r3
    }
    break;
 80054e6:	e081      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_COMM_STATUS_IND:
    {
      MAC_commStatusInd_t commStatusInd;
      memcpy(&commStatusInd,p_mac_evt->notPayload, sizeof(MAC_commStatusInd_t));
 80054e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80054ec:	1c9a      	adds	r2, r3, #2
 80054ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80054f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054f6:	461c      	mov	r4, r3
 80054f8:	4615      	mov	r5, r2
 80054fa:	6828      	ldr	r0, [r5, #0]
 80054fc:	6869      	ldr	r1, [r5, #4]
 80054fe:	68aa      	ldr	r2, [r5, #8]
 8005500:	68eb      	ldr	r3, [r5, #12]
 8005502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005504:	6928      	ldr	r0, [r5, #16]
 8005506:	6969      	ldr	r1, [r5, #20]
 8005508:	69aa      	ldr	r2, [r5, #24]
 800550a:	69eb      	ldr	r3, [r5, #28]
 800550c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      macCbConfig.mlmeCommStatusIndCb(&commStatusInd);
 800550e:	4b34      	ldr	r3, [pc, #208]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	1d3a      	adds	r2, r7, #4
 8005514:	4610      	mov	r0, r2
 8005516:	4798      	blx	r3
    }
    break;
 8005518:	e068      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_GTS_IND:
    {
      MAC_GtsInd_t gtsInd;
      memcpy(&gtsInd,p_mac_evt->notPayload, sizeof(MAC_GtsInd_t));
 800551a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800551e:	3302      	adds	r3, #2
 8005520:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	6859      	ldr	r1, [r3, #4]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      macCbConfig.mlmeGtsIndCb(&gtsInd);
 800552e:	4b2c      	ldr	r3, [pc, #176]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8005536:	4610      	mov	r0, r2
 8005538:	4798      	blx	r3
    }
    break;
 800553a:	e057      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_ORPHAN_IND:
    {
      MAC_orphanInd_t orphanInd;
      memcpy(&orphanInd,p_mac_evt->notPayload, sizeof(MAC_orphanInd_t));
 800553c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005540:	3302      	adds	r3, #2
 8005542:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8005546:	461d      	mov	r5, r3
 8005548:	6828      	ldr	r0, [r5, #0]
 800554a:	6869      	ldr	r1, [r5, #4]
 800554c:	68aa      	ldr	r2, [r5, #8]
 800554e:	68eb      	ldr	r3, [r5, #12]
 8005550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005552:	6928      	ldr	r0, [r5, #16]
 8005554:	6020      	str	r0, [r4, #0]
      macCbConfig.mlmeOrphanIndCb(&orphanInd);
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800555e:	4610      	mov	r0, r2
 8005560:	4798      	blx	r3
    }
    break;
 8005562:	e043      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_SYNC_LOSS_IND:
    {
      MAC_syncLoss_t syncLoss;
      memcpy(&syncLoss,p_mac_evt->notPayload, sizeof(MAC_syncLoss_t));
 8005564:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005568:	3302      	adds	r3, #2
 800556a:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      macCbConfig.mlmeSyncLossIndCb(&syncLoss);
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
    }
    break;
 8005584:	e032      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_DPS_IND:
    {
      MAC_dpsInd_t dpsInd;
      memcpy(&dpsInd,p_mac_evt->notPayload, sizeof(MAC_dpsInd_t));
 8005586:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800558a:	3302      	adds	r3, #2
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      macCbConfig.mlmeDpsIndCb(&dpsInd);
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800559a:	4610      	mov	r0, r2
 800559c:	4798      	blx	r3
    }
    break;
 800559e:	e025      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MCPS_DATA_IND:
    {
      MAC_dataInd_t dataInd ;
      memcpy(&dataInd,p_mac_evt->notPayload, sizeof(MAC_dataInd_t));
 80055a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80055a4:	1c99      	adds	r1, r3, #2
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	2244      	movs	r2, #68	; 0x44
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 f8ca 	bl	8006744 <memcpy>
      macCbConfig.mcpsDataIndCb(&dataInd);
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	1d3a      	adds	r2, r7, #4
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
    }
    break;
 80055ba:	e017      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
    case MSG_M0TOM4_MAC_MLME_POLL_IND:
    {
      MAC_pollInd_t pollInd ;
      memcpy(&pollInd,p_mac_evt->notPayload, sizeof(MAC_pollInd_t));
 80055bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80055c0:	1c9a      	adds	r2, r3, #2
 80055c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80055c6:	6810      	ldr	r0, [r2, #0]
 80055c8:	6851      	ldr	r1, [r2, #4]
 80055ca:	c303      	stmia	r3!, {r0, r1}
 80055cc:	7a12      	ldrb	r2, [r2, #8]
 80055ce:	701a      	strb	r2, [r3, #0]
      macCbConfig.mlmePollIndCb(&pollInd);
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <MAC_802_15_4_CallBack_Processing+0x3c0>)
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
    }
    break;
 80055dc:	e006      	b.n	80055ec <MAC_802_15_4_CallBack_Processing+0x3cc>
 80055de:	bf00      	nop
 80055e0:	200002cc 	.word	0x200002cc
  default:
    status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
    break;
 80055ea:	bf00      	nop
  }


  /* Send Ack to M0 */
  TL_MAC_802_15_4_SendAck();
 80055ec:	f7ff fce4 	bl	8004fb8 <TL_MAC_802_15_4_SendAck>
  return status;
 80055f0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af

}
 80055f4:	4618      	mov	r0, r3
 80055f6:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bdb0      	pop	{r4, r5, r7, pc}
 80055fe:	bf00      	nop

08005600 <MAC_MLMEResetReq>:
 *
 * @param  MAC_resetReq_t ref
 * @retval MAC_Status_t
 */
MAC_Status_t MAC_MLMEResetReq( const  MAC_resetReq_t * pResetReq )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
    MAC_Status_t status = MAC_NOT_IMPLEMENTED_STATUS;
 8005608:	2302      	movs	r3, #2
 800560a:	75fb      	strb	r3, [r7, #23]


    Mac_802_15_4_PreCmdProcessing();
 800560c:	f7fb f98a 	bl	8000924 <Mac_802_15_4_PreCmdProcessing>

    /* prepare buffer */
    TL_CmdPacket_t* p_mac_cmd_req = MAC_802_15_4_GetCmdBuffer();
 8005610:	f7fb f942 	bl	8000898 <MAC_802_15_4_GetCmdBuffer>
 8005614:	6138      	str	r0, [r7, #16]

    utils_mac_set_cmdCode(MSG_M4TOM0_MAC_MLME_RESET_REQ);
 8005616:	2006      	movs	r0, #6
 8005618:	f7ff fdea 	bl	80051f0 <utils_mac_set_cmdCode>

    /* plen = pitAttributeValueLen + 1 byte (corresponding to pibAttributeID) */
    p_mac_cmd_req->cmdserial.cmd.plen = sizeof(MAC_resetReq_t);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2204      	movs	r2, #4
 8005620:	72da      	strb	r2, [r3, #11]

    /* Here copy to payload */
    memcpy( p_mac_cmd_req->cmdserial.cmd.payload, pResetReq, sizeof(MAC_resetReq_t) );
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	330c      	adds	r3, #12
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	601a      	str	r2, [r3, #0]

    Mac_802_15_4_CmdTransfer();
 800562c:	f7fb f958 	bl	80008e0 <Mac_802_15_4_CmdTransfer>

    /* If return parameter */
    TL_Evt_t* p_mac_rsp_evt = MAC_802_15_4_GetRspPayEvt();
 8005630:	f7fb f93e 	bl	80008b0 <MAC_802_15_4_GetRspPayEvt>
 8005634:	60f8      	str	r0, [r7, #12]

    status = p_mac_rsp_evt->payload[0];
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	75fb      	strb	r3, [r7, #23]

    return status;
 800563c:	7dfb      	ldrb	r3, [r7, #23]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <MAC_MLMESetReq>:
 *
 * @param  MAC_setReq_t ref
 * @retval MAC_Status_t
 */
MAC_Status_t MAC_MLMESetReq( const  MAC_setReq_t * pSetReq)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  MAC_Status_t status = MAC_NOT_IMPLEMENTED_STATUS;
 800564e:	2302      	movs	r3, #2
 8005650:	75fb      	strb	r3, [r7, #23]

  Mac_802_15_4_PreCmdProcessing();
 8005652:	f7fb f967 	bl	8000924 <Mac_802_15_4_PreCmdProcessing>

  /* prepare buffer */
  TL_CmdPacket_t* p_mac_cmd_req = MAC_802_15_4_GetCmdBuffer();
 8005656:	f7fb f91f 	bl	8000898 <MAC_802_15_4_GetCmdBuffer>
 800565a:	6138      	str	r0, [r7, #16]

  utils_mac_set_cmdCode(MSG_M4TOM0_MAC_MLME_SET_REQ);
 800565c:	2009      	movs	r0, #9
 800565e:	f7ff fdc7 	bl	80051f0 <utils_mac_set_cmdCode>

  p_mac_cmd_req->cmdserial.cmd.plen = sizeof(MAC_setReq_t);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2208      	movs	r2, #8
 8005666:	72da      	strb	r2, [r3, #11]

  /* Here copy to payload */
  memcpy( p_mac_cmd_req->cmdserial.cmd.payload, pSetReq, sizeof(MAC_setReq_t) );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	330c      	adds	r3, #12
 800566c:	2208      	movs	r2, #8
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	f001 f867 	bl	8006744 <memcpy>

  Mac_802_15_4_CmdTransfer();
 8005676:	f7fb f933 	bl	80008e0 <Mac_802_15_4_CmdTransfer>

  /* If return parameter */
  TL_Evt_t* p_mac_rsp_evt = MAC_802_15_4_GetRspPayEvt();
 800567a:	f7fb f919 	bl	80008b0 <MAC_802_15_4_GetRspPayEvt>
 800567e:	60f8      	str	r0, [r7, #12]

  status = p_mac_rsp_evt->payload[0];
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	789b      	ldrb	r3, [r3, #2]
 8005684:	75fb      	strb	r3, [r7, #23]

  return status;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <MAC_MLMEStartReq>:
 *
 * @param  MAC_startReq_t ref
 * @retval MAC_Status_t
 */
MAC_Status_t MAC_MLMEStartReq( const  MAC_startReq_t * pStartReq)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  MAC_Status_t status = MAC_NOT_IMPLEMENTED_STATUS;
 8005698:	2302      	movs	r3, #2
 800569a:	75fb      	strb	r3, [r7, #23]

  Mac_802_15_4_PreCmdProcessing();
 800569c:	f7fb f942 	bl	8000924 <Mac_802_15_4_PreCmdProcessing>

  /* prepare buffer */
  TL_CmdPacket_t* p_mac_cmd_req = MAC_802_15_4_GetCmdBuffer();
 80056a0:	f7fb f8fa 	bl	8000898 <MAC_802_15_4_GetCmdBuffer>
 80056a4:	6138      	str	r0, [r7, #16]

  utils_mac_set_cmdCode(MSG_M4TOM0_MAC_MLME_START_REQ);
 80056a6:	200a      	movs	r0, #10
 80056a8:	f7ff fda2 	bl	80051f0 <utils_mac_set_cmdCode>

  p_mac_cmd_req->cmdserial.cmd.plen = sizeof(MAC_startReq_t);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2223      	movs	r2, #35	; 0x23
 80056b0:	72da      	strb	r2, [r3, #11]

  /* Here copy to payload */
  memcpy( p_mac_cmd_req->cmdserial.cmd.payload, pStartReq, sizeof(MAC_startReq_t) );
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	330c      	adds	r3, #12
 80056b6:	2223      	movs	r2, #35	; 0x23
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f842 	bl	8006744 <memcpy>

  Mac_802_15_4_CmdTransfer();
 80056c0:	f7fb f90e 	bl	80008e0 <Mac_802_15_4_CmdTransfer>

  /* If return parameter */
  TL_Evt_t* p_mac_rsp_evt = MAC_802_15_4_GetRspPayEvt();
 80056c4:	f7fb f8f4 	bl	80008b0 <MAC_802_15_4_GetRspPayEvt>
 80056c8:	60f8      	str	r0, [r7, #12]

  status = p_mac_rsp_evt->payload[0];
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	789b      	ldrb	r3, [r3, #2]
 80056ce:	75fb      	strb	r3, [r7, #23]

  return status;
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <MAC_MLMEAssociateRes>:
 * @param  MAC_associateRes_t ref
 * @retval MAC_Status_t
 */

MAC_Status_t MAC_MLMEAssociateRes(const MAC_associateRes_t * pAssociateRes)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  MAC_Status_t status = MAC_NOT_IMPLEMENTED_STATUS;
 80056e2:	2302      	movs	r3, #2
 80056e4:	75fb      	strb	r3, [r7, #23]

  Mac_802_15_4_PreCmdProcessing();
 80056e6:	f7fb f91d 	bl	8000924 <Mac_802_15_4_PreCmdProcessing>

  /* prepare buffer */
  TL_CmdPacket_t* p_mac_cmd_req = MAC_802_15_4_GetCmdBuffer();
 80056ea:	f7fb f8d5 	bl	8000898 <MAC_802_15_4_GetCmdBuffer>
 80056ee:	6138      	str	r0, [r7, #16]

  utils_mac_set_cmdCode(MSG_M4TOM0_MAC_MLME_ASSOCIATE_RES);
 80056f0:	2001      	movs	r0, #1
 80056f2:	f7ff fd7d 	bl	80051f0 <utils_mac_set_cmdCode>

  p_mac_cmd_req->cmdserial.cmd.plen = sizeof(MAC_associateRes_t);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2218      	movs	r2, #24
 80056fa:	72da      	strb	r2, [r3, #11]

  /* Here copy to payload */
  memcpy( p_mac_cmd_req->cmdserial.cmd.payload, pAssociateRes, sizeof(MAC_associateRes_t) );
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	330c      	adds	r3, #12
 8005700:	2218      	movs	r2, #24
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	f001 f81d 	bl	8006744 <memcpy>

  Mac_802_15_4_CmdTransfer();
 800570a:	f7fb f8e9 	bl	80008e0 <Mac_802_15_4_CmdTransfer>

  /* If return parameter */
  TL_Evt_t* p_mac_rsp_evt = MAC_802_15_4_GetRspPayEvt();
 800570e:	f7fb f8cf 	bl	80008b0 <MAC_802_15_4_GetRspPayEvt>
 8005712:	60f8      	str	r0, [r7, #12]

  status = p_mac_rsp_evt->payload[0];
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	789b      	ldrb	r3, [r3, #2]
 8005718:	75fb      	strb	r3, [r7, #23]

  return status;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800572a:	f3ef 8310 	mrs	r3, PRIMASK
 800572e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005730:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8005732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005734:	b672      	cpsid	i
}
 8005736:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8005738:	1cbb      	adds	r3, r7, #2
 800573a:	4619      	mov	r1, r3
 800573c:	4812      	ldr	r0, [pc, #72]	; (8005788 <DbgTrace_TxCpltCallback+0x64>)
 800573e:	f000 fbe6 	bl	8005f0e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8005742:	1cbb      	adds	r3, r7, #2
 8005744:	4619      	mov	r1, r3
 8005746:	4810      	ldr	r0, [pc, #64]	; (8005788 <DbgTrace_TxCpltCallback+0x64>)
 8005748:	f000 fcd2 	bl	80060f0 <CircularQueue_Sense>
 800574c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <DbgTrace_TxCpltCallback+0x4a>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f383 8810 	msr	PRIMASK, r3
}
 800575e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8005760:	887b      	ldrh	r3, [r7, #2]
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <DbgTrace_TxCpltCallback+0x68>)
 8005764:	4619      	mov	r1, r3
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f7fb f875 	bl	8000856 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800576c:	e008      	b.n	8005780 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <DbgTrace_TxCpltCallback+0x6c>)
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	bf00      	nop
}
 8005780:	bf00      	nop
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	200003c4 	.word	0x200003c4
 800578c:	08005725 	.word	0x08005725
 8005790:	20000019 	.word	0x20000019

08005794 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800579a:	f7fb f855 	bl	8000848 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800579e:	2302      	movs	r3, #2
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057a8:	4903      	ldr	r1, [pc, #12]	; (80057b8 <DbgTraceInit+0x24>)
 80057aa:	4804      	ldr	r0, [pc, #16]	; (80057bc <DbgTraceInit+0x28>)
 80057ac:	f000 f956 	bl	8005a5c <CircularQueue_Init>
#endif 
#endif
  return;
 80057b0:	bf00      	nop
}
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	200003e4 	.word	0x200003e4
 80057bc:	200003c4 	.word	0x200003c4

080057c0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f805 	bl	80057e0 <DbgTraceWrite>
 80057d6:	4603      	mov	r3, r0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	; 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80057f6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80057f8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d102      	bne.n	8005808 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8005802:	2300      	movs	r3, #0
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	e037      	b.n	8005878 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d006      	beq.n	800581c <DbgTraceWrite+0x3c>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d003      	beq.n	800581c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8005814:	f04f 33ff 	mov.w	r3, #4294967295
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
 800581a:	e02d      	b.n	8005878 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d02a      	beq.n	8005878 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005826:	b672      	cpsid	i
}
 8005828:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	b29a      	uxth	r2, r3
 800582e:	2301      	movs	r3, #1
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4814      	ldr	r0, [pc, #80]	; (8005884 <DbgTraceWrite+0xa4>)
 8005834:	f000 f944 	bl	8005ac0 <CircularQueue_Add>
 8005838:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d015      	beq.n	800586c <DbgTraceWrite+0x8c>
 8005840:	4b11      	ldr	r3, [pc, #68]	; (8005888 <DbgTraceWrite+0xa8>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d010      	beq.n	800586c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <DbgTraceWrite+0xa8>)
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f383 8810 	msr	PRIMASK, r3
}
 800585a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	b29b      	uxth	r3, r3
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <DbgTraceWrite+0xac>)
 8005862:	4619      	mov	r1, r3
 8005864:	69f8      	ldr	r0, [r7, #28]
 8005866:	f7fa fff6 	bl	8000856 <DbgOutputTraces>
 800586a:	e005      	b.n	8005878 <DbgTraceWrite+0x98>
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800587a:	4618      	mov	r0, r3
 800587c:	3728      	adds	r7, #40	; 0x28
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	200003c4 	.word	0x200003c4
 8005888:	20000019 	.word	0x20000019
 800588c:	08005725 	.word	0x08005725

08005890 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <OTP_Read+0x48>)
 800589c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800589e:	e002      	b.n	80058a6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3b08      	subs	r3, #8
 80058a4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3307      	adds	r3, #7
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	79fa      	ldrb	r2, [r7, #7]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d003      	beq.n	80058ba <OTP_Read+0x2a>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4a09      	ldr	r2, [pc, #36]	; (80058dc <OTP_Read+0x4c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d1f2      	bne.n	80058a0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3307      	adds	r3, #7
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	79fa      	ldrb	r2, [r7, #7]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d001      	beq.n	80058ca <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80058ca:	68fb      	ldr	r3, [r7, #12]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	1fff73f8 	.word	0x1fff73f8
 80058dc:	1fff7000 	.word	0x1fff7000

080058e0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	605a      	str	r2, [r3, #4]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005908:	f3ef 8310 	mrs	r3, PRIMASK
 800590c:	60fb      	str	r3, [r7, #12]
  return(result);
 800590e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005912:	b672      	cpsid	i
}
 8005914:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d102      	bne.n	8005926 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
 8005924:	e001      	b.n	800592a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	75fb      	strb	r3, [r7, #23]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f383 8810 	msr	PRIMASK, r3
}
 8005934:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005936:	7dfb      	ldrb	r3, [r7, #23]
}
 8005938:	4618      	mov	r0, r3
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594e:	f3ef 8310 	mrs	r3, PRIMASK
 8005952:	60fb      	str	r3, [r7, #12]
  return(result);
 8005954:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005956:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005958:	b672      	cpsid	i
}
 800595a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800599a:	f3ef 8310 	mrs	r3, PRIMASK
 800599e:	60fb      	str	r3, [r7, #12]
  return(result);
 80059a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059a4:	b672      	cpsid	i
}
 80059a6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f383 8810 	msr	PRIMASK, r3
}
 80059ce:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e4:	f3ef 8310 	mrs	r3, PRIMASK
 80059e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059ee:	b672      	cpsid	i
}
 80059f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6852      	ldr	r2, [r2, #4]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f383 8810 	msr	PRIMASK, r3
}
 8005a10:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b086      	sub	sp, #24
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a28:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a32:	b672      	cpsid	i
}
 8005a34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff ffca 	bl	80059dc <LST_remove_node>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f383 8810 	msr	PRIMASK, r3
}
 8005a52:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005a54:	bf00      	nop
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	7e3a      	ldrb	r2, [r7, #24]
 8005a98:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8005a9a:	7e3b      	ldrb	r3, [r7, #24]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d006      	beq.n	8005ab2 <CircularQueue_Init+0x56>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	891b      	ldrh	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab0:	e000      	b.n	8005ab4 <CircularQueue_Init+0x58>
  }
  return 0;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08e      	sub	sp, #56	; 0x38
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8005ad8:	2300      	movs	r3, #0
 8005ada:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8005adc:	2300      	movs	r3, #0
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8005ae8:	2300      	movs	r3, #0
 8005aea:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	891b      	ldrh	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <CircularQueue_Add+0x38>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e000      	b.n	8005afa <CircularQueue_Add+0x3a>
 8005af8:	2300      	movs	r3, #0
 8005afa:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02a      	beq.n	8005b5a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	891b      	ldrh	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d123      	bne.n	8005b54 <CircularQueue_Add+0x94>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	1c58      	adds	r0, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4298      	cmp	r0, r3
 8005b2a:	d306      	bcc.n	8005b3a <CircularQueue_Add+0x7a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6918      	ldr	r0, [r3, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	1ac3      	subs	r3, r0, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	e002      	b.n	8005b40 <CircularQueue_Add+0x80>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	440b      	add	r3, r1
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3302      	adds	r3, #2
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	e001      	b.n	8005b58 <CircularQueue_Add+0x98>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	891b      	ldrh	r3, [r3, #8]
 8005b58:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	891b      	ldrh	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	891b      	ldrh	r3, [r3, #8]
 8005b66:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d307      	bcc.n	8005b84 <CircularQueue_Add+0xc4>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6919      	ldr	r1, [r3, #16]
 8005b7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b7e:	440b      	add	r3, r1
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	e000      	b.n	8005b86 <CircularQueue_Add+0xc6>
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8005b88:	88fa      	ldrh	r2, [r7, #6]
 8005b8a:	7ffb      	ldrb	r3, [r7, #31]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	461a      	mov	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d80b      	bhi.n	8005bb4 <CircularQueue_Add+0xf4>
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005baa:	fb01 f202 	mul.w	r2, r1, r2
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e000      	b.n	8005bb6 <CircularQueue_Add+0xf6>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8005bb8:	7dfa      	ldrb	r2, [r7, #23]
 8005bba:	7ffb      	ldrb	r3, [r7, #31]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	bf8c      	ite	hi
 8005bc0:	2301      	movhi	r3, #1
 8005bc2:	2300      	movls	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8005bc8:	7fbb      	ldrb	r3, [r7, #30]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <CircularQueue_Add+0x120>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	7f1b      	ldrb	r3, [r3, #28]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <CircularQueue_Add+0x120>
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	e000      	b.n	8005be2 <CircularQueue_Add+0x122>
 8005be0:	8bbb      	ldrh	r3, [r7, #28]
 8005be2:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8005be4:	7fbb      	ldrb	r3, [r7, #30]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d008      	beq.n	8005bfc <CircularQueue_Add+0x13c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	7f1b      	ldrb	r3, [r3, #28]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <CircularQueue_Add+0x13c>
 8005bf6:	7ffb      	ldrb	r3, [r7, #31]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	e000      	b.n	8005bfe <CircularQueue_Add+0x13e>
 8005bfc:	8bbb      	ldrh	r3, [r7, #28]
 8005bfe:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 817e 	beq.w	8005f04 <CircularQueue_Add+0x444>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	88f9      	ldrh	r1, [r7, #6]
 8005c0e:	7ffb      	ldrb	r3, [r7, #31]
 8005c10:	440b      	add	r3, r1
 8005c12:	4619      	mov	r1, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	441a      	add	r2, r3
 8005c1c:	8bbb      	ldrh	r3, [r7, #28]
 8005c1e:	441a      	add	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	f200 816d 	bhi.w	8005f04 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2e:	e14a      	b.n	8005ec6 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c36:	441a      	add	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d307      	bcc.n	8005c50 <CircularQueue_Add+0x190>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	e003      	b.n	8005c58 <CircularQueue_Add+0x198>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c56:	4413      	add	r3, r2
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	891b      	ldrh	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d130      	bne.n	8005ccc <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	1c59      	adds	r1, r3, #1
 8005c72:	6339      	str	r1, [r7, #48]	; 0x30
 8005c74:	4413      	add	r3, r2
 8005c76:	88fa      	ldrh	r2, [r7, #6]
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d304      	bcc.n	8005c90 <CircularQueue_Add+0x1d0>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	e000      	b.n	8005c92 <CircularQueue_Add+0x1d2>
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	b298      	uxth	r0, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	1c59      	adds	r1, r3, #1
 8005ca2:	6339      	str	r1, [r7, #48]	; 0x30
 8005ca4:	4413      	add	r3, r2
 8005ca6:	b2c2      	uxtb	r2, r0
 8005ca8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d304      	bcc.n	8005cbe <CircularQueue_Add+0x1fe>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	e000      	b.n	8005cc0 <CircularQueue_Add+0x200>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8005ccc:	88fa      	ldrh	r2, [r7, #6]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	1acb      	subs	r3, r1, r3
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	bf28      	it	cs
 8005cda:	4613      	movcs	r3, r2
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d007      	beq.n	8005cf6 <CircularQueue_Add+0x236>
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d225      	bcs.n	8005d3a <CircularQueue_Add+0x27a>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	7f1b      	ldrb	r3, [r3, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d121      	bne.n	8005d3a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	18d0      	adds	r0, r2, r3
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	4413      	add	r3, r2
 8005d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f000 fd19 	bl	8006744 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	441a      	add	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8005d1e:	2300      	movs	r3, #0
 8005d20:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	4413      	add	r3, r2
 8005d36:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d38:	e0a4      	b.n	8005e84 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80a1 	beq.w	8005e84 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	7f1b      	ldrb	r3, [r3, #28]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d03a      	beq.n	8005dc4 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	891b      	ldrh	r3, [r3, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	3b02      	subs	r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	22ff      	movs	r2, #255	; 0xff
 8005d70:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	441a      	add	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8005d86:	2300      	movs	r3, #0
 8005d88:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	891b      	ldrh	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d16f      	bne.n	8005e72 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	6339      	str	r1, [r7, #48]	; 0x30
 8005d9c:	4413      	add	r3, r2
 8005d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	0a18      	lsrs	r0, r3, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	6339      	str	r1, [r7, #48]	; 0x30
 8005db2:	4413      	add	r3, r2
 8005db4:	b2c2      	uxtb	r2, r0
 8005db6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	1c9a      	adds	r2, r3, #2
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	615a      	str	r2, [r3, #20]
 8005dc2:	e056      	b.n	8005e72 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	7f1b      	ldrb	r3, [r3, #28]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d050      	beq.n	8005e72 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	891b      	ldrh	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d14a      	bne.n	8005e6e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	3b02      	subs	r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	0a19      	lsrs	r1, r3, #8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	3b01      	subs	r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	b2ca      	uxtb	r2, r1
 8005df8:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	18d0      	adds	r0, r2, r3
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e10:	4619      	mov	r1, r3
 8005e12:	f000 fc97 	bl	8006744 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	695a      	ldr	r2, [r3, #20]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8005e38:	2300      	movs	r3, #0
 8005e3a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	6339      	str	r1, [r7, #48]	; 0x30
 8005e46:	4413      	add	r3, r2
 8005e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	0a18      	lsrs	r0, r3, #8
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	1c59      	adds	r1, r3, #1
 8005e5a:	6339      	str	r1, [r7, #48]	; 0x30
 8005e5c:	4413      	add	r3, r2
 8005e5e:	b2c2      	uxtb	r2, r0
 8005e60:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	1c9a      	adds	r2, r3, #2
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	615a      	str	r2, [r3, #20]
 8005e6c:	e001      	b.n	8005e72 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e049      	b.n	8005f06 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d015      	beq.n	8005eb6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	18d0      	adds	r0, r2, r3
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e96:	fb03 f202 	mul.w	r2, r3, r2
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	4413      	add	r3, r2
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	f000 fc4d 	bl	8006744 <memcpy>
        q->byteCount += NbBytesToCopy;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	f4ff aeb0 	bcc.w	8005c30 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6919      	ldr	r1, [r3, #16]
 8005ed8:	7ffb      	ldrb	r3, [r7, #31]
 8005eda:	4419      	add	r1, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4299      	cmp	r1, r3
 8005ee2:	d307      	bcc.n	8005ef4 <CircularQueue_Add+0x434>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6919      	ldr	r1, [r3, #16]
 8005ee8:	7ffb      	ldrb	r3, [r7, #31]
 8005eea:	4419      	add	r1, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	1acb      	subs	r3, r1, r3
 8005ef2:	e003      	b.n	8005efc <CircularQueue_Add+0x43c>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6919      	ldr	r1, [r3, #16]
 8005ef8:	7ffb      	ldrb	r3, [r7, #31]
 8005efa:	440b      	add	r3, r1
 8005efc:	4413      	add	r3, r2
 8005efe:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	e000      	b.n	8005f06 <CircularQueue_Add+0x446>
    return NULL;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3738      	adds	r7, #56	; 0x38
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	891b      	ldrh	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <CircularQueue_Remove+0x1e>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e000      	b.n	8005f2e <CircularQueue_Remove+0x20>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80cc 	beq.w	80060d6 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	891b      	ldrh	r3, [r3, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d121      	bne.n	8005f8a <CircularQueue_Remove+0x7c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6819      	ldr	r1, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	1c58      	adds	r0, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4298      	cmp	r0, r3
 8005f64:	d306      	bcc.n	8005f74 <CircularQueue_Remove+0x66>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68d8      	ldr	r0, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	1ac3      	subs	r3, r0, r3
 8005f70:	3301      	adds	r3, #1
 8005f72:	e002      	b.n	8005f7a <CircularQueue_Remove+0x6c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	440b      	add	r3, r1
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	e001      	b.n	8005f8e <CircularQueue_Remove+0x80>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	891b      	ldrh	r3, [r3, #8]
 8005f8e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7f1b      	ldrb	r3, [r3, #28]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d057      	beq.n	800604c <CircularQueue_Remove+0x13e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7f1b      	ldrb	r3, [r3, #28]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d151      	bne.n	800604c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8005fa8:	897b      	ldrh	r3, [r7, #10]
 8005faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d103      	bne.n	8005fba <CircularQueue_Remove+0xac>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	891b      	ldrh	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d942      	bls.n	800604c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	891b      	ldrh	r3, [r3, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d03e      	beq.n	800604c <CircularQueue_Remove+0x13e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	8912      	ldrh	r2, [r2, #8]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d235      	bcs.n	800604c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68d9      	ldr	r1, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	1acb      	subs	r3, r1, r3
 8005fee:	441a      	add	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	891b      	ldrh	r3, [r3, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d121      	bne.n	8006046 <CircularQueue_Remove+0x138>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	4413      	add	r3, r2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b29a      	uxth	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	1c58      	adds	r0, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4298      	cmp	r0, r3
 8006020:	d306      	bcc.n	8006030 <CircularQueue_Remove+0x122>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68d8      	ldr	r0, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	1ac3      	subs	r3, r0, r3
 800602c:	3301      	adds	r3, #1
 800602e:	e002      	b.n	8006036 <CircularQueue_Remove+0x128>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	3301      	adds	r3, #1
 8006036:	440b      	add	r3, r1
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	b29b      	uxth	r3, r3
 8006040:	4413      	add	r3, r2
 8006042:	b29b      	uxth	r3, r3
 8006044:	e001      	b.n	800604a <CircularQueue_Remove+0x13c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	891b      	ldrh	r3, [r3, #8]
 800604a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68d9      	ldr	r1, [r3, #12]
 8006054:	7a7b      	ldrb	r3, [r7, #9]
 8006056:	4419      	add	r1, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4299      	cmp	r1, r3
 800605e:	d307      	bcc.n	8006070 <CircularQueue_Remove+0x162>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68d9      	ldr	r1, [r3, #12]
 8006064:	7a7b      	ldrb	r3, [r7, #9]
 8006066:	4419      	add	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	1acb      	subs	r3, r1, r3
 800606e:	e003      	b.n	8006078 <CircularQueue_Remove+0x16a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68d9      	ldr	r1, [r3, #12]
 8006074:	7a7b      	ldrb	r3, [r7, #9]
 8006076:	440b      	add	r3, r1
 8006078:	4413      	add	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	8979      	ldrh	r1, [r7, #10]
 8006082:	7a7a      	ldrb	r2, [r7, #9]
 8006084:	440a      	add	r2, r1
 8006086:	1a9a      	subs	r2, r3, r2
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	897b      	ldrh	r3, [r7, #10]
 800609a:	441a      	add	r2, r3
 800609c:	7a7b      	ldrb	r3, [r7, #9]
 800609e:	441a      	add	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d309      	bcc.n	80060bc <CircularQueue_Remove+0x1ae>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	897b      	ldrh	r3, [r7, #10]
 80060ae:	441a      	add	r2, r3
 80060b0:	7a7b      	ldrb	r3, [r7, #9]
 80060b2:	441a      	add	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	e005      	b.n	80060c8 <CircularQueue_Remove+0x1ba>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	897b      	ldrh	r3, [r7, #10]
 80060c2:	441a      	add	r2, r3
 80060c4:	7a7b      	ldrb	r3, [r7, #9]
 80060c6:	4413      	add	r3, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	1e5a      	subs	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	897a      	ldrh	r2, [r7, #10]
 80060e0:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80060e2:	68fb      	ldr	r3, [r7, #12]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	891b      	ldrh	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <CircularQueue_Sense+0x1e>
 800610a:	2302      	movs	r3, #2
 800610c:	e000      	b.n	8006110 <CircularQueue_Sense+0x20>
 800610e:	2300      	movs	r3, #0
 8006110:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 8090 	beq.w	8006244 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	891b      	ldrh	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d121      	bne.n	8006176 <CircularQueue_Sense+0x86>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	4413      	add	r3, r2
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b29a      	uxth	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	1c58      	adds	r0, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4298      	cmp	r0, r3
 8006150:	d306      	bcc.n	8006160 <CircularQueue_Sense+0x70>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68d8      	ldr	r0, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	1ac3      	subs	r3, r0, r3
 800615c:	3301      	adds	r3, #1
 800615e:	e002      	b.n	8006166 <CircularQueue_Sense+0x76>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	3301      	adds	r3, #1
 8006166:	440b      	add	r3, r1
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	b29b      	uxth	r3, r3
 8006170:	4413      	add	r3, r2
 8006172:	b29b      	uxth	r3, r3
 8006174:	e001      	b.n	800617a <CircularQueue_Sense+0x8a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	891b      	ldrh	r3, [r3, #8]
 800617a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7f1b      	ldrb	r3, [r3, #28]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d048      	beq.n	800621a <CircularQueue_Sense+0x12a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7f1b      	ldrb	r3, [r3, #28]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d142      	bne.n	800621a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8006194:	8a7b      	ldrh	r3, [r7, #18]
 8006196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800619a:	4293      	cmp	r3, r2
 800619c:	d103      	bne.n	80061a6 <CircularQueue_Sense+0xb6>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	891b      	ldrh	r3, [r3, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d012      	beq.n	80061cc <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d933      	bls.n	800621a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	891b      	ldrh	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02f      	beq.n	800621a <CircularQueue_Sense+0x12a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	8912      	ldrh	r2, [r2, #8]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d226      	bcs.n	800621a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	891b      	ldrh	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11d      	bne.n	8006214 <CircularQueue_Sense+0x124>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6819      	ldr	r1, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1c58      	adds	r0, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4298      	cmp	r0, r3
 80061f2:	d305      	bcc.n	8006200 <CircularQueue_Sense+0x110>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	1ac3      	subs	r3, r0, r3
 80061fc:	3301      	adds	r3, #1
 80061fe:	e001      	b.n	8006204 <CircularQueue_Sense+0x114>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	440b      	add	r3, r1
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	b29b      	uxth	r3, r3
 800620e:	4413      	add	r3, r2
 8006210:	b29b      	uxth	r3, r3
 8006212:	e001      	b.n	8006218 <CircularQueue_Sense+0x128>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	891b      	ldrh	r3, [r3, #8]
 8006218:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	7af9      	ldrb	r1, [r7, #11]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4419      	add	r1, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4299      	cmp	r1, r3
 800622a:	d306      	bcc.n	800623a <CircularQueue_Sense+0x14a>
 800622c:	7af9      	ldrb	r1, [r7, #11]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4419      	add	r1, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	e002      	b.n	8006240 <CircularQueue_Sense+0x150>
 800623a:	7af9      	ldrb	r1, [r7, #11]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	440b      	add	r3, r1
 8006240:	4413      	add	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	8a7a      	ldrh	r2, [r7, #18]
 800624e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8006250:	697b      	ldr	r3, [r7, #20]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <UTIL_LPM_Init+0x1c>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <UTIL_LPM_Init+0x20>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	200013e4 	.word	0x200013e4
 8006280:	200013e8 	.word	0x200013e8

08006284 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006290:	f3ef 8310 	mrs	r3, PRIMASK
 8006294:	613b      	str	r3, [r7, #16]
  return(result);
 8006296:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800629a:	b672      	cpsid	i
}
 800629c:	bf00      	nop
  
  switch(state)
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <UTIL_LPM_SetOffMode+0x32>
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10e      	bne.n	80062c6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <UTIL_LPM_SetOffMode+0x5c>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	4a0b      	ldr	r2, [pc, #44]	; (80062e0 <UTIL_LPM_SetOffMode+0x5c>)
 80062b2:	6013      	str	r3, [r2, #0]
      break;
 80062b4:	e008      	b.n	80062c8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	43da      	mvns	r2, r3
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <UTIL_LPM_SetOffMode+0x5c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4013      	ands	r3, r2
 80062c0:	4a07      	ldr	r2, [pc, #28]	; (80062e0 <UTIL_LPM_SetOffMode+0x5c>)
 80062c2:	6013      	str	r3, [r2, #0]
      break;
 80062c4:	e000      	b.n	80062c8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80062c6:	bf00      	nop
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f383 8810 	msr	PRIMASK, r3
}
 80062d2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	200013e8 	.word	0x200013e8

080062e4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b090      	sub	sp, #64	; 0x40
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80062ec:	4b73      	ldr	r3, [pc, #460]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80062f2:	4b72      	ldr	r3, [pc, #456]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4013      	ands	r3, r2
 80062fa:	4a70      	ldr	r2, [pc, #448]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 80062fc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80062fe:	4b70      	ldr	r3, [pc, #448]	; (80064c0 <UTIL_SEQ_Run+0x1dc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006304:	4b6f      	ldr	r3, [pc, #444]	; (80064c4 <UTIL_SEQ_Run+0x1e0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800630a:	4b6f      	ldr	r3, [pc, #444]	; (80064c8 <UTIL_SEQ_Run+0x1e4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006310:	4b6e      	ldr	r3, [pc, #440]	; (80064cc <UTIL_SEQ_Run+0x1e8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006316:	e08d      	b.n	8006434 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800631c:	e002      	b.n	8006324 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800631e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006320:	3301      	adds	r3, #1
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006324:	4a6a      	ldr	r2, [pc, #424]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	401a      	ands	r2, r3
 8006330:	4b62      	ldr	r3, [pc, #392]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f1      	beq.n	800631e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800633a:	4a65      	ldr	r2, [pc, #404]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	401a      	ands	r2, r3
 8006346:	4b5d      	ldr	r3, [pc, #372]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4013      	ands	r3, r2
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800634e:	4a60      	ldr	r2, [pc, #384]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 8006350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006360:	4a5b      	ldr	r2, [pc, #364]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 8006362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4413      	add	r3, r2
 8006368:	f04f 32ff 	mov.w	r2, #4294967295
 800636c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800636e:	4a58      	ldr	r2, [pc, #352]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 8006370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4413      	add	r3, r2
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	4013      	ands	r3, r2
 800637c:	4618      	mov	r0, r3
 800637e:	f000 f97b 	bl	8006678 <SEQ_BitPosition>
 8006382:	4603      	mov	r3, r0
 8006384:	461a      	mov	r2, r3
 8006386:	4b53      	ldr	r3, [pc, #332]	; (80064d4 <UTIL_SEQ_Run+0x1f0>)
 8006388:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800638a:	4a51      	ldr	r2, [pc, #324]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 800638c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b4f      	ldr	r3, [pc, #316]	; (80064d4 <UTIL_SEQ_Run+0x1f0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f303 	lsl.w	r3, r1, r3
 800639e:	43db      	mvns	r3, r3
 80063a0:	401a      	ands	r2, r3
 80063a2:	494b      	ldr	r1, [pc, #300]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 80063a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	440b      	add	r3, r1
 80063aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ac:	f3ef 8310 	mrs	r3, PRIMASK
 80063b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80063b2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80063b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80063b6:	b672      	cpsid	i
}
 80063b8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80063ba:	4b46      	ldr	r3, [pc, #280]	; (80064d4 <UTIL_SEQ_Run+0x1f0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2201      	movs	r2, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	43da      	mvns	r2, r3
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <UTIL_SEQ_Run+0x1dc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4013      	ands	r3, r2
 80063cc:	4a3c      	ldr	r2, [pc, #240]	; (80064c0 <UTIL_SEQ_Run+0x1dc>)
 80063ce:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80063d0:	2302      	movs	r3, #2
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d4:	e013      	b.n	80063fe <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80063d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d8:	3b01      	subs	r3, #1
 80063da:	4a3d      	ldr	r2, [pc, #244]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 80063dc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80063e0:	4b3c      	ldr	r3, [pc, #240]	; (80064d4 <UTIL_SEQ_Run+0x1f0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43da      	mvns	r2, r3
 80063ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ee:	3b01      	subs	r3, #1
 80063f0:	400a      	ands	r2, r1
 80063f2:	4937      	ldr	r1, [pc, #220]	; (80064d0 <UTIL_SEQ_Run+0x1ec>)
 80063f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80063f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fa:	3b01      	subs	r3, #1
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e8      	bne.n	80063d6 <UTIL_SEQ_Run+0xf2>
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f383 8810 	msr	PRIMASK, r3
}
 800640e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006410:	4b30      	ldr	r3, [pc, #192]	; (80064d4 <UTIL_SEQ_Run+0x1f0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <UTIL_SEQ_Run+0x1f4>)
 8006416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641a:	4798      	blx	r3

    local_taskset = TaskSet;
 800641c:	4b28      	ldr	r3, [pc, #160]	; (80064c0 <UTIL_SEQ_Run+0x1dc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8006422:	4b28      	ldr	r3, [pc, #160]	; (80064c4 <UTIL_SEQ_Run+0x1e0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8006428:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <UTIL_SEQ_Run+0x1e4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800642e:	4b27      	ldr	r3, [pc, #156]	; (80064cc <UTIL_SEQ_Run+0x1e8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	401a      	ands	r2, r3
 800643a:	4b20      	ldr	r3, [pc, #128]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4013      	ands	r3, r2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <UTIL_SEQ_Run+0x16c>
 8006444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	f43f af64 	beq.w	8006318 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8006450:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <UTIL_SEQ_Run+0x1f0>)
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006458:	f000 f8ff 	bl	800665a <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	613b      	str	r3, [r7, #16]
  return(result);
 8006462:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8006464:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006466:	b672      	cpsid	i
}
 8006468:	bf00      	nop
  local_taskset = TaskSet;
 800646a:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <UTIL_SEQ_Run+0x1dc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006470:	4b14      	ldr	r3, [pc, #80]	; (80064c4 <UTIL_SEQ_Run+0x1e0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <UTIL_SEQ_Run+0x1e4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800647c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	401a      	ands	r2, r3
 8006482:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d107      	bne.n	800649c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <UTIL_SEQ_Run+0x1e8>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8006498:	f000 f8d8 	bl	800664c <UTIL_SEQ_Idle>
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f383 8810 	msr	PRIMASK, r3
}
 80064a6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80064a8:	f000 f8de 	bl	8006668 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80064ac:	4a03      	ldr	r2, [pc, #12]	; (80064bc <UTIL_SEQ_Run+0x1d8>)
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	6013      	str	r3, [r2, #0]

  return;
 80064b2:	bf00      	nop
}
 80064b4:	3740      	adds	r7, #64	; 0x40
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000020 	.word	0x20000020
 80064c0:	200013ec 	.word	0x200013ec
 80064c4:	200013f0 	.word	0x200013f0
 80064c8:	2000001c 	.word	0x2000001c
 80064cc:	200013f4 	.word	0x200013f4
 80064d0:	2000147c 	.word	0x2000147c
 80064d4:	200013f8 	.word	0x200013f8
 80064d8:	200013fc 	.word	0x200013fc

080064dc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e8:	f3ef 8310 	mrs	r3, PRIMASK
 80064ec:	617b      	str	r3, [r7, #20]
  return(result);
 80064ee:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80064f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80064f2:	b672      	cpsid	i
}
 80064f4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f8be 	bl	8006678 <SEQ_BitPosition>
 80064fc:	4603      	mov	r3, r0
 80064fe:	4619      	mov	r1, r3
 8006500:	4a06      	ldr	r2, [pc, #24]	; (800651c <UTIL_SEQ_RegTask+0x40>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f383 8810 	msr	PRIMASK, r3
}
 8006512:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006514:	bf00      	nop
}
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	200013fc 	.word	0x200013fc

08006520 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800652a:	f3ef 8310 	mrs	r3, PRIMASK
 800652e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006530:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006534:	b672      	cpsid	i
}
 8006536:	bf00      	nop

  TaskSet |= TaskId_bm;
 8006538:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <UTIL_SEQ_SetTask+0x50>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4313      	orrs	r3, r2
 8006540:	4a0b      	ldr	r2, [pc, #44]	; (8006570 <UTIL_SEQ_SetTask+0x50>)
 8006542:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006544:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <UTIL_SEQ_SetTask+0x54>)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	431a      	orrs	r2, r3
 8006550:	4908      	ldr	r1, [pc, #32]	; (8006574 <UTIL_SEQ_SetTask+0x54>)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f383 8810 	msr	PRIMASK, r3
}
 8006562:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006564:	bf00      	nop
}
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	200013ec 	.word	0x200013ec
 8006574:	2000147c 	.word	0x2000147c

08006578 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006580:	f3ef 8310 	mrs	r3, PRIMASK
 8006584:	60fb      	str	r3, [r7, #12]
  return(result);
 8006586:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800658a:	b672      	cpsid	i
}
 800658c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <UTIL_SEQ_SetEvt+0x3c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4313      	orrs	r3, r2
 8006596:	4a07      	ldr	r2, [pc, #28]	; (80065b4 <UTIL_SEQ_SetEvt+0x3c>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f383 8810 	msr	PRIMASK, r3
}
 80065a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80065a6:	bf00      	nop
}
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	200013f0 	.word	0x200013f0

080065b8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80065c0:	4b1f      	ldr	r3, [pc, #124]	; (8006640 <UTIL_SEQ_WaitEvt+0x88>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80065c6:	4b1e      	ldr	r3, [pc, #120]	; (8006640 <UTIL_SEQ_WaitEvt+0x88>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d102      	bne.n	80065d6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e005      	b.n	80065e2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <UTIL_SEQ_WaitEvt+0x88>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2201      	movs	r2, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80065e2:	4b18      	ldr	r3, [pc, #96]	; (8006644 <UTIL_SEQ_WaitEvt+0x8c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80065e8:	4a16      	ldr	r2, [pc, #88]	; (8006644 <UTIL_SEQ_WaitEvt+0x8c>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80065ee:	e003      	b.n	80065f8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	69f8      	ldr	r0, [r7, #28]
 80065f4:	f7fa f878 	bl	80006e8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <UTIL_SEQ_WaitEvt+0x90>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f5      	beq.n	80065f0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006604:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <UTIL_SEQ_WaitEvt+0x88>)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800660a:	f3ef 8310 	mrs	r3, PRIMASK
 800660e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006610:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006614:	b672      	cpsid	i
}
 8006616:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	43da      	mvns	r2, r3
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <UTIL_SEQ_WaitEvt+0x90>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4013      	ands	r3, r2
 8006622:	4a09      	ldr	r2, [pc, #36]	; (8006648 <UTIL_SEQ_WaitEvt+0x90>)
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f383 8810 	msr	PRIMASK, r3
}
 8006630:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8006632:	4a04      	ldr	r2, [pc, #16]	; (8006644 <UTIL_SEQ_WaitEvt+0x8c>)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6013      	str	r3, [r2, #0]
  return;
 8006638:	bf00      	nop
}
 800663a:	3720      	adds	r7, #32
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	200013f8 	.word	0x200013f8
 8006644:	200013f4 	.word	0x200013f4
 8006648:	200013f0 	.word	0x200013f0

0800664c <UTIL_SEQ_Idle>:
  UTIL_SEQ_Run(~TaskId_bm);
  return;
}

__WEAK void UTIL_SEQ_Idle( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  return;
 8006650:	bf00      	nop
}
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800665a:	b480      	push	{r7}
 800665c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800665e:	bf00      	nop
}
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800666c:	bf00      	nop
}
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <SEQ_BitPosition+0x24>
 8006692:	2310      	movs	r3, #16
 8006694:	73fb      	strb	r3, [r7, #15]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <SEQ_BitPosition+0x3a>
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	3308      	adds	r3, #8
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <SEQ_BitPosition+0x50>
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	3304      	adds	r3, #4
 80066c0:	73fb      	strb	r3, [r7, #15]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	0f1b      	lsrs	r3, r3, #28
 80066cc:	4a07      	ldr	r2, [pc, #28]	; (80066ec <SEQ_BitPosition+0x74>)
 80066ce:	5cd2      	ldrb	r2, [r2, r3]
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	4413      	add	r3, r2
 80066d4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	f1c3 031f 	rsb	r3, r3, #31
 80066dc:	b2db      	uxtb	r3, r3
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	08008148 	.word	0x08008148

080066f0 <__errno>:
 80066f0:	4b01      	ldr	r3, [pc, #4]	; (80066f8 <__errno+0x8>)
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000024 	.word	0x20000024

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	; (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	; (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	; (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	; (8006740 <__libc_init_array+0x44>)
 8006710:	f001 f9d8 	bl	8007ac4 <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	080081f8 	.word	0x080081f8
 8006738:	080081f8 	.word	0x080081f8
 800673c:	080081f8 	.word	0x080081f8
 8006740:	080081fc 	.word	0x080081fc

08006744 <memcpy>:
 8006744:	440a      	add	r2, r1
 8006746:	4291      	cmp	r1, r2
 8006748:	f100 33ff 	add.w	r3, r0, #4294967295
 800674c:	d100      	bne.n	8006750 <memcpy+0xc>
 800674e:	4770      	bx	lr
 8006750:	b510      	push	{r4, lr}
 8006752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675a:	4291      	cmp	r1, r2
 800675c:	d1f9      	bne.n	8006752 <memcpy+0xe>
 800675e:	bd10      	pop	{r4, pc}

08006760 <memset>:
 8006760:	4402      	add	r2, r0
 8006762:	4603      	mov	r3, r0
 8006764:	4293      	cmp	r3, r2
 8006766:	d100      	bne.n	800676a <memset+0xa>
 8006768:	4770      	bx	lr
 800676a:	f803 1b01 	strb.w	r1, [r3], #1
 800676e:	e7f9      	b.n	8006764 <memset+0x4>

08006770 <iprintf>:
 8006770:	b40f      	push	{r0, r1, r2, r3}
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <iprintf+0x2c>)
 8006774:	b513      	push	{r0, r1, r4, lr}
 8006776:	681c      	ldr	r4, [r3, #0]
 8006778:	b124      	cbz	r4, 8006784 <iprintf+0x14>
 800677a:	69a3      	ldr	r3, [r4, #24]
 800677c:	b913      	cbnz	r3, 8006784 <iprintf+0x14>
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f8d4 	bl	800692c <__sinit>
 8006784:	ab05      	add	r3, sp, #20
 8006786:	9a04      	ldr	r2, [sp, #16]
 8006788:	68a1      	ldr	r1, [r4, #8]
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fb87 	bl	8006ea0 <_vfiprintf_r>
 8006792:	b002      	add	sp, #8
 8006794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006798:	b004      	add	sp, #16
 800679a:	4770      	bx	lr
 800679c:	20000024 	.word	0x20000024

080067a0 <sniprintf>:
 80067a0:	b40c      	push	{r2, r3}
 80067a2:	b530      	push	{r4, r5, lr}
 80067a4:	4b17      	ldr	r3, [pc, #92]	; (8006804 <sniprintf+0x64>)
 80067a6:	1e0c      	subs	r4, r1, #0
 80067a8:	681d      	ldr	r5, [r3, #0]
 80067aa:	b09d      	sub	sp, #116	; 0x74
 80067ac:	da08      	bge.n	80067c0 <sniprintf+0x20>
 80067ae:	238b      	movs	r3, #139	; 0x8b
 80067b0:	602b      	str	r3, [r5, #0]
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	b01d      	add	sp, #116	; 0x74
 80067b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067bc:	b002      	add	sp, #8
 80067be:	4770      	bx	lr
 80067c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80067c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80067c8:	bf14      	ite	ne
 80067ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067ce:	4623      	moveq	r3, r4
 80067d0:	9304      	str	r3, [sp, #16]
 80067d2:	9307      	str	r3, [sp, #28]
 80067d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067d8:	9002      	str	r0, [sp, #8]
 80067da:	9006      	str	r0, [sp, #24]
 80067dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067e2:	ab21      	add	r3, sp, #132	; 0x84
 80067e4:	a902      	add	r1, sp, #8
 80067e6:	4628      	mov	r0, r5
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	f000 fa2f 	bl	8006c4c <_svfiprintf_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	bfbc      	itt	lt
 80067f2:	238b      	movlt	r3, #139	; 0x8b
 80067f4:	602b      	strlt	r3, [r5, #0]
 80067f6:	2c00      	cmp	r4, #0
 80067f8:	d0dd      	beq.n	80067b6 <sniprintf+0x16>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e7d9      	b.n	80067b6 <sniprintf+0x16>
 8006802:	bf00      	nop
 8006804:	20000024 	.word	0x20000024

08006808 <_vsniprintf_r>:
 8006808:	b530      	push	{r4, r5, lr}
 800680a:	4614      	mov	r4, r2
 800680c:	2c00      	cmp	r4, #0
 800680e:	b09b      	sub	sp, #108	; 0x6c
 8006810:	4605      	mov	r5, r0
 8006812:	461a      	mov	r2, r3
 8006814:	da05      	bge.n	8006822 <_vsniprintf_r+0x1a>
 8006816:	238b      	movs	r3, #139	; 0x8b
 8006818:	6003      	str	r3, [r0, #0]
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	b01b      	add	sp, #108	; 0x6c
 8006820:	bd30      	pop	{r4, r5, pc}
 8006822:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006826:	f8ad 300c 	strh.w	r3, [sp, #12]
 800682a:	bf14      	ite	ne
 800682c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006830:	4623      	moveq	r3, r4
 8006832:	9302      	str	r3, [sp, #8]
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800683a:	9100      	str	r1, [sp, #0]
 800683c:	9104      	str	r1, [sp, #16]
 800683e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006842:	4669      	mov	r1, sp
 8006844:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006846:	f000 fa01 	bl	8006c4c <_svfiprintf_r>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	bfbc      	itt	lt
 800684e:	238b      	movlt	r3, #139	; 0x8b
 8006850:	602b      	strlt	r3, [r5, #0]
 8006852:	2c00      	cmp	r4, #0
 8006854:	d0e3      	beq.n	800681e <_vsniprintf_r+0x16>
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e7df      	b.n	800681e <_vsniprintf_r+0x16>
	...

08006860 <vsniprintf>:
 8006860:	b507      	push	{r0, r1, r2, lr}
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	460a      	mov	r2, r1
 8006868:	4601      	mov	r1, r0
 800686a:	4803      	ldr	r0, [pc, #12]	; (8006878 <vsniprintf+0x18>)
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f7ff ffcb 	bl	8006808 <_vsniprintf_r>
 8006872:	b003      	add	sp, #12
 8006874:	f85d fb04 	ldr.w	pc, [sp], #4
 8006878:	20000024 	.word	0x20000024

0800687c <std>:
 800687c:	2300      	movs	r3, #0
 800687e:	b510      	push	{r4, lr}
 8006880:	4604      	mov	r4, r0
 8006882:	e9c0 3300 	strd	r3, r3, [r0]
 8006886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800688a:	6083      	str	r3, [r0, #8]
 800688c:	8181      	strh	r1, [r0, #12]
 800688e:	6643      	str	r3, [r0, #100]	; 0x64
 8006890:	81c2      	strh	r2, [r0, #14]
 8006892:	6183      	str	r3, [r0, #24]
 8006894:	4619      	mov	r1, r3
 8006896:	2208      	movs	r2, #8
 8006898:	305c      	adds	r0, #92	; 0x5c
 800689a:	f7ff ff61 	bl	8006760 <memset>
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <std+0x38>)
 80068a0:	6263      	str	r3, [r4, #36]	; 0x24
 80068a2:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <std+0x3c>)
 80068a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80068a6:	4b05      	ldr	r3, [pc, #20]	; (80068bc <std+0x40>)
 80068a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <std+0x44>)
 80068ac:	6224      	str	r4, [r4, #32]
 80068ae:	6323      	str	r3, [r4, #48]	; 0x30
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	bf00      	nop
 80068b4:	08007449 	.word	0x08007449
 80068b8:	0800746b 	.word	0x0800746b
 80068bc:	080074a3 	.word	0x080074a3
 80068c0:	080074c7 	.word	0x080074c7

080068c4 <_cleanup_r>:
 80068c4:	4901      	ldr	r1, [pc, #4]	; (80068cc <_cleanup_r+0x8>)
 80068c6:	f000 b8af 	b.w	8006a28 <_fwalk_reent>
 80068ca:	bf00      	nop
 80068cc:	080077a1 	.word	0x080077a1

080068d0 <__sfmoreglue>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	2268      	movs	r2, #104	; 0x68
 80068d4:	1e4d      	subs	r5, r1, #1
 80068d6:	4355      	muls	r5, r2
 80068d8:	460e      	mov	r6, r1
 80068da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068de:	f000 f8e5 	bl	8006aac <_malloc_r>
 80068e2:	4604      	mov	r4, r0
 80068e4:	b140      	cbz	r0, 80068f8 <__sfmoreglue+0x28>
 80068e6:	2100      	movs	r1, #0
 80068e8:	e9c0 1600 	strd	r1, r6, [r0]
 80068ec:	300c      	adds	r0, #12
 80068ee:	60a0      	str	r0, [r4, #8]
 80068f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068f4:	f7ff ff34 	bl	8006760 <memset>
 80068f8:	4620      	mov	r0, r4
 80068fa:	bd70      	pop	{r4, r5, r6, pc}

080068fc <__sfp_lock_acquire>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__sfp_lock_acquire+0x8>)
 80068fe:	f000 b8b3 	b.w	8006a68 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	2000148d 	.word	0x2000148d

08006908 <__sfp_lock_release>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__sfp_lock_release+0x8>)
 800690a:	f000 b8ae 	b.w	8006a6a <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	2000148d 	.word	0x2000148d

08006914 <__sinit_lock_acquire>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__sinit_lock_acquire+0x8>)
 8006916:	f000 b8a7 	b.w	8006a68 <__retarget_lock_acquire_recursive>
 800691a:	bf00      	nop
 800691c:	2000148e 	.word	0x2000148e

08006920 <__sinit_lock_release>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__sinit_lock_release+0x8>)
 8006922:	f000 b8a2 	b.w	8006a6a <__retarget_lock_release_recursive>
 8006926:	bf00      	nop
 8006928:	2000148e 	.word	0x2000148e

0800692c <__sinit>:
 800692c:	b510      	push	{r4, lr}
 800692e:	4604      	mov	r4, r0
 8006930:	f7ff fff0 	bl	8006914 <__sinit_lock_acquire>
 8006934:	69a3      	ldr	r3, [r4, #24]
 8006936:	b11b      	cbz	r3, 8006940 <__sinit+0x14>
 8006938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800693c:	f7ff bff0 	b.w	8006920 <__sinit_lock_release>
 8006940:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006944:	6523      	str	r3, [r4, #80]	; 0x50
 8006946:	4b13      	ldr	r3, [pc, #76]	; (8006994 <__sinit+0x68>)
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <__sinit+0x6c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	62a2      	str	r2, [r4, #40]	; 0x28
 800694e:	42a3      	cmp	r3, r4
 8006950:	bf04      	itt	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	61a3      	streq	r3, [r4, #24]
 8006956:	4620      	mov	r0, r4
 8006958:	f000 f820 	bl	800699c <__sfp>
 800695c:	6060      	str	r0, [r4, #4]
 800695e:	4620      	mov	r0, r4
 8006960:	f000 f81c 	bl	800699c <__sfp>
 8006964:	60a0      	str	r0, [r4, #8]
 8006966:	4620      	mov	r0, r4
 8006968:	f000 f818 	bl	800699c <__sfp>
 800696c:	2200      	movs	r2, #0
 800696e:	60e0      	str	r0, [r4, #12]
 8006970:	2104      	movs	r1, #4
 8006972:	6860      	ldr	r0, [r4, #4]
 8006974:	f7ff ff82 	bl	800687c <std>
 8006978:	68a0      	ldr	r0, [r4, #8]
 800697a:	2201      	movs	r2, #1
 800697c:	2109      	movs	r1, #9
 800697e:	f7ff ff7d 	bl	800687c <std>
 8006982:	68e0      	ldr	r0, [r4, #12]
 8006984:	2202      	movs	r2, #2
 8006986:	2112      	movs	r1, #18
 8006988:	f7ff ff78 	bl	800687c <std>
 800698c:	2301      	movs	r3, #1
 800698e:	61a3      	str	r3, [r4, #24]
 8006990:	e7d2      	b.n	8006938 <__sinit+0xc>
 8006992:	bf00      	nop
 8006994:	08008158 	.word	0x08008158
 8006998:	080068c5 	.word	0x080068c5

0800699c <__sfp>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	4607      	mov	r7, r0
 80069a0:	f7ff ffac 	bl	80068fc <__sfp_lock_acquire>
 80069a4:	4b1e      	ldr	r3, [pc, #120]	; (8006a20 <__sfp+0x84>)
 80069a6:	681e      	ldr	r6, [r3, #0]
 80069a8:	69b3      	ldr	r3, [r6, #24]
 80069aa:	b913      	cbnz	r3, 80069b2 <__sfp+0x16>
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff ffbd 	bl	800692c <__sinit>
 80069b2:	3648      	adds	r6, #72	; 0x48
 80069b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	d503      	bpl.n	80069c4 <__sfp+0x28>
 80069bc:	6833      	ldr	r3, [r6, #0]
 80069be:	b30b      	cbz	r3, 8006a04 <__sfp+0x68>
 80069c0:	6836      	ldr	r6, [r6, #0]
 80069c2:	e7f7      	b.n	80069b4 <__sfp+0x18>
 80069c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069c8:	b9d5      	cbnz	r5, 8006a00 <__sfp+0x64>
 80069ca:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <__sfp+0x88>)
 80069cc:	60e3      	str	r3, [r4, #12]
 80069ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069d2:	6665      	str	r5, [r4, #100]	; 0x64
 80069d4:	f000 f847 	bl	8006a66 <__retarget_lock_init_recursive>
 80069d8:	f7ff ff96 	bl	8006908 <__sfp_lock_release>
 80069dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069e4:	6025      	str	r5, [r4, #0]
 80069e6:	61a5      	str	r5, [r4, #24]
 80069e8:	2208      	movs	r2, #8
 80069ea:	4629      	mov	r1, r5
 80069ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069f0:	f7ff feb6 	bl	8006760 <memset>
 80069f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069fc:	4620      	mov	r0, r4
 80069fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a00:	3468      	adds	r4, #104	; 0x68
 8006a02:	e7d9      	b.n	80069b8 <__sfp+0x1c>
 8006a04:	2104      	movs	r1, #4
 8006a06:	4638      	mov	r0, r7
 8006a08:	f7ff ff62 	bl	80068d0 <__sfmoreglue>
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	6030      	str	r0, [r6, #0]
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d1d5      	bne.n	80069c0 <__sfp+0x24>
 8006a14:	f7ff ff78 	bl	8006908 <__sfp_lock_release>
 8006a18:	230c      	movs	r3, #12
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	e7ee      	b.n	80069fc <__sfp+0x60>
 8006a1e:	bf00      	nop
 8006a20:	08008158 	.word	0x08008158
 8006a24:	ffff0001 	.word	0xffff0001

08006a28 <_fwalk_reent>:
 8006a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	4688      	mov	r8, r1
 8006a30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a34:	2700      	movs	r7, #0
 8006a36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a3a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a3e:	d505      	bpl.n	8006a4c <_fwalk_reent+0x24>
 8006a40:	6824      	ldr	r4, [r4, #0]
 8006a42:	2c00      	cmp	r4, #0
 8006a44:	d1f7      	bne.n	8006a36 <_fwalk_reent+0xe>
 8006a46:	4638      	mov	r0, r7
 8006a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a4c:	89ab      	ldrh	r3, [r5, #12]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d907      	bls.n	8006a62 <_fwalk_reent+0x3a>
 8006a52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a56:	3301      	adds	r3, #1
 8006a58:	d003      	beq.n	8006a62 <_fwalk_reent+0x3a>
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	47c0      	blx	r8
 8006a60:	4307      	orrs	r7, r0
 8006a62:	3568      	adds	r5, #104	; 0x68
 8006a64:	e7e9      	b.n	8006a3a <_fwalk_reent+0x12>

08006a66 <__retarget_lock_init_recursive>:
 8006a66:	4770      	bx	lr

08006a68 <__retarget_lock_acquire_recursive>:
 8006a68:	4770      	bx	lr

08006a6a <__retarget_lock_release_recursive>:
 8006a6a:	4770      	bx	lr

08006a6c <sbrk_aligned>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4e0e      	ldr	r6, [pc, #56]	; (8006aa8 <sbrk_aligned+0x3c>)
 8006a70:	460c      	mov	r4, r1
 8006a72:	6831      	ldr	r1, [r6, #0]
 8006a74:	4605      	mov	r5, r0
 8006a76:	b911      	cbnz	r1, 8006a7e <sbrk_aligned+0x12>
 8006a78:	f000 fcd6 	bl	8007428 <_sbrk_r>
 8006a7c:	6030      	str	r0, [r6, #0]
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fcd1 	bl	8007428 <_sbrk_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d00a      	beq.n	8006aa0 <sbrk_aligned+0x34>
 8006a8a:	1cc4      	adds	r4, r0, #3
 8006a8c:	f024 0403 	bic.w	r4, r4, #3
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d007      	beq.n	8006aa4 <sbrk_aligned+0x38>
 8006a94:	1a21      	subs	r1, r4, r0
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 fcc6 	bl	8007428 <_sbrk_r>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d101      	bne.n	8006aa4 <sbrk_aligned+0x38>
 8006aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	20001494 	.word	0x20001494

08006aac <_malloc_r>:
 8006aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab0:	1ccd      	adds	r5, r1, #3
 8006ab2:	f025 0503 	bic.w	r5, r5, #3
 8006ab6:	3508      	adds	r5, #8
 8006ab8:	2d0c      	cmp	r5, #12
 8006aba:	bf38      	it	cc
 8006abc:	250c      	movcc	r5, #12
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	db01      	blt.n	8006ac8 <_malloc_r+0x1c>
 8006ac4:	42a9      	cmp	r1, r5
 8006ac6:	d905      	bls.n	8006ad4 <_malloc_r+0x28>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	2600      	movs	r6, #0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad4:	4e2e      	ldr	r6, [pc, #184]	; (8006b90 <_malloc_r+0xe4>)
 8006ad6:	f000 ff31 	bl	800793c <__malloc_lock>
 8006ada:	6833      	ldr	r3, [r6, #0]
 8006adc:	461c      	mov	r4, r3
 8006ade:	bb34      	cbnz	r4, 8006b2e <_malloc_r+0x82>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	f7ff ffc2 	bl	8006a6c <sbrk_aligned>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	4604      	mov	r4, r0
 8006aec:	d14d      	bne.n	8006b8a <_malloc_r+0xde>
 8006aee:	6834      	ldr	r4, [r6, #0]
 8006af0:	4626      	mov	r6, r4
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	d140      	bne.n	8006b78 <_malloc_r+0xcc>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	4631      	mov	r1, r6
 8006afa:	4638      	mov	r0, r7
 8006afc:	eb04 0803 	add.w	r8, r4, r3
 8006b00:	f000 fc92 	bl	8007428 <_sbrk_r>
 8006b04:	4580      	cmp	r8, r0
 8006b06:	d13a      	bne.n	8006b7e <_malloc_r+0xd2>
 8006b08:	6821      	ldr	r1, [r4, #0]
 8006b0a:	3503      	adds	r5, #3
 8006b0c:	1a6d      	subs	r5, r5, r1
 8006b0e:	f025 0503 	bic.w	r5, r5, #3
 8006b12:	3508      	adds	r5, #8
 8006b14:	2d0c      	cmp	r5, #12
 8006b16:	bf38      	it	cc
 8006b18:	250c      	movcc	r5, #12
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f7ff ffa5 	bl	8006a6c <sbrk_aligned>
 8006b22:	3001      	adds	r0, #1
 8006b24:	d02b      	beq.n	8006b7e <_malloc_r+0xd2>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	442b      	add	r3, r5
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	e00e      	b.n	8006b4c <_malloc_r+0xa0>
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	1b52      	subs	r2, r2, r5
 8006b32:	d41e      	bmi.n	8006b72 <_malloc_r+0xc6>
 8006b34:	2a0b      	cmp	r2, #11
 8006b36:	d916      	bls.n	8006b66 <_malloc_r+0xba>
 8006b38:	1961      	adds	r1, r4, r5
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	6025      	str	r5, [r4, #0]
 8006b3e:	bf18      	it	ne
 8006b40:	6059      	strne	r1, [r3, #4]
 8006b42:	6863      	ldr	r3, [r4, #4]
 8006b44:	bf08      	it	eq
 8006b46:	6031      	streq	r1, [r6, #0]
 8006b48:	5162      	str	r2, [r4, r5]
 8006b4a:	604b      	str	r3, [r1, #4]
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f104 060b 	add.w	r6, r4, #11
 8006b52:	f000 fef9 	bl	8007948 <__malloc_unlock>
 8006b56:	f026 0607 	bic.w	r6, r6, #7
 8006b5a:	1d23      	adds	r3, r4, #4
 8006b5c:	1af2      	subs	r2, r6, r3
 8006b5e:	d0b6      	beq.n	8006ace <_malloc_r+0x22>
 8006b60:	1b9b      	subs	r3, r3, r6
 8006b62:	50a3      	str	r3, [r4, r2]
 8006b64:	e7b3      	b.n	8006ace <_malloc_r+0x22>
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	bf0c      	ite	eq
 8006b6c:	6032      	streq	r2, [r6, #0]
 8006b6e:	605a      	strne	r2, [r3, #4]
 8006b70:	e7ec      	b.n	8006b4c <_malloc_r+0xa0>
 8006b72:	4623      	mov	r3, r4
 8006b74:	6864      	ldr	r4, [r4, #4]
 8006b76:	e7b2      	b.n	8006ade <_malloc_r+0x32>
 8006b78:	4634      	mov	r4, r6
 8006b7a:	6876      	ldr	r6, [r6, #4]
 8006b7c:	e7b9      	b.n	8006af2 <_malloc_r+0x46>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	4638      	mov	r0, r7
 8006b84:	f000 fee0 	bl	8007948 <__malloc_unlock>
 8006b88:	e7a1      	b.n	8006ace <_malloc_r+0x22>
 8006b8a:	6025      	str	r5, [r4, #0]
 8006b8c:	e7de      	b.n	8006b4c <_malloc_r+0xa0>
 8006b8e:	bf00      	nop
 8006b90:	20001490 	.word	0x20001490

08006b94 <__ssputs_r>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	688e      	ldr	r6, [r1, #8]
 8006b9a:	429e      	cmp	r6, r3
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4690      	mov	r8, r2
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	d838      	bhi.n	8006c18 <__ssputs_r+0x84>
 8006ba6:	898a      	ldrh	r2, [r1, #12]
 8006ba8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bac:	d032      	beq.n	8006c14 <__ssputs_r+0x80>
 8006bae:	6825      	ldr	r5, [r4, #0]
 8006bb0:	6909      	ldr	r1, [r1, #16]
 8006bb2:	eba5 0901 	sub.w	r9, r5, r1
 8006bb6:	6965      	ldr	r5, [r4, #20]
 8006bb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	444b      	add	r3, r9
 8006bc4:	106d      	asrs	r5, r5, #1
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	bf38      	it	cc
 8006bca:	461d      	movcc	r5, r3
 8006bcc:	0553      	lsls	r3, r2, #21
 8006bce:	d531      	bpl.n	8006c34 <__ssputs_r+0xa0>
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7ff ff6b 	bl	8006aac <_malloc_r>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	b950      	cbnz	r0, 8006bf0 <__ssputs_r+0x5c>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	f8ca 3000 	str.w	r3, [sl]
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf0:	6921      	ldr	r1, [r4, #16]
 8006bf2:	464a      	mov	r2, r9
 8006bf4:	f7ff fda6 	bl	8006744 <memcpy>
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	6126      	str	r6, [r4, #16]
 8006c06:	6165      	str	r5, [r4, #20]
 8006c08:	444e      	add	r6, r9
 8006c0a:	eba5 0509 	sub.w	r5, r5, r9
 8006c0e:	6026      	str	r6, [r4, #0]
 8006c10:	60a5      	str	r5, [r4, #8]
 8006c12:	463e      	mov	r6, r7
 8006c14:	42be      	cmp	r6, r7
 8006c16:	d900      	bls.n	8006c1a <__ssputs_r+0x86>
 8006c18:	463e      	mov	r6, r7
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	4641      	mov	r1, r8
 8006c20:	f000 fe72 	bl	8007908 <memmove>
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	1b9b      	subs	r3, r3, r6
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	4433      	add	r3, r6
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	2000      	movs	r0, #0
 8006c32:	e7db      	b.n	8006bec <__ssputs_r+0x58>
 8006c34:	462a      	mov	r2, r5
 8006c36:	f000 fed9 	bl	80079ec <_realloc_r>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d1e1      	bne.n	8006c04 <__ssputs_r+0x70>
 8006c40:	6921      	ldr	r1, [r4, #16]
 8006c42:	4650      	mov	r0, sl
 8006c44:	f000 fe86 	bl	8007954 <_free_r>
 8006c48:	e7c7      	b.n	8006bda <__ssputs_r+0x46>
	...

08006c4c <_svfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	4698      	mov	r8, r3
 8006c52:	898b      	ldrh	r3, [r1, #12]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	b09d      	sub	sp, #116	; 0x74
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	d50e      	bpl.n	8006c7e <_svfiprintf_r+0x32>
 8006c60:	690b      	ldr	r3, [r1, #16]
 8006c62:	b963      	cbnz	r3, 8006c7e <_svfiprintf_r+0x32>
 8006c64:	2140      	movs	r1, #64	; 0x40
 8006c66:	f7ff ff21 	bl	8006aac <_malloc_r>
 8006c6a:	6028      	str	r0, [r5, #0]
 8006c6c:	6128      	str	r0, [r5, #16]
 8006c6e:	b920      	cbnz	r0, 8006c7a <_svfiprintf_r+0x2e>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	e0d1      	b.n	8006e1e <_svfiprintf_r+0x1d2>
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	616b      	str	r3, [r5, #20]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9309      	str	r3, [sp, #36]	; 0x24
 8006c82:	2320      	movs	r3, #32
 8006c84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c8c:	2330      	movs	r3, #48	; 0x30
 8006c8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e38 <_svfiprintf_r+0x1ec>
 8006c92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c96:	f04f 0901 	mov.w	r9, #1
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	469a      	mov	sl, r3
 8006c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca2:	b10a      	cbz	r2, 8006ca8 <_svfiprintf_r+0x5c>
 8006ca4:	2a25      	cmp	r2, #37	; 0x25
 8006ca6:	d1f9      	bne.n	8006c9c <_svfiprintf_r+0x50>
 8006ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cac:	d00b      	beq.n	8006cc6 <_svfiprintf_r+0x7a>
 8006cae:	465b      	mov	r3, fp
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff ff6d 	bl	8006b94 <__ssputs_r>
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f000 80aa 	beq.w	8006e14 <_svfiprintf_r+0x1c8>
 8006cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc2:	445a      	add	r2, fp
 8006cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80a2 	beq.w	8006e14 <_svfiprintf_r+0x1c8>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cda:	f10a 0a01 	add.w	sl, sl, #1
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce8:	4654      	mov	r4, sl
 8006cea:	2205      	movs	r2, #5
 8006cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf0:	4851      	ldr	r0, [pc, #324]	; (8006e38 <_svfiprintf_r+0x1ec>)
 8006cf2:	f7f9 fa45 	bl	8000180 <memchr>
 8006cf6:	9a04      	ldr	r2, [sp, #16]
 8006cf8:	b9d8      	cbnz	r0, 8006d32 <_svfiprintf_r+0xe6>
 8006cfa:	06d0      	lsls	r0, r2, #27
 8006cfc:	bf44      	itt	mi
 8006cfe:	2320      	movmi	r3, #32
 8006d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d04:	0711      	lsls	r1, r2, #28
 8006d06:	bf44      	itt	mi
 8006d08:	232b      	movmi	r3, #43	; 0x2b
 8006d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d12:	2b2a      	cmp	r3, #42	; 0x2a
 8006d14:	d015      	beq.n	8006d42 <_svfiprintf_r+0xf6>
 8006d16:	9a07      	ldr	r2, [sp, #28]
 8006d18:	4654      	mov	r4, sl
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f04f 0c0a 	mov.w	ip, #10
 8006d20:	4621      	mov	r1, r4
 8006d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d26:	3b30      	subs	r3, #48	; 0x30
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d94e      	bls.n	8006dca <_svfiprintf_r+0x17e>
 8006d2c:	b1b0      	cbz	r0, 8006d5c <_svfiprintf_r+0x110>
 8006d2e:	9207      	str	r2, [sp, #28]
 8006d30:	e014      	b.n	8006d5c <_svfiprintf_r+0x110>
 8006d32:	eba0 0308 	sub.w	r3, r0, r8
 8006d36:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	46a2      	mov	sl, r4
 8006d40:	e7d2      	b.n	8006ce8 <_svfiprintf_r+0x9c>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	9103      	str	r1, [sp, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfbb      	ittet	lt
 8006d4e:	425b      	neglt	r3, r3
 8006d50:	f042 0202 	orrlt.w	r2, r2, #2
 8006d54:	9307      	strge	r3, [sp, #28]
 8006d56:	9307      	strlt	r3, [sp, #28]
 8006d58:	bfb8      	it	lt
 8006d5a:	9204      	strlt	r2, [sp, #16]
 8006d5c:	7823      	ldrb	r3, [r4, #0]
 8006d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d60:	d10c      	bne.n	8006d7c <_svfiprintf_r+0x130>
 8006d62:	7863      	ldrb	r3, [r4, #1]
 8006d64:	2b2a      	cmp	r3, #42	; 0x2a
 8006d66:	d135      	bne.n	8006dd4 <_svfiprintf_r+0x188>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	1d1a      	adds	r2, r3, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	9203      	str	r2, [sp, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bfb8      	it	lt
 8006d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d78:	3402      	adds	r4, #2
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e48 <_svfiprintf_r+0x1fc>
 8006d80:	7821      	ldrb	r1, [r4, #0]
 8006d82:	2203      	movs	r2, #3
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7f9 f9fb 	bl	8000180 <memchr>
 8006d8a:	b140      	cbz	r0, 8006d9e <_svfiprintf_r+0x152>
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	eba0 000a 	sub.w	r0, r0, sl
 8006d92:	fa03 f000 	lsl.w	r0, r3, r0
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	4303      	orrs	r3, r0
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da2:	4826      	ldr	r0, [pc, #152]	; (8006e3c <_svfiprintf_r+0x1f0>)
 8006da4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da8:	2206      	movs	r2, #6
 8006daa:	f7f9 f9e9 	bl	8000180 <memchr>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d038      	beq.n	8006e24 <_svfiprintf_r+0x1d8>
 8006db2:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <_svfiprintf_r+0x1f4>)
 8006db4:	bb1b      	cbnz	r3, 8006dfe <_svfiprintf_r+0x1b2>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	3307      	adds	r3, #7
 8006dba:	f023 0307 	bic.w	r3, r3, #7
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	9303      	str	r3, [sp, #12]
 8006dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc4:	4433      	add	r3, r6
 8006dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc8:	e767      	b.n	8006c9a <_svfiprintf_r+0x4e>
 8006dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dce:	460c      	mov	r4, r1
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	e7a5      	b.n	8006d20 <_svfiprintf_r+0xd4>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	3401      	adds	r4, #1
 8006dd8:	9305      	str	r3, [sp, #20]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	f04f 0c0a 	mov.w	ip, #10
 8006de0:	4620      	mov	r0, r4
 8006de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de6:	3a30      	subs	r2, #48	; 0x30
 8006de8:	2a09      	cmp	r2, #9
 8006dea:	d903      	bls.n	8006df4 <_svfiprintf_r+0x1a8>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0c5      	beq.n	8006d7c <_svfiprintf_r+0x130>
 8006df0:	9105      	str	r1, [sp, #20]
 8006df2:	e7c3      	b.n	8006d7c <_svfiprintf_r+0x130>
 8006df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df8:	4604      	mov	r4, r0
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e7f0      	b.n	8006de0 <_svfiprintf_r+0x194>
 8006dfe:	ab03      	add	r3, sp, #12
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	462a      	mov	r2, r5
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <_svfiprintf_r+0x1f8>)
 8006e06:	a904      	add	r1, sp, #16
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f3af 8000 	nop.w
 8006e0e:	1c42      	adds	r2, r0, #1
 8006e10:	4606      	mov	r6, r0
 8006e12:	d1d6      	bne.n	8006dc2 <_svfiprintf_r+0x176>
 8006e14:	89ab      	ldrh	r3, [r5, #12]
 8006e16:	065b      	lsls	r3, r3, #25
 8006e18:	f53f af2c 	bmi.w	8006c74 <_svfiprintf_r+0x28>
 8006e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1e:	b01d      	add	sp, #116	; 0x74
 8006e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e24:	ab03      	add	r3, sp, #12
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <_svfiprintf_r+0x1f8>)
 8006e2c:	a904      	add	r1, sp, #16
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f000 f9d4 	bl	80071dc <_printf_i>
 8006e34:	e7eb      	b.n	8006e0e <_svfiprintf_r+0x1c2>
 8006e36:	bf00      	nop
 8006e38:	080081bc 	.word	0x080081bc
 8006e3c:	080081c6 	.word	0x080081c6
 8006e40:	00000000 	.word	0x00000000
 8006e44:	08006b95 	.word	0x08006b95
 8006e48:	080081c2 	.word	0x080081c2

08006e4c <__sfputc_r>:
 8006e4c:	6893      	ldr	r3, [r2, #8]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	b410      	push	{r4}
 8006e54:	6093      	str	r3, [r2, #8]
 8006e56:	da08      	bge.n	8006e6a <__sfputc_r+0x1e>
 8006e58:	6994      	ldr	r4, [r2, #24]
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	db01      	blt.n	8006e62 <__sfputc_r+0x16>
 8006e5e:	290a      	cmp	r1, #10
 8006e60:	d103      	bne.n	8006e6a <__sfputc_r+0x1e>
 8006e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e66:	f000 bb33 	b.w	80074d0 <__swbuf_r>
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	1c58      	adds	r0, r3, #1
 8006e6e:	6010      	str	r0, [r2, #0]
 8006e70:	7019      	strb	r1, [r3, #0]
 8006e72:	4608      	mov	r0, r1
 8006e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <__sfputs_r>:
 8006e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	460f      	mov	r7, r1
 8006e80:	4614      	mov	r4, r2
 8006e82:	18d5      	adds	r5, r2, r3
 8006e84:	42ac      	cmp	r4, r5
 8006e86:	d101      	bne.n	8006e8c <__sfputs_r+0x12>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e007      	b.n	8006e9c <__sfputs_r+0x22>
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	463a      	mov	r2, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff ffda 	bl	8006e4c <__sfputc_r>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d1f3      	bne.n	8006e84 <__sfputs_r+0xa>
 8006e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ea0 <_vfiprintf_r>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	460d      	mov	r5, r1
 8006ea6:	b09d      	sub	sp, #116	; 0x74
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	4698      	mov	r8, r3
 8006eac:	4606      	mov	r6, r0
 8006eae:	b118      	cbz	r0, 8006eb8 <_vfiprintf_r+0x18>
 8006eb0:	6983      	ldr	r3, [r0, #24]
 8006eb2:	b90b      	cbnz	r3, 8006eb8 <_vfiprintf_r+0x18>
 8006eb4:	f7ff fd3a 	bl	800692c <__sinit>
 8006eb8:	4b89      	ldr	r3, [pc, #548]	; (80070e0 <_vfiprintf_r+0x240>)
 8006eba:	429d      	cmp	r5, r3
 8006ebc:	d11b      	bne.n	8006ef6 <_vfiprintf_r+0x56>
 8006ebe:	6875      	ldr	r5, [r6, #4]
 8006ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ec2:	07d9      	lsls	r1, r3, #31
 8006ec4:	d405      	bmi.n	8006ed2 <_vfiprintf_r+0x32>
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	059a      	lsls	r2, r3, #22
 8006eca:	d402      	bmi.n	8006ed2 <_vfiprintf_r+0x32>
 8006ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ece:	f7ff fdcb 	bl	8006a68 <__retarget_lock_acquire_recursive>
 8006ed2:	89ab      	ldrh	r3, [r5, #12]
 8006ed4:	071b      	lsls	r3, r3, #28
 8006ed6:	d501      	bpl.n	8006edc <_vfiprintf_r+0x3c>
 8006ed8:	692b      	ldr	r3, [r5, #16]
 8006eda:	b9eb      	cbnz	r3, 8006f18 <_vfiprintf_r+0x78>
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 fb5a 	bl	8007598 <__swsetup_r>
 8006ee4:	b1c0      	cbz	r0, 8006f18 <_vfiprintf_r+0x78>
 8006ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee8:	07dc      	lsls	r4, r3, #31
 8006eea:	d50e      	bpl.n	8006f0a <_vfiprintf_r+0x6a>
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	b01d      	add	sp, #116	; 0x74
 8006ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef6:	4b7b      	ldr	r3, [pc, #492]	; (80070e4 <_vfiprintf_r+0x244>)
 8006ef8:	429d      	cmp	r5, r3
 8006efa:	d101      	bne.n	8006f00 <_vfiprintf_r+0x60>
 8006efc:	68b5      	ldr	r5, [r6, #8]
 8006efe:	e7df      	b.n	8006ec0 <_vfiprintf_r+0x20>
 8006f00:	4b79      	ldr	r3, [pc, #484]	; (80070e8 <_vfiprintf_r+0x248>)
 8006f02:	429d      	cmp	r5, r3
 8006f04:	bf08      	it	eq
 8006f06:	68f5      	ldreq	r5, [r6, #12]
 8006f08:	e7da      	b.n	8006ec0 <_vfiprintf_r+0x20>
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	0598      	lsls	r0, r3, #22
 8006f0e:	d4ed      	bmi.n	8006eec <_vfiprintf_r+0x4c>
 8006f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f12:	f7ff fdaa 	bl	8006a6a <__retarget_lock_release_recursive>
 8006f16:	e7e9      	b.n	8006eec <_vfiprintf_r+0x4c>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f26:	2330      	movs	r3, #48	; 0x30
 8006f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070ec <_vfiprintf_r+0x24c>
 8006f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f30:	f04f 0901 	mov.w	r9, #1
 8006f34:	4623      	mov	r3, r4
 8006f36:	469a      	mov	sl, r3
 8006f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f3c:	b10a      	cbz	r2, 8006f42 <_vfiprintf_r+0xa2>
 8006f3e:	2a25      	cmp	r2, #37	; 0x25
 8006f40:	d1f9      	bne.n	8006f36 <_vfiprintf_r+0x96>
 8006f42:	ebba 0b04 	subs.w	fp, sl, r4
 8006f46:	d00b      	beq.n	8006f60 <_vfiprintf_r+0xc0>
 8006f48:	465b      	mov	r3, fp
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f7ff ff93 	bl	8006e7a <__sfputs_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	f000 80aa 	beq.w	80070ae <_vfiprintf_r+0x20e>
 8006f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f5c:	445a      	add	r2, fp
 8006f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f60:	f89a 3000 	ldrb.w	r3, [sl]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80a2 	beq.w	80070ae <_vfiprintf_r+0x20e>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f74:	f10a 0a01 	add.w	sl, sl, #1
 8006f78:	9304      	str	r3, [sp, #16]
 8006f7a:	9307      	str	r3, [sp, #28]
 8006f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f80:	931a      	str	r3, [sp, #104]	; 0x68
 8006f82:	4654      	mov	r4, sl
 8006f84:	2205      	movs	r2, #5
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	4858      	ldr	r0, [pc, #352]	; (80070ec <_vfiprintf_r+0x24c>)
 8006f8c:	f7f9 f8f8 	bl	8000180 <memchr>
 8006f90:	9a04      	ldr	r2, [sp, #16]
 8006f92:	b9d8      	cbnz	r0, 8006fcc <_vfiprintf_r+0x12c>
 8006f94:	06d1      	lsls	r1, r2, #27
 8006f96:	bf44      	itt	mi
 8006f98:	2320      	movmi	r3, #32
 8006f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f9e:	0713      	lsls	r3, r2, #28
 8006fa0:	bf44      	itt	mi
 8006fa2:	232b      	movmi	r3, #43	; 0x2b
 8006fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fac:	2b2a      	cmp	r3, #42	; 0x2a
 8006fae:	d015      	beq.n	8006fdc <_vfiprintf_r+0x13c>
 8006fb0:	9a07      	ldr	r2, [sp, #28]
 8006fb2:	4654      	mov	r4, sl
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f04f 0c0a 	mov.w	ip, #10
 8006fba:	4621      	mov	r1, r4
 8006fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc0:	3b30      	subs	r3, #48	; 0x30
 8006fc2:	2b09      	cmp	r3, #9
 8006fc4:	d94e      	bls.n	8007064 <_vfiprintf_r+0x1c4>
 8006fc6:	b1b0      	cbz	r0, 8006ff6 <_vfiprintf_r+0x156>
 8006fc8:	9207      	str	r2, [sp, #28]
 8006fca:	e014      	b.n	8006ff6 <_vfiprintf_r+0x156>
 8006fcc:	eba0 0308 	sub.w	r3, r0, r8
 8006fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	9304      	str	r3, [sp, #16]
 8006fd8:	46a2      	mov	sl, r4
 8006fda:	e7d2      	b.n	8006f82 <_vfiprintf_r+0xe2>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	1d19      	adds	r1, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	9103      	str	r1, [sp, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfbb      	ittet	lt
 8006fe8:	425b      	neglt	r3, r3
 8006fea:	f042 0202 	orrlt.w	r2, r2, #2
 8006fee:	9307      	strge	r3, [sp, #28]
 8006ff0:	9307      	strlt	r3, [sp, #28]
 8006ff2:	bfb8      	it	lt
 8006ff4:	9204      	strlt	r2, [sp, #16]
 8006ff6:	7823      	ldrb	r3, [r4, #0]
 8006ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8006ffa:	d10c      	bne.n	8007016 <_vfiprintf_r+0x176>
 8006ffc:	7863      	ldrb	r3, [r4, #1]
 8006ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8007000:	d135      	bne.n	800706e <_vfiprintf_r+0x1ce>
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	1d1a      	adds	r2, r3, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	9203      	str	r2, [sp, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	bfb8      	it	lt
 800700e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007012:	3402      	adds	r4, #2
 8007014:	9305      	str	r3, [sp, #20]
 8007016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80070fc <_vfiprintf_r+0x25c>
 800701a:	7821      	ldrb	r1, [r4, #0]
 800701c:	2203      	movs	r2, #3
 800701e:	4650      	mov	r0, sl
 8007020:	f7f9 f8ae 	bl	8000180 <memchr>
 8007024:	b140      	cbz	r0, 8007038 <_vfiprintf_r+0x198>
 8007026:	2340      	movs	r3, #64	; 0x40
 8007028:	eba0 000a 	sub.w	r0, r0, sl
 800702c:	fa03 f000 	lsl.w	r0, r3, r0
 8007030:	9b04      	ldr	r3, [sp, #16]
 8007032:	4303      	orrs	r3, r0
 8007034:	3401      	adds	r4, #1
 8007036:	9304      	str	r3, [sp, #16]
 8007038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703c:	482c      	ldr	r0, [pc, #176]	; (80070f0 <_vfiprintf_r+0x250>)
 800703e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007042:	2206      	movs	r2, #6
 8007044:	f7f9 f89c 	bl	8000180 <memchr>
 8007048:	2800      	cmp	r0, #0
 800704a:	d03f      	beq.n	80070cc <_vfiprintf_r+0x22c>
 800704c:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <_vfiprintf_r+0x254>)
 800704e:	bb1b      	cbnz	r3, 8007098 <_vfiprintf_r+0x1f8>
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	3307      	adds	r3, #7
 8007054:	f023 0307 	bic.w	r3, r3, #7
 8007058:	3308      	adds	r3, #8
 800705a:	9303      	str	r3, [sp, #12]
 800705c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705e:	443b      	add	r3, r7
 8007060:	9309      	str	r3, [sp, #36]	; 0x24
 8007062:	e767      	b.n	8006f34 <_vfiprintf_r+0x94>
 8007064:	fb0c 3202 	mla	r2, ip, r2, r3
 8007068:	460c      	mov	r4, r1
 800706a:	2001      	movs	r0, #1
 800706c:	e7a5      	b.n	8006fba <_vfiprintf_r+0x11a>
 800706e:	2300      	movs	r3, #0
 8007070:	3401      	adds	r4, #1
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	4619      	mov	r1, r3
 8007076:	f04f 0c0a 	mov.w	ip, #10
 800707a:	4620      	mov	r0, r4
 800707c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007080:	3a30      	subs	r2, #48	; 0x30
 8007082:	2a09      	cmp	r2, #9
 8007084:	d903      	bls.n	800708e <_vfiprintf_r+0x1ee>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0c5      	beq.n	8007016 <_vfiprintf_r+0x176>
 800708a:	9105      	str	r1, [sp, #20]
 800708c:	e7c3      	b.n	8007016 <_vfiprintf_r+0x176>
 800708e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007092:	4604      	mov	r4, r0
 8007094:	2301      	movs	r3, #1
 8007096:	e7f0      	b.n	800707a <_vfiprintf_r+0x1da>
 8007098:	ab03      	add	r3, sp, #12
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	462a      	mov	r2, r5
 800709e:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <_vfiprintf_r+0x258>)
 80070a0:	a904      	add	r1, sp, #16
 80070a2:	4630      	mov	r0, r6
 80070a4:	f3af 8000 	nop.w
 80070a8:	4607      	mov	r7, r0
 80070aa:	1c78      	adds	r0, r7, #1
 80070ac:	d1d6      	bne.n	800705c <_vfiprintf_r+0x1bc>
 80070ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b0:	07d9      	lsls	r1, r3, #31
 80070b2:	d405      	bmi.n	80070c0 <_vfiprintf_r+0x220>
 80070b4:	89ab      	ldrh	r3, [r5, #12]
 80070b6:	059a      	lsls	r2, r3, #22
 80070b8:	d402      	bmi.n	80070c0 <_vfiprintf_r+0x220>
 80070ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070bc:	f7ff fcd5 	bl	8006a6a <__retarget_lock_release_recursive>
 80070c0:	89ab      	ldrh	r3, [r5, #12]
 80070c2:	065b      	lsls	r3, r3, #25
 80070c4:	f53f af12 	bmi.w	8006eec <_vfiprintf_r+0x4c>
 80070c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ca:	e711      	b.n	8006ef0 <_vfiprintf_r+0x50>
 80070cc:	ab03      	add	r3, sp, #12
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <_vfiprintf_r+0x258>)
 80070d4:	a904      	add	r1, sp, #16
 80070d6:	4630      	mov	r0, r6
 80070d8:	f000 f880 	bl	80071dc <_printf_i>
 80070dc:	e7e4      	b.n	80070a8 <_vfiprintf_r+0x208>
 80070de:	bf00      	nop
 80070e0:	0800817c 	.word	0x0800817c
 80070e4:	0800819c 	.word	0x0800819c
 80070e8:	0800815c 	.word	0x0800815c
 80070ec:	080081bc 	.word	0x080081bc
 80070f0:	080081c6 	.word	0x080081c6
 80070f4:	00000000 	.word	0x00000000
 80070f8:	08006e7b 	.word	0x08006e7b
 80070fc:	080081c2 	.word	0x080081c2

08007100 <_printf_common>:
 8007100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	4616      	mov	r6, r2
 8007106:	4699      	mov	r9, r3
 8007108:	688a      	ldr	r2, [r1, #8]
 800710a:	690b      	ldr	r3, [r1, #16]
 800710c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007110:	4293      	cmp	r3, r2
 8007112:	bfb8      	it	lt
 8007114:	4613      	movlt	r3, r2
 8007116:	6033      	str	r3, [r6, #0]
 8007118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800711c:	4607      	mov	r7, r0
 800711e:	460c      	mov	r4, r1
 8007120:	b10a      	cbz	r2, 8007126 <_printf_common+0x26>
 8007122:	3301      	adds	r3, #1
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	0699      	lsls	r1, r3, #26
 800712a:	bf42      	ittt	mi
 800712c:	6833      	ldrmi	r3, [r6, #0]
 800712e:	3302      	addmi	r3, #2
 8007130:	6033      	strmi	r3, [r6, #0]
 8007132:	6825      	ldr	r5, [r4, #0]
 8007134:	f015 0506 	ands.w	r5, r5, #6
 8007138:	d106      	bne.n	8007148 <_printf_common+0x48>
 800713a:	f104 0a19 	add.w	sl, r4, #25
 800713e:	68e3      	ldr	r3, [r4, #12]
 8007140:	6832      	ldr	r2, [r6, #0]
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	42ab      	cmp	r3, r5
 8007146:	dc26      	bgt.n	8007196 <_printf_common+0x96>
 8007148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800714c:	1e13      	subs	r3, r2, #0
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	bf18      	it	ne
 8007152:	2301      	movne	r3, #1
 8007154:	0692      	lsls	r2, r2, #26
 8007156:	d42b      	bmi.n	80071b0 <_printf_common+0xb0>
 8007158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800715c:	4649      	mov	r1, r9
 800715e:	4638      	mov	r0, r7
 8007160:	47c0      	blx	r8
 8007162:	3001      	adds	r0, #1
 8007164:	d01e      	beq.n	80071a4 <_printf_common+0xa4>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	68e5      	ldr	r5, [r4, #12]
 800716a:	6832      	ldr	r2, [r6, #0]
 800716c:	f003 0306 	and.w	r3, r3, #6
 8007170:	2b04      	cmp	r3, #4
 8007172:	bf08      	it	eq
 8007174:	1aad      	subeq	r5, r5, r2
 8007176:	68a3      	ldr	r3, [r4, #8]
 8007178:	6922      	ldr	r2, [r4, #16]
 800717a:	bf0c      	ite	eq
 800717c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007180:	2500      	movne	r5, #0
 8007182:	4293      	cmp	r3, r2
 8007184:	bfc4      	itt	gt
 8007186:	1a9b      	subgt	r3, r3, r2
 8007188:	18ed      	addgt	r5, r5, r3
 800718a:	2600      	movs	r6, #0
 800718c:	341a      	adds	r4, #26
 800718e:	42b5      	cmp	r5, r6
 8007190:	d11a      	bne.n	80071c8 <_printf_common+0xc8>
 8007192:	2000      	movs	r0, #0
 8007194:	e008      	b.n	80071a8 <_printf_common+0xa8>
 8007196:	2301      	movs	r3, #1
 8007198:	4652      	mov	r2, sl
 800719a:	4649      	mov	r1, r9
 800719c:	4638      	mov	r0, r7
 800719e:	47c0      	blx	r8
 80071a0:	3001      	adds	r0, #1
 80071a2:	d103      	bne.n	80071ac <_printf_common+0xac>
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295
 80071a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ac:	3501      	adds	r5, #1
 80071ae:	e7c6      	b.n	800713e <_printf_common+0x3e>
 80071b0:	18e1      	adds	r1, r4, r3
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	2030      	movs	r0, #48	; 0x30
 80071b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ba:	4422      	add	r2, r4
 80071bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c4:	3302      	adds	r3, #2
 80071c6:	e7c7      	b.n	8007158 <_printf_common+0x58>
 80071c8:	2301      	movs	r3, #1
 80071ca:	4622      	mov	r2, r4
 80071cc:	4649      	mov	r1, r9
 80071ce:	4638      	mov	r0, r7
 80071d0:	47c0      	blx	r8
 80071d2:	3001      	adds	r0, #1
 80071d4:	d0e6      	beq.n	80071a4 <_printf_common+0xa4>
 80071d6:	3601      	adds	r6, #1
 80071d8:	e7d9      	b.n	800718e <_printf_common+0x8e>
	...

080071dc <_printf_i>:
 80071dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	7e0f      	ldrb	r7, [r1, #24]
 80071e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e4:	2f78      	cmp	r7, #120	; 0x78
 80071e6:	4691      	mov	r9, r2
 80071e8:	4680      	mov	r8, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	469a      	mov	sl, r3
 80071ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071f2:	d807      	bhi.n	8007204 <_printf_i+0x28>
 80071f4:	2f62      	cmp	r7, #98	; 0x62
 80071f6:	d80a      	bhi.n	800720e <_printf_i+0x32>
 80071f8:	2f00      	cmp	r7, #0
 80071fa:	f000 80d8 	beq.w	80073ae <_printf_i+0x1d2>
 80071fe:	2f58      	cmp	r7, #88	; 0x58
 8007200:	f000 80a3 	beq.w	800734a <_printf_i+0x16e>
 8007204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800720c:	e03a      	b.n	8007284 <_printf_i+0xa8>
 800720e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007212:	2b15      	cmp	r3, #21
 8007214:	d8f6      	bhi.n	8007204 <_printf_i+0x28>
 8007216:	a101      	add	r1, pc, #4	; (adr r1, 800721c <_printf_i+0x40>)
 8007218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800721c:	08007275 	.word	0x08007275
 8007220:	08007289 	.word	0x08007289
 8007224:	08007205 	.word	0x08007205
 8007228:	08007205 	.word	0x08007205
 800722c:	08007205 	.word	0x08007205
 8007230:	08007205 	.word	0x08007205
 8007234:	08007289 	.word	0x08007289
 8007238:	08007205 	.word	0x08007205
 800723c:	08007205 	.word	0x08007205
 8007240:	08007205 	.word	0x08007205
 8007244:	08007205 	.word	0x08007205
 8007248:	08007395 	.word	0x08007395
 800724c:	080072b9 	.word	0x080072b9
 8007250:	08007377 	.word	0x08007377
 8007254:	08007205 	.word	0x08007205
 8007258:	08007205 	.word	0x08007205
 800725c:	080073b7 	.word	0x080073b7
 8007260:	08007205 	.word	0x08007205
 8007264:	080072b9 	.word	0x080072b9
 8007268:	08007205 	.word	0x08007205
 800726c:	08007205 	.word	0x08007205
 8007270:	0800737f 	.word	0x0800737f
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	1d1a      	adds	r2, r3, #4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	602a      	str	r2, [r5, #0]
 800727c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007284:	2301      	movs	r3, #1
 8007286:	e0a3      	b.n	80073d0 <_printf_i+0x1f4>
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	6829      	ldr	r1, [r5, #0]
 800728c:	0606      	lsls	r6, r0, #24
 800728e:	f101 0304 	add.w	r3, r1, #4
 8007292:	d50a      	bpl.n	80072aa <_printf_i+0xce>
 8007294:	680e      	ldr	r6, [r1, #0]
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	2e00      	cmp	r6, #0
 800729a:	da03      	bge.n	80072a4 <_printf_i+0xc8>
 800729c:	232d      	movs	r3, #45	; 0x2d
 800729e:	4276      	negs	r6, r6
 80072a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a4:	485e      	ldr	r0, [pc, #376]	; (8007420 <_printf_i+0x244>)
 80072a6:	230a      	movs	r3, #10
 80072a8:	e019      	b.n	80072de <_printf_i+0x102>
 80072aa:	680e      	ldr	r6, [r1, #0]
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072b2:	bf18      	it	ne
 80072b4:	b236      	sxthne	r6, r6
 80072b6:	e7ef      	b.n	8007298 <_printf_i+0xbc>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	1d19      	adds	r1, r3, #4
 80072be:	6029      	str	r1, [r5, #0]
 80072c0:	0601      	lsls	r1, r0, #24
 80072c2:	d501      	bpl.n	80072c8 <_printf_i+0xec>
 80072c4:	681e      	ldr	r6, [r3, #0]
 80072c6:	e002      	b.n	80072ce <_printf_i+0xf2>
 80072c8:	0646      	lsls	r6, r0, #25
 80072ca:	d5fb      	bpl.n	80072c4 <_printf_i+0xe8>
 80072cc:	881e      	ldrh	r6, [r3, #0]
 80072ce:	4854      	ldr	r0, [pc, #336]	; (8007420 <_printf_i+0x244>)
 80072d0:	2f6f      	cmp	r7, #111	; 0x6f
 80072d2:	bf0c      	ite	eq
 80072d4:	2308      	moveq	r3, #8
 80072d6:	230a      	movne	r3, #10
 80072d8:	2100      	movs	r1, #0
 80072da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072de:	6865      	ldr	r5, [r4, #4]
 80072e0:	60a5      	str	r5, [r4, #8]
 80072e2:	2d00      	cmp	r5, #0
 80072e4:	bfa2      	ittt	ge
 80072e6:	6821      	ldrge	r1, [r4, #0]
 80072e8:	f021 0104 	bicge.w	r1, r1, #4
 80072ec:	6021      	strge	r1, [r4, #0]
 80072ee:	b90e      	cbnz	r6, 80072f4 <_printf_i+0x118>
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	d04d      	beq.n	8007390 <_printf_i+0x1b4>
 80072f4:	4615      	mov	r5, r2
 80072f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072fa:	fb03 6711 	mls	r7, r3, r1, r6
 80072fe:	5dc7      	ldrb	r7, [r0, r7]
 8007300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007304:	4637      	mov	r7, r6
 8007306:	42bb      	cmp	r3, r7
 8007308:	460e      	mov	r6, r1
 800730a:	d9f4      	bls.n	80072f6 <_printf_i+0x11a>
 800730c:	2b08      	cmp	r3, #8
 800730e:	d10b      	bne.n	8007328 <_printf_i+0x14c>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	07de      	lsls	r6, r3, #31
 8007314:	d508      	bpl.n	8007328 <_printf_i+0x14c>
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	6861      	ldr	r1, [r4, #4]
 800731a:	4299      	cmp	r1, r3
 800731c:	bfde      	ittt	le
 800731e:	2330      	movle	r3, #48	; 0x30
 8007320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007324:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007328:	1b52      	subs	r2, r2, r5
 800732a:	6122      	str	r2, [r4, #16]
 800732c:	f8cd a000 	str.w	sl, [sp]
 8007330:	464b      	mov	r3, r9
 8007332:	aa03      	add	r2, sp, #12
 8007334:	4621      	mov	r1, r4
 8007336:	4640      	mov	r0, r8
 8007338:	f7ff fee2 	bl	8007100 <_printf_common>
 800733c:	3001      	adds	r0, #1
 800733e:	d14c      	bne.n	80073da <_printf_i+0x1fe>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	b004      	add	sp, #16
 8007346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734a:	4835      	ldr	r0, [pc, #212]	; (8007420 <_printf_i+0x244>)
 800734c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007350:	6829      	ldr	r1, [r5, #0]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	f851 6b04 	ldr.w	r6, [r1], #4
 8007358:	6029      	str	r1, [r5, #0]
 800735a:	061d      	lsls	r5, r3, #24
 800735c:	d514      	bpl.n	8007388 <_printf_i+0x1ac>
 800735e:	07df      	lsls	r7, r3, #31
 8007360:	bf44      	itt	mi
 8007362:	f043 0320 	orrmi.w	r3, r3, #32
 8007366:	6023      	strmi	r3, [r4, #0]
 8007368:	b91e      	cbnz	r6, 8007372 <_printf_i+0x196>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	f023 0320 	bic.w	r3, r3, #32
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	2310      	movs	r3, #16
 8007374:	e7b0      	b.n	80072d8 <_printf_i+0xfc>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f043 0320 	orr.w	r3, r3, #32
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	2378      	movs	r3, #120	; 0x78
 8007380:	4828      	ldr	r0, [pc, #160]	; (8007424 <_printf_i+0x248>)
 8007382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007386:	e7e3      	b.n	8007350 <_printf_i+0x174>
 8007388:	0659      	lsls	r1, r3, #25
 800738a:	bf48      	it	mi
 800738c:	b2b6      	uxthmi	r6, r6
 800738e:	e7e6      	b.n	800735e <_printf_i+0x182>
 8007390:	4615      	mov	r5, r2
 8007392:	e7bb      	b.n	800730c <_printf_i+0x130>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	6826      	ldr	r6, [r4, #0]
 8007398:	6961      	ldr	r1, [r4, #20]
 800739a:	1d18      	adds	r0, r3, #4
 800739c:	6028      	str	r0, [r5, #0]
 800739e:	0635      	lsls	r5, r6, #24
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	d501      	bpl.n	80073a8 <_printf_i+0x1cc>
 80073a4:	6019      	str	r1, [r3, #0]
 80073a6:	e002      	b.n	80073ae <_printf_i+0x1d2>
 80073a8:	0670      	lsls	r0, r6, #25
 80073aa:	d5fb      	bpl.n	80073a4 <_printf_i+0x1c8>
 80073ac:	8019      	strh	r1, [r3, #0]
 80073ae:	2300      	movs	r3, #0
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	4615      	mov	r5, r2
 80073b4:	e7ba      	b.n	800732c <_printf_i+0x150>
 80073b6:	682b      	ldr	r3, [r5, #0]
 80073b8:	1d1a      	adds	r2, r3, #4
 80073ba:	602a      	str	r2, [r5, #0]
 80073bc:	681d      	ldr	r5, [r3, #0]
 80073be:	6862      	ldr	r2, [r4, #4]
 80073c0:	2100      	movs	r1, #0
 80073c2:	4628      	mov	r0, r5
 80073c4:	f7f8 fedc 	bl	8000180 <memchr>
 80073c8:	b108      	cbz	r0, 80073ce <_printf_i+0x1f2>
 80073ca:	1b40      	subs	r0, r0, r5
 80073cc:	6060      	str	r0, [r4, #4]
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	6123      	str	r3, [r4, #16]
 80073d2:	2300      	movs	r3, #0
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d8:	e7a8      	b.n	800732c <_printf_i+0x150>
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	462a      	mov	r2, r5
 80073de:	4649      	mov	r1, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	47d0      	blx	sl
 80073e4:	3001      	adds	r0, #1
 80073e6:	d0ab      	beq.n	8007340 <_printf_i+0x164>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	079b      	lsls	r3, r3, #30
 80073ec:	d413      	bmi.n	8007416 <_printf_i+0x23a>
 80073ee:	68e0      	ldr	r0, [r4, #12]
 80073f0:	9b03      	ldr	r3, [sp, #12]
 80073f2:	4298      	cmp	r0, r3
 80073f4:	bfb8      	it	lt
 80073f6:	4618      	movlt	r0, r3
 80073f8:	e7a4      	b.n	8007344 <_printf_i+0x168>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4632      	mov	r2, r6
 80073fe:	4649      	mov	r1, r9
 8007400:	4640      	mov	r0, r8
 8007402:	47d0      	blx	sl
 8007404:	3001      	adds	r0, #1
 8007406:	d09b      	beq.n	8007340 <_printf_i+0x164>
 8007408:	3501      	adds	r5, #1
 800740a:	68e3      	ldr	r3, [r4, #12]
 800740c:	9903      	ldr	r1, [sp, #12]
 800740e:	1a5b      	subs	r3, r3, r1
 8007410:	42ab      	cmp	r3, r5
 8007412:	dcf2      	bgt.n	80073fa <_printf_i+0x21e>
 8007414:	e7eb      	b.n	80073ee <_printf_i+0x212>
 8007416:	2500      	movs	r5, #0
 8007418:	f104 0619 	add.w	r6, r4, #25
 800741c:	e7f5      	b.n	800740a <_printf_i+0x22e>
 800741e:	bf00      	nop
 8007420:	080081cd 	.word	0x080081cd
 8007424:	080081de 	.word	0x080081de

08007428 <_sbrk_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d06      	ldr	r5, [pc, #24]	; (8007444 <_sbrk_r+0x1c>)
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	4608      	mov	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fa f8fe 	bl	8001634 <_sbrk>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_sbrk_r+0x1a>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_sbrk_r+0x1a>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	20001498 	.word	0x20001498

08007448 <__sread>:
 8007448:	b510      	push	{r4, lr}
 800744a:	460c      	mov	r4, r1
 800744c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007450:	f000 fafc 	bl	8007a4c <_read_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	bfab      	itete	ge
 8007458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800745a:	89a3      	ldrhlt	r3, [r4, #12]
 800745c:	181b      	addge	r3, r3, r0
 800745e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007462:	bfac      	ite	ge
 8007464:	6563      	strge	r3, [r4, #84]	; 0x54
 8007466:	81a3      	strhlt	r3, [r4, #12]
 8007468:	bd10      	pop	{r4, pc}

0800746a <__swrite>:
 800746a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800746e:	461f      	mov	r7, r3
 8007470:	898b      	ldrh	r3, [r1, #12]
 8007472:	05db      	lsls	r3, r3, #23
 8007474:	4605      	mov	r5, r0
 8007476:	460c      	mov	r4, r1
 8007478:	4616      	mov	r6, r2
 800747a:	d505      	bpl.n	8007488 <__swrite+0x1e>
 800747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007480:	2302      	movs	r3, #2
 8007482:	2200      	movs	r2, #0
 8007484:	f000 f9c8 	bl	8007818 <_lseek_r>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800748e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	4628      	mov	r0, r5
 800749a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	f000 b869 	b.w	8007574 <_write_r>

080074a2 <__sseek>:
 80074a2:	b510      	push	{r4, lr}
 80074a4:	460c      	mov	r4, r1
 80074a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074aa:	f000 f9b5 	bl	8007818 <_lseek_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	bf15      	itete	ne
 80074b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074be:	81a3      	strheq	r3, [r4, #12]
 80074c0:	bf18      	it	ne
 80074c2:	81a3      	strhne	r3, [r4, #12]
 80074c4:	bd10      	pop	{r4, pc}

080074c6 <__sclose>:
 80074c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ca:	f000 b8d3 	b.w	8007674 <_close_r>
	...

080074d0 <__swbuf_r>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	460e      	mov	r6, r1
 80074d4:	4614      	mov	r4, r2
 80074d6:	4605      	mov	r5, r0
 80074d8:	b118      	cbz	r0, 80074e2 <__swbuf_r+0x12>
 80074da:	6983      	ldr	r3, [r0, #24]
 80074dc:	b90b      	cbnz	r3, 80074e2 <__swbuf_r+0x12>
 80074de:	f7ff fa25 	bl	800692c <__sinit>
 80074e2:	4b21      	ldr	r3, [pc, #132]	; (8007568 <__swbuf_r+0x98>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	d12b      	bne.n	8007540 <__swbuf_r+0x70>
 80074e8:	686c      	ldr	r4, [r5, #4]
 80074ea:	69a3      	ldr	r3, [r4, #24]
 80074ec:	60a3      	str	r3, [r4, #8]
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	071a      	lsls	r2, r3, #28
 80074f2:	d52f      	bpl.n	8007554 <__swbuf_r+0x84>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	b36b      	cbz	r3, 8007554 <__swbuf_r+0x84>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	6820      	ldr	r0, [r4, #0]
 80074fc:	1ac0      	subs	r0, r0, r3
 80074fe:	6963      	ldr	r3, [r4, #20]
 8007500:	b2f6      	uxtb	r6, r6
 8007502:	4283      	cmp	r3, r0
 8007504:	4637      	mov	r7, r6
 8007506:	dc04      	bgt.n	8007512 <__swbuf_r+0x42>
 8007508:	4621      	mov	r1, r4
 800750a:	4628      	mov	r0, r5
 800750c:	f000 f948 	bl	80077a0 <_fflush_r>
 8007510:	bb30      	cbnz	r0, 8007560 <__swbuf_r+0x90>
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	3b01      	subs	r3, #1
 8007516:	60a3      	str	r3, [r4, #8]
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	701e      	strb	r6, [r3, #0]
 8007520:	6963      	ldr	r3, [r4, #20]
 8007522:	3001      	adds	r0, #1
 8007524:	4283      	cmp	r3, r0
 8007526:	d004      	beq.n	8007532 <__swbuf_r+0x62>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	07db      	lsls	r3, r3, #31
 800752c:	d506      	bpl.n	800753c <__swbuf_r+0x6c>
 800752e:	2e0a      	cmp	r6, #10
 8007530:	d104      	bne.n	800753c <__swbuf_r+0x6c>
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f000 f933 	bl	80077a0 <_fflush_r>
 800753a:	b988      	cbnz	r0, 8007560 <__swbuf_r+0x90>
 800753c:	4638      	mov	r0, r7
 800753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <__swbuf_r+0x9c>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <__swbuf_r+0x7a>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7cf      	b.n	80074ea <__swbuf_r+0x1a>
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <__swbuf_r+0xa0>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7ca      	b.n	80074ea <__swbuf_r+0x1a>
 8007554:	4621      	mov	r1, r4
 8007556:	4628      	mov	r0, r5
 8007558:	f000 f81e 	bl	8007598 <__swsetup_r>
 800755c:	2800      	cmp	r0, #0
 800755e:	d0cb      	beq.n	80074f8 <__swbuf_r+0x28>
 8007560:	f04f 37ff 	mov.w	r7, #4294967295
 8007564:	e7ea      	b.n	800753c <__swbuf_r+0x6c>
 8007566:	bf00      	nop
 8007568:	0800817c 	.word	0x0800817c
 800756c:	0800819c 	.word	0x0800819c
 8007570:	0800815c 	.word	0x0800815c

08007574 <_write_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	; (8007594 <_write_r+0x20>)
 8007578:	4604      	mov	r4, r0
 800757a:	4608      	mov	r0, r1
 800757c:	4611      	mov	r1, r2
 800757e:	2200      	movs	r2, #0
 8007580:	602a      	str	r2, [r5, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	f7fe f91c 	bl	80057c0 <_write>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_write_r+0x1e>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_write_r+0x1e>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20001498 	.word	0x20001498

08007598 <__swsetup_r>:
 8007598:	4b32      	ldr	r3, [pc, #200]	; (8007664 <__swsetup_r+0xcc>)
 800759a:	b570      	push	{r4, r5, r6, lr}
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	4606      	mov	r6, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	b125      	cbz	r5, 80075ae <__swsetup_r+0x16>
 80075a4:	69ab      	ldr	r3, [r5, #24]
 80075a6:	b913      	cbnz	r3, 80075ae <__swsetup_r+0x16>
 80075a8:	4628      	mov	r0, r5
 80075aa:	f7ff f9bf 	bl	800692c <__sinit>
 80075ae:	4b2e      	ldr	r3, [pc, #184]	; (8007668 <__swsetup_r+0xd0>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d10f      	bne.n	80075d4 <__swsetup_r+0x3c>
 80075b4:	686c      	ldr	r4, [r5, #4]
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075bc:	0719      	lsls	r1, r3, #28
 80075be:	d42c      	bmi.n	800761a <__swsetup_r+0x82>
 80075c0:	06dd      	lsls	r5, r3, #27
 80075c2:	d411      	bmi.n	80075e8 <__swsetup_r+0x50>
 80075c4:	2309      	movs	r3, #9
 80075c6:	6033      	str	r3, [r6, #0]
 80075c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075cc:	81a3      	strh	r3, [r4, #12]
 80075ce:	f04f 30ff 	mov.w	r0, #4294967295
 80075d2:	e03e      	b.n	8007652 <__swsetup_r+0xba>
 80075d4:	4b25      	ldr	r3, [pc, #148]	; (800766c <__swsetup_r+0xd4>)
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d101      	bne.n	80075de <__swsetup_r+0x46>
 80075da:	68ac      	ldr	r4, [r5, #8]
 80075dc:	e7eb      	b.n	80075b6 <__swsetup_r+0x1e>
 80075de:	4b24      	ldr	r3, [pc, #144]	; (8007670 <__swsetup_r+0xd8>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	bf08      	it	eq
 80075e4:	68ec      	ldreq	r4, [r5, #12]
 80075e6:	e7e6      	b.n	80075b6 <__swsetup_r+0x1e>
 80075e8:	0758      	lsls	r0, r3, #29
 80075ea:	d512      	bpl.n	8007612 <__swsetup_r+0x7a>
 80075ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ee:	b141      	cbz	r1, 8007602 <__swsetup_r+0x6a>
 80075f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075f4:	4299      	cmp	r1, r3
 80075f6:	d002      	beq.n	80075fe <__swsetup_r+0x66>
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f9ab 	bl	8007954 <_free_r>
 80075fe:	2300      	movs	r3, #0
 8007600:	6363      	str	r3, [r4, #52]	; 0x34
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	2300      	movs	r3, #0
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f043 0308 	orr.w	r3, r3, #8
 8007618:	81a3      	strh	r3, [r4, #12]
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	b94b      	cbnz	r3, 8007632 <__swsetup_r+0x9a>
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007628:	d003      	beq.n	8007632 <__swsetup_r+0x9a>
 800762a:	4621      	mov	r1, r4
 800762c:	4630      	mov	r0, r6
 800762e:	f000 f92b 	bl	8007888 <__smakebuf_r>
 8007632:	89a0      	ldrh	r0, [r4, #12]
 8007634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007638:	f010 0301 	ands.w	r3, r0, #1
 800763c:	d00a      	beq.n	8007654 <__swsetup_r+0xbc>
 800763e:	2300      	movs	r3, #0
 8007640:	60a3      	str	r3, [r4, #8]
 8007642:	6963      	ldr	r3, [r4, #20]
 8007644:	425b      	negs	r3, r3
 8007646:	61a3      	str	r3, [r4, #24]
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	b943      	cbnz	r3, 800765e <__swsetup_r+0xc6>
 800764c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007650:	d1ba      	bne.n	80075c8 <__swsetup_r+0x30>
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	0781      	lsls	r1, r0, #30
 8007656:	bf58      	it	pl
 8007658:	6963      	ldrpl	r3, [r4, #20]
 800765a:	60a3      	str	r3, [r4, #8]
 800765c:	e7f4      	b.n	8007648 <__swsetup_r+0xb0>
 800765e:	2000      	movs	r0, #0
 8007660:	e7f7      	b.n	8007652 <__swsetup_r+0xba>
 8007662:	bf00      	nop
 8007664:	20000024 	.word	0x20000024
 8007668:	0800817c 	.word	0x0800817c
 800766c:	0800819c 	.word	0x0800819c
 8007670:	0800815c 	.word	0x0800815c

08007674 <_close_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d06      	ldr	r5, [pc, #24]	; (8007690 <_close_r+0x1c>)
 8007678:	2300      	movs	r3, #0
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	f7f9 ffa3 	bl	80015ca <_close>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_close_r+0x1a>
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	b103      	cbz	r3, 800768e <_close_r+0x1a>
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	20001498 	.word	0x20001498

08007694 <__sflush_r>:
 8007694:	898a      	ldrh	r2, [r1, #12]
 8007696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769a:	4605      	mov	r5, r0
 800769c:	0710      	lsls	r0, r2, #28
 800769e:	460c      	mov	r4, r1
 80076a0:	d458      	bmi.n	8007754 <__sflush_r+0xc0>
 80076a2:	684b      	ldr	r3, [r1, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dc05      	bgt.n	80076b4 <__sflush_r+0x20>
 80076a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dc02      	bgt.n	80076b4 <__sflush_r+0x20>
 80076ae:	2000      	movs	r0, #0
 80076b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076b6:	2e00      	cmp	r6, #0
 80076b8:	d0f9      	beq.n	80076ae <__sflush_r+0x1a>
 80076ba:	2300      	movs	r3, #0
 80076bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076c0:	682f      	ldr	r7, [r5, #0]
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	d032      	beq.n	800772c <__sflush_r+0x98>
 80076c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	075a      	lsls	r2, r3, #29
 80076cc:	d505      	bpl.n	80076da <__sflush_r+0x46>
 80076ce:	6863      	ldr	r3, [r4, #4]
 80076d0:	1ac0      	subs	r0, r0, r3
 80076d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076d4:	b10b      	cbz	r3, 80076da <__sflush_r+0x46>
 80076d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076d8:	1ac0      	subs	r0, r0, r3
 80076da:	2300      	movs	r3, #0
 80076dc:	4602      	mov	r2, r0
 80076de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e0:	6a21      	ldr	r1, [r4, #32]
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b0      	blx	r6
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	d106      	bne.n	80076fa <__sflush_r+0x66>
 80076ec:	6829      	ldr	r1, [r5, #0]
 80076ee:	291d      	cmp	r1, #29
 80076f0:	d82c      	bhi.n	800774c <__sflush_r+0xb8>
 80076f2:	4a2a      	ldr	r2, [pc, #168]	; (800779c <__sflush_r+0x108>)
 80076f4:	40ca      	lsrs	r2, r1
 80076f6:	07d6      	lsls	r6, r2, #31
 80076f8:	d528      	bpl.n	800774c <__sflush_r+0xb8>
 80076fa:	2200      	movs	r2, #0
 80076fc:	6062      	str	r2, [r4, #4]
 80076fe:	04d9      	lsls	r1, r3, #19
 8007700:	6922      	ldr	r2, [r4, #16]
 8007702:	6022      	str	r2, [r4, #0]
 8007704:	d504      	bpl.n	8007710 <__sflush_r+0x7c>
 8007706:	1c42      	adds	r2, r0, #1
 8007708:	d101      	bne.n	800770e <__sflush_r+0x7a>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b903      	cbnz	r3, 8007710 <__sflush_r+0x7c>
 800770e:	6560      	str	r0, [r4, #84]	; 0x54
 8007710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007712:	602f      	str	r7, [r5, #0]
 8007714:	2900      	cmp	r1, #0
 8007716:	d0ca      	beq.n	80076ae <__sflush_r+0x1a>
 8007718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800771c:	4299      	cmp	r1, r3
 800771e:	d002      	beq.n	8007726 <__sflush_r+0x92>
 8007720:	4628      	mov	r0, r5
 8007722:	f000 f917 	bl	8007954 <_free_r>
 8007726:	2000      	movs	r0, #0
 8007728:	6360      	str	r0, [r4, #52]	; 0x34
 800772a:	e7c1      	b.n	80076b0 <__sflush_r+0x1c>
 800772c:	6a21      	ldr	r1, [r4, #32]
 800772e:	2301      	movs	r3, #1
 8007730:	4628      	mov	r0, r5
 8007732:	47b0      	blx	r6
 8007734:	1c41      	adds	r1, r0, #1
 8007736:	d1c7      	bne.n	80076c8 <__sflush_r+0x34>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0c4      	beq.n	80076c8 <__sflush_r+0x34>
 800773e:	2b1d      	cmp	r3, #29
 8007740:	d001      	beq.n	8007746 <__sflush_r+0xb2>
 8007742:	2b16      	cmp	r3, #22
 8007744:	d101      	bne.n	800774a <__sflush_r+0xb6>
 8007746:	602f      	str	r7, [r5, #0]
 8007748:	e7b1      	b.n	80076ae <__sflush_r+0x1a>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007750:	81a3      	strh	r3, [r4, #12]
 8007752:	e7ad      	b.n	80076b0 <__sflush_r+0x1c>
 8007754:	690f      	ldr	r7, [r1, #16]
 8007756:	2f00      	cmp	r7, #0
 8007758:	d0a9      	beq.n	80076ae <__sflush_r+0x1a>
 800775a:	0793      	lsls	r3, r2, #30
 800775c:	680e      	ldr	r6, [r1, #0]
 800775e:	bf08      	it	eq
 8007760:	694b      	ldreq	r3, [r1, #20]
 8007762:	600f      	str	r7, [r1, #0]
 8007764:	bf18      	it	ne
 8007766:	2300      	movne	r3, #0
 8007768:	eba6 0807 	sub.w	r8, r6, r7
 800776c:	608b      	str	r3, [r1, #8]
 800776e:	f1b8 0f00 	cmp.w	r8, #0
 8007772:	dd9c      	ble.n	80076ae <__sflush_r+0x1a>
 8007774:	6a21      	ldr	r1, [r4, #32]
 8007776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007778:	4643      	mov	r3, r8
 800777a:	463a      	mov	r2, r7
 800777c:	4628      	mov	r0, r5
 800777e:	47b0      	blx	r6
 8007780:	2800      	cmp	r0, #0
 8007782:	dc06      	bgt.n	8007792 <__sflush_r+0xfe>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e78e      	b.n	80076b0 <__sflush_r+0x1c>
 8007792:	4407      	add	r7, r0
 8007794:	eba8 0800 	sub.w	r8, r8, r0
 8007798:	e7e9      	b.n	800776e <__sflush_r+0xda>
 800779a:	bf00      	nop
 800779c:	20400001 	.word	0x20400001

080077a0 <_fflush_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	690b      	ldr	r3, [r1, #16]
 80077a4:	4605      	mov	r5, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	b913      	cbnz	r3, 80077b0 <_fflush_r+0x10>
 80077aa:	2500      	movs	r5, #0
 80077ac:	4628      	mov	r0, r5
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	b118      	cbz	r0, 80077ba <_fflush_r+0x1a>
 80077b2:	6983      	ldr	r3, [r0, #24]
 80077b4:	b90b      	cbnz	r3, 80077ba <_fflush_r+0x1a>
 80077b6:	f7ff f8b9 	bl	800692c <__sinit>
 80077ba:	4b14      	ldr	r3, [pc, #80]	; (800780c <_fflush_r+0x6c>)
 80077bc:	429c      	cmp	r4, r3
 80077be:	d11b      	bne.n	80077f8 <_fflush_r+0x58>
 80077c0:	686c      	ldr	r4, [r5, #4]
 80077c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0ef      	beq.n	80077aa <_fflush_r+0xa>
 80077ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077cc:	07d0      	lsls	r0, r2, #31
 80077ce:	d404      	bmi.n	80077da <_fflush_r+0x3a>
 80077d0:	0599      	lsls	r1, r3, #22
 80077d2:	d402      	bmi.n	80077da <_fflush_r+0x3a>
 80077d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d6:	f7ff f947 	bl	8006a68 <__retarget_lock_acquire_recursive>
 80077da:	4628      	mov	r0, r5
 80077dc:	4621      	mov	r1, r4
 80077de:	f7ff ff59 	bl	8007694 <__sflush_r>
 80077e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e4:	07da      	lsls	r2, r3, #31
 80077e6:	4605      	mov	r5, r0
 80077e8:	d4e0      	bmi.n	80077ac <_fflush_r+0xc>
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	059b      	lsls	r3, r3, #22
 80077ee:	d4dd      	bmi.n	80077ac <_fflush_r+0xc>
 80077f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f2:	f7ff f93a 	bl	8006a6a <__retarget_lock_release_recursive>
 80077f6:	e7d9      	b.n	80077ac <_fflush_r+0xc>
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <_fflush_r+0x70>)
 80077fa:	429c      	cmp	r4, r3
 80077fc:	d101      	bne.n	8007802 <_fflush_r+0x62>
 80077fe:	68ac      	ldr	r4, [r5, #8]
 8007800:	e7df      	b.n	80077c2 <_fflush_r+0x22>
 8007802:	4b04      	ldr	r3, [pc, #16]	; (8007814 <_fflush_r+0x74>)
 8007804:	429c      	cmp	r4, r3
 8007806:	bf08      	it	eq
 8007808:	68ec      	ldreq	r4, [r5, #12]
 800780a:	e7da      	b.n	80077c2 <_fflush_r+0x22>
 800780c:	0800817c 	.word	0x0800817c
 8007810:	0800819c 	.word	0x0800819c
 8007814:	0800815c 	.word	0x0800815c

08007818 <_lseek_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4d07      	ldr	r5, [pc, #28]	; (8007838 <_lseek_r+0x20>)
 800781c:	4604      	mov	r4, r0
 800781e:	4608      	mov	r0, r1
 8007820:	4611      	mov	r1, r2
 8007822:	2200      	movs	r2, #0
 8007824:	602a      	str	r2, [r5, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f7f9 fef6 	bl	8001618 <_lseek>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_lseek_r+0x1e>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_lseek_r+0x1e>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	20001498 	.word	0x20001498

0800783c <__swhatbuf_r>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	460e      	mov	r6, r1
 8007840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007844:	2900      	cmp	r1, #0
 8007846:	b096      	sub	sp, #88	; 0x58
 8007848:	4614      	mov	r4, r2
 800784a:	461d      	mov	r5, r3
 800784c:	da08      	bge.n	8007860 <__swhatbuf_r+0x24>
 800784e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	061a      	lsls	r2, r3, #24
 8007858:	d410      	bmi.n	800787c <__swhatbuf_r+0x40>
 800785a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800785e:	e00e      	b.n	800787e <__swhatbuf_r+0x42>
 8007860:	466a      	mov	r2, sp
 8007862:	f000 f905 	bl	8007a70 <_fstat_r>
 8007866:	2800      	cmp	r0, #0
 8007868:	dbf1      	blt.n	800784e <__swhatbuf_r+0x12>
 800786a:	9a01      	ldr	r2, [sp, #4]
 800786c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007874:	425a      	negs	r2, r3
 8007876:	415a      	adcs	r2, r3
 8007878:	602a      	str	r2, [r5, #0]
 800787a:	e7ee      	b.n	800785a <__swhatbuf_r+0x1e>
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	2000      	movs	r0, #0
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	b016      	add	sp, #88	; 0x58
 8007884:	bd70      	pop	{r4, r5, r6, pc}
	...

08007888 <__smakebuf_r>:
 8007888:	898b      	ldrh	r3, [r1, #12]
 800788a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800788c:	079d      	lsls	r5, r3, #30
 800788e:	4606      	mov	r6, r0
 8007890:	460c      	mov	r4, r1
 8007892:	d507      	bpl.n	80078a4 <__smakebuf_r+0x1c>
 8007894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	2301      	movs	r3, #1
 800789e:	6163      	str	r3, [r4, #20]
 80078a0:	b002      	add	sp, #8
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	ab01      	add	r3, sp, #4
 80078a6:	466a      	mov	r2, sp
 80078a8:	f7ff ffc8 	bl	800783c <__swhatbuf_r>
 80078ac:	9900      	ldr	r1, [sp, #0]
 80078ae:	4605      	mov	r5, r0
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff f8fb 	bl	8006aac <_malloc_r>
 80078b6:	b948      	cbnz	r0, 80078cc <__smakebuf_r+0x44>
 80078b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078bc:	059a      	lsls	r2, r3, #22
 80078be:	d4ef      	bmi.n	80078a0 <__smakebuf_r+0x18>
 80078c0:	f023 0303 	bic.w	r3, r3, #3
 80078c4:	f043 0302 	orr.w	r3, r3, #2
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	e7e3      	b.n	8007894 <__smakebuf_r+0xc>
 80078cc:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <__smakebuf_r+0x7c>)
 80078ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	6020      	str	r0, [r4, #0]
 80078d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	9b00      	ldr	r3, [sp, #0]
 80078dc:	6163      	str	r3, [r4, #20]
 80078de:	9b01      	ldr	r3, [sp, #4]
 80078e0:	6120      	str	r0, [r4, #16]
 80078e2:	b15b      	cbz	r3, 80078fc <__smakebuf_r+0x74>
 80078e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078e8:	4630      	mov	r0, r6
 80078ea:	f000 f8d3 	bl	8007a94 <_isatty_r>
 80078ee:	b128      	cbz	r0, 80078fc <__smakebuf_r+0x74>
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	81a3      	strh	r3, [r4, #12]
 80078fc:	89a0      	ldrh	r0, [r4, #12]
 80078fe:	4305      	orrs	r5, r0
 8007900:	81a5      	strh	r5, [r4, #12]
 8007902:	e7cd      	b.n	80078a0 <__smakebuf_r+0x18>
 8007904:	080068c5 	.word	0x080068c5

08007908 <memmove>:
 8007908:	4288      	cmp	r0, r1
 800790a:	b510      	push	{r4, lr}
 800790c:	eb01 0402 	add.w	r4, r1, r2
 8007910:	d902      	bls.n	8007918 <memmove+0x10>
 8007912:	4284      	cmp	r4, r0
 8007914:	4623      	mov	r3, r4
 8007916:	d807      	bhi.n	8007928 <memmove+0x20>
 8007918:	1e43      	subs	r3, r0, #1
 800791a:	42a1      	cmp	r1, r4
 800791c:	d008      	beq.n	8007930 <memmove+0x28>
 800791e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007926:	e7f8      	b.n	800791a <memmove+0x12>
 8007928:	4402      	add	r2, r0
 800792a:	4601      	mov	r1, r0
 800792c:	428a      	cmp	r2, r1
 800792e:	d100      	bne.n	8007932 <memmove+0x2a>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800793a:	e7f7      	b.n	800792c <memmove+0x24>

0800793c <__malloc_lock>:
 800793c:	4801      	ldr	r0, [pc, #4]	; (8007944 <__malloc_lock+0x8>)
 800793e:	f7ff b893 	b.w	8006a68 <__retarget_lock_acquire_recursive>
 8007942:	bf00      	nop
 8007944:	2000148c 	.word	0x2000148c

08007948 <__malloc_unlock>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__malloc_unlock+0x8>)
 800794a:	f7ff b88e 	b.w	8006a6a <__retarget_lock_release_recursive>
 800794e:	bf00      	nop
 8007950:	2000148c 	.word	0x2000148c

08007954 <_free_r>:
 8007954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007956:	2900      	cmp	r1, #0
 8007958:	d044      	beq.n	80079e4 <_free_r+0x90>
 800795a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800795e:	9001      	str	r0, [sp, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f1a1 0404 	sub.w	r4, r1, #4
 8007966:	bfb8      	it	lt
 8007968:	18e4      	addlt	r4, r4, r3
 800796a:	f7ff ffe7 	bl	800793c <__malloc_lock>
 800796e:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <_free_r+0x94>)
 8007970:	9801      	ldr	r0, [sp, #4]
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	b933      	cbnz	r3, 8007984 <_free_r+0x30>
 8007976:	6063      	str	r3, [r4, #4]
 8007978:	6014      	str	r4, [r2, #0]
 800797a:	b003      	add	sp, #12
 800797c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007980:	f7ff bfe2 	b.w	8007948 <__malloc_unlock>
 8007984:	42a3      	cmp	r3, r4
 8007986:	d908      	bls.n	800799a <_free_r+0x46>
 8007988:	6825      	ldr	r5, [r4, #0]
 800798a:	1961      	adds	r1, r4, r5
 800798c:	428b      	cmp	r3, r1
 800798e:	bf01      	itttt	eq
 8007990:	6819      	ldreq	r1, [r3, #0]
 8007992:	685b      	ldreq	r3, [r3, #4]
 8007994:	1949      	addeq	r1, r1, r5
 8007996:	6021      	streq	r1, [r4, #0]
 8007998:	e7ed      	b.n	8007976 <_free_r+0x22>
 800799a:	461a      	mov	r2, r3
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	b10b      	cbz	r3, 80079a4 <_free_r+0x50>
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	d9fa      	bls.n	800799a <_free_r+0x46>
 80079a4:	6811      	ldr	r1, [r2, #0]
 80079a6:	1855      	adds	r5, r2, r1
 80079a8:	42a5      	cmp	r5, r4
 80079aa:	d10b      	bne.n	80079c4 <_free_r+0x70>
 80079ac:	6824      	ldr	r4, [r4, #0]
 80079ae:	4421      	add	r1, r4
 80079b0:	1854      	adds	r4, r2, r1
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	6011      	str	r1, [r2, #0]
 80079b6:	d1e0      	bne.n	800797a <_free_r+0x26>
 80079b8:	681c      	ldr	r4, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	6053      	str	r3, [r2, #4]
 80079be:	4421      	add	r1, r4
 80079c0:	6011      	str	r1, [r2, #0]
 80079c2:	e7da      	b.n	800797a <_free_r+0x26>
 80079c4:	d902      	bls.n	80079cc <_free_r+0x78>
 80079c6:	230c      	movs	r3, #12
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	e7d6      	b.n	800797a <_free_r+0x26>
 80079cc:	6825      	ldr	r5, [r4, #0]
 80079ce:	1961      	adds	r1, r4, r5
 80079d0:	428b      	cmp	r3, r1
 80079d2:	bf04      	itt	eq
 80079d4:	6819      	ldreq	r1, [r3, #0]
 80079d6:	685b      	ldreq	r3, [r3, #4]
 80079d8:	6063      	str	r3, [r4, #4]
 80079da:	bf04      	itt	eq
 80079dc:	1949      	addeq	r1, r1, r5
 80079de:	6021      	streq	r1, [r4, #0]
 80079e0:	6054      	str	r4, [r2, #4]
 80079e2:	e7ca      	b.n	800797a <_free_r+0x26>
 80079e4:	b003      	add	sp, #12
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	20001490 	.word	0x20001490

080079ec <_realloc_r>:
 80079ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f0:	4680      	mov	r8, r0
 80079f2:	4614      	mov	r4, r2
 80079f4:	460e      	mov	r6, r1
 80079f6:	b921      	cbnz	r1, 8007a02 <_realloc_r+0x16>
 80079f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	4611      	mov	r1, r2
 80079fe:	f7ff b855 	b.w	8006aac <_malloc_r>
 8007a02:	b92a      	cbnz	r2, 8007a10 <_realloc_r+0x24>
 8007a04:	f7ff ffa6 	bl	8007954 <_free_r>
 8007a08:	4625      	mov	r5, r4
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	f000 f850 	bl	8007ab4 <_malloc_usable_size_r>
 8007a14:	4284      	cmp	r4, r0
 8007a16:	4607      	mov	r7, r0
 8007a18:	d802      	bhi.n	8007a20 <_realloc_r+0x34>
 8007a1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a1e:	d812      	bhi.n	8007a46 <_realloc_r+0x5a>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4640      	mov	r0, r8
 8007a24:	f7ff f842 	bl	8006aac <_malloc_r>
 8007a28:	4605      	mov	r5, r0
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d0ed      	beq.n	8007a0a <_realloc_r+0x1e>
 8007a2e:	42bc      	cmp	r4, r7
 8007a30:	4622      	mov	r2, r4
 8007a32:	4631      	mov	r1, r6
 8007a34:	bf28      	it	cs
 8007a36:	463a      	movcs	r2, r7
 8007a38:	f7fe fe84 	bl	8006744 <memcpy>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4640      	mov	r0, r8
 8007a40:	f7ff ff88 	bl	8007954 <_free_r>
 8007a44:	e7e1      	b.n	8007a0a <_realloc_r+0x1e>
 8007a46:	4635      	mov	r5, r6
 8007a48:	e7df      	b.n	8007a0a <_realloc_r+0x1e>
	...

08007a4c <_read_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d07      	ldr	r5, [pc, #28]	; (8007a6c <_read_r+0x20>)
 8007a50:	4604      	mov	r4, r0
 8007a52:	4608      	mov	r0, r1
 8007a54:	4611      	mov	r1, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	602a      	str	r2, [r5, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f7f9 fd98 	bl	8001590 <_read>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d102      	bne.n	8007a6a <_read_r+0x1e>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	b103      	cbz	r3, 8007a6a <_read_r+0x1e>
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	20001498 	.word	0x20001498

08007a70 <_fstat_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d07      	ldr	r5, [pc, #28]	; (8007a90 <_fstat_r+0x20>)
 8007a74:	2300      	movs	r3, #0
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	f7f9 fdb0 	bl	80015e2 <_fstat>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	d102      	bne.n	8007a8c <_fstat_r+0x1c>
 8007a86:	682b      	ldr	r3, [r5, #0]
 8007a88:	b103      	cbz	r3, 8007a8c <_fstat_r+0x1c>
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	bf00      	nop
 8007a90:	20001498 	.word	0x20001498

08007a94 <_isatty_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d06      	ldr	r5, [pc, #24]	; (8007ab0 <_isatty_r+0x1c>)
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	602b      	str	r3, [r5, #0]
 8007aa0:	f7f9 fdaf 	bl	8001602 <_isatty>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_isatty_r+0x1a>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_isatty_r+0x1a>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	20001498 	.word	0x20001498

08007ab4 <_malloc_usable_size_r>:
 8007ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab8:	1f18      	subs	r0, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfbc      	itt	lt
 8007abe:	580b      	ldrlt	r3, [r1, r0]
 8007ac0:	18c0      	addlt	r0, r0, r3
 8007ac2:	4770      	bx	lr

08007ac4 <_init>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr

08007ad0 <_fini>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr
